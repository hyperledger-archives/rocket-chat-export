{"msg":"swcurran","username":"rjones","ts":"2020-04-22T18:52:50.504Z","type":"subscription-role-added"}
{"msg":"Has left the channel.","username":"rjones","ts":"2020-04-22T18:53:00.809Z","type":"ul"}
{"msg":"Has joined the channel.","username":"ianco","ts":"2020-04-22T18:56:02.996Z","type":"uj"}
{"msg":"Has joined the channel.","username":"ajayjadhav","ts":"2020-04-23T11:33:29.719Z","type":"uj"}
{"msg":"Has joined the channel.","username":"adamjlemmon","ts":"2020-04-27T10:47:47.543Z","type":"uj"}
{"msg":"hey guys! Happy Monday. All setup here, we should be able to start meaningfully contributing this week.  Enjoy IIW. Speak soon.","username":"adamjlemmon","ts":"2020-04-27T10:58:34.802Z"}
{"msg":"Has joined the channel.","username":"EdEykholt","ts":"2020-04-27T14:29:47.000Z","type":"uj"}
{"msg":"Great!  FYI @swcurran checked in some updates over the weekend and I'll have some updates later today","username":"ianco","ts":"2020-04-27T14:32:15.817Z"}
{"msg":"Trying to make it more user- and developer-friendly","username":"ianco","ts":"2020-04-27T14:32:25.763Z"}
{"msg":"Fantastic thanks!  Will review what was merged earlier.","username":"adamjlemmon","ts":"2020-04-27T19:37:56.230Z"}
{"msg":"Has joined the channel.","username":"Audrius","ts":"2020-04-28T11:48:04.454Z","type":"uj"}
{"msg":"Hey @ianco , diving into the open issues now to find a best place to get started.  Shall I grab one of the earlier `Expansion to cover AIP 1.0...` ones that don't seem to have been started yet?","username":"adamjlemmon","ts":"2020-05-05T11:10:51.880Z"}
{"msg":"perhaps? `Test Harness Expansion to cover AIP 1.0 Protocol 0037-present-proof` https://github.com/bcgov/aries-agent-test-harness/issues/11","username":"adamjlemmon","ts":"2020-05-05T11:23:55.025Z"}
{"msg":"@sheldon.regular is currently working on the credential exchange, so present proof is probably a good one for you to work on","username":"ianco","ts":"2020-05-05T13:24:42.740Z"}
{"msg":"Has joined the channel.","username":"sheldon.regular","ts":"2020-05-05T13:24:42.777Z","type":"uj"}
{"msg":"Hi @adamjlemmon , yes it would be great to start on the Acceptance Tests for Present Proof. To start it would be great to focus on happy path tests. Maybe translate the RFC into a set of Gherkin Tests and get them reviewed before coding. Does that sound reasonable? ","username":"sheldon.regular","ts":"2020-05-05T13:34:13.730Z"}
{"msg":"I'll also be adding some Test Development Guidelines to the repo that will explain some of the things I have taken advantage of in the test harness, stuff like tags being used to manage test states and categorization, etc. ","username":"sheldon.regular","ts":"2020-05-05T13:35:12.870Z"}
{"msg":"Has joined the channel.","username":"jljordan_bcgov","ts":"2020-05-05T15:59:41.447Z","type":"uj"}
{"msg":"Hi @sheldon.regular great to e-meet you, sure that sounds like a good path forward to me, I can get started there and reach out as ready for review ","username":"adamjlemmon","ts":"2020-05-05T16:17:04.341Z"}
{"msg":"would be great to have a look at the guidelines as well you would recommend when avialable","username":"adamjlemmon","ts":"2020-05-05T16:17:21.845Z"}
{"msg":"@ianco - looking at the CSV.  A good exercise might be to go through the list and note everything for removal that is not part of the protocol, and assume that the backchannel will take care of the details, perhaps driven by parameters.  For example, for issue credential, remove the commands to do with DIDs, Schema and Cred Def, and perhaps add something like the type of credential (e.g. \"indy-zkp\") and the credential (e.g. \"education\"), and document for the backchannels what the \"education\" credential is (schema).  The backchannel for an agent that supports Indy would either do the prep work for issuing the education credential on start up, or as part of the \"offer-credential\" process.","username":"swcurran","ts":"2020-05-05T22:28:39.390Z"}
{"msg":"I think we also need to figure out a way to flow data from one action through to another. For example, the DID of the issuer could flow to the verifier later in a test run, when running \"present proof\" tests.  In theory, we could save and restore state, but that's not easy in Indy - ledger and wallet must match.","username":"swcurran","ts":"2020-05-05T22:31:35.124Z"}
{"msg":"@swcurran  yes that all makes sense.  It would be good to get the behave test scripts written before we start to hack the backchannel api (i.e. write the tests that make sense, the way we want to run the tests, and then make necessary changes to the backchannel).","username":"ianco","ts":"2020-05-06T17:55:48.595Z"}
{"msg":"Behave has a context that can be used to persist data between actions, that's what we've been using so far","username":"ianco","ts":"2020-05-06T17:56:22.710Z"}
{"msg":"e.g. setup a connection between agents as a pre-condition to issuing credentials -> save the connection info in behave's context","username":"ianco","ts":"2020-05-06T17:56:56.090Z"}
{"msg":"Re waiting.  Agree except some of the issue credential tests are out there, so they can be looked at/corrected now.","username":"swcurran","ts":"2020-05-06T17:59:27.242Z"}
{"msg":"FYI I've merged @sheldon.regular 's PR with the testing guidelines =  https://github.com/bcgov/aries-agent-test-harness/blob/master/TEST_DEV_GUIDE.md","username":"ianco","ts":"2020-05-06T18:48:26.031Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/aries-agent-test-harness?msg=y7rT6n2oNjf26jrnW) Totally agree with this. The inclusion of commands not part of the protocol muddies the water  a little. It will be a good exercise to get the backchannels to take care of stuff like this. ","username":"sheldon.regular","ts":"2020-05-07T14:10:33.042Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/aries-agent-test-harness?msg=y7rT6n2oNjf26jrnW","url":"https://chat.hyperledger.org/channel/aries-agent-test-harness?msg=y7rT6n2oNjf26jrnW","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/aries-agent-test-harness?msg=xxcwzEvdmZLXtLaP2) Not sure I agree with this approach. Unless there is no other way to flow data across steps, we should leave the control of this to the test harness itself. As Ian stated, Behave has a Feature and Scenario context where things can get stored for later retrieval in another step or even another scenario. I don't think you meant this, but it may be worth mentioning that scenarios shouldn't be dependent on the Agents state from a previous scenario. It is best practice to have test scenarios independent, and to have a scenario setup or create whatever state it needs so if executed independently it will be successful. ","username":"sheldon.regular","ts":"2020-05-07T14:17:19.917Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/aries-agent-test-harness?msg=xxcwzEvdmZLXtLaP2","url":"https://chat.hyperledger.org/channel/aries-agent-test-harness?msg=xxcwzEvdmZLXtLaP2","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@ianco - is the pico agent ready to be added to the ./manage script?","username":"swcurran","ts":"2020-05-07T18:07:38.386Z"}
{"msg":"I'm going to work on the README and some items to make the repo friendlier to new devs.  That will involve some changes to ./manage to make it easier to add backchannels without hacking into ./manage.  First thing is to get rid of automatically building VCX....holy crap that takes a long time.  A VCX docker image is desperately needed...","username":"swcurran","ts":"2020-05-07T18:43:07.065Z"}
{"msg":"Also - I'd like to change \"Alice\" to \"ACME\", where ACME is (generally) the issuer/verifier agent, and Bob is the holder/prover agent.  Any concerns with that?","username":"swcurran","ts":"2020-05-07T18:44:20.233Z"}
{"msg":"If you agree, we can do that with a repo search and replace.","username":"swcurran","ts":"2020-05-07T18:44:59.278Z"}
{"msg":"What does ACME stand for?","username":"sheldon.regular","ts":"2020-05-07T18:46:29.577Z"}
{"msg":"We will likely add the idea that agents are optional on runs --- e.g. \"Carol\" (another holder/prover) and \"Faber\" (another issuer/verifier).","username":"swcurran","ts":"2020-05-07T18:46:33.221Z"}
{"msg":"https://en.wikipedia.org/wiki/Acme_Corporation","username":"swcurran","ts":"2020-05-07T18:47:03.366Z"}
{"msg":"So I guess it should be \"Acme\"","username":"swcurran","ts":"2020-05-07T18:48:16.615Z"}
{"msg":"Doesn't really matter to me, but to be honest I prefer Alice. Unless you are just talking about Issue Credential Protocol only?","username":"sheldon.regular","ts":"2020-05-07T18:50:07.811Z"}
{"msg":"No it should be across the board.  It's meant to convey that \"Acme\" is an enterprise agent, and so that in general, Acme will also play an enterprise role.  Likewise, Bob a human-type being. ","username":"swcurran","ts":"2020-05-07T18:51:56.259Z"}
{"msg":"IMO makes it easier to write tests, and easier to run the tests that matter for an agent.","username":"swcurran","ts":"2020-05-07T18:52:44.075Z"}
{"msg":"A dev knows that if they have a (for example) mobile agent, they always want to run as Bob.","username":"swcurran","ts":"2020-05-07T18:53:26.420Z"}
{"msg":"When they write a backchannel, they only need to write the \"Bob\" role.","username":"swcurran","ts":"2020-05-07T18:54:54.176Z"}
{"msg":"Just thinking through the role reversal tests. Wondering if it makes sense with Acme.","username":"sheldon.regular","ts":"2020-05-07T18:55:30.632Z"}
{"msg":"That becomes a runtime decision.  Does what I'm testing operate as an issuer and prover?  If so, I need to run the tests in reverse.","username":"swcurran","ts":"2020-05-07T18:56:32.221Z"}
{"msg":"With Connection Bob can play the inviter or the invitee.","username":"sheldon.regular","ts":"2020-05-07T18:56:45.291Z"}
{"msg":"And with the issue Cred, the implementer is suppose to implement all the commands not just the ones for one side.","username":"sheldon.regular","ts":"2020-05-07T18:57:53.706Z"}
{"msg":"If their agent can't issue credentials, then there is no need.  Or vice versa.  But with the roles \"understand\" based on the names, it makes it much easier to decide what tests to run.","username":"swcurran","ts":"2020-05-07T18:59:06.213Z"}
{"msg":"And what tests/roles to implement","username":"swcurran","ts":"2020-05-07T18:59:23.420Z"}
{"msg":"With Connection that makes sense, but right now, the existing mobile agents can't be inviters, only invitees.","username":"swcurran","ts":"2020-05-07T19:00:37.921Z"}
{"msg":"So we need to as flexible as possible.","username":"swcurran","ts":"2020-05-07T19:01:07.162Z"}
{"msg":"So I asked this before, but maybe I asked the wrong way. Are people going to implement a protocol based on one role in that protocol. I believe the answer was no, they had to fully implement the protocol. ","username":"sheldon.regular","ts":"2020-05-07T19:02:54.445Z"}
{"msg":"No, they may do either.","username":"swcurran","ts":"2020-05-07T19:03:22.840Z"}
{"msg":"ok","username":"sheldon.regular","ts":"2020-05-07T19:03:39.599Z"}
{"msg":"This is why the concept of \"AUT\" is impossible. Any particular test run will have a different answer for that.","username":"swcurran","ts":"2020-05-07T19:05:23.067Z"}
{"msg":"33 minutes in to my session on Play with VON and VCX is finally built.  Ridiculous...","username":"swcurran","ts":"2020-05-07T19:07:39.775Z"}
{"msg":"So lets get rid of the names altogether. and just call them by their roles. ","username":"sheldon.regular","ts":"2020-05-07T19:09:32.201Z"}
{"msg":"ie Issuer and Holder","username":"sheldon.regular","ts":"2020-05-07T19:10:00.185Z"}
{"msg":"To me it seems to be a case for knowing the AUT. In each run you want to know which role the AUT is playing at that time. ","username":"sheldon.regular","ts":"2020-05-07T19:12:06.567Z"}
{"msg":"No, it needs to be updated to the latest pico (basically pico has been rewritten since december) and dockerized","username":"ianco","ts":"2020-05-07T19:55:45.742Z"}
{"msg":"Buy a faster machine ...  with a fan!","username":"ianco","ts":"2020-05-07T19:56:38.063Z"}
{"msg":"That was on Play with Docker.  I think they have machines with fans.  Maybe not though.","username":"swcurran","ts":"2020-05-07T20:05:31.798Z"}
{"msg":"Got it to run on Play with VON --- w00t!  Easy to get a demo going.  I'm seeing some features that we'll want to make this easier to use.  ","username":"swcurran","ts":"2020-05-07T20:05:35.495Z"}
{"msg":"The problem with Issuer and Holder is that its a fuzzy line, particularly as the roles are actually at a protocol level.  By using this mechanism we imply that \"Acme will do things that enterprise agents do\", but we've left it fuzzy.\n\nWe could go with \"enterprise\" and \"personal\" or something like that, but I think \"Acme\" and \"Bob\" are better, and not so restrictive.","username":"swcurran","ts":"2020-05-07T20:08:58.555Z"}
{"msg":"The AUT could be added as a run time argument, but I don't think that's crucial.","username":"swcurran","ts":"2020-05-07T20:09:18.341Z"}
{"msg":"PWD is pretty slow ...","username":"ianco","ts":"2020-05-07T20:09:37.240Z"}
{"msg":"The VCX build IS very slow but if you're running on your local you should only need to build it once","username":"ianco","ts":"2020-05-07T20:10:01.234Z"}
{"msg":"The goal is many many people use this for many different reasons -- ultimately testing interop, and in such a case, there isn't a specific AUT, we're making sure that all the tests work,./","username":"swcurran","ts":"2020-05-07T20:10:07.654Z"}
{"msg":"The backchannel gets added to a cached image when you update the backchannel","username":"ianco","ts":"2020-05-07T20:10:22.207Z"}
{"msg":"... so updates are pretty quick, if you're the VCX backchannel developer guy","username":"ianco","ts":"2020-05-07T20:10:50.450Z"}
{"msg":"The extra VCX stuff could be added to a published base image for sure","username":"ianco","ts":"2020-05-07T20:11:34.319Z"}
{"msg":"Yes - the joy od docker!  I'm making it so you can build some or all, so that for the quick demo run, we skip the vcx build.","username":"swcurran","ts":"2020-05-07T20:12:03.668Z"}
{"msg":"Yes - the joy of docker!  I'm making it so you can build some or all, so that for the quick demo run, we skip the vcx build.","username":"swcurran","ts":"2020-05-07T20:12:03.668Z"}
{"msg":"... the other issue is that when we publish the von image, we strip out a lot of the development tools, so those need ot be added back in to build VCX","username":"ianco","ts":"2020-05-07T20:12:46.218Z"}
{"msg":"What we can also do is a \"vcxX.Y\" dockerfile so that we can have a pre-built image.","username":"swcurran","ts":"2020-05-07T20:12:48.539Z"}
{"msg":"Yes - we have can have a VCX image that everyone except the VCX Backchannel Maintainer uses.","username":"swcurran","ts":"2020-05-07T20:13:33.168Z"}
{"msg":"I see what your saying, but flexibility = complexity. We just need to be as flexible as makes it reasonable for 80% of users. When you say many different reasons, that worries me a little... the goal I've been working with is that this is used to verify that a new or updated Agent conforms to the Interop Profile. In that case, I still see the AUT making sense, especially if they are going to do multiple runs, switching their Agent to different roles. Looking back on the results of their runs, they are going to want to know which role it played in that specific execution. \nAlso if we may want to store and use the result data in some sort of long term trends and analytics across agents and executions, then understanding which role the new or updated agents played may be important. Though this long term amalgamated reporting is a requirement I haven't heard about and have only thought about.","username":"sheldon.regular","ts":"2020-05-07T20:48:34.006Z"}
{"msg":"The test harness is more than that.  There are definitely more use cases then just AIP.  Ad hoc testing to find out if an update works with other all of the other agents out there means running the tests for each other agent.  If a single agent becomes the reference agent and conformance is defined as capability with that agent, then it's possible each independent agent could just test against that. I think that will take a long time and in the meantime, we want to run against all the agents we can find.","username":"swcurran","ts":"2020-05-07T21:41:51.868Z"}
{"msg":"I don't think the code complexity goes up because of  this.  The ability to easily run the tests goes up.","username":"swcurran","ts":"2020-05-07T21:42:33.824Z"}
{"msg":"For example, almost immediately, we need a \"-f config_file\" option that will have the list of options to use.","username":"swcurran","ts":"2020-05-07T21:43:25.496Z"}
{"msg":"I'm guessing we will want more info in the output to be able to easily create such a file.","username":"swcurran","ts":"2020-05-07T21:44:19.552Z"}
{"msg":"These are things we'll evolve as we use this and want to simplify things.  But these are all just eye-candy around the core.","username":"swcurran","ts":"2020-05-07T21:44:48.735Z"}
{"msg":"@ianco @swcurran FYI, for now, the \"test\" that sets up the Schema and Cred Def, etc, is moved into a Background Section. This means it runs for every scenario setting that stuff up.  It was the path of least resistance. If it makes sense, we can go back later and move it totally into the backchannel. This is what it looks like in the feature file.\n  Background: create a schema and credential definition in order to issue a credential\n    Given \"Acme\" has a public did\n    When \"Acme\" creates a new schema\n    And \"Acme\" creates a new credential definition\n    Then \"Acme\" has an existing schema\n    And \"Acme\" has an existing credential definition","username":"sheldon.regular","ts":"2020-05-08T19:09:39.829Z"}
{"msg":"k - no problem.  Don't think it moves us forward.","username":"swcurran","ts":"2020-05-08T19:10:21.954Z"}
{"msg":"Has joined the channel.","username":"TimoGlastra","ts":"2020-05-09T22:42:16.733Z","type":"uj"}
{"msg":"aries-framework-javascript is currently under development.  If we want to add conformance testing to the framework is adding a backchannel to the agent-test-harness repo for framework javascript the recommended approach at the moment? Or should protocol-test-suite be used for now? Is this a direct replacement for protocol test-suite?","username":"TimoGlastra","ts":"2020-05-10T08:56:42.863Z"}
{"msg":"Hi Timo - interesting questions.  We are building out AATH so that we can do interop testing between any libraries.  It will lead to conformance testing as the community converges on a reference agent to test against. For now that is probably aca-py, but doesn't have to be.  But you can definitely test against ACA-Py today and we're going to be adding more backchannels - notably one for aries-framework-dotnet.\n\nAs to the state of protocol test suite - we're not a proponent of the APTS approach, hence why we started this effort. We think the ability to mix and match agents in tests is more important than just going against one test suite.  AATH is not a direct replacement for APTS.  The initial creator of APTS has left the community, and AFAIK there is only one or two other contributors.","username":"swcurran","ts":"2020-05-11T13:43:32.795Z"}
{"msg":"Thank you for the detailed explanation, @swcurran. I just learned about the test harness and it seemed like a good approach to me so thats why I was curious. I will look into adding a backchannel for aries-framework-javascript. As the backchannel for the javascript framework will be written in javascript instead of python making an open-api-spec/swagger would ease creating a new backchannel. This way the server boilerplate could be generated using tools such as openapi-generator. don't know if it could be generated from the operations csv, but it would be useful to have nevertheless. Do you share this vision with me?","username":"TimoGlastra","ts":"2020-05-12T10:10:25.435Z"}
{"msg":"Thank you for the detailed explanation, @swcurran . I just learned about the test harness and it seemed like a good approach to me so thats why I was curious. I will look into adding a backchannel for aries-framework-javascript. As the backchannel for the javascript framework will be written in javascript instead of python making an open-api-spec/swagger would ease creating a new backchannel. This way the server boilerplate could be generated using tools such as openapi-generator. don't know if it could be generated from the operations csv, but it would be useful to have nevertheless. Do you share this vision with me?","username":"TimoGlastra","ts":"2020-05-12T10:10:25.435Z"}
{"msg":"Yes - that's sounds right to me.  @ianco and @sheldon.regular -- your thoughts?","username":"swcurran","ts":"2020-05-12T13:45:14.496Z"}
{"msg":"Yes, I like that idea. ","username":"sheldon.regular","ts":"2020-05-12T14:46:35.552Z"}
{"msg":"@sheldon.regular @ianco -- updated ./manage to be able to pass in a behave.ini file to try to get around the problem of passing in complex tags.  However, if with that, I can't get the \"not @wip\" syntax working with behave.  Verified the behave.ini is working and I can pass different combination of config settings in, but that does not work.\n\nI'm trying to say `tags = @AcceptanceTest and not @wip`, but whenever I use the \"not\", none of the tests run.  Checked examples on the internet and that's supposed to work...\n\n","username":"swcurran","ts":"2020-05-14T00:00:11.772Z"}
{"msg":"I'm thinking that I change the tag to \"@Acceptancewip\" so it doesn't pick those up on a run.  Any other ideas?","username":"swcurran","ts":"2020-05-14T00:01:01.523Z"}
{"msg":"I'm planning on reorging the backchannels folder next, to put each agent/agent-framwork in their own folder, with (possibly) multiple dockerfiles.","username":"swcurran","ts":"2020-05-14T00:01:48.708Z"}
{"msg":"Also improved the shutdown to speed it up a bit.","username":"swcurran","ts":"2020-05-14T00:02:41.749Z"}
{"msg":"Did you try the ~ instead of not. This sequence seems to work for me. ```behave --tags=~@wip --tags=@AcceptanceTest -k```","username":"sheldon.regular","ts":"2020-05-14T14:24:55.925Z"}
{"msg":"@swcurran Did you try the ~ instead of not. This sequence seems to work for me. ```behave --tags=~@wip --tags=@AcceptanceTest -k```","username":"sheldon.regular","ts":"2020-05-14T14:24:55.925Z"}
{"msg":"I'll try it! Didn't find that in any docs...","username":"swcurran","ts":"2020-05-14T14:44:26.165Z"}
{"msg":"I approved the PR, but you may want to get that not @wip stuff in first before you merge.","username":"sheldon.regular","ts":"2020-05-14T16:01:07.017Z"}
{"msg":"Yup!","username":"swcurran","ts":"2020-05-14T16:06:17.364Z"}
{"msg":"Has joined the channel.","username":"redongjun","ts":"2020-05-24T06:22:49.004Z","type":"uj"}
{"msg":"Has joined the channel.","username":"AmolDeshpande","ts":"2020-06-03T10:35:44.637Z","type":"uj"}
{"msg":"Has joined the channel.","username":"Jintolus","ts":"2020-06-03T13:49:16.086Z","type":"uj"}
{"msg":"User <em>User_1</em> added by <em>TimoGlastra</em>.","username":"TimoGlastra","ts":"2020-06-29T18:28:09.217Z","type":"au"}
{"msg":"User <em>User_2</em> added by <em>TimoGlastra</em>.","username":"TimoGlastra","ts":"2020-06-29T18:28:09.238Z","type":"au"}
{"msg":"User <em>User_3</em> added by <em>TimoGlastra</em>.","username":"TimoGlastra","ts":"2020-06-29T18:28:09.251Z","type":"au"}
{"msg":"Hi AATH implementors, in the next two months we at ANIMO will join you in building out the test harness. We'll work on the 'code with us' challenge from BCGov and create a backchannel for Aries Framework .NET. I'll be doing this with my colleagues @AnaGoessens  and @karimStekelenburg1 .","username":"TimoGlastra","ts":"2020-06-29T18:49:29.674Z"}
{"msg":"At the moment we're working on Aries Framework JavaScript and are just getting familiar with the test harness and its codebase. We're excited to work with you and will start implementing in the coming week.","username":"TimoGlastra","ts":"2020-06-29T18:49:45.014Z"}
{"msg":"Looking at the endpoints in the \"Backchannel API\" tab in the spreadsheet (https://docs.google.com/spreadsheets/d/1r40t6TRAoMrmDO7vM_o6eOmk6jvxUr189wZVNBcdgVs/edit#gid=1282646420) and the README from the aries-backchannels (https://github.com/bcgov/aries-agent-test-harness/tree/master/aries-backchannels#standard-backchannel-api) there is nothing documented about the `/agent/response` endpoint. However looking at the code this endpoint is definitely used. Is the documentation about this endpoint outdated? Also looking at the operations csv/spreadsheet there are `/agent/response` requests marked as POST requests, however the code only listens for GET requests for `/agent/response` (https://github.com/bcgov/aries-agent-test-harness/blob/master/aries-backchannels/python/agent_backchannel.py#L160-L164). Is the code leading in this case? And if so, would you like me to update the documentation/spreadsheet?","username":"TimoGlastra","ts":"2020-06-30T19:28:45.529Z"}
{"msg":"The `/agent/response` endpoint isn't used and can be removed from the code.  (I thought it was previously removed but I guess I' mistaken!)","username":"ianco","ts":"2020-07-01T16:35:14.488Z"}
{"msg":"I did remove the endpoints that are not used in an earlier PR - about a month ago.","username":"swcurran","ts":"2020-07-01T17:30:34.866Z"}
{"msg":"Looking at the commit history it was added back in a month ago. But if the endpoint is not used and needed I won't implement it","username":"TimoGlastra","ts":"2020-07-01T18:15:09.481Z"}
{"msg":"https://github.com/bcgov/aries-agent-test-harness/commit/ca011c76da90134c8c0d176bd5f9ff6b25d31595","username":"TimoGlastra","ts":"2020-07-01T18:15:26.045Z"}
{"msg":"Dang...","username":"swcurran","ts":"2020-07-01T18:50:12.104Z"}
{"msg":"Hi Guys, Welcome @TimoGlastra. Just wanted to mention that I added the /agent/response GETs back in because they are being used in the tests to retrieve the webhook info.","username":"sheldon.regular","ts":"2020-07-02T16:24:03.136Z"}
{"msg":"Hi Guys, small hiccup with implementing the connection operations. The test harness separates the receiving and accepting of an invitation. Framework .NET can’t receive a connection without accepting it. Approach I started out with is storing the invitation in memory until accept-invitation operation is received and then passing it to the framework. However the connection id is generated on the accept-invitation step, which means I can’t return the connection id on the receive-invitation step.\n\nI see multiple ways to resolve this, each requiring a change in a different place:\n1. change the internals of .NET framework to allow to pass a connection id when accepting - would need to discuss with Tomislav\n2. Create the connection and connection request message, but keep the connection-request message in memory without sending until the accept-invitation operation is received (technically this makes the .NET framework state invalid).\n3. Same as step 2, but already send it (and do nothing when accept-invitation is received). (Same as VCX I think)\n4. Change the test harness client to remove receive-invitation.\n\nI would appreciate hearing your thoughts and opinions on this","username":"TimoGlastra","ts":"2020-07-07T11:49:54.972Z"}
{"msg":"F``ine with all approaches, but If you’d ask me I think I’ll lean towards removing the receive-invitation operation. It would make the .NET implementation simpler (no in memory storage of messages and invitations needed to keep track of actual state vs expected state) and also because the receive-invitation is imo more an aca-py specific operation than part of the connection protocol.","username":"TimoGlastra","ts":"2020-07-07T11:50:04.450Z"}
{"msg":"Fine with all approaches, but If you’d ask me I think I’ll lean towards removing the receive-invitation operation. It would make the .NET implementation simpler (no in memory storage of messages and invitations needed to keep track of actual state vs expected state) and also because the receive-invitation is imo more an aca-py specific operation than part of the connection protocol.","username":"TimoGlastra","ts":"2020-07-07T11:50:04.450Z"}
{"msg":"@TimoGlastra  Just so I'm clear we are talking about the same things, which two Gherkin lines are in question here? I'm assuming it's lines 3 and 4?\n```\n      When \"Acme\" generates a connection invitation (create-invitation)(RFC: send invitation)\n      And \"Bob\" receives the connection invitation (receive-invitation)(RFC: receive invitation)\n      And \"Bob\" sends a connection request to \"Acme\" (accept-invitation)(RFC: send connection-request)\n      And \"Acme\" receives the connection request (nothing done here in tests except check connection status of inviter)(RFC: receive connection-request)\n      And \"Acme\" sends a connection response to \"Bob\" (accept-request)(RFC: send connection-response)\n      And \"Bob\" receives the connection response (nothing done here in tests except check connection status of invitee)(RFC: receive connection-response)\n      And \"Bob\" sends <message> to \"Acme\" (send-ping)(RFC: send ack)\n      Then \"Acme\" and \"Bob\" have a connection (check connection status of both players)\n```","username":"sheldon.regular","ts":"2020-07-07T12:43:54.136Z"}
{"msg":"I'm talking about lines 2 and 3 here. So receive-invitation and accept-invitation","username":"TimoGlastra","ts":"2020-07-07T13:42:32.075Z"}
{"msg":"My guess is that we do step 4 as indicated. That is an ACA-Py-ism, I think and the ACA-Py backchannel can address it.","username":"swcurran","ts":"2020-07-07T13:46:34.227Z"}
{"msg":"Or to put it another way --- what does the RFC say?  Is there a need for that step per the RFC.","username":"swcurran","ts":"2020-07-07T13:47:08.184Z"}
{"msg":"This may put some strain on the RFC verbiage. The way the Gherkin is written is what that RFC says. There are 3 distinct parts to the protocol, the invitation, the connection request, and the connection response. If I'm reading @TimoGlastra right, there is a blurring of the lines between invitation and connection request in the .Net Agent. @TimoGlastra, what happens in the .Net Agent for lines 3 and 4?","username":"sheldon.regular","ts":"2020-07-07T13:58:15.503Z"}
{"msg":"I see what you mean. For line 3 a connection request is send to the other agent. For line 4 nothing happens (this is already done A2A via didcomm)","username":"TimoGlastra","ts":"2020-07-07T15:20:11.100Z"}
{"msg":"hmmm, so it sounds like you are fine. In the 2nd line of gherkin, could you not just do both receive-invitation and accept-invitation in the .Net backchannel?  Just because line 3 calls the accept-invitation from the aca-py admin API doesn't mean you have to on your side. You would just catch the name of the operation and call whatever accomplishes the goal of line 3. This was the first test written and it was more closely matched to what the aca-py admin api expects in terms of operations. I could of (and probably will later) change the operation to send-connection-request, then catch that in the aca-py backchannel and change the operation to accept-invitation.","username":"sheldon.regular","ts":"2020-07-07T15:40:43.543Z"}
{"msg":"Has joined the channel.","username":"nc-crtr_linx","ts":"2020-07-07T15:57:42.625Z","type":"uj"}
{"msg":"Yeah that would work. Just wanted to be sure before doing this as it makes the actual process different than the described process","username":"TimoGlastra","ts":"2020-07-07T16:30:02.358Z"}
{"msg":"Good conversation here as things brings out good issues.  There are 4 (or more) things that could be wrong:\n\n- The RFC may not be clear or may even be incorrect - correct it.\n- The Test case may not follow the RFC correctly - correct it\n- One of the Backchannels may not be implemented correctly. - correct one, the other or both.\n\nWe need to evaluate where a discrepancy is -- as you did above.\n\nI'm sure I'm preaching to the choir on this, but this might be good to add to the documentation (if not there already), to foster the right discussion as we add test cases and backchannels.","username":"swcurran","ts":"2020-07-07T20:49:00.854Z"}
{"msg":"After rereading the connection protocol RFC my conclusion is that both the RFC and the Gherkin test are correct (I withdraw my previous statement) and the discrepancy lies in the fact that the test harness expects a connection id as a response to the receive-invitation operation, which the .NET framework does not support.","username":"TimoGlastra","ts":"2020-07-09T21:24:18.942Z"}
{"msg":"So we should either send the request in the receive-invitation (diverge from the narrative of the test) OR change the internals of .NET OR don’t pass the connection id, but pass the invitation id as the id for the accept-invitation operation. For the narrative this makes sense: Receive this invitation with this id, then accept the invitation with this invitation id. However it makes the story more complex as the ID changes from invitation to connection id in the middle of the story.","username":"TimoGlastra","ts":"2020-07-09T21:24:25.175Z"}
{"msg":"For now I’ll create, but not send the connection request message in the receive-invitation operation. This will make it work with both the .NET framework and the test harness. But I’m open to change this for an alternative solution.","username":"TimoGlastra","ts":"2020-07-09T21:24:31.087Z"}
{"msg":"My $0.02CDN -- I think the transition from invitation ID to connection ID mid-test is reasonable. In an agent, both are \"first class citizens\" that agent developers will recognize.  An invitation ID is a single-use (or single-purpose) concept during the connection establishment. Thereafter, each party records and tracks the connection ID, and that is tracked as part of subsequent protocols.  We also might name the ID for the participants \"Acme has a connection with Bob\" implies ACME has (or creates) a connectionID called \"Bob\", and it is for the backchannel to track that.  [Note - it probably is already doing that...].\n\nThe other major concept/ID that I think should be first class in tests is a \"protocolID\" or \"threadID\" (could have a different, protocol specific names -- \"cred-issue-id\", \"pres-proof-id\", etc.).  This is what is tracked over the life of the execution of a protocol, and then is gone (unlike a connection). It is associated with a connectionID (who the other party is).  The \"cred_ex_Id\" in ACA-Py is really a threadID.  The ID name could be unique for each protocol, and could be named for the protocol being executed.","username":"swcurran","ts":"2020-07-10T00:03:14.836Z"}
{"msg":"Awesome to see these conversations.  This will really help get us to something generally useful.","username":"swcurran","ts":"2020-07-10T00:03:35.769Z"}
{"msg":"Has joined the channel.","username":"JelleFm","ts":"2020-07-10T11:43:20.280Z","type":"uj"}
{"msg":"Has joined the channel.","username":"Moshe7","ts":"2020-07-31T20:54:36.803Z","type":"uj"}
{"msg":"Has joined the channel.","username":"Mahadevan 3","ts":"2020-08-05T20:37:10.329Z","type":"uj"}
{"msg":"Has joined the channel.","username":"lauravuo-techlab","ts":"2020-08-11T06:01:47.330Z","type":"uj"}
{"msg":"Has joined the channel.","username":"blaz","ts":"2020-08-11T13:57:06.081Z","type":"uj"}
{"msg":"Has joined the channel.","username":"lalchandran","ts":"2020-08-18T16:35:25.720Z","type":"uj"}
{"msg":"I have some specific questions around running aries-mobileagent-xamarin. Which is the right channel to ask?","username":"lalchandran","ts":"2020-08-18T16:35:25.974Z"}
{"msg":"I’d go with #aries-framework-dotnet , aries-mobileagent-xamarin is built on top of that","username":"TimoGlastra","ts":"2020-08-18T16:39:02.560Z"}
{"msg":"Super. Thanks @TimoGlastra","username":"lalchandran","ts":"2020-08-18T16:39:20.385Z"}
{"msg":"FYI @TimoGlastra -- @WadeBarnes is going to be addressing some DCO issues within the AATH repo. Beware that there will be a bit of history rewriting that may require you to stash/apply your current work.","username":"swcurran","ts":"2020-08-19T16:48:00.178Z"}
{"msg":"Has joined the channel.","username":"WadeBarnes","ts":"2020-08-19T16:48:00.258Z","type":"uj"}
{"msg":"We've merged all the pending PRs.","username":"swcurran","ts":"2020-08-19T16:48:08.366Z"}
{"msg":"Sign-offs fixed, history rewritten.  Starting transfer to Hyperledger.","username":"WadeBarnes","ts":"2020-08-19T17:39:54.905Z"}
{"msg":"Transfer complete; https://github.com/hyperledger/aries-agent-test-harness","username":"WadeBarnes","ts":"2020-08-19T17:56:03.330Z"}
{"msg":"w00t!!!","username":"swcurran","ts":"2020-08-19T20:42:27.542Z"}
{"msg":"Nice","username":"swcurran","ts":"2020-08-19T20:42:29.381Z"}
{"msg":"Thanks for that!","username":"swcurran","ts":"2020-08-19T20:42:36.727Z"}
{"msg":"Has joined the channel.","username":"dipghosh","ts":"2020-08-21T08:22:18.587Z","type":"uj"}
{"msg":"Hi all, I have set up the vc-authn-oidc on the web and its working fine and we can do log in on the web, Is there any sample app which does the same as with vc-authn-oidc.","username":"dipghosh","ts":"2020-08-21T08:22:19.427Z"}
{"msg":"Has joined the channel.","username":"sebastian","ts":"2020-09-01T16:00:30.326Z","type":"uj"}
{"msg":"Has joined the channel.","username":"kukgini","ts":"2020-09-03T06:15:15.549Z","type":"uj"}
{"msg":"Has joined the channel.","username":"hcsatish","ts":"2020-09-20T16:04:31.879Z","type":"uj"}
{"msg":"Hi Everyone, I wanted to make you aware of a new set of test scenarios that are under development for Revocation. The Gherkin has been defined and the feature file submitted to the repo. I’m looking for others to review the scenarios, looking for inaccuracies, cases that may be missed, and even better ways to express any steps. Any comments and opinions would be greatly appreciated. These scenarios may change a little naturally as coding continues, some may even merge together if it is deemed efficient to combine. The feature file is located here, https://github.com/hyperledger/aries-agent-test-harness/blob/master/aries-test-harness/features/0011-0183-revocation.feature","username":"sheldon.regular","ts":"2020-09-21T19:20:01.812Z"}
{"msg":"Has joined the channel.","username":"chakshujain","ts":"2020-10-02T14:50:43.808Z","type":"uj"}
{"msg":"Has joined the channel.","username":"SamB","ts":"2020-10-05T05:27:19.951Z","type":"uj"}
{"msg":"Has joined the channel.","username":"lmtriet","ts":"2020-10-24T14:41:53.309Z","type":"uj"}
{"msg":"FYI github actions have been added to the AATH repository:  https://github.com/hyperledger/aries-agent-test-harness/actions","username":"ianco","ts":"2020-11-07T13:49:38.243Z"}
{"msg":"The test harness runs automatically every day running 3 scenarios:  acapy/acapy, dotnet/dotnet and acapy/dotnet","username":"ianco","ts":"2020-11-07T13:50:16.179Z"}
{"msg":"The agents are built from their respective github repo's, master branch","username":"ianco","ts":"2020-11-07T13:50:39.616Z"}
{"msg":":tada:","username":"WadeBarnes","ts":"2020-11-07T16:25:42.147Z"}
{"msg":"Has joined the channel.","username":"marc0olo","ts":"2020-11-30T04:50:02.700Z","type":"uj"}
{"msg":"Has joined the channel.","username":"cmendoza","ts":"2020-12-01T21:25:40.987Z","type":"uj"}
{"msg":"Has joined the channel.","username":"EtricKombat","ts":"2020-12-28T11:08:22.277Z","type":"uj"}
{"msg":"User <em>User_4</em> added by <em>ianco</em>.","username":"ianco","ts":"2021-01-11T19:38:22.160Z","type":"au"}
{"msg":"@ianco -- got an error in running the test harness in the compare script:\n\n```\n------------------COMPARE-RESULTS------------------\n(Note that KGR filenames are relative to <AATH repo>/aries-test-harness/allure/)\nComparing KGR results from:  ./The-KGR-file-general.json\nKGR missing for: features/0023-did-exchange.feature:Establish a connection with DID Exchange between two agents with an explicit invitation with role reversal:Establish a connection with DID Exchange between two agents with an explicit invitation with role reversal\nKGR missing for: features/0023-did-exchange.feature:Establish a connection with DID Exchange and responder rejects the request:Establish a connection with DID Exchange and responder rejects the request -- @1.3 ({\"reason\": \"DID Doc Invalid\"})\nKGR missing for: features/0023-did-exchange.feature:Establish a connection with DID Exchange between two agents with an implicit invitation:Establish a connection with DID Exchange between two agents with an implicit invitation\nKGR missing for: features/0023-did-exchange.feature:Establish a connection with DID Exchange between two agents with an explicit invitation but invitation is rejected and connection process restarted:Establish a connection with DID Exchange between two agents with an explicit invitation but invitation is rejected and connection process restarted\nKGR missing for: features/0023-did-exchange.feature:Establish a connection with DID Exchange and requester rejects the response:Establish a connection with DID Exchange and requester rejects the response -- @1.7 ({\"reason\": \"unknown processing error\"})\nTraceback (most recent call last):\n  File \"./same_as_yesterday.py\", line 23, in <module>\n    fullName = results[\"fullName\"] + \":\" + results[\"name\"]\nKeyError: 'fullName'\nExit with error code 1\nExit with error code 1\n~/repos/aries-agent-test-harness [DID-Exchange-Test-Dev-Acapy] 07:07 $\n```\n\nI ran the script in @sheldon.regular 's PR branch using this command `./manage run -r allure -e comparison -d acapy-master -t ~wip` copied the KGR and then reran the command.","username":"swcurran","ts":"2021-01-15T17:04:08.598Z"}
{"msg":"@swcurran can you attach the KGR file?","username":"ianco","ts":"2021-01-15T17:06:41.525Z"}
{"msg":"~@swcurran can you attach the KGR file?~","username":"ianco","ts":"2021-01-15T17:06:41.525Z"}
{"msg":"... actually scratch that, it looks like an issue with one of the `.json` files in the `allure-results` directory","username":"ianco","ts":"2021-01-15T17:08:18.277Z"}
{"msg":"can you delete `./aries-test-harness/allure/allure-results/*.json` and then try again?","username":"ianco","ts":"2021-01-15T17:08:57.805Z"}
{"msg":"I'll update the script to ignore non-test-result-json files","username":"ianco","ts":"2021-01-15T17:09:55.852Z"}
{"msg":"Running...","username":"swcurran","ts":"2021-01-15T17:13:29.045Z"}
{"msg":"OK -- that worked without error the first time.  Then I copied the KGR file to the expected and reran and got this error (presumably the same as before):\n\n```\n------------------COMPARE-RESULTS------------------\n(Note that KGR filenames are relative to <AATH repo>/aries-test-harness/allure/)\nComparing KGR results from:  ./The-KGR-file-general.json\nTraceback (most recent call last):\n  File \"./same_as_yesterday.py\", line 23, in <module>\n    fullName = results[\"fullName\"] + \":\" + results[\"name\"]\nKeyError: 'fullName'\nExit with error code 1\nExit with error code 1\n```","username":"swcurran","ts":"2021-01-15T17:32:57.817Z"}
{"msg":"ok I'm testing now on my local","username":"ianco","ts":"2021-01-15T17:34:07.260Z"}
{"msg":"possibly an issue with the test results recorded for the new did exchange test ...","username":"ianco","ts":"2021-01-15T17:57:41.934Z"}
{"msg":"Has left the channel.","username":"kukgini","ts":"2021-01-25T10:53:54.650Z","type":"ul"}
{"msg":"Has joined the channel.","username":"Helen_Garneau","ts":"2021-02-04T15:09:42.199Z","type":"uj"}
{"msg":"Has joined the channel.","username":"janl","ts":"2021-02-04T15:18:23.623Z","type":"uj"}
{"msg":"Has joined the channel.","username":"JackyYuan","ts":"2021-02-23T20:53:43.687Z","type":"uj"}
{"msg":"Has joined the channel.","username":"dgt1nsty","ts":"2021-02-27T07:24:42.344Z","type":"uj"}
{"msg":"Has joined the channel.","username":"lohan.spies","ts":"2021-03-01T15:21:46.652Z","type":"uj"}
{"msg":"Has joined the channel.","username":"MoShishi","ts":"2021-03-01T16:30:06.664Z","type":"uj"}
{"msg":"Has joined the channel.","username":"rpobulic","ts":"2021-03-07T05:14:26.377Z","type":"uj"}
{"msg":"User <em>User_5</em> added by <em>swcurran</em>.","username":"swcurran","ts":"2021-03-11T23:46:30.942Z","type":"au"}
{"msg":"Has joined the channel.","username":"iamgollum","ts":"2021-04-04T20:35:11.701Z","type":"uj"}
{"msg":"@sheldon.regular @TimoGlastra -- can we add tags on `Examples` in tests?   For example:\n\n```\n   Examples:\n      | credential_data   | updated_credential_data  | format | \n      | Data_DL_MaxValues | Data_DL_NormalizedValues | indy |\n```\n\nCould we add a tag (or something) that indicates","username":"swcurran","ts":"2021-04-07T23:33:14.995Z"}
{"msg":"@sheldon.regular @TimoGlastra -- can we add tags on `Examples` in tests?   For example:\n\n```\n   Examples:\n      | credential_data   | updated_credential_data  | format | \n      | Data_DL_MaxValues | Data_DL_NormalizedValues | indy |\n      | Data_DL_MaxValues | Data_DL_NormalizedValues | json-ld |\n```\n\nCould we add a tag (or something) that indicates the test requires indy for the first example, and json-ld for the second?   If we could do that, we could tag things at the Feature, Scenario and Example (is that the right name?) levels.  If we can do that, we can do a lot more with examples.\n\nFurther, once each agent is started, we ask each \"You are playing role X, what tags do you support/not-support?\"  and the backchannel responds with a list.  We combine those to construct the input to behave to define the set of tests to be run.   Not quite sure how we combine them together.","username":"swcurran","ts":"2021-04-07T23:58:02.465Z"}
{"msg":"We can do the following. So not exactly what you mean, but it reaches the same goal:\n```\n    @CredFormat_Indy\n    Examples:\n      | credential_data   | updated_credential_data\n      | Data_DL_MaxValues | Data_DL_NormalizedValues\n\n    @CredFormat_JSON-LD\n    Examples:\n      | credential_data   | updated_credential_data\n      | Data_DL_MaxValues | Data_DL_NormalizedValues\n\n    @CredFormat_Indy @CredFormat_JSON-LD\n    Examples:\n      | credential_data   | updated_credential_data\n      | Data_DL_MaxValues | Data_DL_NormalizedValues\n```","username":"TimoGlastra","ts":"2021-04-08T08:36:12.430Z"}
{"msg":"To be clear -- if we did that and specified the tag `@CredFormat_Indy`, only the first and third examples would run, correct?  That would be more concise than what we have today.\n\nSo that can be attached to a scenario, in that format -- e.g. the whole snippet as you have it above.","username":"swcurran","ts":"2021-04-08T14:46:59.144Z"}
{"msg":"Ok, that feature is not documented very well. I had no idea Example tags existed. Not in any documentation and only one closed issue from 2016. Oh well. That does change things, and would make a much cleaner solution. I just tried those tags out. They just stuff the Example tag in the Scenario tags at runtime.  So the behaviour is the same, the code is even the same (since it already checks for that CredFormat tag in the scenario, but the feature file will be much simpler. The cred format doesn't need to be mentioned in the steps either like `When \"Bob\" proposes a \"indy\" credential to \"Acme\" with <credential_data>`. Thanks guys for highlighting this.","username":"sheldon.regular","ts":"2021-04-08T15:15:30.024Z"}
{"msg":"@sheldon.regular https://behave.readthedocs.io/en/latest/new_and_noteworthy_v1.2.6.html?highlight=examples#index-0 . It's only mentioned in the release notes","username":"TimoGlastra","ts":"2021-04-09T10:02:56.616Z"}
{"msg":"Love it. I'm using it already.","username":"sheldon.regular","ts":"2021-04-09T15:32:05.401Z"}
{"msg":"Good morning","username":"lohan.spies","ts":"2021-04-12T06:58:10.125Z"}
{"msg":"I want to use the test harness for our controller... a bit lost on the setup and how we can do achieve this.","username":"lohan.spies","ts":"2021-04-12T06:58:43.151Z"}
{"msg":"I want to use the test harness for our controller... a bit lost on the setup and how we can achieve this.","username":"lohan.spies","ts":"2021-04-12T06:58:43.151Z"}
{"msg":"Any pointers on where to start with the test harness from some experts in the group?","username":"lohan.spies","ts":"2021-04-12T06:59:03.412Z"}
{"msg":"Good morning @lohan.spies , could you clarify a bit on what you mean on using the test harness for your controller? Do you want to create a backchannel that talks to your agent controller?","username":"TimoGlastra","ts":"2021-04-12T08:07:47.569Z"}
{"msg":"Hi @TimoGlastra yes, would need to create a backchannel to test our controller - https://github.com/didx-xyz/aries-cloudcontroller-python/","username":"lohan.spies","ts":"2021-04-12T10:36:10.765Z"}
{"msg":"With an AcaPy agent","username":"lohan.spies","ts":"2021-04-12T10:36:28.199Z"}
{"msg":"I think the aries-backchannels README is a good place to start: https://github.com/hyperledger/aries-agent-test-harness/tree/master/aries-backchannels/README.md To get started I think extending from the generic agent_backchannel.py (https://github.com/hyperledger/aries-agent-test-harness/blob/master/aries-backchannels/python/agent_backchannel.py) can help with some of the setup. The ACA-Py, AFGO and mobile backchannels all use this I believe. As you are still using an ACA-Py as agent and calling it through your own custom library it may even be worthwhile to start from the ACA-Py backchannel. The open api can give guidance on the API endpoints a backchannel needs to support: https://aries-interop.info/api","username":"TimoGlastra","ts":"2021-04-12T11:00:16.169Z"}
{"msg":"I do want to note however that I'm not sure if AATH is the correct solution to test your controller. It's the exact same agent (ACA-Py) being tested, so it's not testing for interoperability, more if the controller you wrote is working with ACA-Py -- However I think @swcurran has a better opinion on that.","username":"TimoGlastra","ts":"2021-04-12T11:03:06.544Z"}
{"msg":"I think there are a couple of reasons for doing or not doing this.  The intention I've always had is that the \"CUT\" (Component Under Test) can be anything -- framework or full agent, -- so it's reasonable to have such a backchannel.  The two reasons I think for doing it are (a) because there is enough happening in the controller that it is worth testing the full agent in addition to the framework, and (b) to have a (hopefully) easy way to access a maintained set of tests to execute as part of the CI process.","username":"swcurran","ts":"2021-04-13T00:18:27.907Z"}
{"msg":"Hi @swcurran that is exactly my thinking and what I would like to achieve.","username":"lohan.spies","ts":"2021-04-13T18:23:47.918Z"}
{"msg":"Cool.  So the guidance that Timo gave up is good for getting started.  Basically, you need to create a docker container that contains your entire test \"thingy\" (e.g. your controller and an aca-py agent), plus a \"backchannel\" -- an API service that responds to requests from the test harness, (somehow) kicks your controller to do stuff, and provides responses back to the test harness about the status.  There are a couple of examples already of what a backchannel looks like that you can start from.","username":"swcurran","ts":"2021-04-13T18:28:47.262Z"}
{"msg":"Since this is the first full agent to get a backchannel, you may come across things that we should change in the test harness to make it easier.  Don't hesitate to ask questions and propose changes to make things easier to do.","username":"swcurran","ts":"2021-04-13T18:29:43.671Z"}
{"msg":"Thank you. Will have a look and come back with questions","username":"lohan.spies","ts":"2021-04-13T18:30:34.484Z"}
{"msg":"Also, if it would help, @sheldon.regular and/or @ianco would (I'm sure :) ) be happy to jump on a call to go over concepts, or field questions.","username":"swcurran","ts":"2021-04-13T18:31:39.984Z"}
{"msg":"That would really be appreciated and speed up the process to get going.","username":"lohan.spies","ts":"2021-04-13T18:32:41.718Z"}
{"msg":"Yes, I'd love to get together to answer any questions. Hit me up anytime @lohan.spies, we can get together as much as you need to move your effort along. If you haven't already, you may want to just run through the execution of the acapy tests to get a feel for how they work. I have a feeling your backchannel will be very similar to the [acapy_backchannel](https://github.com/hyperledger/aries-agent-test-harness/blob/master/aries-backchannels/acapy/acapy_backchannel.py) Timo mentioned.","username":"sheldon.regular","ts":"2021-04-13T18:52:10.700Z"}
{"msg":"I just tried to run AATH for the 1st time using instructions at https://github.com/hyperledger/aries-agent-test-harness#aries-agent-test-harness-smashing-complexity-in-interoperability-testing and when running `./manage run -d acapy -b dotnet -t @AcceptanceTest -t ~@wip` it does not find the `dotnet-agent-backchannel:latest` image.  It looks like it built but tagged it incorrectly perhaps?  Any ideas? \n\nAlso, it would be nice if there is a failure like this that it would terminate immediately so that I can easily see the first failure.  Is there a way to run it this way?  Here is my output.\n\n./manage run -d acapy -b dotnet -t @AcceptanceTest -t ~@wip\nAgents to be used:\n  Acme - acapy\n  Bob - dotnet\n  Faber - acapy\n  Mallory - acapy\n\nTags:  --tags=@AcceptanceTest --tags=~@wip\n\nwaiting for ledger to start\nwaiting for tails server to start\nStarting Acme Agent ...\nStarting Bob Agent ...\nUnable to find image 'dotnet-agent-backchannel:latest' locally\ndocker: Error response from daemon: pull access denied for dotnet-agent-backchannel, repository does not exist or may require 'docker login': denied: requested access to the resource is denied.\nSee 'docker run --help'.\nStarting Faber Agent ...\nStarting Mallory Agent ...","username":"smithbk","ts":"2021-04-16T16:13:47.963Z"}
{"msg":"did you build the images with `./manage build -a acapy -a dotnet`?","username":"ianco","ts":"2021-04-16T16:18:34.588Z"}
{"msg":"... or what command did you use to build the images?","username":"ianco","ts":"2021-04-16T16:19:13.233Z"}
{"msg":"yes ... I followed the directions posted","username":"smithbk","ts":"2021-04-16T22:53:36.148Z"}
{"msg":"I'm guessing there was an error building the dotnet docker image (these are easy to miss because the `./manage build` job doesn't stop, it just continues on to the next image)","username":"ianco","ts":"2021-04-16T23:09:53.771Z"}
{"msg":"Yes, here are the errors ... \n\nStep 8/12 : RUN dotnet publish \"DotNet.Backchannel.csproj\" -c Release -o /app/publish\n ---> Running in 7c19f7f1df0e\nMicrosoft (R) Build Engine version 16.7.1+52cd83677 for .NET\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Determining projects to restore...\n  All projects are up-to-date for restore.\nHandlers/PresentationAckHandler.cs(43,41): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/src/DotNet.Backchannel.csproj]\nControllers/IssueCredentialController.cs(133,35): error CS7036: There is no argument given that corresponds to the required formal parameter 'endpointUri' of 'IMessageService.SendAsync(Wallet, AgentMessage, string, string, string[], string)' [/src/DotNet.Backchannel.csproj]\nControllers/PresentProofController.cs(85,42): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [/src/DotNet.Backchannel.csproj]\nControllers/ConnectionController.cs(129,35): error CS7036: There is no argument given that corresponds to the required formal parameter 'endpointUri' of 'IMessageService.SendAsync(Wallet, AgentMessage, string, string, string[], string)' [/src/DotNet.Backchannel.csproj]\nControllers/ConnectionController.cs(148,35): error CS7036: There is no argument given that corresponds to the required formal parameter 'endpointUri' of 'IMessageService.SendAsync(Wallet, AgentMessage, string, string, string[], string)' [/src/DotNet.Backchannel.csproj]\nControllers/ConnectionController.cs(173,35): error CS7036: There is no argument given that corresponds to the required formal parameter 'endpointUri' of 'IMessageService.SendAsync(Wallet, AgentMessage, string, string, string[], string)' [/src/DotNet.Backchannel.csproj]\nControllers/IssueCredentialController.cs(225,35): error CS7036: There is no argument given that corresponds to the required formal parameter 'endpointUri' of 'IMessageService.SendAsync(Wallet, AgentMessage, string, string, string[], string)' [/src/DotNet.Backchannel.csproj]\nControllers/IssueCredentialController.cs(245,35): error CS7036: There is no argument given that corresponds to the required formal parameter 'endpointUri' of 'IMessageService.SendAsync(Wallet, AgentMessage, string, string, string[], string)' [/src/DotNet.Backchannel.csproj]\nControllers/PresentProofController.cs(131,35): error CS7036: There is no argument given that corresponds to the required formal parameter 'endpointUri' of 'IMessageService.SendAsync(Wallet, AgentMessage, string, string, string[], string)' [/src/DotNet.Backchannel.csproj]\nControllers/IssueCredentialController.cs(262,35): error CS7036: There is no argument given that corresponds to the required formal parameter 'endpointUri' of 'IMessageService.SendAsync(Wallet, AgentMessage, string, string, string[], string)' [/src/DotNet.Backchannel.csproj]\nControllers/PresentProofController.cs(157,35): error CS7036: There is no argument given that corresponds to the required formal parameter 'endpointUri' of 'IMessageService.SendAsync(Wallet, AgentMessage, string, string, string[], string)' [/src/DotNet.Backchannel.csproj]\nControllers/PresentProofController.cs(188,35): error CS7036: There is no argument given that corresponds to the required formal parameter 'endpointUri' of 'IMessageService.SendAsync(Wallet, AgentMessage, string, string, string[], string)' [/src/DotNet.Backchannel.csproj]\nThe command '/bin/sh -c dotnet publish \"DotNet.Backchannel.csproj\" -c Release -o /app/publish' returned a non-zero code: 1","username":"smithbk","ts":"2021-04-17T22:45:25.117Z"}
{"msg":"Not sure what is going on with the `latest`. Can you try with dotnet-master? \n`./manage build -a acapy-main -a dotnet-master`","username":"sheldon.regular","ts":"2021-04-17T22:50:06.069Z"}
{"msg":"Also a cleaner run command for acapy with dotnet is `./manage run -d acapy-main -b dotnet-master -t @AcceptanceTest -t ~@wip -t ~@ProofProposal -t ~@RFC0023 -t ~@DIDExchangeConnection`  This will exclude things not supported yet.","username":"sheldon.regular","ts":"2021-04-17T22:51:56.367Z"}
{"msg":"The build works but then the following ...\n\n$ ./manage run -d acapy-main -b dotnet-master -t @AcceptanceTest -t ~@wip -t ~@ProofProposal -t ~@RFC0023 -t ~@DIDExchangeConnection\nAll agents Acme, Bob, Faber and Mallory must be set to one of: acapy acapy-master afgo-master dotnet dotnet-master javascript vcx .\nUse \"./manage help\" to get more information.\n\n$ ./manage run -d acapy -b dotnet -t @AcceptanceTest -t ~@wip\nAgents to be used:\n  Acme - acapy\n  Bob - dotnet\n  Faber - acapy\n  Mallory - acapy\n\nTags:  --tags=@AcceptanceTest --tags=~@wip\n\nwaiting for ledger to start\nwaiting for tails server to start\nAcme Agent already running, skipping...\nStarting Bob Agent ...\nUnable to find image 'dotnet-agent-backchannel:latest' locally","username":"smithbk","ts":"2021-04-18T11:39:33.265Z"}
{"msg":"I think the dotnet container (without master) is not working anymore. The code in this repo is updated to work with the master version, breaking the latest released script. I've run the build and run commands exactly as posted by sheldon. Could you try to remove all your images and try again? Most of the times that something is not working, deleting all images and rebuilding does the trick","username":"TimoGlastra","ts":"2021-04-18T14:50:34.848Z"}
{"msg":"I think the dotnet container (without master) is not working anymore. The code in this repo is updated to work with the master version, breaking the latest released script. I've run the build and run commands exactly as posted by Sheldon and they work for me. Could you try to remove all your images and try again? Most of the times that something is not working, deleting all images and rebuilding does the trick","username":"TimoGlastra","ts":"2021-04-18T14:50:34.848Z"}
{"msg":"I think the dotnet container (without master) is not working anymore. The code in this repo is updated to work with the master version, breaking the latest released script. I've run the build and run commands exactly as posted by Sheldon and they work for me. Could you try to remove all your images and try again? Most of the times that something is not working, deleting all images and rebuilding does the trick for me","username":"TimoGlastra","ts":"2021-04-18T14:50:34.848Z"}
{"msg":"I'll have to try this again later when I have time to rebuild my world since I have so many other images ... or will try 1st to delete just images with dotnet in the name 1st","username":"smithbk","ts":"2021-04-19T19:22:59.931Z"}
{"msg":"It looks like you might have a not up to date version.  the error on the first command shows that \"acapy-master\" is used instead of \"acapy-main\".  That was changed a long time ago.\n\nI don't think you need to do anything as extreme as deleting all your images, but you do have to make sure that none of the relevant ones are running -- such as the case with \"Acme Agent already running...\"\n\nNot sure of that last message about the missing image.  That's an odd one.\n\nYou do have to make sure that you build and run the same agents.  Looks like you did, but I can't see the build command you ran.","username":"swcurran","ts":"2021-04-19T19:31:17.777Z"}
{"msg":"It looks like you might have a not up to date version of the repo.  The error on the first \"run\" command shows that \"acapy-master\" is a valid test agent name, used instead of \"acapy-main\".  That change from master to main was made long ago in the repo.\n\nI don't think you need to do anything as extreme as deleting all your images, but you do have to make sure that none of the relevant ones are running -- such as the case with \"Acme Agent already running...\"\n\nNot sure of that last message about the missing image.  That's an odd one.\n\nYou do have to make sure that you build and run the same agents.  Looks like you did, but I can't see the build command you ran.","username":"swcurran","ts":"2021-04-19T19:31:17.777Z"}
{"msg":"@smithbk -- I just ran everything and it worked fine.  I think the issues you might be having are:\n\n-  making sure you have the latest updates and\n- being consistent in using `acapy-main` (not master or just acapy) and `dotnet-master` (not just dotnet) in both the build and run commands.\n\nMy guess because of your error is that in the build, you had used `dotnet-master` (per Sheldon's note), but in the run just `dotnet`.\n\nI don't think there is a need to delete any docker images.","username":"swcurran","ts":"2021-04-19T22:36:44.856Z"}
{"msg":"Here are the tests that I ran:\n\n```\n./manage build -a acapy-main -a dotnet-master\n./manage run -d acapy-main -b dotnet-master -t @AcceptanceTest -t ~@wip -t ~@ProofProposal -t ~@RFC0023 -t ~@DIDExchangeConnection\n\nResults:\n\n3 features passed, 1 failed, 2 skipped\n34 scenarios passed, 1 failed, 60 skipped\n320 steps passed, 1 failed, 550 skipped, 0 undefined\nTook 12m58.364s\n```","username":"swcurran","ts":"2021-04-19T23:01:14.949Z"}
{"msg":"@swcurran Thanks Stephen, that works","username":"smithbk","ts":"2021-04-20T03:18:37.620Z"}
{"msg":"Hey everyone 👋, new here and working with @lohan.spies on the YOMA project","username":"MoShishi","ts":"2021-04-22T15:00:14.600Z"}
{"msg":"@sheldon.regular want to introduce you to @MoShishi. He is looking into using the test harness for the controller we developed.","username":"lohan.spies","ts":"2021-04-22T15:01:39.723Z"}
{"msg":"@sheldon.regular want to introduce you to @MoShishi . He is looking into using the test harness for the controller we developed.","username":"lohan.spies","ts":"2021-04-22T15:01:39.723Z"}
{"msg":"Maybe we should setup a call as suggested","username":"lohan.spies","ts":"2021-04-22T15:02:24.749Z"}
{"msg":"Hi @MoShishi!","username":"TimoGlastra","ts":"2021-04-22T15:02:56.240Z"}
{"msg":"cool to be here","username":"MoShishi","ts":"2021-04-22T15:04:25.226Z"}
{"msg":"Hi @MoShishi  Sure we can setup a call. What works best for you guys? I'm in Eastern Time.","username":"sheldon.regular","ts":"2021-04-22T15:05:16.952Z"}
{"msg":"I'll have a scroll through the history so I won;t ask too many dublicate questions but will be implementing a testharness for the YOMA aries-agentcontroller these days (python). I've looked at the repo and am a bit lost still atm 😬 To be quite frank it's not really clear to me how to achieve running the test-harness against/with the controller we're building. From the readme it looks like we have to write our own backchannels implementation, but yeah some parts make sense to me, overall kinda lost where to start and how to do this really. Maybe you know of a repo that does what we're doing and could serrve as an example? ... any help much appreciated!","username":"MoShishi","ts":"2021-04-22T15:12:37.715Z"}
{"msg":"hey @sheldon.regular awesome! Thanks in advance. sorry just saw that thread. I'm in european time. Anytime that's not early morning for me works (But I guess that's not gonna happen with you in eastern time anyway. Generally pretty flexible schedule-wise. I can do tomorrow/Monday/Tuesday - you name it...","username":"MoShishi","ts":"2021-04-22T15:23:43.538Z"}
{"msg":"How about Monday at 9am my time? You are 6 hours ahead of me correct?","username":"sheldon.regular","ts":"2021-04-22T15:49:11.632Z"}
{"msg":"@MoShishi have you tried to execute the tests that are there with an agent backchannel that is already there? Like acapy for instance?  The pattern you will be following will be similar to the acapy backchannel or afgo backchannel. Once you have the tests running with acapy, look in the aries_backchannels folder for implementations of backchannels. You can find instructions on running the test harness here, https://github.com/hyperledger/aries-agent-test-harness.\nYou will be able to get the Test Harness running with these few commands.\n```\ngit clone https://github.com/bcgov/von-network\ncd von-network\n./manage build\n./manage start\ncd ..\ngit clone https://github.com/bcgov/indy-tails-server\ncd indy-tails-server/docker\n./manage start\ncd..\ngit clone https://github.com/hyperledger/aries-agent-test-harness\ncd aries-agent-test-harness\n./manage build -a acapy-main\n./manage run -d acapy-main -t @AcceptanceTest -t ~@wip\n```\nInstructions on implementing backchannels can be found here, https://github.com/hyperledger/aries-agent-test-harness#aries-agent-backchannels\n\nI'm sure it will be much clearer after we meet.","username":"sheldon.regular","ts":"2021-04-22T16:00:33.862Z"}
{"msg":"Thanks so much already. Yes, I've tried running the tests that are already there. Just was a bit puzzled by what goes where and comes from where and how YOMAs agent controller can \"plugged\" in/how to write own backchannels. Felt like I'm missing a few things. But this is already helpful s thanks a bunch. Looking forward to the call","username":"MoShishi","ts":"2021-04-23T07:28:10.091Z"}
{"msg":"sounds great! lets do that. yes, 6 hours ahead is correct. looking forward to it and thanks in advance","username":"MoShishi","ts":"2021-04-23T07:29:28.713Z"}
{"msg":"Could I join this call also since we're trying to write a backchannel as well?","username":"smithbk","ts":"2021-04-23T13:00:10.446Z"}
{"msg":"Please include @alexgmetcalf if possible as well, to help with making the docs easier to navigate.","username":"swcurran","ts":"2021-04-23T14:37:04.184Z"}
{"msg":"Has joined the channel.","username":"alexgmetcalf","ts":"2021-04-23T14:37:04.286Z","type":"uj"}
{"msg":"@MoShishi Something else that might help you and others is an AATH overview presentation done last year. https://drive.google.com/file/d/1jEfbV1_TWYYK73eFkUXYEAThAwdUOAdH/view?usp=sharing","username":"sheldon.regular","ts":"2021-04-23T16:30:26.762Z"}
{"msg":"Has joined the channel.","username":"justinmason","ts":"2021-04-26T13:07:51.992Z","type":"uj"}
{"msg":"Just a little info worth sharing. Since Docker upgraded automatically on my Mac to 3.3.1 I've been having issues with AATH containers being able to communicate with other containers. For example, the Acapy agent can't connect to the ledger. This is an issue with the latest docker. I've had to downgrade to docker desktop version 3.2.1 https://docs.docker.com/docker-for-mac/release-notes/#docker-desktop-321 to make things work. 3.2.2 may work but it has an auto update feature turned on that you can't turn off, so you go back to 3.3.1 really fast. I'm not sure if this is an issue on the mac platform only.","username":"sheldon.regular","ts":"2021-04-28T15:50:08.752Z"}
{"msg":"Has joined the channel.","username":"filip.burlacu","ts":"2021-05-13T22:47:53.052Z","type":"uj"}
{"msg":"quick question - how do you set environment variables for an agent (for the backchannel) for a particular set of features? Do we have a way to do that?","username":"filip.burlacu","ts":"2021-05-14T17:55:07.002Z"}
{"msg":"Hi @filip.burlacu  We have a few we set in the manage script when we run docker with the -e option, anything beyond that is done in the backchannel itself.","username":"sheldon.regular","ts":"2021-05-14T18:33:11.885Z"}
{"msg":"thanks!\nbut do we have a way to determine the environment variables or command-line options based on the particular test being run? I suspect this isn't possible because it would make it possible for certain tests to be incompatible with others, unable to run in the same invocation","username":"filip.burlacu","ts":"2021-05-14T18:37:03.983Z"}
{"msg":"specifically I'm wondering about how to ensure aca-py runs with AIP2.0-comatible options when testing against afgo","username":"filip.burlacu","ts":"2021-05-14T18:38:59.869Z"}
{"msg":"There is a `-v` option to specify the AIP version","username":"ianco","ts":"2021-05-14T18:54:43.809Z"}
{"msg":"... so for example this sets all the API 2.0 flags:  `./manage run -d afgo-master -b acapy-main -v 20 -t @TimoGlastra","username":"ianco","ts":"2021-05-14T18:55:12.682Z"}
{"msg":"... so for example this sets all the API 2.0 flags:  `./manage run -d afgo-master -b acapy-main -v 20 -t @T002-RFC0023`","username":"ianco","ts":"2021-05-14T18:55:12.682Z"}
{"msg":"... and this sets an environment variable called `AIP_CONFIG `","username":"ianco","ts":"2021-05-14T18:56:52.506Z"}
{"msg":"... which is passed to all the backchannels","username":"ianco","ts":"2021-05-14T18:57:05.389Z"}
{"msg":"just raised a PR: https://github.com/hyperledger/aries-agent-test-harness/pull/244\nthis started out merely adding a uniresolver and sov driver, but when integrating those into the manage script, I found a way to address another common annoyance, namely, forgetting to start von network and the indy tails server, so when I created a `service` command to start/stop the uniresolver, I added a 'service' for von-network and indy-tails as well\nand then when testing, I needed to have the entire harness configuration running, so I split out the `start` and `stop` commands.","username":"filip.burlacu","ts":"2021-05-26T18:32:08.951Z"}
{"msg":"Has joined the channel.","username":"MatthewSpence","ts":"2021-06-08T16:21:34.988Z","type":"uj"}
{"msg":"Howdy everyone, I'm working on a backchannel for Evernym's Verity Agent Service and I'm confused as to how to use a sovrin ledger for testing. Would somebody be willing to explain this to me?","username":"MatthewSpence","ts":"2021-06-08T16:53:29.574Z"}
{"msg":"AATH currently assumes you are using some instance of a von-network (https://github.com/bcgov/von-network), this is basically an Indy network, but it comes bundled with a web browser that can serve the pool ledger transactions (for the agents to connect) as well as an endpoint to register DID's","username":"ianco","ts":"2021-06-08T16:55:20.395Z"}
{"msg":"Theoretically the test suite can connect to and run against *any* Indy network (including the SOVRIN networks) but would require some updates to the scripts","username":"ianco","ts":"2021-06-08T16:56:02.389Z"}
{"msg":"I don't know the specific tasks offhand, I'd need to do a quick code review, if this is something you may be interested in helping out with","username":"ianco","ts":"2021-06-08T16:56:36.309Z"}
{"msg":"Otherwise you should be able to run the tests against a local instance of von-network (this is the default) or provide `LEDGER_URL` parameter to connect to (for example) one of the BCOVRIN ledgers","username":"ianco","ts":"2021-06-08T16:57:18.260Z"}
{"msg":"`LEDGER_URL_CONFIG=http://localhost:9000 TAILS_SERVER_URL_CONFIG=http://localhost:6543 ./manage run -d acapy-main -v 20 -t @RFC0023 -t ~@wip`","username":"ianco","ts":"2021-06-08T17:05:32.634Z"}
{"msg":"(for example)","username":"ianco","ts":"2021-06-08T17:05:43.140Z"}
{"msg":"Thank you for the information. Let me ask my team and see where they want me to go with this","username":"MatthewSpence","ts":"2021-06-08T17:07:16.952Z"}
{"msg":"I've been informed that it shouldn't be too difficult for us to run tests against the von network since it's also an indy ledger (I'm still new to the Indy/Aries stack so these kinds of things aren't clear to me yet). We may need to make some minor changes on our side,  but I think I can move forward with what we have. Thanks explaining things to me!","username":"MatthewSpence","ts":"2021-06-08T17:19:58.887Z"}
{"msg":":+1:","username":"ianco","ts":"2021-06-08T17:20:32.244Z"}
{"msg":"If you have any suggestions for improving things we'd love to hear them!","username":"ianco","ts":"2021-06-08T17:21:08.286Z"}
{"msg":"I do have one, should I send it here or in the main channel?","username":"MatthewSpence","ts":"2021-06-08T17:27:22.473Z"}
{"msg":"main channel","username":"ianco","ts":"2021-06-08T17:27:40.683Z"}
{"msg":"thanks","username":"ianco","ts":"2021-06-08T17:27:43.345Z"}
{"msg":"Suggestion for making AATH backchannels easier to develop: Right now it's not clear what the test harness expects back from commands it sends to backchannels. The Google Sheet that lists all the protocol steps and such is nice, but it could be more detailed. For example, during the connection protocol when the inviter generates a connection invitation, the agent backchannel POST request expects a response that includes an `invitation` field, which as far as I can tell is not actually explained anywhere. I had to go examine the feature step to figure out what to send back, and while that's not super difficult, it would be better if it were just listed somewhere. It's possible it is and I just missed it, but if I couldn't find it then other people probably won't either","username":"MatthewSpence","ts":"2021-06-08T17:38:12.510Z"}
{"msg":"For some reason when I run the `./manage start` script in von-network I get the docker compose help page, as if I'd ran `docker-compose -h`. Any idea why this might be?","username":"MatthewSpence","ts":"2021-06-08T18:48:56.493Z"}
{"msg":"Did you run `./manage build` to build the containers?","username":"ianco","ts":"2021-06-08T18:49:45.878Z"}
{"msg":"yes","username":"MatthewSpence","ts":"2021-06-08T18:49:51.456Z"}
{"msg":"if you run `docker ps` does it show any running containers?","username":"ianco","ts":"2021-06-08T18:50:10.050Z"}
{"msg":"No","username":"MatthewSpence","ts":"2021-06-08T18:50:25.264Z"}
{"msg":"I can run the AATH commands fine, it just ends up waiting on the ledger","username":"MatthewSpence","ts":"2021-06-08T18:50:57.942Z"}
{"msg":"try `./manage start --logs`","username":"ianco","ts":"2021-06-08T18:50:58.108Z"}
{"msg":"same things happened","username":"MatthewSpence","ts":"2021-06-08T18:51:13.958Z"}
{"msg":"hmmmm","username":"ianco","ts":"2021-06-08T18:51:18.674Z"}
{"msg":"yeah this has me stumped","username":"MatthewSpence","ts":"2021-06-08T18:52:04.789Z"}
{"msg":"for AATH try to run `./manage run -d acapy-main -v 20 -t @RFC0023 -t ~@wip` i.e. without specifying the params for the ledder and tails file","username":"ianco","ts":"2021-06-08T18:52:05.926Z"}
{"msg":"it should automatically start these services (this was a PR that was contributed recently)","username":"ianco","ts":"2021-06-08T18:52:26.921Z"}
{"msg":"it's just waiting for the ledger to start","username":"MatthewSpence","ts":"2021-06-08T18:52:51.430Z"}
{"msg":"To reiterate, this is when I try to start the VON-Network that I get this issue","username":"MatthewSpence","ts":"2021-06-08T18:53:40.415Z"}
{"msg":"yep","username":"ianco","ts":"2021-06-08T18:54:00.275Z"}
{"msg":"to run AATH, you can either (a) start up von network and the tails server, and then pass the parameters to AATH (LEDGER_URL_CONFIG and TAILS_SERVER_URL_CONFIG)","username":"ianco","ts":"2021-06-08T18:55:41.813Z"}
{"msg":"OR just run AATH *without* starting von network and the tails server ahead of time","username":"ianco","ts":"2021-06-08T18:56:01.024Z"}
{"msg":"OR (b) just run AATH *without* starting von network and the tails server ahead of time","username":"ianco","ts":"2021-06-08T18:56:01.024Z"}
{"msg":"Can you try (b)?  Make sure you don't have any dockers running and then just run `./manage run -d acapy-main -v 20 -t @RFC0023 -t ~@wip` to run the AATH script","username":"ianco","ts":"2021-06-08T18:56:44.177Z"}
{"msg":"I'm not sure why your von network isn't starting that's weird","username":"ianco","ts":"2021-06-08T18:57:08.939Z"}
{"msg":"Another alternate (c) is to run against an external ledger `LEDGER_URL_CONFIG=http://dev.bcovrin.vonx.io ./manage run -d acapy-main -v 20 -t @RFC0023 -t ~@wip`","username":"ianco","ts":"2021-06-08T18:58:03.148Z"}
{"msg":"Yeah I got the same thing, the output of `docker-compose -h` and then `waiting for ledger to start...`","username":"MatthewSpence","ts":"2021-06-08T18:58:17.102Z"}
{"msg":"that's working","username":"MatthewSpence","ts":"2021-06-08T18:58:46.845Z"}
{"msg":"so weird that the local von network won't start","username":"MatthewSpence","ts":"2021-06-08T18:58:58.589Z"}
{"msg":"feels like something in my dev env, I'll figure it out eventually","username":"MatthewSpence","ts":"2021-06-08T18:59:31.888Z"}
{"msg":"what platform are you running on?","username":"ianco","ts":"2021-06-08T18:59:45.917Z"}
{"msg":"Ubuntu 18.04","username":"MatthewSpence","ts":"2021-06-08T18:59:54.143Z"}
{"msg":"\"it should work\"","username":"ianco","ts":"2021-06-08T19:00:49.860Z"}
{"msg":":-D","username":"ianco","ts":"2021-06-08T19:00:56.135Z"}
{"msg":"lol that's just how it is sometimes, but it looks like the external ledger is working fine so I can proceed for now","username":"MatthewSpence","ts":"2021-06-08T19:01:50.194Z"}
{"msg":"thank you again!","username":"MatthewSpence","ts":"2021-06-08T19:01:58.766Z"}
{"msg":"Hi Matthew. Yes you are correct, that is poorly explained. I'll update the spreadsheet to include invitation {\n}\nIt's going to be difficult to tell users what to include in there. The invitation is just used for the next step in the protocol, `receive-invitation` it takes the invitation as it is retrieved from `create-invitation` in the previous step. So whatever your agent expects for a receive invitation is what your create invitation should return.","username":"sheldon.regular","ts":"2021-06-08T19:59:50.125Z"}
{"msg":"Glad to have you here @MatthewSpence -- let us know if you find anything else to improve.","username":"swcurran","ts":"2021-06-08T20:26:37.357Z"}
{"msg":"Maybe I am confused then, I thought that `Inviter` creates the invitation, which is stored by the test harness, and then sent to  `Invitee`, which could be some other agent?","username":"MatthewSpence","ts":"2021-06-08T20:32:03.707Z"}
{"msg":"Yes, you are exactly right. My mistake. I'm thinking of the scenario where the two agents are from the same framework.","username":"sheldon.regular","ts":"2021-06-08T20:47:15.791Z"}
{"msg":"@MatthewSpence what shell provides `sh` on your machine? there might be a compatibility issue since the manage script uses some non-POSIX bash stuff\n`readlink $(which sh)`","username":"filip.burlacu","ts":"2021-06-08T20:47:40.855Z"}
{"msg":"I was on 18.04 and had some issues at one point, so I relinked sh to bash. Later I reverted that relink though, since I didn't want to break anything dash-dependent on my machine. But later I upgraded to 20.04, and I just noticed that my sh is bash now","username":"filip.burlacu","ts":"2021-06-08T20:49:46.420Z"}
{"msg":"(I was probably overly cautious though, using bash to provide sh should be fine)","username":"filip.burlacu","ts":"2021-06-08T20:50:41.288Z"}
{"msg":"My shell is provided by dash currently, let me try relinking","username":"MatthewSpence","ts":"2021-06-09T14:55:30.771Z"}
{"msg":"After relinking I get the same result","username":"MatthewSpence","ts":"2021-06-09T15:10:59.859Z"}
{"msg":"How do TAA's work on the VON-Network? With Sovrin Staging net there's a self serve site with a TAA built in, but I'm assuming VON has some other process?","username":"MatthewSpence","ts":"2021-06-09T19:22:05.340Z"}
{"msg":"`von-network` does not have TAA's enabled by default.  So you can just register through the associated Network Browser.","username":"WadeBarnes","ts":"2021-06-09T19:25:07.651Z"}
{"msg":"Good to know, thank you","username":"MatthewSpence","ts":"2021-06-09T19:25:26.135Z"}
{"msg":"To enable TAA in `von-network`:\nThe TAA and associated AML can be defined here; https://github.com/bcgov/von-network/tree/master/config\nMake copies of the samples and name them `aml.json` and `taa.json`, rebuild and start von-network.\nThose files will then get registered by; https://github.com/bcgov/von-network/blob/master/server/anchor.py#L225\nBy default they are ignored by GIT; https://github.com/bcgov/von-network/blob/master/.gitignore#L145-L147","username":"WadeBarnes","ts":"2021-06-09T19:28:02.495Z"}
{"msg":"@MatthewSpence https://aries-interop.info/api.html has a pretty good overview of endpoints with expected request and response values. It's not completely up-to-date, but covers AIP1.0","username":"TimoGlastra","ts":"2021-06-10T12:34:32.185Z"}
{"msg":"E.g. https://aries-interop.info/api.html#operation/ConnectionCreateInvitation specifies what he create invitation endpoint should return","username":"TimoGlastra","ts":"2021-06-10T12:36:38.178Z"}
{"msg":"I've been trying to get the other AATH contributors to use and update the OpenAPI file, but haven't succeeded  yet  :-)","username":"TimoGlastra","ts":"2021-06-10T12:42:40.897Z"}
{"msg":"There's also a postman collection available: https://github.com/hyperledger/aries-agent-test-harness/blob/master/aath.postman_collection.json","username":"TimoGlastra","ts":"2021-06-10T12:42:52.349Z"}
{"msg":"I'm running into a conflict between Evernym internal security policy and the architecture of the Test Harness. Building a TA for Verity requires pulling files from Evernym's internal repo, which is, you know, internal. That means it probably can't just be built with a dockerfile by the management script, at least not in the same way as the other agents. Best way I can see to deal with this is to build the docker image locally and push it to dockerhub, then edit the management script to pull the image whenever somebody tries to build the Verity TA. Is there any reason why this would not be an OK solution? Only other way I can see to resolve the issue is to commit the necessary .deb files to the repo, but the largest of them is like 100MB so that doesn't seem like a good option","username":"MatthewSpence","ts":"2021-06-11T17:09:52.250Z"}
{"msg":"I had been wondering if that would be an issue.  I think it is a good solution and perfectly reasonable -- hopefully it works for you.  There is no need to build the Test Agent from source -- the requirement just be that there is a container image that can be used.","username":"swcurran","ts":"2021-06-11T17:23:34.958Z"}
{"msg":"Awesome. I thought that would be the case but wanted to check first","username":"MatthewSpence","ts":"2021-06-11T17:24:10.534Z"}
{"msg":"The manage script expects a Dockerfile to build an image, but you can just point your Dockerfile at a published image (the base image can contain the agent and then the AATH build can add the backchannel)","username":"ianco","ts":"2021-06-11T17:29:24.683Z"}
{"msg":"Will that kind of docker-in-docker setup work? I've ever tried anything like that before","username":"MatthewSpence","ts":"2021-06-11T17:51:27.876Z"}
{"msg":"That's a good idea, I forgot you can do that","username":"MatthewSpence","ts":"2021-06-11T17:56:30.191Z"}
{"msg":"Is there documentation somewhere on registering a DID with the VON network via API instead of in browser?","username":"MatthewSpence","ts":"2021-06-14T16:53:49.738Z"}
{"msg":"I don't know if there is any documentation specifically, here is an example of a `curl` command embedded in a docker compose script:","username":"ianco","ts":"2021-06-14T16:57:30.709Z"}
{"msg":"https://github.com/bcgov/aries-vcr/blob/master/docker/docker-compose.yml#L148","username":"ianco","ts":"2021-06-14T16:57:31.198Z"}
{"msg":"The same `HTTP POST` can be executed from your app, for example:","username":"ianco","ts":"2021-06-14T16:57:53.636Z"}
{"msg":"https://github.com/hyperledger/aries-cloudagent-python/blob/main/demo/runners/support/agent.py#L350","username":"ianco","ts":"2021-06-14T16:59:00.765Z"}
{"msg":"@ianco, correct, there is no documentation explicitly call out that `von-network` api.  It's something we've always inferred from the code (the call the ledger browser makes to register the DID)","username":"WadeBarnes","ts":"2021-06-14T17:01:12.369Z"}
{"msg":"@ianco, correct, there is no documentation explicitly calling out that `von-network` api.  It's something we've always inferred from the code (the call the ledger browser makes to register the DID)","username":"WadeBarnes","ts":"2021-06-14T17:01:12.369Z"}
{"msg":"@ianco, correct, there is no documentation explicitly calling out that `von-network` api.  It's something we've always inferred from the code (the call the ledger browser makes to register the DID).","username":"WadeBarnes","ts":"2021-06-14T17:01:12.369Z"}
{"msg":":thumbsup: I'll check the request the browser makes","username":"MatthewSpence","ts":"2021-06-14T17:02:40.736Z"}
{"msg":"MichaelWiles","username":"lohan.spies","ts":"2021-06-15T07:44:51.362Z"}
{"msg":"@MichaelWiles","username":"lohan.spies","ts":"2021-06-15T07:44:51.362Z"}
{"msg":"Mesage from @mirgee work on the AATH backchannel for Aries-VCX:\n\nHi Stephen, while working on a aries-vcx backchannel for aries interop test harness I noticed that the proof presentation tests use presentation request attachments in the following format:\n\n```\n            \"presentation_proposal\": {\n                \"@type\": \"did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/present-proof/1.0/request-presentation\",\n                \"comment\": \"This is a comment for the request for presentation.\",\n                \"request_presentations~attach\": {\n                    \"@id\": \"libindy-request-presentation-0\",\n                    \"mime-type\": \"application/json\",\n                    \"data\":  data\n                }\n            }\n```\n\nwhere\n\n```\n        data = {\n                    \"requested_attributes\": {\n                        \"attr_1\": {\n                            \"name\": \"attr_1\",\n                            \"restrictions\": [\n                                {\n                                    \"schema_name\": \"test_schema.\" + context.issuer_name,\n                                    \"schema_version\": \"1.0.0\"\n                                }\n                            ]\n                        }\n                    }\n                }\n```\n\nThe tests are passing e.g. on acapy.\n\nNow, looking into the accepted aries RFC on attachments [here](https://github.com/hyperledger/aries-rfcs/tree/master/concepts/0017-attachments), if I am understanding correctly, then\n1. request_presentations~attach should be an array, and\n2. the data field should contain some of json / base64 / links / jws / sha256 fields.\nIs that correct? If so, does that mean that acapy is using incorrect format? If not, what are the expectations on the attachment content according to aries then?\n\nThanks","username":"swcurran","ts":"2021-06-15T21:40:00.936Z"}
{"msg":"Has joined the channel.","username":"mirgee","ts":"2021-06-15T21:40:01.031Z","type":"uj"}
{"msg":"@mirgee -- where did you copy and paste the JSON above from?  Were those inflight messages from ACA-Py or from somewhere else?","username":"swcurran","ts":"2021-06-15T21:40:45.015Z"}
{"msg":"I'm thinking that is AATH data that is passed via API to ACA-Py that then gets formatted into messages.  ACA-Py handles the formatting for the message.","username":"swcurran","ts":"2021-06-15T21:42:14.836Z"}
{"msg":"That might not be the friendliest for other backchannels, and so we can talk about fixing that, but I suspect it is not a problem in the V1 Present Proof implementation in ACA-Py.","username":"swcurran","ts":"2021-06-15T21:43:08.350Z"}
{"msg":"That might not be the friendliest for other backchannels, and so we can talk about ~fixing ~ changing that, but I suspect it is not a problem in the V1 Present Proof implementation in ACA-Py.","username":"swcurran","ts":"2021-06-15T21:43:08.350Z"}
{"msg":"That might not be the friendliest for other backchannels, and so we can talk about ~fixing ~ changing :-) that, but I suspect it is not a problem in the V1 Present Proof implementation in ACA-Py.","username":"swcurran","ts":"2021-06-15T21:43:08.350Z"}
{"msg":"This is a bit weird, but this is what the backchannel expects, not what ACA-Py expects. It is transformed in the ACA-Py backchannel (and other backchannels). In the OpenAPI it is documented in the same way: https://aries-interop.info/api#operation/PresentProofSendRequest","username":"TimoGlastra","ts":"2021-06-15T21:44:47.827Z"}
{"msg":"V2 doesn't have this syntax anymore","username":"TimoGlastra","ts":"2021-06-15T21:45:10.421Z"}
{"msg":"@swcurran Apologies, I should have clarified - when I wrote tests, I meant AATH tests. You are correct, this is not data sent by ACA-Py, this is data sent by AATH. I was asking mainly to find out what the standard actually is.","username":"mirgee","ts":"2021-06-16T19:01:09.433Z"}
{"msg":"I think it would be friendlier to actually send the presentation proposal in the aries format, working around it is not a problem except for additional / unnecessary complexity at the backchannel level.","username":"mirgee","ts":"2021-06-16T19:05:01.363Z"}
{"msg":"I think it would be friendlier to actually send the presentation proposal in the aries format, but working around it is not a problem except for additional / unnecessary complexity at the backchannel level.","username":"mirgee","ts":"2021-06-16T19:05:01.363Z"}
{"msg":"It is weird. Back when the test was written, I was only looking at the RFC not knowing what the controllers would use communicating to the Agent frameworks. I just didn't go back and simplify it, and I know I missed the array anyway. I'll put it on the list to simplify/change the format, and adjust  some of the backchannels.","username":"sheldon.regular","ts":"2021-06-16T19:08:43.927Z"}
{"msg":"This is the work item: https://github.com/hyperledger/aries-agent-test-harness/issues/259","username":"sheldon.regular","ts":"2021-06-16T19:21:50.045Z"}
{"msg":"The data that the agent requires in order to do something isn't necessarily the same as the data sent from one agent to another (which is what the RFC defines) ...  so there may be some extra parameters that we need to send to the agent, and/or the agent may fill in some details (that we don't need to provide)","username":"ianco","ts":"2021-06-16T20:29:00.137Z"}
{"msg":"... but getting the backchannel message standards more in-line with what is defined in the RFC isn't an issue, other than having to make sure all the backchannels are synced up ...","username":"ianco","ts":"2021-06-16T20:30:38.453Z"}
{"msg":"I agree that if the change doesn't simplify the code of the backchannels, that it's probably not worth it, given that it requires changing all of them. If it does, then it is a nice to have. Even better if it makes the harness code clearer.","username":"mirgee","ts":"2021-06-16T20:43:13.968Z"}
{"msg":"Question on connection tests (RFC 160): If I pass back an invitation url during the create-invitation step, will other agents like acapy be able to handle it? My initial testing seems to indicate no, but it's possible the problem is in my implementation","username":"MatthewSpence","ts":"2021-06-21T19:26:21.281Z"}
{"msg":"It certainly seems like what they're expecting is a raw unencoded invitation","username":"MatthewSpence","ts":"2021-06-21T19:27:01.195Z"}
{"msg":"Hi Matthew. \nWhat acapy sends back on the `create-invitation` is this. \n```\n{\n   \"connection_id\":\"5bc3aaad-c419-4916-8521-330d6f24e68b\",\n   \"invitation\":{\n      \"@type\":\"https://didcomm.org/connections/1.0/invitation\",\n      \"@id\":\"ed106d1f-3d2f-473d-b4c8-9167a0ca54a3\",\n      \"serviceEndpoint\":\"http://192.168.65.3:8021\",\n      \"recipientKeys\":[\n         \"3HBeQNCtg71mDqCSq1QeKX6LueCSwfawh9ojT2QpCbXD\"\n      ],\n      \"label\":\"aca-py.Acme\"\n   },\n   \"invitation_url\":\"http://192.168.65.3:8021?c_i=eyJAdHlwZSI6ICJodHRwczovL2RpZGNvbW0ub3JnL2Nvbm5lY3Rpb25zLzEuMC9pbnZpdGF0aW9uIiwgIkBpZCI6ICJlZDEwNmQxZi0zZDJmLTQ3M2QtYjRjOC05MTY3YTBjYTU0YTMiLCAic2VydmljZUVuZHBvaW50IjogImh0dHA6Ly8xOTIuMTY4LjY1LjM6ODAyMSIsICJyZWNpcGllbnRLZXlzIjogWyIzSEJlUU5DdGc3MW1EcUNTcTFRZUtYNkx1ZUNTd2Zhd2g5b2pUMlFwQ2JYRCJdLCAibGFiZWwiOiAiYWNhLXB5LkFjbWUifQ==\"\n}\n```\nThe test harness just sends that `invitation` portion to the invitee `receive-invitation` operation. What acapy uses in in this payload I don't know, someone else may have to answer that, but maybe it just uses the `invitation_url`. If so, your case should work if it is nested in `\"invitation\":{}`. If these formats are not understood between in different frameworks, then there might be some backchannel work to do to amend/change the payload so that the other participant in the protocol can interpret the invitation properly.","username":"sheldon.regular","ts":"2021-06-21T19:49:02.572Z"}
{"msg":"Thank you, that answers my question. I think I'll probably just have to decode the invitation from the url in the backchannel and send that back to the test harness","username":"MatthewSpence","ts":"2021-06-21T20:08:08.531Z"}
{"msg":"Also I think the Method on row 11 of the mappings google sheet is wrong. Looking at the gherkin steps it seems like its a GET request that's made, not a POST","username":"MatthewSpence","ts":"2021-06-21T20:31:59.302Z"}
{"msg":"Also I think the Method on row 11 of the mappings google sheet might be wrong. Looking at the gherkin steps it seems like its a GET request that's made, not a POST","username":"MatthewSpence","ts":"2021-06-21T20:31:59.302Z"}
{"msg":"And the result on row 8 doesn't reflect that the connection_id and invitation parameters are separate. Connection_id needs to be outside the invitation, unless I'm mistaken","username":"MatthewSpence","ts":"2021-06-21T20:33:10.678Z"}
{"msg":"If you haven't yet, look at the OpenAPI Spec at https://aries-interop.info/api#operation/ConnectionCreateInvitation","username":"sheldon.regular","ts":"2021-06-21T20:35:32.324Z"}
{"msg":"The OpenAPI needs some work but that with the spreadsheet may be helpful.","username":"sheldon.regular","ts":"2021-06-21T20:36:49.131Z"}
{"msg":"Yes, you are correct about row 11. It can probably be removed. That was written before the tests were, thinking the controller api would have an explicit call to receive request. It has been the case so far that all agent frameworks automatically receive the request when the connection request is sent in a previous step. What is happening in the receive request test step is a GET to check the agent state to make sure it is in the requested state.","username":"sheldon.regular","ts":"2021-06-21T20:44:24.496Z"}
{"msg":"Has joined the channel.","username":"v.shalini","ts":"2021-06-22T12:49:00.417Z","type":"uj"}
{"msg":"@sheldon.regular Hi Sheldon, it appears that in the did exchange test case in step 4, you are assuming that the inviter's connection ID will be equal to the invitation ID. This is not true in our case and seems like an invalid assumption. If you agree, could you also change this test case?","username":"smithbk","ts":"2021-06-22T12:51:07.481Z"}
{"msg":"that step is actually calling the backchannel to get the connection id by giving the invitation id. This was put in place to support AFGO. However, as per our conversation yesterday, if you don't have a 1-1 relationship between Invitation_id and connection_id then your agent can't do this. I'm assuming this is the same case as 0160 Connection where both participants have the same connection_id?","username":"sheldon.regular","ts":"2021-06-22T13:42:59.482Z"}
{"msg":"What we can do in this instance if my assumptions above are correct, is you guys can throw back an error code and \"Agent doesn't support connection_id retrieval by invitation_id\", then the test can check for that error and make an assumption that the agent is going to use the same connection_id.","username":"sheldon.regular","ts":"2021-06-22T13:45:58.498Z"}
{"msg":"@smithbk @v.shalini Could you check this PR and make sure that the changes will work for you before we merge? Thanks. https://github.com/hyperledger/aries-agent-test-harness/pull/264","username":"sheldon.regular","ts":"2021-06-22T15:03:42.065Z"}
{"msg":"Sheldon, on 2nd thought, even though we generally have a 1-N relationship between invitation and connection, a newly created invitation that has only been accepted once should have only 1 connection which we can look up.  So Shalini is goiing to try to do a search and should find only 1 entry.","username":"smithbk","ts":"2021-06-22T15:08:52.888Z"}
{"msg":"ok, does that go for both Connection and DID Exchange?","username":"sheldon.regular","ts":"2021-06-22T15:10:10.500Z"}
{"msg":"I'll have to modify my PR i just submitted if that is the case.","username":"sheldon.regular","ts":"2021-06-22T15:10:41.509Z"}
{"msg":"Getting by invitation id a much better/consistent solution from the test harness perspective. No assumptions have to be made in the tests.","username":"sheldon.regular","ts":"2021-06-22T15:11:36.700Z"}
{"msg":"Yes","username":"smithbk","ts":"2021-06-22T15:19:17.742Z"}
{"msg":"Yes, for both connection ID and DID exchange, but Shalini is going to make sure and will let you know","username":"smithbk","ts":"2021-06-22T15:20:17.349Z"}
{"msg":"hi Sheldon. the changes look good to me. I will do some further tests and let you know if there are any issues.","username":"v.shalini","ts":"2021-06-22T15:20:42.050Z"}
{"msg":"ok, I'm going to adjust the PR for 160 Connection to do a GET given the invitation id the same as DID Exchange does now.","username":"sheldon.regular","ts":"2021-06-22T15:21:24.223Z"}
{"msg":"Please wait until you hear from Shalini, to make sure it can work this way.  And hopefully any future backchannels will be able to do something similar, assuming this works.","username":"smithbk","ts":"2021-06-22T15:23:54.976Z"}
{"msg":"ok. Holding.","username":"sheldon.regular","ts":"2021-06-22T15:24:11.919Z"}
{"msg":"dang...sorry.  I merged it already.  Hope that wasn't too soon.","username":"swcurran","ts":"2021-06-22T15:43:35.925Z"}
{"msg":"That's ok. I'll adjust if needed.","username":"sheldon.regular","ts":"2021-06-22T15:44:28.890Z"}
{"msg":"This fix is working.. thanks Sheldon for your quick response","username":"v.shalini","ts":"2021-06-23T06:21:41.586Z"}
{"msg":"Has joined the channel.","username":"Artemkaaas","ts":"2021-06-23T11:25:41.264Z","type":"uj"}
{"msg":"Hello, Are there any design documents/ examples / PoC's regarding automation testing of mobile applications with `aries-agent-test-harness` ?\n\nWe run `Appium` mobile automated end-to-end tests which use Evarnym Verity Rest API for opposite communication side. I think we can easily use Aca-py the same way as we use Verity.\nBut it will be best to integrate with `aries-agent-test-harness` directly.","username":"Artemkaaas","ts":"2021-06-23T11:34:19.367Z"}
{"msg":"Hello. Are there any design documents/ examples / PoC's regarding automation testing of mobile applications with `aries-agent-test-harness` ?\n\nWe run `Appium` mobile automated end-to-end tests which use Evarnym Verity Rest API for opposite communication side. I think we can easily use Aca-py the same way as we use Verity.\nBut it will be best to integrate with `aries-agent-test-harness` directly.","username":"Artemkaaas","ts":"2021-06-23T11:34:19.367Z"}
{"msg":"Sheldon, I forgot to mention context.connection_id_dict[context.inviter_name][invitee] = resp_json[\"connection_id\"] in @when('\"{invitee}\" receives the connection invitation') gives an error. Changed it to context.connection_id_dict[context.inviter_name] = {invitee : resp_json[\"connection_id\"]} for my testing","username":"v.shalini","ts":"2021-06-23T11:52:40.479Z"}
{"msg":"@sheldon.regular Also, it appears that AATH requires an agent to actually implement an \"invitation-received\" state for DID exchange even though I took that as being a logical state according to the RFC.  Our agent currently assumes that if you receive the invitation to your agent and we create a connection object on the invitee side, then we also automatically send the DID exchange request.  So there is currently no way to literally put a connection in the \"invitation-received\".  We could of course add this new state to make the test case pass, but seems a bit odd to me.\nThe same is true for the connection protocol (but different state name).  Thoughts?","username":"smithbk","ts":"2021-06-23T12:14:26.933Z"}
{"msg":"Hi @Artemkaaas There is a mobile PoC in the AATH repo. You can read about it here. https://github.com/hyperledger/aries-agent-test-harness/blob/27aa3fb90d67bc29aa2966c112cebb6337f28ae7/MOBILE_AGENT_TESTING.md","username":"sheldon.regular","ts":"2021-06-23T12:16:12.666Z"}
{"msg":"This is the backchannel created that the tests use to drive the mobile agent. https://github.com/hyperledger/aries-agent-test-harness/tree/master/aries-backchannels/mobile","username":"sheldon.regular","ts":"2021-06-23T12:17:06.288Z"}
{"msg":"Though this PoC is manually driven on the mobile app side, I see no reason this couldn't be done with a mobile automation platform or framework.","username":"sheldon.regular","ts":"2021-06-23T12:19:29.901Z"}
{"msg":"","username":"Artemkaaas","ts":"2021-06-23T12:41:46.737Z","attachments":[{"type":"file","title":"Artemkaaas - Wed Jun 23 2021 15:40:08 GMT+0300 (Moscow Standard Time).txt","title_link":"/file-upload/fiG9tD5iSNorq8snQ/Artemkaaas%20-%20Wed%20Jun%2023%202021%2015:40:08%20GMT+0300%20(Moscow%20Standard%20Time).txt","url":"/file-upload/fiG9tD5iSNorq8snQ/Artemkaaas%20-%20Wed%20Jun%2023%202021%2015:40:08%20GMT+0300%20(Moscow%20Standard%20Time).txt","remote":false,"fileId":"fiG9tD5iSNorq8snQ","fileName":"Artemkaaas - Wed Jun 23 2021 15:40:08 GMT+0300 (Moscow Standard Time).txt"}]}
{"msg":"I've seen this document and tried to run it but didn't get any meaningful output. Tests just failed for me even not started","username":"Artemkaaas","ts":"2021-06-23T12:42:49.861Z"}
{"msg":"","username":"Artemkaaas","ts":"2021-06-23T12:43:42.748Z","attachments":[{"type":"file","title":"Artemkaaas - Wed Jun 23 2021 15:42:02 GMT+0300 (Moscow Standard Time).txt","title_link":"/file-upload/SLyHEoGXRQHX7rosQ/Artemkaaas%20-%20Wed%20Jun%2023%202021%2015:42:02%20GMT+0300%20(Moscow%20Standard%20Time).txt","url":"/file-upload/SLyHEoGXRQHX7rosQ/Artemkaaas%20-%20Wed%20Jun%2023%202021%2015:42:02%20GMT+0300%20(Moscow%20Standard%20Time).txt","remote":false,"fileId":"SLyHEoGXRQHX7rosQ","fileName":"Artemkaaas - Wed Jun 23 2021 15:42:02 GMT+0300 (Moscow Standard Time).txt"}]}
{"msg":"```\nStarting mobile backchannel ...\nListening to backchannel on port 9030\nPress Ctrl-C to exit ...\nMatched operation: {'rfc': '0000 General Backchannel Commands', 'command': 'X', 'response': '', 'topic': 'status', 'method': 'GET', 'operation': '', 'id': '', 'data': '', 'description': 'Return agent status, 200 if active or 418 otherwise', 'id_details': '', 'data_details': '', 'result_details': 'status'}\nmake_agent_GET_request: {'rfc': '0000 General Backchannel Commands', 'command': 'X', 'response': '', 'topic': 'status', 'method': 'GET', 'operation': '', 'id': '', 'data': '', 'description': 'Return agent status, 200 if active or 418 otherwise', 'id_details': '', 'data_details': '', 'result_details': 'status'}\nMatched operation: {'rfc': '0000 General Backchannel Commands', 'command': 'X', 'response': '', 'topic': 'version', 'method': 'GET', 'operation': '', 'id': '', 'data': '', 'description': 'Return agent version, 200 if exists or 404 otherwise', 'id_details': '', 'data_details': '', 'result_details': 'version'}\nmake_agent_GET_request: {'rfc': '0000 General Backchannel Commands', 'command': 'X', 'response': '', 'topic': 'version', 'method': 'GET', 'operation': '', 'id': '', 'data': '', 'description': 'Return agent version, 200 if exists or 404 otherwise', 'id_details': '', 'data_details': '', 'result_details': 'version'}\n```\nThe output I have for bob","username":"Artemkaaas","ts":"2021-06-23T12:44:03.699Z"}
{"msg":"Do you have any ideas about what I'm doing wrong? I'm using the current master","username":"Artemkaaas","ts":"2021-06-23T12:44:38.777Z"}
{"msg":"The tests really only have two things to assert to keep things going, that is the response code 200 and the proper state. Right or wrong, it is assumed that the states listed in the RFCs are able to be determined in the agent/controller and given to the tests. \nIf you don't want to add this received state officially, can the state be determined from something in a webhook that the invitation was received?\nAries Framework Go also does what you are saying, but I can determine that if I receive a webhook message with a certain `type` in it it means the request was received. I have type to state translation dictionaries in the afgo backchannel that look like this.\n```\n        # Issue Cred  didcom type : AATH Expected State\n        self.IssueCredentialTypeToStateTranslationDict = {\n            \"https://didcomm.org/issue-credential/2.0/offer-credential\": \"offer-received\",\n            \"https://didcomm.org/issue-credential/2.0/request-credential\": \"request-received\",\n            \"https://didcomm.org/issue-credential/2.0/issue-credential\": \"credential-received\"\n        }\n\n        # Proof didcom type : AATH Expected State\n        self.ProofTypeToStateTranslationDict = {\n            \"https://didcomm.org/present-proof/2.0/request-presentation\": \"request-received\",\n            \"https://didcomm.org/present-proof/2.0/presentation\": \"presentation-received\"\n        }\n```  \n\nDoes that help?","username":"sheldon.regular","ts":"2021-06-23T12:47:34.529Z"}
{"msg":"@v.shalini Yes, I'm sure that fix worked for you. However, that is not the preferred fix. I would like to change that to a GET that passes the invitation_id and your backchannel send back a connection_id for that agent. This is what DID Exchange does and I would like to make the Connection tests the same.","username":"sheldon.regular","ts":"2021-06-23T12:51:20.463Z"}
{"msg":"I'll take a look and try to run it. I have never tried this before and the guy who did the PoC is away this week.","username":"sheldon.regular","ts":"2021-06-23T12:56:15.225Z"}
{"msg":"Hmm...it's worked for me previously, but I've not run it recently.  When run, you should have QR codes coming up on the terminal that you can scan with the mobile agent.","username":"swcurran","ts":"2021-06-23T14:26:39.746Z"}
{"msg":"We'd love to see a mobile agent wrapped in a container for a backchannel.  We've theorized about it, but no one has dug into what would be needed for that.  Any guidance would be very much appreciated.","username":"swcurran","ts":"2021-06-23T14:28:04.438Z"}
{"msg":"I have updated the backchannel code to retrieved the connection from invitation id","username":"v.shalini","ts":"2021-06-23T15:09:50.265Z"}
{"msg":"when executing @T001-RFC0160, i am getting the following error  context.connection_id_dict[context.inviter_name][invitee] = resp_json[\"connection_id\"]\n      KeyError: 'Acme'","username":"v.shalini","ts":"2021-06-23T15:10:40.571Z"}
{"msg":"ok, I'll update the tests to do a GET with the invitation id.","username":"sheldon.regular","ts":"2021-06-23T15:12:00.031Z"}
{"msg":"its how the invitee and inviter are referenced in connection_id_dict.. Acme key is not present","username":"v.shalini","ts":"2021-06-23T15:13:39.407Z"}
{"msg":"What line is that?","username":"sheldon.regular","ts":"2021-06-23T15:14:06.442Z"}
{"msg":"@when('\"{invitee}\" receives the connection invitation')","username":"v.shalini","ts":"2021-06-23T15:14:29.384Z"}
{"msg":"line 138","username":"v.shalini","ts":"2021-06-23T15:15:22.777Z"}
{"msg":"@sheldon.regular Sheldon, I'm not sure what is meant by \"something in a webhook that the invitation was received\".  We take an invitation from the inviter and then POST the URL to the invitee.  We can provide a webhook on the inviter to know that an invitation has been created or on the invitee to know when the invitation URL has been posted to the invitee, but I'm not sure how that helps to know when the invitee first receives the invitation since I thought AATH has a step for that anyway.  When we POST the invitation URL to the invitee, the invitee's connection internal state name is \"outbound_offer\".  Would it be possible for our backchannel to return \"received\" if it is in this state the 1st time it is asked and then \"request_sent\" (or whatever those 2 state names are) the 2nd time it is called?  I know that is kludgy, but really don't think maintaining those separate states are needed.","username":"smithbk","ts":"2021-06-23T15:47:11.687Z"}
{"msg":"I'm having different issues when running that I'm trying to resolve, but @Artemkaaas did you build the agents first? \n`./manage build -a mobile`\n`./manage build -a acapy-main`\nor if you are using dotnet\n`./manage build -a dotnet-master`","username":"sheldon.regular","ts":"2021-06-23T15:49:33.302Z"}
{"msg":"Yes, I would say that if the backchannel can determine that the agent is likely in the proper state, then return the state the test expects.","username":"sheldon.regular","ts":"2021-06-23T15:54:39.089Z"}
{"msg":"But I assume that the expected state is not passed to the backchannel, or is it?","username":"smithbk","ts":"2021-06-23T15:55:32.293Z"}
{"msg":"No it is not passed. The expected state is what is in the RFC, which is what is checked in the test steps after the operation is called.","username":"sheldon.regular","ts":"2021-06-23T15:56:34.495Z"}
{"msg":"If you use `acapy` instead of `acapy-main` it will work.  We seem to have a broken main branch today.... :-(","username":"swcurran","ts":"2021-06-23T16:35:04.838Z"}
{"msg":"@swcurran is right. It should work with acapy not acapy-main. There is a problem with the way we are starting up acapy-main in this context.","username":"sheldon.regular","ts":"2021-06-23T17:34:48.498Z"}
{"msg":"Not sure it will work if ACA-Py doesn't use ngrok.  :-(.\n\nI was able to get the tests to run, but the connect in scanning the QR code doesn't work.","username":"swcurran","ts":"2021-06-23T17:51:47.054Z"}
{"msg":"Dang...","username":"swcurran","ts":"2021-06-23T17:51:50.226Z"}
{"msg":"We need to figure this out.  Or have @ianco help us :-)","username":"swcurran","ts":"2021-06-23T17:52:16.205Z"}
{"msg":"PR submitted that should fix the inviter key error, and get connection id by invitation id.\nhttps://github.com/hyperledger/aries-agent-test-harness/pull/266","username":"sheldon.regular","ts":"2021-06-23T19:49:00.783Z"}
{"msg":"Are you guys ok with the changes in PR 266?","username":"sheldon.regular","ts":"2021-06-24T16:05:19.463Z"}
{"msg":"Getting an interesting error when trying to run the connection protocol between Aca-py and Verity. When Verity is Acme and Aca-py is Bob, on this step `And \"Bob\" sends a connection request to \"Acme\"` Aca-py responds with status `responded` instead of `requested`. That would seem to indicate that Verity and Aca-py are moving through the protocol faster than the test harness expects, if that's the case I'm not sure what to do","username":"MatthewSpence","ts":"2021-06-24T16:05:22.614Z"}
{"msg":"@MatthewSpence That could happen if Verity does an auto respond on the request.  Does Verity have the option to turn off auto responding, to allow the tests/backchannels to completely control when the response happens?","username":"sheldon.regular","ts":"2021-06-24T16:23:18.535Z"}
{"msg":"I thought that might be the issue. Unfortunately no, once Verity receives a connection request it proceeds through the protocol automatically","username":"MatthewSpence","ts":"2021-06-24T16:25:48.526Z"}
{"msg":"I think the old VCX implementation had the same issue. @sheldon.regular do you know how that was handled?","username":"TimoGlastra","ts":"2021-06-24T16:27:02.876Z"}
{"msg":"No I don't know what VCX did in this case. There is no hint in the current implementation.","username":"sheldon.regular","ts":"2021-06-24T16:32:15.216Z"}
{"msg":"There are 2 options. \n1/ Create a new Connection Test Scenario that considers auto responding. It would be a shorter scenario. Somehow the Issue Cred and Proof tests would need to know we are doing auto responding so that it uses that auto respond test step code to do the connection for those tests as well. \n2/ Verity and Aca-py fakes the test out by changing the responded state to requested because we are already past that point in the process, and wait for the test to catch up to where the agents are. Nevermind... That is a horrible solution. I think the first option is our only one if Verity can't turn off auto responding.","username":"sheldon.regular","ts":"2021-06-24T16:39:01.535Z"}
{"msg":"Option 1 sounds reasonable","username":"MatthewSpence","ts":"2021-06-24T16:58:48.230Z"}
{"msg":"Is it possible for the backchannel to compensate for the \"auto\" processing.  E.g. the backchannel tells Verity (or ACA-Py when in auto mode) and then responds back without waiting to hear from it's agent?  E.g. it goes through the steps the Harness wants assuming all is well?","username":"swcurran","ts":"2021-06-24T17:17:39.952Z"}
{"msg":"Is it possible for the backchannel to compensate for the \"auto\" processing.  E.g. the backchannel tells Verity (or ACA-Py when in auto mode) to act and then responds back without waiting to hear from it's agent?  E.g. it goes through the steps the Harness wants assuming all is well?","username":"swcurran","ts":"2021-06-24T17:17:39.952Z"}
{"msg":"@swcurran Not sure I completely follow. When the backchannel tells Verity to do something, then what is it responding back to the tests with, the fake state? If the bakchannel is not waiting for a response, we are not going to know of a failure, at least not at the point of failure, which may get confusing when things are failing and we need to figure out what is going wrong. \nI think creating a new test is probably the cleanest solution. However, letting the other tests (Issue Cred, Proof) know to use the auto respond connection steps in these other tests might be tricky.","username":"sheldon.regular","ts":"2021-06-24T17:54:49.344Z"}
{"msg":"For this case, yes -- respond with a fake state -- or at least one that is assumed.  My concern with handling this with a different test is that you need an entire new suite of tests, since connection is foundational.","username":"swcurran","ts":"2021-06-24T17:57:18.966Z"}
{"msg":"The problem is that the test is failing on the acapy response","username":"MatthewSpence","ts":"2021-06-24T17:57:19.657Z"}
{"msg":"Ah...that's a different thing.  But once we resolve it, we should be OK.  So the question is why ACA-Py and Verity aren't connecting.","username":"swcurran","ts":"2021-06-24T17:57:55.942Z"}
{"msg":"I think they are connecting","username":"MatthewSpence","ts":"2021-06-24T17:58:13.763Z"}
{"msg":"can't tell for sure just yet but verity logs indicate that the connecting protocol completes without a problem","username":"MatthewSpence","ts":"2021-06-24T17:58:36.556Z"}
{"msg":"We could have one test that is explictly assuming auto, but all the ones used elsewhere can't have two versions.","username":"swcurran","ts":"2021-06-24T17:58:41.018Z"}
{"msg":"Acapy isn't failing, the test is asserting the wrong state, acapy has already moved on to responded.","username":"sheldon.regular","ts":"2021-06-24T17:59:08.408Z"}
{"msg":"^^^","username":"MatthewSpence","ts":"2021-06-24T17:59:15.796Z"}
{"msg":"OK, so all is working, but the test reporting is the issue. I'm back to the Verity backchannel reporting \"all good\" if it can't know for sure.","username":"swcurran","ts":"2021-06-24T18:00:45.172Z"}
{"msg":"If we had some sort of feature discovery for each agent framework, we could tailor the tests to use the auto respond connections across the existing suites. ;-)","username":"sheldon.regular","ts":"2021-06-24T18:01:07.823Z"}
{"msg":"The verity backchannel doesn't get a chance to respond, the tests fail on acapy's response","username":"MatthewSpence","ts":"2021-06-24T18:01:53.550Z"}
{"msg":"I don't think that would help in this case.  Verity still would not be able to report anything useful until the connection was done or failed.","username":"swcurran","ts":"2021-06-24T18:03:06.241Z"}
{"msg":"Well, I think I would say that a little differently, Verity has already responded based on acapy's request.","username":"sheldon.regular","ts":"2021-06-24T18:03:16.012Z"}
{"msg":"Oooppss..replied to the wrong message.  Sorry.","username":"swcurran","ts":"2021-06-24T18:03:26.270Z"}
{"msg":"Test output looks like this\n ```  Scenario Outline: establish a connection between two agents -- @1.1   # features/0160-connection.feature:21\n    Given we have \"2\" agents                                            # features/steps/0160-connection.py:15 0.000s\n      | name | role    |\n      | Acme | inviter |\n      | Bob  | invitee |\n    When \"Acme\" generates a connection invitation                       # features/steps/0160-connection.py:78 5.959s\n    And \"Bob\" receives the connection invitation                        # features/steps/0160-connection.py:105 0.585s\n    And \"Bob\" sends a connection request to \"Acme\"                      # features/steps/0160-connection.py:165 3.726s\n      Traceback (most recent call last):\n        File \"/usr/local/lib/python3.7/site-packages/behave/model.py\", line 1329, in run\n          match.run(runner.context)\n        File \"/usr/local/lib/python3.7/site-packages/behave/matchers.py\", line 98, in run\n          self.func(context, *args, **kwargs)\n        File \"features/steps/0160-connection.py\", line 181, in step_impl\n          assert expected_agent_state(invitee_url, \"connection\", invitee_connection_id, \"requested\")\n      AssertionError\n      \n      Captured stdout:\n      From http://0.0.0.0:9030 Expected state ['requested', 'N/A'] but received responded , with a response status of 200```","username":"MatthewSpence","ts":"2021-06-24T18:03:57.503Z"}
{"msg":"Just in case that helps illustrate the issue","username":"MatthewSpence","ts":"2021-06-24T18:04:15.774Z"}
{"msg":"Yes I mean respond to the test harness","username":"MatthewSpence","ts":"2021-06-24T18:04:47.345Z"}
{"msg":"Yes I mean respond to the test harness. Verity receives and responds to aca-py's connection request just fine","username":"MatthewSpence","ts":"2021-06-24T18:04:47.345Z"}
{"msg":"I guess, the acapy backchannel could keep track of the webhook callbacks and make sure the states transitioned properly to responded, still hand back the expected state to the tests, until the test steps caught up. The Verity backchannel would probably have to do something similar for the next 2 steps in the test. Seems kludgy though.","username":"sheldon.regular","ts":"2021-06-24T18:08:09.485Z"}
{"msg":"Yeah that seems like it's not solving the underlying problem","username":"MatthewSpence","ts":"2021-06-24T18:08:39.180Z"}
{"msg":"I agree.","username":"sheldon.regular","ts":"2021-06-24T18:09:27.128Z"}
{"msg":"It seems reasonable to me to write a new test that only checks states when the invitation message is sent, and when the request response is received","username":"MatthewSpence","ts":"2021-06-24T18:10:51.383Z"}
{"msg":"A possible quick and dirty fix for this right now is to have the tests accept `responded` as an acceptable state at this point in the tests.","username":"sheldon.regular","ts":"2021-06-24T18:11:54.742Z"}
{"msg":"The other way to go is to ignore the intermediate states entirely, and just wait for completion.  Would that adversely affect what we know?   That way we don't have to have specialized tests.","username":"swcurran","ts":"2021-06-24T18:13:21.178Z"}
{"msg":"I really think specialized tests in this case is a problem.","username":"swcurran","ts":"2021-06-24T18:13:45.354Z"}
{"msg":"We could... but instead of loosing all control and verification points, allowing responded should have the same effect. If state is anything other than requested or responded, then fail. \nor...\nWe could create one new connection test that does not check those intermediate states, and change the other suites to use that new one. The point of the other suites is to test other things so not checking intermediate states in a precondition connection setup routine is not the end of the world.","username":"sheldon.regular","ts":"2021-06-24T18:19:05.401Z"}
{"msg":"My vote would be to either ignore intermediate states or allow a channel to send back a list of states through which it has traversed and have AATH validate those, but not require agents to be able to manually step through each step","username":"smithbk","ts":"2021-06-24T18:22:40.222Z"}
{"msg":"My vote would be to either ignore intermediate states or allow a channel to send back a list of states through which it has traversed and have AATH validate those, but not require agents to be able to manually step through each state","username":"smithbk","ts":"2021-06-24T18:22:40.222Z"}
{"msg":"^^^ I was just about to suggest the list of states idea","username":"MatthewSpence","ts":"2021-06-24T18:23:03.961Z"}
{"msg":"ohhh I like the list idea.","username":"sheldon.regular","ts":"2021-06-24T18:23:16.672Z"}
{"msg":"It would possibly require more work but would be a more general solution, in case other future agents have auto responses that leave them at a different point","username":"MatthewSpence","ts":"2021-06-24T18:24:08.914Z"}
{"msg":"Because there's no guarantee that all agents will auto respond at the same point, or for the same number of steps","username":"MatthewSpence","ts":"2021-06-24T18:25:00.104Z"}
{"msg":"hmm ... I don't see a PR 266 at https://github.com/hyperledger/aries-agent-test-harness/pulls","username":"smithbk","ts":"2021-06-24T18:30:39.610Z"}
{"msg":"https://github.com/hyperledger/aries-agent-test-harness/pull/266/files \nI assume it should be \"connection\" instead of \"conection\" on line 136","username":"smithbk","ts":"2021-06-24T18:30:39.610Z"}
{"msg":"Regarding losing the control and verification points.   I think we need to think about the purpose of AATH.  It is to allow continuous interop testing -- e.g. over time.  I think that when a Test Agent (e.g. Backchannel+Agent or Framework), it is incumbent on the creator of the backchannel to \"get it working\" and so they will be \"hands on\" in debugging.  If AATH gives only protocol level pass/fails, that should be enough to trigger the Test Agent maintainer(s) to dig in. The step by step info is (obviously) helpful, at the cost of dealing with issues like this, and the backchannel could provide that info in the form of a log for investigating post-mortem. But the P/F of the protocol is probably sufficient for the higher level purpose of AATH.","username":"swcurran","ts":"2021-06-24T18:36:57.512Z"}
{"msg":"I think the point of allowing a list would be to make the step by step process optional, for cases like Verity where it might be very difficult to \"get it working\". It would definitely still be best practice to go through as many steps as possible","username":"MatthewSpence","ts":"2021-06-24T18:43:06.630Z"}
{"msg":"Behave doesn't allow you to skip steps once you are inside of the scenario. So the test step process isn't optional, they will still be executed, they will just be less constrictive. The Backchannel to Agent operations are optional, which is what you are referring to.","username":"sheldon.regular","ts":"2021-06-24T18:51:10.540Z"}
{"msg":"Yes that's what I meant. Thank you for clarifying","username":"MatthewSpence","ts":"2021-06-24T18:53:27.428Z"}
{"msg":"yes, good catch.","username":"sheldon.regular","ts":"2021-06-24T18:58:30.662Z"}
{"msg":"Is this the path we want to go down then? I can start working on it if so","username":"MatthewSpence","ts":"2021-06-24T19:05:43.463Z"}
{"msg":"@swcurran yes, of course it is to allow interop testing, but it was to allow this based on the RFC. Losing the validation points could be considered a loss of resolution on what the RFC describes. Not to mention that auto responding is not talked about in the RFC(s). I'm not really arguing for or against. Just wearing my QA hat. ;-) I'm good with removing the validation if we agree that is the best approach. \nI'm still partial to the list solution. Backchannels could return something like this and take appropriate actions. \n```\n{\n\"state\":\"responded\",\n\"transistioned_states\": [\n   \"invited\",\n   \"requested\"\n ]\n}\n```","username":"sheldon.regular","ts":"2021-06-24T19:05:49.469Z"}
{"msg":"We could do both and see which one we like in the real world? \n1/ Make a connection test that does not check for intermediate states. This could eventually be the default one if it wins out.\n2/ also update existing tests to check for a transitioned_states list if the current state is not expected.","username":"sheldon.regular","ts":"2021-06-24T19:08:56.614Z"}
{"msg":"The transitioned states idea is a lot more general, could easily be applied to other protocols if need be","username":"MatthewSpence","ts":"2021-06-24T19:09:35.517Z"}
{"msg":"If the states will work -- I'm good with that.  I would just prefer not to go down the path of separate tests.","username":"swcurran","ts":"2021-06-24T19:15:39.871Z"}
{"msg":"Well the state list won't require separate tests.","username":"sheldon.regular","ts":"2021-06-24T19:16:32.361Z"}
{"msg":"fixed and merged.","username":"sheldon.regular","ts":"2021-06-24T19:24:27.491Z"}
{"msg":"I'm also good with this, but the more I think about this, the more I think that in most cases it is not going to add any real test value because most backchannel implementations will likely just hard-code the list that they return and not truly verify that the agent actually went thru those states.  It seems to me that you could:\n1) continue with the list approach and ask/warn backchannels to truly verify these transitional states and not return a hardcoded list;\n2) require the backchannel to implement a webhook to return each transitional state as it comes in; or\n3) not verify transitional states ... well, perhaps unless you know that the state truly requires manual intervention and so all agents would have to be able to have an admin control over that state.\nI really question though whether AATH really should verify all transitional states.\nMy $.02 (or less) worth :-)","username":"smithbk","ts":"2021-06-24T19:34:25.563Z"}
{"msg":"`I really question though whether AATH really should verify all transitional states.` That's the key as well.  The more states tracked, the more (I would assume) complex the backchannel, and hence the more effort to maintain them.  It's super helpful while creating a test or implementing a backchannel to know the states, but if it reduces the number of Test Agents or the breadth of the test coverage, it's a questionable trade-off.\n\nI'm very interested in what those building new backchannels think of AATH overall, the effort to build the backchannel and the resulting value.  Obviously, we think the overall suite is a huge win, so the easier it is for everyone to participate, the better.","username":"swcurran","ts":"2021-06-24T19:44:01.147Z"}
{"msg":"`I really question though whether AATH really should verify all transitional states.` I think that's the key as well.  The more states tracked, the more (I would assume) complex the backchannel, and hence the more effort to maintain them.  It's super helpful while creating a test or implementing a backchannel to know the states, but if it reduces the number of Test Agents or the breadth of the test coverage, it's a questionable trade-off.\n\nI'm very interested in what those building new backchannels think of AATH overall, the effort to build the backchannel and the resulting value.  Obviously, we think the overall suite is a huge win, so the easier it is for everyone to participate, the better.","username":"swcurran","ts":"2021-06-24T19:44:01.147Z"}
{"msg":"`I really question though whether AATH really should verify all transitional states.` I think that's the key as well.  The more states tracked, the more (I would assume) complex the backchannels, and hence the more effort to maintain them.  It's super helpful while creating a test or implementing a backchannel to know the states, but if it reduces the number of Test Agents or the breadth of the test coverage, it's a questionable trade-off.\n\nI'm very interested in what those building new backchannels think of AATH overall, the effort to build the backchannel and the resulting value.  Obviously, we think the overall suite is a huge win, so the easier it is for everyone to participate, the better.","username":"swcurran","ts":"2021-06-24T19:44:01.147Z"}
{"msg":"I agree that checking transitional states is good for debugging agents but not for being able to verify if a test passes or fails.  If that is true, then perhaps AATH should allow a backchannel to optionally implement a webhook to return transitional states, simply to make debugging easier, but not mandate it.","username":"smithbk","ts":"2021-06-24T19:48:38.922Z"}
{"msg":"I agree that if backchannels just start hardcoding the transitioned states it will be of no value to anyone. So where are we landing here? I feel like I'm back to doing both and see which one we favor in the real world. I'm creating an issue in the AATH repo with the options and our path forward.","username":"sheldon.regular","ts":"2021-06-24T20:08:44.773Z"}
{"msg":"This is a great conversation btw, it really helps create a more solid test harness to have you guys involved like this.","username":"sheldon.regular","ts":"2021-06-24T20:09:47.701Z"}
{"msg":"I can offer my $0.02 on this. I like the architecture of the test harness overall, it's easy to wrap your head around and there's very clear steps to follow. My main gripe is that the documentation on what needs to be returned to the test harness could be improved, and I do think it relies too much on testing states. Testing states is nice but not practical in a lot of cases like with Verity, where a lot of protocols will enter/exit multiple states before anything gets sent back to the controller. Ultimately what we care about is the end result of successful interop, and if state transitions aren't perfect then so be it","username":"MatthewSpence","ts":"2021-06-24T20:25:11.696Z"}
{"msg":"I can offer my $0.02 on this. I like the architecture of the test harness overall, it's easy to wrap your head around and there's very clear steps to follow. My main issue is that the documentation on what needs to be returned to the test harness could be improved, and I do think it relies too much on testing states. Testing states is nice but not practical in a lot of cases like with Verity, where a lot of protocols will enter/exit multiple states before anything gets sent back to the controller. Ultimately what we care about is the end result of successful interop, and if state transitions aren't perfect then so be it","username":"MatthewSpence","ts":"2021-06-24T20:25:11.696Z"}
{"msg":"I can honestly say that I was planning on hard coding the state transitions, if that's any indication.","username":"MatthewSpence","ts":"2021-06-24T20:29:30.002Z"}
{"msg":"As far as the effort to develop the backchannel, my personal experience may not be representative. I'm a new college grad (literally started work on late May this year) so I'm doing a lot of on the job learning. Writing the backchannel was pretty easy, most of my time initially was spent figuring out how to get Verity running against the VON-network and running properly in the test harness. Having Verity running against VON was valuable in and of itself though because it validated that we're not completely tied to Sovrin. I don't see a way to make integrating new agents much easier, and I think a more experienced developer would have been able to do it faster.","username":"MatthewSpence","ts":"2021-06-24T20:42:18.376Z"}
{"msg":"Issue created, did I miss anything. https://github.com/hyperledger/aries-agent-test-harness/issues/268","username":"sheldon.regular","ts":"2021-06-24T20:44:33.073Z"}
{"msg":"Issue created, did I miss anything? https://github.com/hyperledger/aries-agent-test-harness/issues/268","username":"sheldon.regular","ts":"2021-06-24T20:44:33.073Z"}
{"msg":"I can start if we agree on the chosen solution - AATH not checking intermediate states.","username":"sheldon.regular","ts":"2021-06-24T20:45:20.355Z"}
{"msg":"I think there may be value in making testing intermediate steps optional, a la option 2 in the issue, but for Verity specifically that won't be of much help","username":"MatthewSpence","ts":"2021-06-24T20:58:50.222Z"}
{"msg":"This option works for me. I think there may be value in making testing intermediate steps optional, a la option 2 in the issue, but for Verity specifically that won't be of much help","username":"MatthewSpence","ts":"2021-06-24T20:58:50.222Z"}
{"msg":"I've added another consideration to the #268 ticket.","username":"sheldon.regular","ts":"2021-06-25T15:08:49.474Z"}
{"msg":"I've added another consideration to the 268 ticket.","username":"sheldon.regular","ts":"2021-06-25T15:08:49.474Z"}
{"msg":"Is there a particular status I should return if Verity does not support one role in a given interaction? For example, Verity agents aren't intended to be holders","username":"MatthewSpence","ts":"2021-06-25T20:07:10.742Z"}
{"msg":"I don't think so. Just don't run tests with Verity in that role. Am I understanding you correctly?","username":"sheldon.regular","ts":"2021-06-25T20:08:33.677Z"}
{"msg":"In general Acme is an issue and Bob is a holder, but I do understand that there is a role reversal test that breaks the pattern. I think I will remove the test.  If we want to swap roles we can do another run and assign the roles to agents at the command line. That is unless, it is of value to you to make sure Verity isn't or can't do holder things? I doubt that is the case.","username":"sheldon.regular","ts":"2021-06-25T20:11:21.817Z"}
{"msg":"No there's no value to that","username":"MatthewSpence","ts":"2021-06-25T20:44:38.926Z"}
{"msg":"It'd be great if Verity magically had holder functionality lol but I'm not going to hold my breath","username":"MatthewSpence","ts":"2021-06-25T20:45:09.026Z"}
{"msg":":thumbsup:","username":"sheldon.regular","ts":"2021-06-25T20:45:31.830Z"}
{"msg":"Hey folks -- the Mobile Backchannel had been not working for a bit, but it is back and working again.  If you have a mobile wallet that you want to test against other Test Agent (such as ACA-Py), give it a go....instructions here: https://github.com/hyperledger/aries-agent-test-harness/blob/master/MOBILE_AGENT_TESTING.md","username":"swcurran","ts":"2021-06-29T17:00:15.473Z"}
{"msg":"Howdy folks, I'm looking to integrate the test harness into one of our Gitlab CI pipelines and I'm running into a couple of issues. First up: our gitlab jobs run in docker containers. I'm not an expert but my understanding is that running docker in docker is not recommended. If we were to spin up the Test Agent images separately, would there be a way for us to pass their endpoints in to the test harness?","username":"MatthewSpence","ts":"2021-07-01T20:43:21.579Z"}
{"msg":"Howdy folks, I'm looking to integrate the test harness into one of our Gitlab CI pipelines and I'm running into a couple of issues. First up: our gitlab jobs run in docker containers. I'm not an expert so correct me if I'm wrong about this, but my understanding is that running docker in docker is not recommended. If we were to spin up the Test Agent images separately, would there be a way for us to pass their endpoints in to the test harness?","username":"MatthewSpence","ts":"2021-07-01T20:43:21.579Z"}
{"msg":"Howdy folks, I'm looking to integrate the test harness into one of our Gitlab CI pipelines and I have some questions. First up: our gitlab jobs run in docker containers. I'm not an expert so correct me if I'm wrong about this, but my understanding is that running docker in docker is not recommended. If we were to spin up the Test Agent images separately, would there be a way for us to pass their endpoints in to the test harness?","username":"MatthewSpence","ts":"2021-07-01T20:43:21.579Z"}
{"msg":"Second up is kind of a combination issue/suggestion: it might make it easier to test agents if there were prebuilt docker images of Test Agents hosted somewhere. We want to run tests against static versions of other Test Agents, so that we can avoid a situation in which an external change breaks out tests. As things stand the way we would do that (to the best of my knowledge) is to store the docker images of each Test Agent between runs, but that requires us to store images of other people's agents, potentially a lot of them. If there were a dockerhub or something that we could pull the images from we might avoid this issue for us and other testers. This might also make it easier for other companies whose agents can't be built externally to contribute","username":"MatthewSpence","ts":"2021-07-01T21:05:09.682Z"}
{"msg":"I like this idea. Wouldn't be too hard to publish agent images to GHR/Dockerhub as part of the pipeline. Only question is how often you update them? Most run on master, does that mean we create a new image for every commit to the master/main branch of a repo?","username":"TimoGlastra","ts":"2021-07-02T08:26:42.089Z"}
{"msg":"That's a good question. I think that would be up to the maintainers of the individual agents how often they would want to contribute new images of their agents. For evernym that would probably be every time we release a new Verity version, so once a week or so","username":"MatthewSpence","ts":"2021-07-02T13:30:23.830Z"}
{"msg":"That fits the model we've been using.  \"acapy\" is the currently released version (but from PyPi), which \"acapy-main\" is the dev branch.  Others can follow that model or just use the first.  Note that  as long as you  use the dockerfile naming convention, the ./manage script automagically finds them and uses them if asked.","username":"swcurran","ts":"2021-07-02T18:05:59.199Z"}
{"msg":"That fits the model we've been using.  \"acapy\" is the currently released version (but from PyPi), which \"acapy-main\" is the dev branch.  Others can follow that model of both or just use the first.  Note that  as long as you  use the dockerfile naming convention, the ./manage script automagically finds them and uses them if asked.","username":"swcurran","ts":"2021-07-02T18:05:59.199Z"}
{"msg":"Yeah I was impressed when I saw that, it's a clever bit of scripting. What do you think about making a dockerhub and publishing the images to it?","username":"MatthewSpence","ts":"2021-07-02T19:03:59.614Z"}
{"msg":"Note sure what is needed for that. BC Gov has a Dockerhub account and we publish to it -- bcgovimages. I suspect Hyperledger has one -- is that what you are thinking?","username":"swcurran","ts":"2021-07-02T21:10:40.349Z"}
{"msg":"We could also use github container registry. It allows for public images and is already integrated I believe with github actions","username":"TimoGlastra","ts":"2021-07-02T21:50:08.735Z"}
{"msg":"That seems like a good idea","username":"MatthewSpence","ts":"2021-07-05T17:52:39.975Z"}
{"msg":"would anyone like to give this a review?\nhttps://github.com/hyperledger/aries-agent-test-harness/pull/271\norb's configuration files are in `services/orb/`, which shouldn't interfere with anything else\nin `./manage` I resorted to adding a conditional for adding agents to `aath_network`, so afgo agents are added but others aren't, since acapy has an unexplained but reproducible issue if it's added to `aath_network`","username":"filip.burlacu","ts":"2021-07-05T19:11:17.158Z"}
{"msg":"We need to think about how to get this into a test -- including (for example) what ACA-Py would have do to resolve a did:orb - how to add to the ACA-Py local resolvers or universal resolver.","username":"swcurran","ts":"2021-07-06T06:37:01.443Z"}
{"msg":"it's resolvable through uniresolver already :)","username":"filip.burlacu","ts":"2021-07-06T13:56:46.973Z"}
{"msg":"Can somebody explain to me what's going on in this command from the management script? \n`${terminalEmu} docker run ${INTERACTIVE} --rm --network=\"host\" -v ${BEHAVE_INI_TMP}:/aries-test-harness/behave.ini aries-test-harness -k ${runArgs} -D Acme=http://0.0.0.0:9020 -D Bob=http://0.0.0.0:9030 -D Faber=http://0.0.0.0:9040 -D Mallory=http://0.0.0.0:9050` Specifically the -k and -D flags.","username":"MatthewSpence","ts":"2021-07-06T21:04:39.767Z"}
{"msg":"These are behave options. \n-k stops behave from printing out skipped steps. \n-D loads the behave context dictionary with name=value. The contents of the context dictionary is available to every scenario/step at runtime.","username":"sheldon.regular","ts":"2021-07-06T21:29:11.452Z"}
{"msg":"Oh ok, thank you!","username":"MatthewSpence","ts":"2021-07-06T21:30:51.283Z"}
{"msg":":thumbsup:","username":"sheldon.regular","ts":"2021-07-06T21:31:03.144Z"}
{"msg":"I've configured ACA-Py in AATH to use the sicpa-dlab universal resolver plugin: https://github.com/hyperledger/aries-agent-test-harness/pull/281\nIt's successfully resolving orb DIDs now, and sending a request to afgo for the implicit invitation flow (ie, `\"Acme\" sends the request to \"Bob\" with the public DID` in `T005/6-RFC0023`)\nBut something unusual is going on - ACA-Py is sending a routing/forward message, that afgo is unable to handle since the agents don't have a connection yet.\nACA-Py doesn't seem to be doing this for any of the other didexchange flows, so I'm not sure what's going on here.","username":"filip.burlacu","ts":"2021-07-08T15:37:37.965Z"}
{"msg":"@ianco -- perhaps you could look at this PR?  Looks like it might be a bit deeper into ACA-Py.","username":"swcurran","ts":"2021-07-08T15:51:51.246Z"}
{"msg":"Would love to know what the DIDDoc for the resolved DID looks like.","username":"swcurran","ts":"2021-07-08T15:52:22.089Z"}
{"msg":"@swcurran I think the routing message was due to the orb did doc, it had a routing key when it shouldn't","username":"filip.burlacu","ts":"2021-07-08T16:03:06.255Z"}
{"msg":"I'll take a look today ...","username":"ianco","ts":"2021-07-08T16:08:47.053Z"}
{"msg":"@swcurran @ianco nvm, I got it working\nI'll be cleaning up the code and raising PRs later today","username":"filip.burlacu","ts":"2021-07-08T19:00:35.442Z"}
{"msg":":+1:","username":"ianco","ts":"2021-07-08T19:26:48.169Z"}
{"msg":"All afgo-acapy non-wip didexchange tests pass now","username":"filip.burlacu","ts":"2021-07-09T21:07:17.613Z"}
{"msg":"Nice!","username":"ianco","ts":"2021-07-09T21:07:50.711Z"}
{"msg":":ok_hand:","username":"sheldon.regular","ts":"2021-07-09T21:08:22.888Z"}
{"msg":"@sheldon.regular I also managed to avoid having to add acapy to `aath_network`, so it should avoid the strange errors people have seen with that","username":"filip.burlacu","ts":"2021-07-09T21:15:10.275Z"}
{"msg":"ok awesome.","username":"sheldon.regular","ts":"2021-07-09T21:15:47.679Z"}
{"msg":"https://github.com/hyperledger/aries-agent-test-harness/pull/281 is ready for review","username":"filip.burlacu","ts":"2021-07-09T21:15:50.263Z"}
{"msg":"Is PR 281 ready? I'll give it a try if so.","username":"sheldon.regular","ts":"2021-07-09T21:16:12.744Z"}
{"msg":"yes","username":"filip.burlacu","ts":"2021-07-09T21:16:30.456Z"}
{"msg":"@swcurran https://github.com/hyperledger/aries-agent-test-harness/pull/288 is ready - sheldon can confirm that there are no test regressions in afgo from integrating orb, and on the orb side firas & troy confirm that everything looks good","username":"filip.burlacu","ts":"2021-07-12T16:26:00.400Z"}
{"msg":"Merged -- w00t!","username":"swcurran","ts":"2021-07-13T08:19:36.239Z"}
{"msg":"Should we be merging https://github.com/hyperledger/aries-agent-test-harness/pull/281 as well?  I ran it and got same result as current main.","username":"swcurran","ts":"2021-07-13T08:24:09.899Z"}
{"msg":"@swcurran it's ready","username":"filip.burlacu","ts":"2021-07-13T14:20:03.955Z"}
{"msg":"I'm getting a new error when trying to run tests with Acapy in gitlab `No such file or directory: '/data-mount/plugin-config.yml` this started after I merged with the latest main, can somebody explain what's going on here?","username":"MatthewSpence","ts":"2021-07-14T20:23:17.286Z"}
{"msg":"you may need the latest from main.","username":"sheldon.regular","ts":"2021-07-14T20:25:51.709Z"}
{"msg":"This is just acapy throwing this?","username":"sheldon.regular","ts":"2021-07-14T20:26:16.057Z"}
{"msg":"Acapy is the only agent I've tested other than Verity, which is still internal","username":"MatthewSpence","ts":"2021-07-14T20:27:20.698Z"}
{"msg":"But yeah","username":"MatthewSpence","ts":"2021-07-14T20:27:30.136Z"}
{"msg":"Also this should be the latest from Main","username":"MatthewSpence","ts":"2021-07-14T20:28:22.892Z"}
{"msg":"you shouldn't be seeing that with the lastest. What is your run command?","username":"sheldon.regular","ts":"2021-07-14T20:44:53.104Z"}
{"msg":"This is what I'm using to test locally: `docker run -it --expose 9020-9029 -p 9020-9029:9020-9029 -e AGENT_NAME=Acme -e LEDGER_URL=http://dev.bcovrin.vonx.io -e DOCKERHOST=172.17.0.1 --entrypoint bash acapy_test` getting this to run in gitlab is a bit different but getting the same issue","username":"MatthewSpence","ts":"2021-07-14T20:48:47.089Z"}
{"msg":"the built image is tagged `acapy_test`, I built it manually","username":"MatthewSpence","ts":"2021-07-14T20:49:09.416Z"}
{"msg":"the built image is tagged `acapy_test`, I built it outside the management script","username":"MatthewSpence","ts":"2021-07-14T20:49:09.416Z"}
{"msg":"@MatthewSpence the manage script had to get a little smarter recently - it generates a plugin config YAML file for the plugin aca-py loads by default (`universal_resolver`) instead of that plugin config file being static, since it needs to amend the host IP of a config value to point to the docker host\nrun once with the manage script and it'll generate the file","username":"filip.burlacu","ts":"2021-07-14T21:09:20.999Z"}
{"msg":"Can you point me to where in the management script that's done?","username":"MatthewSpence","ts":"2021-07-14T21:10:32.831Z"}
{"msg":"(run anything, I know `acapy_test` would be rejected by the manage script)","username":"filip.burlacu","ts":"2021-07-14T21:10:33.805Z"}
{"msg":"https://github.com/hyperledger/aries-agent-test-harness/blob/main/manage#L317","username":"filip.burlacu","ts":"2021-07-14T21:11:06.298Z"}
{"msg":"one one machine the dockerhost shouldn't change, so you can just get the dockerhost value, open the template file, set the IP, and save it in whatever folder you like, then in your `docker run` command, mount that folder into `/data-mount`","username":"filip.burlacu","ts":"2021-07-14T21:13:46.515Z"}
{"msg":"all agents now have the option to load files at runtime instead of just at build time\nafgo and acapy use that so far, and the manage script sets the convention that the source directory is `<backchannel folder>/<agent-image-name>.data/` and the container mount is `/data-mount`","username":"filip.burlacu","ts":"2021-07-14T21:15:58.893Z"}
{"msg":"I should add some documentation for this..","username":"filip.burlacu","ts":"2021-07-14T21:16:24.272Z"}
{"msg":"(everything's automatic through the manage script though)","username":"filip.burlacu","ts":"2021-07-14T21:16:41.657Z"}
{"msg":"My goal is to get this working in Gitlab, so it'll probably be a bit more complicated than that but I see what you're saying and I think I know what I need to do","username":"MatthewSpence","ts":"2021-07-14T21:20:32.306Z"}
{"msg":"alternatively, add your acapy instance to the `aath_network` and use `uni-resolver-web.local` for the endpoint hostname in the plugin config file\nand then the file can be static, and you can even add it in the Dockerfile\nI didn't take this approach because people have reported issues with aca-py when it's added to `aath_network`, though, so ymmv","username":"filip.burlacu","ts":"2021-07-14T21:23:55.417Z"}
{"msg":"alternatively, add your acapy instance to the `aath_network` network and use `uni-resolver-web.local` for the endpoint hostname in the plugin config file\nand then the file can be static, and you can even add it in the Dockerfile\nI didn't take this approach because people have reported issues with aca-py when it's added to `aath_network`, though, so ymmv","username":"filip.burlacu","ts":"2021-07-14T21:23:55.417Z"}
{"msg":"Thanks for the advice, I'll see what I can do!","username":"MatthewSpence","ts":"2021-07-14T21:25:22.050Z"}
{"msg":"@dbluhm why does `acapy-resolver-universal` require exactly `aries-cloudagent = \"0.7.0rc1\"` as a dependency?\nHow can we use the plugin in the test harness, where acapy-main needs to be unpinned to allow continuous integration testing?","username":"filip.burlacu","ts":"2021-07-15T15:38:15.391Z"}
{"msg":"Has joined the channel.","username":"dbluhm","ts":"2021-07-15T15:38:15.472Z","type":"uj"}
{"msg":"run `./manage rebuild -a acapy-main` in AATH to see the issue","username":"filip.burlacu","ts":"2021-07-15T15:47:17.404Z"}
{"msg":"Maybe you can have two build targets / packages:\nOne for the plugin only, which a user needs to install with acapy\nAnd one for the plugin+acapy for use in the plugin's integration tests","username":"filip.burlacu","ts":"2021-07-15T15:51:35.222Z"}
{"msg":"Maybe you can have two build targets / packages?\nOne for the plugin only, which a user needs to install with acapy\nAnd one for the plugin+acapy for use in the plugin's integration tests","username":"filip.burlacu","ts":"2021-07-15T15:51:35.222Z"}
{"msg":"Hm. Good question. Sorry for the headache lol. Didn't realize this was already being used in AATH but happy to see it being used! Would `>= 0.7.0` solve our problem?","username":"dbluhm","ts":"2021-07-15T15:59:23.878Z"}
{"msg":"I think so :)","username":"filip.burlacu","ts":"2021-07-15T16:00:13.628Z"}
{"msg":"https://github.com/sicpa-dlab/acapy-resolver-universal/pull/12\nShould have this merged soon. Now that 0.7.0 is out, hoping to have a tagged and published release soon as well.","username":"dbluhm","ts":"2021-07-15T16:08:03.042Z"}
{"msg":"We started working with AATH more directly recently and we've run into some issues that I've attempted to correct with this PR: https://github.com/hyperledger/aries-agent-test-harness/pull/293\n\nThe nature of the issues has me a little perplexed though since it seems like nothing should be working but obviously the pipeline is still pushing out results (as far as I know at least lol) -- which leads me to feel that I might be missing something. Feedback is appreciated :slight_smile:","username":"dbluhm","ts":"2021-07-16T16:01:55.929Z"}
{"msg":"Has joined the channel.","username":"Laichonious","ts":"2021-07-16T16:27:04.677Z","type":"uj"}
{"msg":"Hey there! I'm a software tester with a basic, general knowledge of linux and software testing (read: total noob). I'm looking for some direction on general usage of AATH for someone who's just starting out. For example, is there an option or argument that I can include in the run command that will wait for my input at critical interaction points? Specifically, I need to scan a QR code to accept invitations/credentials in the mobile deployment of the app, but the script scrolls through those steps and zooms on by before I have a chance to react.","username":"Laichonious","ts":"2021-07-16T16:27:05.073Z"}
{"msg":"Hi @Laichonious  I believe the mobile tests should do exactly as you are describing. Have you tried that yet? https://github.com/hyperledger/aries-agent-test-harness/blob/main/MOBILE_AGENT_TESTING.md","username":"sheldon.regular","ts":"2021-07-16T16:31:44.954Z"}
{"msg":"You might have to scroll back to see the QR code, but soon after the text does stop everytime, so it's not that bad.  Or get a very long terminal so it doesn't scroll off....","username":"swcurran","ts":"2021-07-16T16:32:56.446Z"}
{"msg":"Yes, those are the intructions that I've been following, though if that is what it is supposed to do, then I suspect there is something I might be doing incorrectly or there is a problem with how it has been set up","username":"Laichonious","ts":"2021-07-16T16:33:21.709Z"}
{"msg":"@swcurran I can scroll back to the QR codes, but unfortunately I can't do anything with them. By the time I get one scanned, the rest have already printed and the test has concluded, so it starts shutting down all of the agents before I can establish a connection from the first invite","username":"Laichonious","ts":"2021-07-16T16:44:24.656Z"}
{"msg":"PR to fix intermittent issues with uniresolver not always being ready when needed: https://github.com/hyperledger/aries-agent-test-harness/pull/296","username":"filip.burlacu","ts":"2021-07-16T20:18:46.496Z"}
{"msg":"That's very weird. When I've run it, it stops at the point where the other agent is issuing or verifying so I have lots of time to scan before moving to the next test.  What agent are you using as issuers and verifiers?","username":"swcurran","ts":"2021-07-17T06:36:36.059Z"}
{"msg":"@ianco ^^","username":"swcurran","ts":"2021-07-17T06:36:43.668Z"}
{"msg":"Okay, whose buttons do I need to push? lol our testing has only been unblocked by using the branch this PR is based on but would love to know if we're missing something","username":"dbluhm","ts":"2021-07-19T18:35:05.856Z"}
{"msg":"I witnessed this same behavior on (and unblocked @Laichonious with) my fixed branch on the PR linked in my other message. Perhaps the odd behavior is another symptom of another problem?","username":"dbluhm","ts":"2021-07-19T18:43:09.359Z"}
{"msg":"The issuers and verifiers were ACA-Py@main","username":"dbluhm","ts":"2021-07-19T18:48:26.935Z"}
{"msg":"Hi @dbluhm I just did a clean build/run from the latest `main` branch and everything worked ok.","username":"ianco","ts":"2021-07-19T19:30:10.237Z"}
{"msg":"`./manage run -d acapy-main -t @AcceptanceTest -t ~@wip`","username":"ianco","ts":"2021-07-19T19:30:12.159Z"}
{"msg":"The Dockerfile was changed recently to use `FROM python:3.7-slim` (instad of what we used to use)","username":"ianco","ts":"2021-07-19T19:30:52.739Z"}
{"msg":"What command are you running?  I think ngrok is only started when the mobile backchannel is used ...","username":"ianco","ts":"2021-07-19T19:31:19.236Z"}
{"msg":"I'll give this a try, I notice (from another @dbluhm  question) that a recent Dockerfile change may be causing this issue...","username":"ianco","ts":"2021-07-19T19:32:17.047Z"}
{"msg":"Ah -- yes, we were using the following command: `LEDGER_URL_CONFIG=http://test.bcovrin.vonx.io TAILS_SERVER_URL_CONFIG=https://tails.vonx.io ./manage run -d acapy-main -b mobile -n -t @MobileTest`","username":"dbluhm","ts":"2021-07-19T19:33:18.824Z"}
{"msg":"Taken from the docs on mobile testing","username":"dbluhm","ts":"2021-07-19T19:33:44.125Z"}
{"msg":"OK I'll test out your PR, thanks for this fix!","username":"ianco","ts":"2021-07-19T19:34:13.812Z"}
{"msg":"Thanks for checking it out! I worry it's an incomplete fix given the strange behavior @Laichonious mentioned but hopefully it's a step in the right direction","username":"dbluhm","ts":"2021-07-19T19:35:13.301Z"}
{"msg":"FYI without your PR I get the \"curl\" error (I suspect related to the docker change) and *with* your PR I get the same behaviour as @Laichonious reported on the other thread.  I'm looking into it ...","username":"ianco","ts":"2021-07-19T20:24:17.948Z"}
{"msg":"I've pulled @dbluhm 's PR (fixes another issue) and am able to duplicate this issue.  There's an error establishing the initial connection to the mobile, that's why the tests just continue to zip along ...","username":"ianco","ts":"2021-07-19T20:25:26.352Z"}
{"msg":"I'm looking into it further ...","username":"ianco","ts":"2021-07-19T20:25:32.596Z"}
{"msg":"Aha I think this commit broke it:  https://github.com/hyperledger/aries-agent-test-harness/commit/31d2ce5c4e8b7807a93008cb0a52c1962d7575d5#diff-4f9f4e26fd1603606f340759f023d1dcff4e270b8d8813c8c63e5bbd86e468d6","username":"ianco","ts":"2021-07-19T20:38:47.181Z"}
{"msg":"It removes some \"wait\" steps","username":"ianco","ts":"2021-07-19T20:39:18.769Z"}
{"msg":"This (draft) PR fixes the issue with mobile connections:  https://github.com/hyperledger/aries-agent-test-harness/pull/299","username":"ianco","ts":"2021-07-20T18:41:29.422Z"}
{"msg":"\"Draft\" because I'm still having issues with esatus and the connections - the connection is established but esatus doesn't seem to recognize that (even though the downstream connections and proofs work ...)","username":"ianco","ts":"2021-07-20T18:42:07.421Z"}
{"msg":"Still testing ...","username":"ianco","ts":"2021-07-20T18:42:13.349Z"}
{"msg":"Done with this PR, would be interested in what results others get.  For me Trinsic works with no issues, esatus works but there is some confusing establishing the connection (try it, you'll see)","username":"ianco","ts":"2021-07-20T20:19:54.132Z"}
{"msg":"Haha! Yes, the test harness is now behaving as intended, though I have not gotten it to work with either Trinsic or the app I'm testing, so I suspect there is a network configuration mismatch somewhere.","username":"Laichonious","ts":"2021-07-20T21:50:21.506Z"}
{"msg":"FYI @sheldon.regular tested the PR and merged it into `main`","username":"ianco","ts":"2021-07-20T22:25:34.482Z"}
{"msg":"FYI -- AFJ and AF.NET daily tests passing dropped from last night's run.  E.g. AF-J to AF.NET drop from 27/36 passing to 6/36 passing.  Hoping someone can dig take a look.  You can drill down from here: https://allure.vonx.io/api/allure-docker-service/projects/javascript-b-dotnet/reports/latest/index.html?redirect=false#behaviors","username":"swcurran","ts":"2021-07-21T13:42:12.153Z"}
{"msg":"I'll try to take a look. Seems like something is broken as almost all tests are failing","username":"TimoGlastra","ts":"2021-07-21T13:53:39.555Z"}
{"msg":"Let me know if the report that I linked above was helpful.  Hoping we can get in the habit of using that resource to easily find issues.","username":"swcurran","ts":"2021-07-21T14:44:40.341Z"}
{"msg":"Fixing them might be different... :-)","username":"swcurran","ts":"2021-07-21T14:44:55.740Z"}
{"msg":"Definitely useful. However I think we can improve on the usefulness by logging a bit more info. Most errors just show `AssertionError` or something. Not sure if that would be easy to do...","username":"TimoGlastra","ts":"2021-07-21T14:47:10.742Z"}
{"msg":"Also maybe uploading the logs from `.logs` directory so you can see the agent logs themselves","username":"TimoGlastra","ts":"2021-07-21T14:47:36.089Z"}
{"msg":"AFJ spits out a lot","username":"TimoGlastra","ts":"2021-07-21T14:47:41.278Z"}
{"msg":"k","username":"swcurran","ts":"2021-07-21T14:47:46.254Z"}
{"msg":"I can take a look at uploading the logs. Have done something similar for AFJ: https://github.com/hyperledger/aries-framework-javascript/blob/fb28935a0658ef29ee6dc3bcf7cd064f15ac471b/.github/workflows/continuous-integration.yml#L113-L127","username":"TimoGlastra","ts":"2021-07-21T14:50:26.155Z"}
{"msg":"add this after the run-test-harness(-wo-reports) action:\n```\n      - name: archive logs\n        uses: actions/upload-artifact@v2\n        with:\n          name: logs\n          path: test-harness/**/*.log\n```\nthis is exactly what I used a few days ago to test my PRs","username":"filip.burlacu","ts":"2021-07-21T15:50:31.223Z"}
{"msg":"add this after the run-test-harness(-wo-reports) action in a workflow you want to log:\n```\n      - name: archive logs\n        uses: actions/upload-artifact@v2\n        with:\n          name: logs\n          path: test-harness/**/*.log\n```\nthis is exactly what I used a few days ago to test my PRs","username":"filip.burlacu","ts":"2021-07-21T15:50:31.223Z"}
{"msg":"Thanks @filip.burlacu","username":"TimoGlastra","ts":"2021-07-21T19:17:42.782Z"}
{"msg":"AF.NET crashes when it receives a did document with any service that is different from `IndyAgent`. We send both `IndyAgent` and `did-communication`. I can remove it in AFJ, but seems more like an AF.NET issue\n\n```\n        {\n          \"id\": \"XQzpmfw5BV6wF2vpkXsZvB#did-communication\",\n          \"serviceEndpoint\": \"http://192.168.65.6:9021\",\n          \"type\": \"did-communication\",\n          \"priority\": 1,\n          \"recipientKeys\": [\"HaSRSaEFVHsv1jqxCxxQEDvgJwXAkMDgkKhPEBe3SbNj\"],\n          \"routingKeys\": []\n        }\n```","username":"TimoGlastra","ts":"2021-07-21T19:18:57.494Z"}
{"msg":"@tomislav @mboyd -- this would seem to be important.","username":"swcurran","ts":"2021-07-21T21:15:46.220Z"}
{"msg":"Made a fix in AFJ and updated the .NET backchannel: https://github.com/hyperledger/aries-agent-test-harness/pull/300","username":"TimoGlastra","ts":"2021-07-21T21:48:42.602Z"}
{"msg":"FYI -- looks like support has been broken for running AATH on Play With Docker.  Not the end of the world, but it was a nice option for getting started quickly with just a browser -- no other dependencies.\n\nPerhaps we should restore, or perhaps we should look at GitPod.  The folks creating Business Partner Agent did that, and it's a pretty sweet setup.  Perhaps a \"help wanted\" effort?\n\nFor now, I'll likely just remove the references to Play with Docker.","username":"swcurran","ts":"2021-07-24T20:30:01.388Z"}
{"msg":"Can I get a quick explanation of the uniresolver and did-sov driver services that the test harness spins up? Are those absolutely necessary for the test harness to run the connections protocol correctly?","username":"MatthewSpence","ts":"2021-07-26T16:19:17.123Z"}
{"msg":"Some Aries frameworks now have general DID resolver capabilities so that regardless of the DID they receive, they can resolve it.  The uniresolver is based on the Universal Resolver and so covers a number of DID methods, the did-sov one is specifically for DID sov.\n\nDepending on the framework you want to interact with, you may need those.  For example, ACA-Py had not heard of \"did:orb\" until it added the capability to use an external resolver (like uniresolver) and then resolved the DID using that.\n\nAll that to say, if you don't use a universal resolver, you don't need it.  If you are running tests with a Test Agent that uses it and you are using DIDs that they will need the resolvers to resolve, you will need it.\n\nRight now, ACA-Py can use it, but only needs it for tests not using did:sov, did:peer and did:key.\n\nAF-Go uses the did-sov resolver to resolve did:sov DIDs.  AF-Go use did:orb, so to connect to an AF-Go instance, you will likely need a DID resolver.\n\nHope that makes sense...","username":"swcurran","ts":"2021-07-26T16:50:55.859Z"}
{"msg":"yes that makes sense. Thank you","username":"MatthewSpence","ts":"2021-07-26T16:51:58.855Z"}
{"msg":"Tangentially related to the above ^, I'd like to come up with a way to determine which services to start based on which tests are being run\nwhy run tails if we don't need it, why run uniresolver, etc\nsome tests shouldn't even need VON running","username":"filip.burlacu","ts":"2021-07-27T13:37:18.003Z"}
{"msg":"Tangentially related to the above ^, I'd like to come up with a way to determine which services to start based on which tests are being run, and with which agents\nwhy run tails if we don't need it, why run uniresolver, etc\nsome tests shouldn't even need VON running","username":"filip.burlacu","ts":"2021-07-27T13:37:18.003Z"}
{"msg":"Agreed. We'd have to move the services and agents starting to being part of the test harness vs. in parallel, I think.","username":"swcurran","ts":"2021-07-27T13:48:46.308Z"}
{"msg":"https://github.com/hyperledger/aries-agent-test-harness/pull/308 is ready for review\nI ran the afgo-afgo (https://github.com/Moopli/aries-agent-test-harness/actions/runs/1073840810) and acapy-aip20 (https://github.com/Moopli/aries-agent-test-harness/actions/runs/1073843961) workflows on this branch on my fork, to verify that my changes to the test data (to make said data more conformant with its schemas) wouldn't break a more permissive agent","username":"filip.burlacu","ts":"2021-07-28T06:42:31.547Z"}
{"msg":"^ actually, just gonna add one more change, I should be able to get the last few tests working too","username":"filip.burlacu","ts":"2021-07-28T13:35:30.695Z"}
{"msg":"Awesome news -- that's great!","username":"swcurran","ts":"2021-07-28T14:29:06.429Z"}
{"msg":"@filip.burlacu is there any interest in doing a session at the DIF Interop group about the progress being made on the Interop testing being done here?  I think the recent work about interop between AF-Go and ACA-Py is worth talking about in the community.\n\nWe could also cover the recent additions to ACA-Py, and the overall feature set in AF-Go.","username":"swcurran","ts":"2021-07-28T21:53:36.602Z"}
{"msg":"Yeah, that's worth talking about - I think once we can demonstrate AIP2 issue-credential and present-proof interop, that'll be a good milestone :)","username":"filip.burlacu","ts":"2021-07-28T22:00:44.212Z"}
{"msg":"Plus the DID Orb work and uniresolver component.","username":"swcurran","ts":"2021-07-28T22:09:51.504Z"}
{"msg":"👍🏼","username":"jljordan_bcgov","ts":"2021-07-28T22:13:40.432Z"}
{"msg":"Can somebody explain how to configure aca-py to use an ngrok endpoint in the test harness? I'm seeing logic that indicates this is possible and I think I'll need it to get things working in Gitlab","username":"MatthewSpence","ts":"2021-07-30T19:35:12.091Z"}
{"msg":"IN the ./manage arguments, use the \"-n\" option.","username":"swcurran","ts":"2021-07-30T19:51:41.861Z"}
{"msg":"Is that what you need?","username":"swcurran","ts":"2021-07-30T19:51:50.422Z"}
{"msg":"I think so, thank you","username":"MatthewSpence","ts":"2021-07-30T19:55:02.325Z"}
{"msg":"Gitlab is NOT friendly to this kind of setup when you have no runners that support docker-in-docker","username":"MatthewSpence","ts":"2021-07-30T19:55:43.208Z"}
{"msg":"To be clear though that's Gitlab's fault","username":"MatthewSpence","ts":"2021-07-30T19:55:51.119Z"}
{"msg":"To be clear though that's Gitlab's fault, not the test harness","username":"MatthewSpence","ts":"2021-07-30T19:55:51.119Z"}
{"msg":"Initial PR for the Verity Backchannel is in: https://github.com/hyperledger/aries-agent-test-harness/pull/313","username":"MatthewSpence","ts":"2021-08-03T21:37:50.421Z"}
{"msg":"Some notes: This only supports the Connection Protocol, and only the Inviter role. The main purpose of this is to get the plumbing in place so we can add more protocols in the future, since Verity is kind of a weird fit for this setup. Any and all feedback is appreciated","username":"MatthewSpence","ts":"2021-08-03T21:40:32.193Z"}
{"msg":"Some notes: This only supports the Connection Protocol, and only the Inviter role. The main purpose of this is to get the plumbing in place so we can add more protocols in the future. Any and all feedback is appreciated","username":"MatthewSpence","ts":"2021-08-03T21:40:32.193Z"}
{"msg":"https://github.com/hyperledger/aries-agent-test-harness/pull/315\na fix to maintain afgo-afgo coverage for rfc 0453/0454","username":"filip.burlacu","ts":"2021-08-05T05:00:24.332Z"}
{"msg":"Has joined the channel.","username":"bruno.hivert","ts":"2021-09-10T19:44:14.768Z","type":"uj"}
{"msg":"@regiseloi","username":"bruno.hivert","ts":"2021-09-10T19:44:15.029Z"}
{"msg":"Has joined the channel.","username":"regiseloi","ts":"2021-09-10T19:44:15.122Z","type":"uj"}
{"msg":"Cross posted from #aries \nI'm running into some unexpected and inconsistent issues with the Aries test harness (AATH).\nI'm testing using several mobile wallets on iOS (Lissi among others), but I keep having problems accepting the connection request from Faber when executing @T001.5-RFC0037. I have no problem with T001-RFC0160, so I'm not sure what is different about this connection request (I can also execute @T003-RFC0036 without a problem).\nThe mobile agent gets the connection request, but it's unable to accept it.\n\nFYI, here's the command I use (this is using ACA-Py 0.7.1RC0):\nLEDGER_URL_CONFIG=http://test.bcovrin.vonx.io TAILS_SERVER_URL_CONFIG=https://tails.vonx.io ./manage run -d acapy-main -b mobile -n -r allure -t @T001.5-RFC0037\n\nAnd more details on what is happening at the time:\n`/steps/0160-connection.py:272 62.928sonnection_id, state'}\nAssertion Failed: FAILED SUB-STEP: And \"Faber\" sends a connection response to \"Bob\"\nSubstep info: Assertion Failed: resp_status 500 is not 200; Expected state request but note recevied\nTraceback (of failed substep):\nFile \"/usr/local/lib/python3.7/site-packages/behave/model.py\", line 1329, in run\nmatch.run(runner.context)\nFile \"/usr/local/lib/python3.7/site-packages/behave/matchers.py\", line 98, in run\nself.func(context, args, kwargs)\nFile \"features/steps/0160-connection.py\", line 161, in step_impl\nassert resp_status == 200, f'resp_status {resp_status} is not 200; {resp_text}'`\n\nI'd welcome any suggestions to troubleshoot this further!","username":"regiseloi","ts":"2021-09-10T19:45:03.306Z"}
{"msg":"What other mobile wallets are you using? I've been using Trinsic and esatus the last couple of days with no problems on that test.","username":"sheldon.regular","ts":"2021-09-10T19:51:17.896Z"}
{"msg":"I have tried Lissi this morning and I get that same issue. However, I could not set the ledger as the instructions says here https://vonx.io/getwallet#lissi-wallet. So I abandoned my effort with lissi","username":"sheldon.regular","ts":"2021-09-10T19:53:41.309Z"}
{"msg":"I get the same error with Trinsic and esatus.","username":"regiseloi","ts":"2021-09-10T19:55:10.956Z"}
{"msg":"Also, just an FYI, you can remove that `-r allure` from your command. It's for generating formal allure reports.  No need of it here unless you want allure results for some reason?","username":"sheldon.regular","ts":"2021-09-10T19:55:59.862Z"}
{"msg":"Have you followed the setup instructions on this page for Trinsic and esatus?  https://vonx.io/getwallet#lissi-wallet","username":"sheldon.regular","ts":"2021-09-10T19:56:40.574Z"}
{"msg":"Yes, all my wallets are configured for BCovrin test. And as I mentioned, I'm able to run RFC0036 and accept a credential offer.","username":"regiseloi","ts":"2021-09-10T19:58:00.863Z"}
{"msg":"Not sure if this will solve the problem but you don't seem to have the latest from the repo. That message `Expected state request but note recevied` is old and there have been some rework there in the last few weeks. Could you try it with the latest?","username":"sheldon.regular","ts":"2021-09-10T20:03:29.800Z"}
{"msg":"Not sure if this will solve the problem but you don't seem to have the latest from the repo. That message `Expected state request but note recevied` is old and there has been some rework there in the last few weeks. Could you try it with the latest?","username":"sheldon.regular","ts":"2021-09-10T20:03:29.800Z"}
{"msg":"Interesting, thanks for pointing that out. That's odd, we just installed it a few days ago, but we should check on this.","username":"regiseloi","ts":"2021-09-10T20:04:27.233Z"}
{"msg":"Just want to mention I was just able to run that `T001.5-RFC0037` test successfully with lissi.","username":"sheldon.regular","ts":"2021-09-10T22:04:18.316Z"}
{"msg":"Has joined the channel.","username":"JamesEbert","ts":"2021-09-11T06:09:42.705Z","type":"uj"}
{"msg":"Has joined the channel.","username":"DenverNaicker","ts":"2021-09-12T17:00:02.863Z","type":"uj"}
{"msg":"Has joined the channel.","username":"jcourt","ts":"2021-09-12T23:25:06.275Z","type":"uj"}
{"msg":"Has joined the channel.","username":"Anasalamin","ts":"2021-09-13T13:03:56.520Z","type":"uj"}
{"msg":"Thanks Sheldon. We think we're having some kind of connection issues with ngrok when running the test harness on a VM rather than a local installation.","username":"regiseloi","ts":"2021-09-13T17:11:27.996Z"}
{"msg":"In case anyone was curious: we uncovered some weird issues with ngrok and centos7. We switched to Debian 10 for that specific VM and all is well in the world again.","username":"regiseloi","ts":"2021-09-15T21:37:34.486Z"}
{"msg":"Excellent. Thanks for the info. Good to know.","username":"sheldon.regular","ts":"2021-09-15T21:39:09.098Z"}
{"msg":"PR for findy-agent backchannel: https://github.com/hyperledger/aries-agent-test-harness/pull/341 All feedback is welcome :pray:","username":"lauravuo-techlab","ts":"2021-09-17T09:41:53.418Z"}
{"msg":"Awesome @lauravuo-techlab -- really looking forward to trying this and looking at the Findy Agent!  Loved the Travelogue blog post.","username":"swcurran","ts":"2021-09-17T14:24:35.856Z"}
{"msg":"I'm testing several mobile wallets, and I've run into an interesting situation with how existing connections are being handled: all tests start with RFC0160 to connect the agents. One particular wallet app gives me a \"you are already connected to this org\" message, which causes the tests to fail, because as far as I can tell it's not sending a response back at all.to accept or\n(I tried manually deleting the existing connection records from the app, but it's too clever and doesn't let me do that if it has received or accepted a credential offer from that issuer before)\nI'm trying to understand how this should be working, and what response the mobile agent should be sending back. It looks like it may not be sending a response at all.","username":"regiseloi","ts":"2021-09-17T22:18:25.746Z"}
{"msg":"I'm testing several mobile wallets, and I've run into an interesting situation with how existing connections are being handled: all tests start with RFC0160 to connect the agents. One particular wallet app gives me a \"you are already connected to this org\" message, which causes the tests to fail, because as far as I can tell it's not sending a response back at all.\n\n(I tried manually deleting the existing connection records from the app, but it's too clever and doesn't let me do that if it has received or accepted a credential offer from that issuer before)\nI'm trying to understand how this should be working, and what response the mobile agent should be sending back. It looks like it may not be sending a response at all.\n\nHere's the traceback, I'd be happy to provide more details if needed. But mostly I'm interested to know if anyone has come across this before.\n`Traceback (most recent call last):\n  File \"/aries-backchannels/python/agent_backchannel.py\", line 319, in _post_command_backchannel\n    operation, rec_id=rec_id, data=data\n  File \"acapy/acapy_backchannel.py\", line 532, in make_agent_POST_request\n    raise Exception(f\"Expected state request but not received\")\nException: Expected state request but not received`","username":"regiseloi","ts":"2021-09-17T22:18:25.746Z"}
{"msg":"Is the wallet app that manifests the problem available for me to use and reproduce?","username":"sheldon.regular","ts":"2021-09-20T16:12:22.912Z"}
{"msg":"You can try Adeya SSI wallet, that one is available in the app store.","username":"regiseloi","ts":"2021-09-20T19:32:59.249Z"}
{"msg":"Thanks I'll give it a go.","username":"sheldon.regular","ts":"2021-09-20T20:03:22.587Z"}
{"msg":"@regiseloi The Adeya wallet appears to be trying to uniquely identify a individual agent using the `label` attribute in the invitation. If the label is the same it reports `you are already connected to this org`. If I make the label unique for every invitation then Adeya accepts the invitation and you can create the connection. This seems odd to me as there is no guarantee that the label in the calling agent is using the label to uniquely identify itself, or expecting others to identify itself by this attribute. The label doesn't seem to be a great way to identify the agent.  So you have any insight on this?","username":"sheldon.regular","ts":"2021-09-21T14:02:37.813Z"}
{"msg":"@regiseloi The Adeya wallet appears to be trying to uniquely identify a individual agent using the `label` attribute in the invitation. If the label is the same it reports `you are already connected to this org`. If I make the label unique for every invitation then Adeya accepts the invitation and you can create the connection. This seems odd to me as there is no guarantee that the label in the calling agent is using the label to uniquely identify itself, or expecting others to identify itself by this attribute. The label doesn't seem to be a great way to identify the agent.  Do you have any insight on this?","username":"sheldon.regular","ts":"2021-09-21T14:02:37.813Z"}
{"msg":"That's really helpful. I'm curious how you figured that out, but that makes a lot of sense.\nI can see what someone was trying to do from a UX perspective, but using the label attribute this way is probably not the best way to go about it.\nI'll provide the feedback to the team behind this if/when I get a chance.\n\nAm I right in thinking that there's no way today to overwrite the default labels with the Aries test harness?","username":"regiseloi","ts":"2021-09-21T19:01:45.375Z"}
{"msg":"It was a hunch since I seen the label used in messages in the wallet. I just made the test add a unique id to the label after each invitation was created to test it. \nI can make the tests do this unique label all the time, but I am reluctant to do so given there is no rule that this label is to be unique, and there is no way to make it unique just for that wallet. It would have to be for all agents using the test harness. \nIf it helps you move forward, I can possibly do it temporarily and remove it when there is another approach in that wallet?","username":"sheldon.regular","ts":"2021-09-21T21:07:18.298Z"}
{"msg":"Let me think about this, but I'd also be reluctant to make a change to the test harness that might suggest that the label should be unique, when it's clearly not meant to be used this way. Thanks for sharing your insights","username":"regiseloi","ts":"2021-09-21T21:12:15.342Z"}
{"msg":"np, keep me posted. :thumbsup:","username":"sheldon.regular","ts":"2021-09-21T21:49:12.614Z"}
{"msg":"@lauravuo-techlab I'm attempting to run findy with the the javascript and dotnet agents. However, I can't get the findy agent to run locally. Both with the AATH manage script and outside running the findy agent with docker, I get the following messages. I'm hoping you may be able to help me get it going properly. \n```\nStarting backchannel to port 9020 and agent to port 9021\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  3092  100  3092    0     0  1006k      0 --:--:-- --:--:-- --:--:-- 1006k\nnohup: redirecting stderr to stdout\nPool created successfully by name: interop\nI0924 16:05:40.847210      32 findy.go:25] {\"backtrace\":\"\",\"message\":\"Error: Pool timeout\\n  Caused by: No consensus possible\\n\"}\nError: Error: Pool timeout\n  Caused by: No consensus possible\n\nnohup: redirecting stderr to stdout\n2021/09/24 16:05:41 Starting server at port 9020\n2021/09/24 16:05:41 Auth url http://localhost:8888, origin localhost:8888, user findy-agent-backchannel-1632499541863774800\npanic: execute authenticator: register user: status code: 500 Internal Server Error\n\ngoroutine 1 [running]:\ngithub.com/lainio/err2.Check(...)\n/go/pkg/mod/github.com/lainio/err2@v0.6.1/err2.go:34\ngithub.com/findy-network/findy-agent-backchannel/agent.Init(0xab6395)\n/go/findy-agent-backchannel/agent/agent.go:70 +0x46b\nmain.main()\n/go/findy-agent-backchannel/main.go:31 +0xea\n```","username":"sheldon.regular","ts":"2021-09-24T16:12:23.482Z"}
{"msg":"The easiest option is probably run with the AATH manage script. Which commands are you now using to run the tests?","username":"lauravuo-techlab","ts":"2021-09-27T04:03:36.921Z"}
{"msg":"I'm running the same command that is used for the workflow test runset as documented in the yml file. However I run the tails server and von network outside of the manage script. Usually the agents just see these existing and use them. However with findy it only works if I let the manage script handle von network and the tails server. So I'm good for now, I'm running everything from the manage script, but I wouldn't mind knowing why it doesn't work outside of manage. It makes it a little more difficult for debugging.","username":"sheldon.regular","ts":"2021-09-27T15:56:19.110Z"}
{"msg":"I'm suddenly getting errors in local environment running AATH.  Error relates to a missing network on starting the services -- tails and universal resolvers.  Has anyone else seen that?  Any ideas?  This is on a basic test run that I've done 1000 times before.\n\n```\nCreating von_webserver_1 ... done\nCreating von_node4_1     ... done\nCreating von_node2_1     ... done\nCreating von_node3_1     ... done\nCreating von_node1_1     ... done\nWant to see the scrolling container logs? Run \"./manage logs\"\nwaiting for ledger to start.........\nstarting local uniresolver...\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  3076  100  3076    0     0   500k      0 --:--:-- --:--:-- --:--:--  500k\nStarting driver-did-sov.local ... \nStarting uni-resolver-web.local ... error\n\nStarting driver-did-sov.local   ... error9c not found\n\nERROR: for driver-did-sov.local  Cannot start service driver-did-sov.local: network ec486eddeffca04bf1ccc130d3d2adc76ee0d38fc2515281e5eca6ac53a0429c not found\n\nERROR: for uni-resolver-web.local  Cannot start service uni-resolver-web.local: network ec486eddeffca04bf1ccc130d3d2adc76ee0d38fc2515281e5eca6ac53a0429c not found\n\nERROR: for driver-did-sov.local  Cannot start service driver-did-sov.local: network ec486eddeffca04bf1ccc130d3d2adc76ee0d38fc2515281e5eca6ac53a0429c not found\nERROR: Encountered errors while bringing up the project.\nstarting local indy-tails-server...\nStarting docker_tails-server_1       ... error\nStarting docker_ngrok-tails-server_1 ... \n\nERROR: for docker_tails-server_1  Cannot start service tails-server: network 17e9c2ef9f12c5d743e3dc7597ea91c17461372a04ad7c2edf181309bec7d38a not founStarting docker_ngrok-tails-server_1 ... error\n\nERROR: for docker_ngrok-tails-server_1  Cannot start service ngrok-tails-server: network 17e9c2ef9f12c5d743e3dc7597ea91c17461372a04ad7c2edf181309bec7d38a not found\n\nERROR: for tails-server  Cannot start service tails-server: network 17e9c2ef9f12c5d743e3dc7597ea91c17461372a04ad7c2edf181309bec7d38a not found\n\nERROR: for ngrok-tails-server  Cannot start service ngrok-tails-server: network 17e9c2ef9f12c5d743e3dc7597ea91c17461372a04ad7c2edf181309bec7d38a not found\nERROR: Encountered errors while bringing up the project.\nwaiting for tails server to start..................\n```","username":"swcurran","ts":"2021-09-27T19:07:02.863Z"}
{"msg":"I've deleted docker images, rebooted.  A clue is that the network being looked remains the same after all the changes, so there is some persistence somewhere. No volumes so it's not that.  Sigh...","username":"swcurran","ts":"2021-09-27T19:14:47.414Z"}
{"msg":"Fixed -- should have known... `docker system prune` resolved it.  Likely the cache, as I had done prune on everything else.  Sigh, again...","username":"swcurran","ts":"2021-09-27T19:22:57.870Z"}
{"msg":"BTW - Sheldon, since the Waits don't seem to make any difference, should we reset them back to where they were?","username":"swcurran","ts":"2021-09-27T19:42:54.992Z"}
{"msg":"They do work, sort of, a couple more tests fail when they are not there.","username":"sheldon.regular","ts":"2021-09-27T19:43:56.918Z"}
{"msg":"I'd say if someone can figure out a better solution, then remove the waits?","username":"sheldon.regular","ts":"2021-09-27T19:44:27.939Z"}
{"msg":"are you running that javascript-b-acapy runset locally?","username":"sheldon.regular","ts":"2021-09-27T19:44:51.536Z"}
{"msg":"Not right now, but running something else that uses javascript that is going very slowly.","username":"swcurran","ts":"2021-09-27T19:45:51.457Z"}
{"msg":"ic","username":"sheldon.regular","ts":"2021-09-27T19:46:03.315Z"}
{"msg":"@sheldon.regular could you give some context on the issue? I may be able to take a look. Why were the state checks removed? Are the intermediate endpoints still called? One option would be to enable auto acceptance of credentials/proofs. Another option would be to use an event based approach so we’re never waiting longer than needed","username":"TimoGlastra","ts":"2021-09-27T21:04:46.177Z"}
{"msg":"Hi Timo. Thanks for the offer to help. The state checks were removed to accommodate agents that do not expose the states to their controllers or do not even track the states of the agent's protocol process at all. It was also done to help agents that are in an auto respond mode (some only have an auto respond mode), to just pass a 200 back on the call that was already automatically done. \nBefore this change, as you know, the tests would check for the proper state in all participating agents, then proceed. Removing this has had side effects that has required some `waits` to be put into some backchannels waiting for other agents to finish processing requests etc. I have put 3 of these in the javascript backchannel, that look like this, `await new Promise(f => setTimeout(f, 20000));`. This has cleared up 2-3 test failures in the runset, but we still get some failing in the daily run. These tests all work most of the time when running on my local machine, and always work when debugging, so that has been pain in trying to narrow down the problem.  This only happens with the javascript-b-acapy runset.","username":"sheldon.regular","ts":"2021-09-27T21:25:31.820Z"}
{"msg":"Ok! The findy backchannel image expects genesis file to be found in url `http://${DOCKERHOST}:9000/genesis` so unfortunately it is currently hardcoded. I take an action point for fixing this :thumbsup:","username":"lauravuo-techlab","ts":"2021-09-28T06:52:26.332Z"}
{"msg":"I'm wondering if you can help investigate this issue. On the connection inside of all tests, the findy agent successfully connects when running with `acapy-main`. However running with `javascript` and `dotnet-master` agents the findy agent fails to send the trust ping at the end of the test. \n```\n  @T001-RFC0160 @critical @AcceptanceTest @MobileTest\n  Scenario Outline: establish a connection between two agents -- @1.1   # features/0160-connection.feature:21\n    Given we have \"2\" agents                                            # features/steps/0160-connection.py:16 0.001s\n      | name | role    |\n      | Acme | inviter |\n      | Bob  | invitee |\n    When \"Acme\" generates a connection invitation                       # features/steps/0160-connection.py:79 0.015s\n    And \"Bob\" receives the connection invitation                        # features/steps/0160-connection.py:110 0.811s\n    And \"Bob\" sends a connection request to \"Acme\"                      # features/steps/0160-connection.py:172 0.097s\n    And \"Acme\" receives the connection request                          # features/steps/0160-connection.py:187 0.000s\n    And \"Acme\" sends a connection response to \"Bob\"                     # features/steps/0160-connection.py:150 0.007s\n    And \"Bob\" receives the connection response                          # features/steps/0160-connection.py:163 0.000s\n    And \"Acme\" sends trustping to \"Bob\"                                 # features/steps/0160-connection.py:367 65.395s\n      Assertion Failed: resp_status 404 is not 200; \"connection by the id da0db625-888a-439f-bae3-8d46a44811c0 not found\"\n```\nAny ideas what might be going on here?","username":"sheldon.regular","ts":"2021-09-28T16:44:14.899Z"}
{"msg":"Yes, I'll take a look.","username":"lauravuo-techlab","ts":"2021-09-29T04:19:51.286Z"}
{"msg":"There seems to be a mismatch in the HTTP request header Content-Type. I try to fix it to findy-agent. However, even with the fix the connection is not established between dotnet (acme) - findy (bob) -> there seems to happen some exceptions with states: `An unhandled exception was thrown by the application.\nHyperledger.Aries.AriesFrameworkException: Connection state was invalid. Expected 'Negotiating', found 'Invited'`","username":"lauravuo-techlab","ts":"2021-09-29T09:19:08.330Z"}
{"msg":"There seems to be a mismatch in the HTTP request header Content-Type. I try to fix it to findy-agent. However, even with the fix the connection is not established between dotnet (acme) - findy (bob) -> there seems to happen some exceptions with states:`An unhandled exception was thrown by the application.\nHyperledger.Aries.AriesFrameworkException: Connection state was invalid. Expected 'Negotiating', found 'Invited'`","username":"lauravuo-techlab","ts":"2021-09-29T09:19:08.330Z"}
{"msg":"There seems to be a mismatch in the HTTP request header Content-Type. I try to fix it to findy-agent. However, even with the fix the connection is not established between dotnet (acme) - findy (bob) -> there seems to happen some exceptions with states:\n\n`An unhandled exception was thrown by the application.\nHyperledger.Aries.AriesFrameworkException: Connection state was invalid. Expected 'Negotiating', found 'Invited'`","username":"lauravuo-techlab","ts":"2021-09-29T09:19:08.330Z"}
{"msg":"There seems to be a mismatch in the HTTP request header Content-Type. I try to fix it to findy-agent. However, even with the fix the connection is not established between dotnet (acme) - findy (bob) -> there seems to happen some exceptions with states:\n\n`An unhandled exception was thrown by the application. Hyperledger.Aries.AriesFrameworkException: Connection state was invalid. Expected 'Negotiating', found 'Invited'`","username":"lauravuo-techlab","ts":"2021-09-29T09:19:08.330Z"}
{"msg":"There seems to be a mismatch in the HTTP request header Content-Type. I try to fix it to findy-agent. However, even with the fix the connection is not established between dotnet (acme) - findy (bob) -> there seems to happen some exceptions with dotnet states:\n\n`An unhandled exception was thrown by the application. Hyperledger.Aries.AriesFrameworkException: Connection state was invalid. Expected 'Negotiating', found 'Invited'`","username":"lauravuo-techlab","ts":"2021-09-29T09:19:08.330Z"}
{"msg":"Is that message coming from acapy? I don't know of the state `Negotiating` in acapy. \nHave you tried the same test with the Javascript agent? \nIs the fix submitted to findy-agent so I can rebuild and try it?","username":"sheldon.regular","ts":"2021-09-29T13:59:07.689Z"}
{"msg":"I will submit the fix tomorrow and let you know once the new build is available.","username":"lauravuo-techlab","ts":"2021-09-29T15:54:32.291Z"}
{"msg":"ok thanks.","username":"sheldon.regular","ts":"2021-09-29T15:55:25.297Z"}
{"msg":"I have an idea that builds on top of a feature I added in my latest PR (speaking of which, we have acapy-afgo present proof interop now)\nI made some changes to the afgo dockerfiles and manage script, to allow the afgo agents to be built using `./manage build` without that common issue where docker uses cache instead of fetching the latest afgo source from github. This means faster builds locally, since every step can cache, with the git checkout and build steps skipping cache when the remote is on a new HEAD commit.\nWe can apply the same changes to other agents, for anyone doing a lot of dev work on the agent while testing in AATH (like I've been doing) it can really speed your workflow up.\nAdditionally, with a bit more work, we could set up the CI to use a caching server, cache its agent builds, and use this same mechanism, so the CI only needs to rebuild an agent binary when the agent itself has been updated (since otherwise, it can still get it from cache).","username":"filip.burlacu","ts":"2021-09-29T23:06:43.581Z"}
{"msg":"I discussed this in DMs with sheldon, what do you think @swcurran @andrew.whitehead ?","username":"filip.burlacu","ts":"2021-09-29T23:07:28.280Z"}
{"msg":"Has joined the channel.","username":"andrew.whitehead","ts":"2021-09-29T23:07:28.376Z","type":"uj"}
{"msg":"Sounds reasonable to me","username":"andrew.whitehead","ts":"2021-09-30T02:41:38.684Z"}
{"msg":"The Content-Type-fix is now available in latest findy-backchannel-bundle. You need to pull the latest image: \n\n`docker pull ghcr.io/findy-network/findy-agent-backchannel:findy-bc-bundle-latest`\n\nI didn't have yet a chance to try the fix with JS/dotnet agents.","username":"lauravuo-techlab","ts":"2021-09-30T12:02:00.832Z"}
{"msg":"The Content-Type-fix is now available in latest findy-backchannel-bundle. You need to pull the latest image: \n\n`docker pull ghcr.io/findy-network/findy-agent-backchannel:findy-bc-bundle-latest`\n\nI didn't have yet a chance to try the fix fully with JS/dotnet agents.","username":"lauravuo-techlab","ts":"2021-09-30T12:02:00.832Z"}
{"msg":"Will I get the update if I just do `./manage rebuild findy`?","username":"sheldon.regular","ts":"2021-09-30T14:49:58.833Z"}
{"msg":"> (speaking of which, we have acapy-afgo present proof interop now)","username":"swcurran","ts":"2021-09-30T15:51:01.966Z"}
{"msg":"Great work!\n\n> (speaking of which, we have acapy-afgo present proof interop now)","username":"swcurran","ts":"2021-09-30T15:51:01.966Z"}
{"msg":"Sounds good -- let's take a look and see how it can apply.","username":"swcurran","ts":"2021-09-30T15:51:49.086Z"}
{"msg":"We have some good headway the with the findy and dotnet agents. 6 of 13 scenarios pass, and the issue above is not present in that configuration. I am still getting the exact same issue above when running with the javascript agent however.","username":"sheldon.regular","ts":"2021-09-30T23:29:09.043Z"}
{"msg":"Ok, thanks for the info! I will continue investigations.","username":"lauravuo-techlab","ts":"2021-10-01T05:04:30.842Z"}
{"msg":"is the google sheet downloaded by genBCData.py out-of-date?\nI run genBCData and then didexchange afgo-afgo fails\n(and yes, it passes when my local is clean on main)","username":"filip.burlacu","ts":"2021-10-05T21:57:58.528Z"}
{"msg":"It shouldn't be, but it is possible.","username":"sheldon.regular","ts":"2021-10-05T22:03:43.272Z"}
{"msg":"... when I run `genBCData.py` on the `Mapping Aries Protocols for Testing - Aries Agent Test Scripts.csv` file in the repo, on main, the `backchannel_operations.csv` generated file doesn't work\ndidexchange passes before genBCData, fails after\nwhere do we have a source csv that actually produces the correct `backchannel_operations.csv` operations data?","username":"filip.burlacu","ts":"2021-10-05T22:35:45.103Z"}
{"msg":"Are you adding operations?","username":"sheldon.regular","ts":"2021-10-05T22:36:48.312Z"}
{"msg":"maybe add them directly to the csv manually. That should get you going, and we can focus on the spreadsheet and that script after.","username":"sheldon.regular","ts":"2021-10-05T22:37:50.843Z"}
{"msg":"yeah, I can sidestep the issue that way","username":"filip.burlacu","ts":"2021-10-05T22:57:12.525Z"}
{"msg":"Any feedback from the investigations?","username":"sheldon.regular","ts":"2021-10-06T17:43:27.164Z"}
{"msg":"Unfortunately not much progress here. I try to squeeze some time for this today. At least with JS, the failure is evident, we have a mismatch with the aries message type prefix: JS-agent messages are starting with `https://didcomm.org`and we don't support that (yet).","username":"lauravuo-techlab","ts":"2021-10-07T07:31:10.190Z"}
{"msg":"Thanks for the update.","username":"sheldon.regular","ts":"2021-10-07T20:14:13.316Z"}
{"msg":"https://github.com/hyperledger/aries-agent-test-harness/pull/359 is ready for review\n@sheldon.regular I think you haven't had an opportunity to review yet?","username":"filip.burlacu","ts":"2021-10-08T19:13:18.891Z"}
{"msg":"I haven't sorry. I'm away until Tuesday.","username":"sheldon.regular","ts":"2021-10-08T23:24:32.108Z"}
{"msg":"the vcx PR broke all afgo tests","username":"filip.burlacu","ts":"2021-10-13T17:56:45.353Z"}
{"msg":"because it introduces some docker containers that have port conflicts","username":"filip.burlacu","ts":"2021-10-13T17:56:58.857Z"}
{"msg":"because it introduces some docker containers that have port conflicts with orb","username":"filip.burlacu","ts":"2021-10-13T17:56:58.857Z"}
{"msg":"why do we run the vcx agency in all tests, instead of only starting the service for vcx tests?","username":"filip.burlacu","ts":"2021-10-13T17:57:34.786Z"}
{"msg":"the same way we only start orb for afgo tests","username":"filip.burlacu","ts":"2021-10-13T17:57:41.953Z"}
{"msg":"I have a fix in that doesn't run the cloud agency unless one of the agents is vcx","username":"sheldon.regular","ts":"2021-10-13T17:58:03.024Z"}
{"msg":"Merged an hour ago.","username":"sheldon.regular","ts":"2021-10-13T17:58:15.785Z"}
{"msg":"oh I pulled before that","username":"filip.burlacu","ts":"2021-10-13T17:58:24.338Z"}
{"msg":"thank you!","username":"filip.burlacu","ts":"2021-10-13T17:58:26.152Z"}
{"msg":"Tails server is failing to build now, so I'm investigating that.","username":"sheldon.regular","ts":"2021-10-13T17:58:28.004Z"}
{"msg":"tails isn't always necessary either, is it?","username":"filip.burlacu","ts":"2021-10-13T17:59:25.234Z"}
{"msg":"though that depends on which tests are running, rather than which agents","username":"filip.burlacu","ts":"2021-10-13T17:59:39.703Z"}
{"msg":"No it isn't, only with revocation. But haven't added a check for that in the manage script yet.","username":"sheldon.regular","ts":"2021-10-13T18:00:04.377Z"}
{"msg":"Can you add a ticket about that?  Sorry about that.  We'll need to address that ASAP.","username":"swcurran","ts":"2021-10-13T20:07:05.374Z"}
{"msg":"Better fix would be to not have conflicting ports :-)","username":"swcurran","ts":"2021-10-13T20:07:32.297Z"}
{"msg":"Hello, I'm part of the devops staff of https://idlab.org, and for various reasons, we are testing a range of Mobile Wallet with AATH\nLastly, we had trouble getting even the simplest test case (@T003-RFC0036) to work, strangely only on some of android-based wallets.\nAfter some rather longish troubleshooting session, I decided to track the problem on the android phone itself using `adb` and friends.\nAnd then I got the answer: it's part of the fallout of this https://letsencrypt.org/docs/dst-root-ca-x3-expiration-september-2021/\nRight now, I only had time to debug the Lissi wallet, but due to timing hints, there is some high probability that the problem is similar with Esatus and Trinsic running on Android.\nBasically, it's due to the fact the the ngrok infrastructure was build with a wildcard `*.ngrok.io` certificate issued by let's encrypt.\nThe .net sdk used by the Lissi wallet most certainly still refers to the expired let's encrypt root certificate, and thus refuses to establish an TLS session with the Bob agent.\nI wanted to let you know, so nobody waste more time tracking this nasty one in the @Mobile tests.\n\nOn another front, this let's encrypt issue also prevents an agent from compiling, and I submitted this bug report https://github.com/hyperledger/aries-agent-test-harness/issues/360\nThe solution is fairly simple, I was not sure whether I should publish a pull request so I went the issue way","username":"bruno.hivert","ts":"2021-10-14T13:53:41.172Z"}
{"msg":"Hello, I'm part of the devops staff of https://idlab.org, and for various reasons, we are testing a range of Mobile Wallet with AATH\nLastly, we had trouble getting even the simplest test case (@T003-RFC0036) to work, strangely only on some of the android-based wallets.\nAfter some rather longish troubleshooting session, I decided to track the problem on the android phone itself using `adb` and friends.\nAnd then I got the answer: it's part of the fallout of this https://letsencrypt.org/docs/dst-root-ca-x3-expiration-september-2021/\nRight now, I only had time to debug the Lissi wallet, but due to timing hints, there is some high probability that the problem is similar with Esatus and Trinsic running on Android.\nBasically, it's due to the fact the ngrok infrastructure was build with a wildcard `*.ngrok.io` certificate issued by let's encrypt.\nThe .net sdk used by the Lissi wallet most certainly still refers to the expired let's encrypt root certificate, and thus refuses to establish an TLS session with the Bob agent.\nI wanted to let you know, so nobody waste more time tracking this nasty one in the @Mobile tests.\n\nOn another front, this let's encrypt issue also prevents an agent from compiling, and I submitted this bug report https://github.com/hyperledger/aries-agent-test-harness/issues/360\nThe solution is fairly simple, I was not sure whether I should publish a pull request so I went the issue way","username":"bruno.hivert","ts":"2021-10-14T13:53:41.172Z"}
{"msg":"","username":"bruno.hivert","ts":"2021-10-14T13:55:34.725Z","attachments":[{"type":"file","title":"bruno.hivert - Thu Oct 14 2021 09:55:11 GMT-0400 (GMT-04:00).txt","title_link":"/file-upload/MGHCuWhbTrZb9To98/bruno.hivert%20-%20Thu%20Oct%2014%202021%2009:55:11%20GMT-0400%20(GMT-04:00).txt","url":"/file-upload/MGHCuWhbTrZb9To98/bruno.hivert%20-%20Thu%20Oct%2014%202021%2009:55:11%20GMT-0400%20(GMT-04:00).txt","remote":false,"fileId":"MGHCuWhbTrZb9To98","fileName":"bruno.hivert - Thu Oct 14 2021 09:55:11 GMT-0400 (GMT-04:00).txt"}]}
{"msg":"","username":"bruno.hivert","ts":"2021-10-14T13:55:34.725Z","attachments":[{"type":"file","title":"bruno.hivert - Thu Oct 14 2021 09:55:11 GMT-0400 (GMT-04:00).txt","title_link":"/file-upload/MGHCuWhbTrZb9To98/bruno.hivert%20-%20Thu%20Oct%2014%202021%2009:55:11%20GMT-0400%20(GMT-04:00).txt","url":"/file-upload/MGHCuWhbTrZb9To98/bruno.hivert%20-%20Thu%20Oct%2014%202021%2009:55:11%20GMT-0400%20(GMT-04:00).txt","remote":false,"fileId":"MGHCuWhbTrZb9To98","fileName":"bruno.hivert - Thu Oct 14 2021 09:55:11 GMT-0400 (GMT-04:00).txt"}]}
{"msg":"Thanks @bruno.hivert for tracking that issue so deeply. Is there a solution for the android based wallets? \nWe should find a place to document this issue. Maybe in the Mobile .md. \n\nPlease go ahead and issue a PR for 360.","username":"sheldon.regular","ts":"2021-10-14T14:21:12.810Z"}
{"msg":"We've been pulling our hairs why Aries Framework JavaScript wasn't working with any Android wallet built on Aries Framework .NET","username":"TimoGlastra","ts":"2021-10-14T14:23:44.588Z"}
{"msg":"Thank you for this :)","username":"TimoGlastra","ts":"2021-10-14T14:24:03.060Z"}
{"msg":"We've already verified that it doesn't work with Trinsic or Esatus","username":"TimoGlastra","ts":"2021-10-14T14:25:29.556Z"}
{"msg":"Have you informed the wallet vendors of the issue? I think they'll appreciate your investigation","username":"TimoGlastra","ts":"2021-10-14T14:26:11.141Z"}
{"msg":"You are all very welcome, I'm really happy to contribute.\nAs for a solution on Android, I have practically no experience developing on Android, but I have some mileage with TLS, so here's my take: I'm not sure how root CA are managed on android, but it should not be so different from other OS: either an application is using the OS CA store, or its own.\nOn my pixel phone, I can tell you that neither chrome nor Firefox have issues with the let's encrypt certificates, so I suspect that the Android .NET framework is using its own certificate store.\nIn other words, the wallets should be bundled with a more up-to-date CA store.\nI'm planning to contact the Lissi/Esatus/Trinsic dev through their official feedback e-mail addresses listed on Google play, unless someone has a better idea.","username":"bruno.hivert","ts":"2021-10-14T14:38:46.702Z"}
{"msg":"I think this is more a problem with Xamarin than Android. I've managed to track down the issue to BoringSSL over here: https://bugs.chromium.org/p/boringssl/issues/detail?id=439. This describes\n> Xamarin by default uses the managed Mono classes for SSL connections on Android, and Mono uses BoringSSL for that purpose.","username":"TimoGlastra","ts":"2021-10-14T15:21:03.887Z"}
{"msg":"Definitely makes sense","username":"bruno.hivert","ts":"2021-10-14T15:30:03.165Z"}
{"msg":"Just FYI, I notified the Lissi wallet team of the problem through `mailto:info@lissi.id`","username":"bruno.hivert","ts":"2021-10-14T17:09:47.153Z"}
{"msg":"Has joined the channel.","username":"esune","ts":"2021-10-14T17:12:38.183Z","type":"uj"}
{"msg":"We merged lately some pull requests regarding the dotnet/JS-agent problems, and it seems now that the test succeed with both when findy is acting as the default agent and dotnet/JS as Bob. Other way around there are still some issues.","username":"lauravuo-techlab","ts":"2021-10-15T05:33:26.209Z"}
{"msg":"@bruno.hivert Thanks! There are two fixes/workarounds at the moment. 1. Update the server certificate to not include the expired root certificate (when using certbot by adding `--preferred-chain \"ISRG Root X1\"`). 2. Disable the expired root certificate in the trust store of the device (_Settings->Biometrics & security->Other security settings->View security_ certificates and disable *\"DST root ca x3\"*)","username":"sebastian","ts":"2021-10-15T08:20:27.839Z"}
{"msg":"@sebastian I've asked a colleague of me with an Android to try that that, but that setting option doesn't exist. Tested on a OnePlus 5(t?)\n\nHere's her response:\n\n> Hmm that path doesn't match the options on my device. And when I view my systems 'Trusted Credentials' the credential you mentioned isn't there either.","username":"TimoGlastra","ts":"2021-10-15T09:49:37.560Z"}
{"msg":"On which device did you try option 2?","username":"TimoGlastra","ts":"2021-10-15T09:49:57.664Z"}
{"msg":"Thanks for the update, I will give it a go.","username":"sheldon.regular","ts":"2021-10-15T13:59:34.048Z"}
{"msg":"issue made: https://github.com/hyperledger/aries-agent-test-harness/issues/365","username":"filip.burlacu","ts":"2021-10-15T14:24:14.042Z"}
{"msg":"Hello Team !\n@sebastian thanks:\n- For server-side certificates we manage @https://idlab.org, we definitely went the `ISG Root X1` way\n- For the client/device side, the Lissi engineering team proposed the same solution, which I tested OK on my pixel 4 running android 11\nThe setting Was (sorry french-speaking phone, so YMMV):\nSécurité => Avancé => Chiffrement et Authentifiant => Certificats de confiance\nWhich should roughly translate to:\nSecurity => Advanced => Cyphers and Credentials => Trusted Certificates\nHope it helps","username":"bruno.hivert","ts":"2021-10-15T14:55:54.079Z"}
{"msg":"Come to think of it, when you are on android, and assuming that your Setting application has a search bar, you just have to search for `Certifica` and select the relevant trusted certificate entry to find it.\nAfter that, it's a longuish scroll to find the `DST root ca X3`, but at least they are sorted in dictionary order...","username":"bruno.hivert","ts":"2021-10-15T15:01:01.792Z"}
{"msg":"Come to think of it, when you are on android, and assuming that your Setting application has a search bar, you just have to search for `Certifica` and select the relevant trusted certificate entry to find it.\nAfter that, it's a longuish scroll to find the `DST root ca X3`, but at least they are sorted in dictionary order.\nAnd If you cannot find this expired certificate, all the best, you should not experience interoperability problems with ngrok.io","username":"bruno.hivert","ts":"2021-10-15T15:01:01.792Z"}
{"msg":"Has joined the channel.","username":"pawel.kowalik","ts":"2021-10-15T15:17:01.873Z","type":"uj"}
{"msg":"@sebastian thanks for the hint. Both options indeed work fine.","username":"pawel.kowalik","ts":"2021-10-15T15:17:02.605Z"}
{"msg":"And since this is a system-wide modifications, this should unblock other wallets and applications as well.","username":"bruno.hivert","ts":"2021-10-15T15:17:53.754Z"}
{"msg":"Can I ask what tests you are running for findy and dotnet? I am doing the following, \n`./manage run -d findy -b dotnet-master -t @AcceptanceTest -t @AIP10 -t ~@wip -t ~@revocation` \nAre you doing a smaller subset of tests than that? \nThese are my results:\n```\nFailing scenarios:\n  features/0037-present-proof.feature:19  Present Proof where the prover does not propose a presentation of the proof and is acknowledged -- @1.1 \n  features/0037-present-proof.feature:20  Present Proof where the prover does not propose a presentation of the proof and is acknowledged -- @1.2 \n  features/0037-present-proof.feature:55  Present Proof of specific types and proof is acknowledged with a Drivers License credential type -- @1.1 \n  features/0037-present-proof.feature:56  Present Proof of specific types and proof is acknowledged with a Drivers License credential type -- @1.2 \n  features/0037-present-proof.feature:74  Present Proof of specific types and proof is acknowledged with a Biological Indicators credential type -- @1.1 \n  features/0037-present-proof.feature:91  Present Proof of specific types and proof is acknowledged with multiple credential types -- @1.1 \n  features/0037-present-proof.feature:109  Present Proof where the prover does not propose a presentation of the proof and is acknowledged -- @1.1 \n  features/0037-present-proof.feature:110  Present Proof where the prover does not propose a presentation of the proof and is acknowledged -- @1.2 \n  features/0037-present-proof.feature:149  Present Proof where the prover has proposed the presentation of proof in response to a presentation request and is acknowledged -- @1.1 \n  features/0037-present-proof.feature:150  Present Proof where the prover has proposed the presentation of proof in response to a presentation request and is acknowledged -- @1.2 \n  features/0037-present-proof.feature:170  Present Proof where the prover has proposed the presentation of proof from a different credential in response to a presentation request and is acknowledged -- @1.1 \n  features/0037-present-proof.feature:171  Present Proof where the prover has proposed the presentation of proof from a different credential in response to a presentation request and is acknowledged -- @1.2 \n  features/0037-present-proof.feature:227  Present Proof where the prover starts with a proposal the presentation of proof and is acknowledged -- @1.1 \n\n2 features passed, 1 failed, 5 skipped\n6 scenarios passed, 13 failed, 82 skipped\n99 steps passed, 13 failed, 808 skipped, 0 undefined\nTook 5m6.311s\n```","username":"sheldon.regular","ts":"2021-10-15T15:54:53.714Z"}
{"msg":"6 scenarios passed so that is indeed a step forward. 👍","username":"sheldon.regular","ts":"2021-10-15T16:02:42.667Z"}
{"msg":"@ianco ^^^ more on the issue discussed this morning.","username":"swcurran","ts":"2021-10-15T17:00:10.467Z"}
{"msg":"@swcurran it sounds like the solution is `Disable the expired root certificate in the trust store of the device`, so I assume we just need to document this somewhere?","username":"ianco","ts":"2021-10-15T17:06:32.664Z"}
{"msg":"Also it's an ngrok issue so we should only run into this in development-like environments","username":"ianco","ts":"2021-10-15T17:07:12.622Z"}
{"msg":"As I understand it now, this not just an Ngrok issue, but an issue with Let’s Encrypt","username":"TimoGlastra","ts":"2021-10-15T17:18:45.301Z"}
{"msg":"And as ngrok uses LE it’s also a problem with ngrok","username":"TimoGlastra","ts":"2021-10-15T17:19:08.679Z"}
{"msg":"We’re also having issues with non-ngrok services","username":"TimoGlastra","ts":"2021-10-15T17:19:23.174Z"}
{"msg":"Yes, I concur, this is an issue between any client with the expired certificate `DST root ca X3` in store,  attempting to establish a TLS connection with a server providing a Let's Encrypt-issued certificate.","username":"bruno.hivert","ts":"2021-10-15T17:22:00.037Z"}
{"msg":"But the solution is `Disable the expired root certificate in the trust store of the device` or no?  The problem arose because of the ngrok dependency, so do we need to investigate a replacement for ngrok or do we patch the configuration on affected android devices?","username":"ianco","ts":"2021-10-15T17:23:58.546Z"}
{"msg":"I would recommend patching the device.\nThis is kind of a temporary solution, until an android update removes the expired certificate (it should have been removed from the trust store since sept 30 2021, but android update being what they are...)","username":"bruno.hivert","ts":"2021-10-15T17:27:13.233Z"}
{"msg":"It’s weird because wallets built on React Native (bifold, Connect.Me, our wallet) all still work","username":"TimoGlastra","ts":"2021-10-15T17:32:39.924Z"}
{"msg":"so they aren’t using the device trust store I guess?","username":"TimoGlastra","ts":"2021-10-15T17:33:02.630Z"}
{"msg":"That would be my guess","username":"bruno.hivert","ts":"2021-10-15T17:33:26.974Z"}
{"msg":"Question: did something change in Aries .NET recently? `ngrok` used to work just fine in the past, so unless they changed their certificate issuing/management policies it must be something that changed on the agent framework side (maybe a dependency?) that is causing these issuew now.","username":"esune","ts":"2021-10-15T18:03:27.570Z"}
{"msg":"Question: did something change in Aries .NET recently? `ngrok` used to work just fine in the past, so unless they changed their certificate issuing/management policies it must be something that changed on the agent framework side (maybe a dependency?) that is causing these issues now.","username":"esune","ts":"2021-10-15T18:03:27.570Z"}
{"msg":"It’s because of this certificate expiration: https://letsencrypt.org/docs/dst-root-ca-x3-expiration-september-2021/","username":"TimoGlastra","ts":"2021-10-15T18:05:38.700Z"}
{"msg":"Huge thanks, Bruno, for finding this.\n\nFWIW -- on my phone (Pixel 4), the path is as @bruno.hivert said Settings==>Security => Advanced => Encryption and Credentials => Trusted Certificates\n\nThe name of the CA is \"Digital Signature Trust Co.\" and in small text below that `DST Root CA X3`.  If you click on it to see the details, it says that it expired Sept. 30, 2021.\n\nAgree that on the docs we add that -- volunteers?\n\nIs it worth adding into the `./manage` script itself and print statement when someone uses the mobile backchannel?","username":"swcurran","ts":"2021-10-15T18:53:50.704Z"}
{"msg":"Ok, looking better from a findy to dotnet. I still get some failures. This is the test set I am running with `./manage run -d findy -b dotnet-master -t @AcceptanceTest -t @AIP10 -t ~@wip -t ~@revocation` \nAre you running with a different set of tests? \nThese are the test results?\n```\nFailing scenarios:\n  features/0037-present-proof.feature:149  Present Proof where the prover has proposed the presentation of proof in response to a presentation request and is acknowledged -- @1.1 \n  features/0037-present-proof.feature:150  Present Proof where the prover has proposed the presentation of proof in response to a presentation request and is acknowledged -- @1.2 \n  features/0037-present-proof.feature:170  Present Proof where the prover has proposed the presentation of proof from a different credential in response to a presentation request and is acknowledged -- @1.1 \n  features/0037-present-proof.feature:171  Present Proof where the prover has proposed the presentation of proof from a different credential in response to a presentation request and is acknowledged -- @1.2 \n  features/0037-present-proof.feature:227  Present Proof where the prover starts with a proposal the presentation of proof and is acknowledged -- @1.1 \n\n2 features passed, 1 failed, 5 skipped\n14 scenarios passed, 5 failed, 82 skipped\n135 steps passed, 5 failed, 780 skipped, 0 undefined\n```","username":"sheldon.regular","ts":"2021-10-15T19:05:07.654Z"}
{"msg":"The same set of tests completely pass for findy to javascript. 👍","username":"sheldon.regular","ts":"2021-10-15T19:13:16.083Z"}
{"msg":"I'm not sure it's OK,. but here is a suggestion:\nhttps://github.com/hyperledger/aries-agent-test-harness/pull/367\nHave a good week-end","username":"bruno.hivert","ts":"2021-10-15T20:42:07.362Z"}
{"msg":"Does Findy support Proof Proposals?","username":"sheldon.regular","ts":"2021-10-15T21:04:18.227Z"}
{"msg":"Forget the failures above. I removed the tests that do Proof Proposal and now all findy to dotnet are passing. dotnet does not support proof proposals.","username":"sheldon.regular","ts":"2021-10-15T21:39:52.458Z"}
{"msg":"I guess it might be also something on the .net stack that gets confused by the cross-signing trick Let's Encrypt did to maintain compatibility with older Android devices. More on this here https://letsencrypt.org/2020/12/21/extending-android-compatibility.html","username":"pawel.kowalik","ts":"2021-10-16T09:42:19.819Z"}
{"msg":"As per this page Android 7.1.1 and above should not have any trouble with the new default chain, but I experience the issue on Android 11 device.","username":"pawel.kowalik","ts":"2021-10-16T09:46:15.272Z"}
{"msg":"As per this page https://letsencrypt.org/docs/certificate-compatibility/ Android 7.1.1 and above should not have any trouble with the new default chain, but I experience the issue on Android 11 device.","username":"pawel.kowalik","ts":"2021-10-16T09:46:15.272Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/aries-agent-test-harness?msg=N47gZkRBi4kx64kor) It might differ among Android devices, for my Pixel 3 it was under Security -> Encryption&credntials -> Trusted credentials","username":"sebastian","ts":"2021-10-16T16:48:07.255Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/aries-agent-test-harness?msg=N47gZkRBi4kx64kor","url":"https://chat.hyperledger.org/channel/aries-agent-test-harness?msg=N47gZkRBi4kx64kor","remote":true,"fileId":null,"fileName":null}]}
{"msg":"We eventually found the option by searching for certificates and disabling the `DST Root CA X3` seemed to do the trick :)","username":"TimoGlastra","ts":"2021-10-17T15:07:07.474Z"}
{"msg":"Ok, thanks for the report!","username":"lauravuo-techlab","ts":"2021-10-18T09:06:42.489Z"}
{"msg":"@filip.burlacu and others if you have a view on this. \nI was looking at the format of the Media Type tests. I am wondering what your thoughts are if we move those tests to the DID Exchange feature file and just tagged them with the @RFC0044 tag? \nAlso, what do you think of this reformat of the tests, it creates one test with a bunch of variations. We use tags in the Examples to make some decisions on how to start the agent with whatever parameters.  We do a similar construct in the proof tests to compress the test defs. Some of the words in the test below have been changed just to align more with the RFC text and to remove JSON particulars from the test definition. \n```\n   @T001-RFC0044 @RFC0044 @AIP20 @UsesCustomParameters @AcceptanceTest\n   Scenario Outline: Perform DID Exchange between two agents that have variants of envelope media profile\n      Given we have \"2\" agents\n         | name | role      | DIDComm Profile |\n         | Acme | requester | <acme-profile>  |\n         | Bob  | responder | <bob-profile>   |\n      When \"Bob\" sends an explicit invitation\n      And \"Acme\" receives the invitation\n      And \"Acme\" sends the request to \"Bob\"\n      And \"Bob\" receives the request\n      And \"Bob\" sends a response to \"Acme\"\n      And \"Acme\" receives the response\n      And \"Acme\" sends complete to \"Bob\"\n      Then \"Acme\" and \"Bob\" have a connection\n\n      @SharedDIDCommProfile\n      Examples:\n         | acme-profile              | bob-profile              |\n         | \"didcomm/aip2;env=rfc19\"  | \"didcomm/aip2;env=rfc19\" |\n         | \"didcomm/aip2;env=rfc587\" | \"didcomm/aip2;env=rfc587 |\n\n      @DifferentDefaultDIDCommProfile\n      Examples:\n         | acme-profile              | bob-profile               |\n         | \"didcomm/aip2;env=rfc19\"  | \"didcomm/aip2;env=rfc587\" |\n         | \"didcomm/aip2;env=rfc587\" | \"didcomm/aip2;env=rfc19\"  |\n\n      @DifferentDefaultDIDCommProfile @OneAcceptedProfile\n      Examples:\n         | acme-profile              | bob-profile               |\n         | \"didcomm/aip2;env=rfc19\"  | \"didcomm/aip2;env=rfc587\" |\n         | \"didcomm/aip2;env=rfc587\" | \"didcomm/aip2;env=rfc19\"  |\n\n      @DifferentDefaultDIDCommProfile @TwoAcceptedProfiles\n      Examples:\n         | acme-profile              | bob-profile               |\n         | \"didcomm/aip2;env=rfc19\"  | \"didcomm/aip2;env=rfc587\" |\n         | \"didcomm/aip2;env=rfc587\" | \"didcomm/aip2;env=rfc19\"  |\n```","username":"sheldon.regular","ts":"2021-10-18T21:00:51.494Z"}
{"msg":"These changes look like good ideas!\nI'll add that we'll need two Scenario Outlines still, one for success cases and one for failures","username":"filip.burlacu","ts":"2021-10-18T22:03:24.553Z"}
{"msg":"Yes, I have done the Scenario outlines for the exception test as well. Something like this. \n```\n   @T002-RFC0044 @ExceptionTest @RFC0044 @AIP20 @UsesCustomParameters\n   Scenario Outline: Fail DID Exchange between two agents with mismatching media profiles\n      Given we have \"2\" agents\n         | name | role      | DIDComm Profile |\n         | Acme | requester | <acme-profile>  |\n         | Bob  | responder | <bob-profile>   |\n      When \"Bob\" sends an explicit invitation\n      Then \"Acme\" can't accept the invitation\n\n      @DifferentDIDCommProfile\n      Examples:\n         |      acme-mime-type       |       bob-mime-type       |\n         | \"didcomm/aip2;env=rfc19\"  | \"didcomm/aip2;env=rfc587\" |\n         | \"didcomm/aip2;env=rfc587\" | \"didcomm/aip2;env=rfc19\"  |\n\n      @DifferentDIDCommProfile @NoMatchingAcceptedProfiles\n      Examples:\n         |      acme-mime-type       |       bob-mime-type       |\n         | \"didcomm/aip2;env=rfc19\"  | \"didcomm/aip2;env=rfc587\" |\n         | \"didcomm/aip2;env=rfc587\" | \"didcomm/aip2;env=rfc19\"  |\n```","username":"sheldon.regular","ts":"2021-10-18T22:37:13.746Z"}
{"msg":"Has joined the channel.","username":"nbAmit","ts":"2021-10-20T04:54:25.481Z","type":"uj"}
{"msg":"Has joined the channel.","username":"Kazuya.N","ts":"2021-10-30T07:59:58.009Z","type":"uj"}
{"msg":"Has joined the channel.","username":"kukgini","ts":"2021-11-03T08:30:01.911Z","type":"uj"}
{"msg":"Hi, there is a PR on AATH which has been waiting for review for several weeks with no response, can somebody please take a look at it? https://github.com/hyperledger/aries-agent-test-harness/pull/364","username":"mirgee","ts":"2021-11-03T11:09:34.211Z"}
{"msg":"Hi Here. Should I consider vcx in aries-backchannels directory as deprecated and replaced by aries-vcx?","username":"kukgini","ts":"2021-11-04T08:24:35.468Z"}
{"msg":"Yes that's correct","username":"ianco","ts":"2021-11-04T13:59:08.618Z"}
{"msg":"I made a PR about it. I hope it would be a tiny help. please take a look at it? https://github.com/hyperledger/aries-agent-test-harness/pull/381","username":"kukgini","ts":"2021-11-05T07:58:35.235Z"}
{"msg":"Thanks for the PR!","username":"ianco","ts":"2021-11-06T12:20:54.177Z"}
{"msg":"Has left the channel.","username":"pawel.kowalik","ts":"2021-11-11T16:33:25.131Z","type":"ul"}
{"msg":"Has joined the channel.","username":"SuneetBendre","ts":"2021-11-23T11:16:02.992Z","type":"uj"}
{"msg":"Below test case is failing for my wallet. Can someone help me to understand the expected behavior.\naries-test-harness\\features\\0183-revocation.feature\n_@T001-HIPE0011 @normal @AcceptanceTest @Schema_DriversLicense_Revoc @Indy\nScenario Outline: Credential revoked by Issuer and Holder attempts to prove with a prover that doesn't care if it was revoked_\n\n*Failing Step from above testcase: \"Then \"Bob\" has the proof verified\"*\nAssertion failing: aries-test-harness\\features\\steps\\0037-present-proof.py [Line 295]\n    if 'credential_verification_dict' in context:\n        assert context.credential_verification_dict[context.presentation_thread_id] == \"true\"\n\nVerification result from Faber agent:\n{\n   \"created_at\":\"2021-11-23T10:18:01.471283Z\",\n   \"connection_id\":\"5d47330f-f086-45b7-bc67-d759cfda464a\",\n   \"presentation_request\":{},\n   \"presentation\":{},\n   *\"verified\":\"false\",*\n   \"trace\":false,\n   \"auto_present\":false,\n   \"thread_id\":\"1f074328-934f-478a-adf3-d137fe431090\",\n   *\"state\":\"done\",*\n   \"initiator\":\"self\",\n   \"role\":\"verifier\",\n   \"updated_at\":\"2021-11-23T10:18:27.575974Z\",\n   \"presentation_exchange_id\":\"dfe6fdde-037e-447f-a051-62352c46ee58\",\n   \"presentation_request_dict\":{}\n}\n\n\nMy understanding is, if Credential is revoked then proof verification should fail, Resulting in aries agent should create verification result as:\nstatus: done\nverified: false\n_\nShould Assertion be _'assert context.credential_verification_dict[context.presentation_thread_id] == \"false\" '?\n\n@sheldon.regular  Can you please have a look","username":"SuneetBendre","ts":"2021-11-23T11:41:50.894Z"}
{"msg":"Has joined the channel.","username":"GoreTushar","ts":"2021-11-23T11:43:36.197Z","type":"uj"}
{"msg":"Has joined the channel.","username":"sairanjit","ts":"2021-11-23T12:35:15.914Z","type":"uj"}
{"msg":"That test is correct as I see it. 0441  Revocation best practices states, \"The absence of any non-revocation interval applicable to a requested item signifies that the verifier has no interest in its credential's non-revocation status.\" \nSo the test isn't sending a non-revocation interval with the proof request, therefore the verifier doesn't care about the revocation status, thus the proof should verify with the revoked cred.\nhttps://github.com/sklump/aries-rfcs/tree/master/concepts/0441-present-proof-best-practices","username":"sheldon.regular","ts":"2021-11-23T15:04:31.783Z"}
{"msg":"Thanks @sheldon.regular \nWill look into it.","username":"SuneetBendre","ts":"2021-11-23T17:24:31.779Z"}
{"msg":"So the next question is: what caused the verification to return \"false\" here. Was there a proof of non-revocation included in the presentation sent by the holder (despited Faber not including a non-revocation interval in the presentation request)?","username":"regiseloi","ts":"2021-11-23T17:25:36.110Z"}
{"msg":"Yes, @regiseloi that is a good question. One that still has to be investigated. What happens for Acapy to not verify the proof? It may very well be that the holder/wallet is sending a proof of non-revocation and Acapy doesn't like that. It shouldn't care at this point if non-revocation is included in the proof IMO.   I'll log an issue in AATH for further investigation. If it is an Acapy issue, then we will move the issue to that repo. In the mean time, @SuneetBendre can you check it you proof presentation includes a proof of non-revocation? If it does, can you remove it and see if the test passes?","username":"sheldon.regular","ts":"2021-11-24T14:58:45.038Z"}
{"msg":"Issue Logged. https://github.com/hyperledger/aries-agent-test-harness/issues/392","username":"sheldon.regular","ts":"2021-11-24T15:11:22.543Z"}
{"msg":"@SuneetBendre what wallet are you testing?","username":"sheldon.regular","ts":"2021-11-24T17:04:12.702Z"}
{"msg":"@sheldon.regular / @regiseloi \nIn Presentation Proof, we are always checking revocation status and attaching 'non_revoked' object in the response.","username":"SuneetBendre","ts":"2021-11-25T08:14:25.932Z"}
{"msg":"@sheldon.regular / @regiseloi \nIn Presentation Proof, we are always checking revocation status of the credential and attaching 'non_revoked' object in the response.","username":"SuneetBendre","ts":"2021-11-25T08:14:25.932Z"}
{"msg":"@sheldon.regular / @regiseloi \nIn Presentation Proof, we are always checking revocation status of the credential and attaching 'non_revoked' object if the credential is revoked.","username":"SuneetBendre","ts":"2021-11-25T08:14:25.932Z"}
{"msg":"@sheldon.regular / @regiseloi \nIn Presentation Proof, we are always checking revocation status of the credential and attaching 'non_revoked' object if the credential is revocable.","username":"SuneetBendre","ts":"2021-11-25T08:14:25.932Z"}
{"msg":"@sheldon.regular  We are working on DIT wallet (Decentralized Identity trust foundation)","username":"SuneetBendre","ts":"2021-11-25T08:18:47.062Z"}
{"msg":"@sheldon.regular  We are working on DIT wallet (Digital Identity trust foundation)","username":"SuneetBendre","ts":"2021-11-25T08:18:47.062Z"}
{"msg":"https://apps.apple.com/za/app/dit-wallet/id1593180308","username":"SuneetBendre","ts":"2021-11-25T08:19:23.779Z"}
{"msg":"Internally its AYANWORKS ARNIMA SDK\nhttps://github.com/ayanworks/ARNIMA-reactnative-sdk","username":"SuneetBendre","ts":"2021-11-25T09:23:32.621Z"}
{"msg":"Thanks for confirming Suneet. That's consistent with what we've seen with a different wallet. I would suggest that you set yourself up as a watcher on the issue that Sheldon is referring to above, and see where that goes before making changes to how your wallet is handling this.","username":"regiseloi","ts":"2021-11-25T14:16:39.851Z"}
{"msg":"sure @regiseloi","username":"SuneetBendre","ts":"2021-11-25T15:16:15.847Z"}
{"msg":"Has joined the channel.","username":"timbl","ts":"2021-11-30T20:38:58.162Z","type":"uj"}
{"msg":"Has joined the channel.","username":"darrell.odonnell","ts":"2021-12-09T11:09:16.300Z","type":"uj"}
{"msg":"Folks - I chair the Technology Stack Working Group at the Trust Over IO Foundation. Where can I attend a meeting about Aries Interop and perhaps bring some DIF folks to see what's going on?","username":"darrell.odonnell","ts":"2021-12-09T11:09:20.590Z"}
{"msg":"Per note on the Aries channel -- glad to set up a specific meeting about this.","username":"swcurran","ts":"2021-12-09T16:19:58.752Z"}
{"msg":"Thanks Stephen - I am catching up on other efforts and hoping to attend the DIF Interop session this evening to see where their can be some sharing (HL, ToIP, and DIF).","username":"darrell.odonnell","ts":"2021-12-15T13:49:25.682Z"}
{"msg":"Looking at the cancelled daily GitHub jobs that we had again yesterday:\n\nThe cancellations were on the JavaScript - Findy and .NET- Findy jobs.  The core issue appears to be in the interaction between the JS/.NET issuers and Findy as a holder. The \"Issue Credential\" tests are all failing where Bob (Findy) is supposed to be acknowledging the credential, getting `AssertionError: resp_status 404 is not 200; \"Credential a9dfd83a-69c2-4ea1-a77b-33121c0af4f6 not received\"` -- after an 11 minute wait.\n\nWhen the test run domes complete, all the tests Fail (but at least they complete).  When the test run is cancelled the \"Issue Credential\" tests fail (same) and the cancellation happens during the first \"Present Proof\" test. I'm guessing the cancelation is at the \"Holder has credential\" step, when (I suspect) the \"Issue\" operation fails.","username":"swcurran","ts":"2022-01-23T21:12:11.510Z"}
{"msg":"Interesting. Is this something we need to fix in the .NET/AFJ backchannel or in the Findy backchannel? Not sure who is at fault here","username":"TimoGlastra","ts":"2022-01-24T12:34:48.697Z"}
{"msg":"Tagging @lauravuo-techlab","username":"TimoGlastra","ts":"2022-01-24T12:34:53.556Z"}
{"msg":"Just a side note in case it can help, for JS-Findy these tests started failing on 12/21, but the cancelling of that job didn't start until 14 days ago 1/10.","username":"sheldon.regular","ts":"2022-01-24T16:43:14.578Z"}
{"msg":"ok, thanks for the info! I will take a look","username":"lauravuo-techlab","ts":"2022-01-25T12:00:40.897Z"}
{"msg":"it seems that recent changes in our signature timestamp verification has broken this functionality. I will try to fix it.","username":"lauravuo-techlab","ts":"2022-01-25T12:45:25.613Z"}
{"msg":"yup, it did the trick with the js agent - apparently js is not filling the signature timestamp for the connection response and our validation changes did not allow connections with an invalid timestamp (without sending a nack to the other end). I removed the validation altogether and it seems that the js test is now working as before. there are still some issue with the dotnet agent - will continue investigations.","username":"lauravuo-techlab","ts":"2022-01-26T09:50:12.640Z"}
{"msg":"Thanks for looking into this! :)\n\nBut it seems like we should fix this in AFJ if the timestamp is invalid. \n\nWe do set the signature timestamp for the connection response by prefixing the typestamp to the data that we sign:\n\n```\nconst dataBuffer = Buffer.concat([timestamp(), JsonEncoder.toBuffer(data)])\n```\n\nBut maybe there's something wrong with our implementation. Could you point to the code in the findy agent where the timestamp is created and the attachment is signed?","username":"TimoGlastra","ts":"2022-01-26T10:24:32.564Z"}
{"msg":"I think the relevant timestamp handling code is here: https://github.com/findy-network/findy-agent/blob/51310fd48ec9b1fe50f0d03aa1f144beba91228d/agent/sec/pipe.go#L70","username":"lauravuo-techlab","ts":"2022-01-26T11:40:54.671Z"}
{"msg":"what comes to dotnet-case, the issue is related to dotnet returning err 500 to findy-agent, I have already created an GH issue for it: https://github.com/hyperledger/aries-framework-dotnet/issues/207 It seems I have to add logic for this case so that the test is not left pending.","username":"lauravuo-techlab","ts":"2022-01-26T11:52:56.012Z"}
{"msg":"what comes to dotnet-case, the issue is related to dotnet returning err 500 to findy-agent, I have already created an GH issue for it: https://github.com/hyperledger/aries-framework-dotnet/issues/212 It seems I have to add logic for this case so that the test is not left pending.","username":"lauravuo-techlab","ts":"2022-01-26T11:52:56.012Z"}
{"msg":"apparently the fix for the dotnet problem was not picked to findy-backchannel-release until now. so now the tests should fail \"normally\" and not leave anything pending.","username":"lauravuo-techlab","ts":"2022-02-02T12:11:40.323Z"}
{"msg":"sorry for the trouble","username":"lauravuo-techlab","ts":"2022-02-02T12:11:57.696Z"}
{"msg":"Has joined the channel.","username":"kalyankonda","ts":"2022-02-10T07:14:55.704Z","type":"uj"}
{"msg":"","username":"rjones","ts":"2022-03-22T19:53:46.466Z","type":"room_changed_topic"}
{"msg":"","username":"rjones","ts":"2022-03-22T19:53:46.517Z","type":"room_changed_description"}
{"msg":"","username":"rjones","ts":"2022-03-22T19:53:46.534Z","type":"room_changed_announcement"}
