{"msg":"swcurran","username":"rjones","ts":"2021-01-18T17:14:39.202Z","type":"subscription-role-added"}
{"msg":"Can't use `+` in a channel name, sorry.","username":"rjones","ts":"2021-01-18T17:14:50.967Z"}
{"msg":"No problem -- thanks!","username":"swcurran","ts":"2021-01-18T18:38:29.542Z"}
{"msg":"User <em>User_1</em> added by <em>swcurran</em>.","username":"swcurran","ts":"2021-01-18T18:45:48.450Z","type":"au"}
{"msg":"User <em>User_2</em> added by <em>swcurran</em>.","username":"swcurran","ts":"2021-01-18T18:45:48.490Z","type":"au"}
{"msg":"User <em>User_3</em> added by <em>swcurran</em>.","username":"swcurran","ts":"2021-01-18T18:45:48.531Z","type":"au"}
{"msg":"User <em>User_4</em> added by <em>swcurran</em>.","username":"swcurran","ts":"2021-01-18T18:45:48.573Z","type":"au"}
{"msg":"User <em>User_5</em> added by <em>swcurran</em>.","username":"swcurran","ts":"2021-01-18T18:45:48.618Z","type":"au"}
{"msg":"User <em>User_6</em> added by <em>swcurran</em>.","username":"swcurran","ts":"2021-01-18T18:45:48.657Z","type":"au"}
{"msg":"User <em>User_7</em> added by <em>swcurran</em>.","username":"swcurran","ts":"2021-01-18T18:45:48.702Z","type":"au"}
{"msg":"User <em>User_8</em> added by <em>swcurran</em>.","username":"swcurran","ts":"2021-01-18T18:45:48.746Z","type":"au"}
{"msg":"User <em>User_9</em> added by <em>swcurran</em>.","username":"swcurran","ts":"2021-01-18T18:45:48.792Z","type":"au"}
{"msg":"User <em>User_10</em> added by <em>swcurran</em>.","username":"swcurran","ts":"2021-01-18T18:45:48.840Z","type":"au"}
{"msg":"Has left the channel.","username":"rjones","ts":"2021-01-18T19:43:50.390Z","type":"ul"}
{"msg":"Hey everyone! I'm super excited to announce that for a Code With Us opportunity from BCGov, we at Animo will be adding W3C Standard Verifiable Credential support to ACA-Py. \n\nA lot needs to happen, and we won't be doing all the work, but the overall goal is to support both ZKP/Selective Disclosure VCs using BBS+ Signatures and non-ZKP VCs, the V2 exchange protocols and the new Presentation Exchange format. Aries Agent Test Harness will also be updated to support the new credential formats so we can automatically test interoperability with AFGO.\n\nMattr / Aries Framework Go team as you already tackled a lot of these problems, If it's okay, I'll be reaching out to make sure everything works together and we're on the right track. We can use this channel for general coordination and discussion.","username":"TimoGlastra","ts":"2021-01-18T20:28:38.791Z"}
{"msg":"User <em>User_11</em> added by <em>george.aristy</em>.","username":"george.aristy","ts":"2021-01-19T20:44:03.567Z","type":"au"}
{"msg":"Has joined the channel.","username":"brentzundel","ts":"2021-01-19T23:49:16.518Z","type":"uj"}
{"msg":"Has joined the channel.","username":"esplinr","ts":"2021-01-20T18:36:42.093Z","type":"uj"}
{"msg":"Has joined the channel.","username":"ajayjadhav","ts":"2021-01-21T12:03:38.179Z","type":"uj"}
{"msg":"https://chat.hyperledger.org/channel/aries-go?msg=heuk2LZAx7CBqDyGm","username":"troyronda","ts":"2021-01-21T16:10:11.639Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/aries-go?msg=heuk2LZAx7CBqDyGm","url":"https://chat.hyperledger.org/channel/aries-go?msg=heuk2LZAx7CBqDyGm","remote":true,"fileId":null,"fileName":null}]}
{"msg":"PSA:\n\nSupport for P-E is dependent on support for crypto suites. Let's keep this in mind when we talk about interop.","username":"george.aristy","ts":"2021-01-21T18:39:25.343Z"}
{"msg":"How does that dependency manifest?","username":"swcurran","ts":"2021-01-21T18:48:55.075Z"}
{"msg":"One of the values for the P-E `predicate` attribute defined in this section is dependent on the underlying crypto: https://identity.foundation/presentation-exchange/#input-descriptor-objects","username":"george.aristy","ts":"2021-01-21T19:02:59.875Z"}
{"msg":"There is currently no way using BBS+ to issue a credential with `predicate: required` with the Issuer offline.","username":"george.aristy","ts":"2021-01-21T19:03:52.533Z"}
{"msg":"There is currently no way using BBS+ to present a proof when the P-E request has `predicate: required` and the Issuer offline.","username":"george.aristy","ts":"2021-01-21T19:03:52.533Z"}
{"msg":"There is currently no way using BBS+ to present a proof when the P-E request has `predicate: required` and the Issuer is offline.","username":"george.aristy","ts":"2021-01-21T19:03:52.533Z"}
{"msg":"(and the issued credential does not happen to have a boolean claim already included, eg: \"ageOver18: true\"","username":"george.aristy","ts":"2021-01-21T19:05:16.216Z"}
{"msg":"(and the issued credential does not happen to have a boolean claim already included, eg: \"ageOver18: true\")","username":"george.aristy","ts":"2021-01-21T19:05:16.216Z"}
{"msg":"Note that to support `predicate: required` you would need a suite not currently registered in the LD Crypto Suite Registry: https://w3c-ccg.github.io/ld-cryptosuite-registry/ (if you are using JSONLD proofs)","username":"george.aristy","ts":"2021-01-21T19:06:43.710Z"}
{"msg":"We don't expect to support predicates in BBS+ AFAIK -- we think it is (minimally) sufficient that the verifier include predicates in the PD so that the prover knows if their credentials will meet the business need.  We would love to see BBS+ ZKP extended to at least include date predicates, but not a focus right now.\n\nI can't imagine will do anything about contacting the issuer during a presentation.  That is an anti-pattern that we want to avoid.","username":"swcurran","ts":"2021-01-21T20:15:22.740Z"}
{"msg":"We don't expect to support predicates in BBS+ AFAIK -- we think it is (minimally) sufficient that the verifier include predicates in the PD so that the prover knows if their credentials will meet the business need.  We would love to see BBS+ ZKP extended to at least include date predicates, but not a focus right now.\n\nI can't imagine we will do anything about contacting the issuer during a presentation.  That is an anti-pattern that we want to avoid.","username":"swcurran","ts":"2021-01-21T20:15:22.740Z"}
{"msg":"Has joined the channel.","username":"kdenhartog","ts":"2021-01-24T22:21:21.654Z","type":"uj"}
{"msg":"Has joined the channel.","username":"pfeairheller","ts":"2021-01-25T18:38:02.798Z","type":"uj"}
{"msg":"Has joined the channel.","username":"shaangill025","ts":"2021-02-03T20:01:32.089Z","type":"uj"}
{"msg":"Has joined the channel.","username":"shaanjot.gill","ts":"2021-02-03T20:12:17.801Z","type":"uj"}
{"msg":"FYI: aries-framework-go has been updated to use the new JSON-LD context for BBS+: https://w3id.org/security/bbs/v1","username":"troyronda","ts":"2021-02-24T18:17:56.330Z"}
{"msg":"Cool! We'll use that from the start for ACA-Py","username":"TimoGlastra","ts":"2021-02-24T18:59:03.681Z"}
{"msg":"@swcurran does this still hold true?","username":"george.aristy","ts":"2021-02-24T22:13:50.649Z"}
{"msg":"\"we don't expect to support predicates in BBS+\"","username":"george.aristy","ts":"2021-02-24T22:13:59.544Z"}
{"msg":"Also - date predicates are possible, but only if the dates are in numeric form.","username":"george.aristy","ts":"2021-02-24T22:23:49.413Z"}
{"msg":"We'd love to but that would be dependent on what's ine BBS+ library.\n\nNice to have the data predicates at least.  Even better to have it so that the date was in ISO format, and converted to epoch in a known way.  But a numeric date would be OK as well.","username":"swcurran","ts":"2021-02-24T23:04:39.751Z"}
{"msg":"what BBS+ library are you guys planning on using?","username":"george.aristy","ts":"2021-02-24T23:06:44.981Z"}
{"msg":"Have to check with @TimoGlastra and @andrew.whitehead --- I assume Mattr's, but I'm not keeping my pulse on that.","username":"swcurran","ts":"2021-02-24T23:48:26.716Z"}
{"msg":"We intend to use the FFI repo from Mattr and add a Python wrapper to it (https://github.com/mattrglobal/ffi-bbs-signatures). AFAIK Mattr hasn't implemented predicates yet and it's not high priority ATM. But I would need to check with them for exact details","username":"TimoGlastra","ts":"2021-02-25T15:30:02.773Z"}
{"msg":"Much more interesting in how we can do revocation than predicates.  Or both, of course :-)","username":"swcurran","ts":"2021-02-25T15:34:57.390Z"}
{"msg":"Has joined the channel.","username":"kukgini","ts":"2021-03-02T23:53:30.712Z","type":"uj"}
{"msg":"Nice! I want to abandon the usage of security-v3 old github.io context  and deprecate it","username":"kdenhartog","ts":"2021-03-03T01:24:04.743Z"}
{"msg":"I'm pushing for contexts to be more discrete like is done with bbs/v1 to prevent confusing jsonld issues based on bad contexts","username":"kdenhartog","ts":"2021-03-03T01:24:37.100Z"}
{"msg":"Has joined the channel.","username":"c2bo","ts":"2021-03-03T10:52:29.654Z","type":"uj"}
{"msg":"Has joined the channel.","username":"rpobulic","ts":"2021-03-07T05:14:40.365Z","type":"uj"}
{"msg":"Has joined the channel.","username":"lmtriet","ts":"2021-03-08T20:46:01.140Z","type":"uj"}
{"msg":"We had to add support for transforming JSON-LD blank node identifiers to aries-framework-go when creating and verifying derived credentials.","username":"troyronda","ts":"2021-03-08T21:54:56.541Z"}
{"msg":"When creating a derived credential: https://github.com/hyperledger/aries-framework-go/blob/main/pkg/doc/signature/jsonld/processor.go#L451-L452","username":"troyronda","ts":"2021-03-08T21:55:22.293Z"}
{"msg":"When creating a derived credential: https://github.com/hyperledger/aries-framework-go/blob/d83e137/pkg/doc/signature/jsonld/processor.go#L451-L452","username":"troyronda","ts":"2021-03-08T21:55:22.293Z"}
{"msg":"When verifying a derived credential: https://github.com/hyperledger/aries-framework-go/blob/b1b076db898fe8c922c6dc093d3fa52d448f0c30/pkg/doc/signature/verifier/public_key_verifier.go#L434","username":"troyronda","ts":"2021-03-08T21:56:11.195Z"}
{"msg":"Love the idea to use BBS+ signatures in Aries. Is there an existing RFC folks are working from?","username":"brentzundel","ts":"2021-03-08T21:58:17.574Z"}
{"msg":"Using: https://github.com/w3c-ccg/ldp-bbs2020","username":"troyronda","ts":"2021-03-08T21:58:32.282Z"}
{"msg":"Using: https://w3c-ccg.github.io/ldp-bbs2020","username":"troyronda","ts":"2021-03-08T21:58:32.282Z"}
{"msg":"on top of verifiable credentials.","username":"troyronda","ts":"2021-03-08T21:58:40.334Z"}
{"msg":"I'm familiar with the draft BBS+ LD-Proofs proposal, and very familiar with W3C verifiable credentials. Seems to me there may be some additional nuances that ought to be stated explicitly in order tfor every Aries implementation to successfully interoperate.","username":"brentzundel","ts":"2021-03-08T22:01:16.395Z"}
{"msg":"btw - so far we have tests of the AFG implementation against the Mattr library (https://github.com/hyperledger/aries-framework-go/blob/main/test/bbs/test/bbs.js) including the derivation case.","username":"troyronda","ts":"2021-03-08T22:03:31.699Z"}
{"msg":"btw - so far we have some tests of the AFG implementation against the Mattr library (https://github.com/hyperledger/aries-framework-go/blob/main/test/bbs/test/bbs.js) including the derivation case. we will want to add more, but it's a start.","username":"troyronda","ts":"2021-03-08T22:03:31.699Z"}
{"msg":"FYI Brent, if you weren't aware -- we're adding DIF Presentation Exchange, JSON-LD VCs (LD-Signatures?) and BBS+ Signatures JSON-LD to ACA-Py.  Had a first demo of the Presentation Exchange stuff today and it was pretty cool to see.","username":"swcurran","ts":"2021-03-08T22:03:51.701Z"}
{"msg":"There is an RFC being added about JSON-LD and BBS+ Signatures.  Hey, and Timo is typing -- he knows WAY more.","username":"swcurran","ts":"2021-03-08T22:04:29.512Z"}
{"msg":"Seems like this is the same the json-ld bbs library from MATTR is doing. https://github.com/mattrglobal/jsonld-signatures-bbs/blob/01000b4bf48932a47d7c8c889d2201f8e8085d46/src/BbsBlsSignatureProof2020.ts#L116-L132 and https://github.com/mattrglobal/jsonld-signatures-bbs/blob/01000b4bf48932a47d7c8c889d2201f8e8085d46/src/BbsBlsSignatureProof2020.ts#L254-L267. Is that correct, or is there something else that needs to be done?","username":"TimoGlastra","ts":"2021-03-08T22:05:21.308Z"}
{"msg":"Correct @TimoGlastra","username":"troyronda","ts":"2021-03-08T22:06:13.802Z"}
{"msg":"Also this AFG/Mattr interop test includes blank identifiers: https://github.com/hyperledger/aries-framework-go/blob/main/test/bbs/test/bbs.js#L133-L162 @TimoGlastra","username":"troyronda","ts":"2021-03-08T22:07:13.540Z"}
{"msg":"Like I said, LOVE the interop around BBS+, but imo there really really needs to be an RFC, even if all it does is point to other documents.\n@swcurran did you say there is one in progress?","username":"brentzundel","ts":"2021-03-08T22:09:23.531Z"}
{"msg":"Ah cool thanks @troyronda, will definitely use those as input for our tests","username":"TimoGlastra","ts":"2021-03-08T22:09:40.305Z"}
{"msg":"For BBS+ I don't see a lot that has to be explicitly covered in an RFC at the moment. Most is covered by the specs. Maybe if bound signatures, revocation or other special features are introduced.","username":"TimoGlastra","ts":"2021-03-08T22:10:14.876Z"}
{"msg":"But if you want an RFC just as a pointer that's definitely possible","username":"TimoGlastra","ts":"2021-03-08T22:10:30.218Z"}
{"msg":"The RFC is mostly focussing on JSON-LD based credential exchange. Not so much on BBS+","username":"TimoGlastra","ts":"2021-03-08T22:10:48.650Z"}
{"msg":"That's the one that I meant -- does it have a number/PR?  We were going to get that one done and then do a BBS+ specific one that built off it.","username":"swcurran","ts":"2021-03-08T22:11:42.649Z"}
{"msg":"For BBS+, there is still no revocation.","username":"swcurran","ts":"2021-03-08T22:12:09.630Z"}
{"msg":"https://github.com/hyperledger/aries-rfcs/pull/593/files","username":"TimoGlastra","ts":"2021-03-08T22:13:04.658Z"}
{"msg":"awesome, that's the information I'm looking for. \nSo, someone is already working on a BBS+ specific one, or that will come once 593 is in?\n(Also agree that revocation should be a separate RFC from signature type)","username":"brentzundel","ts":"2021-03-08T22:20:06.649Z"}
{"msg":"Once 593 is done, we'll look at what is BBS+ specific on it and then adjust it or more likely, add a new one that references 593 for commonalities and is specific to BBS+.","username":"swcurran","ts":"2021-03-08T22:29:07.476Z"}
{"msg":"Thanks, good to know the plan.\nI recognize this is the wrong channel to get details about it, but is there a similar effort going on for a BBS+ Indy HIPE?","username":"brentzundel","ts":"2021-03-08T22:31:18.978Z"}
{"msg":"I don't think there's any active efforts there but I'd like to see it","username":"andrew.whitehead","ts":"2021-03-08T22:31:44.833Z"}
{"msg":"Unless I'm reading it wrong that TransformBlankNode method looks like it would transform `_:c14n` anywhere in the RDF statement, including in the value (although it's unlikely to show up there)","username":"andrew.whitehead","ts":"2021-03-08T22:38:14.226Z"}
{"msg":"I think the MATTR implementation does the same. https://github.com/mattrglobal/jsonld-signatures-bbs/blob/01000b4bf48932a47d7c8c889d2201f8e8085d46/src/BbsBlsSignatureProof2020.ts#L254-L267","username":"TimoGlastra","ts":"2021-03-08T22:42:30.252Z"}
{"msg":"Not saying that means it's okay, just that it's at least consistent","username":"TimoGlastra","ts":"2021-03-08T22:42:58.487Z"}
{"msg":"what are folks using to do the RDF Canonicalization?","username":"brentzundel","ts":"2021-03-08T22:53:25.185Z"}
{"msg":"Yeh could improve it a bit. The first goal was to get things working such that we could show interop on the libraries.","username":"troyronda","ts":"2021-03-08T22:54:28.509Z"}
{"msg":"I think most of the json-ld libraries support canonicalization. For ACA-Py we use pyld.","username":"TimoGlastra","ts":"2021-03-08T22:56:30.849Z"}
{"msg":"We use the json-gold library.","username":"troyronda","ts":"2021-03-08T22:56:46.882Z"}
{"msg":"last I looked JSON-LD support in rust was pretty sparse.","username":"brentzundel","ts":"2021-03-08T23:00:58.787Z"}
{"msg":"My understanding is the LD Signature suite is supposed to be normatively defining the canonicalisation algorithm in use. So for compliant with BbsBlsSignature2020 and BbsBlsSignatureProof2020 URDNA2015 has to be used. In terms of the rust take a look at spruceId's implementation. I've not worked with it, but it looks pretty good: https://github.com/spruceid/ssi/blob/main/src/jsonld.rs","username":"kdenhartog","ts":"2021-03-09T11:37:14.089Z"}
{"msg":"Has joined the channel.","username":"wip-abramson","ts":"2021-03-09T16:20:07.314Z","type":"uj"}
{"msg":"thank you!","username":"brentzundel","ts":"2021-03-09T16:21:14.734Z"}
{"msg":"Has joined the channel.","username":"HighBrow","ts":"2021-03-14T08:15:48.525Z","type":"uj"}
{"msg":"Has joined the channel.","username":"Audrius","ts":"2021-03-20T05:06:55.411Z","type":"uj"}
{"msg":"Has joined the channel.","username":"Baha-sk","ts":"2021-03-25T13:41:23.269Z","type":"uj"}
{"msg":"Has joined the channel.","username":"echsecutor","ts":"2021-04-03T19:44:40.210Z","type":"uj"}
{"msg":"Has joined the channel.","username":"domwoe","ts":"2021-04-12T17:47:22.055Z","type":"uj"}
{"msg":"Has joined the channel.","username":"MichaelSchaefer","ts":"2021-04-13T15:40:14.897Z","type":"uj"}
{"msg":"Has joined the channel.","username":"jkrstic","ts":"2021-05-22T18:12:13.602Z","type":"uj"}
{"msg":"Has joined the channel.","username":"timbl","ts":"2021-06-04T19:03:37.416Z","type":"uj"}
{"msg":"Has joined the channel.","username":"da3v21","ts":"2021-06-09T04:35:19.091Z","type":"uj"}
{"msg":"Has joined the channel.","username":"justinmason","ts":"2021-07-07T20:12:41.901Z","type":"uj"}
{"msg":"User <em>User_12</em> added by <em>TimoGlastra</em>.","username":"TimoGlastra","ts":"2021-07-07T20:12:56.071Z","type":"au"}
{"msg":"Has joined the channel.","username":"DirkT","ts":"2021-07-26T08:48:32.572Z","type":"uj"}
{"msg":"I have a question regarding adding BBS+ verification support ...\nAre there any libraries or documentation for converting from a DIF presentation definition to a JSON-LD frame?  The Mattr BBS+ library requires a `revealDocument` at https://github.com/mattrglobal/jsonld-signatures-bbs/blob/master/sample/ts-node/src/demo_single.ts#L91 which is a JSON-LD frame.\nThanks","username":"smithbk","ts":"2021-08-17T20:17:15.122Z"}
{"msg":"ACA-Py does it: https://github.com/hyperledger/aries-cloudagent-python/blob/34c554440c6eb05c671ffa827b3a72075486e0ae/aries_cloudagent/protocols/present_proof/dif/pres_exch_handler.py#L504","username":"TimoGlastra","ts":"2021-08-17T20:18:43.083Z"}
{"msg":"This thread may also be of interest to you: https://github.com/decentralized-identity/waci-presentation-exchange/issues/6","username":"TimoGlastra","ts":"2021-08-17T20:19:29.288Z"}
{"msg":"Thanks Timo","username":"smithbk","ts":"2021-08-17T20:19:47.422Z"}
{"msg":"In the case where you're trying to build a frame, it follows the Frame API as defined by the spec here: https://json-ld.org/spec/latest/json-ld-framing/\n\nIn my experience there's still some rough edges around how frames should look to make sure that a proper VC is being outputted from that call so you'll want to be a bit careful with it.","username":"kdenhartog","ts":"2021-08-17T22:47:59.793Z"}
{"msg":"I suggest when you're looking to build a frame API to first drop your credential in the https://json-ld.org/playground and use the frame tab to figure out how the frame behaves with that specific credential.","username":"kdenhartog","ts":"2021-08-17T22:49:34.094Z"}
{"msg":"Here's an example with data loaded in from the BBS library tests to show what I mean: https://tinyurl.com/d9nza4ke","username":"kdenhartog","ts":"2021-08-17T22:52:25.444Z"}
{"msg":"@TimoGlastra Hi Timo, it looks like the following should be \"path\" instead of \"paths\" at https://github.com/hyperledger/aries-cloudagent-python/blob/34c554440c6eb05c671ffa827b3a72075486e0ae/aries_cloudagent/protocols/present_proof/dif/pres_exch_handler.py#L516 according to the DIF spec at https://identity.foundation/presentation-exchange/#input-descriptor-object","username":"smithbk","ts":"2021-08-18T17:54:46.487Z"}
{"msg":"I haven’t written this code, but it seems this is mapped from the json field ‘path’ to paths: https://github.com/hyperledger/aries-cloudagent-python/blob/34c554440c6eb05c671ffa827b3a72075486e0ae/aries_cloudagent/protocols/present_proof/dif/pres_exch.py#L411","username":"TimoGlastra","ts":"2021-08-18T19:10:24.887Z"}
{"msg":"Has joined the channel.","username":"amitpadmani-awts","ts":"2021-08-25T14:47:24.229Z","type":"uj"}
{"msg":"Has joined the channel.","username":"moisesjaramillo","ts":"2021-09-15T16:40:32.521Z","type":"uj"}
{"msg":"Has joined the channel.","username":"IgorSim","ts":"2021-09-22T08:22:25.936Z","type":"uj"}
{"msg":"Has joined the channel.","username":"nbAmit","ts":"2021-10-20T04:53:36.593Z","type":"uj"}
{"msg":"Has joined the channel.","username":"aso","ts":"2021-11-23T11:17:24.243Z","type":"uj"}
{"msg":"Hi folks, I have seen different BBS implementations here and there but none seem to implement the complete suite describe in\nhttps://github.com/hyperledger/ursa-docs/tree/main/specs/anoncreds2\nIs that a correct statement? If not, I'd be grateful if anyone could point me the right way. Thx in advance!","username":"aso","ts":"2021-11-23T11:18:33.809Z"}
{"msg":"That's correct.  The only privacy related feature in BBS+ is selective disclosure that can be used with JSON-LD in most use cases (some JSON-LD structures don't work).  There is no \"link secret\"-type feature to bind a credential with to an entity without correlation, there is no support for predicates (\"I'm older than 21\" without exposing Date of Birth) and there is no revocation scheme.","username":"swcurran","ts":"2021-11-23T18:28:17.525Z"}
{"msg":"That's correct.  The only privacy related feature in BBS+ is selective disclosure that can be used with JSON-LD in most use cases (some JSON-LD structures don't work).  There is no \"link secret\"-type feature to bind a credential with to an entity without correlation, there is no support for predicates (\"I'm older than 21\" without exposing Date of Birth) and there is no revocation scheme that prevents holder coorelation.","username":"swcurran","ts":"2021-11-23T18:28:17.525Z"}
{"msg":"gotcha, thanks @swcurran!","username":"aso","ts":"2021-11-23T20:05:34.950Z"}
{"msg":"Has joined the channel.","username":"kalyankonda","ts":"2022-02-10T07:15:08.296Z","type":"uj"}
{"msg":"Has joined the channel.","username":"rjones","ts":"2022-02-11T20:13:32.001Z","type":"uj"}
{"msg":"chat has moved to: https://discord.gg/hyperledger","username":"rjones","ts":"2022-02-11T20:13:32.171Z"}
{"msg":"Has left the channel.","username":"rjones","ts":"2022-02-12T00:20:41.705Z","type":"ul"}
{"msg":"","username":"rjones","ts":"2022-03-09T03:04:35.447Z","type":"room_changed_topic"}
{"msg":"","username":"rjones","ts":"2022-03-09T03:04:35.458Z","type":"room_changed_description"}
{"msg":"","username":"rjones","ts":"2022-03-09T03:04:35.462Z","type":"room_changed_announcement"}
