2019/01/18 20:12:32 [DEBUG] Received registration request from *******: { Name:******* Type:peer Secret:**** MaxEnrollments:0 Affiliation:******* Attributes:[{hf.GenCRL true false} {admin true true} {isAdmin true true} {hf.Registrar.Roles client false} {hf.Registrar.Attributes * false} {hf.Revoker true false}] CAName:  }
2019/01/18 20:12:32 [DEBUG] canRegister - Check to see if user '*******' can register
2019/01/18 20:12:32 [DEBUG] Checking to see if caller '*******' can act on type 'peer'
2019/01/18 20:12:32 [DEBUG] Checking to see if caller '*******' is a registrar
2019/01/18 20:12:32 [DEBUG] Validating affiliation: *******
2019/01/18 20:12:32 [DEBUG] Checking to see if affiliation '*******' contains caller's affiliation ''
2019/01/18 20:12:32 [DEBUG] Caller has root affiliation
2019/01/18 20:12:32 [DEBUG] DB: Get affiliation *******
2019/01/18 20:12:32 [DEBUG] Checking to see if registrar can register the requested attributes: [{Name:hf.GenCRL Value:true ECert:false} {Name:admin Value:true ECert:true} {Name:isAdmin Value:true ECert:true} {Name:hf.Registrar.Roles Value:client ECert:false} {Name:hf.Registrar.Attributes Value:* ECert:false} {Name:hf.Revoker Value:true ECert:false}]
2019/01/18 20:12:32 [DEBUG] Validating that registrar with the following values for hf.Registrar.Attributes '*' is authorized to register the requested attribute '&{Name:hf.GenCRL Value:true ECert:false}'
2019/01/18 20:12:32 [DEBUG] Checking if registrar can register attribute: hf.GenCRL
2019/01/18 20:12:32 [DEBUG] Performing authorization check...
2019/01/18 20:12:32 [DEBUG] Checking if caller is authorized to register attribute 'hf.GenCRL' with the requested value of 'true'
2019/01/18 20:12:32 [DEBUG] Requested attribute type is boolean
2019/01/18 20:12:32 [DEBUG] Validating that registrar with the following values for hf.Registrar.Attributes '*' is authorized to register the requested attribute '&{Name:admin Value:true ECert:true}'
2019/01/18 20:12:32 [DEBUG] Checking if registrar can register attribute: admin
2019/01/18 20:12:32 [DEBUG] Performing authorization check...
2019/01/18 20:12:32 [DEBUG] Validating that registrar with the following values for hf.Registrar.Attributes '*' is authorized to register the requested attribute '&{Name:isAdmin Value:true ECert:true}'
2019/01/18 20:12:32 [DEBUG] Checking if registrar can register attribute: isAdmin
2019/01/18 20:12:32 [DEBUG] Performing authorization check...
2019/01/18 20:12:32 [DEBUG] Validating that registrar with the following values for hf.Registrar.Attributes '*' is authorized to register the requested attribute '&{Name:hf.Registrar.Roles Value:client ECert:false}'
2019/01/18 20:12:32 [DEBUG] Checking if registrar can register attribute: hf.Registrar.Roles
2019/01/18 20:12:32 [DEBUG] Performing authorization check...
2019/01/18 20:12:32 [DEBUG] Checking if caller is authorized to register attribute 'hf.Registrar.Roles' with the requested value of 'client'
2019/01/18 20:12:32 [DEBUG] Requested attribute type is list
2019/01/18 20:12:32 [DEBUG] Validating that registrar with the following values for hf.Registrar.Attributes '*' is authorized to register the requested attribute '&{Name:hf.Registrar.Attributes Value:* ECert:false}'
2019/01/18 20:12:32 [DEBUG] Checking if registrar can register attribute: hf.Registrar.Attributes
2019/01/18 20:12:32 [DEBUG] Performing authorization check...
2019/01/18 20:12:32 [DEBUG] Checking if caller is authorized to register attribute 'hf.Registrar.Attributes' with the requested value of '*'
2019/01/18 20:12:32 [DEBUG] Requested attribute type is list
2019/01/18 20:12:32 [DEBUG] Perform ownshership check for requested 'hf.' attributes for the values of 'hf.Registrar.Attributes'
2019/01/18 20:12:32 [DEBUG] Checking if registrar can register attribute: *
2019/01/18 20:12:32 [DEBUG] Validating that registrar with the following values for hf.Registrar.Attributes '*' is authorized to register the requested attribute '&{Name:hf.Revoker Value:true ECert:false}'
2019/01/18 20:12:32 [DEBUG] Checking if registrar can register attribute: hf.Revoker
2019/01/18 20:12:32 [DEBUG] Performing authorization check...
2019/01/18 20:12:32 [DEBUG] Checking if caller is authorized to register attribute 'hf.Revoker' with the requested value of 'true'
2019/01/18 20:12:32 [DEBUG] Requested attribute type is boolean
2019/01/18 20:12:32 [DEBUG] Registering user id: *******
2019/01/18 20:12:32 [DEBUG] Max enrollment value verification - User specified max enrollment: 0, CA max enrollment: -1
2019/01/18 20:12:32 [DEBUG] DB: Getting identity *******
2019/01/18 20:12:32 [DEBUG] DB: Add identity *******
2019/01/18 20:12:32 [DEBUG] Received request for /register
2019/01/18 20:12:32 [DEBUG] Caller is using a x509 certificate
2019/01/18 20:12:32 [DEBUG] Checking for revocation/expiration of certificate owned by '*******'
2019/01/18 20:12:32 [DEBUG] DB: Get certificate by serial (6a79dbc385a5fea17dbdc8c54dd8ab66360d49f7) and aki (3672004ed102914039ab91c7b0f6689c58953bbc)
2019/01/18 20:12:32 [DEBUG] DB: Getting identity *******
2019/01/18 20:12:32 [DEBUG] Successful token authentication of '*******'
2019/01/18 20:12:32 [DEBUG] Received registration request from *******: { Name:******* Type:peer Secret:**** MaxEnrollments:0 Affiliation:******* Attributes:[{hf.Registrar.Roles client false} {hf.Registrar.Attributes * false} {hf.Revoker true false} {hf.GenCRL true false} {admin true true} {isAdmin true true}] CAName:  }
2019/01/18 20:12:32 [DEBUG] canRegister - Check to see if user '*******' can register
2019/01/18 20:12:32 [DEBUG] Checking to see if caller '*******' can act on type 'peer'
2019/01/18 20:12:32 [DEBUG] Checking to see if caller '*******' is a registrar
2019/01/18 20:12:32 [DEBUG] Validating affiliation: *******
2019/01/18 20:12:32 [DEBUG] Checking to see if affiliation '*******' contains caller's affiliation ''
2019/01/18 20:12:32 [DEBUG] Caller has root affiliation
2019/01/18 20:12:32 [DEBUG] DB: Get affiliation *******
2019/01/18 20:12:32 [DEBUG] Checking to see if registrar can register the requested attributes: [{Name:hf.Registrar.Roles Value:client ECert:false} {Name:hf.Registrar.Attributes Value:* ECert:false} {Name:hf.Revoker Value:true ECert:false} {Name:hf.GenCRL Value:true ECert:false} {Name:admin Value:true ECert:true} {Name:isAdmin Value:true ECert:true}]
2019/01/18 20:12:32 [DEBUG] Validating that registrar with the following values for hf.Registrar.Attributes '*' is authorized to register the requested attribute '&{Name:hf.Registrar.Roles Value:client ECert:false}'
2019/01/18 20:12:32 [DEBUG] Checking if registrar can register attribute: hf.Registrar.Roles
2019/01/18 20:12:32 [DEBUG] Performing authorization check...
2019/01/18 20:12:32 [DEBUG] Checking if caller is authorized to register attribute 'hf.Registrar.Roles' with the requested value of 'client'
2019/01/18 20:12:32 [DEBUG] Requested attribute type is list
2019/01/18 20:12:32 [DEBUG] Validating that registrar with the following values for hf.Registrar.Attributes '*' is authorized to register the requested attribute '&{Name:hf.Registrar.Attributes Value:* ECert:false}'
2019/01/18 20:12:32 [DEBUG] Checking if registrar can register attribute: hf.Registrar.Attributes
2019/01/18 20:12:32 [DEBUG] Performing authorization check...
2019/01/18 20:12:32 [DEBUG] Checking if caller is authorized to register attribute 'hf.Registrar.Attributes' with the requested value of '*'
2019/01/18 20:12:32 [DEBUG] Requested attribute type is list
2019/01/18 20:12:32 [DEBUG] Perform ownshership check for requested 'hf.' attributes for the values of 'hf.Registrar.Attributes'
2019/01/18 20:12:32 [DEBUG] Checking if registrar can register attribute: *
2019/01/18 20:12:32 [DEBUG] Validating that registrar with the following values for hf.Registrar.Attributes '*' is authorized to register the requested attribute '&{Name:hf.Revoker Value:true ECert:false}'
2019/01/18 20:12:32 [DEBUG] Checking if registrar can register attribute: hf.Revoker
2019/01/18 20:12:32 [DEBUG] Performing authorization check...
2019/01/18 20:12:32 [DEBUG] Checking if caller is authorized to register attribute 'hf.Revoker' with the requested value of 'true'
2019/01/18 20:12:32 [DEBUG] Requested attribute type is boolean
2019/01/18 20:12:32 [DEBUG] Validating that registrar with the following values for hf.Registrar.Attributes '*' is authorized to register the requested attribute '&{Name:hf.GenCRL Value:true ECert:false}'
2019/01/18 20:12:32 [DEBUG] Checking if registrar can register attribute: hf.GenCRL
2019/01/18 20:12:32 [DEBUG] Performing authorization check...
2019/01/18 20:12:32 [DEBUG] Checking if caller is authorized to register attribute 'hf.GenCRL' with the requested value of 'true'
2019/01/18 20:12:32 [DEBUG] Requested attribute type is boolean
2019/01/18 20:12:32 [DEBUG] Validating that registrar with the following values for hf.Registrar.Attributes '*' is authorized to register the requested attribute '&{Name:admin Value:true ECert:true}'
2019/01/18 20:12:32 [DEBUG] Checking if registrar can register attribute: admin
2019/01/18 20:12:32 [DEBUG] Performing authorization check...
2019/01/18 20:12:32 [DEBUG] Validating that registrar with the following values for hf.Registrar.Attributes '*' is authorized to register the requested attribute '&{Name:isAdmin Value:true ECert:true}'
2019/01/18 20:12:32 [DEBUG] Checking if registrar can register attribute: isAdmin
2019/01/18 20:12:32 [DEBUG] Performing authorization check...
2019/01/18 20:12:32 [DEBUG] Registering user id: *******
2019/01/18 20:12:32 [DEBUG] Max enrollment value verification - User specified max enrollment: 0, CA max enrollment: -1
2019/01/18 20:12:32 [DEBUG] DB: Getting identity *******
2019/01/18 20:12:32 [DEBUG] DB: Add identity *******
2019/01/18 20:12:32 [DEBUG] Successfully added identity ******* to the database
2019/01/18 20:12:32 [INFO] **.**.**.**:49494 POST /register 201 0 "OK"
2019/01/18 20:12:32 [DEBUG] Successfully added identity ******* to the database
2019/01/18 20:12:32 [INFO] **.**.**.**:58002 POST /register 201 0 "OK"
2019/01/18 20:12:32 [DEBUG] Received request for /cainfo
2019/01/18 20:12:32 [INFO] **.**.**.**:49500 POST /cainfo 200 0 "OK"
2019/01/18 20:12:32 [DEBUG] Received request for /cainfo
2019/01/18 20:12:32 [INFO] **.**.**.**:58006 POST /cainfo 200 0 "OK"
2019/01/18 20:12:39 [DEBUG] Received request for /enroll
2019/01/18 20:12:39 [DEBUG] ca.Config: &{Version:1.4.1 Cfg:{Identities:{PasswordAttempts:10 AllowRemove:false} Affiliations:{AllowRemove:false}} CA:{Name:ica.******* Keyfile:/etc/hyperledger/fabric-ca-server/ca-key.pem Certfile:/etc/hyperledger/fabric-ca-server/ca-cert.pem Chainfile:/etc/hyperledger/fabric-ca-server/ca-chain.pem} Signing:0xc000379310 CSR:{CN:rca Names:[{C:US ST:***** L:***** O:******* OU:******* SerialNumber:}] Hosts:[] KeyRequest:0xc000441200 CA:0xc000441280 SerialNumber:} Registry:{MaxEnrollments:-1 Identities:[{ Name:**** Pass:**** Type:client Affiliation: MaxEnrollments:0 Attrs:map[hf.Registrar.DelegateRoles:* hf.Registrar.Roles:* hf.Revoker:1 hf.AffiliationMgr:1 hf.GenCRL:1 hf.IntermediateCA:1 hf.Registrar.Attributes:*]  }]} Affiliations:map[*******:[] orderer:[]] LDAP:{ Enabled:false URL:ldap://****:****@<host>:<port>/<base> UserFilter:(uid=%s) GroupFilter:(memberUid=%s) Attribute:{[uid member] [{ }] map[groups:[{ }]]} TLS:{false [] { }}  } DB:{ Type:postgres Datasource:host=icadb.******* port=5432 user=postgres dbname=postgres sslmode=disable TLS:{false [] { }}  } CSP:0xc000441c40 Client:<nil> Intermediate:{ParentServer:{ URL: CAName:  } TLS:{Enabled:false CertFiles:[] Client:{KeyFile: CertFile:}} Enrollment:{ Name: Secret:**** CAName: AttrReqs:[] Profile: Label: CSR:<nil> Type:x509  }} CRL:{Expiry:24h0m0s} Idemix:{IssuerPublicKeyfile:/etc/hyperledger/fabric-ca-server/IssuerPublicKey IssuerSecretKeyfile:/etc/hyperledger/fabric-ca-server/msp/keystore/IssuerSecretKey RevocationPublicKeyfile:/etc/hyperledger/fabric-ca-server/IssuerRevocationPublicKey RevocationPrivateKeyfile:/etc/hyperledger/fabric-ca-server/msp/keystore/IssuerRevocationPrivateKey RHPoolSize:1000 NonceExpiration:15s NonceSweepInterval:15m}}
2019/01/18 20:12:39 [DEBUG] DB: Getting identity *******
2019/01/18 20:12:39 [DEBUG] DB: Login user ******* with max enrollments of -1 and state of 0
2019/01/18 20:12:40 [DEBUG] DB: identity ******* successfully logged in
2019/01/18 20:12:40 [DEBUG] DB: Getting identity *******
2019/01/18 20:12:40 [DEBUG] Received request for /enroll
2019/01/18 20:12:40 [DEBUG] ca.Config: &{Version:1.4.1 Cfg:{Identities:{PasswordAttempts:10 AllowRemove:false} Affiliations:{AllowRemove:false}} CA:{Name:ica.******* Keyfile:/etc/hyperledger/fabric-ca-server/ca-key.pem Certfile:/etc/hyperledger/fabric-ca-server/ca-cert.pem Chainfile:/etc/hyperledger/fabric-ca-server/ca-chain.pem} Signing:0xc000379310 CSR:{CN:rca Names:[{C:US ST:***** L:***** O:******* OU:******* SerialNumber:}] Hosts:[] KeyRequest:0xc000441200 CA:0xc000441280 SerialNumber:} Registry:{MaxEnrollments:-1 Identities:[{ Name:**** Pass:**** Type:client Affiliation: MaxEnrollments:0 Attrs:map[hf.Registrar.Attributes:* hf.Registrar.DelegateRoles:* hf.Registrar.Roles:* hf.Revoker:1 hf.AffiliationMgr:1 hf.GenCRL:1 hf.IntermediateCA:1]  }]} Affiliations:map[*******:[] orderer:[]] LDAP:{ Enabled:false URL:ldap://****:****@<host>:<port>/<base> UserFilter:(uid=%s) GroupFilter:(memberUid=%s) Attribute:{[uid member] [{ }] map[groups:[{ }]]} TLS:{false [] { }}  } DB:{ Type:postgres Datasource:host=icadb.******* port=5432 user=postgres dbname=postgres sslmode=disable TLS:{false [] { }}  } CSP:0xc000441c40 Client:<nil> Intermediate:{ParentServer:{ URL: CAName:  } TLS:{Enabled:false CertFiles:[] Client:{KeyFile: CertFile:}} Enrollment:{ Name: Secret:**** CAName: AttrReqs:[] Profile: Label: CSR:<nil> Type:x509  }} CRL:{Expiry:24h0m0s} Idemix:{IssuerPublicKeyfile:/etc/hyperledger/fabric-ca-server/IssuerPublicKey IssuerSecretKeyfile:/etc/hyperledger/fabric-ca-server/msp/keystore/IssuerSecretKey RevocationPublicKeyfile:/etc/hyperledger/fabric-ca-server/IssuerRevocationPublicKey RevocationPrivateKeyfile:/etc/hyperledger/fabric-ca-server/msp/keystore/IssuerRevocationPrivateKey RHPoolSize:1000 NonceExpiration:15s NonceSweepInterval:15m}}
2019/01/18 20:12:40 [DEBUG] DB: Getting identity *******
2019/01/18 20:12:40 [DEBUG] Processing sign request: id=*******, CommonName=*******, Subject=<nil>
2019/01/18 20:12:40 [DEBUG] Request is not for a CA signing certificate
2019/01/18 20:12:40 [DEBUG] Checking CSR fields to make sure that they do not exceed maximum character limits
2019/01/18 20:12:40 [DEBUG] Finished processing sign request
2019/01/18 20:12:40 [DEBUG] DB: Getting identity *******
2019/01/18 20:12:40 [DEBUG] Attribute extension being added to certificate is: &{ID:[1 2 3 4 5 6 7 8 1] Critical:false Value:7b226174747273223a7b2261646d696e223a2274727565222c2268662e416666696c696174696f6e223a226d796e6473686674222c2268662e456e726f6c6c6d656e744944223a226d796e64736866742d61646d696e222c2268662e54797065223a2270656572222c22697341646d696e223a2274727565227d7d}
2019/01/18 20:12:40 [DEBUG] Adding attribute extension to CSR: &{ID:[1 2 3 4 5 6 7 8 1] Critical:false Value:7b226174747273223a7b2261646d696e223a2274727565222c2268662e416666696c696174696f6e223a226d796e6473686674222c2268662e456e726f6c6c6d656e744944223a226d796e64736866742d61646d696e222c2268662e54797065223a2270656572222c22697341646d696e223a2274727565227d7d}
2019/01/18 20:12:40 [INFO] signed certificate with serial number 305309739873963505646246569122262011926240389977
2019/01/18 20:12:40 [DEBUG] DB: Insert Certificate
2019/01/18 20:12:40 [DEBUG] Saved serial number as hex 357a8fee2ea265dd205c582683876daf6bc16b59
2019/01/18 20:12:40 [DEBUG] DB: Login user ******* with max enrollments of -1 and state of 0
2019/01/18 20:12:40 [DEBUG] saved certificate with serial number 305309739873963505646246569122262011926240389977
2019/01/18 20:12:40 [INFO] **.**.**.**:49570 POST /enroll 500 0 "2 rows were affected when updating the state of identity *******"
2019/01/18 20:12:40 [DEBUG] DB: identity ******* successfully logged in

