package main

import (
	"github.com/hyperledger/fabric-sdk-go/pkg/client/channel"
	"github.com/hyperledger/fabric-sdk-go/pkg/common/errors/retry"
	"github.com/hyperledger/fabric-sdk-go/pkg/common/logging"
	"github.com/hyperledger/fabric-sdk-go/pkg/core/config"
	"github.com/hyperledger/fabric-sdk-go/pkg/fabsdk"
)

var (
	logger = logging.NewLogger("payment")
	ccID = "mycc"
	defaultQueryArgs = [][]byte{[]byte("query"), []byte("a")}
)

const (
	channelID      = "mychannel"
	orgName        = "Org1"
	orgAdmin       = "Admin"
	ordererOrgName = "OrdererOrg"
)

func initSdkClient() (*channel.Client){
	sdk, err := fabsdk.New(config.FromFile("config.yaml"))
	if err != nil {
		logger.Fatalf("Failed to create new SDK: %s", err)
	}
	defer sdk.Close()

	//prepare channel client context using client context
	clientChannelContext := sdk.ChannelContext(channelID, fabsdk.WithUser("User1"), fabsdk.WithOrg(orgName))
	// Channel client is used to query and execute transactions (Org1 is default org)
	client, err := channel.New(clientChannelContext)
	if err != nil {
		logger.Fatalf("Failed to create new channel client: %s", err)
	}
	return client
}

func queryCC(client *channel.Client, targetEndpoints ...string) []byte {
	response, err := client.Query(channel.Request{ChaincodeID: ccID, Fcn: "invoke", Args: defaultQueryArgs},
		channel.WithRetry(retry.DefaultChannelOpts),
		channel.WithTargetEndpoints(targetEndpoints...),
	)
	if err != nil {
		logger.Fatalf("Failed to query funds: %s", err)
	}
	return response.Payload
}

// export GOBIN=/home/wangxiang/gopath/bin GOPATH=/home/wangxiang/gopath GOROOT=/usr/local/go PATH=$GOBIN:$PATH
func main() {
	client := initSdkClient()

	existingValue := queryCC(client)
	logger.Info(existingValue)


	logger.Info("hello, world\n")
}