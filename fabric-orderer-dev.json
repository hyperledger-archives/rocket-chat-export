{"msg":"kostas","username":"rjones","ts":"2017-09-08T16:41:46.623Z","type":"subscription-role-added"}
{"msg":"User <em>User_1</em> added by <em>rjones</em>.","username":"rjones","ts":"2017-09-08T16:42:43.915Z","type":"au"}
{"msg":"jyellick","username":"rjones","ts":"2017-09-08T16:42:50.128Z","type":"subscription-role-added"}
{"msg":"jyellick","username":"rjones","ts":"2017-09-08T16:42:58.373Z","type":"subscription-role-added"}
{"msg":"kostas","username":"rjones","ts":"2017-09-08T16:43:04.072Z","type":"subscription-role-added"}
{"msg":"Development discussions only.  Please take user questions to #fabric-consensus","username":"jyellick","ts":"2017-09-08T16:45:38.608Z","type":"room_changed_topic"}
{"msg":"@sanchezl @guoger ","username":"kostas","ts":"2017-09-08T16:45:49.536Z"}
{"msg":"Has joined the channel.","username":"guoger","ts":"2017-09-08T16:45:49.670Z","type":"uj"}
{"msg":"Has joined the channel.","username":"sanchezl","ts":"2017-09-08T16:45:49.739Z","type":"uj"}
{"msg":"Has left the channel.","username":"rjones","ts":"2017-09-08T17:04:25.921Z","type":"ul"}
{"msg":"Do we have any idea why, say, the msp logger's debug statements show up when running orderer tests?","username":"kostas","ts":"2017-09-09T18:47:15.239Z"}
{"msg":"```~/Go/src/github.com/hyperledger/fabric/msp (master)* $ pt flogging\nmspmgrimpl.go\n22:\t\"github.com/hyperledger/fabric/common/flogging\"\n28:var mspLogger = flogging.MustGetLogger(\"msp\")\n\nidentities.go\n31:\t\"github.com/hyperledger/fabric/common/flogging\"\n36:var mspIdentityLogger = flogging.MustGetLogger(\"msp/identity\")\n\ncache/cache.go\n15:\t\"github.com/hyperledger/fabric/common/flogging\"\n26:var mspLogger = flogging.MustGetLogger(\"msp\")\n\nmgmt/mgmt.go\n26:\t\"github.com/hyperledger/fabric/common/flogging\"\n64:var mspLogger = flogging.MustGetLogger(\"msp\")\n```","username":"kostas","ts":"2017-09-09T18:47:27.676Z"}
{"msg":"As best as I can tell, they don't modify the logging spec, and the `flogging` package sets the default level to INFO:","username":"kostas","ts":"2017-09-09T18:48:54.593Z"}
{"msg":"`defaultLevel  = logging.INFO`","username":"kostas","ts":"2017-09-09T18:48:59.283Z"}
{"msg":"I added a debug statement to the `flogging` package to confirm the level at which each module is initialized, and this is what I see: https://pastebin.com/xZZnGi2H","username":"kostas","ts":"2017-09-09T19:07:10.294Z"}
{"msg":"I added an INFO-level statement to the `flogging` package to confirm the level at which each module is initialized, and this is what I see: https://pastebin.com/xZZnGi2H","username":"kostas","ts":"2017-09-09T19:07:10.294Z"}
{"msg":"I added an INFO-level log statement to the `flogging` package to confirm the level at which each module is initialized, and this is what I see: https://pastebin.com/xZZnGi2H","username":"kostas","ts":"2017-09-09T19:07:10.294Z"}
{"msg":"@kostas Often in our test files, we often have a:\n\n```\nfunc init() {\n        logging.SetLevel(logging.DEBUG, \"\")\n}\n```","username":"jyellick","ts":"2017-09-10T01:44:59.476Z"}
{"msg":"The assumption being that usually, the log output is suppressed, except in case of failure, when the debug level is desirable","username":"jyellick","ts":"2017-09-10T01:46:10.904Z"}
{"msg":"@jyellick: Ah, all of my queries were `flogging.*` which is why I was missing this, thanks.","username":"kostas","ts":"2017-09-10T19:06:18.318Z"}
{"msg":"Not sure I get the \"log output is suppressed\" part however.","username":"kostas","ts":"2017-09-10T19:06:22.773Z"}
{"msg":"Failure or not, the output does not get suppressed, right?","username":"kostas","ts":"2017-09-10T19:06:26.994Z"}
{"msg":"(It's the reason why I've defaulted the log level to \"error\" in the `kafka` package tests.)","username":"kostas","ts":"2017-09-10T19:06:30.762Z"}
{"msg":"Unless I execute `go test -v` and the test passes, all log output is suppressed","username":"jyellick","ts":"2017-09-10T19:46:39.069Z"}
{"msg":"For example:\n\n```\n[yellickj@jmobile orderer]$ go test ./consensus/solo/\nok  \tgithub.com/hyperledger/fabric/orderer/consensus/solo\t0.114s\n[yellickj@jmobile orderer]$ \n```","username":"jyellick","ts":"2017-09-10T19:47:08.923Z"}
{"msg":"Hm. How about this then? https://pastebin.com/L9EL0MAC","username":"kostas","ts":"2017-09-10T20:05:22.169Z"}
{"msg":"Interesting, it seems to be the difference between:\n\n```\ngo test\n```\nand\n```\n[yellickj@jmobile server]$ go test .\nok  \tgithub.com/hyperledger/fabric/orderer/common/server\t1.689s\n[yellickj@jmobile server]$ \n```","username":"jyellick","ts":"2017-09-10T20:24:50.193Z"}
{"msg":"(I always run the tests with a `.` if that is my intent","username":"jyellick","ts":"2017-09-10T20:25:03.655Z"}
{"msg":"I had assumed that `go test` was imply an alias for `go test .`","username":"jyellick","ts":"2017-09-10T20:25:16.087Z"}
{"msg":"Yeah, not sure what's up either.","username":"kostas","ts":"2017-09-10T20:48:24.291Z"}
{"msg":"Do you have any idea why the `msp` or `viperutil` packages do debug-level printouts though?","username":"kostas","ts":"2017-09-10T20:48:30.781Z"}
{"msg":"As best as I can tell, the `msp` package has ` logging.SetLevel(logging.DEBUG...`) statement but it's on the `init` function of their `*_test.go`files, so it shouldn't be activated unless we run those specific tests in the `msp` package.","username":"kostas","ts":"2017-09-10T20:48:43.965Z"}
{"msg":"(And there is no such statement on the `viperutil` package.)","username":"kostas","ts":"2017-09-10T20:48:52.217Z"}
{"msg":"@guoger: I've spent the past couple of days working with your performance/benchmark code, which is generally excellent.","username":"kostas","ts":"2017-09-10T22:16:00.879Z"}
{"msg":"I'm getting all sorts of failures however when doing Kafka-based tests, with deliver threads panicking, and the `fsblkstorage` returning errors (see: https://chat.hyperledger.org/channel/fabric-ledger?msg=eTcrrDE5WmY3v3jTa).","username":"kostas","ts":"2017-09-10T22:16:08.538Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-ledger?msg=eTcrrDE5WmY3v3jTa","url":"https://chat.hyperledger.org/channel/fabric-ledger?msg=eTcrrDE5WmY3v3jTa","remote":true,"fileId":null,"fileName":null}]}
{"msg":"(I should note that I don't expect this to be a disk size issue, as I'm running this from within my Vagrant box, but have modified your test so that it creates the orderer ledgers in the `/vagrant` dir, which maps to my host machine, where disk space is plenty.)","username":"kostas","ts":"2017-09-10T22:16:27.696Z"}
{"msg":"I will give you a more detailed report tomorrow, but for now a question, in case you (or anyone else in here) has a take:","username":"kostas","ts":"2017-09-10T22:17:53.347Z"}
{"msg":"Should we provide a `docker-compose.yml` file for bringing up a base ZK/Kafka configuration for those benchmark tests, or should we let that be the user's problem?","username":"kostas","ts":"2017-09-10T22:18:31.538Z"}
{"msg":"Providing a Docker Compose config file would be nice, but:","username":"kostas","ts":"2017-09-10T22:19:57.462Z"}
{"msg":"a. I am slightly skeptical of turning this test into a heavy integration test that calls into the OS to bring up a Docker composition","username":"kostas","ts":"2017-09-10T22:20:43.672Z"}
{"msg":"b. Writing a Docker Composition that just works out of the box is slightly trickier than it sounds","username":"kostas","ts":"2017-09-10T22:21:03.616Z"}
{"msg":"b. Writing a Docker composition that just works out of the box is slightly trickier than it sounds","username":"kostas","ts":"2017-09-10T22:21:03.616Z"}
{"msg":"For my own local tests, I originally attempted to modify the `dc-orderer-*.yml` files under the `/bddtests` directory by just adding port mappings to the host machine.","username":"kostas","ts":"2017-09-10T22:22:45.528Z"}
{"msg":"The thinking was that I would just target those ports on localhost, and voila, I'd be able to interact with a Kafka/ZK cluster that was brought up via Docker Compose.","username":"kostas","ts":"2017-09-10T22:23:12.529Z"}
{"msg":"However this doesn't work, cause ZK records the addresses as reported by the Kafka brokers, and it is those addresses that get sent back to the Kafka client (i.e. our test).","username":"kostas","ts":"2017-09-10T22:23:49.685Z"}
{"msg":"Those addresses however make sense in the Docker Compose network namespace, not the host machine.","username":"kostas","ts":"2017-09-10T22:24:04.504Z"}
{"msg":"Long story short, I spent a ton of time trying to set up Kafka listeners (internal/external) for that purpose but failed to get it to work. (Related KIP: https://cwiki.apache.org/confluence/display/KAFKA/KIP-103%3A+Separation+of+Internal+and+External+traffic)","username":"kostas","ts":"2017-09-10T22:27:05.508Z"}
{"msg":"So now I'm using a hacked-up Docker Compose file where all Kafka/ZK services use the host for network (`network_mode: \"host\"`).","username":"kostas","ts":"2017-09-10T22:28:16.903Z"}
{"msg":"But even that doesn't completely solve the problem as you need to add an `extra_hosts`key to get it work, whose value is host-dependent.","username":"kostas","ts":"2017-09-10T22:29:12.258Z"}
{"msg":"But even that doesn't completely solve the problem as you need to add an `extra_hosts`key to get it to work, whose value is host-dependent.","username":"kostas","ts":"2017-09-10T22:29:12.258Z"}
{"msg":"But even that doesn't completely solve the problem as you need to add an `extra_hosts`key to get it to work, whose value is host-dependent. (I just love Docker.)","username":"kostas","ts":"2017-09-10T22:29:12.258Z"}
{"msg":"But even that doesn't completely solve the problem as you need to add an `extra_hosts`key to get it to work, whose value is host-dependent.","username":"kostas","ts":"2017-09-10T22:29:12.258Z"}
{"msg":"See: http://blog.yohanliyanage.com/2016/09/docker-machine-moby-name-or-service-not-known/","username":"kostas","ts":"2017-09-10T22:29:15.420Z"}
{"msg":"So that value is, say, `\"ubuntu-xenial:127.0.0.1` on my Vagrant machine and `mobdy:127.0.0.1` on my Mac.","username":"kostas","ts":"2017-09-10T22:30:09.048Z"}
{"msg":"(And on the Mac it doesn't really work, as host networking has always been problematic for Docker as best as I can tell. I am not an expert though.)","username":"kostas","ts":"2017-09-10T22:30:49.392Z"}
{"msg":"TL;DR -- There's definitely something up with the Kafka tests, and I'll need some of your cycles there.","username":"kostas","ts":"2017-09-10T22:32:08.248Z"}
{"msg":"Meanwhile, if any of you has thoughts on how/whether we should make provisioning a Kafka/ZK cluster for those tests easy, let me know.","username":"kostas","ts":"2017-09-10T22:32:10.182Z"}
{"msg":"> As best as I can tell, the `msp` package has ` logging.SetLevel(logging.DEBUG...`) statement but it's on the `init` function of their `*_test.go`files, so it shouldn't be activated unless we run those specific tests in the `msp` package.\n@kostas That `SetLogging` is global for all packages, not just the local package, we could probably refine that somehow","username":"jyellick","ts":"2017-09-10T23:03:18.700Z"}
{"msg":"(and of course the contents of one package's `_test.go` files cannot have any affect on another's `_test.go` files (as when `go test` builds the test binary, it is one binary per package, where the binary is the code imported by that package and its test files.)","username":"jyellick","ts":"2017-09-10T23:29:41.984Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=Gv3z265ucuee7mowX) @kostas I'm looking at the log you sent to me. Is the failure constant or flaky?","username":"guoger","ts":"2017-09-11T03:55:39.456Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=Gv3z265ucuee7mowX","url":"https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=Gv3z265ucuee7mowX","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=ThuY4ze3G95GMTQyK) @kostas ah, I've tried this briefly when I was working on the benchmark and ran into same issue. but you've been going farther now. I agree that we should spin up a kafka cluster for each test, but the work is non-trivial, so I only left a TODO for the time being.","username":"guoger","ts":"2017-09-11T03:59:33.575Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=ThuY4ze3G95GMTQyK","url":"https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=ThuY4ze3G95GMTQyK","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@kostas I looked at log2.txt file you sent to me. I came across the same issue when I worked on it and I talked to @manish-sethi . Unfortunately the test was flaky for me and I couldn't reproduce it under single channel.","username":"guoger","ts":"2017-09-11T05:46:00.129Z"}
{"msg":"Has joined the channel.","username":"manish-sethi","ts":"2017-09-11T05:46:00.174Z","type":"uj"}
{"msg":"here's the log I sent to him https://pastebin.com/9p3fMxYr , seem to be identical to log2.txt.","username":"guoger","ts":"2017-09-11T05:46:35.835Z"}
{"msg":"we could take this to #fabric-ledger if necessary","username":"guoger","ts":"2017-09-11T05:47:26.970Z"}
{"msg":"@guoger: I pushed out a changeset to bring us all on the same page: https://gerrit.hyperledger.org/r/c/13325/","username":"kostas","ts":"2017-09-11T15:41:50.559Z"}
{"msg":"I get the failure in a single channel (single-everything really) as soon as I bump the total transaction count to 10K.","username":"kostas","ts":"2017-09-11T15:43:03.316Z"}
{"msg":"Could you please spend some cycles with Manish --if he's available-- to get to the bottom of what's wrong here?","username":"kostas","ts":"2017-09-11T15:43:34.570Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=Ybawi3xexPXkSAvkc) @kostas OK, will do","username":"guoger","ts":"2017-09-11T15:49:14.793Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=Ybawi3xexPXkSAvkc","url":"https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=Ybawi3xexPXkSAvkc","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@jyellick: RE: https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=7KDHqi6vvJ5NzCm5P","username":"kostas","ts":"2017-09-11T16:22:57.102Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=7KDHqi6vvJ5NzCm5P","url":"https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=7KDHqi6vvJ5NzCm5P","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Let me preface this by saying that:","username":"kostas","ts":"2017-09-11T16:23:06.814Z"}
{"msg":"1. I am dead sure I'm missing something obvious, and","username":"kostas","ts":"2017-09-11T16:23:15.617Z"}
{"msg":"1. I am dead sure I'm missing something obvious","username":"kostas","ts":"2017-09-11T16:23:15.617Z"}
{"msg":"2. I am however still not sure what that thing is","username":"kostas","ts":"2017-09-11T16:23:33.157Z"}
{"msg":"Let me also give a concrete example:","username":"kostas","ts":"2017-09-11T16:23:40.797Z"}
{"msg":"`cd orderer/common/server; go test`","username":"kostas","ts":"2017-09-11T16:23:50.353Z"}
{"msg":"You'll see the usual verbose suspects there: `msp`, `viperutil`","username":"kostas","ts":"2017-09-11T16:24:14.409Z"}
{"msg":"Now, as best as I can tell, we're doing that global setting of the logger only in test files:","username":"kostas","ts":"2017-09-11T16:24:42.589Z"}
{"msg":"https://pastebin.com/wsg16EtM","username":"kostas","ts":"2017-09-11T16:24:45.856Z"}
{"msg":"Ah, damn.","username":"kostas","ts":"2017-09-11T16:25:33.526Z"}
{"msg":"Do you think it's the statement in `server_test.go` that's causing this?","username":"kostas","ts":"2017-09-11T16:25:51.045Z"}
{"msg":"Yes","username":"jyellick","ts":"2017-09-11T16:26:06.049Z"}
{"msg":"I believe if instead of `logging.SetLevel(logging.DEBUG, \"\")` we did `logging.SetLevel(logging.DEBUG, \"orderer/server/main\")`` things would be good","username":"jyellick","ts":"2017-09-11T16:29:03.146Z"}
{"msg":"I believe if instead of `logging.SetLevel(logging.DEBUG, \"\")` we did `logging.SetLevel(logging.DEBUG, \"orderer/server/main\")` things would be good","username":"jyellick","ts":"2017-09-11T16:29:03.146Z"}
{"msg":"I believe if instead of `logging.SetLevel(logging.DEBUG, \"\")` we did `logging.SetLevel(logging.DEBUG, \"orderer/server/main\")` things would be good Edit: Damn, that did not work in my local test","username":"jyellick","ts":"2017-09-11T16:29:03.146Z"}
{"msg":"I'd also point out that many of our logging package names are wrong, this should be `orderer/common/server` not `orderer/server/main` I would think.","username":"jyellick","ts":"2017-09-11T16:29:41.681Z"}
{"msg":"@kostas ^","username":"jyellick","ts":"2017-09-11T16:29:48.313Z"}
{"msg":"@jyellick: That was it, you are right.","username":"kostas","ts":"2017-09-11T16:33:56.174Z"}
{"msg":"`logging.SetLevel(logging.DEBUG, \"orderer/server/main\")` did the trick.","username":"kostas","ts":"2017-09-11T16:34:07.944Z"}
{"msg":"Locally, I found a second issue","username":"jyellick","ts":"2017-09-11T16:34:16.416Z"}
{"msg":"This was pissing me off so much during the weekend.","username":"kostas","ts":"2017-09-11T16:34:17.652Z"}
{"msg":"I always had to scroll down to find the output I was interested in.","username":"kostas","ts":"2017-09-11T16:34:32.339Z"}
{"msg":"What's the second issue?","username":"kostas","ts":"2017-09-11T16:35:05.643Z"}
{"msg":"```\n[yellickj@jmobile server]$ git diff .\ndiff --git a/orderer/common/server/main_test.go b/orderer/common/server/main_test.go\nindex c2fd52a15..7931f3586 100644\n--- a/orderer/common/server/main_test.go\n+++ b/orderer/common/server/main_test.go\n@@ -29,6 +29,7 @@ import (\n )\n \n func TestInitializeLoggingLevel(t *testing.T) {\n+       t.Skip()\n        initializeLoggingLevel(\n                &config.TopLevel{\n                        General: config.General{LogLevel: \"debug\"},\ndiff --git a/orderer/common/server/server_test.go b/orderer/common/server/server_test.go\nindex 000a851ed..26700a809 100644\n--- a/orderer/common/server/server_test.go\n+++ b/orderer/common/server/server_test.go\n@@ -26,7 +26,7 @@ import (\n )\n \n func init() {\n-       logging.SetLevel(logging.DEBUG, \"\")\n+       logging.SetLevel(logging.DEBUG, \"orderer/server/main\")\n }\n \n func TestBroadcastNoPanic(t *testing.T) {\n```","username":"jyellick","ts":"2017-09-11T16:35:23.514Z"}
{"msg":"This was my required fix","username":"jyellick","ts":"2017-09-11T16:35:27.111Z"}
{"msg":"Without skipping the `TestInitializeLoggingLevel` I was still seeing verbose output","username":"jyellick","ts":"2017-09-11T16:35:27.111Z"}
{"msg":"Because the test for initializing the logging additionally sets logging to DEBUG and never switches it back","username":"jyellick","ts":"2017-09-11T16:35:53.889Z"}
{"msg":"Not sure why you are not seeing that in your test?","username":"jyellick","ts":"2017-09-11T16:36:03.763Z"}
{"msg":"Ah, because I switched to running in the meantime: `go test -run TestOrdererBenchmarkSolo`","username":"kostas","ts":"2017-09-11T16:54:14.538Z"}
{"msg":"I'm going to push those changes in a performance-related changeset I have out there.","username":"kostas","ts":"2017-09-11T16:56:38.210Z"}
{"msg":"Thanks for helping me get to the bottom of this.","username":"kostas","ts":"2017-09-11T16:56:45.968Z"}
{"msg":"For anyone who's interested, especially @kostas https://jira.hyperledger.org/browse/FAB-6108","username":"jyellick","ts":"2017-09-11T17:13:03.157Z"}
{"msg":"Thanks for writing this up. The pattern that I'm following is:","username":"kostas","ts":"2017-09-11T17:30:10.102Z"}
{"msg":"Define a `pkgLogID` constant (see: https://github.com/hyperledger/fabric/blob/release/orderer/kafka/consenter.go#L18) and then use the `init` functions on the main+test files to initialize the logger properly. For example:","username":"kostas","ts":"2017-09-11T17:52:26.173Z"}
{"msg":"https://github.com/hyperledger/fabric/blob/release/orderer/kafka/consenter.go#L23","username":"kostas","ts":"2017-09-11T17:52:33.072Z"}
{"msg":"https://github.com/hyperledger/fabric/blob/release/orderer/kafka/consenter_test.go#L159","username":"kostas","ts":"2017-09-11T17:52:50.747Z"}
{"msg":"I'll try to convert the rest of the `orderer` package to this pattern.","username":"kostas","ts":"2017-09-11T17:53:15.202Z"}
{"msg":"It still feels like a hacky solution though, and I wish we, as Fabric in general, had a better way of handling logging.","username":"kostas","ts":"2017-09-11T17:53:51.022Z"}
{"msg":"+1 to this pattern, I'd also like to see this fixed up in `fabric/common` since it gets into the orderer logs","username":"jyellick","ts":"2017-09-11T17:55:03.719Z"}
{"msg":"Quick question for you folks:","username":"kostas","ts":"2017-09-11T18:52:44.379Z"}
{"msg":"The pattern for logger modules had always been: `path-relative-to-fabric-dir/package-name`","username":"kostas","ts":"2017-09-11T18:53:16.457Z"}
{"msg":"So: `orderer/common/server`","username":"kostas","ts":"2017-09-11T18:53:25.600Z"}
{"msg":"That'll give us some nasty stuttering for the ledger implementations:","username":"kostas","ts":"2017-09-11T18:53:42.930Z"}
{"msg":"`orderer/ledger/file/fileledger`","username":"kostas","ts":"2017-09-11T18:53:58.369Z"}
{"msg":"`orderer/ledger/fileledger`","username":"kostas","ts":"2017-09-11T18:53:58.369Z"}
{"msg":"Are we OK with this?","username":"kostas","ts":"2017-09-11T18:54:01.890Z"}
{"msg":"I am not crazy about it, but I would opt for consistency over stuttering","username":"jyellick","ts":"2017-09-11T20:17:06.701Z"}
{"msg":"There are some known problems with running leveldb (and hence our ledger) on a VirtualBox shared drive. The results are seemingly random \"I/O Errors\". (Example \n\nMessage: 500000  Message Size:  10KB  Channels:  10 Orderer(kafka):  5 | Broadcast Clients: 500  Write tps: 393.6 tx/s Elapsed Time: 1270.25s | Deliver clients:   0  Read tps:      0.0 blk/s Elapsed Time: 1270.25s\nPASS\nok  \tgithub.com/hyperledger/fabric/orderer/common/server\t1325.424s\n```","username":"sanchezl","ts":"2017-09-11T20:31:45.510Z"}
{"msg":"There are some known problems with running leveldb (and hence our ledger) on a VirtualBox shared drive. The results are seemingly random \"I/O Errors\". (Example thread where others have encountered this problem, and the \"solution\" was to stop using VirtualBox: https://github.com/Level/levelup/issues/222). So, using a host drive in Vagrant is not going to work. \n\nI can run locally on macOS with Kafka running on Docker. Here are the results from one such run:\n\n```\nMessage: 500000  Message Size:  10KB  Channels:  10 Orderer(kafka):  5 | Broadcast Clients: 500  Write tps: 393.6 tx/s Elapsed Time: 1270.25s | Deliver clients:   0  Read tps:      0.0 blk/s Elapsed Time: 1270.25s\nPASS\nok  \tgithub.com/hyperledger/fabric/orderer/common/server\t1325.424s\n```","username":"sanchezl","ts":"2017-09-11T20:35:49.343Z"}
{"msg":"Awesome, thank you Luis.","username":"kostas","ts":"2017-09-11T20:39:39.857Z"}
{"msg":"https://gerrit.hyperledger.org/r/c/13345/ BTW is the changeset for log package name consistency","username":"kostas","ts":"2017-09-11T20:40:50.827Z"}
{"msg":"I am still blown away by the fact that changing the Gerrit UI breaks linking","username":"jyellick","ts":"2017-09-11T20:42:02.104Z"}
{"msg":"Oh wait, my links don't work for the old UI?","username":"kostas","ts":"2017-09-11T20:42:30.443Z"}
{"msg":"They do not","username":"jyellick","ts":"2017-09-11T20:42:37.327Z"}
{"msg":"Nice.","username":"kostas","ts":"2017-09-11T20:42:39.535Z"}
{"msg":"Sorry about that.","username":"kostas","ts":"2017-09-11T20:42:42.788Z"}
{"msg":"No problem, easy enough to fix the link, just feels like something Gerrit should do for us","username":"jyellick","ts":"2017-09-11T20:42:55.289Z"}
{"msg":"One minor comment on 13345, feel free to fix or not, +2-ed","username":"jyellick","ts":"2017-09-11T20:47:57.398Z"}
{"msg":"@kostas One minor comment on 13345, feel free to fix or not, +2-ed","username":"jyellick","ts":"2017-09-11T20:47:57.398Z"}
{"msg":"Oh no, it's a good catch. Will fix.","username":"kostas","ts":"2017-09-11T20:49:47.731Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-consensus?msg=fpbScFhQKtW6SHcZR","username":"kostas","ts":"2017-09-13T02:35:48.839Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-consensus?msg=fpbScFhQKtW6SHcZR","url":"https://chat.hyperledger.org/channel/fabric-consensus?msg=fpbScFhQKtW6SHcZR","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@guoger: As best as I can tell I should be done with all of the pending reviews, but if I'm missing something, please LMK.","username":"kostas","ts":"2017-09-13T02:36:21.801Z"}
{"msg":"@guoger: As best as I can tell I should be done with all of the pending reviews, but if I'm missing something, please LMK. (Sorry for that delay.)","username":"kostas","ts":"2017-09-13T02:36:21.801Z"}
{"msg":"Hi I just landed in LA this afternoon. I will start addressing them today","username":"guoger","ts":"2017-09-13T02:37:33.592Z"}
{"msg":"(No rush.)","username":"kostas","ts":"2017-09-13T02:38:18.710Z"}
{"msg":"Are we good with moving this to 1.2?https://jira.hyperledger.org/browse/FAB-5542","username":"kostas","ts":"2017-09-13T02:44:50.585Z"}
{"msg":"Are we good with moving this to 1.2? https://jira.hyperledger.org/browse/FAB-5542","username":"kostas","ts":"2017-09-13T02:44:50.585Z"}
{"msg":"LGTM","username":"guoger","ts":"2017-09-13T02:46:52.404Z"}
{"msg":"done","username":"guoger","ts":"2017-09-13T02:47:04.166Z"}
{"msg":"@guoger I notice that you're using the same FAB-XXXX for related CRs (which is why you'll see I accidentlaly closed, and then re-opened it).\n\nThe approach I've been taking is to create a sub-task for each CR, and linking to that JIRA item in the CR.  This way it's more obvious how much work is still remaining for an issue.  Then, once all of the sub-tasks close, I close the parent issue.  Any opinions on this @kostas ?\n\n(I also realize that in this case specifically you were operating on a sub-task already, so this would have been hard to do).","username":"jyellick","ts":"2017-09-13T05:55:39.183Z"}
{"msg":"I agree that every changeset should map to a different JIRA. Got an email notification that 5284 was merged 10d ago and almost had a heart attack. ","username":"kostas","ts":"2017-09-13T06:03:35.600Z"}
{"msg":"ah, ok, I'll try to use this approach in the future. For this specific sub-task, I'll make sure to update jira myself accordingly.","username":"guoger","ts":"2017-09-13T06:04:30.664Z"}
{"msg":"@guoger I wouldn't at all be opposed to promoting this sub-task to a proper issue, and simply linking to 5284","username":"jyellick","ts":"2017-09-13T06:05:35.889Z"}
{"msg":"Perhaps a bit late for this one, but in the future, if an sub-task cannot be completed in one CR, then I think promoting it to its own improvement, and placing a block link against the original parent is the way to go.","username":"jyellick","ts":"2017-09-13T06:06:26.200Z"}
{"msg":"Perhaps a bit late for this one, but in the future, if an sub-task cannot be completed in one CR, then I think promoting it to its own improvement, and placing a \"blocks\" link against the original parent is the way to go.","username":"jyellick","ts":"2017-09-13T06:06:26.200Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=rcaXmnw6CrD5ZhNHS) @jyellick Sounds good, will do in the future.","username":"guoger","ts":"2017-09-13T06:07:11.440Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=rcaXmnw6CrD5ZhNHS","url":"https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=rcaXmnw6CrD5ZhNHS","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=RxMKcng7wtjxQhY5j) @sanchezl I vaguely remember I ran into the same issue without using virtualbox. (I ran tests on mac directly when I worked on benchmark tests) but it was definitely flaky for me. Will let you know if I ever manage to reproduce the issue. But good to know the problem with leveldb, thanks for the info!","username":"guoger","ts":"2017-09-13T08:45:33.945Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=RxMKcng7wtjxQhY5j","url":"https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=RxMKcng7wtjxQhY5j","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@kostas just fyi for https://gerrit.hyperledger.org/r/#/c/12989/, there were more arguments supplied than required for several log format. Just updated the patch, waiting for CI to be green.","username":"guoger","ts":"2017-09-13T21:03:37.394Z"}
{"msg":"Has joined the channel.","username":"lehors","ts":"2017-09-14T07:11:13.604Z","type":"uj"}
{"msg":"@kostas I post some comments in https://gerrit.hyperledger.org/r/#/c/12991/ to address your comment.","username":"guoger","ts":"2017-09-15T22:54:26.379Z"}
{"msg":"anyone knows why almost every proto.pb.go files change when I ONLY changed `kafka.proto` and run `make protos`?","username":"guoger","ts":"2017-09-19T00:36:49.478Z"}
{"msg":"anyone knows why almost every *.pb.go file changes when I ONLY changed `kafka.proto` and run `make protos`?","username":"guoger","ts":"2017-09-19T00:36:49.478Z"}
{"msg":"Odds are someone checked in protos generated at the wrong version","username":"jyellick","ts":"2017-09-19T01:27:35.479Z"}
{"msg":"The first proto file alphabetically in a directory will get modified regardless with a new comment","username":"jyellick","ts":"2017-09-19T01:27:53.593Z"}
{"msg":"But protos changing in other directories means someone mis-compiled the protos","username":"jyellick","ts":"2017-09-19T01:28:05.474Z"}
{"msg":"Actually","username":"jyellick","ts":"2017-09-19T01:31:02.393Z"}
{"msg":"Looks like this is a go 1.9 issue","username":"jyellick","ts":"2017-09-19T01:31:10.890Z"}
{"msg":"@guoger After executing `make clean` and `make protos` I see no diff in the protos against master","username":"jyellick","ts":"2017-09-19T01:40:31.676Z"}
{"msg":"maybe it's just my local dirty env then...","username":"guoger","ts":"2017-09-19T02:10:32.575Z"}
{"msg":"@jyellick  I'm adding `Resubmission` capability and have a question: it is turned on simply by defining it in yaml, regardless of the bool value. In another word, if I want a v1.1 orderer running in compatibility mode, I should NOT define it in the yaml.","username":"guoger","ts":"2017-09-19T02:14:04.566Z"}
{"msg":"@guoger Correct, if nothing is set, you should get v1.0 compat  mode.  If the capability is turned on, only then will you get the v1.1 behavior.","username":"jyellick","ts":"2017-09-19T02:31:41.136Z"}
{"msg":"I see. IMHO, this appears to be not very intuitive tho. At first glance, I would expect `Resubmission: false` actually disables the functionality, which however is not the case.","username":"guoger","ts":"2017-09-19T02:33:32.559Z"}
{"msg":"Hm? The CR referenced is: https://gerrit.hyperledger.org/r/#/c/13263/ ?","username":"jyellick","ts":"2017-09-19T02:34:50.770Z"}
{"msg":"I would suggest you piggy-back onto the Orderer_v1.1_BugFixes capability","username":"jyellick","ts":"2017-09-19T02:35:17.241Z"}
{"msg":"Because I believe the resubmission should be default behavior","username":"jyellick","ts":"2017-09-19T02:35:28.020Z"}
{"msg":"In general we should avoid propagating capability strings if at all possible.  If there is behavior which we would have not made configurable for v1.0, then it should fall under the v1.1 capability (and not something explicit)","username":"jyellick","ts":"2017-09-19T02:36:45.249Z"}
{"msg":"hmm.. I see, but this semantic still appears to be obscure to me. Let's say we add a capability X which is NOT to address a defect, but a feature which can be switched on/off. If it is to be added into v1.x_capability without being explicitly defined, then it couldn't be combined with another feature in v1.y version?","username":"guoger","ts":"2017-09-19T02:46:13.865Z"}
{"msg":"hmm.. I see, but this semantic still appears to be obscure to me. Let's say we add a capability X which is NOT to address a defect, but a feature which can be switched on/off. If it is to be added into v1.x_capability without being explicitly defined, then it couldn't be decoupled with another feature in v1.x?","username":"guoger","ts":"2017-09-19T02:46:13.865Z"}
{"msg":"Also, per design doc of compatibility, explicit capabilities also appear to be idiomatic pattern?","username":"guoger","ts":"2017-09-19T02:48:22.669Z"}
{"msg":"After all, when thinking of the work `Capability`, one would instinctively associate it with \"being able to do something, e.g. resubmit a tx, use a new msp, etc\", instead of \"fixing the issues in previous version\"","username":"guoger","ts":"2017-09-19T02:50:55.986Z"}
{"msg":"After all, when thinking of the work `Capability`, one would probably associate it with \"being able to do something, e.g. resubmit a tx, use a new msp, etc\", instead of \"fixing the issues in previous version\"","username":"guoger","ts":"2017-09-19T02:50:55.986Z"}
{"msg":"Ah, so, the design doc could use some work.  In the interest of maintainability, we're trying to stick to 'versions as capability' for the time being.","username":"jyellick","ts":"2017-09-19T02:51:37.658Z"}
{"msg":"Until we have an explicit requirement to make this otherwise","username":"jyellick","ts":"2017-09-19T02:51:47.483Z"}
{"msg":"The real danger being that we end up with 10 peer capabilities, 10 orderer capabiltiies, and 100 test matrix combinations to try to make sure that everything works as expected.","username":"jyellick","ts":"2017-09-19T02:52:14.721Z"}
{"msg":"It can certainly be argued that we do not test all permutations of our config options for example, but in general, unless we have a compelling reason to do otherwise, minimizing the size of this matrix is desirable","username":"jyellick","ts":"2017-09-19T02:52:46.224Z"}
{"msg":"OK. This leads to another question, how do we plan to do compatibility test?","username":"guoger","ts":"2017-09-19T02:54:19.834Z"}
{"msg":"@jeffgarratt Is working on some bdd upgrade paths, and of course the test team will be performing assorted scenarios","username":"jyellick","ts":"2017-09-19T02:56:17.589Z"}
{"msg":"Has joined the channel.","username":"jeffgarratt","ts":"2017-09-19T02:56:17.669Z","type":"uj"}
{"msg":"The limit of what we can do in UT with respect to upgrade is pretty limited obviously","username":"jyellick","ts":"2017-09-19T02:56:57.656Z"}
{"msg":"got it, thx!","username":"guoger","ts":"2017-09-19T03:02:49.337Z"}
{"msg":"To address your comment in https://gerrit.hyperledger.org/r/#/c/12991/:\nIf you are talking about the code, sorry I'm not following.. could you elaborate?\nIf you are talking about the comment, I agree they probably need some rework, but I want to make sure we are on the same page first. see my reply inline:\n> 1. In the compatibility case, the message you just processed is not identified by `originalOffset`.\nIn compatibility mode, `lastOriginalOffsetProcessed` is always zero, as should be `originalOffset` passed into the function\n> 2. In the case of a normal message that gets committed on first pass, this value is not associated with that message in any way either. (See line 600.)\nFor messages (normal or config) get committed on the first pass, this value should be the same as current `lastOriginalOffsetProcessed`.\nI try to make `commit*Msg` functions agnostic about the new offset, so it blindly update `lastOriginalOffsetProcessed` with the `originalOffset` value passed in. And it's up to the caller to decide the correct value to pass in. To echo your previous comment:\n> As a caller of this function, I can't immediately tell what to set this parameter to. Is it the original offset of the message that I'm trying to commit? It is it the LastOriginalOffset of the chain when calling this function?\nI think you're right that arg name could be chosen more wisely, but I don't understand the 'chain' in `newChainOriginalOffset`? maybe `newOffset` *plus* a comment?","username":"guoger","ts":"2017-09-19T20:48:56.216Z"}
{"msg":"@kostas  To address your comment in https://gerrit.hyperledger.org/r/#/c/12991/:\nIf you are talking about the code, sorry I'm not following.. could you elaborate?\nIf you are talking about the comment, I agree they probably need some rework, but I want to make sure we are on the same page first. see my reply inline:\n> 1. In the compatibility case, the message you just processed is not identified by `originalOffset`.\nIn compatibility mode, `lastOriginalOffsetProcessed` is always zero, as should be `originalOffset` passed into the function\n> 2. In the case of a normal message that gets committed on first pass, this value is not associated with that message in any way either. (See line 600.)\nFor messages (normal or config) get committed on the first pass, this value should be the same as current `lastOriginalOffsetProcessed`.\nI try to make `commit*Msg` functions agnostic about the new offset, so it blindly update `lastOriginalOffsetProcessed` with the `originalOffset` value passed in. And it's up to the caller to decide the correct value to pass in. To echo your previous comment:\n> As a caller of this function, I can't immediately tell what to set this parameter to. Is it the original offset of the message that I'm trying to commit? It is it the LastOriginalOffset of the chain when calling this function?\nI think you're right that arg name could be chosen more wisely, but I don't understand the 'chain' in `newChainOriginalOffset`? maybe `newOffset` *plus* a comment?","username":"guoger","ts":"2017-09-19T20:48:56.216Z"}
{"msg":"@guoger: Which comment of all?","username":"kostas","ts":"2017-09-19T21:26:35.867Z"}
{"msg":"> I do not think this is accurate.\n1. In the compatibility case, the message you just processed is not identified by `originalOffset`.\n2. In the case of a normal message that gets committed on first pass, this value is not associated with that message in any way either. (See line 600.)","username":"guoger","ts":"2017-09-19T21:27:04.295Z"}
{"msg":"> I do not think this is accurate.\n> 1. In the compatibility case, the message you just processed is not identified by `originalOffset`.\n> 2. In the case of a normal message that gets committed on first pass, this value is not associated with that message in any way either. (See line 600.)","username":"guoger","ts":"2017-09-19T21:27:04.295Z"}
{"msg":"Ah right.","username":"kostas","ts":"2017-09-19T21:27:16.667Z"}
{"msg":"https://gerrit.hyperledger.org/r/#/c/12991/8/orderer/consensus/kafka/chain.go@448","username":"guoger","ts":"2017-09-19T21:27:31.924Z"}
{"msg":"Just realized you could send a link to specific comment..","username":"guoger","ts":"2017-09-19T21:27:41.632Z"}
{"msg":"> In compatibility mode, `lastOriginalOffsetProcessed` is always zero, as should be `originalOffset` passed into the function","username":"kostas","ts":"2017-09-19T21:27:52.796Z"}
{"msg":"I do not dispute that. (And I do not doubt the validity of the code, I've inspected it.)","username":"kostas","ts":"2017-09-19T21:28:11.180Z"}
{"msg":"What I claim is wrong is this:","username":"kostas","ts":"2017-09-19T21:28:21.894Z"}
{"msg":"> The message we have just processed (originalOffset) is encapsulated","username":"kostas","ts":"2017-09-19T21:28:32.166Z"}
{"msg":"This implies to me that the just processed message is associated with `originalOffset` in a way.","username":"kostas","ts":"2017-09-19T21:28:54.870Z"}
{"msg":"It is not, for either of those two cases that I mentioned.","username":"kostas","ts":"2017-09-19T21:29:13.764Z"}
{"msg":"I see, I've reworked the comment a bit: https://pastebin.com/rqpGNb4X","username":"guoger","ts":"2017-09-19T21:29:28.235Z"}
{"msg":"I will repeat that I get and agree with the code. I do not agree (or misinterpret?) the comment.","username":"kostas","ts":"2017-09-19T21:29:32.912Z"}
{"msg":"> I think you're right that arg name could be chosen more wisely, but I don't understand the 'chain' in `newChainOriginalOffset`? maybe `newOffset`*plus* a comment?","username":"kostas","ts":"2017-09-19T21:30:08.195Z"}
{"msg":"Variable names are highly subjective and I'll leave the final choice to you. To answer your question, I add `chain` in that name, because what you're doing in this function is to essentially set the  chain's `lastOriginalOffsetProcessed` field. (Perhaps `newChainOriginalOffsetProcessed` would be more expressive, but I'm afraid the var name is becoming ridiculously long.)","username":"kostas","ts":"2017-09-19T21:32:19.250Z"}
{"msg":"As I wrote in my original comment, a comment will work just as well: https://gerrit.hyperledger.org/r/#/c/12991/8/orderer/consensus/kafka/chain.go@431","username":"kostas","ts":"2017-09-19T21:33:06.769Z"}
{"msg":"(Reading your Pastebin link now.)","username":"kostas","ts":"2017-09-19T21:33:29.293Z"}
{"msg":"Lines 2-7 on that Pastebin look great BTW.","username":"kostas","ts":"2017-09-19T21:34:38.171Z"}
{"msg":"I'm trying to get this message crossed:\n> I try to make `commit*Msg` functions agnostic about the new offset, so it blindly update `lastOriginalOffsetProcessed` with the `originalOffset` value passed in. And it's up to the caller to decide the correct value to pass in","username":"guoger","ts":"2017-09-19T21:34:59.262Z"}
{"msg":"I'm trying to get this message crossed:\n> I try to make `commit*Msg` functions agnostic about the new offset, so it blindly update `lastOriginalOffsetProcessed` with the `newOffset` value passed in. And it's up to the caller to decide the correct value to pass in","username":"guoger","ts":"2017-09-19T21:34:59.262Z"}
{"msg":"I think you're absolutely right to do that.","username":"kostas","ts":"2017-09-19T21:35:39.090Z"}
{"msg":"(And this is what I get as a reader when reading your updated comments.)","username":"kostas","ts":"2017-09-19T21:35:56.079Z"}
{"msg":"(And this is what I get as a reader when going over your updated comments.)","username":"kostas","ts":"2017-09-19T21:35:56.079Z"}
{"msg":"I'm about to update the CR to address all other comments as well, unless you have some immediate feedbacks","username":"guoger","ts":"2017-09-19T21:37:50.355Z"}
{"msg":"I'm giving it a quick scan and everything LGTM so far.","username":"kostas","ts":"2017-09-19T21:38:39.839Z"}
{"msg":"I'm giving it a quick look and everything LGTM so far.","username":"kostas","ts":"2017-09-19T21:38:39.839Z"}
{"msg":"To address your comment regarding UT. Resubmission logic is mostly covered by `TestResubmission` and the coverage is 87.7% for now.","username":"guoger","ts":"2017-09-19T21:51:05.363Z"}
{"msg":"except for some error cases","username":"guoger","ts":"2017-09-19T21:51:10.689Z"}
{"msg":"however, this is definitely not enough and I'm trying to see how to add integration tests","username":"guoger","ts":"2017-09-19T21:51:33.149Z"}
{"msg":"cc @kostas ","username":"guoger","ts":"2017-09-19T21:51:39.990Z"}
{"msg":"by the way, I got this question that if orderer could be switched from `solo` to `kafka`. I told them this is explicitly not-supported. However, I'm curious if we plan to support switching consensus algorithm in the future. Not sure if there's a real use case though. There's a Chinese company (Tencent, which is actually a tech giant here) that's doing this in their blockchain platform, to improve throughput. I don't know much details tho, but I assume doing a high-throughput consensus for most of time and occasionally switch to log-throughput one for exceptions.","username":"guoger","ts":"2017-09-19T21:56:14.748Z"}
{"msg":"This is indeed explicitly not supported. We decide on the roadmap collaboratively but I am highly skeptical of the benefits of this feature, relative to the engineering effort that will need to be put in place to support it. There are lower (and far more useful) fruits to grab first.","username":"kostas","ts":"2017-09-19T22:07:19.007Z"}
{"msg":"Has joined the channel.","username":"Colonel_HLE","ts":"2017-09-20T12:19:48.184Z","type":"uj"}
{"msg":"@jyellick replied https://gerrit.hyperledger.org/r/#/c/12991/","username":"guoger","ts":"2017-09-21T05:24:42.945Z"}
{"msg":"@guoger Back at you","username":"jyellick","ts":"2017-09-21T05:33:55.812Z"}
{"msg":"@jyellick updated the patch. Regarding `Ordered()` api, I'm not sure what you mean by\n> I wonder if this API should not simply be redesigned\nReverting it to `Ordered(msg *cb.Envelope) ([][]*cb.Envelope, bool)`?","username":"guoger","ts":"2017-09-21T05:51:34.902Z"}
{"msg":"Ah, no, I mean the `blockcutter` API","username":"jyellick","ts":"2017-09-21T05:58:24.547Z"}
{"msg":"Blockcutter used to do a lot more than it does now, so it tried to hide what was happening under the covers so that the caller didn't have to care.","username":"jyellick","ts":"2017-09-21T05:58:50.549Z"}
{"msg":"Really, it takes `*cb.Envelope`s which it should not","username":"jyellick","ts":"2017-09-21T05:59:24.993Z"}
{"msg":"It should take byte slices to prevent remarshaling envelopes","username":"jyellick","ts":"2017-09-21T05:59:37.565Z"}
{"msg":"As should the writeblock API","username":"jyellick","ts":"2017-09-21T05:59:45.004Z"}
{"msg":"But beyond that, I'm wondering if instead it shouldn't simply be turned into something much different.\n\n```\ntype BatchBuilder interface {\n    // CanAdd returns whether a given message will fit into the current batch\n    CanAdd(msg []byte) bool\n\n    // Add adds the message to the batch, and returns whether the batch is full or not\n    Add(msg []byte) bool\n\n    // Batch returns the batch of transactions\n    Batch() [][]byte\n}\n```\n\nOr whatever primitives it makes sense to build the resubmission logic from.  So, you might end up with logic that looks like:\n\n```\n    if ! batchBulider.CanAdd(msg) {\n        // Commit the current batchBuilder.Batch() and allocate a new one\n    }\n\n   if batchBuilder.Add(msg) {\n       // Commit batchBuilder.Batch() and allocate a new one\n    }\n```\n\nMaybe this isn't the exact API that makes sense (or great names etc.)","username":"jyellick","ts":"2017-09-21T06:08:29.087Z"}
{"msg":"But essentially, the `blockcutter` API has always been pretty cludgy and due for a rewrite, so if that would make life easier on the resubmission, I'd vote we do it.","username":"jyellick","ts":"2017-09-21T06:09:42.281Z"}
{"msg":"I agree the api design could use some rework, but I'm not sure how it makes resubmission logic simpler? resubmission actually happens before we even consider committing the message, however `blockCutter` determines how we commit it","username":"guoger","ts":"2017-09-21T06:16:00.931Z"}
{"msg":"@guoger My thought was that the commit logic contains a fair bit of flow control around how to set `lastOriginalOffsetPersisted` based on the output of `blockcutter`, which I thought might be simplified by improving that API","username":"jyellick","ts":"2017-09-22T05:23:21.002Z"}
{"msg":"But, if you'd rather tackle the API later, that's fine, just thought it might simplify the CR","username":"jyellick","ts":"2017-09-22T05:23:46.496Z"}
{"msg":"But, if you'd rather tackle the API later (or leave it be), that's fine, just thought it might simplify the CR","username":"jyellick","ts":"2017-09-22T05:23:46.496Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=gnwXbReoDnQQ9kC8Y) @jyellick ah, I see your point now. Agreed, but I guess I'll tackle that after this CR, since refactoring blockcutter api probably deserves more thoughts. Thanks for the feedback!","username":"guoger","ts":"2017-09-22T14:41:47.303Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=gnwXbReoDnQQ9kC8Y","url":"https://chat.hyperledger.org/channel/fabric-consensus-dev?msg=gnwXbReoDnQQ9kC8Y","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@kostas is there a jira already to track the work of blocking `Order`/`Configure` until consenter catches up?","username":"guoger","ts":"2017-09-25T03:52:35.890Z"}
{"msg":"@kostas is there a jira already to track the work of blocking `Order`/ `Configure` until consenter catches up?","username":"guoger","ts":"2017-09-25T03:52:35.890Z"}
{"msg":"@guoger If I’m not mistaken, there isn’t. Feel free to go for it.","username":"kostas","ts":"2017-09-25T10:55:57.145Z"}
{"msg":"@kostas I just realized that I filed one a while ago :P https://jira.hyperledger.org/browse/FAB-5969","username":"guoger","ts":"2017-09-25T15:42:30.624Z"}
{"msg":"Ah excellent.","username":"kostas","ts":"2017-09-25T15:42:46.278Z"}
{"msg":"the question is, should `order`/ `configure` return error in this case?","username":"guoger","ts":"2017-09-25T15:44:26.653Z"}
{"msg":"I guess we should simply block at broadcast (so ingress msg will queue in grpc)","username":"guoger","ts":"2017-09-25T15:46:46.090Z"}
{"msg":"Yes, that was my initial thought as well.","username":"kostas","ts":"2017-09-25T15:47:31.168Z"}
{"msg":"@tsariounov: Following up on our conversation yesterday, related to developing a BFT orderer, these pointers will get you started:","username":"kostas","ts":"2017-09-27T10:29:43.185Z"}
{"msg":"Has joined the channel.","username":"tsariounov","ts":"2017-09-27T10:29:43.241Z","type":"uj"}
{"msg":"A consensus plugin needs to implement the `Consenter` and `Chain` interfaces defined here:\nhttps://github.com/hyperledger/fabric/blob/master/orderer/consensus/consensus.go","username":"kostas","ts":"2017-09-27T10:29:56.630Z"}
{"msg":"A consensus plugin needs to implement the `Consenter` and `Chain` interfaces defined here: https://github.com/hyperledger/fabric/blob/master/orderer/consensus/consensus.go","username":"kostas","ts":"2017-09-27T10:29:56.630Z"}
{"msg":"There are two consensus plugins currently:\nhttps://github.com/hyperledger/fabric/tree/master/orderer/consensus/solo\nhttps://github.com/hyperledger/fabric/tree/master/orderer/consensus/kafka","username":"kostas","ts":"2017-09-27T10:30:09.879Z"}
{"msg":"The entire orderer code can be found here:\nhttps://github.com/hyperledger/fabric/tree/master/orderer","username":"kostas","ts":"2017-09-27T10:30:17.326Z"}
{"msg":"The entire orderer code can be found here: https://github.com/hyperledger/fabric/tree/master/orderer","username":"kostas","ts":"2017-09-27T10:30:17.326Z"}
{"msg":"PBFT paper:\nhttps://scholar.google.com/scholar?q=practical+byzantine+fault+tolerance+and+proactive+recovery","username":"kostas","ts":"2017-09-27T10:30:27.355Z"}
{"msg":"PBFT paper: https://scholar.google.com/scholar?q=practical+byzantine+fault+tolerance+and+proactive+recovery","username":"kostas","ts":"2017-09-27T10:30:27.355Z"}
{"msg":"Delta between SBFT and PBFT: https://jira.hyperledger.org/browse/FAB-378","username":"kostas","ts":"2017-09-27T10:30:38.961Z"}
{"msg":"Has joined the channel.","username":"binhn","ts":"2017-09-27T14:28:22.848Z","type":"uj"}
{"msg":"Awesome, thanks @kostas ","username":"tsariounov","ts":"2017-09-27T15:25:57.456Z"}
{"msg":"thank @kostas for sharing this in public channel. It would nice if more and more offline discussion can be concluded and documented for posterity","username":"guoger","ts":"2017-09-28T04:47:20.769Z"}
{"msg":"Has joined the channel.","username":"rjones","ts":"2017-09-28T18:28:41.979Z","type":"uj"}
{"msg":"Room name changed to: <em>fabric-orderer-dev</em> by <em>rjones</em>","username":"rjones","ts":"2017-09-28T18:28:57.636Z","type":"r"}
{"msg":"Development discussions only.  Please take user questions to #fabric-orderer","username":"rjones","ts":"2017-09-28T18:29:08.357Z","type":"room_changed_topic"}
{"msg":"Marginally useful but I'll take it: https://github.com/rakyll/gotest","username":"kostas","ts":"2017-09-28T19:52:11.079Z"}
{"msg":"Has joined the channel.","username":"Ashish","ts":"2017-09-29T05:14:55.492Z","type":"uj"}
{"msg":"https://gerrit.hyperledger.org/r/#/c/13781/ adds a UT for solo consenter, pls take a look, thx!","username":"guoger","ts":"2017-09-29T17:51:12.534Z"}
{"msg":"There is apparently a CI failure here: https://jenkins.hyperledger.org/job/fabric-verify-z/13105/console\n\n```\n11:55:55 unit-tests_1  | 2017-10-01 11:55:55.394 UTC [orderer/kafka] Halt -> CRIT 001 [channel: 0x80a393a0}.channel] Halting of chain requested\n11:55:55 unit-tests_1  | 2017-10-01 11:55:55.395 UTC [orderer/kafka] processMessagesToBlocks -> CRIT 002 [channel: 0x80a393a0}.channel] Unable to unmarshal consumed message = proto: can't skip unknown wire type 7 for orderer.KafkaMessage\n11:55:55 unit-tests_1  | 2017-10-01 11:55:55.405 UTC [orderer/kafka] processMessagesToBlocks -> ERRO 003 [channel: 0x80a393a0}.channel] Error during consumption: <nil>\n11:55:55 unit-tests_1  | panic: send on closed channel\n11:55:55 unit-tests_1  | \n11:55:55 unit-tests_1  | goroutine 98 [running]:\n11:55:55 unit-tests_1  | panic(0x80673d40, 0xc42036a8e0)\n11:55:55 unit-tests_1  |     /opt/go/src/runtime/panic.go:500 +0x408\n11:55:55 unit-tests_1  | github.com/hyperledger/fabric/vendor/github.com/Shopify/sarama.(*syncProducer).SendMessage(0xc4202ca9e0, 0xc420372400, 0x5, 0x0, 0x0, 0x0)\n11:55:55 unit-tests_1  |     /opt/gopath/src/github.com/hyperledger/fabric/vendor/github.com/Shopify/sarama/sync_producer.go:100 +0x158\n11:55:55 unit-tests_1  | github.com/hyperledger/fabric/orderer/kafka.sendConnectMessage.func1(0x0, 0x0)\n11:55:55 unit-tests_1  |     github.com/hyperledger/fabric/orderer/kafka/_test/_obj_test/chain.go:516 +0x60\n11:55:55 unit-tests_1  | github.com/hyperledger/fabric/orderer/kafka.(*retryProcess).try(0xc420490ec0, 0x2faf080, 0x5f5e100, 0x0, 0x0)\n11:55:55 unit-tests_1  |     github.com/hyperledger/fabric/orderer/kafka/_test/_obj_test/retry.go:56 +0x23a\n11:55:55 unit-tests_1  | github.com/hyperledger/fabric/orderer/kafka.(*retryProcess).retry(0xc420490ec0, 0x0, 0x0)\n11:55:55 unit-tests_1  |     github.com/hyperledger/fabric/orderer/kafka/_test/_obj_test/retry.go:35 +0x5a\n11:55:55 unit-tests_1  | github.com/hyperledger/fabric/orderer/kafka.sendConnectMessage(0x2faf080, 0x5f5e100, 0x3938700, 0x7270e00, 0x2625a00, 0x2625a00, 0x2625a00, 0x2, 0x2625a00, 0x2, ...)\n11:55:55 unit-tests_1  |     github.com/hyperledger/fabric/orderer/kafka/_test/_obj_test/chain.go:521 +0x400\n11:55:55 unit-tests_1  | created by github.com/hyperledger/fabric/orderer/kafka.(*chainImpl).processMessagesToBlocks\n11:55:55 unit-tests_1  |     github.com/hyperledger/fabric/orderer/kafka/_test/_obj_test/chain.go:240 +0x7f4\n11:55:55 unit-tests_1  | FAIL    github.com/hyperledger/fabric/orderer/kafka    0.054s\n11:55:55 unit-tests_1  | error: exit status 1\n11:55:55 unit-tests_1  | panic: EOF\n11:55:55 unit-tests_1  |\n```\n\nIf anyone has time to take a look","username":"jyellick","ts":"2017-10-02T01:18:51.086Z"}
{"msg":"Has left the channel.","username":"rjones","ts":"2017-10-02T04:27:14.597Z","type":"ul"}
{"msg":"Has joined the channel.","username":"cca88","ts":"2017-10-02T06:39:25.679Z","type":"uj"}
{"msg":"Has joined the channel.","username":"yacovm","ts":"2017-10-02T07:07:49.085Z","type":"uj"}
{"msg":"^^ I've created a JIRA for this, thanks.","username":"kostas","ts":"2017-10-02T20:44:42.470Z"}
{"msg":"Going back to the discussion on https://jira.hyperledger.org/browse/FAB-6080","username":"kostas","ts":"2017-10-02T20:45:18.500Z"}
{"msg":"Going back to the discussion on: https://jira.hyperledger.org/browse/FAB-6080","username":"kostas","ts":"2017-10-02T20:45:18.500Z"}
{"msg":"Here's what I'm thinking.","username":"kostas","ts":"2017-10-02T20:46:10.631Z"}
{"msg":"If we assume that 1.0.0 binaries are active there, we have a situation where they parse channel creation requests where the `mod_policy` for `/Channel` is not set.","username":"kostas","ts":"2017-10-02T20:46:57.834Z"}
{"msg":"Any binary starting from 1.0.1 rejects these requests, as you've noted.","username":"kostas","ts":"2017-10-02T20:47:18.053Z"}
{"msg":"@jyellick: I guess the punchline is: what do you gain by gating this behind a capability flag?","username":"kostas","ts":"2017-10-02T20:48:38.095Z"}
{"msg":"@jyellick: I guess my question would be: what do we gain by gating this behind a capability flag?","username":"kostas","ts":"2017-10-02T20:48:38.095Z"}
{"msg":"It is not really the avoidance of forks, since we can have these in mixed networks today already (with 1.0.0 nodes coexisting with 1.0.1 or 1.0.2 coexisting).","username":"kostas","ts":"2017-10-02T20:51:59.373Z"}
{"msg":"I guess this is how I interpret the approach in FAB-6080:","username":"kostas","ts":"2017-10-02T21:03:17.904Z"}
{"msg":"Now that we're getting capabilities and we're putting out a guide on how to upgrade the network, etc. let's gate behind the v1.1 key all the features that would break the network otherwise.","username":"kostas","ts":"2017-10-02T21:04:29.529Z"}
{"msg":"(Just a sec.)","username":"kostas","ts":"2017-10-02T21:04:54.170Z"}
{"msg":"(One more statement.)","username":"kostas","ts":"2017-10-02T21:04:58.354Z"}
{"msg":"For _this particular feature_, we are actually pretending that the delta between 1.0.0 nodes and 1.0.1 does not exist.","username":"kostas","ts":"2017-10-02T21:05:30.784Z"}
{"msg":"Otherwise the cynic approach would be: you guys can have networks that introduce forks already.","username":"kostas","ts":"2017-10-02T21:05:55.756Z"}
{"msg":"Otherwise the cynical approach to this would be: you guys can have networks that introduce forks already.","username":"kostas","ts":"2017-10-02T21:05:55.756Z"}
{"msg":"These are more or less my thoughts on FAB-6080, and why it gave me pause when we discussed this originally.","username":"kostas","ts":"2017-10-02T21:06:34.622Z"}
{"msg":"So: I don't disagree with the approach. But do I have the context right?","username":"kostas","ts":"2017-10-02T21:06:47.568Z"}
{"msg":"> For _this particular feature_, we are actually pretending that the delta between 1.0.0 nodes and 1.0.1 does not exist.\n\nEssentially yes.  It could be argued that we _should_ go back and modify v1.0.3 to use the old behavior, that breaking it in v1.0.1 was a mistake, but I think this would cause us more problems than it would solve.","username":"jyellick","ts":"2017-10-02T21:10:07.158Z"}
{"msg":"Perfect, same page then.","username":"kostas","ts":"2017-10-02T21:10:50.559Z"}
{"msg":"I would also note that for 6080, the problem is slightly worse than the v1.0.0 to v1.0.1.  In the latter case, so long as the v1.0.1 version of configtxgen is used, or the v1.0.1 orderer is targeted, there is no fork.  In the case of 6080, all creation transactions, regardless of configtxgen version and regardless of version at point of ingress, results in a fork.","username":"jyellick","ts":"2017-10-02T21:15:31.151Z"}
{"msg":"Why?","username":"kostas","ts":"2017-10-02T21:16:38.592Z"}
{"msg":"Can you be more specific?","username":"jyellick","ts":"2017-10-02T21:16:59.549Z"}
{"msg":"Yes. Why is there a difference between the 1.0.0-1.0.1 case the FAB-6080 case?","username":"kostas","ts":"2017-10-02T21:17:24.166Z"}
{"msg":"Yes. Why is there a difference between the 1.0.0-1.0.1 case and the FAB-6080 case?","username":"kostas","ts":"2017-10-02T21:17:24.166Z"}
{"msg":"Assume that you target the 1.1 orderer in the FAB-6080 case, to keep things consistent with your 1.0.0-1.0.1 case example.","username":"kostas","ts":"2017-10-02T21:18:42.694Z"}
{"msg":"You have a fork in that case, but do not if you were to target the 1.0.1 orderer in a mixed 1.0.0-1.0.1 network. And now my original question hopefully makes more sense: Why?","username":"kostas","ts":"2017-10-02T21:19:40.729Z"}
{"msg":"For the existing bug\n\nbadconfigtx -> OSN1.0.1 Rejects _Okay_\nbadconfigtx -> OSN1.0.0 Accepts -> Kafka -> OSN1.0.1 Rejects *Fork*\ngoodconfigtx -> OSN1.0.1 Accepts -> Kafka -> OSN1.0.0 Accepts _Okay_\ngoodconfigtx -> OSN1.0.0 Accepts -> Kafka -> OSN1.0.1 Accepts _Okay_\n\nFor the 6080 bug\n\nconfigtx -> OSN1.1.0 Accepts -> Kafka -> OSN1.0.1 Rejects *Fork*\nconfigtx -> OSN1.0.0 Accepts -> Kafka -> OSN1.1.0 Rejects *Fork*\n\nThe key here is that the each OSN version generates the genesis config different.  And, if an OSN's computation of the genesis config does not match what it sees on the channel, it invalidates and rejects it (assuming that something about the ordering system channel changed and caused the invalidation)","username":"jyellick","ts":"2017-10-02T21:23:29.397Z"}
{"msg":"For the existing bug\n\nbadconfigtx -> OSN1.0.1 Rejects _Okay_\nbadconfigtx -> OSN1.0.0 Accepts -> Kafka -> OSN1.0.1 Rejects *Fork*\ngoodconfigtx -> OSN1.0.1 Accepts -> Kafka -> OSN1.0.0 Accepts _Okay_\ngoodconfigtx -> OSN1.0.0 Accepts -> Kafka -> OSN1.0.1 Accepts _Okay_\n\nFor the 6080 bug\n\nconfigtx -> OSN1.1.0 Accepts -> Kafka -> OSN1.0.1 Rejects *Fork*\nconfigtx -> OSN1.0.0 Accepts -> Kafka -> OSN1.1.0 Rejects *Fork*\n\nThe key here is that the each OSN version generates the genesis config differently.  And, if an OSN's computation of the genesis config does not match what it sees on the ordering system channel, it invalidates and rejects it (assuming that something about the ordering system channel changed and caused the invalidation)","username":"jyellick","ts":"2017-10-02T21:23:29.397Z"}
{"msg":"For the existing bug\n\nbadconfigtx -> OSN1.0.1 Rejects _Okay_\nbadconfigtx -> OSN1.0.0 Accepts -> Kafka -> OSN1.0.1 Rejects *Fork*\ngoodconfigtx -> OSN1.0.1 Accepts -> Kafka -> OSN1.0.0 Accepts _Okay_\ngoodconfigtx -> OSN1.0.0 Accepts -> Kafka -> OSN1.0.1 Accepts _Okay_\n\nFor the 6080 bug (without capabilities dependency)\n\nconfigtx -> OSN1.1.0 Accepts -> Kafka -> OSN1.0.1 Rejects *Fork*\nconfigtx -> OSN1.0.0 Accepts -> Kafka -> OSN1.1.0 Rejects *Fork*\n\nThe key here is that the each OSN version generates the genesis config differently.  And, if an OSN's computation of the genesis config does not match what it sees on the ordering system channel, it invalidates and rejects it (assuming that something about the ordering system channel changed and caused the invalidation)","username":"jyellick","ts":"2017-10-02T21:23:29.397Z"}
{"msg":"Can you point me to the changeset of the existing bug?","username":"kostas","ts":"2017-10-02T21:27:56.341Z"}
{"msg":"https://gerrit.hyperledger.org/r/#/c/11645/","username":"jyellick","ts":"2017-10-02T21:29:03.277Z"}
{"msg":"All the cases for the existing bug make sense to me, the ones for the 6080 bug however do not -- yet.","username":"kostas","ts":"2017-10-03T15:08:04.013Z"}
{"msg":"> configtx -> OSN1.1.0 Accepts -> Kafka -> OSN1.0.1 Rejects *Fork\nWhat kind of config update transaction would cause this?","username":"kostas","ts":"2017-10-03T15:08:24.913Z"}
{"msg":"I assume that since we're talking about a tx that 1.0.1 rejects, it leaves the `mod_policy` empty.","username":"kostas","ts":"2017-10-03T15:09:30.308Z"}
{"msg":"And this is the scenario where the 1.1.0 binary has been configured to accept such transaction but add the `mod_policy` itself. Correct?","username":"kostas","ts":"2017-10-03T15:11:41.904Z"}
{"msg":"And this is the scenario where the 1.1.0 binary has been configured to accept such a transaction but add the `mod_policy` itself. Correct?","username":"kostas","ts":"2017-10-03T15:11:41.904Z"}
{"msg":"Ah, so, this has nothing to do with checking the validity of the `mod_policy`","username":"jyellick","ts":"2017-10-03T15:39:22.164Z"}
{"msg":"Channel creation occurs roughly as follows:\n\n1. Creation tx received\n2. Template config generated\n3. Creation tx applied to template config and validated to generate genesis config\n4. Genesis config ordered\n5. Prior to commit, each orderer performs 2/3, and verifies that the output of (3) matches what was received in (4).  This is because (2) is derived from the current ordering system channel config, which, if it changed while the request was in flight, the creation may no longer be valid.\n6. Commits\n\nSo, the 6080 bug is that we need to change the output of (2).  Which in turn causes (5) to fail for any OSN who does not follow the same rules for (2).","username":"jyellick","ts":"2017-10-03T15:43:07.210Z"}
{"msg":"So yes, although 6080 happens to change how `mod_policy` is set during (2), the fact that it is `mod_policy` is coincidental.  It could have been that we accidentally created a consortiums group for the new channel when we should not have.  The key is that (2) will now be different depending on v1.1.x vs v1.0.x.","username":"jyellick","ts":"2017-10-03T15:44:38.466Z"}
{"msg":"Understood. Reviewing CR 13263 so this comes handy.","username":"kostas","ts":"2017-10-03T15:46:05.876Z"}
{"msg":"A note, I was incorrect:\n\n> configtx -> OSN1.1.0 Accepts -> Kafka -> OSN1.0.1 Rejects *Fork*\n> configtx -> OSN1.0.0 Accepts -> Kafka -> OSN1.1.0 Rejects *Fork*\n\nIn the second case, there is no fork.  Only in the first.","username":"jyellick","ts":"2017-10-03T16:29:12.039Z"}
{"msg":"~A note, I was incorrect:~\n\n> configtx -> OSN1.1.0 Accepts -> Kafka -> OSN1.0.1 Rejects *Fork*\n> configtx -> OSN1.0.0 Accepts -> Kafka -> OSN1.1.0 Rejects *Fork*\n\n~In the second case, there is no fork.  Only in the first.~\n\nActually, I think I was right the first time around. Sorry for the waffling.","username":"jyellick","ts":"2017-10-03T16:29:12.039Z"}
{"msg":"I was considering that in the v1.1 case, the orderers do not revalidate transactions before committing them.  However, this is not true, because we follow the validate and commit path for messages which do not have a config seq set in Kafka, so there would in fact be the fork.","username":"jyellick","ts":"2017-10-03T16:31:14.449Z"}
{"msg":"In the review for CR13263 (https://gerrit.hyperledger.org/r/c/13263#message-df002fed_b68be80c) you write:","username":"kostas","ts":"2017-10-03T16:35:34.114Z"}
{"msg":"> Conversely, a v1.0 orderer receives the creation request, and a v1.1 orderer will successfully commit it.","username":"kostas","ts":"2017-10-03T16:35:44.871Z"}
{"msg":"Yes, this prompted me to make the correction here","username":"jyellick","ts":"2017-10-03T16:35:55.696Z"}
{"msg":"Then reverse","username":"jyellick","ts":"2017-10-03T16:35:58.395Z"}
{"msg":"So that CR comment is incorrect","username":"jyellick","ts":"2017-10-03T16:36:02.147Z"}
{"msg":"Ah, good.","username":"kostas","ts":"2017-10-03T16:36:06.766Z"}
{"msg":"Perhaps it is too extraneous to bother with, but I will note that if the logic for (2) is changed in v1.2, there will be no non-determinism risk with v1.1 orderers, as the validation is done only at ingress, not at commit in this case.","username":"jyellick","ts":"2017-10-03T16:40:06.419Z"}
{"msg":"@guoger @sanchezl I just experienced this Kafka failure:\n\n```\n?   \tgithub.com/hyperledger/fabric/orderer/consensus\t[no test files]\n2017-10-03 16:25:06.849 EDT [orderer/consensus/kafka] Halt -> CRIT 001 [channel: 0xc4200d84b0.channel] Halting of chain requested\n2017-10-03 16:25:06.849 EDT [orderer/consensus/kafka] processMessagesToBlocks -> CRIT 002 [channel: 0xc4200d84b0.channel] Unable to unmarshal consumed message = proto: can't skip unknown wire type 7 for orderer.KafkaMessage\n2017-10-03 16:25:06.850 EDT [orderer/consensus/kafka] Halt -> CRIT 003 [channel: 0xc4200d84b0.channel] Halting of chain requested\n2017-10-03 16:25:06.850 EDT [orderer/consensus/kafka] processMessagesToBlocks -> CRIT 004 [channel: 0xc4200d84b0.channel] Unable to unmarshal consumed message = proto: can't skip unknown wire type 7 for orderer.KafkaMessage\n2017-10-03 16:25:06.850 EDT [orderer/consensus/kafka] processMessagesToBlocks -> ERRO 005 [channel: 0xc4200d84b0.channel] Error during consumption: <nil>\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x18 pc=0x924b8e]\n\ngoroutine 138 [running]:\n```\n\noff master, if you have a chance to investigate.","username":"jyellick","ts":"2017-10-03T20:26:36.422Z"}
{"msg":"@guoger @sanchezl I just experienced this Kafka failure:\n\n```\n?   \tgithub.com/hyperledger/fabric/orderer/consensus\t[no test files]\n2017-10-03 16:25:06.849 EDT [orderer/consensus/kafka] Halt -> CRIT 001 [channel: 0xc4200d84b0.channel] Halting of chain requested\n2017-10-03 16:25:06.849 EDT [orderer/consensus/kafka] processMessagesToBlocks -> CRIT 002 [channel: 0xc4200d84b0.channel] Unable to unmarshal consumed message = proto: can't skip unknown wire type 7 for orderer.KafkaMessage\n2017-10-03 16:25:06.850 EDT [orderer/consensus/kafka] Halt -> CRIT 003 [channel: 0xc4200d84b0.channel] Halting of chain requested\n2017-10-03 16:25:06.850 EDT [orderer/consensus/kafka] processMessagesToBlocks -> CRIT 004 [channel: 0xc4200d84b0.channel] Unable to unmarshal consumed message = proto: can't skip unknown wire type 7 for orderer.KafkaMessage\n2017-10-03 16:25:06.850 EDT [orderer/consensus/kafka] processMessagesToBlocks -> ERRO 005 [channel: 0xc4200d84b0.channel] Error during consumption: <nil>\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x18 pc=0x924b8e]\n\ngoroutine 138 [running]:\ngithub.com/hyperledger/fabric/orderer/consensus/kafka.(*chainImpl).processMessagesToBlocks(0xc4203d8090, 0x0, 0x0, 0x0, 0x0, 0x0)\n\t/home/yellickj/go/src/github.com/hyperledger/fabric/orderer/consensus/kafka/chain.go:250 +0x1c8e\ngithub.com/hyperledger/fabric/orderer/consensus/kafka.startThread(0xc4203d8090)\n\t/home/yellickj/go/src/github.com/hyperledger/fabric/orderer/consensus/kafka/chain.go:214 +0x962\ncreated by github.com/hyperledger/fabric/orderer/consensus/kafka.(*chainImpl).Start\n\t/home/yellickj/go/src/github.com/hyperledger/fabric/orderer/consensus/kafka/chain.go:97 +0x3f\nFAIL\tgithub.com/hyperledger/fabric/orderer/consensus/kafka\t0.021s\n```\n\noff master, if you have a chance to investigate.","username":"jyellick","ts":"2017-10-03T20:26:36.422Z"}
{"msg":"Has joined the channel.","username":"AlekNS","ts":"2017-10-04T05:14:08.700Z","type":"uj"}
{"msg":"Has joined the channel.","username":"carlosfaria","ts":"2017-10-04T12:50:34.677Z","type":"uj"}
{"msg":"I'll investigate the CI failure today.","username":"sanchezl","ts":"2017-10-04T13:14:30.971Z"}
{"msg":"@sanchezl Any update on the above?","username":"jyellick","ts":"2017-10-06T17:55:54.088Z"}
{"msg":"@sanchezl Any update on the above? I am still seeing this with reasonable consistency when I run the orderer tests locally","username":"jyellick","ts":"2017-10-06T17:55:54.088Z"}
{"msg":"@jyellick not yet","username":"sanchezl","ts":"2017-10-06T18:04:23.269Z"}
{"msg":"@jyellick , do you also see this similar error? \n\n```11:55:55 unit-tests_1  | 2017-10-01 11:55:55.395 UTC [orderer/kafka] processMessagesToBlocks -> CRIT 002 [channel: 0x80a393a0}.channel] Unable to unmarshal consumed message = proto: can't skip unknown wire type 7 for orderer.KafkaMessage\n11:55:55 unit-tests_1  | 2017-10-01 11:55:55.405 UTC [orderer/kafka] processMessagesToBlocks -> ERRO 003 [channel: 0x80a393a0}.channel] Error during consumption: <nil>\n11:55:55 unit-tests_1  | panic: send on closed channel\n11:55:55 unit-tests_1  | \n11:55:55 unit-tests_1  | goroutine 98 [running]:\n11:55:55 unit-tests_1  | panic(0x80673d40, 0xc42036a8e0)\n11:55:55 unit-tests_1  | \t/opt/go/src/runtime/panic.go:500 +0x408\n11:55:55 unit-tests_1  | github.com/hyperledger/fabric/vendor/github.com/Shopify/sarama.(*syncProducer).SendMessage(0xc4202ca9e0, 0xc420372400, 0x5, 0x0, 0x0, 0x0)\n11:55:55 unit-tests_1  | \t/opt/gopath/src/github.com/hyperledger/fabric/vendor/github.com/Shopify/sarama/sync_producer.go:100 +0x158\n11:55:55 unit-tests_1  | github.com/hyperledger/fabric/orderer/kafka.sendConnectMessage.func1(0x0, 0x0)\n11:55:55 unit-tests_1  | \tgithub.com/hyperledger/fabric/orderer/kafka/_test/_obj_test/chain.go:516 +0x60\n11:55:55 unit-tests_1  | github.com/hyperledger/fabric/orderer/kafka.(*retryProcess).try(0xc420490ec0, 0x2faf080, 0x5f5e100, 0x0, 0x0)\n11:55:55 unit-tests_1  | \tgithub.com/hyperledger/fabric/orderer/kafka/_test/_obj_test/retry.go:56 +0x23a\n11:55:55 unit-tests_1  | github.com/hyperledger/fabric/orderer/kafka.(*retryProcess).retry(0xc420490ec0, 0x0, 0x0)\n11:55:55 unit-tests_1  | \tgithub.com/hyperledger/fabric/orderer/kafka/_test/_obj_test/retry.go:35 +0x5a\n11:55:55 unit-tests_1  | github.com/hyperledger/fabric/orderer/kafka.sendConnectMessage(0x2faf080, 0x5f5e100, 0x3938700, 0x7270e00, 0x2625a00, 0x2625a00, 0x2625a00, 0x2, 0x2625a00, 0x2, ...)\n11:55:55 unit-tests_1  | \tgithub.com/hyperledger/fabric/orderer/kafka/_test/_obj_test/chain.go:521 +0x400\n11:55:55 unit-tests_1  | created by github.com/hyperledger/fabric/orderer/kafka.(*chainImpl).processMessagesToBlocks\n11:55:55 unit-tests_1  | \tgithub.com/hyperledger/fabric/orderer/kafka/_test/_obj_test/chain.go:240 +0x7f4\n11:55:55 unit-tests_1  | FAIL\tgithub.com/hyperledger/fabric/orderer/kafka\t0.054s\n11:55:55 unit-tests_1  | error: exit status 1\n11:55:55 unit-tests_1  | panic: EOF\n11:55:55 unit-tests_1  | \n11:55:55 unit-tests_1  | goroutine 1 [running]:\n11:55:55 unit-tests_1  | panic(0x11ae00, 0xc42000a0f0)\n11:55:55 unit-tests_1  | \t/opt/go/src/runtime/panic.go:500 +0x408\n11:55:55 unit-tests_1  | main.main()\n11:55:55 unit-tests_1  | \t/opt/gotools/obj/gopath/src/github.com/AlekSi/gocov-xml/gocov-xml.go:60 +0x13a\n11:55:55 unittest_unit-tests_1 exited with code 2\n```","username":"sanchezl","ts":"2017-10-06T18:51:15.242Z"}
{"msg":"@sanchezl No, I have not seen tha tone, just the one I posted above","username":"jyellick","ts":"2017-10-06T18:52:04.315Z"}
{"msg":"@sanchezl No, I have not seen that one, just the one I posted above","username":"jyellick","ts":"2017-10-06T18:52:04.315Z"}
{"msg":"Here is another one in case you need: https://jenkins.hyperledger.org/job/fabric-verify-z/13333/console","username":"yacovm","ts":"2017-10-06T21:25:11.659Z"}
{"msg":"Here is another 2 in case you need: https://jenkins.hyperledger.org/job/fabric-verify-z/13333/console and https://jenkins.hyperledger.org/job/fabric-verify-z/13334/console","username":"yacovm","ts":"2017-10-06T21:25:11.659Z"}
{"msg":"Thanks, would you mind looking into that one as well @sanchezl?","username":"jyellick","ts":"2017-10-06T21:26:11.677Z"}
{"msg":"Will do..","username":"sanchezl","ts":"2017-10-06T21:26:53.377Z"}
{"msg":"Perhaps it would be a good idea to disable the test @jyellick / @kostas / @sanchezl  and work it offline? ","username":"yacovm","ts":"2017-10-10T07:44:55.401Z"}
{"msg":"it fails quite often","username":"yacovm","ts":"2017-10-10T07:45:07.685Z"}
{"msg":"Yes, if the issue persists, this is the way to go.","username":"kostas","ts":"2017-10-10T08:25:41.499Z"}
{"msg":"@guoger: Rebase https://gerrit.hyperledger.org/r/c/12991/ when you get a moment so we can get it in?","username":"kostas","ts":"2017-10-10T08:35:43.529Z"}
{"msg":"@sanchezl I wonder which failure is https://gerrit.hyperledger.org/r/#/c/14325 targeting? I'm just back from vacation and I want to see which failure is not yet covered","username":"guoger","ts":"2017-10-10T08:38:02.947Z"}
{"msg":"@kostas ok, will do","username":"guoger","ts":"2017-10-10T08:38:14.386Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=AbCv4XrtiJ45zmWxf) @kostas done","username":"guoger","ts":"2017-10-10T12:36:35.861Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=AbCv4XrtiJ45zmWxf","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=AbCv4XrtiJ45zmWxf","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=YicKuW5xCCiMrM9Sr) @guoger This covers multiple failures that have been occurring intermittently when a chain is haltedduring CI. I have patched some of them in the past (by adding checks for nil, etc) , but I think I finally got to the true issue with this change set.","username":"sanchezl","ts":"2017-10-10T13:19:35.101Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=YicKuW5xCCiMrM9Sr","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=YicKuW5xCCiMrM9Sr","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=jiipJJr4yFaqefKxb) @sanchezl ah, gotcha. thx!","username":"guoger","ts":"2017-10-10T15:00:27.938Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=jiipJJr4yFaqefKxb","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=jiipJJr4yFaqefKxb","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Has joined the channel.","username":"fz","ts":"2017-10-11T17:07:18.140Z","type":"uj"}
{"msg":"What’s becoming painfully obvious to me from the discussions in #fabric-orderer is that no amount of warnings, caveat emptors, etc. will give inexperienced users pause or prevent them from taking a shortcut w/r/t Kafka.","username":"kostas","ts":"2017-10-11T19:51:39.232Z"}
{"msg":"I wish I had a good and useful conclusion here.","username":"kostas","ts":"2017-10-11T19:51:50.520Z"}
{"msg":"And to be clear: if there is blame to be assigned here, I am not suggesting that it’s on the users.","username":"kostas","ts":"2017-10-11T19:56:59.547Z"}
{"msg":"Creating this channel has turned out to be an excellent idea, as the signal to noise ratio here is much nicer.  I'm not sure what to do about #fabric-orderer but continue to do our best to plow through it.","username":"jyellick","ts":"2017-10-11T19:57:01.189Z"}
{"msg":"As you say, no amount of \"Please study Kafka first\" seems to be taken seriously, and unless it is, I'm not sure what can be done.","username":"jyellick","ts":"2017-10-11T19:58:33.672Z"}
{"msg":"Has joined the channel.","username":"yoheiueda","ts":"2017-10-12T04:02:04.161Z","type":"uj"}
{"msg":"how do we reverify e2e-x86 tests?","username":"guoger","ts":"2017-10-12T09:21:36.010Z"}
{"msg":"fyi, I just updated https://gerrit.hyperledger.org/r/c/13963/ for review","username":"guoger","ts":"2017-10-12T09:46:10.367Z"}
{"msg":"> how do we reverify e2e-x86 tests?\n`rebuild e2e`","username":"kostas","ts":"2017-10-12T12:33:42.940Z"}
{"msg":"> how do we reverify e2e-x86 tests?\n`rebuild-e2e` (edited)","username":"kostas","ts":"2017-10-12T12:33:42.940Z"}
{"msg":"There was an issue with E2E tests that _should_ be resolved now, see: https://chat.hyperledger.org/channel/fabric-pr-review?msg=vHyRH7gxXb5S6o8s5","username":"kostas","ts":"2017-10-12T12:34:06.145Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-pr-review?msg=vHyRH7gxXb5S6o8s5","url":"https://chat.hyperledger.org/channel/fabric-pr-review?msg=vHyRH7gxXb5S6o8s5","remote":true,"fileId":null,"fileName":null}]}
{"msg":"> `rebuild e2e`\nIs it not `rebuild-e2e` ?","username":"jyellick","ts":"2017-10-12T13:40:48.361Z"}
{"msg":"Sigh, it is.","username":"kostas","ts":"2017-10-12T13:41:09.385Z"}
{"msg":"Sigh, of course it is.","username":"kostas","ts":"2017-10-12T13:41:09.385Z"}
{"msg":"Slightly off-topic but since it's handy for development:","username":"kostas","ts":"2017-10-18T00:42:22.774Z"}
{"msg":"If you find yourself reading code on GitHub repos often, the SourceGraph extension for Chrome is fantastic: https://about.sourcegraph.com/","username":"kostas","ts":"2017-10-18T00:42:27.482Z"}
{"msg":"I believe this is good to merge: https://gerrit.hyperledger.org/r/c/12991/","username":"kostas","ts":"2017-10-18T14:54:20.001Z"}
{"msg":"I will take a look shortly","username":"jyellick","ts":"2017-10-18T15:08:46.235Z"}
{"msg":"@kostas @guoger Added a comment on what looks like a bug to me (though perhaps it's not)","username":"jyellick","ts":"2017-10-18T16:08:21.528Z"}
{"msg":"@jyellick so if `pending || len(batches) == 2`, we need to persist *current* `chain.lastOriginalOffsetProcessed` first, and then update `chain.lastOriginalOffsetProcessed` with `newOffset`, and persist that into the second block (if any)","username":"guoger","ts":"2017-10-18T16:19:03.433Z"}
{"msg":"does this address your question?","username":"guoger","ts":"2017-10-18T16:19:10.289Z"}
{"msg":"Not quite","username":"jyellick","ts":"2017-10-18T16:19:21.497Z"}
{"msg":"As best as I can tell, `lastOriginalOffsetProcessed` is only set in those commit paths, and only when a block is cut.","username":"jyellick","ts":"2017-10-18T16:19:54.928Z"}
{"msg":"It seems like we're losing offsets that have been processed any time a batch is not cut.","username":"jyellick","ts":"2017-10-18T16:20:09.557Z"}
{"msg":"Since we set `lastOriginalOffsetProcessed` based only on the offset of the transaction which caused the block to commit.","username":"jyellick","ts":"2017-10-18T16:20:44.389Z"}
{"msg":"ah, I see your point, it seems to be a good catch! I'll fix it after dinner","username":"guoger","ts":"2017-10-18T16:27:31.531Z"}
{"msg":"Anybody knows why I'm getting\n```\nld: warning: PIE disabled. Absolute addressing (perhaps -mdynamic-no-pic) not allowed in code signed PIE, but used in type..eqfunc.[106]string from /var/folders/6z/9kwhngss6f9372k4fbnxks5r0000gp/T/go-link-396036579/go.o. To fix this warning, don't compile with -mdynamic-no-pic or link with -Wl,-no_pie\n```","username":"guoger","ts":"2017-10-18T21:38:35.168Z"}
{"msg":"while running unit tests","username":"guoger","ts":"2017-10-18T21:38:42.139Z"}
{"msg":"while running unit tests on OSX","username":"guoger","ts":"2017-10-18T21:38:42.139Z"}
{"msg":"I've not seen it. I'd suggest a `make clean-all` if you haven't already? ","username":"jyellick","ts":"2017-10-18T22:05:04.042Z"}
{"msg":"I tried... and still","username":"guoger","ts":"2017-10-19T08:12:14.322Z"}
{"msg":"which go version are using? 1.9?","username":"guoger","ts":"2017-10-19T08:13:16.448Z"}
{"msg":"Yes","username":"jyellick","ts":"2017-10-19T13:27:06.180Z"}
{"msg":"Though on Linux, not OS X","username":"jyellick","ts":"2017-10-19T13:27:19.697Z"}
{"msg":"Jay given that our CI is like rolling a dice, on this one \"reverify-behave\" would have sufficed: https://gerrit.hyperledger.org/r/c/12991/","username":"kostas","ts":"2017-10-19T21:43:08.835Z"}
{"msg":"Jay given that our CI is like rolling a dice, on [this CR](https://gerrit.hyperledger.org/r/c/12991/) a \"reverify-behave\" would have sufficed.","username":"kostas","ts":"2017-10-19T21:43:08.835Z"}
{"msg":"Just a heads up so that you don't have to deal with additional failures.","username":"kostas","ts":"2017-10-19T21:43:23.203Z"}
{"msg":"(The two-staged CI job that failed doesn't actually count against you so you can ignore that one.)","username":"kostas","ts":"2017-10-19T21:43:48.153Z"}
{"msg":"> Anybody knows why I'm getting\nI'm running unit tests on my Mac on the latest master to see if I'll get this, will update you.","username":"kostas","ts":"2017-10-19T21:44:19.680Z"}
{"msg":"> on this CR a \"reverify-behave\" \n\nI believe you want 'rebuild-behave', running `'reverify-behave' will likely trigger all the CI jobs again.","username":"jyellick","ts":"2017-10-20T13:57:23.378Z"}
{"msg":"I do this mistake. Every. Single. Time.","username":"kostas","ts":"2017-10-20T14:22:02.285Z"}
{"msg":"@guoger: Unit tests running on this Mac w/o issues. Mac OS 10.12.6.","username":"kostas","ts":"2017-10-20T19:49:17.004Z"}
{"msg":"hmm... thanks! that's weird..","username":"guoger","ts":"2017-10-22T14:03:12.921Z"}
{"msg":"are you running `make unit-test` or `go test ./...`?","username":"guoger","ts":"2017-10-22T14:04:46.220Z"}
{"msg":"@guoger: Both.","username":"kostas","ts":"2017-10-23T17:22:32.785Z"}
{"msg":"I saw your comments in https://gerrit.hyperledger.org/r/#/c/13963/ , appreciated! indeed I missed some cases there. RW lock sounds good to me, I'll update the patch tomorrow.","username":"guoger","ts":"2017-10-24T15:53:58.558Z"}
{"msg":"Thanks @guoger !","username":"jyellick","ts":"2017-10-24T15:54:37.988Z"}
{"msg":"@sanchezl I see you are working on https://jira.hyperledger.org/browse/FAB-1223 , if you need any help with it, I'd love to join the effort, just let me know! thx","username":"guoger","ts":"2017-10-24T16:08:24.064Z"}
{"msg":"I've posted a draft update of https://gerrit.hyperledger.org/r/#/c/13963, pls take a look. Probably you could pay more attention to following aspects:\n- \bI think it's not necessary to use a `RWMutex` as we are essentially dealing with a semaphore here. So I pivoted @jyellick 's idea to use a channel\n- only resubmitted config messages block the broadcast, not normal messages.\n- a new field `LastResubmittedConfigOffset` is added to both `chainImpl` and `kafka.proto`, so that it gets persisted in the block. When we load the metadata from last block, we compare it with `LastOriginalOffsetProcessed` to determine if we need to block ingress messages or not\n- we only unblock broadcast when `regularMessage.OriginalOffset == chain.lastResubmittedConfigOffset` && `regularMessage.ConfigSeq == seq` so that we've received the very last resubmitted message AND it doesn't need to be revalidated and resubmitted anymore\ncc @jyellick @sanchezl ","username":"guoger","ts":"2017-10-25T16:53:15.031Z"}
{"msg":"I've posted a draft update of https://gerrit.hyperledger.org/r/#/c/13963, pls take a look. Probably you could pay more attention to following aspects:\n- \bI think it's not necessary to use a `RWMutex` as we are essentially dealing with a semaphore here. So I pivoted @jyellick 's idea to use a channel\n- only resubmitted config messages block the broadcast, not normal messages.\n- a new field `LastResubmittedConfigOffset` is added to both `chainImpl` and `kafka.proto`, so that it gets persisted in the block. When we load the metadata from last block, we compare it with `LastOriginalOffsetProcessed` to determine if we need to block ingress messages or not\n- we only unblock broadcast when `regularMessage.OriginalOffset == chain.lastResubmittedConfigOffset` && `regularMessage.ConfigSeq == seq` so that we've received the very last resubmitted message AND it doesn't need to be revalidated and resubmitted anymore\ncc @jyellick @sanchezl @kostas ","username":"guoger","ts":"2017-10-25T16:53:15.031Z"}
{"msg":"I've posted a draft update of https://gerrit.hyperledger.org/r/#/c/13963, pls take a look. Probably you could pay more attention to following aspects:\n- \bI think it's not necessary to use a `RWMutex` as we are essentially dealing with a semaphore here. So I pivoted @jyellick 's idea to use a channel. But, do we risk closing a closed channel here?\n- only resubmitted config messages block the broadcast, not normal messages.\n- a new field `LastResubmittedConfigOffset` is added to both `chainImpl` and `kafka.proto`, so that it gets persisted in the block. When we load the metadata from last block, we compare it with `LastOriginalOffsetProcessed` to determine if we need to block ingress messages or not\n- we only unblock broadcast when `regularMessage.OriginalOffset == chain.lastResubmittedConfigOffset` && `regularMessage.ConfigSeq == seq` so that we've received the very last resubmitted message AND it doesn't need to be revalidated and resubmitted anymore\ncc @jyellick @sanchezl @kostas ","username":"guoger","ts":"2017-10-25T16:53:15.031Z"}
{"msg":"I haven't updated the tests yet, will do later","username":"guoger","ts":"2017-10-25T16:53:28.670Z"}
{"msg":"I haven't updated the tests yet, will do later. Just wanna push out this implementation change for review","username":"guoger","ts":"2017-10-25T16:53:28.670Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=42CSkWePsWPQbA6sA) Just FYI, this is caused by 01c50e, where we introduced `plugin` package and it has a bug in go1.9 on OSX, see https://github.com/golang/go/issues/21776, and there's a fix: https://github.com/golang/go/commit/88a1e85c706a7917f97be9c612334f0c85e96cf3, which is targeting go1.10","username":"guoger","ts":"2017-10-26T03:42:23.518Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=42CSkWePsWPQbA6sA","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=42CSkWePsWPQbA6sA","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=42CSkWePsWPQbA6sA) Just FYI, this is caused by commit 01c50e, where we introduced `plugin` package and it has a bug in go1.9 on OSX, see https://github.com/golang/go/issues/21776, and there's a fix: https://github.com/golang/go/commit/88a1e85c706a7917f97be9c612334f0c85e96cf3, which is targeting go1.10","username":"guoger","ts":"2017-10-26T03:42:23.518Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=42CSkWePsWPQbA6sA","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=42CSkWePsWPQbA6sA","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=42CSkWePsWPQbA6sA) Just FYI, this is caused by commit `01c50e`, where we introduced `plugin` package and it has a bug in go1.9 on OSX, see https://github.com/golang/go/issues/21776, and there's a fix: https://github.com/golang/go/commit/88a1e85c706a7917f97be9c612334f0c85e96cf3, which is targeting go1.10","username":"guoger","ts":"2017-10-26T03:42:23.518Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=42CSkWePsWPQbA6sA","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=42CSkWePsWPQbA6sA","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I'll try with go1.9.2","username":"guoger","ts":"2017-10-26T03:44:46.374Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=K4YkxMZQ5QaXZ7LYN) >people using plugin will probably just have to live with the warning :( \nbut I'm really curious why @kostas doesn't have such problem? which OSX version are you using?","username":"guoger","ts":"2017-10-26T05:15:29.013Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=K4YkxMZQ5QaXZ7LYN","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=K4YkxMZQ5QaXZ7LYN","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=K4YkxMZQ5QaXZ7LYN) > people using plugin will probably just have to live with the warning :( \nbut I'm really curious why @kostas doesn't have such problem? which OSX version are you using?","username":"guoger","ts":"2017-10-26T05:15:29.013Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=K4YkxMZQ5QaXZ7LYN","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=K4YkxMZQ5QaXZ7LYN","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=K4YkxMZQ5QaXZ7LYN) > people using plugin will probably just have to live with the warning :( https://github.com/golang/go/issues/21776#issuecomment-336521276\nbut I'm really curious why @kostas doesn't have such problem? which OSX version are you using?","username":"guoger","ts":"2017-10-26T05:15:29.013Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=K4YkxMZQ5QaXZ7LYN","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=K4YkxMZQ5QaXZ7LYN","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=K4YkxMZQ5QaXZ7LYN) > people using plugin will probably just have to live with the warning :( https://github.com/golang/go/issues/21776#issuecomment-336521276\nbut I'm really curious why @kostas doesn't have such problem.... i guess only difference is the OSX version...","username":"guoger","ts":"2017-10-26T05:15:29.013Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=K4YkxMZQ5QaXZ7LYN","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=K4YkxMZQ5QaXZ7LYN","remote":true,"fileId":null,"fileName":null}]}
{"msg":"just updated tests in https://gerrit.hyperledger.org/r/#/c/13963, pls take a look, thx!","username":"guoger","ts":"2017-10-26T07:43:09.709Z"}
{"msg":"> but I'm really curious why @kostas doesn't have such problem.... i guess only difference is the OSX version...\nAh, there is a misunderstanding. Thought you were suggesting that you cannot _run_ the tests. I also get the warning but since it's just a warning, I ignore it.","username":"kostas","ts":"2017-10-26T10:53:59.231Z"}
{"msg":"> just updated tests in https://gerrit.hyperledger.org/r/#/c/13963, pls take a look, thx!\n@guoger: Thanks! Folks, let's please get this reviewed today. (Will be looking at it myself in the PM.) Want to get it merged before the end of the week so that it makes the cut for the preview.","username":"kostas","ts":"2017-10-26T13:11:36.119Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=hHQx6Qr2TeennM7q8) @kostas oh, I see... now we know where that warning is coming from :) it's annoying...","username":"guoger","ts":"2017-10-26T13:56:05.379Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=hHQx6Qr2TeennM7q8","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=hHQx6Qr2TeennM7q8","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=hHQx6Qr2TeennM7q8) @kostas oh, I see... now we know where that warning is coming from :) it's annoying...especially when i run `go test ./...`","username":"guoger","ts":"2017-10-26T13:56:05.379Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=hHQx6Qr2TeennM7q8","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=hHQx6Qr2TeennM7q8","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Has joined the channel.","username":"Baha-sk","ts":"2017-10-26T18:41:41.669Z","type":"uj"}
{"msg":"hi, can I ask ask a Fabric newbie question about orderers and Fabric?","username":"Baha-sk","ts":"2017-10-26T18:42:20.450Z"}
{"msg":"@Baha-sk Please use #fabric-orderer for that purpose","username":"jyellick","ts":"2017-10-26T18:42:48.842Z"}
{"msg":"@Baha-sk Please use #fabric-orderer for that purpose (this channel is for development related discussions only)","username":"jyellick","ts":"2017-10-26T18:42:48.842Z"}
{"msg":"ok thanks @jyellick ","username":"Baha-sk","ts":"2017-10-26T18:43:12.903Z"}
{"msg":"@kostas Just saw your comment in FAB-5969 JIRA\n> The Description is different to the solution proposed in the CR, right?\nWhy do you think they are different?","username":"guoger","ts":"2017-10-27T14:50:34.891Z"}
{"msg":"> A valid configure message TX config will advance ConfigSeq when committed. In this case, while a TX config is in flight, all messages received between receipt and commit of TX config need to be re-validated. In the case of Kafka-base OSN, this introduces overhead of re-submitting those messages to Kafka (see FAB-5720 for the reason). Therefore we should block ingress messages while there are TX config is in flight.\nMy interpretation of this quote is as follows: if an OSN receives a config message, it should block ingress messages.","username":"kostas","ts":"2017-10-27T15:01:25.467Z"}
{"msg":"> A valid configure message TX config will advance ConfigSeq when committed. In this case, while a TX config is in flight, all messages received between receipt and commit of TX config need to be re-validated. In the case of Kafka-base OSN, this introduces overhead of re-submitting those messages to Kafka (see FAB-5720 for the reason). Therefore we should block ingress messages while there are TX config is in flight.\nMy dry interpretation of this quote is as follows: if an OSN receives a config message, it should block ingress messages.","username":"kostas","ts":"2017-10-27T15:01:25.467Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=cRp6pNyG9aE5p6Yc7) @kostas Ah...you're right, I guess I was being careless. The idea in that jira may seem to be much simpler, but the problem I see there is that we don't have a mechanism to block all orderers *synchronously* when one of them receives a config tx via broadcast. So we could compensate by only blocking if a config tx needs to be re-submitted. Effectively we are eliminating partial overhead, but not all of it. Let me know if this makes sense to you.","username":"guoger","ts":"2017-10-27T16:03:18.361Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=cRp6pNyG9aE5p6Yc7","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=cRp6pNyG9aE5p6Yc7","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Yes, I understand what you're saying. And one could also argue that the title of that JIRA issue (or the FAB-5720 reference) should have made it clear that we're talking about the reprocessing path for configs, not the normal one. (Hence my \"dry\" comment on the interpretation.)","username":"kostas","ts":"2017-10-27T16:07:24.230Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=SoEwzWaf6HFgGMQH8) @kostas yep, and I was actually thinking of that simpler/naive solution when I created the jira, and didn't get to update the description when I pivot the idea while implementing it. Doing it now","username":"guoger","ts":"2017-10-27T16:13:03.176Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=SoEwzWaf6HFgGMQH8","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=SoEwzWaf6HFgGMQH8","remote":true,"fileId":null,"fileName":null}]}
{"msg":"is there a code freeze next week?","username":"guoger","ts":"2017-10-27T16:43:10.500Z"}
{"msg":"As best as I can tell, it won't be a code freeze. Or if there's one, it's going to be small enough in order to cut the preview release, see: https://chat.hyperledger.org/channel/fabric-release?msg=sqAiLFvB9gi3v7Fou","username":"kostas","ts":"2017-10-27T19:10:13.191Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-release?msg=sqAiLFvB9gi3v7Fou","url":"https://chat.hyperledger.org/channel/fabric-release?msg=sqAiLFvB9gi3v7Fou","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@jyellick I haven't got the jira number you mentioned before :) take your time, no need to rush tho","username":"guoger","ts":"2017-10-29T15:54:59.325Z"}
{"msg":"Thanks, I was discussing this a bit on Friday with @kostas directly, wanted to let it percolate a bit this weekend, will try to write something up for you soon","username":"jyellick","ts":"2017-10-30T05:24:44.941Z"}
{"msg":"I talked about this problem with @jyellick earlier today:\n> setting orderer `v1.1` capability to `true` doesn't take effect on master branch, verified by running e2e_cli example.\nAll I did is to use https://hastebin.com/dusuwopeso.coffeescript as `configtx.yaml`\n\nI think the reason is that we are using an old version of spf13/viper, which uses dots as delimiter for nested keys, therefore key name `V1.1` is actually invalid there. Newer version of viper takes that into account, and will inspect if there are keys with dots: https://github.com/spf13/viper/blob/master/viper.go?utf8=✓#L858-L862","username":"guoger","ts":"2017-10-30T08:30:27.482Z"}
{"msg":"I think we should consider upgrading `viper` package vendored in Fabric. BTW, why don't we use any package management tool?","username":"guoger","ts":"2017-10-30T08:31:05.782Z"}
{"msg":"Huh. Interesting. Have you given this a go with the latest version of `viper` to see if it works as expected?","username":"kostas","ts":"2017-10-30T09:12:04.955Z"}
{"msg":"> BTW, why don't we use any package management tool?\nWe use `govendor`. (But as your point above shows, we could probably do a better job managing our dependencies.)","username":"kostas","ts":"2017-10-30T09:13:18.421Z"}
{"msg":"@kostas yep, but hitting some other issues:\n- latest viper coverts all keys to lower case. To generate the genesis block, we should use `twoorgsorderergenesis` instead of `TwoOrgsOrdererGenesis`\n- orderer crashes with `Orderer capability v1.1 is required but not supported`\nBut at least it's parses correctly","username":"guoger","ts":"2017-10-30T15:04:20.181Z"}
{"msg":"@guoger Sounds like you have this under control, I won't investigate then?","username":"jyellick","ts":"2017-10-30T15:16:43.341Z"}
{"msg":"@jyellick yeah, I think I find the cause, will file a jira later and submit a patch (probably need to figure out the pkg mgmt first)","username":"guoger","ts":"2017-10-30T15:18:47.749Z"}
{"msg":"> Thanks, I was discussing this a bit on Friday with @kostas directly, wanted to let it percolate a bit this weekend, will try to write something up for you soon\nRegarding this, and just so that we can get the discussion going:","username":"kostas","ts":"2017-10-30T15:34:15.967Z"}
{"msg":"(Was about to suggest that we expand the `HeaderType` enum by adding a generic `Isolated` option, but then the peer would be unable to tell that they're dealing with a resource update message. So scratch that.)","username":"kostas","ts":"2017-10-30T15:39:38.477Z"}
{"msg":"What are our thoughts regarding using the `extension` field of the `ChannelHeader` for this? I'm not the biggest fan because you're supposed to deserialize the value based on the header type. We could always, however, unmarshal against a proto message defined for isolation (to check if the message is to be isolated), besides the type-based checks.","username":"kostas","ts":"2017-10-30T15:44:17.486Z"}
{"msg":"What are our thoughts on using the `extension` field of the `ChannelHeader` for this? I'm not the biggest fan because you're supposed to deserialize the value based on the header type. We could always, however, unmarshal against a proto message defined for isolation (to check if the message is to be isolated), besides the type-based checks.","username":"kostas","ts":"2017-10-30T15:44:17.486Z"}
{"msg":"As I said, not the biggest fan. LMK what other options you're considering.","username":"kostas","ts":"2017-10-30T15:44:42.168Z"}
{"msg":"https://jira.hyperledger.org/browse/FAB-6803","username":"guoger","ts":"2017-10-30T15:56:37.237Z"}
{"msg":"My first reaction was to add something very generic sounding like `map<string, bytes> attributes` as a field, or maybe `processing_hints`.  My biggest worry with this approach, is whether we will get burned by the non-deterministic nature of map marshaling.  I _think_ we will not, what do you think?","username":"jyellick","ts":"2017-10-30T15:57:33.574Z"}
{"msg":"@guoger https://gerrit.hyperledger.org/r/#/c/14813/","username":"jyellick","ts":"2017-10-30T15:58:08.075Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=G2bWSos4SQzmuCtfs) @jyellick ah, I see, I marked mine as duplicate","username":"guoger","ts":"2017-10-30T16:00:35.323Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=G2bWSos4SQzmuCtfs","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=G2bWSos4SQzmuCtfs","remote":true,"fileId":null,"fileName":null}]}
{"msg":"oh, they address similar issue but https://gerrit.hyperledger.org/r/#/c/14813 doesn't really solve the entire problem","username":"guoger","ts":"2017-10-30T16:02:02.574Z"}
{"msg":"I _think_ this is related to https://gerrit.hyperledger.org/r/#/c/12533/ which I was concerned would break us in unexpected ways","username":"jyellick","ts":"2017-10-30T16:02:22.091Z"}
{"msg":"I just reopened mine, feel free to leave any comment there if you think it's indeed duplicate. I'll revisit this my tomorrow, thx folks","username":"guoger","ts":"2017-10-30T16:07:24.108Z"}
{"msg":"> My first reaction was to add something very generic sounding like `map<string, bytes> attributes` as a field, or maybe `processing_hints`. My biggest worry with this approach, is whether we will get burned by the non-deterministic nature of map marshaling. I _think_ we will not, what do you think?\nI am not against this. Cannot think of any scenarios where ND may hit us either, but as the latest CR showed, I'm slipping when it comes to detecting such errors.","username":"kostas","ts":"2017-10-30T19:38:27.223Z"}
{"msg":"(`processing_hints` is a horrible name though.)","username":"kostas","ts":"2017-10-30T19:38:38.102Z"}
{"msg":"@jyellick I'm reading your comment in https://gerrit.hyperledger.org/r/#/c/13963/12/orderer/consensus/kafka/chain.go@54\nI agree with you for both cases, just wanna make sure we share the same understanding:\n- for the first case, it's due to the fact that we advance `LastOriginalOffsetProcessed` (LOOP) for *both regular and config messages*, however we only advance `LastResubmittedConfigOffset` (LRCO) for *config messages*. Therefore, if a regular msg is resubmitted and reprocessed after a resubmitted config msg, we have `LOOP > LRCO`. It's same to simple convert `LRCO==LOOP` to `LRCO<=LOOP` as if we have already processed a message with `LOOP = x`, it's certain that all resubmitted msg whose original offset is lower than `x` should've been reprocessed.\n- for the second, the root cause is notorious non-determinism. The `LRCO` is advanced in orderer who resubmits the msg, but *not advanced* in those who don't. However, I think converting the equation to less-equal is probably not sufficient in this case, as we will be committing blocks with different metadata. I think a simply fix would be to advance `LRCO` if `OO > LRCO` when a resubmitted config msg is received.\ncc @kostas @sanchezl ","username":"guoger","ts":"2017-10-31T04:36:03.966Z"}
{"msg":"@jyellick I'm reading your comment in https://gerrit.hyperledger.org/r/#/c/13963/12/orderer/consensus/kafka/chain.go@54\nI agree with you for both cases, just wanna make sure we share the same understanding:\n- for the first case, it's due to the fact that we advance `LastOriginalOffsetProcessed` (LOOP) for *both regular and config messages*, however we only advance `LastResubmittedConfigOffset` (LRCO) for *config messages only*. Therefore, if a regular msg is resubmitted and reprocessed *after* a resubmitted config msg, we have `LOOP > LRCO`. It's safe to simply convert `LRCO==LOOP` to `LRCO<=LOOP` as if we have already processed a message with `LOOP = x`, it's certain that all resubmitted msg whose original offset is lower than `x` should've been reprocessed.\n- for the second, the root cause is notorious non-determinism. The `LRCO` is advanced in orderer who resubmits the msg, but *not advanced* in those who don't. However, I think converting the equation to less-equal is probably not sufficient in this case, as we will be committing blocks with different metadata. I think a simply fix would be to advance `LRCO` if `OO > LRCO` when a resubmitted config msg is received.\ncc @kostas @sanchezl ","username":"guoger","ts":"2017-10-31T04:36:03.966Z"}
{"msg":"@jyellick I'm reading your comment in https://gerrit.hyperledger.org/r/#/c/13963/12/orderer/consensus/kafka/chain.go@54\nI agree with you for both cases, just wanna make sure we share the same understanding:\n- for the first case, it's due to the fact that we advance `LastOriginalOffsetProcessed` (LOOP) for *both regular and config messages*, however we only advance `LastResubmittedConfigOffset` (LRCO) for *config messages only*. Therefore, if a regular msg is resubmitted and reprocessed *after* a resubmitted config msg, we have `LOOP > LRCO`. It's safe to simply convert `LRCO==LOOP` to `LRCO<=LOOP` as if we have already processed a message with `LOOP = x`, it's certain that all resubmitted config msg whose original offset is lower than `x` should've been reprocessed.\n- for the second, the root cause is notorious non-determinism. The `LRCO` is advanced in orderer who resubmits the msg, but *not advanced* in those who don't. However, I think converting the equation to less-equal is probably not sufficient in this case, as we will be committing blocks with different metadata. I think a simply fix would be to advance `LRCO` if `OO > LRCO` when a resubmitted config msg is received.\ncc @kostas @sanchezl ","username":"guoger","ts":"2017-10-31T04:36:03.966Z"}
{"msg":"@jyellick I'm reading your comment in https://gerrit.hyperledger.org/r/#/c/13963/12/orderer/consensus/kafka/chain.go@54\nI agree with you for both cases, just wanna make sure we share the same understanding:\n- for the first case, it's due to the fact that we advance `LastOriginalOffsetProcessed` (LOOP) for *both regular and config messages*, however we only advance `LastResubmittedConfigOffset` (LRCO) for *config messages only*. Therefore, if a regular msg is resubmitted and reprocessed *after* a resubmitted config msg, we have `LOOP > LRCO`. It's safe to simply convert `LRCO==LOOP` to `LRCO<=LOOP` as if we have already processed a message with `LOOP = x`, it's certain that all resubmitted config msg whose original offset is lower than `x` should've been reprocessed.\n- for the second, the root cause is notorious non-determinism. The `LRCO` is advanced in orderer who resubmits the msg, but *not advanced* in those who don't. However, I think converting the equation to less-equal is probably not sufficient in this case, as we will be committing blocks with different metadata (LRCO). I think a simply fix would be to advance `LRCO` if `OO > LRCO` when a resubmitted config msg is received.\ncc @kostas @sanchezl ","username":"guoger","ts":"2017-10-31T04:36:03.966Z"}
{"msg":"@jyellick I'm reading your comment in https://gerrit.hyperledger.org/r/#/c/13963/12/orderer/consensus/kafka/chain.go@54\nI agree with you for both cases, just wanna make sure we share the same understanding:\n- for the first case, it's due to the fact that we advance `LastOriginalOffsetProcessed` (LOOP) for *both regular and config messages*, however we only advance `LastResubmittedConfigOffset` (LRCO) for *config messages only*. Therefore, if a regular msg is resubmitted and reprocessed *after* a resubmitted config msg, we have `LOOP > LRCO`. It's safe to simply convert `LRCO==LOOP` to `LRCO<=LOOP` as if we have already processed a message with `LOOP = x`, it's certain that all resubmitted config msg whose original offset is lower than `x` should've been reprocessed.\n- for the second, the root cause is notorious non-determinism. The `LRCO` is advanced in orderer who resubmits the msg, but *not advanced* in those who don't. However, I think converting the equation to less-equal is probably not sufficient in this case, as we will be committing blocks with different metadata (LRCO). A simple fix would be to advance `LRCO` if `OO > LRCO` when a resubmitted config msg is received.\ncc @kostas @sanchezl ","username":"guoger","ts":"2017-10-31T04:36:03.966Z"}
{"msg":"> However, I think converting the equation to less-equal is probably not sufficient in this case, as we will be committing blocks with different metadata (LRCO).\n\n@guoger Why is this a problem? Block metadata is not part of the hash, so it is okay if they are not consistent across the network (so long as the block data contents are)","username":"jyellick","ts":"2017-10-31T05:15:22.022Z"}
{"msg":"@jyellick when a new orderer joins the network, it replays all messages in the kafka to catch up with others. I thought it never advances LRCO in this case?","username":"guoger","ts":"2017-10-31T05:34:19.580Z"}
{"msg":"Why would it not?","username":"jyellick","ts":"2017-10-31T05:46:21.707Z"}
{"msg":"~Why would it not?~ Sorry, I was thinking LOOP not LRCO","username":"jyellick","ts":"2017-10-31T05:46:21.707Z"}
{"msg":"~Why would it not?~ Sorry, I was thinking LOOP not LRCO.  What would be the harm in LRCO never advancing? So long as LOOP then you meet `LRCO<=LOOP`","username":"jyellick","ts":"2017-10-31T05:46:21.707Z"}
{"msg":"~Why would it not?~ Sorry, I was thinking LOOP not LRCO.  What would be the harm in LRCO never advancing? So long as LOOP advances, then you meet `LRCO<=LOOP`","username":"jyellick","ts":"2017-10-31T05:46:21.707Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=38tk9vnCirevFkNnL) @jyellick True... LRCO is actually advanced during replay. New orderer would still resubmit a message if config seq is lagged, although it would be very stale for other orderers. But I feel enforcing consistent metadata across the network would be less error-prone.","username":"guoger","ts":"2017-10-31T06:13:06.302Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=38tk9vnCirevFkNnL","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=38tk9vnCirevFkNnL","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Also, this *replay* case is also an interesting area to pay attention.","username":"guoger","ts":"2017-10-31T06:13:51.123Z"}
{"msg":"Yes, certainly on replay, all wrong config seq messages are resubmitted","username":"jyellick","ts":"2017-10-31T06:14:19.865Z"}
{"msg":"All OSNs will immediately ignore them (as will the submitting one when it processes them) because the last original offset processed will be so far off","username":"jyellick","ts":"2017-10-31T06:14:56.930Z"}
{"msg":"But it will pollute the Kafka logs.  Still, the overhead I would think should be negligable","username":"jyellick","ts":"2017-10-31T06:15:21.714Z"}
{"msg":"Especially with the locking mechanism in place from this CR, hopefully the number of resubmitted messages is quite low.","username":"jyellick","ts":"2017-10-31T06:15:35.928Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=RPyRqLQxBHwoF8fKB) @jyellick yes that's true.\nStill, what's your thought on this?\n> But I feel enforcing consistent metadata across the network would be less error-prone.\n","username":"guoger","ts":"2017-10-31T06:24:49.558Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=RPyRqLQxBHwoF8fKB","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=RPyRqLQxBHwoF8fKB","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Also, we don't block ingress msg while a brand new orderer is catching up, where resubmission could very likely happen...","username":"guoger","ts":"2017-10-31T06:25:12.605Z"}
{"msg":"@guoger: In the first case, what is the sequence of messages that the OSN sees? Let's start with the config message that gets resubmitted with an offset of 5 and take it from there","username":"kostas","ts":"2017-10-31T09:14:09.345Z"}
{"msg":"@guoger: In the first case, what is the sequence of messages that the OSN sees? Let's start with the config message that gets resubmitted with an offset of 5 and take it from there.","username":"kostas","ts":"2017-10-31T09:14:09.345Z"}
{"msg":"","username":"guoger","ts":"2017-10-31T09:23:28.998Z","attachments":[{"type":"file","title":"msg_seq.jpeg","title_link":"/file-upload/7dXAiDQNnughRtwHG/msg_seq.jpeg","image_url":"/file-upload/7dXAiDQNnughRtwHG/msg_seq.jpeg","image_type":"image/jpeg","image_size":161466,"url":"/file-upload/7dXAiDQNnughRtwHG/msg_seq.jpeg","remote":false,"fileId":"7dXAiDQNnughRtwHG","fileName":"msg_seq.jpeg"}]}
{"msg":"@kostas this is the graph I came up with to show the message seq","username":"guoger","ts":"2017-10-31T09:23:48.487Z"}
{"msg":"*looking","username":"kostas","ts":"2017-10-31T09:23:54.800Z"}
{"msg":"I'm always curious.. what's your timezone? :P","username":"guoger","ts":"2017-10-31T09:28:43.485Z"}
{"msg":"EDT.","username":"kostas","ts":"2017-10-31T09:29:57.832Z"}
{"msg":"(It is admittedly impressive if you consider that I'm in bed by 9pm.)","username":"kostas","ts":"2017-10-31T09:31:20.972Z"}
{"msg":"(It is admittedly not impressive if you consider that I'm in bed by 9pm.)","username":"kostas","ts":"2017-10-31T09:31:20.972Z"}
{"msg":"I had an impression that you are literally working around the clock","username":"guoger","ts":"2017-10-31T09:32:05.979Z"}
{"msg":"sometimes I couldn't really tell if you stay up late or wake up early...","username":"guoger","ts":"2017-10-31T09:33:00.784Z"}
{"msg":"Shouldn't the inequality by `<=`?","username":"kostas","ts":"2017-10-31T09:40:01.646Z"}
{"msg":"Looking at the comment where we suggest it's turned to `>=`?","username":"kostas","ts":"2017-10-31T09:40:16.218Z"}
{"msg":"Looking at the comment where we suggest it's turned to `>=`.","username":"kostas","ts":"2017-10-31T09:40:16.218Z"}
{"msg":"Looking at the comment where the suggestion is to switch to `>=`.","username":"kostas","ts":"2017-10-31T09:40:16.218Z"}
{"msg":"I believe it's a typo. It's `<=` in the conversation here","username":"guoger","ts":"2017-10-31T09:41:02.216Z"}
{"msg":"Ah, let me look again.","username":"kostas","ts":"2017-10-31T09:41:17.139Z"}
{"msg":"Good drawing BTW, thanks.","username":"kostas","ts":"2017-10-31T09:41:22.342Z"}
{"msg":"OO is Original Offset BTW","username":"guoger","ts":"2017-10-31T09:47:50.863Z"}
{"msg":"> Also, we don't block ingress msg while a brand new orderer is catching up, where resubmission could very likely happen...\nWhy do you say this?","username":"kostas","ts":"2017-10-31T09:53:57.767Z"}
{"msg":"> Also, we don't block ingress msg while a brand new orderer is catching up, where resubmission could very likely happen...\nHm, what makes you say this?","username":"kostas","ts":"2017-10-31T09:53:57.767Z"}
{"msg":"You are still going to hit line 787, right?","username":"kostas","ts":"2017-10-31T09:54:23.920Z"}
{"msg":"@kostas \n\n> Hm, what makes you say this?\n\nThe orderer does not/cannot know that the config sequence will be advancing in the future.   Consider a simple chain, genesis, 100k txs, then reconfiguration to sequence 2.  While the new orderer is catching up, he will have config sequence 1 until he has replayed all 100k txes, then he will move to seq 2.  If at any point during this process he receives a `Broadcast`, he will forward it with config seq 0.  Which, will obviously need to be replayed.","username":"jyellick","ts":"2017-10-31T14:20:55.618Z"}
{"msg":"I'm not sure that this is so much of an issue though.  I believe our recommended procedure for adding an orderer would be to:\n\n1. Bootstrap the orderer with the genesis block, or some backup of the ledger.\n2. Wait for the new orderer to come completely in sync with the rest of the OSNs\n3. Modify the configuration of each channel to add the new OSN to the list of OSNs.","username":"jyellick","ts":"2017-10-31T14:22:13.747Z"}
{"msg":"So, hopefully, no one is actually referencing your new orderer until he is all the way caught up","username":"jyellick","ts":"2017-10-31T14:22:26.086Z"}
{"msg":"ACK, agreed. Not really an issue.","username":"kostas","ts":"2017-10-31T15:04:03.879Z"}
{"msg":"ACK, understood. I agree, not really an issue.","username":"kostas","ts":"2017-10-31T15:04:03.879Z"}
{"msg":"Has joined the channel.","username":"simsc","ts":"2017-10-31T21:28:56.355Z","type":"uj"}
{"msg":"yep, I just wanted to point it out, and maybe we should document it somewhere. Also, I feel it should be taken into consideration while designing the ledger-prune feature. cc @sanchezl ","username":"guoger","ts":"2017-11-01T01:39:41.117Z"}
{"msg":"@sanchezl if you need some help reviewing/collaborating on the doc, let me know :)","username":"guoger","ts":"2017-11-01T13:29:05.425Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=LiCMzsB9BnGzg6TyX) @kostas @jyellick I still want some suggestions on this, so that I could update  https://gerrit.hyperledger.org/r/c/13963, thx a lot!!!","username":"guoger","ts":"2017-11-03T10:22:06.411Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=LiCMzsB9BnGzg6TyX","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=LiCMzsB9BnGzg6TyX","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Please remind me -- what does consistent metadata in this case buys you?","username":"kostas","ts":"2017-11-03T10:31:41.587Z"}
{"msg":"Please remind me -- what does consistent metadata in this case buy you?","username":"kostas","ts":"2017-11-03T10:31:41.587Z"}
{"msg":"ah, let me elaborate a bit. It is to address the second case @jyellick pointed out in that CR:\n> Consider two OSNs in a consistent state, both of which receive a config message which is out of date (old config sequence).  OSN1 processes the config and finds it invalid for some non-deterministic reason (say cert expiration), while OSN2 processes the config and resubmits it.  Then on commit, lastOriginalOffsetProcessed advances on both, but the lastResubmittedConfigOffset is still old on OSN1.\nThe root cause is notorious non-determinism. The `LRCO` is advanced in orderer who resubmits the msg, but *not advanced* in those who don't. However, I think simply converting the equation to less-equal is probably not sufficient in this case, as *we will be committing blocks with different metadata (LRCO)*. A simple fix would be to advance `LRCO` if `OO > LRCO` when a resubmitted config msg is received.","username":"guoger","ts":"2017-11-03T10:47:56.380Z"}
{"msg":"ah, let me elaborate a bit. It is to address the second case @jyellick pointed out in that CR:\n> Consider two OSNs in a consistent state, both of which receive a config message which is out of date (old config sequence).  OSN1 processes the config and finds it invalid for some non-deterministic reason (say cert expiration), while OSN2 processes the config and resubmits it.  Then on commit, lastOriginalOffsetProcessed advances on both, but the lastResubmittedConfigOffset is still old on OSN1.\nThe root cause is notorious non-determinism. The `LRCO` is advanced in orderer who resubmits the msg, but *not advanced* in those who don't. However, I think simply converting the equation to less-equal is probably not sufficient in this case, as *we will be committing blocks with different metadata (LRCO)*.\nMy proposal is to advance `LRCO` if `OO > LRCO` when a resubmitted config msg is received.","username":"guoger","ts":"2017-11-03T10:47:56.380Z"}
{"msg":"@kostas ","username":"guoger","ts":"2017-11-03T10:48:00.640Z"}
{"msg":"This is really just a nit, but I want to point out that we probably should alway enforce consistent metadata across network, even if it doesn't harm not to do so. Essentially I feel our code is getting more and more error-prone as we keep adding more fields and logics to check them.","username":"guoger","ts":"2017-11-03T10:50:35.199Z"}
{"msg":"Also I replied in https://jira.hyperledger.org/browse/FAB-6803?focusedCommentId=34306&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-34306","username":"guoger","ts":"2017-11-03T11:58:15.433Z"}
{"msg":"> My proposal is to advance `LRCO` if `OO > LRCO` when a resubmitted config msg is received.\n@guoger: If it's trivial to produce this patchset, do so and we can review its merits appropriately.","username":"kostas","ts":"2017-11-04T13:23:23.322Z"}
{"msg":"Inconsistent metadata across the network, esp. on these esoteric fields, is very low on my list of concerns though.","username":"kostas","ts":"2017-11-04T13:23:27.968Z"}
{"msg":"This will hopefully be the last time we mess around with adding new metadata fields and checks for some time, so if we what we have so far works, we're good.","username":"kostas","ts":"2017-11-04T13:23:44.181Z"}
{"msg":"@guoger: Thinking aloud and I'm tired, but do you think there's a meaningful (i.e. non-boring, easy-to-follow) playback that can be made out of your Kafka non-determinism work? Give it some thought, and if you believe this can be done, let's consider adding it here: https://wiki.hyperledger.org/projects/fabric/playbacks","username":"kostas","ts":"2017-11-08T02:56:50.156Z"}
{"msg":"@kostas interesting... I didn't know there's a playback :P I think it could be done, but probably not an one-hour talk. I think 30 min would be sufficient for this..","username":"guoger","ts":"2017-11-08T03:59:47.014Z"}
{"msg":"30 minutes is great.","username":"kostas","ts":"2017-11-08T13:14:36.583Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3KsbKN4cZLHN2eHWi) @kostas @gouger, I've been performing some tests on v1.0.4 where I move chains from one orderer to another. I've discovered that if I move a chain, without the index that contains the offsets of the blocks in the chain storage, the indexes do not match, meaning that there is some variation in the blocks across the two orderers. I would suspect maybe a difference in the metadata (in v1.0.4 we only add last_offset_persisted). Could the last_offset_persisted metadata (a uint64 persisted as a varint) be different on the two orderers? ","username":"sanchezl","ts":"2017-11-09T04:58:13.597Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3KsbKN4cZLHN2eHWi","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3KsbKN4cZLHN2eHWi","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3KsbKN4cZLHN2eHWi) @kostas @gouger, I've been performing some tests on v1.0.4 where I move chains from one orderer to another. I've discovered that if I move a chain, without the index that contains the offsets of the blocks in the chain storage, the indexes do not match, meaning that there is some variation in the blocks across the two orderers. I would suspect maybe a difference in the metadata (in v1.0.4 we only add last_offset_persisted). Could the last_offset_persisted metadata (a uint64 persisted as a varint) be different on the two orderers? If so,we might already have inconsistent metadata. I don't see that as a problem though.","username":"sanchezl","ts":"2017-11-09T04:58:13.597Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3KsbKN4cZLHN2eHWi","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3KsbKN4cZLHN2eHWi","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@sanchezl AFAIK, `last_offset_persisted` should be consistent across the OSNs. How do you move chains? copying ledger files elsewhere and bootstrap an orderer there?","username":"guoger","ts":"2017-11-09T08:11:32.261Z"}
{"msg":"@guoger , yes copying files.  I’m looking into it with the ledger folks, might be something else going on with the ledger impl itself. ","username":"sanchezl","ts":"2017-11-09T10:55:15.552Z"}
{"msg":"@sanchezl: Interesting. I was under the impression that you can simply delete the index folder and it will be rebuilt automatically: https://chat.hyperledger.org/channel/fabric-ledger?msg=eA5khDwmhjBbFkHY2","username":"kostas","ts":"2017-11-09T12:46:13.383Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-ledger?msg=eA5khDwmhjBbFkHY2","url":"https://chat.hyperledger.org/channel/fabric-ledger?msg=eA5khDwmhjBbFkHY2","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Then you'd end up with an index that's consistent with your orderer's ledger. I am guessing that is not what you're seeing? (Or are you trying a slightly different variation?_","username":"kostas","ts":"2017-11-09T12:47:07.649Z"}
{"msg":"Then you'd end up with an index that's consistent with your orderer's ledger. I am guessing that is not what you're seeing? (Or are you trying a slightly different variation?)","username":"kostas","ts":"2017-11-09T12:47:07.649Z"}
{"msg":"@kostas: I was trying a variation where I copied the chain but did not delete the existing index (so no index rebuild). While I would not recommend those exact steps, the ledger team felt that the index should of still been valid for the blocks thats existed before the copy, but it wasn't. Deleting the index first, would solve the problem, as the index, as of version v1.0.4, would rebuild automatically.","username":"sanchezl","ts":"2017-11-09T14:56:41.191Z"}
{"msg":"Got it, thank you.","username":"kostas","ts":"2017-11-09T14:57:58.850Z"}
{"msg":"Has joined the channel.","username":"jetsginza","ts":"2017-11-13T02:33:21.239Z","type":"uj"}
{"msg":"@jyellick I saw your comments in [blocking ingress message patch](https://gerrit.hyperledger.org/r/#/c/13963/), thx! I'll wait for other folks to give another round of review and rebase/revise altogether, cc @kostas @sanchezl ","username":"guoger","ts":"2017-11-14T01:36:30.337Z"}
{"msg":"Has joined the channel.","username":"qiang0723","ts":"2017-11-16T06:57:20.808Z","type":"uj"}
{"msg":"My mind is slightly blown by the fact that (a) such a library exists, (b) @sanchezl found it, and (c) it fits our needs for the Kafka versioning problem perfectly: https://github.com/hashicorp/go-version and https://gerrit.hyperledger.org/r/c/15643/","username":"kostas","ts":"2017-11-21T22:14:42.248Z"}
{"msg":"Has joined the channel.","username":"jackeyliliang","ts":"2017-11-24T02:59:52.088Z","type":"uj"}
{"msg":"Has joined the channel.","username":"arjanvaneersel","ts":"2017-11-27T17:08:40.632Z","type":"uj"}
{"msg":"```$ protoc --go_out=. *.proto\napp.pb.go: Tried to write the same file twice.```","username":"kostas","ts":"2017-11-29T16:52:27.585Z"}
{"msg":"Anyone bumped into this before? My Google-fu fails me.","username":"kostas","ts":"2017-11-29T16:52:37.413Z"}
{"msg":"What am I missing here?","username":"kostas","ts":"2017-11-29T17:26:06.015Z"}
{"msg":"```~/Go/src/github.com/kchristidis/float (master)* $ protoc --version\nlibprotoc 3.5.0\n~/Go/src/github.com/kchristidis/float (master)* $ protoc app.proto\n~/Go/src/github.com/kchristidis/float (master)* $ ls -lT app.pb.go\n-rw-r--r--  1 kchrist  staff  6529 Nov 29 12:24:27 2017 app.pb.go\n~/Go/src/github.com/kchristidis/float (master)* $\n~/Go/src/github.com/kchristidis/float (master)* $\n~/Go/src/github.com/kchristidis/float (master)* $ rm app.pb.go\n~/Go/src/github.com/kchristidis/float (master)* $ protoc --go_out=. app.proto\napp.pb.go: Tried to write the same file twice.\n~/Go/src/github.com/kchristidis/float (master)* $ ls -lT app.pb.go\nls: app.pb.go: No such file or directory\n~/Go/src/github.com/kchristidis/float (master)* $\n~/Go/src/github.com/kchristidis/float (master)* $\n~/Go/src/github.com/kchristidis/float (master)* $ protoc --go_out=plugins=grpc:. app.proto\napp.pb.go: Tried to write the same file twice.\n~/Go/src/github.com/kchristidis/float (master)* $ ls -lT app.pb.go\nls: app.pb.go: No such file or directory```","username":"kostas","ts":"2017-11-29T17:26:25.474Z"}
{"msg":"```~/Go/src/github.com/kchristidis/float (master)* $ go version\ngo version go1.9.2 darwin/amd64\n~/Go/src/github.com/kchristidis/float (master)* $ protoc --version\nlibprotoc 3.5.0\n~/Go/src/github.com/kchristidis/float (master)* $ protoc app.proto\n~/Go/src/github.com/kchristidis/float (master)* $ ls -lT app.pb.go\n-rw-r--r--  1 kchrist  staff  6529 Nov 29 12:24:27 2017 app.pb.go\n~/Go/src/github.com/kchristidis/float (master)* $\n~/Go/src/github.com/kchristidis/float (master)* $\n~/Go/src/github.com/kchristidis/float (master)* $ rm app.pb.go\n~/Go/src/github.com/kchristidis/float (master)* $ protoc --go_out=. app.proto\napp.pb.go: Tried to write the same file twice.\n~/Go/src/github.com/kchristidis/float (master)* $ ls -lT app.pb.go\nls: app.pb.go: No such file or directory\n~/Go/src/github.com/kchristidis/float (master)* $\n~/Go/src/github.com/kchristidis/float (master)* $\n~/Go/src/github.com/kchristidis/float (master)* $ protoc --go_out=plugins=grpc:. app.proto\napp.pb.go: Tried to write the same file twice.\n~/Go/src/github.com/kchristidis/float (master)* $ ls -lT app.pb.go\nls: app.pb.go: No such file or directory```","username":"kostas","ts":"2017-11-29T17:26:25.474Z"}
{"msg":"Notice that the first (and only) successful invocation of `protoc` gives me an `app.pb.go` file that, suprisingly, includes the stub for the gRPC service definition in `app.proto`.","username":"kostas","ts":"2017-11-29T17:27:15.696Z"}
{"msg":"It gets even weirder:","username":"kostas","ts":"2017-11-29T17:28:34.089Z"}
{"msg":"```~/Go/src/github.com/kchristidis/float (master)* $ protoc --go_out=test app.proto\n~/Go/src/github.com/kchristidis/float (master)* $ ls -lT test/app.pb.go\n-rw-r--r--  1 kchrist  staff  3527 Nov 29 12:28:11 2017 test/app.pb.go```","username":"kostas","ts":"2017-11-29T17:28:37.751Z"}
{"msg":"This invocation with `--go_out` works as expected. And notice that `app.pb.go` is smaller, _as expected_, since it doesn't contain the gRPC service stub.","username":"kostas","ts":"2017-11-29T17:29:32.468Z"}
{"msg":"Also as expected:","username":"kostas","ts":"2017-11-29T17:29:59.503Z"}
{"msg":"```~/Go/src/github.com/kchristidis/float (master)* $ protoc --go_out=plugins=grpc:test app.proto\n~/Go/src/github.com/kchristidis/float (master)* $ ls -lT test/app.pb.go\n-rw-r--r--  1 kchrist  staff  6529 Nov 29 12:29:49 2017 test/app.pb.go\n```","username":"kostas","ts":"2017-11-29T17:30:04.487Z"}
{"msg":"Agreed that it's all very bizarre.  Have you tried via `make protos`? Curious if it's a local binary issue for you","username":"jyellick","ts":"2017-11-29T17:30:10.767Z"}
{"msg":"(Or even simply executing from inside the fabric image which does so using that version of proto)","username":"jyellick","ts":"2017-11-29T17:30:35.036Z"}
{"msg":"Am I mistaken, or `make protos` will only work only for the `*.proto` definition inside the `fabric` dir?","username":"kostas","ts":"2017-11-29T17:31:41.335Z"}
{"msg":"Am I mistaken, or `make protos` will only work only for the `*.proto` definitions inside the `fabric` dir?","username":"kostas","ts":"2017-11-29T17:31:41.335Z"}
{"msg":"Meanwhile, I have uninstalled and reinstalled `protoc` and `protoc-gen-go` on my machine w/ no luck.","username":"kostas","ts":"2017-11-29T17:33:23.632Z"}
{"msg":"> Am I mistaken, or `make protos` will only work only for the `*.proto` definitions inside the `fabric` dir?\n\nCorrect","username":"jyellick","ts":"2017-11-29T17:33:45.960Z"}
{"msg":"No point in wasting anybody else's cycles here, and I guess I'll figure it out eventually, was just wondering whether I'm missing something obvious.","username":"kostas","ts":"2017-11-29T17:33:47.285Z"}
{"msg":"Have you attempted in Vagrant or on some other host? I could try running it on my local machine if want to send me the proto","username":"jyellick","ts":"2017-11-29T17:34:35.171Z"}
{"msg":"Ah, let me give it a shot in Vagrant. It does piss me off though that I can't figure it out yet. (And even if I could make it work with `make protos` or Vagrant, the downside is that this would prevent me from iterating as fast as I'd like.) Working out that raft implementation but I'm treating as an entirely different project for now to cut down on unneeded dependencies.","username":"kostas","ts":"2017-11-29T17:38:57.631Z"}
{"msg":"Ah, let me give it a shot in Vagrant. It does piss me off though that I can't figure it out yet. (And even if I could make it work with `make protos` or Vagrant, the downside is that this would prevent me from iterating as fast as I'd like.) Working on that raft implementation but I'm treating as an entirely different project for now to cut down on unneeded dependencies.","username":"kostas","ts":"2017-11-29T17:38:57.631Z"}
{"msg":"Ah, let me give it a shot in Vagrant. It does piss me off though that I can't figure it out yet. (And even if I could make it work with `make protos` or Vagrant, the downside is that this would prevent me from iterating as fast as I'd like.) Working on that raft implementation but I'm treating it as an entirely different project for now to cut down on unneeded dependencies.","username":"kostas","ts":"2017-11-29T17:38:57.631Z"}
{"msg":"Argh, works w/o issues in Vagrant:","username":"kostas","ts":"2017-11-29T17:47:55.626Z"}
{"msg":"```ubuntu@hyperledger-devenv:5b38cbc:/opt/gopath/src/github.com/hyperledger/fabric$ go version\ngo version go1.9 linux/amd64\nubuntu@hyperledger-devenv:5b38cbc:/opt/gopath/src/github.com/hyperledger/fabric$ protoc --version\nlibprotoc 3.5.0\nubuntu@hyperledger-devenv:5b38cbc:/opt/gopath/src/github.com/hyperledger/fabric$ protoc --go_out=. app.proto\nubuntu@hyperledger-devenv:5b38cbc:/opt/gopath/src/github.com/hyperledger/fabric$ ls -la app.pb.go\n-rw-r--r-- 1 ubuntu ubuntu 4025 Nov 29 17:46 app.pb.go\nubuntu@hyperledger-devenv:5b38cbc:/opt/gopath/src/github.com/hyperledger/fabric$ protoc --go_out=plugins=grpc:. app.proto\nubuntu@hyperledger-devenv:5b38cbc:/opt/gopath/src/github.com/hyperledger/fabric$ ls -la app.pb.go\n-rw-r--r-- 1 ubuntu ubuntu 7027 Nov 29 17:47 app.pb.go\nubuntu@hyperledger-devenv:5b38cbc:/opt/gopath/src/github.com/hyperledger/fabric$```","username":"kostas","ts":"2017-11-29T17:48:04.979Z"}
{"msg":"```ubuntu@hyperledger-devenv:5b38cbc:/opt/gopath/src/github.com/hyperledger/fabric$ go version\ngo version go1.9 linux/amd64\nubuntu@hyperledger-devenv:5b38cbc:/opt/gopath/src/github.com/hyperledger/fabric$ protoc --version\nlibprotoc 3.5.0\nubuntu@hyperledger-devenv:5b38cbc:/opt/gopath/src/github.com/hyperledger/fabric$ protoc --go_out=. app.proto\nubuntu@hyperledger-devenv:5b38cbc:/opt/gopath/src/github.com/hyperledger/fabric$ ls -la app.pb.go\n-rw-r--r-- 1 ubuntu ubuntu 4025 Nov 29 17:46 app.pb.go\nubuntu@hyperledger-devenv:5b38cbc:/opt/gopath/src/github.com/hyperledger/fabric$ protoc --go_out=plugins=grpc:. app.proto\nubuntu@hyperledger-devenv:5b38cbc:/opt/gopath/src/github.com/hyperledger/fabric$ ls -la app.pb.go\n-rw-r--r-- 1 ubuntu ubuntu 7027 Nov 29 17:47 app.pb.go\n```","username":"kostas","ts":"2017-11-29T17:48:04.979Z"}
{"msg":"Two differences compared to my local environment: host OS and Go version (I'm on 1.9.2)","username":"kostas","ts":"2017-11-29T17:48:56.349Z"}
{"msg":"Anyway, thanks for the suggestion @jyellick. At least I can hack my way around it like this for the time being.","username":"kostas","ts":"2017-11-29T17:49:17.197Z"}
{"msg":"@guoger and @sanchezl I know both of you use Macs -- I'm curious if you're having issues with `protoc` as well.","username":"kostas","ts":"2017-11-29T17:49:44.004Z"}
{"msg":"@kostas,","username":"sanchezl","ts":"2017-11-29T19:53:01.772Z"}
{"msg":"@kostas, I don't have a protoc compiled in my env, but here is a similar flow using the `fabric-buildenv` docker images:\n```Firehawk:kostas sanchezl$ sw_vers \nProductName:\tMac OS X\nProductVersion:\t10.13.1\nBuildVersion:\t17B48\nFirehawk:kostas sanchezl$ go version\ngo version go1.9.2 darwin/amd64\nFirehawk:kostas sanchezl$ protoc --version\n-bash: protoc: command not found\nFirehawk:kostas sanchezl$ docker run -i --rm  -v $PWD:/opt/gopath/src/github.com/hyperledger/fabric -w /opt/gopath/src/github.com/hyperledger/fabric hyperledger/fabric-buildenv protoc --version\nlibprotoc 3.1.0\nFirehawk:kostas sanchezl$ docker run -i --rm  -v $PWD:/opt/gopath/src/github.com/hyperledger/fabric -w /opt/gopath/src/github.com/hyperledger/fabric hyperledger/fabric-buildenv protoc app.version\nMissing output directives.\nFirehawk:kostas sanchezl$ ls -l \ntotal 8\n-rw-r--r--@ 1 sanchezl  staff  298 Nov 29 14:05 app.proto\nFirehawk:kostas sanchezl$ docker run -i --rm  -v $PWD:/opt/gopath/src/github.com/hyperledger/fabric -w /opt/gopath/src/github.com/hyperledger/fabric hyperledger/fabric-buildenv protoc app.proto\nMissing output directives.\nFirehawk:kostas sanchezl$ docker run -i --rm  -v $PWD:/opt/gopath/src/github.com/hyperledger/fabric -w /opt/gopath/src/github.com/hyperledger/fabric hyperledger/fabric-buildenv protoc --go_out=. app.proto\nFirehawk:kostas sanchezl$ ls -l \ntotal 16\n-rw-r--r--  1 sanchezl  staff  4031 Nov 29 14:50 app.pb.go\n-rw-r--r--@ 1 sanchezl  staff   298 Nov 29 14:05 app.proto\nFirehawk:kostas sanchezl$ rm app.pb.go \nFirehawk:kostas sanchezl$ ls -l \ntotal 8\n-rw-r--r--@ 1 sanchezl  staff  298 Nov 29 14:05 app.proto\nFirehawk:kostas sanchezl$ docker run -i --rm  -v $PWD:/opt/gopath/src/github.com/hyperledger/fabric -w /opt/gopath/src/github.com/hyperledger/fabric hyperledger/fabric-buildenv protoc --go_out=. app.proto\nFirehawk:kostas sanchezl$ ls -l \ntotal 16\n-rw-r--r--  1 sanchezl  staff  4031 Nov 29 14:51 app.pb.go\n-rw-r--r--@ 1 sanchezl  staff   298 Nov 29 14:05 app.proto\nFirehawk:kostas sanchezl$ docker run -i --rm  -v $PWD:/opt/gopath/src/github.com/hyperledger/fabric -w /opt/gopath/src/github.com/hyperledger/fabric hyperledger/fabric-buildenv protoc --go_out=. app.proto\nFirehawk:kostas sanchezl$ ls -l \ntotal 16\n-rw-r--r--  1 sanchezl  staff  4031 Nov 29 14:51 app.pb.go\n-rw-r--r--@ 1 sanchezl  staff   298 Nov 29 14:05 app.proto\nFirehawk:kostas sanchezl$ docker run -i --rm  -v $PWD:/opt/gopath/src/github.com/hyperledger/fabric -w /opt/gopath/src/github.com/hyperledger/fabric hyperledger/fabric-buildenv protoc --go_out=plugins=grpc:. app.proto\nFirehawk:kostas sanchezl$ ls -l\ntotal 24\n-rw-r--r--  1 sanchezl  staff  7038 Nov 29 14:52 app.pb.go\n-rw-r--r--@ 1 sanchezl  staff   298 Nov 29 14:05 app.proto\nFirehawk:kostas sanchezl$ ```","username":"sanchezl","ts":"2017-11-29T19:53:01.772Z"}
{"msg":"@kostas, I don't have a protoc compiled in my env, but here is a similar flow using the `fabric-buildenv` docker images:\n```Firehawk:kostas sanchezl$ sw_vers \nProductName:\tMac OS X\nProductVersion:\t10.13.1\nBuildVersion:\t17B48\nFirehawk:kostas sanchezl$ go version\ngo version go1.9.2 darwin/amd64\nFirehawk:kostas sanchezl$ protoc --version\n-bash: protoc: command not found\nFirehawk:kostas sanchezl$ docker run -i --rm  -v $PWD:/opt/gopath/src/github.com/hyperledger/fabric -w /opt/gopath/src/github.com/hyperledger/fabric hyperledger/fabric-buildenv protoc --version\nlibprotoc 3.1.0\nFirehawk:kostas sanchezl$ ls -l \ntotal 8\n-rw-r--r--@ 1 sanchezl  staff  298 Nov 29 14:05 app.proto\nFirehawk:kostas sanchezl$ docker run -i --rm  -v $PWD:/opt/gopath/src/github.com/hyperledger/fabric -w /opt/gopath/src/github.com/hyperledger/fabric hyperledger/fabric-buildenv protoc app.proto\nMissing output directives.\nFirehawk:kostas sanchezl$ docker run -i --rm  -v $PWD:/opt/gopath/src/github.com/hyperledger/fabric -w /opt/gopath/src/github.com/hyperledger/fabric hyperledger/fabric-buildenv protoc --go_out=. app.proto\nFirehawk:kostas sanchezl$ ls -l \ntotal 16\n-rw-r--r--  1 sanchezl  staff  4031 Nov 29 14:50 app.pb.go\n-rw-r--r--@ 1 sanchezl  staff   298 Nov 29 14:05 app.proto\nFirehawk:kostas sanchezl$ rm app.pb.go \nFirehawk:kostas sanchezl$ ls -l \ntotal 8\n-rw-r--r--@ 1 sanchezl  staff  298 Nov 29 14:05 app.proto\nFirehawk:kostas sanchezl$ docker run -i --rm  -v $PWD:/opt/gopath/src/github.com/hyperledger/fabric -w /opt/gopath/src/github.com/hyperledger/fabric hyperledger/fabric-buildenv protoc --go_out=. app.proto\nFirehawk:kostas sanchezl$ ls -l \ntotal 16\n-rw-r--r--  1 sanchezl  staff  4031 Nov 29 14:51 app.pb.go\n-rw-r--r--@ 1 sanchezl  staff   298 Nov 29 14:05 app.proto\nFirehawk:kostas sanchezl$ docker run -i --rm  -v $PWD:/opt/gopath/src/github.com/hyperledger/fabric -w /opt/gopath/src/github.com/hyperledger/fabric hyperledger/fabric-buildenv protoc --go_out=. app.proto\nFirehawk:kostas sanchezl$ ls -l \ntotal 16\n-rw-r--r--  1 sanchezl  staff  4031 Nov 29 14:51 app.pb.go\n-rw-r--r--@ 1 sanchezl  staff   298 Nov 29 14:05 app.proto\nFirehawk:kostas sanchezl$ docker run -i --rm  -v $PWD:/opt/gopath/src/github.com/hyperledger/fabric -w /opt/gopath/src/github.com/hyperledger/fabric hyperledger/fabric-buildenv protoc --go_out=plugins=grpc:. app.proto\nFirehawk:kostas sanchezl$ ls -l\ntotal 24\n-rw-r--r--  1 sanchezl  staff  7038 Nov 29 14:52 app.pb.go\n-rw-r--r--@ 1 sanchezl  staff   298 Nov 29 14:05 app.proto\nFirehawk:kostas sanchezl$ ```","username":"sanchezl","ts":"2017-11-29T19:53:01.772Z"}
{"msg":"Thanks Luis. I'll keep that flow in mind as well.","username":"kostas","ts":"2017-11-29T19:56:33.229Z"}
{"msg":"I've also filed a bug against the golang/protobuf repo: https://github.com/golang/protobuf/issues/460","username":"kostas","ts":"2017-11-29T19:56:45.464Z"}
{"msg":"Has joined the channel.","username":"Russell-Columbia","ts":"2017-11-29T23:01:10.896Z","type":"uj"}
{"msg":"One remaining items for the lifecycle work which has not been tackled yet, is to isolate the resource update txes into their own blocks.  My initial thought had been to add something to the ChannelHeader protobuf, but it's not obvious what that would look like.  The simplest mechanism would be to simply switch off of the transaction type in the header.  I dislike this because it adds some, albeit very limited, knowledge of the peer processing model into the orderer.  On the other hand, since it would not modify any protos and be internal only to the orderer code only, it's definitely simplest.  Opinions?","username":"jyellick","ts":"2017-11-30T14:46:09.941Z"}
{"msg":"One remaining items for the lifecycle work which has not been tackled yet, is to isolate the resource update txes into their own blocks.  My initial thought had been to add something to the ChannelHeader protobuf, but it's not obvious what that would look like.  The simplest mechanism would be to simply switch off of the transaction type in the header.  I dislike this because it adds some, albeit very limited, knowledge of the peer processing model into the orderer.  On the other hand, since it would not modify any protos and be internal only to the orderer code, it's definitely simplest.  Opinions?","username":"jyellick","ts":"2017-11-30T14:46:09.941Z"}
{"msg":"@jyellick: So `if ChannelHeader.Type == PEER_RESOURCE_UPDATE`, proceed with isolation?","username":"kostas","ts":"2017-11-30T14:58:46.658Z"}
{"msg":"@jyellick: So if `ChannelHeader.Type == PEER_RESOURCE_UPDATE`, proceed with isolation?","username":"kostas","ts":"2017-11-30T14:58:46.658Z"}
{"msg":"That is the \"it's simple, but injects peer processing model\" solution","username":"jyellick","ts":"2017-11-30T14:59:14.132Z"}
{"msg":"How about using the `extension` field in the `ChannelHeader` for this? Meaning, you define a protobuf message for isolated messages, and you check whether a non-nil extension deserializes to this `Isolated` message successfully. If it does, you cut it into its own batch. There may be other drawbacks to this approach (it'll definitely be slower for one), but I like it because doesn't leak any of the peer processing model logic into the orderer.","username":"kostas","ts":"2017-11-30T15:03:58.694Z"}
{"msg":"Unfortunately, I think the `extension` field is already used by the peer for additional chaincode header information.  Since this header is used as the proposal header and then the channel header, I don't think we can modify that field.","username":"jyellick","ts":"2017-11-30T15:17:41.865Z"}
{"msg":"Additionally, you can't count on protobuf deserialization to fail if it is not the correct type.  If someone stored other information in there, there is no reason to expect it would not deserialize to the `Isolated` message type.","username":"jyellick","ts":"2017-11-30T15:18:44.702Z"}
{"msg":"> If someone stored other information in there, there is no reason to expect it would not deserialize to the `Isolated` message type.\nNot sure I follow?","username":"kostas","ts":"2017-11-30T15:28:48.154Z"}
{"msg":"Do we mean that given:\n\n```\nmessage Isolated {\n    bool val = 1;\n}\n\nmessage Custom {\n    bool val = 1;\n}\n```\nA serialized `Isolated` message may unmarshal to `Custom` w/o issues?","username":"kostas","ts":"2017-11-30T15:30:59.045Z"}
{"msg":"Do we mean that given:\n```\nmessage Isolated {\n    bool val = 1;\n}\n\nmessage Custom {\n    bool val = 1;\n}\n```\nA serialized `Isolated` message may unmarshal to `Custom` w/o issues?","username":"kostas","ts":"2017-11-30T15:30:59.045Z"}
{"msg":"Absolutely","username":"jyellick","ts":"2017-11-30T15:34:29.127Z"}
{"msg":"In fact, per your example it would _always_ deserialize without issues","username":"jyellick","ts":"2017-11-30T15:34:38.535Z"}
{"msg":"Yeah, this had not occured to me but makes perfect sense in hindsight.","username":"kostas","ts":"2017-11-30T15:34:57.559Z"}
{"msg":"In general, the only time you would see deserialization errors, are when the messages have the same field numbers, but different types. And the type encoding cannot be mistaken for another.","username":"jyellick","ts":"2017-11-30T15:35:50.408Z"}
{"msg":"In general, the only time you would see deserialization errors, are when the messages have the same field numbers, but different field types. And the type encoding cannot be mistaken for another.","username":"jyellick","ts":"2017-11-30T15:35:50.408Z"}
{"msg":"(For instance, I think you might be able to decode an int32 as a []byte, but perhaps not a string as an int32, but I'm not positive of the specifics)","username":"jyellick","ts":"2017-11-30T15:38:01.090Z"}
{"msg":"When do you need to settle on this? I dislike the idea of the orderer knowing that ` PEER_RESOURCE_UPDATE` is a thing and treating it as a special case, but if I can't come up with a better alternative, I'll shut up. (I do think it is a mistake though.)","username":"kostas","ts":"2017-11-30T15:38:42.791Z"}
{"msg":"When do you need to settle on this? I dislike the idea of the orderer knowing that `PEER_RESOURCE_UPDATE` is a thing and treating it as a special case, but if I can't come up with a better alternative, I'll shut up. (I do think it is a mistake though.)","username":"kostas","ts":"2017-11-30T15:38:42.791Z"}
{"msg":"The official hard deadline is effectively 2 weeks to code completion.","username":"jyellick","ts":"2017-11-30T15:39:19.303Z"}
{"msg":"I'd prefer to settle on this aspect sooner than later.  I've been putting it off because I can't find a solution I like, but also because I expect that we, the orderer devs, can come to consensus on this issue much faster than the other pieces I have been pushing.","username":"jyellick","ts":"2017-11-30T15:40:10.401Z"}
{"msg":"OK, I will see if I can come up with something better by EOD tomorrow. If there are no better suggestions from anyone else as well, we roll with the HeaderType one.","username":"kostas","ts":"2017-11-30T15:41:13.728Z"}
{"msg":"do we actually put timestamp on a block?","username":"guoger","ts":"2017-12-01T07:29:20.606Z"}
{"msg":"@guoger: Clients may set the ChannelHeader's timestamp field when pushing an envelope the ordering service, but that's about it when it comes to timestamps included on blocks. There is block timestamp. Also, this JIRA issue might be of interest to you: https://jira.hyperledger.org/browse/FAB-1430","username":"kostas","ts":"2017-12-01T13:46:51.463Z"}
{"msg":"Can we think of anything that may have caused a decrease of the ordering service's performance (as measured by tps) in this list of commits?","username":"kostas","ts":"2017-12-01T15:13:39.850Z"}
{"msg":"```$ git log 863d7848d4c536ec4d5ff416f3522570e122ab66.. orderer\n943f0ce574d3bcac7f9442e745aa7168e5992e9d [FAB-7105] Move orderer/common/util to common/util\n784deb5feef8cbb0f76ab8434bc2452befa567d3 Merge \"[FAB-7034] Configure orderer keepalive params\"\nd972b5453c99fd48f31e4120dc29d8ae4295e229 [FAB-7034] Configure orderer keepalive params\n0c028df008b73aa606abbe0ee06b37a4f9854210 [FAB-5969] Block ingress msg for reprocessed msg\nf7093140d47af369c9450cfb2c6171831d7bce8a [FAB-7044] Refactor gRPC server config code\n576114618c57f662d10ee5cecb3e07d27ac9b89a [FAB-6840] Consolidate configtxapi to configtx\n5d410fe106fc29403a7bbb0d1b15f8c279f346f6 [FAB-6839] configtx to directly utilize cb.Config\ndcf36eb5bb454934fbaec9f80b2c22e177e54740 [FAB-3603] Enable more strict code checking\n1d81a963840406673b0d55182825a2430b7ac385 Merge \"[FAB-6716] Enabled mutual TLS support for orderer\"\ne90b92ba6947d84ad5a4bdad5d1004f0bfd5819f [FAB-6716] Enabled mutual TLS support for orderer\nf844f860c4cc2a55f88279fca009b22662676f05 [FAB-5720] Re-submit tx if re-validation passes\n28024309ad1afe464aa146aff9151cf647aac470 [FAB-6143] Cleanup dead code\n2ef4823ec00934037af2f192532b5243a0538074 [FAB-6142] Move MakeChainCreationTranscation\n95b95e903baab281bef7324d44120ce9d862e545 [FAB-6140] Remove the provisional config encoder\n8a52d63e6b3877ae850ce47f2e7695b068172c3b Merge \"[FAB-6380] fix race condition in kafka chain Halt\"\n978c48cd64332de3c68d5ead3d961387524568c7 [FAB-6088] Add v1.1 application capabilities flag\n376c2ca28862d2c605e154d762b17db4183389fe [FAB-6485] Add capabilities hook for MSP version\ne76b396602c343277476faa26ca2c7064e314795 [FAB-6380] fix race condition in kafka chain Halt\n6fb5cbddee2dc179265916c3e2ff5b8cc5d4c1c4 [FAB-6509] fix error during consumption <nil>\nb6dc698d568d0896591d33959ff8246ce97af928 Merge \"[FAB-5949] add the progress for the broadcast_msg\"\nedd832333c81d1a40e9d49a0e412a0112e1e441a [FAB-5949] add the progress for the broadcast_msg\n361d60948f8693513d0d4278b78f3019cf95863e [FAB-6080] Fix unset mod_policy in channel create\n5f099e40863f2b8d9e0b07f4e0d463ce1a9e0b6d Merge \"[FAB-4768] don't kill deliver clients on first err\"\nf3fd1bf733d63d99990e7e0e91493b76b1def3b0 Merge \"[FAB-6047] mofidy the default channel name\"\n70a272e1be896a769727fae50101c1731f1343a9 Merge \"[FAB-5660] Improve UT coverage of solo consenter\"\n045910a6c876cefe785012a874a4c3ba31832f90 Merge \"[FAB-6072] Panic on incompatibilities\"\nd201af523382d619e71d5e926a02adb6f8531232 [FAB-6047] mofidy the default channel name\n366e978bcba24812c9841d3c7d8174ef04518ecb [FAB-6072] Panic on incompatibilities\n8998fd9d08304d27bc56b9327f427d73000af726 Merge \"[FAB-6132] Provide Kafka environment for benchmark\"\n44170d3203705dfb7c9e0ff0e9f2c513eccdd63b [FAB-6294] Fix stale reference to policy manager\nd151ef89c35c73b25a445e2096b4bada324d5a07 [FAB-4768] don't kill deliver clients on first err\n0e5bec33b2d442b701fbb9858e8db136f10544e5 FAB-6193 Update dev environment to latest tools\n7a3f162ecb3e4b901ca5d074d02a434727362677 [FAB-6132] Provide Kafka environment for benchmark```","username":"kostas","ts":"2017-12-01T15:13:46.080Z"}
{"msg":"I can't see anything that would hinder the orderer's ability to validate/process/order messages in the list above, but I might be missing something. Please have a look and let me know.","username":"kostas","ts":"2017-12-01T15:15:56.154Z"}
{"msg":"(At the end of it all, I think we may have to do some git-bisect.)","username":"kostas","ts":"2017-12-01T15:17:21.926Z"}
{"msg":"My first guess would be 0c028df008b73aa606abbe0ee06b37a4f9854210 since it introduces additional locking","username":"jyellick","ts":"2017-12-01T16:36:42.581Z"}
{"msg":"That is a very good guess. However, as our friends in Zurich informed me, the code they experimented with was no later than the week of November 13, so that would mean the first 4 commits are out of this list.","username":"kostas","ts":"2017-12-01T18:00:05.451Z"}
{"msg":"That is a very good guess. However, as our friends in Zurich informed me after I posted this, the code they experimented with was no later than the week of November 13, so that would mean the first 4 commits are out of this list.","username":"kostas","ts":"2017-12-01T18:00:05.451Z"}
{"msg":"That is a very good guess. However, as our friends in Zurich informed me after I posted this, the code they experimented with was published no later than the week of November 13, so that would mean the first 4 commits are out of this list.","username":"kostas","ts":"2017-12-01T18:00:05.451Z"}
{"msg":"For context for anyone reading this: the reason we're looking into this is because our colleagues in IBM Zurich are running performance experiments. They had seen an increase in throughput performance when they switched from 1.0.x to `master` around the end of September, but noticed a regression with the code they tested around the middle of November.","username":"kostas","ts":"2017-12-01T18:01:59.972Z"}
{"msg":"For context, for anyone reading this: the reason we're looking into this is because our colleagues in IBM Zurich are running performance experiments. They had seen an increase in throughput performance when they switched from 1.0.x to `master` around the end of September, but noticed a regression with the code they tested around the middle of November.","username":"kostas","ts":"2017-12-01T18:01:59.972Z"}
{"msg":"I got a plan to figure this out; we'll rebase on master, and do git-bisect to figure out where the regression happens exactly.","username":"kostas","ts":"2017-12-01T18:02:56.521Z"}
{"msg":"I think there's a fairly straightforward way of figuring this out; we'll rebase on master, and do `git-bisect` to figure out where the regression happens exactly.","username":"kostas","ts":"2017-12-01T18:02:56.521Z"}
{"msg":"@kostas Any inspiration on the block isolation?","username":"jyellick","ts":"2017-12-01T21:24:40.097Z"}
{"msg":"None so far, and this has been on the back of my mind all day. My work day’s not over yet (I’ll put in a couple of hours after 6pm), but I’m close to accepting defeat. I’ll post here to make it official though.","username":"kostas","ts":"2017-12-01T21:28:53.814Z"}
{"msg":"No rush, I am a bit burnt out myself from this lifecycle stuff, so will not plan on making any moves tonight","username":"jyellick","ts":"2017-12-01T21:29:35.475Z"}
{"msg":"Here's one last, unpolished thought that crossed my mind. We define a namespace under the configuration tree (a `Value` under `/Orderer/`?) where we enumerate `ChannelHeader` types that should be cut into their own block. This makes the coupling with the Fabric peer looser and doesn't leak info of its peer processing model. It also means we can modify the types that should be isolated later on without changing the orderer code. One obvious, big downside to this approach is that Go's lack of reflection will mean we have got go heavy on the `reflect` package to make things work. (And I'm not even sure it can work, but _if_ we agree that this suggestion has legs, we can test out its feasibility.)","username":"kostas","ts":"2017-12-02T13:02:30.072Z"}
{"msg":"Here's one last thought. We define a namespace under the configuration tree (a `Value` under `/Orderer/`?) where we enumerate `ChannelHeader` types that should be cut into their own block. This makes the coupling with the Fabric peer looser and doesn't leak info of its peer processing model. It also means we can modify the types that should be isolated later on without changing the orderer code. One obvious, big downside to this approach is that Go's lack of reflection will mean we have got go heavy on the `reflect` package to make things work. (And I'm not even sure it can work, but _if_ we agree that this suggestion has legs, we can test out its feasibility.)","username":"kostas","ts":"2017-12-02T13:02:30.072Z"}
{"msg":"Here's one last thought. We define a namespace under the configuration tree (a `Value` under `/Orderer/`?) where we enumerate `ChannelHeader` types that should be cut into their own block. This makes the coupling with the Fabric peer looser and doesn't leak info of its peer processing model. It also means we can modify the types that should be isolated later on without changing the orderer code. One obvious, big downside to this approach is that Go's lack of reflection will mean we have got go heavy on the `reflect` package to make things work. (And I'm not even sure it can work, but _if_ we agree that this suggestion has legs, we can evaluate its feasibility.)","username":"kostas","ts":"2017-12-02T13:02:30.072Z"}
{"msg":"Has joined the channel.","username":"simcan","ts":"2017-12-04T10:29:17.154Z","type":"uj"}
{"msg":"So, I don't think that reflection is particularly a problem here","username":"jyellick","ts":"2017-12-04T16:37:51.195Z"}
{"msg":"And, I would actually enumerate the types under `/Channel/Application` if it is information specified by the application to the orderer","username":"jyellick","ts":"2017-12-04T16:38:11.400Z"}
{"msg":"The biggest problem with this approach is actually the upgrade","username":"jyellick","ts":"2017-12-04T16:38:22.804Z"}
{"msg":"v1.0 channel configs will not define this type, but when upgraded for v1.1, to support the resources config, they would need to be there.","username":"jyellick","ts":"2017-12-04T16:38:57.644Z"}
{"msg":"I'm not saying it's impossible, we could add custom tx processing logic which adds the new value on upgrade to v1.1 capabilities (as we do already with respect to fixing the broken mod_policy), but it's a fair bit of additional complexity which I am not entirely sure I am sold on.","username":"jyellick","ts":"2017-12-04T16:39:50.222Z"}
{"msg":"What do you think @kostas ?","username":"jyellick","ts":"2017-12-04T16:39:56.468Z"}
{"msg":"Just to be clear: are you saying that the custom logic that will add the value when upgrading to v1.1 is a fair bit of additional complexity?","username":"kostas","ts":"2017-12-04T16:44:32.842Z"}
{"msg":"Or getting this framework to work in general would be more complex than necessary?","username":"kostas","ts":"2017-12-04T16:45:12.023Z"}
{"msg":"The first -- custom logic on upgrade is, generally throwaway code, but code which must be maintained until that upgrade scenario is no longer supported.  In general, I prefer to make any upgrade code as simple and small in scope as possible.  As I say, it can be done though.","username":"jyellick","ts":"2017-12-04T16:46:41.333Z"}
{"msg":"Understood. I want to suggest we go for it then. However, I know you share my concerns about leaking info from the peer to the orderer. So, if I'm underestimating the amount of work involved in this, and you want to go with the original plan, I won't block it even if I disagree.","username":"kostas","ts":"2017-12-04T16:56:26.086Z"}
{"msg":"Understood. I want to suggest we go for it then. However, I know you share my concerns about leaking info from the peer to the orderer. So, if I'm underestimating the amount of work involved in this, and you want to go with the original plan, I won't block it even though I disagree.","username":"kostas","ts":"2017-12-04T16:56:26.086Z"}
{"msg":"I'm fine with this, and I actually might piggy-back a bit onto this.  I would like to define some additional default policies, such as `/Channel/Application/{Any,Majoity,All}OrgsPeers`, `/Channel/Application/{Any,Majority,All}OrgAdmins`.  If we are already adding a new config value, could also add these in as well","username":"jyellick","ts":"2017-12-04T16:59:23.279Z"}
{"msg":"I'm fine with this, and I actually might piggy-back a bit onto this.  I would like to define some additional default policies, such as `/Channel/Application/{Any,Majoity,All}OrgsPeers`, `/Channel/Application/{Any,Majority,All}OrgsAdmins`.  If we are already adding a new config value, could also add these in as well","username":"jyellick","ts":"2017-12-04T16:59:23.279Z"}
{"msg":"I'm fine with this, and I actually might piggy-back a bit onto this.  I would like to define some additional default policies, such as `/Channel/Application/{Any,Majority,All}OrgsPeers`, `/Channel/Application/{Any,Majority,All}OrgsAdmins`.  If we are already adding a new config value, could also add these in as well","username":"jyellick","ts":"2017-12-04T16:59:23.279Z"}
{"msg":"Ah, perfect. I remember you talking about this last Tuesday.","username":"kostas","ts":"2017-12-04T16:59:58.489Z"}
{"msg":"Would you mind updating https://jira.hyperledger.org/browse/FAB-6233 with your proposal?","username":"jyellick","ts":"2017-12-04T17:07:45.341Z"}
{"msg":"(Done.)","username":"kostas","ts":"2017-12-04T18:04:55.223Z"}
{"msg":"Do we know of a way to do `inline code` in a JIRA comment?","username":"kostas","ts":"2017-12-05T20:30:01.539Z"}
{"msg":"`{{inline code}}`","username":"jyellick","ts":"2017-12-05T20:30:24.517Z"}
{"msg":"You are a gentleman and a scholar, thanks.","username":"kostas","ts":"2017-12-05T20:30:35.657Z"}
{"msg":"Very intuitive syntax, I'd add.","username":"kostas","ts":"2017-12-05T20:30:46.299Z"}
{"msg":"I wish it did slack/RC style background coloring, but it is at least monospace.","username":"jyellick","ts":"2017-12-05T20:31:17.952Z"}
{"msg":"I don't like the fact that if you use the \"Visual\" interface, you need to apply the markup in a certain way (so that their JavaScript catches it and transforms it on the fly), otherwise your transformation won't work. For instance, if you do ``{{code}}`` but apply the end brackets first, you'll literally end up with ``code`` instead of `code`.","username":"kostas","ts":"2017-12-05T20:34:14.782Z"}
{"msg":"I don't like the fact that if you use the \"Visual\" interface, you need to apply the markup in a certain way (so that their JavaScript catches it and transforms it on the fly), otherwise your transformation won't work. For instance, if you do `{{code}}` but apply the end brackets first, you'll literally end up with ``code`` instead of `code`.","username":"kostas","ts":"2017-12-05T20:34:14.782Z"}
{"msg":"I don't like the fact that if you use the \"Visual\" interface, you need to apply the markup in a certain way (so that their JavaScript catches it and transforms it on the fly), otherwise your transformation won't work. For instance, if you do `{{code}}` but apply the end brackets first, you'll literally end up with {{code}} instead of `code`.","username":"kostas","ts":"2017-12-05T20:34:14.782Z"}
{"msg":"Quite right, I find myself sticking to the non-visual interface for composition, then flip over for proof reading","username":"jyellick","ts":"2017-12-05T20:35:56.013Z"}
{"msg":"That's a good one, perhaps I should adopt this strategy as well.","username":"kostas","ts":"2017-12-05T20:36:22.345Z"}
{"msg":"Don't know if I've posted about this here, but http://glogg.bonnefon.org/ is pretty amazing when it comes to analyzing logs.","username":"kostas","ts":"2017-12-05T22:03:52.204Z"}
{"msg":"Don't know if I've posted about this here before, but http://glogg.bonnefon.org/ is pretty amazing when it comes to analyzing logs.","username":"kostas","ts":"2017-12-05T22:03:52.204Z"}
{"msg":"Has joined the channel.","username":"wanghhao","ts":"2017-12-07T09:11:39.467Z","type":"uj"}
{"msg":"Has joined the channel.","username":"JayJong","ts":"2017-12-08T11:12:06.560Z","type":"uj"}
{"msg":"could somebody remind me again what `MSP` policy is for?\n```\nmessage Policy {\n    enum PolicyType {\n        UNKNOWN = 0; // Reserved to check for proper initialization\n        SIGNATURE = 1;\n        MSP = 2;\n        IMPLICIT_META = 3;\n    }\n    int32 type = 1; // For outside implementors, consider the first 1000 types reserved, otherwise one of PolicyType\n    bytes value = 2;\n}\n```","username":"guoger","ts":"2017-12-09T03:59:22.684Z"}
{"msg":"@guoger It's unimplemented -- it's something that the crypto folks had requested, but ultimately the SIGNATURE policy was sufficient","username":"jyellick","ts":"2017-12-10T04:03:41.943Z"}
{"msg":"@guoger It's unimplemented -- it's something that the crypto folks had requested, but ultimately the `SIGNATURE` policy was sufficient","username":"jyellick","ts":"2017-12-10T04:03:41.943Z"}
{"msg":"Has joined the channel.","username":"guolidong","ts":"2017-12-12T06:03:16.858Z","type":"uj"}
{"msg":"Somebody's asked me about pruning of ledger. I wonder what's the status? do we have a design doc of this? thx. cc @sanchezl ","username":"guoger","ts":"2017-12-12T07:22:45.097Z"}
{"msg":"I will not have an update on pruning design until January.","username":"sanchezl","ts":"2017-12-12T13:05:50.804Z"}
{"msg":"Can we kick this process off in its respective JIRA sometime this week? Even if it's just [a rough and incomplete draft](https://medium.com/@ienjoy/mcdonalds-theory-9216e1c9da7d) at the beginning, it is better than nothing, and it will allow others to chime in and contribute as well.","username":"kostas","ts":"2017-12-12T19:07:28.634Z"}
{"msg":"@kostas very interesting blog...","username":"guoger","ts":"2017-12-13T01:38:53.352Z"}
{"msg":"Anybody got the same issue here? https://gerrit.hyperledger.org/r/#/c/16045/\n> LICENSE file in this commit gives me line ending problems with git on OSX. basically i checked out latest master and this file is stubbornly stuck at \"changed but not staged\"","username":"guoger","ts":"2017-12-13T03:21:34.051Z"}
{"msg":"Ah, this seems to be a Mac git problem","username":"jyellick","ts":"2017-12-13T03:22:02.971Z"}
{"msg":"There is someone complaining about it in #fabric ","username":"jyellick","ts":"2017-12-13T03:22:15.085Z"}
{"msg":"He's pinged me directly as well, if you could post to #fabric to confirm the same problem, would appreciate it","username":"jyellick","ts":"2017-12-13T03:22:37.603Z"}
{"msg":"Will Lathi also confirmed same issue in that CR comments. I've suggested @manu to re-commit that file with proper line ending in #fabric ","username":"guoger","ts":"2017-12-13T03:39:55.930Z"}
{"msg":"Has joined the channel.","username":"manu","ts":"2017-12-13T03:39:56.039Z","type":"uj"}
{"msg":"Has left the channel.","username":"wanghhao","ts":"2017-12-18T10:06:23.244Z","type":"ul"}
{"msg":"Has joined the channel.","username":"zhishui","ts":"2017-12-19T08:12:04.075Z","type":"uj"}
{"msg":"I am looking over the upgrade doc and realize that something is not 100% clear to me regarding the `SetChannelModPolicyDuringCreate` fix.","username":"kostas","ts":"2017-12-20T00:05:22.980Z"}
{"msg":"Namely, the function's name and its description imply that it takes effect only during channel creation requests.","username":"kostas","ts":"2017-12-20T00:22:27.616Z"}
{"msg":"However given that you also want to have this fix so that you can do edits on the `/Channel` level, I am guessing that this is not only the case?","username":"kostas","ts":"2017-12-20T00:24:44.694Z"}
{"msg":"The trigger for this observation is the 2-step approach Jeff has adopted in his `upgrade.feature`, see: https://github.com/jeffgarratt/fabric-prototype/blob/master/features/upgrade.feature#L523","username":"kostas","ts":"2017-12-20T00:25:55.990Z"}
{"msg":"I am looking at the references to the `NewChannelConfig` method (which is the only method referencing `SetChannelModPolicyDuringCreate`) and both seem to apply only during the creation of a new channel. I suspect I may be misunderstanding something, particularly w/r/t the use of templates during configuration updates.","username":"kostas","ts":"2017-12-20T00:33:26.140Z"}
{"msg":"I am looking at the references to the `NewChannelConfig` method (which is the only method referencing `SetChannelModPolicyDuringCreate`) and both seem to apply only during the creation of a new channel. I suspect I may be missing something, particularly w/r/t the use of templates during configuration updates.","username":"kostas","ts":"2017-12-20T00:33:26.140Z"}
{"msg":"@kostas There are two (maybe three) pieces to this puzzle.\n\nFirst, there were two ways that your channel could be broken.\n\n1. You created the channel create tx with a version of `configxgen` prior to 1.0.1.\n2. You created the channel with a version of the `orderer`prior to 1.1.0 (or without the capability enabled)\n\nFor (1), this is a tool and it has been fixed, no non-determinism possible.  For (2), since the channel creation is validated by each orderer, they must do this consistently, this is why there is the check for `SetChannelModPolicyDuringCreate()`.\n\nSo, with (1) and (2) fixed, you can no longer create broken channels.\n\nHowever, none of this does anything to address the already broken channels.  So, this is where that custom upgrade process you described comes in.","username":"jyellick","ts":"2017-12-20T15:19:01.084Z"}
{"msg":"@jyellick: This is the bit I'm still not clear on.","username":"kostas","ts":"2017-12-20T15:59:18.088Z"}
{"msg":"@jyellick: This is the part I'm still not clear on.","username":"kostas","ts":"2017-12-20T15:59:18.088Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Kwdid7JJgs732XmJb","username":"kostas","ts":"2017-12-20T15:59:19.466Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Kwdid7JJgs732XmJb","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Kwdid7JJgs732XmJb","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Or to put differently:","username":"kostas","ts":"2017-12-20T15:59:47.846Z"}
{"msg":"> So, this is where that custom upgrade process you described comes in.","username":"kostas","ts":"2017-12-20T15:59:51.096Z"}
{"msg":"`SetChannelModPolicyDuringCreate()` is only related to channel creation, you are correct, it has nothing to do with the 'custom upgrade'","username":"jyellick","ts":"2017-12-20T16:00:19.887Z"}
{"msg":"There is no method exposed with respect to the custom upgrade, because this takes place within the configtx processing itself.","username":"jyellick","ts":"2017-12-20T16:00:43.399Z"}
{"msg":"https://github.com/hyperledger/fabric/blob/master/common/configtx/configmap.go#L159-L187","username":"jyellick","ts":"2017-12-20T16:01:13.077Z"}
{"msg":"Great, that's the piece that I was missing. Thank you.","username":"kostas","ts":"2017-12-20T16:03:16.324Z"}
{"msg":"So, this means that:","username":"kostas","ts":"2017-12-20T16:04:29.289Z"}
{"msg":"When you push a configuration update that creates a capabilities map under the Orderer config group, you will come up with a configuration that has all of its empty `mod_policy` fields set.","username":"kostas","ts":"2017-12-20T16:06:03.648Z"}
{"msg":"True, false?","username":"kostas","ts":"2017-12-20T16:06:20.051Z"}
{"msg":"I suspect there may be subtle cases that I'm missing with this statement.","username":"kostas","ts":"2017-12-20T16:06:37.304Z"}
{"msg":"True","username":"jyellick","ts":"2017-12-20T16:06:52.465Z"}
{"msg":"Because this is an admittedly hacky one-off which risks non-determinism, the rule was intentionally kept as simple as that.","username":"jyellick","ts":"2017-12-20T16:09:11.720Z"}
{"msg":"@sanchezl @guoger Would one of you have a chance to take a look at [ ](https://chat.hyperledger.org/channel/fabric-orderer?msg=7gW3kqzw2syNSu2bh) ? My gut says that Yacov is right and we should set up the auto-purging","username":"jyellick","ts":"2018-01-03T16:03:09.825Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer?msg=7gW3kqzw2syNSu2bh","url":"https://chat.hyperledger.org/channel/fabric-orderer?msg=7gW3kqzw2syNSu2bh","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@sanchezl @guoger Would one of you have a chance to take a look at [ ](https://chat.hyperledger.org/channel/fabric-orderer?msg=7gW3kqzw2syNSu2bh) ? My gut says that @yacovm  is right and we should set up the auto-purging","username":"jyellick","ts":"2018-01-03T16:03:09.825Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer?msg=7gW3kqzw2syNSu2bh","url":"https://chat.hyperledger.org/channel/fabric-orderer?msg=7gW3kqzw2syNSu2bh","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@sanchezl @guoger Would one of you have a chance to take a look at [ ](https://chat.hyperledger.org/channel/fabric-orderer?msg=7gW3kqzw2syNSu2bh) the below? My gut says that @yacovm  is right and we should set up the auto-purging","username":"jyellick","ts":"2018-01-03T16:03:09.825Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer?msg=7gW3kqzw2syNSu2bh","url":"https://chat.hyperledger.org/channel/fabric-orderer?msg=7gW3kqzw2syNSu2bh","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Thanks Jason ","username":"yacovm","ts":"2018-01-03T16:08:31.474Z"}
{"msg":"Has joined the channel.","username":"gurel","ts":"2018-01-03T17:46:50.310Z","type":"uj"}
{"msg":"@jyellick I'll take a look today","username":"guoger","ts":"2018-01-04T01:34:27.312Z"}
{"msg":"@jyellick @yacovm reading your request and I feel it's more of a problem for zk admins? should it be our responsibility to provide a recommended zk configuration? nevertheless, i suppose if we want to do this, it should be part of ZK dockerfile, like `ZK_AUTOPURGE_PURGEINTERVAL=1` and `ZK_AUTOPURGE_SNAPRETAINCOUNT=3`. ","username":"guoger","ts":"2018-01-04T06:01:56.676Z"}
{"msg":"Is there any downside to including those parameters? ","username":"jyellick","ts":"2018-01-04T06:03:00.736Z"}
{"msg":"not really.. however, if it's a busy zk cluster, admin shouldn't clear logs during peak hours as it affects performance significantly","username":"guoger","ts":"2018-01-04T06:04:17.528Z"}
{"msg":"not really.. however, if it's a busy zk cluster, admin shouldn't clear logs during peak hours as it affects performance significantly. so a cron job is actually better","username":"guoger","ts":"2018-01-04T06:04:17.528Z"}
{"msg":"my opinion on this is to leave everything to default, like what we are doing today","username":"guoger","ts":"2018-01-04T06:05:17.827Z"}
{"msg":"and in production deployment, operators should follow zk admin guide","username":"guoger","ts":"2018-01-04T06:05:59.284Z"}
{"msg":"There are no admins","username":"yacovm","ts":"2018-01-04T06:06:54.304Z"}
{"msg":"In the docler images we provide","username":"yacovm","ts":"2018-01-04T06:07:02.904Z"}
{"msg":"Thats how i see that","username":"yacovm","ts":"2018-01-04T06:07:14.948Z"}
{"msg":"Would like to hear from @kostas, for them images we provide, I would lean towards low maintenance over the performance. Certainly anyone in production should employ a qualified Kafka/ZK admin ","username":"jyellick","ts":"2018-01-04T06:07:15.811Z"}
{"msg":"Would like to hear from @kostas, but for the images we provide, I would lean towards low maintenance over the performance. Certainly anyone in production should employ a qualified Kafka/ZK admin ","username":"jyellick","ts":"2018-01-04T06:07:15.811Z"}
{"msg":"Would like to hear from @kostas, but for the images we provide, I would lean towards low maintenance over performance. Certainly anyone in production should employ a qualified Kafka/ZK admin ","username":"jyellick","ts":"2018-01-04T06:07:15.811Z"}
{"msg":"We provide images. If the org has admins then they would provode theor own zookeeper","username":"yacovm","ts":"2018-01-04T06:07:55.899Z"}
{"msg":"So the goal is to provide production-ready ZK images?","username":"guoger","ts":"2018-01-04T06:08:45.472Z"}
{"msg":"Also, performance? I thought zookeeper is used to elect a leader. Is it in the transaction critical path of kafka?","username":"yacovm","ts":"2018-01-04T06:08:50.633Z"}
{"msg":"oh, I meant performance of ZK, not kafka","username":"guoger","ts":"2018-01-04T06:09:20.652Z"}
{"msg":"oh, I meant performance of ZK, not kafka, that's why I said it shouldn't affect us much","username":"guoger","ts":"2018-01-04T06:09:20.652Z"}
{"msg":"The goal is to provide images that dont make the users disk fill up :wink:","username":"yacovm","ts":"2018-01-04T06:09:43.035Z"}
{"msg":"So it will not come here crying that kafka OSN is down, and he has no idea what to do","username":"yacovm","ts":"2018-01-04T06:10:14.999Z"}
{"msg":"LOL @ @jyellick  \"qualified kafka/ZK admim :joy:","username":"yacovm","ts":"2018-01-04T06:11:56.074Z"}
{"msg":"If we do this change then a qualified fabric admin doesnt need to be also a qualified ZK admin on top of other hats ","username":"yacovm","ts":"2018-01-04T06:14:30.687Z"}
{"msg":"If we do this change then a qualified fabric admin doesnt need to be also a qualified ZK admin","username":"yacovm","ts":"2018-01-04T06:14:30.687Z"}
{"msg":"LOL. alright, I'm not strongly against this, so if we've reached a consensus here, I'll submit a patch for it. cc @kostas ","username":"guoger","ts":"2018-01-04T06:16:35.278Z"}
{"msg":"Would also like to hear @mastersingh24 s opinion","username":"yacovm","ts":"2018-01-04T06:17:21.538Z"}
{"msg":"Has joined the channel.","username":"mastersingh24","ts":"2018-01-04T06:17:21.707Z","type":"uj"}
{"msg":"btw, @yacovm are you addressing this? https://chat.hyperledger.org/channel/fabric-orderer?msg=9pcGebhCaBrP596Ym","username":"guoger","ts":"2018-01-04T06:19:51.259Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer?msg=9pcGebhCaBrP596Ym","url":"https://chat.hyperledger.org/channel/fabric-orderer?msg=9pcGebhCaBrP596Ym","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Yes precisely","username":"yacovm","ts":"2018-01-04T06:30:55.782Z"}
{"msg":"@guoger ","username":"yacovm","ts":"2018-01-04T06:31:05.941Z"}
{"msg":"In for getting the `ZK_AUTOPURGE_*` settings in.","username":"kostas","ts":"2018-01-04T15:00:25.248Z"}
{"msg":"https://gerrit.hyperledger.org/r/#/c/16589/ -> https://jira.hyperledger.org/browse/FAB-7609\ncc @yacovm @kostas @jyellick ","username":"guoger","ts":"2018-01-05T05:33:54.581Z"}
{"msg":"@kostas @jyellick @sanchezl submitted a patch to print config parameters during boot time for orderer: https://gerrit.hyperledger.org/r/#/c/16653/","username":"guoger","ts":"2018-01-08T08:50:33.886Z"}
{"msg":"@guoger: Thanks, will look into it. For context to the others, this seemed like a useful thing to add after discussing it with Scott Z and team.","username":"kostas","ts":"2018-01-08T14:22:48.693Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=f3Fdmw8YdSyTyH37z","username":"kostas","ts":"2018-01-10T15:48:56.302Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=f3Fdmw8YdSyTyH37z","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=f3Fdmw8YdSyTyH37z","remote":true,"fileId":null,"fileName":null}]}
{"msg":"For anyone curious about this, turns out that a couple of months ago I had set an `alias` for `protoc` in my `.bashrc` that would expand `protoc` automatically to `protoc --go_out==plugins=grpc:.`. It took a couple of hours of uninstalling and reinstalling everything go-related, running `dtrace`, etc. to figure this out.","username":"kostas","ts":"2018-01-10T15:51:00.888Z"}
{"msg":"For anyone curious about this, turns out that a couple of months ago I had set an `alias` for `protoc` in my `.bashrc` that would expand `protoc` automatically to `protoc --go_out==plugins=grpc:.`. It took a couple of hours of uninstalling and reinstalling everything go-related, running `dtrace`, etc. to figure this out. Lovely.","username":"kostas","ts":"2018-01-10T15:51:00.888Z"}
{"msg":"Ouch. Glad you got it figure out.","username":"jyellick","ts":"2018-01-10T16:48:34.917Z"}
{"msg":"Is JIRA/Gerrit slow/generally broken for anyone else?","username":"jyellick","ts":"2018-01-10T22:18:47.230Z"}
{"msg":"@jyellick it works fine for me","username":"guoger","ts":"2018-01-11T01:33:10.119Z"}
{"msg":"When kafka log retention time expires, and *all* the remaining messages in kafka are *connect msg* (restart orderer several times without new tx), orderer would fail to connect to kafka due to offset out of range. Do we consider this as a known issue and will be solved by log pruning?","username":"guoger","ts":"2018-01-11T03:24:42.567Z"}
{"msg":"cc @jyellick @kostas ","username":"guoger","ts":"2018-01-11T03:24:49.147Z"}
{"msg":"cc @jyellick @kostas @sanchezl ","username":"guoger","ts":"2018-01-11T03:24:49.147Z"}
{"msg":"I know @sanchezl has looked into this more, and I am struggling to remember his findings.  I thought there was a way to configure both a minimum number of messages retained, as well as a time period?","username":"jyellick","ts":"2018-01-11T03:30:24.054Z"}
{"msg":"Assuming the minimum is set to be reasonably high (say, a few thousand?) it would require many of the connect messages, but I suppose it could still potentially be a problem","username":"jyellick","ts":"2018-01-11T03:30:55.027Z"}
{"msg":"No quick fix jumps to mind though, unless there is a new block written, we have no where to write the metadata, so this could eventually happen (especially say after many years on an idle channel)","username":"jyellick","ts":"2018-01-11T03:31:38.760Z"}
{"msg":"I don't think we've explicitly thought of this idle channel scenario. In agreement with @jyellick, this is a scenario that *can* happen. I'll investigate further. ","username":"sanchezl","ts":"2018-01-11T03:39:13.725Z"}
{"msg":"which is the min retention size config? `log.retention.bytes`?","username":"guoger","ts":"2018-01-11T03:40:11.319Z"}
{"msg":"yes","username":"sanchezl","ts":"2018-01-11T03:41:50.488Z"}
{"msg":"@sanchezl trying to understand the logic here. with this option set, it would keep at least this much bytes of log, even they've existed longer than retention time?","username":"guoger","ts":"2018-01-11T03:46:04.413Z"}
{"msg":"Bear with me, I might remember this this wrong the first time:\n• when a log segment file reaches size `log.segment.bytes`, a new log segment file is created and the previous log segment is _closed_. Only closed segments can be expired/deleted.\n• *Before 0.10.1*, the retention due to on `log.retention.ms` is based on the last modified time of the log segment. *After 0.10.1*, the retention time is based on the timestamp of the last message in the segment.\n• closed segments can then expire when either `log.retention.bytes` or `log.retention/ms` criteria is met.\n\n","username":"sanchezl","ts":"2018-01-11T04:04:14.019Z"}
{"msg":"A connect message should be about 20bytes plus the bytes needed to encoded the topic name. I'm not sure what the rate of CONNECT messages is, but it would take over 30 million of them to fill a 1GB segment completely.","username":"sanchezl","ts":"2018-01-11T04:21:32.228Z"}
{"msg":"> closed segments can then expire when either `log.retention.bytes` *or* `log.retention/ms` criteria is met.\n\nDid you mean _or_ here or _and_ ?","username":"jyellick","ts":"2018-01-11T04:22:57.820Z"}
{"msg":"> closed segments can then expire when either `log.retention.bytes` _or_ `log.retention/ms` criteria is met.\n\nDid you mean _or_ here or _and_ ?","username":"jyellick","ts":"2018-01-11T04:22:57.820Z"}
{"msg":"> closed segments can then expire when either `log.retention.bytes` _or_ `log.retention/ms` criteria is met.\n\nDid you mean *or* here or *and* ?","username":"jyellick","ts":"2018-01-11T04:22:57.820Z"}
{"msg":"> Only closed segments can be expired/deleted.\nhmm.. `log.segment.bytes` is 1073741824 by default. as you said, it should be very hard to fill it with connect msg. However, i tried e2e example with `log.retention.minutes=1`, old message *are* discarded when it expires","username":"guoger","ts":"2018-01-11T04:50:40.452Z"}
{"msg":"What is `log.retention.bytes` set to for your test","username":"jyellick","ts":"2018-01-11T04:59:49.632Z"}
{"msg":"What is `log.retention.bytes` set to for your test?","username":"jyellick","ts":"2018-01-11T04:59:49.632Z"}
{"msg":"1) left as default (-1), the problem described before occurred\n2) set to 1000000, problem went away","username":"guoger","ts":"2018-01-11T05:03:20.579Z"}
{"msg":"actually no... the problem is still there","username":"guoger","ts":"2018-01-11T05:10:48.898Z"}
{"msg":"it seems that `log.retention.bytes` doesn't prevent logs being deleted","username":"guoger","ts":"2018-01-11T05:11:14.926Z"}
{"msg":"What if you set `log.retention.bytes` > `log.segment.bytes` ?","username":"jyellick","ts":"2018-01-11T05:11:19.467Z"}
{"msg":"trying","username":"guoger","ts":"2018-01-11T05:14:13.065Z"}
{"msg":"still, old logs are deleted, even though the size is way below `log.retention.bytes`","username":"guoger","ts":"2018-01-11T05:23:21.173Z"}
{"msg":"That's unfortunate -- it sounds like it is indeed an *or* type relationship between those two settings.  *and* seems like it would be superior","username":"jyellick","ts":"2018-01-11T05:24:16.235Z"}
{"msg":"yeah... `log.retention.bytes` doesn't guarantee minimum bytes of logs to be retained","username":"guoger","ts":"2018-01-11T05:26:29.521Z"}
{"msg":"I guess the only way to solve this problem is to set a reasonably large `log.retention.(time)`","username":"guoger","ts":"2018-01-11T05:27:26.463Z"}
{"msg":"but again I'm a bit confused. `log.roll.hours` is set to 168 hours by default. Why new log files are still created fairly quickly?","username":"guoger","ts":"2018-01-11T05:29:09.860Z"}
{"msg":"is it affected by `log.retention.(time)`?","username":"guoger","ts":"2018-01-11T05:29:25.745Z"}
{"msg":"@sancezl I think you've done more research on this than anyone?","username":"jyellick","ts":"2018-01-11T05:30:41.865Z"}
{"msg":"@sanchezl I think you've done more research on this than anyone?","username":"jyellick","ts":"2018-01-11T05:30:41.865Z"}
{"msg":"it seems that `log.retention.(time)` does affect the frequency of kaka log rolling","username":"guoger","ts":"2018-01-11T06:26:43.786Z"}
{"msg":"but it's still weird that `log.roll.ms` is not really respected even if `log.retention.(time)` is way greater than it.","username":"guoger","ts":"2018-01-11T06:35:14.977Z"}
{"msg":"ah... kafka only checks these criteria when new msg comes in... ","username":"guoger","ts":"2018-01-11T07:12:43.828Z"}
{"msg":"to summarize:\n- log retention in Kafka is *scheduled* job, specified by `log.retention.check.interval`. If `log.retention.(time)` expires *or* `log.retention.bytes` satisfied, logs are deleted.\n- if `log.retention.(time)` expires, it forces log rolling, regardless of `log.segment.ms`\n- `log.retention.bytes` does *not* force log rolling, and it's checked against *closed* log segments\n- `log.roll.(time)` is checked only when new message comes into kafka","username":"guoger","ts":"2018-01-11T08:07:03.017Z"}
{"msg":"Therefore, we don't really have an ideal solution for original problem but setting `log.retention.(time)` reasonably large (default 168 hrs should be good)\n> When kafka log retention time expires, and *all* the remaining messages in kafka are *connect msg* (restart orderer several times without new tx), orderer would fail to connect to kafka due to offset out of range. Do we consider this as a known issue and will be solved by log pruning?","username":"guoger","ts":"2018-01-11T08:08:36.356Z"}
{"msg":"Late to the party here.","username":"kostas","ts":"2018-01-11T15:53:01.162Z"}
{"msg":"A couple of notes.","username":"kostas","ts":"2018-01-11T15:53:08.115Z"}
{"msg":"For whatever it's worth.","username":"kostas","ts":"2018-01-11T15:53:16.100Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wMcY762EwL7tYYajs","username":"kostas","ts":"2018-01-11T15:53:38.711Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wMcY762EwL7tYYajs","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wMcY762EwL7tYYajs","remote":true,"fileId":null,"fileName":null}]}
{"msg":"As Luis wrote, it is indeed an OR relationship:","username":"kostas","ts":"2018-01-11T15:53:58.054Z"}
{"msg":"As Luis wrote, it is indeed an OR relationship. From the Kafka Definitive Guide book:","username":"kostas","ts":"2018-01-11T15:53:58.054Z"}
{"msg":"> If you have specified a value for both `log.retention.bytes` and `log.retention.ms`, messages may be removed when either criteria is met.","username":"kostas","ts":"2018-01-11T15:54:25.130Z"}
{"msg":"I am slightly lost as for the rest of the discussion.","username":"kostas","ts":"2018-01-11T15:55:12.941Z"}
{"msg":"What does `log.retention.*` have to do with log rolling?","username":"kostas","ts":"2018-01-11T15:55:26.945Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=XQSMknvmFRG3SZqmL","username":"kostas","ts":"2018-01-11T15:55:57.591Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=XQSMknvmFRG3SZqmL","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=XQSMknvmFRG3SZqmL","remote":true,"fileId":null,"fileName":null}]}
{"msg":"So this is an issue, though as Luis noted the chances of this one happening are tiny. If we were even more paranoid, we could enable log compaction where a connect message is posted under, say, `key=CONNECT`, and all other messages are posted under `key=GUID`. The only real risk is if you get two colliding GUIDs within the channel, but I would probably take those odds.","username":"kostas","ts":"2018-01-11T15:59:08.914Z"}
{"msg":"With log compaction enabled, you ensure that only one connect message is present. The tradeoff being, GUID collision for all other messages.","username":"kostas","ts":"2018-01-11T15:59:49.182Z"}
{"msg":"Perhaps there is an even simpler approach where you add logic to the orderer and (a) attempt to read the partition first without posting a connect message, (b) recover the panic that will occur if the partition is empty, and (c) only then post the connect message.","username":"kostas","ts":"2018-01-11T16:01:15.626Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Jr8iQcrHv2xZWMvsf) @kostas `log.retention.(time)` would force log rolling, but `log.retention.bytes` wouldn't.","username":"guoger","ts":"2018-01-12T02:23:02.097Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Jr8iQcrHv2xZWMvsf","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Jr8iQcrHv2xZWMvsf","remote":true,"fileId":null,"fileName":null}]}
{"msg":"But this is just a behavior probably missing in Kafka docs","username":"guoger","ts":"2018-01-12T02:23:27.301Z"}
{"msg":"I'll file a jira and try to submit a patch for this. It actually happened in requester's semi-production env, where their channel is idle for 168 hours during new year holiday, rebooted several times, and orderer failed to reconnect","username":"guoger","ts":"2018-01-12T04:48:12.733Z"}
{"msg":"I'm inclined to go for the 'simpler' solution","username":"guoger","ts":"2018-01-12T04:48:37.514Z"}
{"msg":"filed https://jira.hyperledger.org/browse/FAB-7707","username":"guoger","ts":"2018-01-12T10:54:39.224Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=EanYmDGrs8FkTio83","username":"kostas","ts":"2018-01-12T13:29:45.191Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=EanYmDGrs8FkTio83","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=EanYmDGrs8FkTio83","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Ah, I read your JIRA description and it makes sense now.","username":"kostas","ts":"2018-01-12T13:29:56.381Z"}
{"msg":"Thanks for filing this.","username":"kostas","ts":"2018-01-12T13:30:03.662Z"}
{"msg":"IIUC, system channel name is hardcoded to be `testchainid`. Shouldn't we rename it to be something more clear, i.e. `systemchannel`?","username":"guoger","ts":"2018-01-18T06:45:03.941Z"}
{"msg":"So, it is not hard-coded, if you generate your genesis block for bootstrapping, you may pick any name you wish","username":"jyellick","ts":"2018-01-18T14:33:03.244Z"}
{"msg":"I would say more accurately, it is defaulted to testchainid","username":"jyellick","ts":"2018-01-18T14:33:15.712Z"}
{"msg":"Has joined the channel.","username":"zhoui13","ts":"2018-01-19T02:06:35.115Z","type":"uj"}
{"msg":"@sanchezl @guoger @kostas \n\nWe updated the version of Kafka in `orderer.yaml` to be 0.10.0.2.  This can be seen to be causing a few problems:\n\nhttps://jira.hyperledger.org/browse/FAB-7825\nhttps://jira.hyperledger.org/browse/FAB-7739\n\nand I solved this for an internal team recently as well.  I just wanted to ask if we wanted to reconsider modifying this default or not.  I would argue for a true upgrade, users should update their binary, and not their config file, in which case nothing breaks.  Still, I thought it was worth raising for discussion here.","username":"jyellick","ts":"2018-01-19T21:39:36.322Z"}
{"msg":"I've gone back and forth on this one myself, one way or another someone it going to be inconvenienced. If they are using our docker images, then they are updating more than just the binary, as the image contains an updated orderer.yml within.","username":"sanchezl","ts":"2018-01-19T21:46:16.883Z"}
{"msg":"What are the advantages to specifying the newer wire format?","username":"jyellick","ts":"2018-01-19T21:46:57.029Z"}
{"msg":"We have updated the docs regarding this: http://hyperledger-fabric.readthedocs.io/en/latest/kafka.html#kafka-protocol-version-compatibility","username":"sanchezl","ts":"2018-01-19T21:47:28.691Z"}
{"msg":"and the \"internal\" upgrade docs : https://docs.google.com/document/d/16ZogU_InYeLZZ8lTGNdBhd4Iosi7T4KP3ppFSEUcI30/edit?usp=sharing explicitly mention the need to update the docker compose files","username":"sanchezl","ts":"2018-01-19T21:48:16.639Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=RXzC28Syk375eCqAw) @jyellick There is a performance hit when using the older wire format as kafka has to translate between the current format and the client's format (Kafka uses the same format for on-disk-storage).","username":"sanchezl","ts":"2018-01-19T21:49:29.491Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=RXzC28Syk375eCqAw","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=RXzC28Syk375eCqAw","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Once you go to Kafka 0.11+, the newer formats enable a new scheme designed to prevent the log truncation errors that can occur after abrupt shutdowns.","username":"sanchezl","ts":"2018-01-19T21:50:56.524Z"}
{"msg":"If anyone is interested, here is the performance report published by Kafka:\nhttps://docs.google.com/spreadsheets/d/1dHY6M7qCiX-NFvsgvaE0YoVdNq26uA8608XIh_DUpI4/edit#gid=61107630\n• Column D: Producer delta.\n• Column I: Consumer delta.\n• Column L: Disk size delta.","username":"sanchezl","ts":"2018-01-19T22:14:08.694Z"}
{"msg":"If anyone is interested, here is the performance report published by Kafka:\nhttps://docs.google.com/spreadsheets/d/1dHY6M7qCiX-NFvsgvaE0YoVdNq26uA8608XIh_DUpI4/edit#gid=61107630\n• Column D : Producer delta.\n• Column I: Consumer delta.\n• Column L: Disk size delta.","username":"sanchezl","ts":"2018-01-19T22:14:08.694Z"}
{"msg":"Seems like if we are going to break everyone going to v0.10.0.2 we should just go to v0.11+?","username":"jyellick","ts":"2018-01-19T22:25:23.138Z"}
{"msg":"Seems like if we are going to break everyone (who doesn't follow instructions) going to v0.10.0.2 we should just go to v0.11+?","username":"jyellick","ts":"2018-01-19T22:25:23.138Z"}
{"msg":"Has joined the channel.","username":"Brucepark","ts":"2018-01-20T06:15:22.586Z","type":"uj"}
{"msg":"I'm missing something here, and cannot follow the recommendations provided. Can anyone recap?","username":"kostas","ts":"2018-01-22T13:42:01.360Z"}
{"msg":"Based on what I see, upgrading the default to 0.11 as Jason suggests seems like the right move here?","username":"kostas","ts":"2018-01-22T13:49:12.491Z"}
{"msg":"I'd also note that the `orderer.yaml` says `0.10.2.1` while our documentation says `0.10.2.0`.","username":"kostas","ts":"2018-01-22T14:15:14.618Z"}
{"msg":"@sanchezl @guoger What do you guys think? If we intend to change the version of Kafka in our docker files, I would think this should be done pre-alpha (so, stat)","username":"jyellick","ts":"2018-01-22T20:42:46.420Z"}
{"msg":"If we reset the default to `0.9.0.1`, this would satisfy the _update the binary without updating the config_ \"requirement\"(?). (also note that 'binary' for some is the docker image, which contains a a new `orderer.yaml`).  While I am worried about performance implications: 1. we haven't done the performance testing yet, and 2, I think people will more easily swallow having to 'speed up' the default with the cool new setting, vs. having to deal with upgrades that require a change in config. ","username":"sanchezl","ts":"2018-01-22T20:51:19.498Z"}
{"msg":"I can take over one of the defects mentioned earlier to:\n• Revert the the default `Kafka.Version` to `0.9.0.1` in `orderer.yaml` and the `orderer`binary,.\n• Keep the actual Kafka version bundled in our images as is (v0.10.2.1). If we were to move up again, I would shoot for `v1.0.0`.\nI think this would save us trouble in the short run. In the future we can revisit. Kafka has a version/capability discovery API, but we need to drop support for 0.9.0.1 in order to use it properly.","username":"sanchezl","ts":"2018-01-22T20:58:05.251Z"}
{"msg":"> Kafka has a version/capability discovery API\n\nI was surprised that this was not present already","username":"jyellick","ts":"2018-01-22T20:59:21.095Z"}
{"msg":"Should we not update our docker images to v1.0.0 (even if we leave `orderer.yaml` as is?)","username":"jyellick","ts":"2018-01-22T20:59:53.928Z"}
{"msg":"Should we not update our docker images to v1.0.0 (even if we make `orderer.yaml` reference 0.9.0.1 again?)","username":"jyellick","ts":"2018-01-22T20:59:53.928Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=QtdDc2xTi2Hq8HRBx) @jyellick \nMost of the testing has been done on the older versions. The testers are going to make sure to run alpha on v0.11 and v1.0.0. That should give us some more confidence if we then decide to update.","username":"sanchezl","ts":"2018-01-22T21:09:37.358Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=QtdDc2xTi2Hq8HRBx","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=QtdDc2xTi2Hq8HRBx","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Are you concerned that we will see problems on kafka v1.0.0?","username":"jyellick","ts":"2018-01-22T21:17:51.997Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=YJrmhkgyHSkRvSiz2) @jyellick I'm not as concerned as I was when I last considered it. ","username":"sanchezl","ts":"2018-01-22T21:22:06.440Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=YJrmhkgyHSkRvSiz2","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=YJrmhkgyHSkRvSiz2","remote":true,"fileId":null,"fileName":null}]}
{"msg":"In general, for the least pain for our users, I would think we would want to minimize the number of times we change the Kafka version.  If we can confidently 'ship' Kafka v1.0.0 for our v1.1, then perhaps we will not have to change Kafka version for some time?  Will leave the call up to you.","username":"jyellick","ts":"2018-01-22T21:23:14.534Z"}
{"msg":"Any thoughts on the 0.9.0.1 setting?  ","username":"sanchezl","ts":"2018-01-22T21:28:51.256Z"}
{"msg":"Would it be possible to simply enable the auto-negotiation of version if we went to Kafka v1.0.0?","username":"jyellick","ts":"2018-01-22T21:31:40.910Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Ta4GKAxhQvEBXvPeE) @jyellick IT's not enabled in the client we use `sarama`, mainly because of their support for older versions. I can look into calling the API directly and interpreting the results. ","username":"sanchezl","ts":"2018-01-22T21:58:02.298Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Ta4GKAxhQvEBXvPeE","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Ta4GKAxhQvEBXvPeE","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I do not think we want to get into a game of implementing workarounds for sarama, if anything, I would consider doing the work upstream, but it sounds like this is not an option for v1.1","username":"jyellick","ts":"2018-01-22T22:12:03.836Z"}
{"msg":"Has joined the channel.","username":"Glen","ts":"2018-01-23T07:06:59.460Z","type":"uj"}
{"msg":"Has left the channel.","username":"Glen","ts":"2018-01-23T07:10:11.160Z","type":"ul"}
{"msg":"","username":"sanchezl","ts":"2018-01-24T21:55:30.698Z","attachments":[{"type":"file","title":"Clipboard - January 24, 2018 4:55 PM","title_link":"/file-upload/m9SyWp9q3kATeTmsL/Clipboard - January 24, 2018 4:55 PM","image_url":"/file-upload/m9SyWp9q3kATeTmsL/Clipboard - January 24, 2018 4:55 PM","image_type":"image/png","image_size":41038,"url":"/file-upload/m9SyWp9q3kATeTmsL/Clipboard - January 24, 2018 4:55 PM","remote":false,"fileId":"m9SyWp9q3kATeTmsL","fileName":"Clipboard - January 24, 2018 4:55 PM"}]}
{"msg":"https://gerrit.hyperledger.org/r/c/17155/ \n","username":"sanchezl","ts":"2018-01-24T21:56:10.906Z"}
{"msg":"@kostas for https://jira.hyperledger.org/browse/FAB-7707, I could take it.\n>The hacky, pruning-enabled mode should be covered just in the FAQ, and\nDo we have a faq section in doc?\n>We fix log.retention.(time) to -1\ngoing to fix this in kafka baseimage","username":"guoger","ts":"2018-01-25T11:04:44.863Z"}
{"msg":"> Do we have a faq section in doc?\nAh, we do not. I have an FAQ doc out there as a draft changeset, just sent you an invitation.","username":"kostas","ts":"2018-01-25T14:53:57.607Z"}
{"msg":"> Do we have a faq section in doc?\n@guoger: Ah, we do not. I have an FAQ doc out there as a draft changeset, just sent you an invitation.","username":"kostas","ts":"2018-01-25T14:53:57.607Z"}
{"msg":"@sanchezl What is the maximum supported Kafka version which can be specified for the version of Sarama shipped in v1.0.x?","username":"jyellick","ts":"2018-01-25T15:03:35.226Z"}
{"msg":"(Officially: 0.10.2)","username":"kostas","ts":"2018-01-25T15:06:25.341Z"}
{"msg":"https://github.com/hyperledger/fabric/blob/release/vendor/vendor.json#L35\nhttps://github.com/Shopify/sarama/releases/tag/v1.12.0\nhttps://github.com/Shopify/sarama/pull/867/files#diff-7d1c2a3334601b6c1958aae0a594cba8R151","username":"kostas","ts":"2018-01-25T15:07:08.927Z"}
{"msg":"@sanchezl Could you respond to @guoger in https://gerrit.hyperledger.org/r/c/17155/ ? Would like to get this merged pre-alpha if possible.","username":"jyellick","ts":"2018-01-25T16:02:01.549Z"}
{"msg":"https://gerrit.hyperledger.org/r/#/c/17233/ for FAB-7707 (setting `log.retention.ms=-1`)","username":"guoger","ts":"2018-01-26T02:16:56.348Z"}
{"msg":"to vendor dependencies, are we recommended to use `godep`, `govendor` or `glide`?","username":"guoger","ts":"2018-01-26T07:26:02.816Z"}
{"msg":"@guoger: We use govendor.","username":"kostas","ts":"2018-01-26T12:31:03.901Z"}
{"msg":"theoretically, shouldn't `govendor list +e` always be the subset of `govendor list`?","username":"guoger","ts":"2018-01-26T13:49:34.427Z"}
{"msg":"That would be my understanding. [ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3Ltenn3moTLFCpPov) @guoger ","username":"sanchezl","ts":"2018-01-26T20:53:34.414Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3Ltenn3moTLFCpPov","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3Ltenn3moTLFCpPov","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@sanchezl but `govendor list +e` gives me some packages that don't exist in `govendor list`... which is really weird..","username":"guoger","ts":"2018-01-27T01:51:34.139Z"}
{"msg":"@guoger , yes that is strange. I just confirmed and I get all the `e` packages in `govendor list` when I run `govendor list +e`, and nothing more. I'm on `go version go1.9.2 darwin/amd64` and `govendor -version` = `v1.0.8`","username":"sanchezl","ts":"2018-01-27T02:10:55.054Z"}
{"msg":"Has joined the channel.","username":"SjirNijssen","ts":"2018-01-28T09:42:30.168Z","type":"uj"}
{"msg":"Has joined the channel.","username":"rockleelx","ts":"2018-01-30T04:13:31.150Z","type":"uj"}
{"msg":"Has joined the channel.","username":"MartinKrmer","ts":"2018-01-30T13:49:32.533Z","type":"uj"}
{"msg":"Hi all, If i go inside the folder *\"/var/hyperledger/production/orderer/chains/\"* i can find my channels there. Inside the directory corresponding to my channel, I could find a file called *\"blockfile_000000\"* . It had all the inputs which I had passed during my Instantiation of all the chaincodes which are there in that channel. I think this file being available as a plain text file is a data risk. Isnt it ? \nCan't anything be done about this ? ","username":"Ashish","ts":"2018-02-05T15:45:57.136Z"}
{"msg":"Hi all, If i go inside the folder *\"/var/hyperledger/production/orderer/chains/\"* of my Orderer, I can find my channels there. Inside the directory corresponding to my channel, I could find a file called *\"blockfile_000000\"* . It had all the inputs which I had passed during my Instantiation of all the chaincodes which are there in that channel. I think this file being available as a plain text file is a data risk. Isnt it ? \nCan't anything be done about this ? ","username":"Ashish","ts":"2018-02-05T15:45:57.136Z"}
{"msg":"@Ashish I'm not sure what you would suggest? If it were encrypted, the process would need the key to decrypt it.  I would think you would want a data protection solution at a different layer, such as LUKS or similar.","username":"jyellick","ts":"2018-02-05T18:16:35.340Z"}
{"msg":"@jyellick I got the point from the Orderer development point of view. And I am trying to employ workarounds here. But had to see whether there is anything from the platform to help me out. \nI am not sure LUKS would work, because we are talking about the file system in the Orderer container - any pointers would be good. \nRestricting the access to the Orderer - Yes - That would work.  \nEnsuring the encryption of the data passed along - that also would work. And that is what I am going to do","username":"Ashish","ts":"2018-02-06T05:29:14.790Z"}
{"msg":"@Ashish If the orderer process were to encrypt the ledger, then it would need to store the private key to decrypt it.  Outside of specialized hardware, this means writing the key to the file system, so, if the attacker can read the files, then it does not really offer you any additional protections.","username":"jyellick","ts":"2018-02-06T05:37:56.101Z"}
{"msg":"Maybe I am missing something, or what you are attempting to do?","username":"jyellick","ts":"2018-02-06T05:38:17.771Z"}
{"msg":"On one of our reviews of data privacy, one associate pointed out that even if we are claiming the data is private in the ledger and with the help of channel permissioned access is implemented, if the intruder manages to get hold of the orderer he can practically see the invoker arguements.","username":"Ashish","ts":"2018-02-06T05:40:25.894Z"}
{"msg":"@jyellick On one of our reviews of data privacy, one associate pointed out that even if we are claiming the data is private in the ledger and with the help of channel permissioned access is implemented, if the intruder manages to get hold of the orderer he can practically see the invoker arguements.","username":"Ashish","ts":"2018-02-06T05:40:25.894Z"}
{"msg":"If the attacker compromises the orderer system to the extent that they can read arbitrary files, then I suspect the battle is already lost.","username":"jyellick","ts":"2018-02-06T05:43:27.864Z"}
{"msg":"@jyellick  Yes.  I will give you that  :)","username":"Ashish","ts":"2018-02-06T05:44:21.715Z"}
{"msg":"the problem is not about the attacker from outside, its about the operatives inside who gets to see the data which they should not. And in Europe for financial systems, they are ensuring GDPR etc. So applications gets scanned thoroughly.","username":"Ashish","ts":"2018-02-06T05:47:23.524Z"}
{"msg":"The options that spring to mind would be to either:\n\n1. Use specialized hardware which restricts even administrators from performing operations like reads to the filesystem.\n2. Design the data model not to reveal the regulated details (via application level encryption, ZK proofs, or other techniques)\n3. Use something like \"private data\" so that the transaction affects are communicated peer to peer and do not pass through ordering","username":"jyellick","ts":"2018-02-06T05:50:53.989Z"}
{"msg":"The options that spring to mind would be to either:\n\n1. Use specialized hardware which restricts even administrators from performing operations like reads to the filesystem.\n2. Design the data model not to reveal the regulated details (via application level encryption, ZK proofs, or other techniques)\n3. Use something like \"private data\" so that the transaction effects are communicated peer to peer and do not pass through ordering","username":"jyellick","ts":"2018-02-06T05:50:53.989Z"}
{"msg":"@jyellick Thank you very much,. \nPoint 2 This is most appropriate. I better guard my data at application layer itself. And this is what I intend to do readily.\nPoint 3 - with the Private data , i am guessing you are pointing to Side DB ? It had skipped my mind totally. But still it would be a case to case scenario.\nPoint 1 - we really have to think a bit into this. :(","username":"Ashish","ts":"2018-02-06T05:56:59.526Z"}
{"msg":"Has joined the channel.","username":"manxiaqu","ts":"2018-02-08T02:40:41.206Z","type":"uj"}
{"msg":"Folks, please take a crack at the ordering service FAQ when you get a moment. I'd like to push it out by Monday.","username":"kostas","ts":"2018-02-08T20:10:46.578Z"}
{"msg":"for orderer faq, on top of my head, we could add:\n1. how to modify the configuration of orderer (consult configtxlator doc)\n2. I encountered `Rejecting deliver request for %s because of consenter error` while creating channel, where should I start debugging? (AFAIK, we came across a lot of questions in this form, and most of them are caused by kafka connection problem...)\n3. how should we plan OSN production deployment? network topology, organization, etc","username":"guoger","ts":"2018-02-12T16:51:17.991Z"}
{"msg":"let me know if any of these should be added, I'll update the patch","username":"guoger","ts":"2018-02-12T16:51:45.040Z"}
{"msg":"I'll keep thinking of new ones","username":"guoger","ts":"2018-02-12T16:51:56.620Z"}
{"msg":"@guoger: All of these (maybe with the exception of item number 3, because I'm generally skeptical about going into production recommendations) would make good additions I think.","username":"kostas","ts":"2018-02-12T16:55:14.410Z"}
{"msg":"Feel free to stub these QAs out via a patchset, and we can all modify them further if need be.","username":"kostas","ts":"2018-02-12T16:55:16.304Z"}
{"msg":"Sure, will do my tomorrow. Btw, do we have this kinda ongoing FAQ work for every components?","username":"guoger","ts":"2018-02-12T17:06:58.434Z"}
{"msg":"Not that I'm aware of.","username":"kostas","ts":"2018-02-12T17:10:59.718Z"}
{"msg":"For the FAQ -- does my memory serve me well, in that there are incompatibilities between `configtxgen` and the artifacts it produces across versions? i.e. you cannot inspect an artifact produced by 1.0.0 with a 1.0.x binary, or something like that? If that is the case, @jyellick, can/should we identify those incompatibilities in a QA for the FAQ? (My cue for this is the latest message on the mailing list.)","username":"kostas","ts":"2018-02-15T13:46:49.194Z"}
{"msg":"@kostas There was an issue whee a v1.0.0 `configtxgen` did not produce channel creation txes which were valid for a v1.0.1+ orderer","username":"jyellick","ts":"2018-02-15T14:53:43.855Z"}
{"msg":"And, because of the addition of new proto messages and config fields, the older one will not be able to decode output from the newer, though that seems somewhat intuitive to me","username":"jyellick","ts":"2018-02-15T14:54:38.626Z"}
{"msg":"Understood. Is the answer to the following one obvious -- can the newer binary encode/decode older artifacts just fine?","username":"kostas","ts":"2018-02-15T14:58:52.845Z"}
{"msg":"Understood. Is the answer to the following one obvious -- can the newer binary decode older artifacts just fine?","username":"kostas","ts":"2018-02-15T14:58:52.845Z"}
{"msg":"Yes","username":"jyellick","ts":"2018-02-15T15:32:28.031Z"}
{"msg":"(In fact, the newer one may even do a better job decoding older artifacts, as it knows of more opaque field types)","username":"jyellick","ts":"2018-02-15T15:33:21.055Z"}
{"msg":"Has joined the channel.","username":"Pranoti","ts":"2018-02-16T11:55:23.924Z","type":"uj"}
{"msg":"Hi all,\nI was executing this command \n\ndocker exec peer0.org1.example.com peer channel create -o orderer.example.com:7050 -c channel001 -f /etc/hyperledger/configtx/composer-channel.tx\n\nIts throwing error. So I checked orderer logs I found this \n\nWARN 0d6 Rejecting CONFIG_UPDATE because: Proposed configuration has no application group members, but consortium contains members\n2018-02-16 10:21:22.969 UTC [orderer/main] func1 -> DEBU 0d7 Closing Broadcast stream\n\nDoes anybody have any idea about this error?","username":"Pranoti","ts":"2018-02-16T11:59:32.512Z"}
{"msg":"@Pranoti: This channel is for dev discussions, and you're double-posting in #fabric-orderer. No bueno.","username":"kostas","ts":"2018-02-16T14:02:50.703Z"}
{"msg":"Reposting from #fabric-scrum for reference: https://chat.hyperledger.org/channel/fabric-ci?msg=STyHFaHCDik7hj6zr","username":"kostas","ts":"2018-02-16T15:03:45.470Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-ci?msg=STyHFaHCDik7hj6zr","url":"https://chat.hyperledger.org/channel/fabric-ci?msg=STyHFaHCDik7hj6zr","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Has joined the channel.","username":"Cyrold","ts":"2018-02-16T15:13:28.835Z","type":"uj"}
{"msg":"Do we agree that this comment could use some love? https://github.com/hyperledger/fabric/blob/master/sampleconfig/configtx.yaml#L241..L242","username":"kostas","ts":"2018-02-16T15:44:52.038Z"}
{"msg":"Certainly","username":"jyellick","ts":"2018-02-16T15:45:49.946Z"}
{"msg":"I'm thinking \"The name by which the org will be referenced in configuration transactions.\"","username":"kostas","ts":"2018-02-16T15:47:42.645Z"}
{"msg":"But I'm not 100% sold on it.","username":"kostas","ts":"2018-02-16T15:47:48.003Z"}
{"msg":"And I'm not sure if it's missing something.","username":"kostas","ts":"2018-02-16T15:47:57.275Z"}
{"msg":"Once we settle on it I can push a quick CR addressing it.","username":"kostas","ts":"2018-02-16T15:48:10.044Z"}
{"msg":"(I also question the need to have both a `Name` and `ID` field but that ship has sailed now.)","username":"kostas","ts":"2018-02-16T15:49:57.688Z"}
{"msg":"The rest of the comments follow the godoc style of repeating the variable name as the start of the comment","username":"jyellick","ts":"2018-02-16T15:51:31.681Z"}
{"msg":"So, \"Name is the key used to refer to the organization in channel configuration transactions.\" would be my first thought","username":"jyellick","ts":"2018-02-16T15:52:14.309Z"}
{"msg":"Has left the channel.","username":"Pranoti","ts":"2018-02-20T13:57:04.345Z","type":"ul"}
{"msg":"With respect to upgrade, we talk about upgrading the Kafka cluster, but not the ZK ensemble","username":"jyellick","ts":"2018-02-20T20:06:27.581Z"}
{"msg":"The best doc I can seem to find for ZK is: https://wiki.apache.org/hadoop/ZooKeeper/FAQ#A6 and then a note for the beta only on: https://zookeeper.apache.org/doc/r3.5.3-beta/zookeeperReconfig.html#ch_reconfig_upgrade","username":"jyellick","ts":"2018-02-20T20:06:58.076Z"}
{"msg":"Do we want to recommend that a ZK upgrade happens? Do we have any better doc to link them to?","username":"jyellick","ts":"2018-02-20T20:07:32.277Z"}
{"msg":"@kostas @sanchezl @guoger ^","username":"jyellick","ts":"2018-02-20T20:07:42.534Z"}
{"msg":"^^ This one's uncharted territory for me. I defer to Luis.","username":"kostas","ts":"2018-02-20T20:35:12.229Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=4Yrp75EPKHvN6mL4c) @jyellick We point them to the kafka upgrade instructions, I defer the zookeeper upgrade to Apache Kafka's upgrade instructions.","username":"sanchezl","ts":"2018-02-21T14:29:57.515Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=4Yrp75EPKHvN6mL4c","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=4Yrp75EPKHvN6mL4c","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Basically, I don't think the ZK version matters much. I would expect most people to use the version bundled with their OS.  ","username":"sanchezl","ts":"2018-02-21T14:31:31.410Z"}
{"msg":"> , I defer the zookeeper upgrade to Apache Kafka's upgrade instructions.\n\nThe Kafka upgrade instructions do not even mention ZK\n\n> Basically, I don't think the ZK version matters much. I would expect most people to use the version bundled with their OS.\n\nMy suspicion was that yes, barring a security fix we would not actually suggest users upgrade their ZK.  However, I wasn't able to find anyone documenting this anywherre, do you have a source?","username":"jyellick","ts":"2018-02-21T14:32:56.151Z"}
{"msg":"Apparently @yacovm knows some ZK experts who have managed it in mission critical scenarios.  I asked him to pass along a set of questions and got back these responses:\n\n> 1. Is keeping ZK up to date recommended at all? if the ensemble is functioning correctly (and there are no security bugs) should we just leave it alone?\n> 2. Should ZK always be upgraded to the adjacent version, or may versions be skipped?\n> 3. Should a rolling ZK upgrade be done in a maintenance window? Aside from the lost fault tolerance, can we expect any other degradation?\n> 4. Is there any danger running a mixed ZK version ensemble? How quickly should the update roll?\n> Of course the context for this is ZK for Kafka, where I would not expect ZK to be in the performance critical path\n\n1. If it ain't broke... Keep the latest fully stable version that has the features and bug fixes you need. The latest is not necessarily the greatest when it comes to something like ZK. No alpha, no beta, wait until folks in the wild had time to find issues. \n2. We have never skipped versions. Need to consult the documentation for each release, consult the committers to make sure there are no problems (e.g., clients changed in some way, etc). \n3. Even a rolling upgrade provides opportunities for things to go wrong. Especially at the time when you take down the leader, things can go wrong. Various conditions can conspire against you to cause lengthy leader elections. It is rare, but we have seen it happen on more than one occasion. Even going as far as expired sessions. Especially if you are running on a less than stellar network infrastructure. \n4. Never done that. I guess going from one version to the next one and so on should be fine. People cannot usually tolerate downtime. But again, consult docs and committers.","username":"jyellick","ts":"2018-02-21T14:36:26.030Z"}
{"msg":"My attempt to be cute with CI has backfired: https://gerrit.hyperledger.org/r/c/18129","username":"kostas","ts":"2018-02-22T16:35:52.496Z"}
{"msg":"I was hoping that as long as a `reverify-x` was there in the comment, it would pick it up.","username":"kostas","ts":"2018-02-22T16:36:08.350Z"}
{"msg":"It seems like it needs just the command on a comment of its own.","username":"kostas","ts":"2018-02-22T16:36:37.140Z"}
{"msg":"~It seems like it needs just the command on a comment of its own.~ Nvm, it worked.","username":"kostas","ts":"2018-02-22T16:36:37.140Z"}
{"msg":"Unlike on push, the reverifies only seem to be picked up when there is room on the queue","username":"jyellick","ts":"2018-02-22T17:11:22.926Z"}
{"msg":"Unlike on push, the reverifies only seem to be delayed until there is room on the queue","username":"jyellick","ts":"2018-02-22T17:11:22.926Z"}
{"msg":"Unlike on push, the reverifies seem to be delayed until there is room on the queue'","username":"jyellick","ts":"2018-02-22T17:11:22.926Z"}
{"msg":"Unlike on push, the reverifies seem to be delayed until there is room on the queue","username":"jyellick","ts":"2018-02-22T17:11:22.926Z"}
{"msg":"Can you remind me what's the way to do inline code in a JIRA comment? I'm drawing a blank right now.","username":"kostas","ts":"2018-02-22T18:29:41.469Z"}
{"msg":"`{{code}}`","username":"jyellick","ts":"2018-02-22T18:32:24.158Z"}
{"msg":"@kostas `{{code}}`","username":"jyellick","ts":"2018-02-22T18:32:24.158Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3Ltenn3moTLFCpPov","username":"kostas","ts":"2018-02-23T18:15:25.991Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3Ltenn3moTLFCpPov","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3Ltenn3moTLFCpPov","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@guoger: Out of curiosity, did you figure this out? I was doing some `govendor` updates today locally and I also see what Luis wrote here: https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=c2XMKkFPuLmGPYws7","username":"kostas","ts":"2018-02-23T18:18:38.460Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=c2XMKkFPuLmGPYws7","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=c2XMKkFPuLmGPYws7","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@sanchezl What is the status of https://jira.hyperledger.org/browse/FAB-8408 ?","username":"jyellick","ts":"2018-02-23T18:32:56.146Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=DRxhe22kguRR62AqR) @jyellick I'll make a comment. It's not our problem. ","username":"sanchezl","ts":"2018-02-23T20:24:10.644Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=DRxhe22kguRR62AqR","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=DRxhe22kguRR62AqR","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Has joined the channel.","username":"SashiKanth","ts":"2018-02-24T08:05:59.569Z","type":"uj"}
{"msg":"Hi,\nI got this error when connecting a peer to the already exsiting fabric network, but the peer resides in different host\n\nFailed to dial 10.0.0.6:7050: connection error: desc = \"transport: authentication handshake failed: x509: cannot validate certificate for 10.0.0.6 because it doesn't contain any IP SANs\"; please retry.","username":"SashiKanth","ts":"2018-02-24T08:06:03.161Z"}
{"msg":"SashiKanth","username":"kostas","ts":"2018-02-24T14:11:49.248Z","type":"user-muted"}
{"msg":"User <em>User_2</em> removed by <em>kostas</em>.","username":"kostas","ts":"2018-02-24T14:11:55.168Z","type":"ru"}
{"msg":"Has joined the channel.","username":"debutinfotech","ts":"2018-02-28T09:26:33.239Z","type":"uj"}
{"msg":"what is the difference between solo and orderer?","username":"debutinfotech","ts":"2018-02-28T09:27:35.933Z"}
{"msg":"what is the difference between solo and Kafka?","username":"debutinfotech","ts":"2018-02-28T09:27:35.933Z"}
{"msg":"Has joined the channel.","username":"chandrakanthm","ts":"2018-02-28T09:55:05.248Z","type":"uj"}
{"msg":"Has joined the channel.","username":"pankajcheema","ts":"2018-02-28T11:17:02.722Z","type":"uj"}
{"msg":"debutinfotech","username":"kostas","ts":"2018-02-28T12:52:14.065Z","type":"user-muted"}
{"msg":"User <em>User_3</em> removed by <em>kostas</em>.","username":"kostas","ts":"2018-02-28T12:52:21.041Z","type":"ru"}
{"msg":"s","username":"pankajcheema","ts":"2018-03-05T11:47:45.534Z"}
{"msg":"What are our thoughts on modifying `configtxgen` so that it accepts `-config` parameter?","username":"kostas","ts":"2018-03-06T15:59:29.118Z"}
{"msg":"When set it would override the existing configuration mechanism (which looks for a file in `FABRIC_CFG_PATH` if set, then CWD, etc.)","username":"kostas","ts":"2018-03-06T16:00:19.589Z"}
{"msg":"This would also make the `configtxgen` behavior resemble that one of `cryptogen`.","username":"kostas","ts":"2018-03-06T16:01:32.859Z"}
{"msg":"This would also make the `configtxgen` behavior resemble that of `cryptogen`.","username":"kostas","ts":"2018-03-06T16:01:32.859Z"}
{"msg":"Definitely in favor, I thought I might have even opened an issue for this","username":"jyellick","ts":"2018-03-06T16:54:47.480Z"}
{"msg":"Looks like I did not, but yes, I think this is an easy should-add for v1.2","username":"jyellick","ts":"2018-03-06T16:57:08.400Z"}
{"msg":"Has joined the channel.","username":"dave.enyeart","ts":"2018-03-06T17:06:48.513Z","type":"uj"}
{"msg":"dave.enyeart","username":"rjones","ts":"2018-03-06T18:15:19.556Z","type":"subscription-role-added"}
{"msg":"looking at https://jira.hyperledger.org/browse/FAB-8649, I contacted reporter and told him the correct configuration. However, `ORDERER_KAFKA_TLS` and `ORDERER_GENERAL_TLS` essentially share the same data structure, whereas the former expects pem key (or file path under extra `File` key), and the latter expects file path.  Even though we document this in `orderer.yaml`, I feel it's still not intuitive and may cause confusion. Furthermore, we don't allow multiple `rootCA` in `ORDERER_KAFKA_TLS`, but does that for `ORDERER_GENERAL_TLS`. I think we probably should unify the parsing logic for both sections. Thoughts? @sanchezl @kostas ","username":"guoger","ts":"2018-03-07T03:50:37.550Z"}
{"msg":"@guoger: I think you are right and I'd vote for unifying that logic.","username":"kostas","ts":"2018-03-07T04:19:46.350Z"}
{"msg":"> Looks like I did not, but yes, I think this is an easy should-add for v1.2\nI was writing up another JIRA, and I opened up this one as well so that it doesn't slip through the cracks: https://jira.hyperledger.org/browse/FAB-8686","username":"kostas","ts":"2018-03-07T04:20:56.476Z"}
{"msg":"That other JIRA by the way is: https://jira.hyperledger.org/browse/FAB-8685 - I'd love to hear your thoughts on this.","username":"kostas","ts":"2018-03-07T04:21:22.795Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=6BR7S3h6FEdm5sMAg) \b\bsounds great, should I tell reporter to reopen the issue and change it to improvement and target 1.1.1 maybe?","username":"guoger","ts":"2018-03-07T05:18:41.977Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=6BR7S3h6FEdm5sMAg","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=6BR7S3h6FEdm5sMAg","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=vf3QYicaPGPH7tzkC) @kostas +1 for this. just wondering if we benchmark consensus algorithm and wanna make sure I/O is not the bottleneck, is `ram ledger` kinda useful in this case?","username":"guoger","ts":"2018-03-07T05:20:34.751Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=vf3QYicaPGPH7tzkC","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=vf3QYicaPGPH7tzkC","remote":true,"fileId":null,"fileName":null}]}
{"msg":"> @kostas +1 for this. just wondering if we benchmark consensus algorithm and wanna make sure I/O is not the bottleneck, is `ram ledger` kinda useful in this case?\nPerhaps. Another benefit of the RAM ledger is that currently we can do `go build && ./orderer` and have an orderer instance up and running for tests without having to worry about leftover artifacts. But I would claim that these are all small benefits and not worth keeping these additional \"for-testing\" implementations in our master tree.","username":"kostas","ts":"2018-03-07T14:42:26.496Z"}
{"msg":"> @kostas +1 for this. just wondering if we benchmark consensus algorithm and wanna make sure I/O is not the bottleneck, is `ram ledger` kinda useful in this case?\nPerhaps. Another benefit of the RAM ledger is that currently we can do `go build && ./orderer` and have an orderer instance up and running for tests without having to worry about leftover artifacts. But I would claim that these are all small benefits and it's not worth keeping these additional \"for-testing\" implementations in our master tree any more.","username":"kostas","ts":"2018-03-07T14:42:26.496Z"}
{"msg":"> sounds great, should I tell reporter to reopen the issue and change it to improvement and target 1.1.1 maybe?\nI think that's a good idea. FWIW, I wouldn't set the \"fix\" target to 1.1.1 unless a contributor has cycles to take this over and is ready to assign it to themselves. I think we should default to \"Backlog\" for all new items from now on.","username":"kostas","ts":"2018-03-07T14:47:38.558Z"}
{"msg":"Debated just posting it to the issue, but as it is 'help-wanted' I did not want to confuse the issue, but with respect to FAB-8685:\n\nI can certainly see removing the option from `orderer.yaml` but are we sure there's no value in leaving at least the RAM ledger implementation around?  In particular, for doing things like integration tests with multiple logical orderer processes, it still seems like a handy thing to keep around.  Are we actively encountering problems maintaining them? Are we trying to change the ledger interface or similar?","username":"jyellick","ts":"2018-03-07T15:01:08.229Z"}
{"msg":"@jyellick: I have thoughts on this. Let's have the debate in the JIRA? It'll be useful to record our thoughts somewhere more permanent.","username":"kostas","ts":"2018-03-07T15:18:39.443Z"}
{"msg":"Sure","username":"jyellick","ts":"2018-03-07T15:19:23.118Z"}
{"msg":"Responded there.","username":"kostas","ts":"2018-03-07T15:38:01.793Z"}
{"msg":"I've taken a stab at cleaning the backlog a bit. If I've categorized an item you own inappropriately, please feel free to edit back.","username":"kostas","ts":"2018-03-07T15:38:48.643Z"}
{"msg":"Anyone here know how to find `CORE_PEER_LOCALMSPID`?","username":"pankajcheema","ts":"2018-03-12T04:48:40.306Z"}
{"msg":"pankajcheema","username":"jyellick","ts":"2018-03-12T04:50:31.502Z","type":"user-muted"}
{"msg":"User <em>User_4</em> removed by <em>jyellick</em>.","username":"jyellick","ts":"2018-03-12T04:50:39.573Z","type":"ru"}
{"msg":"Has joined the channel.","username":"MoulaliMvg","ts":"2018-03-12T05:22:35.762Z","type":"uj"}
{"msg":"Rumor has it that we plan to transform some of system chaincode to be scc plugins (IIUC, https://jira.hyperledger.org/browse/FAB-6719 is repealed?). Do you know who's working on this piece of work? I encountered a problem while working with evm integration (which is implemented as a scc plugin), more specifically, it's documented in go-nuts mailing list here: https://groups.google.com/forum/#!topic/golang-nuts/66VupPd_2ZU","username":"guoger","ts":"2018-03-12T09:49:03.929Z"}
{"msg":"I suspect there will be similar problems within other scc plugins and I'm seeking helps/suggestions/collaborations to solve this :)","username":"guoger","ts":"2018-03-12T09:50:00.823Z"}
{"msg":"@guoger This is going to be @yacovm primarily I believe","username":"jyellick","ts":"2018-03-12T13:36:10.087Z"}
{"msg":"hold on","username":"yacovm","ts":"2018-03-12T13:53:56.225Z"}
{"msg":"I'm doing work on ESCC and VSCC","username":"yacovm","ts":"2018-03-12T13:54:02.319Z"}
{"msg":"it has nothing to do with EVM","username":"yacovm","ts":"2018-03-12T13:54:07.922Z"}
{"msg":"also it doesn't mean that FAB-6719 is repealed ","username":"yacovm","ts":"2018-03-12T13:54:30.069Z"}
{"msg":"@troyronda you have experience with writing SCCs as plugins","username":"yacovm","ts":"2018-03-12T14:10:03.385Z"}
{"msg":"Has joined the channel.","username":"troyronda","ts":"2018-03-12T14:10:03.470Z","type":"uj"}
{"msg":"any thoughts about the above?","username":"yacovm","ts":"2018-03-12T14:10:10.602Z"}
{"msg":"Just a bit more context, it's very likely that scc plugin and Fabric both vendor `grpc`, which vendors `golang.org/x/net/trace`, which registers to `/debug/requests` endpoint, and we then have double-registration, and it panics","username":"guoger","ts":"2018-03-12T14:12:51.434Z"}
{"msg":"@yacovm @guoger  (cc: @divyank)  yup we have successfully built scc plugins for fabric","username":"troyronda","ts":"2018-03-12T16:47:53.664Z"}
{"msg":"Has joined the channel.","username":"divyank","ts":"2018-03-12T16:47:53.915Z","type":"uj"}
{"msg":"we have a script process to deal with vendoring within the plugins","username":"troyronda","ts":"2018-03-12T16:48:14.121Z"}
{"msg":"we have a script to deal with vendoring within the plugins  to work with the specific fabric version we are targetting","username":"troyronda","ts":"2018-03-12T16:48:14.121Z"}
{"msg":"we have a script to deal with vendoring within the plugins  to work with the fabric version we are targeting","username":"troyronda","ts":"2018-03-12T16:48:14.121Z"}
{"msg":"we have a script to deal with vendoring within the plugins  to work with the fabric version we are targeting, and to build the plugin using the go version that fabric was built with","username":"troyronda","ts":"2018-03-12T16:48:14.121Z"}
{"msg":"we have a script to deal with vendoring within the plugins  to work with the fabric version we are targeting (and to build the plugins)","username":"troyronda","ts":"2018-03-12T16:48:14.121Z"}
{"msg":"we also had to apply a small patch to the Go 1.9.2 compiler (can go away once fabric is on Go 1.10)","username":"troyronda","ts":"2018-03-12T16:54:32.827Z"}
{"msg":"we also had to apply a small patch to the Go 1.9.2 compiler that builds the plugins (this patch can go away once fabric is on Go 1.10)","username":"troyronda","ts":"2018-03-12T16:54:32.827Z"}
{"msg":"also: for some special cases, where a plugin (A) is referencing code loaded in another plugin (B), a small patch is need for the Go 1.9 compiler that builds the (A) plugin. This patch is not needed when Fabric is build with Go 1.10.","username":"troyronda","ts":"2018-03-12T17:00:43.676Z"}
{"msg":"also: for some special cases, where a plugin (A) is referencing code loaded in another plugin (B), a small patch is need for the Go 1.9 compiler that builds the (A) plugin. This patch is not needed when Fabric is built with Go 1.10.","username":"troyronda","ts":"2018-03-12T17:00:43.676Z"}
{"msg":"also: for some special cases, where a plugin (A) is referencing code loaded in another plugin (B), a small patch is need for the Go 1.9.2 compiler that builds the (A) plugin. This patch is not needed when Fabric is built with Go 1.10.","username":"troyronda","ts":"2018-03-12T17:00:43.676Z"}
{"msg":"also: for some special cases, where a plugin (A) is referencing code loaded in another plugin (B), a small patch is need for the Go 1.9.2 compiler that builds the (A) plugin. This patch is not needed when Fabric and plugins are built with Go 1.10.","username":"troyronda","ts":"2018-03-12T17:00:43.676Z"}
{"msg":"also: for some special cases, where a plugin (A) is referencing code loaded in another plugin (B), a small patch is need for the Go 1.9.2 compiler that builds the (A) plugin. This patch is not needed when Fabric and plugins are built with Go 1.10 (but we haven't tested on 1.10 yet).","username":"troyronda","ts":"2018-03-12T17:00:43.676Z"}
{"msg":"also: for some special cases, where a plugin (A) is referencing code loaded in another plugin (B), a small patch is needed for the Go 1.9.2 compiler that builds the (A) plugin. This patch is not needed when Fabric and plugins are built with Go 1.10 (but we haven't tested on 1.10 yet).","username":"troyronda","ts":"2018-03-12T17:00:43.676Z"}
{"msg":"Oh thats great so on theory once we move to 1.10 we dont have double loading?","username":"yacovm","ts":"2018-03-12T17:04:37.770Z"}
{"msg":"\"in","username":"yacovm","ts":"2018-03-12T17:04:44.319Z"}
{"msg":"Unfortunately I hear that you still need to deal with flattening the vendored dependencies if that's what you are referring to","username":"troyronda","ts":"2018-03-12T17:11:00.056Z"}
{"msg":"Unfortunately I hear that you still need to deal with flattening the vendored dependencies (and ensuring the right version) if that's what you are referring to","username":"troyronda","ts":"2018-03-12T17:11:00.056Z"}
{"msg":"Unfortunately I hear that you still need to deal with ensuring the right (matching) version of the vendored dependencies if that's what you are referring to","username":"troyronda","ts":"2018-03-12T17:11:00.056Z"}
{"msg":"(I haven't tried it yet)","username":"troyronda","ts":"2018-03-12T17:11:36.224Z"}
{"msg":"@divyank knows a bit more about it","username":"troyronda","ts":"2018-03-12T17:14:27.494Z"}
{"msg":"The issue that's fixed with 1.10 prevents a plugin from importing code that calls plugin.Open() (like the BCCSP package) https://github.com/golang/go/issues/22175\n(We used the compiler patch to work around that in 1.9.2)","username":"divyank","ts":"2018-03-12T17:18:41.870Z"}
{"msg":"Unfortunately there are no fixes in progress for the double loading issues. We use scripts to flatten imported libraries on the path so that only one copy exists at runtime.","username":"divyank","ts":"2018-03-12T17:20:24.839Z"}
{"msg":"thanks divyank","username":"troyronda","ts":"2018-03-12T17:20:39.800Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3YqydYsqXEfm7BC6L) @divyank Could you elaborate on \"flatten imported libraries\"? or could you share the script that I could take a peek at? thx!","username":"guoger","ts":"2018-03-13T01:29:39.321Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3YqydYsqXEfm7BC6L","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3YqydYsqXEfm7BC6L","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Has joined the channel.","username":"GopalPanda","ts":"2018-03-13T01:54:22.997Z","type":"uj"}
{"msg":"Has joined the channel.","username":"swetha","ts":"2018-03-13T02:26:04.951Z","type":"uj"}
{"msg":"@guoger Sure, the Go runtime considers host/vendor/libA and plugin/vendor/libA as distinct packages. As you've noted above, certain packages like golang/x/net cannot co-exist with other instances of themselves. So by flatten I mean that we delete libraries in plugin/vendor that already exist in host/vendor: https://github.com/securekey/fabric-snaps/blob/master/scripts/flatten_deps.sh\nAdditionally, during plugin compilation, we embed plugins within fabric. This ensures that the plugin picks up libraries in host/vendor: https://github.com/securekey/fabric-snaps/blob/master/scripts/move_snaps.sh","username":"divyank","ts":"2018-03-13T17:25:38.118Z"}
{"msg":"Has joined the channel.","username":"ShikarSharma","ts":"2018-03-20T22:43:57.385Z","type":"uj"}
{"msg":"Just wonder, shouldn't this line https://github.com/hyperledger/fabric-baseimage/blob/master/Makefile#L10 be `IS_RELEASE ?= false`?","username":"guoger","ts":"2018-03-21T07:24:44.608Z"}
{"msg":"@guoger: I have no idea (my Makefile/bash-fu is weak). Maybe ask in #fabric-ci?","username":"kostas","ts":"2018-03-23T16:16:59.930Z"}
{"msg":"@guoger they use that variable to denote releases to the CI (and hence, it wouldn't need to be overridable).","username":"troyronda","ts":"2018-03-23T17:06:15.184Z"}
{"msg":"Has joined the channel.","username":"patelan","ts":"2018-03-23T19:37:19.908Z","type":"uj"}
{"msg":"Hi All, QQ. Do we have any keepalive setting between peer and orderer ? We are using fabric 1.0.3","username":"patelan","ts":"2018-03-23T19:37:37.580Z"}
{"msg":"@patelan This channel is for development discussions only, please ask general usage questions in #fabric-orderer ","username":"jyellick","ts":"2018-03-23T19:38:27.241Z"}
{"msg":"And do not cross post","username":"jyellick","ts":"2018-03-23T19:38:48.750Z"}
{"msg":"@jyellick okey sure Thanks","username":"patelan","ts":"2018-03-23T19:38:57.969Z"}
{"msg":"Has left the channel.","username":"patelan","ts":"2018-03-23T19:40:17.534Z","type":"ul"}
{"msg":"Has joined the channel.","username":"wbhagan","ts":"2018-03-27T16:06:58.595Z","type":"uj"}
{"msg":"Has joined the channel.","username":"JiuZhuYou","ts":"2018-03-31T10:40:56.013Z","type":"uj"}
{"msg":"Has joined the channel.","username":"richzhao","ts":"2018-04-01T15:19:59.636Z","type":"uj"}
{"msg":"Has joined the channel.","username":"Rumeel_Hussain","ts":"2018-04-03T15:11:01.648Z","type":"uj"}
{"msg":"This is clever: https://blog.antoine-augusti.fr/2018/03/golang-instant-first-tick-for-ticker/","username":"kostas","ts":"2018-04-05T16:34:04.263Z"}
{"msg":"Clever, but I think my preference would be:\n\n```for {\n    fmt.Println(\"Tick at: \",time.Now())\n    if _, ok := <- ticker.C ; !ok {\n        break\n    }\n}\n```","username":"jyellick","ts":"2018-04-05T17:05:44.290Z"}
{"msg":"Clever, but I think my preference would be:\n\n```for {\n    fmt.Println(\"Tick at: \",time.Now())\n    if _, ok := <- ticker.C ; !ok {\n        break\n    }\n}\n```\n\n(purely because it is not clever)","username":"jyellick","ts":"2018-04-05T17:05:44.290Z"}
{"msg":"^^ That is quite nice as well.","username":"kostas","ts":"2018-04-05T18:47:15.800Z"}
{"msg":"And actually, to accomplish the same effect as the link, you could simply do:\n\n```for {\n    fmt.Println(\"Tick at: \", time.Now())\n    <-ticker.C\n}\n```\n\n(The for-loop version does not actually exit when the ticker is stopped)","username":"jyellick","ts":"2018-04-05T19:10:29.684Z"}
{"msg":"And actually, to accomplish the same effect as the link, you could simply do:\n\n```for {\n    fmt.Println(\"Tick at: \", time.Now())\n    <-ticker.C\n}\n```\n\n(The for-loop version does not actually exit when the ticker is stopped -- it would in fact spin continuously I believe)","username":"jyellick","ts":"2018-04-05T19:10:29.684Z"}
{"msg":"You are right, it would spin forever.","username":"kostas","ts":"2018-04-05T19:28:37.013Z"}
{"msg":"FYI: https://jira.hyperledger.org/browse/FAB-9494","username":"kostas","ts":"2018-04-16T14:20:21.977Z"}
{"msg":"I'm not sure if it goes against common best practices, but my mildly hot take for the day is that our attempts to translate relative paths into absolute paths in our YAML files is a bad idea.","username":"kostas","ts":"2018-04-23T21:37:52.445Z"}
{"msg":"Just have the user go with absolute paths and call it a day.","username":"kostas","ts":"2018-04-23T21:38:51.494Z"}
{"msg":"Interesting, how would you handle two different dev environments in different go paths?","username":"jyellick","ts":"2018-04-24T01:42:46.920Z"}
{"msg":"Not sure I follow?","username":"kostas","ts":"2018-04-24T14:13:33.760Z"}
{"msg":"So for instance, in our `orderer.yaml` we specify an MSP path.  If my gopath is `/home/jyellick/go/` and your go path is `/Users/kostas/go` how do we make the `sampeconfig/orderer.yaml` portable? Are you suggesting we don't?","username":"jyellick","ts":"2018-04-24T14:14:52.519Z"}
{"msg":"Correct. I'd adjust the file path references so that they match my filesystem, and you'd do the same for yours. (I did say it's a mildly hot take.)","username":"kostas","ts":"2018-04-24T14:26:25.424Z"}
{"msg":"#fabric-orderer, and heck RC in its entirety, needs to be shut down. It is the path of least resistance so _of course_ this is where users will post questions, but it incentivizes bad behavior. Folks just don't take the time to formulate their questions appropriately. That 2-3 line text-field is really mean for quick one-offs, and user questions are _rarely_ that. So you end up with a casually and hastily written description of a rather complicated problem. And given the inability to threading, you have these seemingly out-of-context \"@jyellick any solution to my problem?\" messages, which are actually references to a message posted 6 days ago. A truly awful venue for user questions.","username":"kostas","ts":"2018-04-25T15:12:49.449Z"}
{"msg":"#fabric-orderer, and heck RC in its entirety, needs to be shut down. It is the path of least resistance so _of course_ this is where users will post questions, but it incentivizes bad behavior. Folks just don't take the time to formulate their questions appropriately. That 2-3 line text-field is really meant for quick one-liners, and user questions are _rarely_ that. So you end up with a casually and hastily written description of a rather complicated problem. And given the inability to threading, you have these seemingly out-of-context \"@jyellick any solution to my problem?\" messages, which are actually references to a message posted 6 days ago. A truly awful venue for user questions.","username":"kostas","ts":"2018-04-25T15:12:49.449Z"}
{"msg":"I am ranting now, but my plan is to actually propose this to the mailing list eventually. (Folks will shoot it down, I know.)","username":"kostas","ts":"2018-04-25T15:13:46.318Z"}
{"msg":"Chat only makes sense for quick syncing between devs. Keep all the dev channels, kill anything else.","username":"kostas","ts":"2018-04-25T15:14:21.486Z"}
{"msg":"RC really only makes sense for quick syncing between devs. Keep all the dev channels, kill anything else.","username":"kostas","ts":"2018-04-25T15:14:21.486Z"}
{"msg":"Answer on SO is certainly a more useful exercise","username":"jyellick","ts":"2018-04-25T15:26:57.700Z"}
{"msg":"My point is, as long as RC exists as a venue for user questions, expect SO (or the mailing list) to be used as a last resort.","username":"kostas","ts":"2018-04-25T15:43:59.590Z"}
{"msg":"As long as RC exists as a venue for user questions, we'll be seeing SO (or the mailing list) used as a last resort.","username":"kostas","ts":"2018-04-25T15:43:59.590Z"}
{"msg":"It's not the users' fault. It's ours for offering this option.","username":"kostas","ts":"2018-04-25T15:44:33.997Z"}
{"msg":"Has joined the channel.","username":"chainsaw","ts":"2018-04-27T15:53:08.866Z","type":"uj"}
{"msg":"Had accidentally bumped into those before and was always too rushed to check them out. GitHub's keyboard shortcuts are good timesavers: press `?` whenever you're in a repo.","username":"kostas","ts":"2018-05-01T17:05:19.259Z"}
{"msg":"Had accidentally bumped into those before and was always too rushed to check them out. GitHub's keyboard shortcuts are good timesavers: press `?` whenever you're browsing a repo.","username":"kostas","ts":"2018-05-01T17:05:19.259Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Xo59KAWHkZs92atXy","username":"jyellick","ts":"2018-05-01T17:13:36.639Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Xo59KAWHkZs92atXy","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Xo59KAWHkZs92atXy","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Related: I installed this when you had posted the above, continue to find it very useful.","username":"jyellick","ts":"2018-05-01T17:13:50.046Z"}
{"msg":"Ooh nice, good to know.","username":"kostas","ts":"2018-05-01T17:21:09.771Z"}
{"msg":"I want to use their search engine more but my lack of regex-fu isn't helping: https://sourcegraph.com/search","username":"kostas","ts":"2018-05-01T17:21:42.922Z"}
{"msg":"Has joined the channel.","username":"kevin-s-wang","ts":"2018-05-03T02:37:05.690Z","type":"uj"}
{"msg":"Has left the channel.","username":"binhn","ts":"2018-05-03T13:13:17.642Z","type":"ul"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KgMSGuAubkgXWf9ia","username":"kostas","ts":"2018-05-04T15:17:21.580Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KgMSGuAubkgXWf9ia","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KgMSGuAubkgXWf9ia","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I want this pinned to this room, posted as a sign right outside my house, and written on my tombstone.","username":"kostas","ts":"2018-05-04T15:17:54.035Z"}
{"msg":"FYI: https://status.linuxfoundation.org/incidents/zjkddd9wt0yt","username":"jyellick","ts":"2018-05-04T18:24:46.137Z"}
{"msg":"Has joined the channel.","username":"Lexliw","ts":"2018-05-05T17:37:11.384Z","type":"uj"}
{"msg":"Has joined the channel.","username":"versus","ts":"2018-05-14T09:06:15.167Z","type":"uj"}
{"msg":"@jyellick If I enable orderer capability v1_2:true, I get the following error:","username":"dave.enyeart","ts":"2018-05-16T11:55:44.934Z"}
{"msg":"```2018-05-16 07:53:06.911 EDT [orderer/commmon/multichannel] checkResourcesOrPanic -> CRIT 3a8 [channel test-system-channel-name] config requires unsupported orderer capabilities: Orderer capability V1_2 is required but not supported: Orderer capability V1_2 is required but not supported```","username":"dave.enyeart","ts":"2018-05-16T11:55:50.388Z"}
{"msg":"latest master","username":"dave.enyeart","ts":"2018-05-16T11:56:10.677Z"}
{"msg":"is it not yet ready for v1_2 capability?  or did i do something wrong?","username":"dave.enyeart","ts":"2018-05-16T11:56:24.830Z"}
{"msg":"starting orderer with:","username":"dave.enyeart","ts":"2018-05-16T11:57:45.918Z"}
{"msg":"`ORDERER_GENERAL_GENESISPROFILE=SampleSingleMSPSolo orderer`","username":"dave.enyeart","ts":"2018-05-16T11:57:48.171Z"}
{"msg":"@dave.enyeart There is no orderer v1_2 capability","username":"jyellick","ts":"2018-05-16T12:56:43.133Z"}
{"msg":"There is only an application v1_2 capability.  There are no non-backwards compatible changes to the orderer which require a capability this release.","username":"jyellick","ts":"2018-05-16T12:57:07.747Z"}
{"msg":"@jyellick thanks, that explains it!  Can you make sure that is clear in the upgrade doc?  (i didnt check, may be something there already...)","username":"dave.enyeart","ts":"2018-05-16T13:03:57.714Z"}
{"msg":"Will do","username":"jyellick","ts":"2018-05-16T13:34:04.667Z"}
{"msg":"Latest master failing consistently?","username":"kostas","ts":"2018-05-22T18:35:20.078Z"}
{"msg":"```2018-05-22 18:33:33.150 UTC [chaincodeCmd] checkChaincodeCmdParams -> INFO 010 Using vscc vscc\nunit-tests_1  | FAIL    github.com/hyperledger/fabric/peer/chaincode    35.657s```","username":"kostas","ts":"2018-05-22T18:35:22.967Z"}
{"msg":"Has joined the channel.","username":"DivyaAgrawal","ts":"2018-05-22T19:51:09.657Z","type":"uj"}
{"msg":"@kostas - ever since @sykesm fixed all kinds of fabric bugs, i just run UTs via `go test ./...` and that's it.","username":"yacovm","ts":"2018-05-23T19:17:46.282Z"}
{"msg":"Has joined the channel.","username":"sykesm","ts":"2018-05-23T19:17:46.517Z","type":"uj"}
{"msg":"much faster, no need to wait for the docker container to be built, and if there are failures that are irrelevant i just ignore them.","username":"yacovm","ts":"2018-05-23T19:18:32.188Z"}
{"msg":"https://gerrit.hyperledger.org/r/c/22211/ / FAB-10334","username":"sykesm","ts":"2018-05-23T19:20:58.977Z"}
{"msg":"Has joined the channel.","username":"nvmadhav","ts":"2018-05-25T02:38:41.401Z","type":"uj"}
{"msg":"That's a strange way to use log statements: https://github.com/docker/swarmkit/blob/master/manager/state/raft/raft.go#L935","username":"kostas","ts":"2018-05-25T16:18:00.254Z"}
{"msg":"I can see what purpose it serves, but I don't think I've ever seen that before. Interesting.","username":"kostas","ts":"2018-05-25T16:18:28.655Z"}
{"msg":"What's the purpose, just as a visual start/stop queue?","username":"jyellick","ts":"2018-05-25T16:18:50.420Z"}
{"msg":"Yup, that's my guess. A way for the developer (given that it's a debug statement) to know that execution has hit that line.","username":"kostas","ts":"2018-05-25T16:19:14.132Z"}
{"msg":"is it an empty line?","username":"guoger","ts":"2018-05-25T16:29:40.083Z"}
{"msg":"Correct.","username":"kostas","ts":"2018-05-25T17:10:19.347Z"}
{"msg":"Has joined the channel.","username":"Aswath8687","ts":"2018-05-28T04:10:24.207Z","type":"uj"}
{"msg":"Has joined the channel.","username":"rogerwilcos","ts":"2018-05-30T23:12:48.032Z","type":"uj"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3icbD6pjg5MxWmxH7","username":"kostas","ts":"2018-05-31T01:54:19.750Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3icbD6pjg5MxWmxH7","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3icbD6pjg5MxWmxH7","remote":true,"fileId":null,"fileName":null}]}
{"msg":"This one's particularly useful: https://twitter.com/derrickreimer/status/1001842631914254336","username":"kostas","ts":"2018-05-31T01:54:29.523Z"}
{"msg":"That is incredibly useful, I hate passing out links to master","username":"jyellick","ts":"2018-05-31T01:55:11.107Z"}
{"msg":"I suppose it was too much to ask to yank it to the clipboard as well","username":"jyellick","ts":"2018-05-31T01:55:50.235Z"}
{"msg":"Heh, I'd say so.","username":"kostas","ts":"2018-05-31T01:55:58.608Z"}
{"msg":"when is code freeze for v1.2? thx","username":"guoger","ts":"2018-05-31T06:02:09.801Z"}
{"msg":"@guoger I haven't heard about any official code freeze, but we are definitely locked down for new feature","username":"jyellick","ts":"2018-05-31T06:02:44.775Z"}
{"msg":"@guoger I haven't heard about any official code freeze, but we are definitely locked down for new features","username":"jyellick","ts":"2018-05-31T06:02:44.775Z"}
{"msg":"Ideally only tests, doc, and bug fixes should be going in at this point.  There are possibly some trailing CRs required for some already accepted into release feature","username":"jyellick","ts":"2018-05-31T06:03:28.244Z"}
{"msg":"gotcha, thx!!","username":"guoger","ts":"2018-05-31T06:03:45.339Z"}
{"msg":"Has joined the channel.","username":"ashishchainworks","ts":"2018-06-01T12:48:25.024Z","type":"uj"}
{"msg":"Hi, This is regarding signature of Orderer in block metadata. In case of multiple OSNs in a network, whose signature will be there in block. If it is of OSN cutting the block, will that not make blocks in network different (though only by signature). Pls help.","username":"ashishchainworks","ts":"2018-06-01T12:48:29.875Z"}
{"msg":"https://gerrit.hyperledger.org/r/c/22725/\n\nBug in v1.1 which causes batch size changes only to occur on orderer restart","username":"jyellick","ts":"2018-06-04T14:24:16.255Z"}
{"msg":"Has joined the channel.","username":"dappcoder","ts":"2018-06-05T14:03:20.858Z","type":"uj"}
{"msg":"Has joined the channel.","username":"minollo","ts":"2018-06-05T14:14:58.522Z","type":"uj"}
{"msg":"Has joined the channel.","username":"Ryan2","ts":"2018-06-05T22:37:04.693Z","type":"uj"}
{"msg":"Has joined the channel.","username":"abraham","ts":"2018-06-08T05:39:00.947Z","type":"uj"}
{"msg":"Has joined the channel.","username":"knagware9","ts":"2018-06-09T10:20:07.300Z","type":"uj"}
{"msg":"Has joined the channel.","username":"MarcelvandeKerkhof","ts":"2018-06-12T10:16:29.011Z","type":"uj"}
{"msg":"Has joined the channel.","username":"paulananth","ts":"2018-06-15T12:19:16.239Z","type":"uj"}
{"msg":"Bumped into this one today: https://github.com/golang/lint/issues/258","username":"kostas","ts":"2018-06-19T23:47:56.981Z"}
{"msg":"hmmm... interesting...","username":"guoger","ts":"2018-06-20T02:31:22.950Z"}
{"msg":"(Wasn't aware of the concept of Hungarian notation either which is a faux-pas I've definitely committed.)","username":"kostas","ts":"2018-06-20T02:36:34.818Z"}
{"msg":"Is there a way to move an existing Story under an Epic?","username":"kostas","ts":"2018-06-21T01:31:25.199Z"}
{"msg":"@kostas chris told me to help with raft :) so I wanna sync up with you to see where I should start","username":"guoger","ts":"2018-06-21T01:34:07.921Z"}
{"msg":"Right, I asked him if you were available, and he told me the good news. I'm glad we'll have you working with us again :)","username":"kostas","ts":"2018-06-21T01:34:43.975Z"}
{"msg":"Jay, we'll post this to the mailing list at the end of this week, or early next one, so let's not publicize it much until then (though I do get I'm posting this in a public channel). These are our design notes on the Raft integration: https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit","username":"kostas","ts":"2018-06-21T01:35:58.113Z"}
{"msg":"Feel free to have a look when you get a chance, and leave comments, point out flaws, etc.","username":"kostas","ts":"2018-06-21T01:36:26.828Z"}
{"msg":"The rough timeline is: post in 2-3d, collect/address feedback for next 2w, and in the meantime create small, easily digestible stories. Then we kick this thing off w/ implementation.","username":"kostas","ts":"2018-06-21T01:37:45.230Z"}
{"msg":"The rough timeline is: post publicly in 2-3d, collect/address feedback for next 2w, and in the meantime create small, easily digestible stories. Then we kick this thing off w/ implementation.","username":"kostas","ts":"2018-06-21T01:37:45.230Z"}
{"msg":"The rough timeline is: post publicly in 2-3d, collect/address feedback for next 2w, and in the meantime I'll do my best to create small, easily digestible stories. Then we kick this thing off w/ implementation.","username":"kostas","ts":"2018-06-21T01:37:45.230Z"}
{"msg":"The rough timeline is: post publicly in 2-3d, collect/address feedback for next 2w, and in the meantime I'll do my best to create small, easily digestible stories. Then we kick this thing off w/ implementation. I will post again to the mailing list in 2-3w from now with links to the stories, asking interested folks to help out.","username":"kostas","ts":"2018-06-21T01:37:45.230Z"}
{"msg":"@dappcoder: See above ^^","username":"kostas","ts":"2018-06-21T01:40:13.407Z"}
{"msg":"@dappcoder: See above ^^ (I had told you I'd let you know once we had that Raft integration document out)","username":"kostas","ts":"2018-06-21T01:40:13.407Z"}
{"msg":"fantastic! I'll look into the design doc","username":"guoger","ts":"2018-06-21T01:41:07.944Z"}
{"msg":"I immediately thought about reusing etcd raft implementation when I was told about this task","username":"guoger","ts":"2018-06-21T01:41:39.677Z"}
{"msg":"@gombiuda: You had reached out to me expressing interest in contributing to the Raft work. See my notes above.","username":"kostas","ts":"2018-06-21T01:41:44.057Z"}
{"msg":"Has joined the channel.","username":"gombiuda","ts":"2018-06-21T01:41:44.326Z","type":"uj"}
{"msg":"instead of writing from scratch","username":"guoger","ts":"2018-06-21T01:41:54.067Z"}
{"msg":"@guoger: Perfect, glad we're on the same page.","username":"kostas","ts":"2018-06-21T01:42:04.374Z"}
{"msg":"https://github.com/pkg/errors/blob/master/errors.go#L198-L200\n\nThought I would share, as I found this behavior to be quite unintuitive and just spent quite a bit of time debugging trying to figure out why when I was clearly returning errors.Wrapf, the returned thing was nil.","username":"jyellick","ts":"2018-06-21T16:12:11.247Z"}
{"msg":"Has joined the channel.","username":"Event","ts":"2018-06-24T08:42:48.948Z","type":"uj"}
{"msg":" Hi, I am new to this chat and Hyperledger.\nAre there any coders and UI Developers interested to collaborate on an exciting project?\nI have entire business logic but need help with coding and making a functional UI, as first step. Any suggestions are most welcome. Thanks. ","username":"Event","ts":"2018-06-24T08:42:54.583Z"}
{"msg":"@Event this channel is use for orderer development discussion *only*. you probably will get a better answer if you send your request to Fabric mailing list at fabric@lists.hyperledger.org","username":"guoger","ts":"2018-06-25T15:04:16.376Z"}
{"msg":"ok Thnx @guoger ","username":"Event","ts":"2018-06-25T16:29:44.410Z"}
{"msg":"Hello all,\nIf i add some debug/logging statements in the orderer and build it \nand copy the new binary to the bin location in fabric-sample \non running the first-network will new orderer be executed? or I need to something else too?\nTIA","username":"DivyaAgrawal","ts":"2018-06-26T09:06:09.049Z"}
{"msg":"So [in this article from 2011](https://arstechnica.com/science/2011/04/guns-in-the-home-lots-of-risk-ambiguity/), the author slipped in the following sentence:\n> If you have read this far, please mention Bananas in your comment below. We're pretty sure 90% of the respondents to this story won't even read it first.","username":"kostas","ts":"2018-06-26T20:34:46.454Z"}
{"msg":"So [in this article from 2011](https://arstechnica.com/science/2011/04/guns-in-the-home-lots-of-risk-ambiguity/), the author asked readers to mention the word 'bananas' in their comment, if they had read this far. It took 92 comments before someone did write 'bananas'. I wanted to try something similar with the Raft doc but I forgot.","username":"kostas","ts":"2018-06-26T20:34:46.454Z"}
{"msg":"I wanted to do something similar for the Raft doc but I forgot.","username":"kostas","ts":"2018-06-26T20:34:56.874Z"}
{"msg":"(It took 92 comments before someone wrote 'bananas' in that article BTW.)","username":"kostas","ts":"2018-06-26T20:35:30.263Z"}
{"msg":"(It took 92 comments before someone wrote 'bananas' BTW.)","username":"kostas","ts":"2018-06-26T20:35:30.263Z"}
{"msg":"Has joined the channel.","username":"toddinpal","ts":"2018-06-26T23:40:32.542Z","type":"uj"}
{"msg":"Any thought about using a BFT hardened Raft such as Tangaroa instead of straight Raft?","username":"toddinpal","ts":"2018-06-26T23:42:59.355Z"}
{"msg":"Is there a library for it with the same qualities as etcd/raft? (Go, right license, nicely documented, polished, well-tested.)","username":"kostas","ts":"2018-06-26T23:54:28.435Z"}
{"msg":"Is there a library for it with the same qualities as etcd/raft? (Go, right license, nicely documented, polished, well-tested.) I do not seem to find any.","username":"kostas","ts":"2018-06-26T23:54:28.435Z"}
{"msg":"I can look...  ","username":"toddinpal","ts":"2018-06-27T00:05:48.261Z"}
{"msg":"Has joined the channel.","username":"puneetsharma86","ts":"2018-06-27T09:38:16.915Z","type":"uj"}
{"msg":"```\nfunc main() {\n    a := []int{0, 1}\n    fmt.Printf(\"%v\", a[len(a):])\n}\n```","username":"kostas","ts":"2018-07-03T01:39:14.305Z"}
{"msg":"Does this panic (index out of range), or not? Taking bets.","username":"kostas","ts":"2018-07-03T01:39:32.892Z"}
{"msg":"My money was on not, but too cowardly to post before testing, purely based on the idea that:\n\n```a := []int{}\nfmt.Printf(\"%v\\n\", a[0:])\n```\nshould not panic","username":"jyellick","ts":"2018-07-03T02:52:07.620Z"}
{"msg":"ok, but someone needs to explain this before I take my money out of pocket","username":"guoger","ts":"2018-07-03T03:44:04.554Z"}
{"msg":"@guoger: When you *slice* (i.e. a[low:high]), the indices *can* go up to len(a).","username":"kostas","ts":"2018-07-03T03:48:50.077Z"}
{"msg":"When you access an element, an index equal to len(a) is —of course— out of range and results in a run-time panic.","username":"kostas","ts":"2018-07-03T03:48:57.209Z"}
{"msg":"In the snippet above we're slicing, so len(a) is a valid choice.","username":"kostas","ts":"2018-07-03T03:49:00.987Z"}
{"msg":"The language spec could have been a bit clearer on this, though it does say somewhere in there:","username":"kostas","ts":"2018-07-03T03:49:38.037Z"}
{"msg":"> ...the indices are in range if 0 <= low <= high <= len(a), otherwise they are out of range.","username":"kostas","ts":"2018-07-03T03:49:44.338Z"}
{"msg":"https://golang.org/ref/spec#Slice_expressions","username":"kostas","ts":"2018-07-03T03:49:47.723Z"}
{"msg":"hmm, slicing is half-open range, so in order to include the last element, `high` needs to be greater than last index, hence len()","username":"guoger","ts":"2018-07-03T03:52:49.805Z"}
{"msg":"do you think this is the purpose?","username":"guoger","ts":"2018-07-03T03:53:09.361Z"}
{"msg":"Not sure I follow?","username":"kostas","ts":"2018-07-03T03:53:12.413Z"}
{"msg":"```\nfunc main() {\n        a := []int{0,1,2}\n        fmt.Printf(\"%v\\n\", a[0:3])\n        fmt.Printf(\"%v\\n\", a[0:])\n}\n```","username":"guoger","ts":"2018-07-03T04:51:29.266Z"}
{"msg":"I'm trying to understand the reason behind `high <= len`, instead of `high < len`. One reason I could think of, is that we need to be able to include the *last* element","username":"guoger","ts":"2018-07-03T04:52:35.886Z"}
{"msg":"so we could write something in this code snippet","username":"guoger","ts":"2018-07-03T04:52:59.354Z"}
{"msg":"Ah, I get you now. I'm not sure what the motivation is, but this seems likely.","username":"kostas","ts":"2018-07-03T04:56:21.887Z"}
{"msg":"Has joined the channel.","username":"suchith.arodi","ts":"2018-07-03T18:25:37.115Z","type":"uj"}
{"msg":"are we going to use ginkgo, gomega and counterfeiter for raft work?","username":"guoger","ts":"2018-07-04T05:36:44.768Z"}
{"msg":"@guoger: Yes. If you look at https://github.com/hyperledger/fabric/tree/master/integration/nwo, it is demonstrating how the  first two are used.","username":"kostas","ts":"2018-07-04T09:13:43.726Z"}
{"msg":"cool, we used that in evm project as well :) although I hope we don't need to convert all existing test to use them for hygiene purpose","username":"guoger","ts":"2018-07-04T09:15:37.154Z"}
{"msg":"We should be good, since the raft package is a clean slate.","username":"kostas","ts":"2018-07-04T09:17:16.762Z"}
{"msg":"anyone knows how to subscribe to google doc, so I could get notified about new comments (not only replies)?","username":"guoger","ts":"2018-07-05T10:26:48.228Z"}
{"msg":"@kostas is this reflected in design doc? my impression is that we'll be adding new gRPC service to facilitate message exchange among raft nodes, instead of accepting ingress tx. (in another word, stick with `broadcast` rpc)\nhttps://jira.hyperledger.org/browse/FAB-9902?focusedCommentId=46333&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-46333","username":"guoger","ts":"2018-07-05T14:48:00.471Z"}
{"msg":"@guoger: Treat the doc as the source of truth. (New RPC it is.)","username":"kostas","ts":"2018-07-05T15:31:12.731Z"}
{"msg":"> anyone knows how to subscribe to google doc, so I could get notified about new comments (not only replies)?\nI don't what I've done wrong in this doc, but I get no notifications of new comments and have to scan them manually.","username":"kostas","ts":"2018-07-05T15:31:52.216Z"}
{"msg":"","username":"kostas","ts":"2018-07-05T16:12:12.542Z","attachments":[{"type":"file","title":"Screen Shot 2018-07-05 at 12.11.38.png","title_link":"/file-upload/KWfhAQzyaJmZgv33K/Screen%20Shot%202018-07-05%20at%2012.11.38.png","image_url":"/file-upload/KWfhAQzyaJmZgv33K/Screen%20Shot%202018-07-05%20at%2012.11.38.png","image_type":"image/png","image_size":16839,"url":"/file-upload/KWfhAQzyaJmZgv33K/Screen%20Shot%202018-07-05%20at%2012.11.38.png","remote":false,"fileId":"KWfhAQzyaJmZgv33K","fileName":"Screen Shot 2018-07-05 at 12.11.38.png"}]}
{"msg":"@guoger: Clicking on the grey comment icon should give the options to choose to be notified of all comments. (But that still doesn't work for me.)","username":"kostas","ts":"2018-07-05T16:12:51.573Z"}
{"msg":"Raft update:","username":"kostas","ts":"2018-07-05T16:51:10.847Z"}
{"msg":"We've got the following outstanding items on the design --\n1. https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHLQ\n2. https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHOo\n3. https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdGtU","username":"kostas","ts":"2018-07-05T16:51:15.630Z"}
{"msg":"We've got the following outstanding items on the design:\n1. https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHLQ\n2. https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHOo\n3. https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdGtU","username":"kostas","ts":"2018-07-05T16:51:15.630Z"}
{"msg":"We've got the following outstanding items on the design:\n1. What do we do if we _need_ to edit more than one certificates at once?\n https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHLQ\n2. Wire Raft RPC invocation to appropriate receiving FSM (remember that each channel \n maps to a different cluster): https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHOo\n3. Edit own consenter info: https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdGtU","username":"kostas","ts":"2018-07-05T16:51:15.630Z"}
{"msg":"We've got the following outstanding items on the design:\n1. What do we do if we _need_ to edit more than one certificates at once?\n https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHLQ\n2. ~Wire Raft RPC invocation to appropriate receiving FSM (remember that each channel \n maps to a different cluster): https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHOo~\n3. Edit own consenter info: https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdGtU","username":"kostas","ts":"2018-07-05T16:51:15.630Z"}
{"msg":"We've got the following outstanding items on the design:\n1. What do we do if we _need_ to edit more than one certificates at once?\n https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHLQ\n2. ~Wire Raft RPC invocation to appropriate receiving FSM (remember that each channel \n maps to a different cluster):~ ~https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHOo~\n3. Edit own consenter info: https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdGtU","username":"kostas","ts":"2018-07-05T16:51:15.630Z"}
{"msg":"We've got the following outstanding items on the design:\n1. What do we do if we _need_ to edit more than one certificates at once?\n https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHLQ\n2. ~Wire Raft RPC invocation to appropriate receiving FSM (remember that each channel \n maps to a different cluster)~: ~https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHOo~\n3. Edit own consenter info: https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdGtU","username":"kostas","ts":"2018-07-05T16:51:15.630Z"}
{"msg":"We've got the following outstanding items on the design:\n1. What do we do if we _need_ to edit more than one certificates at once?\n https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHLQ\n2. ~Wire Raft RPC invocation to appropriate receiving FSM~ (remember that each channel \n maps to a different cluster): ~https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHOo~\n3. Edit own consenter info: https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdGtU","username":"kostas","ts":"2018-07-05T16:51:15.630Z"}
{"msg":"We've got the following outstanding items on the design:\n1. What do we do if we _need_ to edit more than one certificates at once?\n https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHLQ\n2. ~Wire Raft RPC invocation to appropriate receiving FSM~ (~remember that each channel \n maps to a different cluster~): ~https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHOo~\n3. Edit own consenter info: https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdGtU","username":"kostas","ts":"2018-07-05T16:51:15.630Z"}
{"msg":"We've got the following outstanding items on the design:\n1. What do we do if we _need_ to edit more than one certificates at once?\n https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHLQ\n2. ~Wire Raft RPC invocation to appropriate receiving FSM~ (~remember that each channel \n maps to a different cluster~): ~https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHOo~\n3. Edit own consenter info: https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdGtU (@yacovm already has a proposal for this one)","username":"kostas","ts":"2018-07-05T16:51:15.630Z"}
{"msg":"We've got the following outstanding items on the design:\n1. What do we do if we _need_ to edit more than one certificates at once?\n https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHLQ\n2. ~Wire Raft RPC invocation to appropriate receiving FSM, remember that each channel \n maps to a different cluster~: ~https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHOo~\n3. Edit own consenter info: https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdGtU (@yacovm already has a proposal for this one)","username":"kostas","ts":"2018-07-05T16:51:15.630Z"}
{"msg":"We've got the following outstanding items on the design:\n1. What do we do if we _need_ to edit more than one certificates at once?\n https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHLQ\n2. ~Wire Raft RPC invocation to appropriate receiving FSM -- remember that each channel \n maps to a different cluster~: ~https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHOo~\n3. Edit own consenter info: https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdGtU (@yacovm already has a proposal for this one)","username":"kostas","ts":"2018-07-05T16:51:15.630Z"}
{"msg":"We've got the following outstanding items on the design:\n1. What do we do if we _need_ to edit more than one certificates at once?\n https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHLQ\n2. ~Wire Raft RPC invocation to appropriate receiving FSM~(~remember that each channel \n maps to a different cluster~): ~https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHOo~\n3. Edit own consenter info: https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdGtU (@yacovm already has a proposal for this one)","username":"kostas","ts":"2018-07-05T16:51:15.630Z"}
{"msg":"We've got the following outstanding items on the design:\n1. What do we do if we _need_ to edit more than one certificates at once?\n https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHLQ\n2. ~Wire Raft RPC invocation to appropriate receiving FSM.~ ~Remember that each channel \n maps to a different cluster. ~https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHOo~\n3. Edit own consenter info: https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdGtU (@yacovm already has a proposal for this one)","username":"kostas","ts":"2018-07-05T16:51:15.630Z"}
{"msg":"We've got the following outstanding items on the design:\n1. What do we do if we _need_ to edit more than one certificates at once?\n https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHLQ\n2. ~Wire Raft RPC invocation to appropriate receiving FSM~: ~https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHOo~\n3. Edit own consenter info: https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdGtU (@yacovm already has a proposal for this one)","username":"kostas","ts":"2018-07-05T16:51:15.630Z"}
{"msg":"I'm looking at 2 right now. If you have thoughts on any of these, post here or in the doc.","username":"kostas","ts":"2018-07-05T16:56:41.908Z"}
{"msg":"If you have free cycles, and intend to contribute to the Raft work, studying the raftexample in the etcd repo https://github.com/coreos/etcd/tree/master/contrib/raftexample is a must.","username":"kostas","ts":"2018-07-05T16:59:03.207Z"}
{"msg":"I've also taken a preliminary crack at breaking the work down into stories/weeks, but this will have to be edited further, given the outstanding items above: https://docs.google.com/spreadsheets/d/1R02-xjdl4hNw90kN4NZ1kX0f4QoIYn51_1UHlwy-GQs/edit","username":"kostas","ts":"2018-07-05T17:03:09.171Z"}
{"msg":"If you see something that strikes you as wrong, post your counter-proposal, either here or in the doc.","username":"kostas","ts":"2018-07-05T17:04:27.093Z"}
{"msg":"RE: 2 -- I'm seeing parallels to how the broadcast handler retrieves the chain corresponding to the requested channel by using the multichannel registrar: https://github.com/hyperledger/fabric/blob/77c3aa6ce5b0cfba93bfda009095886dbcadff91/orderer/common/broadcast/broadcast.go#L93","username":"kostas","ts":"2018-07-05T17:20:28.891Z"}
{"msg":"RE: 2 -- I'm seeing parallels to how the broadcast handler retrieves the chain (technically: [ChainSupport object](https://github.com/hyperledger/fabric/blob/77c3aa6ce5b0cfba93bfda009095886dbcadff91/orderer/common/multichannel/chainsupport.go#L22))corresponding to the requested channel by using the multichannel registrar: https://github.com/hyperledger/fabric/blob/77c3aa6ce5b0cfba93bfda009095886dbcadff91/orderer/common/broadcast/broadcast.go#L93","username":"kostas","ts":"2018-07-05T17:20:28.891Z"}
{"msg":"RE: 2 -- I'm seeing parallels to how the broadcast handler retrieves the chain (technically: [ChainSupport object](https://github.com/hyperledger/fabric/blob/77c3aa6ce5b0cfba93bfda009095886dbcadff91/orderer/common/multichannel/chainsupport.go#L22)) corresponding to the requested channel by using the multichannel registrar: https://github.com/hyperledger/fabric/blob/77c3aa6ce5b0cfba93bfda009095886dbcadff91/orderer/common/broadcast/broadcast.go#L93","username":"kostas","ts":"2018-07-05T17:20:28.891Z"}
{"msg":"If out EtcdRaftProposal server handler has access to that registrar we can proceed accordingly, but we're not done yet.","username":"kostas","ts":"2018-07-05T17:21:04.472Z"}
{"msg":"If our EtcdRaftProposal server handler has access to that registrar we can proceed accordingly, but we're not done yet.","username":"kostas","ts":"2018-07-05T17:21:04.472Z"}
{"msg":"The question is: which method do we invoke on that `ChainSupport` object in order to route the transaction to the right Raft FSM.","username":"kostas","ts":"2018-07-05T17:25:15.829Z"}
{"msg":"As I see it, we either add a new method to the already big [Chain interface](https://github.com/hyperledger/fabric/blob/release-1.2/orderer/consensus/consensus.go#L34), or we re-use one of its methods, if the semantics fit.","username":"kostas","ts":"2018-07-05T17:26:26.840Z"}
{"msg":"(And I don't see any method that could be re-used for it.)","username":"kostas","ts":"2018-07-05T17:29:14.649Z"}
{"msg":"Having the consenter reach into the registrar feels wrong to me.  I would have expected that when the consenter object registers the RPC service, that it would setup and handle routing to the correct FSM.","username":"jyellick","ts":"2018-07-05T17:30:40.807Z"}
{"msg":"We _can_ establish a similar sort of mapping to `r.chains`, and that gives us the freedom to route w/ piggybacking on any of the Fabric interfaces. Still not sold on why this wouldn't be a query on the registrar though.","username":"kostas","ts":"2018-07-05T17:33:27.328Z"}
{"msg":"We _can_ establish a similar mapping to `r.chains` on the plugin side of things, and that gives us the freedom to route w/ piggybacking on any of the Fabric interfaces. Still not sold on why this wouldn't be a query on the registrar though.","username":"kostas","ts":"2018-07-05T17:33:27.328Z"}
{"msg":"Do you mean \"a mapping similar to `r.chains`\" or, \"a similar structure which maps into `r.chains`\"?","username":"jyellick","ts":"2018-07-05T17:37:02.461Z"}
{"msg":"I meant the former. But to keep things simpler: a map whose key is the channel or cluster ID, and the value is whatever object we (Raft plugin authors) wish to expose to the EtcdRaftProposal server handler.","username":"kostas","ts":"2018-07-05T17:38:56.822Z"}
{"msg":"I meant the former. But to keep things simpler: a map whose key is the channel or cluster ID, and the value is a reference to whatever object we (Raft plugin authors) wish to expose to the EtcdRaftProposal server handler.","username":"kostas","ts":"2018-07-05T17:38:56.822Z"}
{"msg":"That wires through to the Raft FSM corresponding to the channel/cluster.","username":"kostas","ts":"2018-07-05T17:39:25.587Z"}
{"msg":"Got it, thanks.  My inclination then is to maintain this mapping separately.  The most pragmatic reason which jumps to mind is that the `Chain` is not registered with the registrar until after the consenter starts, so there would likely be a race or deadlock while attempting to route the initial handshake messages.","username":"jyellick","ts":"2018-07-05T17:43:57.073Z"}
{"msg":"In short, if you wish to rely on the routing working during the `HandleChain` invocation, then I think there will be problems.","username":"jyellick","ts":"2018-07-05T17:44:49.824Z"}
{"msg":"> so there would likely be a race or deadlock while attempting to route the initial handshake messages.\nIf key is not found, just fail the call?","username":"kostas","ts":"2018-07-05T17:50:25.268Z"}
{"msg":"Reflecting on it a bit more, you are certainly right, as channel creation is not a synchronous operation, even with a separate mapping, we will have to contend with messages which are received for a channel we do not (yet) know about.  I'm not sure what the right way to handle that is, because warning about unknown channels will be inelegant, but indefinitely buffering would also be a problem.  I expect we would want to buffer the messages up to some total size and perhaps duration before logging an error and or dropping.\n\nStill, I would envision that `HandleChain` starts a go routine which begins sending a receiving RPC messages.  The sending bit seems more problematic to me.  Assuming that the routing is done externally based on a mapping, then you would have to contend with that mapping not existing in the case of re-using the registrar.  Considering that the mapping is simple to code and low overhead, it seems simpler than dealing with failures on outgoing messages to me.","username":"jyellick","ts":"2018-07-05T17:58:57.839Z"}
{"msg":"> Assuming that the routing is done externally based on a mapping, then you would have to contend with that mapping not existing in the case of re-using the registrar.\n\nSo something still doesn't stick here which is why I'm challenging this. (Other than, I'm not married to either idea, and yeah, the external mapping is simple enough and better in that we don't have to mess around with existing interfaces, that we should go for it.) Namely, you need a Raft FSM object in order to populate that external mapping, and you can't have a Raft FSM object unless you instantiate a chain object. And that chain object is first registered on the registrar.","username":"kostas","ts":"2018-07-05T18:15:45.247Z"}
{"msg":"The TL;DR version is that the registrar will always get populated first.","username":"kostas","ts":"2018-07-05T18:16:26.457Z"}
{"msg":"The TL;DR version is that the registrar mapping will always get populated first.","username":"kostas","ts":"2018-07-05T18:16:26.457Z"}
{"msg":"Naturally, while typing up a long example, I think I see the error in my thinking","username":"jyellick","ts":"2018-07-05T18:23:08.660Z"}
{"msg":"I honestly forgot that there was a `Start()` function which is invoked after the registration takes place.","username":"jyellick","ts":"2018-07-05T18:23:24.134Z"}
{"msg":"I was assuming it was the `HandleChain` which kicked off the service go routine, but that should not be the case.","username":"jyellick","ts":"2018-07-05T18:23:42.050Z"}
{"msg":"It's relatively trivial to fix, but the registrar map is not actually memory order safe.  Meaning, you are guaranteed to get some consistent view of the registry, but not necessarily the current one (as there is no locking, and updating the map is done through a non-atomic pointer swap)","username":"jyellick","ts":"2018-07-05T18:24:59.076Z"}
{"msg":"The newMap = copy of old Map and then swap the maps bit, right?","username":"kostas","ts":"2018-07-05T18:25:41.430Z"}
{"msg":"Correct","username":"jyellick","ts":"2018-07-05T18:25:48.304Z"}
{"msg":"Was looking at that earlier today.","username":"kostas","ts":"2018-07-05T18:25:49.109Z"}
{"msg":"I was probably trying to be too clever, but at the time, I could not come up with any reason why the map needed to be memory safe (as the broadcast/deliver clients were already asynchronous, a transient failure didn't matter)","username":"jyellick","ts":"2018-07-05T18:27:53.976Z"}
{"msg":"Still, do you agree that there is no way in which the external mapping can have an edge over the registrar mapping when it comes to being aware of instantiated channels?","username":"kostas","ts":"2018-07-05T18:39:53.920Z"}
{"msg":"It can have knowledge _slightly_ sooner, but not enough to be significant.","username":"jyellick","ts":"2018-07-05T18:44:00.477Z"}
{"msg":"Not disputing this, but disputing this:","username":"kostas","ts":"2018-07-05T18:44:35.461Z"}
{"msg":"> then you would have to contend with that mapping not existing in the case of re-using the registrar","username":"kostas","ts":"2018-07-05T18:44:37.817Z"}
{"msg":"Ah, that statement was done under the assumption that the servicing go routine was spawned during `HandleChain` and not during `Start`","username":"jyellick","ts":"2018-07-05T18:45:05.408Z"}
{"msg":"So, scratch that assertion","username":"jyellick","ts":"2018-07-05T18:45:14.008Z"}
{"msg":"Negligible advantage or not (and assuming the lack of atomic swap not being an issue), registrar's mapping comes first.","username":"kostas","ts":"2018-07-05T18:45:15.609Z"}
{"msg":"I disagree there","username":"jyellick","ts":"2018-07-05T18:45:25.233Z"}
{"msg":"How so?","username":"kostas","ts":"2018-07-05T18:45:37.250Z"}
{"msg":"`HandleChain` is called before the registrar map key is created.","username":"jyellick","ts":"2018-07-05T18:45:45.352Z"}
{"msg":"The order is:\n\n```chain, _ := HandleChain\nregistrar.chains[channelID] = chain\nchain.start\n```","username":"jyellick","ts":"2018-07-05T18:46:44.175Z"}
{"msg":"The order is:\n\n```chain, _ := HandleChain(...)\nregistrar.chains[channelID] = chain\nchain.start\n```","username":"jyellick","ts":"2018-07-05T18:46:44.175Z"}
{"msg":"The order is:\n\n```chain, _ := HandleChain(...)\nregistrar.chains[channelID] = chain\nchain.start()\n```","username":"jyellick","ts":"2018-07-05T18:46:44.175Z"}
{"msg":"The order is:\n\n```chain, _ := consenter.HandleChain(...)\nregistrar.chains[channelID] = chain\nchain.start()\n```","username":"jyellick","ts":"2018-07-05T18:46:44.175Z"}
{"msg":"Got it, and you're saying -- if you populate your external map on the handlechain invocation, the edge doesn't apply.","username":"kostas","ts":"2018-07-05T18:47:34.166Z"}
{"msg":"Correct","username":"jyellick","ts":"2018-07-05T18:47:39.440Z"}
{"msg":"Right, though the FSM should be spinned up on the start call, so the edge is lost.","username":"kostas","ts":"2018-07-05T18:48:15.410Z"}
{"msg":"At any rate, I know get why you made that claim.","username":"kostas","ts":"2018-07-05T18:48:32.531Z"}
{"msg":"At any rate, I now get why you made that claim.","username":"kostas","ts":"2018-07-05T18:48:32.531Z"}
{"msg":"At any rate, I get why you made that claim.","username":"kostas","ts":"2018-07-05T18:48:32.531Z"}
{"msg":"Has joined the channel.","username":"C0rWin","ts":"2018-07-05T19:37:36.358Z","type":"uj"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=7EzdcBFb9q3tp7jCh","username":"kostas","ts":"2018-07-06T00:54:05.857Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=7EzdcBFb9q3tp7jCh","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=7EzdcBFb9q3tp7jCh","remote":true,"fileId":null,"fileName":null}]}
{"msg":"The only outstanding one is 1. I'll give that some thought tomorrow.","username":"kostas","ts":"2018-07-06T00:54:29.804Z"}
{"msg":"At the time of this writing, the only outstanding one is 1. I'll give that some thought tomorrow.","username":"kostas","ts":"2018-07-06T00:54:29.804Z"}
{"msg":"At the time of this writing, the only outstanding one is 1.","username":"kostas","ts":"2018-07-06T00:54:29.804Z"}
{"msg":"At the time of this writing, the only outstanding one is item number 1.","username":"kostas","ts":"2018-07-06T00:54:29.804Z"}
{"msg":"At the time of this writing, the only outstanding one is the first item in that list.","username":"kostas","ts":"2018-07-06T00:54:29.804Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=exWSi97vjGPqSiDdt) @kostas mind elaborate a bit?","username":"guoger","ts":"2018-07-06T02:53:41.268Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=exWSi97vjGPqSiDdt","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=exWSi97vjGPqSiDdt","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@kostas we have another item that is - I think we should not change the semantics of the successful Broadcast() call (and if it is successful - it is in some block)","username":"yacovm","ts":"2018-07-06T07:03:19.111Z"}
{"msg":"I think we should delay the broadcast until the block is cut and the transaction is in, or a timeout expires","username":"yacovm","ts":"2018-07-06T07:04:18.994Z"}
{"msg":"https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAAB62Ch5M","username":"yacovm","ts":"2018-07-06T07:07:43.689Z"}
{"msg":"(Linked to Jason's comment) - Do you want to discuss it? @guoger @C0rWin @kostas @jyellick ","username":"yacovm","ts":"2018-07-06T07:09:11.842Z"}
{"msg":"I tend to agree with @yacovm that we should avoid changing semantics of return code, e.g. couldn't we add `202 Accept` to make it more precise? And since our `Broadcast` is already bidi stream, we could still send `200 OK` to client when tx is eventually included into block. Also, could you elaborate on shared queue solution? I couldn't immediately figure out how that solves our problem","username":"guoger","ts":"2018-07-06T07:36:26.435Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=gnnvTL2LBs6D7uZxg) also, would it be a problem if a slower orderer node, which has not instantiate newly created channel yet, receives raft messages targeting this channel and error out? ","username":"guoger","ts":"2018-07-06T07:50:34.266Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=gnnvTL2LBs6D7uZxg","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=gnnvTL2LBs6D7uZxg","remote":true,"fileId":null,"fileName":null}]}
{"msg":">  I think we should not change the semantics of the successful Broadcast() call (and if it is successful - it is in some block)\n\nThis is not exactly the existing semantics.  To be precise, the current semantics promise a client that: \"If you receive a 200 back, then the message has entered consensus and will not be discarded due to a crash.  If the message is still valid once ordered, then it will commit in a block.\"  Note particularly that if a client's access is revoked after a 200 but before the message receives total order, then the message is simply discarded.","username":"jyellick","ts":"2018-07-06T13:36:59.344Z"}
{"msg":"what I'm saying is - the SDK has a certain logic according to which it operates","username":"yacovm","ts":"2018-07-06T13:38:27.949Z"}
{"msg":"if we say we provide weaker guarantees then we must express that somehow in the API so the SDK can distinguish, no?","username":"yacovm","ts":"2018-07-06T13:38:50.758Z"}
{"msg":"the alternative would be to not change the API and provide the same guarantees ","username":"yacovm","ts":"2018-07-06T13:39:06.585Z"}
{"msg":"As we move towards BFT I think it is unavoidable that we weaken the guarantees.  A client will have to wait for the request to commit and if it does not, resubmit it to another node.","username":"jyellick","ts":"2018-07-06T13:40:55.115Z"}
{"msg":"Even if we required that the client submit to f+1 replicas, the client generally still must acknowledge the possibility of failure.","username":"jyellick","ts":"2018-07-06T13:41:36.819Z"}
{"msg":"^^ This.","username":"kostas","ts":"2018-07-06T13:41:46.109Z"}
{"msg":"As I wrote in a comment in the doc, there will always be a case that the client has to resubmit.","username":"kostas","ts":"2018-07-06T13:42:13.804Z"}
{"msg":"So I'm wary of building additional logic to the orderer that will increase our surface, and may not even address the problem fully (in whatever bizzare, BFT scenario comes up next).","username":"kostas","ts":"2018-07-06T13:43:19.203Z"}
{"msg":"all right then the question that remains is - whether we should return something else than `Status.Success` or not?","username":"yacovm","ts":"2018-07-06T13:44:45.893Z"}
{"msg":"perhaps it's not worth to do that and we can just say that if the OSN crashes","username":"yacovm","ts":"2018-07-06T13:45:07.432Z"}
{"msg":"then the SDK should have some timeout built in","username":"yacovm","ts":"2018-07-06T13:45:19.902Z"}
{"msg":"that assumes that if after `K` blocks the event hub didn't notify about that txn","username":"yacovm","ts":"2018-07-06T13:45:36.061Z"}
{"msg":"then something bad happened","username":"yacovm","ts":"2018-07-06T13:45:44.888Z"}
{"msg":"?","username":"yacovm","ts":"2018-07-06T13:45:46.674Z"}
{"msg":"So, the (perhaps naive) way I was thinking about it is: success == the OSN got it and it'll attempt to order it, and that's it.","username":"kostas","ts":"2018-07-06T13:46:39.882Z"}
{"msg":"The SDK should have a timer built-in, as you suggest, and if it doesn't see it in K blocks, it retries.","username":"kostas","ts":"2018-07-06T13:47:05.218Z"}
{"msg":"I think we're saying the same thing, it's just this phrase that threw me off, which is why I repeated everything above:","username":"kostas","ts":"2018-07-06T13:47:39.117Z"}
{"msg":"> perhaps it's not worth to do that and we can just say that if the OSN crashes","username":"kostas","ts":"2018-07-06T13:47:43.401Z"}
{"msg":"I've been thinking about point #1 and I think I see a bigger issue.","username":"kostas","ts":"2018-07-06T13:49:51.800Z"}
{"msg":"what's that?","username":"yacovm","ts":"2018-07-06T13:50:01.038Z"}
{"msg":"(what's point 1? )","username":"yacovm","ts":"2018-07-06T13:50:07.150Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=HGNko56ASfPsHA4mu","username":"kostas","ts":"2018-07-06T13:50:15.035Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=HGNko56ASfPsHA4mu","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=HGNko56ASfPsHA4mu","remote":true,"fileId":null,"fileName":null}]}
{"msg":"ah","username":"yacovm","ts":"2018-07-06T13:50:19.883Z"}
{"msg":"So, for safety reasons, the reconfiguraton in Raft is a two-phase process.","username":"kostas","ts":"2018-07-06T13:51:02.447Z"}
{"msg":"You temporarily migrate to a joint-consensus state between old_conf and new_conf before switching to new_conf, and you need a majority of old_conf and new_conf to agree.","username":"kostas","ts":"2018-07-06T13:52:26.413Z"}
{"msg":"(I am waving my hands over this at the moment, I know. Bear with me for a sec.)","username":"kostas","ts":"2018-07-06T13:52:56.144Z"}
{"msg":"What we've proposed in the doc is that the Fabric configuration change comes first, and then the Raft one.","username":"kostas","ts":"2018-07-06T13:53:22.244Z"}
{"msg":"Which means we cut off read/write access to part of old_conf right away.","username":"kostas","ts":"2018-07-06T13:53:50.060Z"}
{"msg":"And I am concerned about what implications this may have.","username":"kostas","ts":"2018-07-06T13:54:02.473Z"}
{"msg":"So, I need to go over this part again.","username":"kostas","ts":"2018-07-06T13:54:24.146Z"}
{"msg":"so maybe we can do something else?","username":"yacovm","ts":"2018-07-06T13:55:12.156Z"}
{"msg":"(I think that since we change one node at a time we should be good?)","username":"kostas","ts":"2018-07-06T13:55:21.826Z"}
{"msg":"> so maybe we can do something else?\nShoot, I'm all ears.","username":"kostas","ts":"2018-07-06T13:55:28.577Z"}
{"msg":"what if we step back for a second and design that membership table in another way","username":"yacovm","ts":"2018-07-06T13:55:39.936Z"}
{"msg":"to be more \"raft\"-friendly","username":"yacovm","ts":"2018-07-06T13:55:51.796Z"}
{"msg":"put the integers that denote the IDs as real IDs inside the table","username":"yacovm","ts":"2018-07-06T13:56:05.272Z"}
{"msg":"that's the \"left most column\" ;)","username":"yacovm","ts":"2018-07-06T13:56:28.451Z"}
{"msg":"the other columns are the endpoints, and certificates and MSP IDs","username":"yacovm","ts":"2018-07-06T13:56:39.747Z"}
{"msg":"so, now - to change the certificate(s) of the `n` node you don't need a new node for raft","username":"yacovm","ts":"2018-07-06T13:57:00.125Z"}
{"msg":"you just change it for fabric and Raft doesn't care about it","username":"yacovm","ts":"2018-07-06T13:57:12.217Z"}
{"msg":"when you add a new node - you just add a new entry to the table, similar when removing nodes","username":"yacovm","ts":"2018-07-06T13:57:33.753Z"}
{"msg":"and there is another config value that tracks that sequences aren't re-used","username":"yacovm","ts":"2018-07-06T13:57:45.902Z"}
{"msg":"like the one you had - the \"next sequence\"","username":"yacovm","ts":"2018-07-06T13:58:01.775Z"}
{"msg":"I'm slow, can you give me an example?","username":"kostas","ts":"2018-07-06T13:58:41.438Z"}
{"msg":"I will note that we've agreed to do this per your suggestion: https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHLA","username":"kostas","ts":"2018-07-06T13:58:50.708Z"}
{"msg":"(MSP field to allow editing.)","username":"kostas","ts":"2018-07-06T13:59:00.860Z"}
{"msg":"ID | endpoint | TLSclientCert | TLSserverCert | MSP_ID\n-------------------------------------------------------","username":"yacovm","ts":"2018-07-06T13:59:30.048Z"}
{"msg":"ID | endpoint | TLSclientCert | TLSserverCert | MSP_ID\n-------------------------------------------------------\n 0 | osn0.org1 | .....               | ..............            | ORG1MSP","username":"yacovm","ts":"2018-07-06T13:59:30.048Z"}
{"msg":"ID | endpoint | TLSclientCert | TLSserverCert | MSP_ID\n-------------------------------------------------------\n1 | osn0.org1 | .....               | ..............            | ORG1MSP","username":"yacovm","ts":"2018-07-06T13:59:30.048Z"}
{"msg":"ID | endpoint | TLSclientCert | TLSserverCert | MSP_ID\n-------------------------------------------------------\n1 | osn0.org1 | ...............               | ..............            | ORG1MSP","username":"yacovm","ts":"2018-07-06T13:59:30.048Z"}
{"msg":"> put the integers that denote the IDs as real IDs inside the table","username":"kostas","ts":"2018-07-06T14:01:00.623Z"}
{"msg":"(Note sure what this means?)","username":"kostas","ts":"2018-07-06T14:01:11.238Z"}
{"msg":"edited above","username":"yacovm","ts":"2018-07-06T14:02:12.003Z"}
{"msg":"so, the raft IDs are going to be in that table","username":"yacovm","ts":"2018-07-06T14:02:21.799Z"}
{"msg":"so when you do a certificate refresh/rotation you never need a raft membership change","username":"yacovm","ts":"2018-07-06T14:02:50.392Z"}
{"msg":"just a fabric one","username":"yacovm","ts":"2018-07-06T14:02:54.920Z"}
{"msg":"That is a good idea. However, what is the exact problem we're solving here?","username":"kostas","ts":"2018-07-06T14:05:28.124Z"}
{"msg":"the problem is that most reconfigs are not going to be additions or removal of actual nodes","username":"yacovm","ts":"2018-07-06T14:05:51.454Z"}
{"msg":"they're going to be certificate renewels ","username":"yacovm","ts":"2018-07-06T14:05:58.845Z"}
{"msg":"they're going to be certificate renewals ","username":"yacovm","ts":"2018-07-06T14:05:58.845Z"}
{"msg":"so if we do this we don't need a raft reconfig","username":"yacovm","ts":"2018-07-06T14:06:28.946Z"}
{"msg":"Excellent. I just want to stress this, going back to your #1 point in the list above --","username":"kostas","ts":"2018-07-06T14:06:52.895Z"}
{"msg":" If we have to deal with a *concurrent* change of more than half of the certs, then all bets are off right? It's a fault outside our tolerance levels.","username":"kostas","ts":"2018-07-06T14:07:44.281Z"}
{"msg":"why?","username":"yacovm","ts":"2018-07-06T14:09:05.676Z"}
{"msg":"changing more than half of the certs now (in the table above) doesn't require consensus","username":"yacovm","ts":"2018-07-06T14:09:52.698Z"}
{"msg":"Yes! I was recognizing the error in my logic, as soon as I started typing my explanation.","username":"kostas","ts":"2018-07-06T14:10:18.113Z"}
{"msg":"I'm also not accurate ","username":"yacovm","ts":"2018-07-06T14:10:40.560Z"}
{"msg":"it requires consensus ;) ","username":"yacovm","ts":"2018-07-06T14:10:48.393Z"}
{"msg":"but you know what i meant","username":"yacovm","ts":"2018-07-06T14:10:53.449Z"}
{"msg":"Yes, yes.","username":"kostas","ts":"2018-07-06T14:10:59.192Z"}
{"msg":"So, then your suggestion here https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdHLA covers point #1 ?","username":"kostas","ts":"2018-07-06T14:11:03.304Z"}
{"msg":"Or is there a subtle change between what you suggested here vs what you wrote there?","username":"kostas","ts":"2018-07-06T14:11:18.629Z"}
{"msg":"we still haven't solved your original problem though have we?","username":"yacovm","ts":"2018-07-06T14:12:12.068Z"}
{"msg":"if you do a membership change - say, an expansion it's going to happen in 2 steps","username":"yacovm","ts":"2018-07-06T14:12:40.074Z"}
{"msg":"Right, will look into this now. As I wrote afterwards, I _think_ we should be good, since we're progressing one node at a time.","username":"kostas","ts":"2018-07-06T14:12:40.675Z"}
{"msg":"So we should be good to get a majority. But I'm waving my hands over the exact sequence because I've frankly forgotten the details of it.","username":"kostas","ts":"2018-07-06T14:13:14.993Z"}
{"msg":"hmmm so question - what if we do a membership expansion - and a config block is cut that authorizes the new OSNs and then someone tries to submit a transaction before the cluster has time to reconfigure","username":"yacovm","ts":"2018-07-06T14:13:34.842Z"}
{"msg":"how does that work? I'm just curious","username":"yacovm","ts":"2018-07-06T14:13:39.784Z"}
{"msg":"So, Fabric config change adds OSN 4 to the mix.","username":"kostas","ts":"2018-07-06T14:14:22.133Z"}
{"msg":"But Raft doesn't see OSN 4 as part of its cluster yet.","username":"kostas","ts":"2018-07-06T14:14:35.359Z"}
{"msg":"In this case I expect the transaction to fail.","username":"kostas","ts":"2018-07-06T14:15:21.225Z"}
{"msg":"And then resubmission after K blocks, as we've discussed above, should take care of it.","username":"kostas","ts":"2018-07-06T14:16:33.328Z"}
{"msg":"If this becomes an issue in production, then it's queue + retry X times before we give up, along the discussion we had in the doc yesterday.","username":"kostas","ts":"2018-07-06T14:17:22.910Z"}
{"msg":"WDYT?","username":"kostas","ts":"2018-07-06T14:17:24.558Z"}
{"msg":"makes sense to me","username":"yacovm","ts":"2018-07-06T14:18:04.169Z"}
{"msg":"This issue would be resolved if you were to post the Raft change before the Fabric config change, but that opens a new can of worms. (Mainly that you can derive the Raft change from the Fabric config change, but not vice-versa.)","username":"kostas","ts":"2018-07-06T14:18:52.457Z"}
{"msg":"so we can say for instructions that you should never:\n1) Replace an existing node's endpoints/certificate(s) while adding/removing nodes\n2) Remove/add more than 1 node at a time\n@kostas wdyt?","username":"yacovm","ts":"2018-07-06T14:33:04.281Z"}
{"msg":"so we can say for instructions that you should never:\n1) Replace an existing node's endpoints/certificate(s) while adding/removing nodes\n2) Remove/add more than 1 node at a time\n @kostas wdyt? ","username":"yacovm","ts":"2018-07-06T14:33:04.281Z"}
{"msg":"That sounds right to me.","username":"kostas","ts":"2018-07-06T14:33:48.344Z"}
{"msg":"Given that we won't pipeline config updates (this is listed in the doc), adding the logic that prevents adding/removing more than 1 node at a time is all we need, and (1) will automatically take care of itself.","username":"kostas","ts":"2018-07-06T14:34:46.767Z"}
{"msg":"Has joined the channel.","username":"jeroiraz","ts":"2018-07-06T21:04:35.805Z","type":"uj"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=JQsw9GQNJaf5C7pwi","username":"kostas","ts":"2018-07-07T03:52:20.451Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=JQsw9GQNJaf5C7pwi","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=JQsw9GQNJaf5C7pwi","remote":true,"fileId":null,"fileName":null}]}
{"msg":"It's probably the fact that it's late but I'm second myself I guess here.","username":"kostas","ts":"2018-07-07T03:52:35.440Z"}
{"msg":"It's probably the fact that it's late but I'm second-guessing myself on this statement ^^.","username":"kostas","ts":"2018-07-07T03:52:35.440Z"}
{"msg":"It's probably the fact that it's late, but I'm second-guessing myself on this statement ^^.","username":"kostas","ts":"2018-07-07T03:52:35.440Z"}
{"msg":"And perhaps there is some truth to this one:","username":"kostas","ts":"2018-07-07T03:53:00.150Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wjbCgxniGfMi3B7mp","username":"kostas","ts":"2018-07-07T03:53:03.315Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wjbCgxniGfMi3B7mp","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wjbCgxniGfMi3B7mp","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Let's work with an example.","username":"kostas","ts":"2018-07-07T03:53:28.741Z"}
{"msg":"And perhaps there is some truth to this statement ^^. Let's work with an example.","username":"kostas","ts":"2018-07-07T03:53:28.741Z"}
{"msg":"5 replicas in the Raft cluster, i.e. 5 OSNs.","username":"kostas","ts":"2018-07-07T03:53:42.355Z"}
{"msg":"If 3 of those replicas have their TLS expired, we cannot commit the Fabric configuration change that will modify their TLS entries in the \"consenters\" field.","username":"kostas","ts":"2018-07-07T03:54:40.895Z"}
{"msg":"So I don't think we've actually solved the problem in point 1.","username":"kostas","ts":"2018-07-07T03:56:03.236Z"}
{"msg":"But, as I wrote earlier today, this is fine, in that it constitutes a failure above the protocol's fault tolerance levels.","username":"kostas","ts":"2018-07-07T03:57:13.429Z"}
{"msg":"But, as I wrote (temporarily) earlier today, this is fine, in that it constitutes a failure above the protocol's fault tolerance levels.","username":"kostas","ts":"2018-07-07T03:57:13.429Z"}
{"msg":"But, as I wrote (temporarily) earlier today, I _think_ this should be deemed acceptable, in that it constitutes a failure above the protocol's fault tolerance levels.","username":"kostas","ts":"2018-07-07T03:57:13.429Z"}
{"msg":"So we should not spend any cycles in trying to address it.","username":"kostas","ts":"2018-07-07T03:57:25.553Z"}
{"msg":"This is a side-effect of this joining we have going on at the hip with the TLS certificates, but any other way of assigning IDs to Raft nodes (which is part of we're achieving with the TLS binding) seems too brittle (or more brittle anyway) to me.","username":"kostas","ts":"2018-07-07T03:57:25.553Z"}
{"msg":"This is a side-effect of this joining we have going on at the hip with the TLS certificates, but any other way of assigning IDs to Raft nodes (which is part of we're achieving with the TLS binding) seems too brittle (or more brittle anyway) to me. Please let me know your thoughts.","username":"kostas","ts":"2018-07-07T03:57:25.553Z"}
{"msg":"This is due to the fact that the OSN certificates are part of the global (vs local) configuration, and as such, any updates to them be have to be ordered. In short, our \"use the TLS certificates to find the Raft ID\" scheme aside, I think we'd bump into the exact same issue with say, the BFT-based ordering service, as long as information about the OSN's TLS certificates is persisted on the chain (as opposed to, say, `orderer.yaml`.) So I view this as an issue that we can do nothing about. Let me know your thoughts.","username":"kostas","ts":"2018-07-07T03:57:25.553Z"}
{"msg":"As for this:","username":"kostas","ts":"2018-07-07T03:58:34.342Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=G2j7YjqRESWHMri29","username":"kostas","ts":"2018-07-07T03:58:35.634Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=G2j7YjqRESWHMri29","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=G2j7YjqRESWHMri29","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Recall that the issue I was concerned with was:","username":"kostas","ts":"2018-07-07T03:59:26.282Z"}
{"msg":"We wish to remove (or add) a Raft replica.","username":"kostas","ts":"2018-07-07T03:59:44.654Z"}
{"msg":"When the Fabric configuration change takes effect, that replica's read/write access is cut off immediately.","username":"kostas","ts":"2018-07-07T04:00:10.472Z"}
{"msg":"Then we follow up with the Raft configuration change.","username":"kostas","ts":"2018-07-07T04:01:01.325Z"}
{"msg":"And Raft operates in a 2-phase approach in this case:","username":"kostas","ts":"2018-07-07T04:01:41.350Z"}
{"msg":"And Raft operates in a 2-phase approach in this case in which the node we wish to, say, remove doesn't actually gets removed right away:","username":"kostas","ts":"2018-07-07T04:01:41.350Z"}
{"msg":"The leader immediately _applies_ and operates under a configuration where it seeks a majority from both old_conf and new_conf.","username":"kostas","ts":"2018-07-07T04:03:10.874Z"}
{"msg":"When it manages to get that old_conf + new_conf (joint consensus) entry _committed_, it then proceeds with attempting to commit new_conf.","username":"kostas","ts":"2018-07-07T04:03:52.109Z"}
{"msg":"For us, the fact that we're only allowing one node to be added/removed at a time, means that during the joint consensus phase, we can get a majority vote even with kicking the removed node off the network right away. So we can make progress.","username":"kostas","ts":"2018-07-07T04:06:30.528Z"}
{"msg":"So there goes that as well. (Unless I'm missing something, in which case, please let me know.)","username":"kostas","ts":"2018-07-07T04:06:58.447Z"}
{"msg":"So there goes that one.","username":"kostas","ts":"2018-07-07T04:06:58.447Z"}
{"msg":"well but @kostas when I said it'll work I meant as in response to what you said: \n> If we have to deal with a *concurrent* change of more than half of the certs, then all bets are off right? It's a fault outside our tolerance levels. \nAs for:\n> If 3 of those replicas have their TLS expired, we cannot commit the Fabric configuration change that will modify their TLS entries in the \"consenters\" field. \nwhen TLS certificates expire, you don't close the TLS connection... so the nodes can still communicate if they expired as long as the connection didn't break.","username":"yacovm","ts":"2018-07-07T06:37:58.952Z"}
{"msg":"well but @kostas when I said it'll work I meant as in response to what you said: \n> If we have to deal with a *concurrent* change of more than half of the certs, then all bets are off right? It's a fault outside our tolerance levels. \nThere is nothing in the *concurrent* change that breaks if you go with my idea of the IDs inside the mapping, because it doesn't affect the raft config, just the fabric config.\nAs for:\n> If 3 of those replicas have their TLS expired, we cannot commit the Fabric configuration change that will modify their TLS entries in the \"consenters\" field. \nwhen TLS certificates expire, you don't close the TLS connection... so the nodes can still communicate if they expired as long as the connection didn't break.","username":"yacovm","ts":"2018-07-07T06:37:58.952Z"}
{"msg":"Of course that if the connections were closed then we're disconnected and dead in the water ;) ","username":"yacovm","ts":"2018-07-07T06:46:05.392Z"}
{"msg":"Has joined the channel.","username":"ishakboyaci","ts":"2018-07-08T22:33:32.482Z","type":"uj"}
{"msg":"> There is nothing in the *concurrent* change that breaks if you go with my idea of the IDs inside the mapping, because it doesn't affect the raft config, just the fabric config.\nHm, not sure I follow. Can you walk me through an example where we'd be stuck without your modification, and then show how the suggested modification saves us?","username":"kostas","ts":"2018-07-09T02:22:51.481Z"}
{"msg":"If we clear this, we can lock on the current design I think. (At least until the next issue comes up.)","username":"kostas","ts":"2018-07-09T02:27:40.386Z"}
{"msg":"@kostas you can't do a concurrent change in the original way because you are supposed to only update 1 raft node at a time in small clusters, so in the original way","username":"yacovm","ts":"2018-07-09T07:22:45.194Z"}
{"msg":"so I looked at the raft sample in the `etcd/contrib/raftexample` @kostas  and I think we need to elaborate more in the design doc about all the raft plumbing stuff","username":"yacovm","ts":"2018-07-09T11:10:47.323Z"}
{"msg":"the fabric plumbing is very elaborate which is good","username":"yacovm","ts":"2018-07-09T11:10:55.059Z"}
{"msg":"but i think the raft plumbing isn't elaborated enough IMO","username":"yacovm","ts":"2018-07-09T11:11:02.693Z"}
{"msg":"if we can have pseudo code in the document based on the sample - that would help make the document easier to review and for us to ingest (though I guess you might already have, but I haven't yet)","username":"yacovm","ts":"2018-07-09T11:11:45.290Z"}
{"msg":"also 1 more thing I'm missing - all OSNs need to have the entire ledger since they serve Deliver requests.\nObviously we can't use a snapshot for that because the data is huge so the OSN that joins would need to call Deliver on its own, right?\nBut at the same time - it may serve Deliver() requests from peers for blocks it doesn't have","username":"yacovm","ts":"2018-07-09T12:33:04.847Z"}
{"msg":"also 1 more thing I'm missing - all OSNs need to have the entire ledger since they serve Deliver requests.\nObviously we can't use a snapshot for that because the data is huge so the OSN that joins would need to call Deliver on its own, right?\nBut at the same time - it may serve Deliver() requests from peers for blocks it doesn't have. I guess we would need to return `SERVICE_UNAVAILABLE` ? ","username":"yacovm","ts":"2018-07-09T12:33:04.847Z"}
{"msg":"the doc says: \n> Once R1 has received block 180, L should invoke the ReportSnapshot \nbut I think it's sub-optimal because while we sync the blocks in the ledger, the node doesn't sync with the raft cluster, right?\nCan we reverse the order? \nWhen a node joins - it immediately requests a snapshot, and in the background it sync the other blocks","username":"yacovm","ts":"2018-07-09T12:36:50.364Z"}
{"msg":"this would, however - require that the leader would validate the incoming broadcasts from the new node because it can't do that instead as it didn't get all the config blocks.","username":"yacovm","ts":"2018-07-09T12:51:47.437Z"}
{"msg":"@jyellick is it possible to instantiate an OSN with latest config block? :thinking: ","username":"yacovm","ts":"2018-07-09T12:52:21.543Z"}
{"msg":"> @jyellick is it possible to instantiate an OSN with latest config block? 🤔\n@yacovm It would be relatively trivial to bootstrap the orderer with the latest config block (for each channel).  There would certainly need to be a few things modified, particularly some of the ledger interfaces, but in general, the orderer code is designed to accept/expect that there may be some truncation of the blockchains at config blocks.","username":"jyellick","ts":"2018-07-09T13:41:44.425Z"}
{"msg":"So let me understand something... when a follower gets an envelope, it forwards it to the leader. \nObviously we'd want the follower to validate the envelope, but for that we need to attach to the validation - the config block at which the follower got the message. \nThis is problematic for followers that are added to the cluster when the cluster expands, from obvious reasons","username":"yacovm","ts":"2018-07-09T13:42:34.250Z"}
{"msg":"such a follower would validate the messages for nothing because it will be re-validated by the leader anyway","username":"yacovm","ts":"2018-07-09T13:42:48.489Z"}
{"msg":"so I'm wondering if we can somehow make the follower spawn from the latest config block","username":"yacovm","ts":"2018-07-09T13:43:09.160Z"}
{"msg":"and thus - it will validate everything correctly, no?","username":"yacovm","ts":"2018-07-09T13:43:17.318Z"}
{"msg":"In Kafka, we simply attach the config sequence at which the tx was validated.","username":"jyellick","ts":"2018-07-09T13:43:39.843Z"}
{"msg":"If it matches the leader's, then the leader may accept, if it is lower, then the leader must revalidate, if it is higher, this would be a byzantine fault.","username":"jyellick","ts":"2018-07-09T13:43:59.590Z"}
{"msg":"ok and what about:","username":"yacovm","ts":"2018-07-09T13:44:30.992Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bnr6acnAkpHcCxyZd) this? ^ ","username":"yacovm","ts":"2018-07-09T13:44:42.970Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bnr6acnAkpHcCxyZd","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bnr6acnAkpHcCxyZd","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bnr6acnAkpHcCxyZd) this? \\/","username":"yacovm","ts":"2018-07-09T13:44:42.970Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bnr6acnAkpHcCxyZd","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bnr6acnAkpHcCxyZd","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bnr6acnAkpHcCxyZd) this?  :arrow_down: ","username":"yacovm","ts":"2018-07-09T13:44:42.970Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bnr6acnAkpHcCxyZd","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bnr6acnAkpHcCxyZd","remote":true,"fileId":null,"fileName":null}]}
{"msg":"This is a better question for @kostas but my impression was that the snapshoting was done actively by the leader to allow the followers to garbage collect the log.  So, if a follower joins late, and its windows do not align with the cluster, it will request the snapshot, sync the blocks, and then begin participating.","username":"jyellick","ts":"2018-07-09T13:46:36.319Z"}
{"msg":"I considered for quite a while whether we should require that the node complete syncing before participating in the cluster, as it's not strictly necessary that the sync complete, so long as the snapshot contains the latest config block, and a hash of the previous block header.","username":"jyellick","ts":"2018-07-09T13:47:15.246Z"}
{"msg":"However, this would require even more modifications to the ledger, and the failure cases become much more complex.  Until we have a more compelling reason to do so, I think halting the follower's participation in consensus until it has completely caught up is the best solution.","username":"jyellick","ts":"2018-07-09T13:48:05.057Z"}
{"msg":"why modifications to the ledger?","username":"yacovm","ts":"2018-07-09T13:48:28.289Z"}
{"msg":"The ledger block storage format is an binary log of blocks","username":"jyellick","ts":"2018-07-09T13:48:49.895Z"}
{"msg":"It does not support holes or out of order commit.","username":"jyellick","ts":"2018-07-09T13:48:56.827Z"}
{"msg":"can't we write the blocks into a temporary ledger?","username":"yacovm","ts":"2018-07-09T13:49:39.557Z"}
{"msg":"I don't disagree that it's possible... only that I think this adds significantly to the complexity, and I'm not sure that the benefit is worth it.","username":"jyellick","ts":"2018-07-09T13:50:05.386Z"}
{"msg":"i.e: \n1) Follower starts with latest config block\n2) Follower requests snapshot and participates in the cluster\n3) Follower writes all the created blocks in the meantime to a temporary ledger\n4) Follower in the background calls Deliver and then writes all the blocks sequentially into the real ledger","username":"yacovm","ts":"2018-07-09T13:50:46.811Z"}
{"msg":"the ledger could still be continuos but just maintain the latest block in memory or other temporal storage","username":"jeroiraz","ts":"2018-07-09T13:51:14.664Z"}
{"msg":"@jeroiraz he means the blocks that are written in the meantime","username":"yacovm","ts":"2018-07-09T13:51:32.071Z"}
{"msg":"we don't actually even need a real temporary ledger though, just a.... file ;) ","username":"yacovm","ts":"2018-07-09T13:52:15.316Z"}
{"msg":"It's a valid scheme, it would work, but it's more complex, and I'm not sure that network operators would even like it.  We used the model you describe above (or a similar one) in 0.5/0.6 for state transfer, and it was very confusing for users, and the failures were hard to deal with.  My feeling is that network operators would prefer safety and simplicity over speed to recovery.  If we find that the complete-sync before participating in consensus is a problem, we can always revisit.  I'm not convinced that there is much lost work, as the sync before consenting behavior is basically a few lines of code.","username":"jyellick","ts":"2018-07-09T13:54:32.707Z"}
{"msg":"It's a valid scheme, it would work, but it's more complex, and I'm not sure that network operators would even like it.  We used the model you describe above (or a similar one) in 0.5/0.6 for state transfer, and it was very confusing for users, and the failures were hard to deal with.  My feeling is that network operators would prefer safety and simplicity over speed to recovery.  If we find that the complete-sync before participating in consensus is a problem, we can always revisit.  I'm not convinced that there is much lost work, as the sync before consenting behavior is basically just a few lines of code.","username":"jyellick","ts":"2018-07-09T13:54:32.707Z"}
{"msg":"In general, I think we try to be too clever, too soon.  In my opinion, we need to deliver a bare minimum, simplest viable Raft implementation first, learn from it, and prioritize work from there.","username":"jyellick","ts":"2018-07-09T13:56:55.923Z"}
{"msg":"ok.. understood. so another thing - in CFT we always always accept the block that is outputted from the `Ready` channel, but how is it going to work in BFT? All nodes should validate the block, in order to collect signatures...","username":"yacovm","ts":"2018-07-09T13:57:02.928Z"}
{"msg":"indeed that requirement of first sync and then validate wouldn't be reflected into efficiency, given the consensus protocol is leader based and without actual agreement with the followers ","username":"jeroiraz","ts":"2018-07-09T13:57:15.597Z"}
{"msg":"@jeroiraz may you introduce yourself? :) ","username":"yacovm","ts":"2018-07-09T13:57:35.788Z"}
{"msg":"Never seen your around","username":"yacovm","ts":"2018-07-09T13:57:43.400Z"}
{"msg":"Never seen you around","username":"yacovm","ts":"2018-07-09T13:57:43.400Z"}
{"msg":"> but how is it going to work in BFT? All nodes should validate the block, in order to collect signatures...\nEach replica should validate the transactions in the block before replying with a prepare.  To address non-determinism for instance around validating timestamps, the replica should reply with a prepare once a weak cert of signatures is received, regardless of their belief in the block's transaction validity.","username":"jyellick","ts":"2018-07-09T13:58:46.003Z"}
{"msg":"so the OSNs would intercept the communication messages and validate?","username":"yacovm","ts":"2018-07-09T13:59:20.266Z"}
{"msg":"so the OSNs would intercept the communication messages before they get into the consensus instance, and validate?","username":"yacovm","ts":"2018-07-09T13:59:20.266Z"}
{"msg":"sure, I'm Jeronimo Irazabal, I'm a software engineer working for IBM Argentina for around three years. I've been working with HF for some time, mostly with research projects e.g. extended the fabric to support SQL on chaincodes. I found the proposal to incorporate Raft very interesting and contacted Kostas to collaborate on it","username":"jeroiraz","ts":"2018-07-09T13:59:43.205Z"}
{"msg":"I've been putting off heading into the office for too long need to drive in -- will be back online shortly","username":"jyellick","ts":"2018-07-09T14:03:12.788Z"}
{"msg":"Good morning. Let me try to catch up on what I've missed.","username":"kostas","ts":"2018-07-09T14:08:03.505Z"}
{"msg":"> you can't do a concurrent change in the original way because you are supposed to only update 1 raft node at a time in small clusters, so in the original way\nAh, so put differently - unless you actually want to add or remove a node, work all those other modifications through a mechanism that doesn't trigger raft ConfChangeAddNode/ConfChangeRemoveNode messages in the Raft state machine. (And that mechanism for us is Fabric configuration messages.)","username":"kostas","ts":"2018-07-09T14:17:28.183Z"}
{"msg":"Am I getting it right?","username":"kostas","ts":"2018-07-09T14:17:46.743Z"}
{"msg":"yes","username":"yacovm","ts":"2018-07-09T14:20:45.991Z"}
{"msg":"another thing.... ","username":"yacovm","ts":"2018-07-09T14:21:16.016Z"}
{"msg":"if we do a membership expansion we do it in 2 steps, right? first we authorize the node for fabric, and then we do a \"propose\" that proposes a config change to the raft cluster","username":"yacovm","ts":"2018-07-09T14:22:01.048Z"}
{"msg":"when you said before that we can't have a txn slip in between i agreed with you, but we were both wrong IMO","username":"yacovm","ts":"2018-07-09T14:22:20.897Z"}
{"msg":">  So, Fabric config change adds OSN 4 to the mix.\n> But Raft doesn't see OSN 4 as part of its cluster yet. \nbut what if the new txn comes from OSN 1 which isn't the leader?","username":"yacovm","ts":"2018-07-09T14:23:55.015Z"}
{"msg":"The new transaction as in: a request to order an envelope?","username":"kostas","ts":"2018-07-09T14:24:38.027Z"}
{"msg":"yes","username":"yacovm","ts":"2018-07-09T14:24:42.054Z"}
{"msg":"I have a comment, but let me check the code real quick.","username":"kostas","ts":"2018-07-09T14:25:30.176Z"}
{"msg":"since we call `Step` asynchronously - we need a way to ensure that propose config is called immediately after which a config block is cut, somehow... no?","username":"yacovm","ts":"2018-07-09T14:26:24.724Z"}
{"msg":"One thing at a time.","username":"kostas","ts":"2018-07-09T14:27:18.035Z"}
{"msg":"or - maybe it works because we'll do an apply config change whenever we get the transaction bundle (config block) from the `Ready` ? ","username":"yacovm","ts":"2018-07-09T14:27:57.962Z"}
{"msg":"> I have a comment, but let me check the code real quick.\nSo my comment here is that this node cannot successfully invoke its FSM to find out who the leader is, so how can he route its request to the leader?","username":"kostas","ts":"2018-07-09T14:27:59.148Z"}
{"msg":"no, forget the new node... I'm just saying - how do we guarantee we do an applyConfigChange right after the config block?","username":"yacovm","ts":"2018-07-09T14:28:35.879Z"}
{"msg":"to do that we need to ProposeConfChange","username":"yacovm","ts":"2018-07-09T14:29:14.539Z"}
{"msg":"but how do we make sure our ProposeConfChange gets right after the config block itself? ","username":"yacovm","ts":"2018-07-09T14:29:37.349Z"}
{"msg":"The leader maintains three queues: one for Raft config messages, one for Fabric config messages, one for Fabric normal messages.","username":"kostas","ts":"2018-07-09T14:29:40.830Z"}
{"msg":"These are listed in order of descending priority.","username":"kostas","ts":"2018-07-09T14:29:54.352Z"}
{"msg":"So, when you have no Fabric config messages in, that means no Raft config messages.","username":"kostas","ts":"2018-07-09T14:30:31.257Z"}
{"msg":"In this stage, normal Fabric messages reach the leader, and they attempt to cut blocks out of them and order them per the standard process.","username":"kostas","ts":"2018-07-09T14:31:27.963Z"}
{"msg":"Now, when a Fabric configuration message reaches the leader, it gets put into that second queue.","username":"kostas","ts":"2018-07-09T14:31:43.576Z"}
{"msg":"aha... so the leader can then immedately enqueue a config propose for raft once it sees a fabric config, right?","username":"yacovm","ts":"2018-07-09T14:32:00.025Z"}
{"msg":"Which takes priority over the third one, and in fact causes us to stop processing/order —","username":"kostas","ts":"2018-07-09T14:32:11.570Z"}
{"msg":"Correct.","username":"kostas","ts":"2018-07-09T14:32:14.162Z"}
{"msg":"is these 3 queues in the doc? :thinking_face: ","username":"yacovm","ts":"2018-07-09T14:32:28.512Z"}
{"msg":"is these 3 concept queues in the doc? :thinking_face: ","username":"yacovm","ts":"2018-07-09T14:32:28.512Z"}
{"msg":"Yes.","username":"kostas","ts":"2018-07-09T14:32:33.396Z"}
{"msg":"Footnote 16, page 30. All the good stuff is in the footnotes, in typical DFW fashion.","username":"kostas","ts":"2018-07-09T14:32:58.525Z"}
{"msg":"Let me go back to the things I missed earlier, but if you have any more questions, please post them here. I truly appreciate the double-checking and the follow-ups, helps us make sure we're not missing anything.","username":"kostas","ts":"2018-07-09T14:34:14.487Z"}
{"msg":"wait wait","username":"yacovm","ts":"2018-07-09T14:34:19.021Z"}
{"msg":"before that","username":"yacovm","ts":"2018-07-09T14:34:21.748Z"}
{"msg":"so if the leader sees a fabric config, and then before it has a chance to propagate the propose config change - it dies - the new leader should do that afterwards when it establishes command.\nit needs to look at the head of the log and then do the propose config change itself, right?","username":"yacovm","ts":"2018-07-09T14:35:31.661Z"}
{"msg":"Correct.","username":"kostas","ts":"2018-07-09T14:36:26.904Z"}
{"msg":"and what do you think about that new follower that is added which Jason commented against?","username":"yacovm","ts":"2018-07-09T14:37:55.911Z"}
{"msg":"the one that Jeronimo also chimed into the discussion ;) ","username":"yacovm","ts":"2018-07-09T14:38:17.170Z"}
{"msg":"Ah, link?","username":"kostas","ts":"2018-07-09T14:38:35.500Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wCmwSAYZCjLvie32J","username":"yacovm","ts":"2018-07-09T14:38:48.813Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wCmwSAYZCjLvie32J","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wCmwSAYZCjLvie32J","remote":true,"fileId":null,"fileName":null}]}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bnr6acnAkpHcCxyZd","username":"yacovm","ts":"2018-07-09T14:39:08.309Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bnr6acnAkpHcCxyZd","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bnr6acnAkpHcCxyZd","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Oh, this is from earlier in the discussion here, right?","username":"kostas","ts":"2018-07-09T14:39:18.580Z"}
{"msg":"yes","username":"yacovm","ts":"2018-07-09T14:39:23.747Z"}
{"msg":"I'm working through those, gimme a sec.","username":"kostas","ts":"2018-07-09T14:39:27.079Z"}
{"msg":"> but i think the raft plumbing isn't elaborated enough IMO\nThat criticism is accurate. I literally had to draw all the interactions going on in the `raftexample` in paper to figure things out, and that was a multi-day process with a lot of digging around. I cannot think of a good way to capture all of this into the document, without turning it into a 70-pg opus, and even then, I'm not sure it'll be as effective as looking at this example. Ultimately, I think that studying the `raftexample` is a rite of passage we all have to go through (which is why I'm suggesting it in every opportunity). If questions on the Raft's internals are still there after studying, we're here to sort them out.","username":"kostas","ts":"2018-07-09T14:41:30.689Z"}
{"msg":"that's what I did today :) ","username":"yacovm","ts":"2018-07-09T14:42:23.654Z"}
{"msg":"Ah, excellent.","username":"kostas","ts":"2018-07-09T14:42:36.945Z"}
{"msg":"It took me more days than that unfortunately.","username":"kostas","ts":"2018-07-09T14:42:48.830Z"}
{"msg":"I never said I understand it all.... ","username":"yacovm","ts":"2018-07-09T14:43:08.242Z"}
{"msg":"anyway , about my question with the follower joining late?","username":"yacovm","ts":"2018-07-09T14:43:21.825Z"}
{"msg":"(Getting there.)","username":"kostas","ts":"2018-07-09T14:43:29.120Z"}
{"msg":"> also 1 more thing I'm missing - all OSNs need to have the entire ledger since they serve Deliver requests. Obviously we can't use a snapshot for that because the data is huge so the OSN that joins would need to call Deliver on its own, right? But at the same time - it may serve Deliver() requests from peers for blocks it doesn't have. I guess we would need to return `SERVICE_UNAVAILABLE` ?\n","username":"kostas","ts":"2018-07-09T14:44:03.670Z"}
{"msg":"(Keep in mind that I haven't scrolled through the rest of the convo, so I'm just addressing things one-by-one.)","username":"kostas","ts":"2018-07-09T14:44:22.957Z"}
{"msg":"So for this one, this is where the snapshots will come in.","username":"kostas","ts":"2018-07-09T14:44:49.491Z"}
{"msg":"And snapshots here, the way we've defined them, are basically checkpoints that allow the node that's catching up to issue an educated Deliver request.","username":"kostas","ts":"2018-07-09T14:46:02.047Z"}
{"msg":"yeah i get that, but what i was asking is something else - why do we have to first attempt to catch up to the snapshot via deliver and only *then* request a snapshot , instead of just request a snapshot immediately at startup, and in the background - sync the ledger ? ","username":"yacovm","ts":"2018-07-09T14:47:27.730Z"}
{"msg":"I'm not sure I agree with the phrase \"attempt to catch up to the snapshot via deliver and then request a snapshot.\"","username":"kostas","ts":"2018-07-09T14:52:36.959Z"}
{"msg":"Let me take another stab at what's going on.","username":"kostas","ts":"2018-07-09T14:52:43.801Z"}
{"msg":"Every Raft node keeps a number of X most recent entries in its Raft storage (and you garbage collect these every now and then, so as not to keep them all in memory, at least in the default, provided implementation).","username":"kostas","ts":"2018-07-09T14:52:48.769Z"}
{"msg":"If the leader finds out your log ends at Raft entry 1 and we're now at Raft entry 200, and they only keep the last 20 Raft entries in memory, the leader will go \"ah I need to send this guy my most recent snapshot\".","username":"kostas","ts":"2018-07-09T14:52:52.592Z"}
{"msg":"So there is a good chance that when you first join a very active network, then the very first you'll be sent is a snapshot.","username":"kostas","ts":"2018-07-09T14:53:15.599Z"}
{"msg":"And you're expected to act on it, by invoking Deliver based on what that snapshot says (which is basically \"we're up to block 210938, please sync up\").","username":"kostas","ts":"2018-07-09T14:53:44.705Z"}
{"msg":"Now, going to this:","username":"kostas","ts":"2018-07-09T14:55:17.149Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bnr6acnAkpHcCxyZd","username":"kostas","ts":"2018-07-09T14:55:18.295Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bnr6acnAkpHcCxyZd","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bnr6acnAkpHcCxyZd","remote":true,"fileId":null,"fileName":null}]}
{"msg":"(Looking at my notes for something.)","username":"kostas","ts":"2018-07-09T14:57:35.704Z"}
{"msg":"> but I think it's sub-optimal because while we sync the blocks in the ledger, the node doesn't sync with the raft cluster, right?\nAt the risk of sounding like an idiot, why is this sub-optimal?","username":"kostas","ts":"2018-07-09T15:03:31.792Z"}
{"msg":"I want to make sure I'm not missing the goal here.","username":"kostas","ts":"2018-07-09T15:03:43.642Z"}
{"msg":"When you sync blocks in the ledger, this is actually you trying to sync up with the Raft cluster.","username":"kostas","ts":"2018-07-09T15:04:24.317Z"}
{"msg":"that's not what i understood that happens","username":"yacovm","ts":"2018-07-09T15:06:42.194Z"}
{"msg":"I think I mis-understood and thought we don't request the snapshot right away","username":"yacovm","ts":"2018-07-09T15:08:11.395Z"}
{"msg":"or something like that","username":"yacovm","ts":"2018-07-09T15:08:16.182Z"}
{"msg":"(Understood. Feel free to ask more questions around that if there's anything in particular you'd like me to clarify. In the meantime, I'm looking at the rest of your messages from earlier today, and will keep posting.)","username":"kostas","ts":"2018-07-09T15:08:54.476Z"}
{"msg":"> I considered for quite a while whether we should require that the node complete syncing before participating in the cluster, as it's not strictly necessary that the sync complete, so long as the snapshot contains the latest config block, and a hash of the previous block header. However, this would require even more modifications to the ledger, and the failure cases become much more complex. Until we have a more compelling reason to do so, I think halting the follower's participation in consensus until it has completely caught up is the best solution.","username":"kostas","ts":"2018-07-09T15:10:07.080Z"}
{"msg":"I see that @jyellick has covered all of that, excellent. I could sense that this is where you where getting at -- active participation of a lagging node in ordering even before the catching up is complete. In a footnote somewhere in the snapshotting part of the doc, I have a reference as to what the Snapshot message might be extended too eventually --  that's all a product of a similar discussion I had with Jason when we were trying to figure out how to make active ordering participation work.","username":"kostas","ts":"2018-07-09T15:12:51.462Z"}
{"msg":"> In general, I think we try to be too clever, too soon. In my opinion, we need to deliver a bare minimum, simplest viable Raft implementation first, learn from it, and prioritize work from there.\nThis is a perfect summary of the approach we should be adopting. We have a lot to juggle with as is, which is why you also see me shooting down a few suggestions in the doc comments.","username":"kostas","ts":"2018-07-09T15:15:13.773Z"}
{"msg":"I get there are things we can improve on, but unless the current suggestion is broken, it'd be wise to defer on those improvements.","username":"kostas","ts":"2018-07-09T15:15:46.489Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=R3EedLhrbPacMAuq2","username":"kostas","ts":"2018-07-09T15:17:22.698Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=R3EedLhrbPacMAuq2","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=R3EedLhrbPacMAuq2","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Not sure I got that?","username":"kostas","ts":"2018-07-09T15:17:27.987Z"}
{"msg":"@jeroiraz Hi! Glad you joined.","username":"kostas","ts":"2018-07-09T15:17:41.562Z"}
{"msg":"> Not sure I got that?\n(Not the first sentence, the rest.)","username":"kostas","ts":"2018-07-09T15:18:58.432Z"}
{"msg":"> Not sure I got that?\nCertainly BFT replicas need to validate that the block content is legitimate.  That the transactions are valid, and the leader is not simply injecting junk to give the illusion of progress.  However, despite our best intentions, we cannot guarantee that validation is deterministic.  Obviously we try our very best, but, certain checks, like those against timestamp will necessarily not be deterministic (unless we take significant steps to incorporate a BFT clock).","username":"jyellick","ts":"2018-07-09T15:19:00.648Z"}
{"msg":"> Not sure I got that?\nCertainly BFT replicas need to validate that the block content is legitimate. \n\n> (Not the first sentence, the rest.) [not deleting, but this is the rest]\nThat the transactions are valid, and the leader is not simply injecting junk to give the illusion of progress.  However, despite our best intentions, we cannot guarantee that validation is deterministic.  Obviously we try our very best, but, certain checks, like those against timestamp will necessarily not be deterministic (unless we take significant steps to incorporate a BFT clock).","username":"jyellick","ts":"2018-07-09T15:19:00.648Z"}
{"msg":"> Not sure I got that?\nCertainly BFT replicas need to validate that the block content is legitimate. That the transactions are valid, and the leader is not simply injecting junk to give the illusion of progress.\n\n> (Not the first sentence, the rest.) [not deleting, but this is the rest]\n  However, despite our best intentions, we cannot guarantee that validation is deterministic.  Obviously we try our very best, but, certain checks, like those against timestamp will necessarily not be deterministic (unless we take significant steps to incorporate a BFT clock).","username":"jyellick","ts":"2018-07-09T15:19:00.648Z"}
{"msg":"> Not sure I got that?\nCertainly BFT replicas need to validate that the block content is legitimate. That the transactions are valid, and the leader is not simply injecting junk to give the illusion of progress.  But rather than vote for a view change on perceived junk, the replica should probably simply not prepare, and allow the view change timer to handle view change.\n\n> (Not the first sentence, the rest.) [not deleting, but this is the rest]\n  However, despite our best intentions, we cannot guarantee that validation is deterministic.  Obviously we try our very best, but, certain checks, like those against timestamp will necessarily not be deterministic (unless we take significant steps to incorporate a BFT clock).","username":"jyellick","ts":"2018-07-09T15:19:00.648Z"}
{"msg":"Ah, got it.","username":"kostas","ts":"2018-07-09T15:20:31.938Z"}
{"msg":"so.... the reason i asked about the BFT thing - is that I think that we it makes sense to build a communication infrastructure that can be reused as much as possible for BFT later on","username":"yacovm","ts":"2018-07-09T15:21:51.350Z"}
{"msg":"or for any kind of block-ordering OSN","username":"yacovm","ts":"2018-07-09T15:21:58.765Z"}
{"msg":"Understood. I don't see how this particular bit can be retrofitted for BFT in a way that's meaningful, but if you were intent to do that, I presume you would add logic to the server's Step RPC method. It would check whether the incoming blocks are valid and have enough signatures. If they're not valid, it would reject them and prevent them from entering the FSM. If they were valid but not carrying enough signatures, it would add its own signature, and `Step` them on other nodes or other nodes, until it got them back with enough signatures, at which point it would allow them to enter its FSM.","username":"kostas","ts":"2018-07-09T15:26:53.699Z"}
{"msg":"I was thinking of having a interception layers for the RPCs in general","username":"yacovm","ts":"2018-07-09T15:27:39.665Z"}
{"msg":"that's the cleanest way to handle the mapping of the IDs and TLS certs, etc.","username":"yacovm","ts":"2018-07-09T15:27:51.649Z"}
{"msg":"Perhaps naively, I think this part should be straightforward when BFT comes. What matters now is that we establish a flow that allows the OSNs to do OSN-OSN comms via RPCs, and then we can adjust these RPCs to do what we wish.","username":"kostas","ts":"2018-07-09T15:29:39.788Z"}
{"msg":"> I was thinking of having a interception layers for the RPCs in general\nYes, this is something that has crossed my mind as well. I've played around with interceptors when I read this one last year: https://about.sourcegraph.com/go/grpc-in-production-alan-shreve/","username":"kostas","ts":"2018-07-09T15:30:19.569Z"}
{"msg":"lol","username":"yacovm","ts":"2018-07-09T15:30:27.196Z"}
{"msg":"`Why do REST APIs suck?`","username":"yacovm","ts":"2018-07-09T15:30:45.220Z"}
{"msg":"you should totally publish that in #composer ","username":"yacovm","ts":"2018-07-09T15:31:08.745Z"}
{"msg":"Well, he's transcribing a presentation and non-opinionated presentations are a bit boring ;)","username":"kostas","ts":"2018-07-09T15:31:20.067Z"}
{"msg":"we have an interception layer in fabric even now.... the chaincode access control, wraps the infamous `ChaincodeSupport` object ;) ","username":"yacovm","ts":"2018-07-09T15:32:04.641Z"}
{"msg":"we have an interception layer in fabric even now.... the chaincode access control, wraps the infamous `ChaincodeSupport` object ;) \nhttps://github.com/hyperledger/fabric/blob/release-1.2/peer/node/start.go#L627-L630","username":"yacovm","ts":"2018-07-09T15:32:04.641Z"}
{"msg":"and checks TLS pinning ","username":"yacovm","ts":"2018-07-09T15:32:15.659Z"}
{"msg":"Ah, I didn't know that.","username":"kostas","ts":"2018-07-09T15:32:24.756Z"}
{"msg":"Anyway, I only implemented them for logging in my own tests and I didn't see them adding too much complexity. If we decide we wish to go forward with that, and we can JIRA this properly so that we know what we're doing, then I'm for it.","username":"kostas","ts":"2018-07-09T15:33:06.043Z"}
{"msg":"that's also how the authentication handlers for endorser work btw-  we have a wrapper pipeling","username":"yacovm","ts":"2018-07-09T15:33:30.200Z"}
{"msg":"that's also how the authentication handlers for endorser work btw-  we have a wrapper pipeline","username":"yacovm","ts":"2018-07-09T15:33:30.200Z"}
{"msg":"Add that to the already big list of things I wasn't aware of.","username":"kostas","ts":"2018-07-09T15:34:38.678Z"}
{"msg":"As a status check, would we say we need couple of more days till we kickstart this, or are we more or less good to go? @yacovm @C0rWin @guoger @jeroiraz ","username":"kostas","ts":"2018-07-09T15:41:04.430Z"}
{"msg":"wait - what about that node ID change","username":"yacovm","ts":"2018-07-09T15:41:56.446Z"}
{"msg":"that we don't do a raft ProposeConfig when we change an existing node's certificate/endpoint","username":"yacovm","ts":"2018-07-09T15:42:31.509Z"}
{"msg":"we only do a fabric config","username":"yacovm","ts":"2018-07-09T15:42:35.268Z"}
{"msg":"are you good with it?","username":"yacovm","ts":"2018-07-09T15:42:41.010Z"}
{"msg":"Ah, yes. I'm good.","username":"kostas","ts":"2018-07-09T15:42:54.793Z"}
{"msg":"also I don't understand what is the bottom line about the net.Listener ","username":"yacovm","ts":"2018-07-09T15:42:58.574Z"}
{"msg":"do we enforce TLS?","username":"yacovm","ts":"2018-07-09T15:43:02.544Z"}
{"msg":"or allow diff. listener?","username":"yacovm","ts":"2018-07-09T15:43:05.927Z"}
{"msg":"your comment was cryptic :) ","username":"yacovm","ts":"2018-07-09T15:43:11.315Z"}
{"msg":"You remind me that I haven't addressed the comments in the doc since last night - will do that now.","username":"kostas","ts":"2018-07-09T15:43:39.921Z"}
{"msg":"Discussed this with Gari and he's also voting for going all in on enforcing TLS, and using the same listener.","username":"kostas","ts":"2018-07-09T15:44:39.277Z"}
{"msg":"OK","username":"yacovm","ts":"2018-07-09T15:45:23.650Z"}
{"msg":"Sent an invite for a 30-min Zoom session tomorrow at 8am EDT to kick things off and discuss any outstanding questions: https://zoom.us/j/7432937602","username":"kostas","ts":"2018-07-10T10:12:04.168Z"}
{"msg":"@kostas tomorrow is a very bad day for me for meetings :( ","username":"yacovm","ts":"2018-07-10T10:16:13.730Z"}
{"msg":"can't we do it today?","username":"yacovm","ts":"2018-07-10T10:16:17.285Z"}
{"msg":"Sure. Depends on whether @guoger and @C0rWin are available.","username":"kostas","ts":"2018-07-10T10:16:55.926Z"}
{"msg":"@C0rWin is on a trip abroad all week","username":"yacovm","ts":"2018-07-10T10:17:08.383Z"}
{"msg":"Ah. Perhaps it's best to defer till this coming Monday then.","username":"kostas","ts":"2018-07-10T10:17:26.479Z"}
{"msg":"Ah. Perhaps it's best to defer till this coming Monday then?","username":"kostas","ts":"2018-07-10T10:17:26.479Z"}
{"msg":"that's fine with me","username":"yacovm","ts":"2018-07-10T10:17:33.156Z"}
{"msg":"All those options work for me","username":"guoger","ts":"2018-07-10T10:17:45.322Z"}
{"msg":"You know what, since you're both here, let's have a quick meeting today.","username":"kostas","ts":"2018-07-10T10:18:04.957Z"}
{"msg":"And Yacov can bring Artem on board?","username":"kostas","ts":"2018-07-10T10:18:23.775Z"}
{"msg":"(And we'll meet again.)","username":"kostas","ts":"2018-07-10T10:18:28.316Z"}
{"msg":"I suggest we not distribute work this week though since Artem is out ;) ","username":"yacovm","ts":"2018-07-10T10:18:52.436Z"}
{"msg":"but only talk technical stuff","username":"yacovm","ts":"2018-07-10T10:18:59.238Z"}
{"msg":"Sure, If we do it today, Can we do it a bit later, 9?","username":"guoger","ts":"2018-07-10T10:19:05.243Z"}
{"msg":"How come you're so early @kostas ?  ","username":"yacovm","ts":"2018-07-10T10:19:34.001Z"}
{"msg":"I was about to say, 9 is a bit tricky because I've been up all night :upside_down:","username":"kostas","ts":"2018-07-10T10:19:54.377Z"}
{"msg":"(I was about to say, 9 is a bit tricky because I've been up all night.)","username":"kostas","ts":"2018-07-10T10:19:54.377Z"}
{"msg":"His routine is always a myth to me","username":"guoger","ts":"2018-07-10T10:19:57.398Z"}
{"msg":"oh... you still haven't gone asleep?","username":"yacovm","ts":"2018-07-10T10:20:10.012Z"}
{"msg":"Yeah, my sleep schedule is all messed up - something I want to fix during this break.","username":"kostas","ts":"2018-07-10T10:20:42.547Z"}
{"msg":"Yeah, my sleep schedule is slightly messed up - something I want to fix during this break.","username":"kostas","ts":"2018-07-10T10:20:42.547Z"}
{"msg":"Ok, let’s do 8","username":"guoger","ts":"2018-07-10T10:20:52.862Z"}
{"msg":"Alright, same link at 8.","username":"kostas","ts":"2018-07-10T10:21:22.260Z"}
{"msg":"Hey, thanks f needed I can try to attend ","username":"C0rWin","ts":"2018-07-10T10:21:41.606Z"}
{"msg":"so 2 hours from now?","username":"yacovm","ts":"2018-07-10T10:21:50.957Z"}
{"msg":"I think will","username":"C0rWin","ts":"2018-07-10T10:22:10.437Z"}
{"msg":"Artem, no rush - if you're on a trip, this can wait.","username":"kostas","ts":"2018-07-10T10:22:10.733Z"}
{"msg":"1hr 40min I suppose","username":"guoger","ts":"2018-07-10T10:22:18.431Z"}
{"msg":"But up to you. We're meeting in 1h40m, yes.","username":"kostas","ts":"2018-07-10T10:22:24.396Z"}
{"msg":"I have meetings with GBS guys all day long","username":"C0rWin","ts":"2018-07-10T10:22:44.160Z"}
{"msg":"But it will be great to have some real staff","username":"C0rWin","ts":"2018-07-10T10:23:14.148Z"}
{"msg":"sounds fun ;) ","username":"yacovm","ts":"2018-07-10T10:23:15.114Z"}
{"msg":"Disgusting ","username":"C0rWin","ts":"2018-07-10T10:23:31.781Z"}
{"msg":"Hangout?","username":"C0rWin","ts":"2018-07-10T10:24:46.762Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zbSqNgPGNqPLDpr9F","username":"yacovm","ts":"2018-07-10T10:24:59.071Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zbSqNgPGNqPLDpr9F","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zbSqNgPGNqPLDpr9F","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I believe the cool kids are now referring to it as Zoom: https://zoom.us/j/7432937602","username":"kostas","ts":"2018-07-10T10:25:05.941Z"}
{"msg":"Copying @jeroiraz as well.","username":"kostas","ts":"2018-07-10T10:26:08.259Z"}
{"msg":"Copying @jeroiraz as well. (But no worries if you can't make it, we shall repeat this.)","username":"kostas","ts":"2018-07-10T10:26:08.259Z"}
{"msg":"Links for the spreadsheet, @kostas  ? :) ","username":"yacovm","ts":"2018-07-10T10:32:27.884Z"}
{"msg":"https://docs.google.com/spreadsheets/d/1R02-xjdl4hNw90kN4NZ1kX0f4QoIYn51_1UHlwy-GQs/edit?usp=sharing","username":"kostas","ts":"2018-07-10T10:33:08.370Z"}
{"msg":"https://docs.google.com/spreadsheets/d/1R02-xjdl4hNw90kN4NZ1kX0f4QoIYn51_1UHlwy-GQs/edit?usp=sharing","username":"kostas","ts":"2018-07-10T10:33:08.370Z"}
{"msg":"Proposed JIRA breakdown for Raft: https://docs.google.com/spreadsheets/d/1R02-xjdl4hNw90kN4NZ1kX0f4QoIYn51_1UHlwy-GQs/edit?usp=sharing","username":"kostas","ts":"2018-07-10T10:33:08.370Z"}
{"msg":"Proposed JIRA breakdown for Raft: https://docs.google.com/spreadsheets/d/1R02-xjdl4hNw90kN4NZ1kX0f4QoIYn51_1UHlwy-GQs/edit?usp=sharing","username":"kostas","ts":"2018-07-10T10:33:08.370Z"}
{"msg":"Proposed JIRA breakdown for Raft: https://docs.google.com/spreadsheets/d/1R02-xjdl4hNw90kN4NZ1kX0f4QoIYn51_1UHlwy-GQs/edit?usp=sharing","username":"kostas","ts":"2018-07-10T10:33:08.370Z"}
{"msg":"(You have write access as well.)","username":"kostas","ts":"2018-07-10T10:33:29.847Z"}
{"msg":"Sorry, I think I’ll be 5 min late","username":"guoger","ts":"2018-07-10T11:40:29.806Z"}
{"msg":"No problem.","username":"kostas","ts":"2018-07-10T11:40:57.216Z"}
{"msg":"connecting","username":"guoger","ts":"2018-07-10T12:05:48.366Z"}
{"msg":"guys, I won't be able to reconnect as I have to move to the next meeting","username":"C0rWin","ts":"2018-07-10T12:41:19.441Z"}
{"msg":"will catch up later","username":"C0rWin","ts":"2018-07-10T12:41:22.609Z"}
{"msg":"Will bring up the meeting again, we got disconnected.","username":"kostas","ts":"2018-07-10T12:41:23.668Z"}
{"msg":"Gimme 1'.","username":"kostas","ts":"2018-07-10T12:41:36.375Z"}
{"msg":"(I think I've accidentally stopped the meeting for all, you should be able to rejoin at the same link though.)","username":"kostas","ts":"2018-07-10T12:49:41.687Z"}
{"msg":"Rough call summary (correct/expand with anything I've missed): Instead of the top-down approach proposed in the spreadsheet, perhaps a bottom-up approach might make more sense, as it will be less intrusive on Fabric core if we don't make it in time for the 1.3 cut. My concern is that we're missing the ability to drive this with integration tests from the get go, but perhaps this concern is exaggerated. Yacov and Jay to take a stab at how the first couple of weeks in a bottom-up approach will look like, and I'll review with Yacov later today/tomorrow. If anyone else has comments on the JIRA breakdown, post here or directly on the spreadsheet.","username":"kostas","ts":"2018-07-10T13:09:41.656Z"}
{"msg":"","username":"kostas","ts":"2018-07-10T13:10:39.262Z","attachments":[{"url":null,"remote":true,"fileId":null,"fileName":null}],"type":"message_pinned"}
{"msg":"","username":"kostas","ts":"2018-07-10T13:11:30.669Z","attachments":[{"url":null,"remote":true,"fileId":null,"fileName":null}],"type":"message_pinned"}
{"msg":"@guoger: This issue is related to your first question: https://github.com/coreos/etcd/issues/9809","username":"kostas","ts":"2018-07-10T13:14:06.674Z"}
{"msg":"@guoger: This issue is related to your first question from the call: https://github.com/coreos/etcd/issues/9809","username":"kostas","ts":"2018-07-10T13:14:06.674Z"}
{"msg":"Has joined the channel.","username":"NoLimitHoldem","ts":"2018-07-11T06:16:45.199Z","type":"uj"}
{"msg":"Has joined the channel.","username":"jayeshjawale95","ts":"2018-07-11T07:32:35.150Z","type":"uj"}
{"msg":"> Yacov and Jay to take a stab at how the first couple of weeks in a bottom-up approach will look like, and I'll review with Yacov later today/tomorrow\nAn update: Yacov and I discussed the new proposed plan. Let us proceed as described in the sheet \"Week 1'-2'\" on the spreadsheet. We have a difference of opinion on line 12 and the usefulness of extended unit tests - we'll be reaching out to Matt to get his take on it. JIRA stories for week 1 items to come tomorrow, and work on this to begin this Monday.","username":"kostas","ts":"2018-07-11T15:26:24.619Z"}
{"msg":"Has joined the channel.","username":"yuki-kon","ts":"2018-07-11T16:18:50.087Z","type":"uj"}
{"msg":"Has joined the channel.","username":"muralisr","ts":"2018-07-11T22:40:28.785Z","type":"uj"}
{"msg":"Has joined the channel.","username":"huikang","ts":"2018-07-12T02:09:35.602Z","type":"uj"}
{"msg":"Has joined the channel.","username":"WadeLu","ts":"2018-07-12T07:33:03.226Z","type":"uj"}
{"msg":"Has joined the channel.","username":"mnarayan","ts":"2018-07-12T09:00:36.750Z","type":"uj"}
{"msg":"Has joined the channel.","username":"Senthil1","ts":"2018-07-12T17:32:43.009Z","type":"uj"}
{"msg":"Has joined the channel.","username":"sergefdrv","ts":"2018-07-13T12:41:59.013Z","type":"uj"}
{"msg":"@guoger @kostas @C0rWin I opened JIRAs for the 1st week:\nhttps://jira.hyperledger.org/browse/FAB-11163\nhttps://jira.hyperledger.org/browse/FAB-11162\nhttps://jira.hyperledger.org/browse/FAB-11161\nhttps://jira.hyperledger.org/browse/FAB-11160\nhttps://jira.hyperledger.org/browse/FAB-11159","username":"yacovm","ts":"2018-07-15T11:43:03.229Z"}
{"msg":"I think we can open new JIRAs that consolidate the various components based on our progress","username":"yacovm","ts":"2018-07-15T11:43:38.802Z"}
{"msg":"Also I think the membership and communication modules should be implemented by the same person since they should be somewhat tightly coupled","username":"yacovm","ts":"2018-07-15T11:44:11.585Z"}
{"msg":"@guoger do you want to split the work? ","username":"yacovm","ts":"2018-07-16T06:30:06.913Z"}
{"msg":"Sure, it looks like 11163 and 11162 should also be implemented by the same person, I could take this part","username":"guoger","ts":"2018-07-16T06:37:32.418Z"}
{"msg":"lol","username":"yacovm","ts":"2018-07-16T06:40:47.089Z"}
{"msg":"I don't think so.... on the contrary","username":"yacovm","ts":"2018-07-16T06:40:56.613Z"}
{"msg":"I'd say that the consenter and the FSM are very well separated","username":"yacovm","ts":"2018-07-16T06:41:19.606Z"}
{"msg":"also - FAB-11159 is just an interface declaration, it's not really much work there","username":"yacovm","ts":"2018-07-16T06:41:43.450Z"}
{"msg":"You expressed interest to do the FSM, no?","username":"yacovm","ts":"2018-07-16T06:41:52.169Z"}
{"msg":"why don't you take the FSM, @C0rWin will take the consenter FAB-11163 and I'll do 60 and 61?","username":"yacovm","ts":"2018-07-16T06:42:19.435Z"}
{"msg":"of course - you can break down FAB-11162 to sub-tasks as you see fit","username":"yacovm","ts":"2018-07-16T06:42:56.244Z"}
{"msg":"maybe I should turn 11159 to a sub-task of 11160 :thinking: ","username":"yacovm","ts":"2018-07-16T06:43:15.504Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=TAAu9rtnKMLjLSo96) @yacovm if FSM interfaces are well defined...","username":"guoger","ts":"2018-07-16T06:44:10.857Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=TAAu9rtnKMLjLSo96","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=TAAu9rtnKMLjLSo96","remote":true,"fileId":null,"fileName":null}]}
{"msg":"shouldn't them all be included to an epic?","username":"guoger","ts":"2018-07-16T06:44:25.414Z"}
{"msg":"the interfaces?","username":"yacovm","ts":"2018-07-16T06:44:32.214Z"}
{"msg":"nvm, i misunderstood `consenter` as `chain`","username":"guoger","ts":"2018-07-16T06:45:09.951Z"}
{"msg":"that's the chain actually","username":"yacovm","ts":"2018-07-16T06:45:19.724Z"}
{"msg":"in kafka IIRC the chain and consenter are sort of together no?","username":"yacovm","ts":"2018-07-16T06:45:45.147Z"}
{"msg":"consenter is kinda singleton, which spawns chains","username":"guoger","ts":"2018-07-16T06:46:13.876Z"}
{"msg":"I meant the chain then","username":"yacovm","ts":"2018-07-16T06:46:24.603Z"}
{"msg":"I meant the chain then https://github.com/hyperledger/fabric/blob/release-1.2/orderer/consensus/kafka/chain.go\nThe consenter is a thin wrapper https://github.com/hyperledger/fabric/blob/release-1.2/orderer/consensus/kafka/consenter.go","username":"yacovm","ts":"2018-07-16T06:46:24.603Z"}
{"msg":"and I would imagine `chain` to hold `fsm` instance","username":"guoger","ts":"2018-07-16T06:46:29.194Z"}
{"msg":"and relay messages to communication layer","username":"guoger","ts":"2018-07-16T06:46:57.205Z"}
{"msg":"the spawning code is pretty tiny though... it just creates a new chain and returns it","username":"yacovm","ts":"2018-07-16T06:46:58.153Z"}
{"msg":"no....","username":"yacovm","ts":"2018-07-16T06:47:01.143Z"}
{"msg":"why does the chain need to relay messages to the communication layer?","username":"yacovm","ts":"2018-07-16T06:47:15.664Z"}
{"msg":"we relay everything to the FSM don't we? ","username":"yacovm","ts":"2018-07-16T06:47:32.294Z"}
{"msg":"it will find out who is the leader and then relay to it the envelope","username":"yacovm","ts":"2018-07-16T06:48:13.782Z"}
{"msg":"I think we shouldn't make the chain talk to the `raft.Node` ","username":"yacovm","ts":"2018-07-16T06:48:35.515Z"}
{"msg":"and if we can just put that logic in the FSM - that's easier code wise don't you think?","username":"yacovm","ts":"2018-07-16T06:48:55.060Z"}
{"msg":"w.r.t communication, raft service is registered to our gRPC server. whenever it receives a message, it inspect the header and dispatch it to underlying `chain`. And `chain` would decide whether sends it to `fsm`, or sends it to the follower","username":"guoger","ts":"2018-07-16T06:52:56.932Z"}
{"msg":"I'm not sure how would you handle dispatching if fsm has direct access to communication?","username":"guoger","ts":"2018-07-16T06:54:17.730Z"}
{"msg":"you already said the reason why I want the FSM to do the decision and not the chain ;)","username":"yacovm","ts":"2018-07-16T06:54:56.766Z"}
{"msg":"> whenever it receives a message, it inspect the header and dispatch it to underlying `chain`. And `chain` would decide whether sends it to `fsm`, or sends it to the follower ","username":"yacovm","ts":"2018-07-16T06:55:06.255Z"}
{"msg":"you see - if you *anyway* forward the message to the FSM - then the FSM can decide whether to propose it, or to send it to another node, and it can do that since it has access to the raft communication layer","username":"yacovm","ts":"2018-07-16T06:55:48.227Z"}
{"msg":"that makes the chain logic simpler","username":"yacovm","ts":"2018-07-16T06:55:54.401Z"}
{"msg":"and the interfaces between them smaller","username":"yacovm","ts":"2018-07-16T06:56:02.925Z"}
{"msg":"the question is, to which `fsm` instance are you sending an ingress msg to?","username":"guoger","ts":"2018-07-16T06:57:15.982Z"}
{"msg":"I'm talking about the FSM wrapper module from FAB-11162","username":"yacovm","ts":"2018-07-16T06:57:36.145Z"}
{"msg":"and @kostas said there is a way to extract from the `raft.Node` the current leader","username":"yacovm","ts":"2018-07-16T06:58:06.358Z"}
{"msg":"so that makes sense the FSM do it....","username":"yacovm","ts":"2018-07-16T06:58:21.750Z"}
{"msg":"no?","username":"yacovm","ts":"2018-07-16T06:58:24.584Z"}
{"msg":"hmm, are you saying we have a single wrapper that takes care of all channels?","username":"guoger","ts":"2018-07-16T06:58:59.690Z"}
{"msg":"no","username":"yacovm","ts":"2018-07-16T06:59:15.540Z"}
{"msg":"I'm talking all the time in the context of a given channel","username":"yacovm","ts":"2018-07-16T06:59:28.386Z"}
{"msg":"{ chain { FSM { raft.Node } } } ","username":"yacovm","ts":"2018-07-16T06:59:42.478Z"}
{"msg":"do you wanna have a quick call?","username":"guoger","ts":"2018-07-16T07:00:14.620Z"}
{"msg":"when @C0rWin comes to the office","username":"yacovm","ts":"2018-07-16T07:00:24.154Z"}
{"msg":"sure","username":"guoger","ts":"2018-07-16T07:00:38.691Z"}
{"msg":"In one hour?","username":"C0rWin","ts":"2018-07-16T07:04:34.609Z"}
{"msg":"np :)","username":"guoger","ts":"2018-07-16T07:05:04.536Z"}
{"msg":"@yacovm IIUC, each `fsm` would register to communication layer, and that's where you decide which `fsm` to dispatch a msg to?","username":"guoger","ts":"2018-07-16T07:08:37.012Z"}
{"msg":"yeah ","username":"yacovm","ts":"2018-07-16T07:10:09.662Z"}
{"msg":"though we can do something else frankly","username":"yacovm","ts":"2018-07-16T07:12:09.765Z"}
{"msg":"we can have a comm layer per channel","username":"yacovm","ts":"2018-07-16T07:12:17.731Z"}
{"msg":"that would be easier to implement IMO ","username":"yacovm","ts":"2018-07-16T07:12:44.863Z"}
{"msg":"i.e when you get a message you inspect the channel, and route it to the correct comm \"instance\" for that channel","username":"yacovm","ts":"2018-07-16T07:13:34.134Z"}
{"msg":"so I was thinking that we should do bookkeeping in the same place (`Registrar.chains` in this case)","username":"guoger","ts":"2018-07-16T07:17:09.052Z"}
{"msg":"so we could avoid running into weird state due to async","username":"guoger","ts":"2018-07-16T07:18:17.495Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=FkQEcCJ9WnoYYAaXJ) @yacovm it depends on how you represent a `fsm` in comm layer, but it should be agnostic to comm users, no?","username":"guoger","ts":"2018-07-16T07:19:00.172Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=FkQEcCJ9WnoYYAaXJ","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=FkQEcCJ9WnoYYAaXJ","remote":true,"fileId":null,"fileName":null}]}
{"msg":"lets defer these questions to the call ;) ","username":"yacovm","ts":"2018-07-16T07:19:28.082Z"}
{"msg":"@yacovm @guoger hangout?","username":"C0rWin","ts":"2018-07-16T08:06:46.284Z"}
{"msg":"sure","username":"yacovm","ts":"2018-07-16T08:07:38.664Z"}
{"msg":"either that or telepathy ","username":"yacovm","ts":"2018-07-16T08:08:18.452Z"}
{"msg":"I have another call meanwhile","username":"C0rWin","ts":"2018-07-16T08:09:39.273Z"}
{"msg":"looking for a meeting room, just s sec","username":"guoger","ts":"2018-07-16T08:14:40.549Z"}
{"msg":"let's zoom. hangout is blocked in China... vpn works slow today","username":"guoger","ts":"2018-07-16T08:17:23.130Z"}
{"msg":"https://zoom.us/j/858466340","username":"guoger","ts":"2018-07-16T08:17:43.860Z"}
{"msg":"oh sorry, just saw that @C0rWin has another meeting.","username":"guoger","ts":"2018-07-16T08:18:25.499Z"}
{"msg":"Hi all! We just published an initial version of implementation of a consensus protocol called MinBFT. Please have a look if you are interested: https://github.com/nec-blockchain/minbft. Any feedback is highly appreciated! ","username":"sergefdrv","ts":"2018-07-16T08:19:38.202Z"}
{"msg":"@guoger @yacovm sorry guys, can we postpone for a while?","username":"C0rWin","ts":"2018-07-16T08:33:32.830Z"}
{"msg":"say when you can talk....","username":"yacovm","ts":"2018-07-16T08:36:11.728Z"}
{"msg":"I'll adjust","username":"yacovm","ts":"2018-07-16T08:36:14.859Z"}
{"msg":"option 1: 12:00 - 13:00\noption 2: 15:00 - 16:00","username":"guoger","ts":"2018-07-16T08:38:22.175Z"}
{"msg":"option 1: 12:00 - 13:00\noption 2: anytime between 15:00 - 18:00","username":"guoger","ts":"2018-07-16T08:38:22.175Z"}
{"msg":"your time","username":"guoger","ts":"2018-07-16T08:38:25.778Z"}
{"msg":"which works better for you?","username":"guoger","ts":"2018-07-16T08:38:33.594Z"}
{"msg":"^ @yacovm @C0rWin ","username":"guoger","ts":"2018-07-16T08:39:48.827Z"}
{"msg":"15:00 - 18:00 ","username":"yacovm","ts":"2018-07-16T09:01:47.374Z"}
{"msg":"@guoger but regardless of details - do you agree to the fundamental work split that I proposed? (you do the FSM, Artem does the chain/consenter, and I do the comm/membership) ? ","username":"yacovm","ts":"2018-07-16T09:46:24.145Z"}
{"msg":"That is unrelated to how and where we plug things","username":"yacovm","ts":"2018-07-16T09:46:36.695Z"}
{"msg":"agreed :)","username":"guoger","ts":"2018-07-16T09:55:31.900Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=aYmGxdMCnjALceMag) :thumbsup:","username":"yacovm","ts":"2018-07-16T09:58:12.800Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=aYmGxdMCnjALceMag","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=aYmGxdMCnjALceMag","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I would imagine `RaftNode` ( `fsm` ) interfaces to be something like this:\n```\nStart()\nPropose(block *cb.Block) error\nConfigure(...) error\nShutdown()\nGetLeader() uint\n```\nand chain constructs `RaftNode` with `NewRaftNode(config raft.Config, commitC chan *cb.Block) RaftNode`, where `commitC` is used to receive output block from `RaftNode`.\n\nSo chain works roughly like this:\n```\nif leader = node.GetLeader(); leader == myID {\n  order()\n} else {\n  // call comm layer to `Propose` tx to leader\n}\n```","username":"guoger","ts":"2018-07-16T10:06:55.142Z"}
{"msg":"I would imagine `RaftNode` ( `fsm` ) interfaces to be something like this:\n```\nStart()\nPropose(block *cb.Block) error\nConfigure(...) error\nShutdown()\nGetLeader() uint\n```\nand chain constructs `RaftNode` with `NewRaftNode(config raft.Config, commitC chan *cb.Block) RaftNode`, where `commitC` is used to receive output block from `RaftNode`.\n\nSo chain works roughly like this:\n```\nif leader = node.GetLeader(); leader == myID {\n  order()\n} else {\n  // call communication layer to `Propose` tx to leader\n}\n```","username":"guoger","ts":"2018-07-16T10:06:55.142Z"}
{"msg":"That's exactly my point... why do we need this `GetLeader` if we can just forward to the FSM anyway and let it do the routing?","username":"yacovm","ts":"2018-07-16T10:30:07.669Z"}
{"msg":"and I thought the `chain` would hold an FSM? why does it need to hold the raft node?","username":"yacovm","ts":"2018-07-16T10:31:21.560Z"}
{"msg":"Raftnode is simply an alias of FSM","username":"guoger","ts":"2018-07-16T10:31:53.254Z"}
{"msg":"not sure fsm is a good name...","username":"guoger","ts":"2018-07-16T10:32:02.714Z"}
{"msg":"it might not be but - since we have `raft.Node` in the code base... ;) ","username":"yacovm","ts":"2018-07-16T10:32:23.608Z"}
{"msg":"So chain still receives msg from Propose api and call order?","username":"guoger","ts":"2018-07-16T10:32:30.394Z"}
{"msg":"I thought chain receives messages from `Broadcast`?","username":"yacovm","ts":"2018-07-16T10:32:53.993Z"}
{"msg":"that’s why I’m also swing between RaftCluster and RaftNode","username":"guoger","ts":"2018-07-16T10:33:10.535Z"}
{"msg":"Leader also receives tx from follower nodes ","username":"guoger","ts":"2018-07-16T10:33:39.014Z"}
{"msg":"cluster sounds good","username":"yacovm","ts":"2018-07-16T10:34:19.393Z"}
{"msg":"Btw, I may be running a late, super heavy rain today... roads around China lab are flooded...","username":"guoger","ts":"2018-07-16T10:36:49.943Z"}
{"msg":"whenever you guys are ready","username":"guoger","ts":"2018-07-16T11:49:53.819Z"}
{"msg":"@yacovm @C0rWin ","username":"guoger","ts":"2018-07-16T11:49:59.842Z"}
{"msg":"ready :)","username":"C0rWin","ts":"2018-07-16T12:40:27.201Z"}
{"msg":"....","username":"yacovm","ts":"2018-07-16T12:48:09.840Z"}
{"msg":"@guoger ?","username":"yacovm","ts":"2018-07-16T12:49:26.971Z"}
{"msg":"k, just a sec","username":"guoger","ts":"2018-07-16T12:49:38.577Z"}
{"msg":"https://zoom.us/j/359450646","username":"guoger","ts":"2018-07-16T12:54:31.348Z"}
{"msg":"@C0rWin ","username":"yacovm","ts":"2018-07-16T12:55:31.853Z"}
{"msg":"Has joined the channel.","username":"adarshsaraf123","ts":"2018-07-16T13:22:48.053Z","type":"uj"}
{"msg":"just writing some notes here. We had a quick call, and agreed on how to split the work. We will come up with interfaces for each piece so we could independently work on mocks.","username":"guoger","ts":"2018-07-16T13:43:49.647Z"}
{"msg":"Hi all, I am Adarsh Saraf working as a Software Engineer with IBM Research, India. I would like to contribute to the raft implementation. I have prior experience in porting the fabric-orderer code for a project we were working on internally at the India Research Lab. @kostas @C0rWin @yacovm @guoger ","username":"adarshsaraf123","ts":"2018-07-16T14:36:59.641Z"}
{"msg":"Hi, where can I find the scrum schedule? I am interested in attending the all and see if I could contribute to the project. Thanks.","username":"huikang","ts":"2018-07-17T18:05:09.381Z"}
{"msg":"@huikang There is a general Fabric scrum that occurs MWF at 9:30 ET in #fabric-scrum.  There's no scheduled scrum for orderer activities, instead, coordination typically happens in this channel, asynchronously","username":"jyellick","ts":"2018-07-17T19:25:52.836Z"}
{"msg":"@jyellick thanks for your answer. I will watch for the coordination in this channel.","username":"huikang","ts":"2018-07-17T19:29:17.542Z"}
{"msg":"@adarshsaraf123 @huikang hi, we highly appreciate your interests in contributing to this work! we are working on the first mvp at this moment, which is estimated to be available by next week, and we will definitely have some `help-needed` items by then. Meanwhile, here are some materials you need to study:\ndesign doc: https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?usp=sharing\nwork breakdown: https://docs.google.com/spreadsheets/d/1R02-xjdl4hNw90kN4NZ1kX0f4QoIYn51_1UHlwy-GQs/edit?usp=sharing\netcd/raft example: https://github.com/coreos/etcd/tree/master/contrib/raftexample\netcd/raft readme: https://github.com/coreos/etcd/blob/master/raft/README.md","username":"guoger","ts":"2018-07-18T02:37:00.474Z"}
{"msg":"if you have any questions/doubts, feel free to post it here or in the doc","username":"guoger","ts":"2018-07-18T02:45:46.106Z"}
{"msg":"question, how do we distinguish between `config block` and `normal block`? when our fsm wrapper `RaftCluster` has consented on a block, it sends it back to `chain` to be committed, and the `chain` needs to know if it's of type `config` or `normal` to decide to use either `WriteBlock` or `WriteConfigBlock`","username":"guoger","ts":"2018-07-19T02:57:03.743Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bC7Aj5PdfbMrS7BaB) @guoger Currently, to my knowledge, there is no means to distinguish between config blocks and normal blocks. An approach would be to see the first transaction in the block to determine if it is a config transaction. Since config blocks contain only one transaction, the config transaction, this should suffice. ","username":"adarshsaraf123","ts":"2018-07-19T06:28:15.306Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bC7Aj5PdfbMrS7BaB","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bC7Aj5PdfbMrS7BaB","remote":true,"fileId":null,"fileName":null}]}
{"msg":"yea... inspecting channel header is what we do in `broadcast`, however it sounds heavy in this case...","username":"guoger","ts":"2018-07-19T07:04:56.670Z"}
{"msg":"not sure if it makes sense to add `type` to block metadata\n```\nmessage BlockMetadata {\n    enum Type {\n       NORMAL = 1;\n       CONFIG = 2;\n    }\n    Type type = 1;\n    repeated bytes metadata = 2;\n}\n```","username":"guoger","ts":"2018-07-19T09:05:37.920Z"}
{"msg":"or, since it's only used internally in `chain`, we could simply wrap `Block` in a struct, which contains type field. Although, I feel this `type` is needed for other consensus type as well","username":"guoger","ts":"2018-07-19T09:07:18.226Z"}
{"msg":"~or, since it's only used internally in `chain`, we could simply wrap `Block` in a struct, which contains type field. Although, I feel this `type` is needed for other consensus type as well~ this doesn't work... we need to preserve this info while it's being sent through raft","username":"guoger","ts":"2018-07-19T09:07:18.226Z"}
{"msg":"what do you need it for?","username":"yacovm","ts":"2018-07-19T09:37:44.069Z"}
{"msg":" when our fsm wrapper `RaftCluster` has consented on a block, it sends it back to `chain` to be committed, and the `chain` needs to know if it's of type `config` or `normal` to decide to use either `WriteBlock` or `WriteConfigBlock","username":"guoger","ts":"2018-07-19T09:43:28.957Z"}
{"msg":" @yacovm  when our fsm wrapper `RaftCluster` has consented on a block, it sends it back to `chain` to be committed, and the `chain` needs to know if it's of type `config` or `normal` to decide to use either `WriteBlock` or `WriteConfigBlock","username":"guoger","ts":"2018-07-19T09:43:28.957Z"}
{"msg":" @yacovm  when our fsm wrapper `RaftCluster` has consented on a block, it sends it back to `chain` to be committed, and the `chain` needs to know if it's of type `config` or `normal` to decide to use either `WriteBlock` or `WriteConfigBlock`","username":"guoger","ts":"2018-07-19T09:43:28.957Z"}
{"msg":"but... can't you just have 2 of these methods in the interface?","username":"yacovm","ts":"2018-07-19T09:45:47.406Z"}
{"msg":"how does that solve the problem? we still need to peel the block and inspect envelope given current proto, no?","username":"guoger","ts":"2018-07-19T09:48:32.883Z"}
{"msg":"how does that solve the problem? we still need to peel the block and inspect envelope given current proto definition, no?","username":"guoger","ts":"2018-07-19T09:48:32.883Z"}
{"msg":"oh you're saying you don't know if the block that comes from the raft.Node is a config block or not?","username":"yacovm","ts":"2018-07-19T09:49:25.195Z"}
{"msg":"Right","username":"guoger","ts":"2018-07-19T09:51:53.545Z"}
{"msg":"can't we just inspect it?","username":"yacovm","ts":"2018-07-19T09:52:57.635Z"}
{"msg":"if it has 1 envelope and the envelope contains a config update... doesn't that mean it's a config block?","username":"yacovm","ts":"2018-07-19T09:53:19.997Z"}
{"msg":"Yes, that’s what we do at the moment, in broadcast. Although I think it’s a bit heavy for every block","username":"guoger","ts":"2018-07-19T10:32:15.115Z"}
{"msg":"I think it benefits us in the long run","username":"guoger","ts":"2018-07-19T10:32:31.737Z"}
{"msg":"Did you do benchmarking?","username":"yacovm","ts":"2018-07-19T10:34:37.269Z"}
{"msg":"I say for now keep it like that and then we can change... we need to decide on some proto structures which we use to send around","username":"yacovm","ts":"2018-07-19T10:35:26.111Z"}
{"msg":"right now the communication API that I write - just uses `proto.Message` which is the interface","username":"yacovm","ts":"2018-07-19T10:35:41.905Z"}
{"msg":"because I want to make it (if possible) re-usable for BFT too","username":"yacovm","ts":"2018-07-19T10:35:51.793Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=T7LfzX7BVyZWTpj0iF) @guoger well, there is already code for what Yacov proposed:\n\n```// Processor provides the methods necessary to classify and process any message which\n// arrives through the Broadcast interface.\ntype Processor interface {\n\t// ClassifyMsg inspects the message header to determine which type of processing is necessary\n\tClassifyMsg(chdr *cb.ChannelHeader) Classification\n\n\t// ProcessNormalMsg will check the validity of a message based on the current configuration.  It returns the current\n\t// configuration sequence number and nil on success, or an error if the message is not valid\n\tProcessNormalMsg(env *cb.Envelope) (configSeq uint64, err error)\n\n\t// ProcessConfigUpdateMsg will attempt to apply the config update to the current configuration, and if successful\n\t// return the resulting config message and the configSeq the config was computed from.  If the config update message\n\t// is invalid, an error is returned.\n\tProcessConfigUpdateMsg(env *cb.Envelope) (config *cb.Envelope, configSeq uint64, err error)\n\n\t// ProcessConfigMsg takes message of type `ORDERER_TX` or `CONFIG`, unpack the ConfigUpdate envelope embedded\n\t// in it, and call `ProcessConfigUpdateMsg` to produce new Config message of the same type as original message.\n\t// This method is used to re-validate and reproduce config message, if it's deemed not to be valid anymore.\n\tProcessConfigMsg(env *cb.Envelope) (*cb.Envelope, uint64, error)\n}```","username":"C0rWin","ts":"2018-07-19T14:40:17.398Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=T7LfzX7BVyZWTpj0iF","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=T7LfzX7BVyZWTpj0iF","remote":true,"fileId":null,"fileName":null}]}
{"msg":"yup, I was aware of that (it's classifying envelope, not block though), just felt preserving this type in block could help us. Anyway, let's go with yacov proposed for now","username":"guoger","ts":"2018-07-19T15:09:35.679Z"}
{"msg":"minbft","username":"sergefdrv","ts":"2018-07-23T11:22:41.809Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bozaAAWcsTtbMdQpe) I'm going to present this project Aug 2: https://goo.gl/LWAu8D. Please feed free to join if you're interested","username":"sergefdrv","ts":"2018-07-23T11:27:15.618Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bozaAAWcsTtbMdQpe","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bozaAAWcsTtbMdQpe","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@guoger ^^^","username":"sergefdrv","ts":"2018-07-23T11:28:45.239Z"}
{"msg":"Hi, quick question: where can I find the breakdown task list on the fabric jira? Thanks.","username":"huikang","ts":"2018-07-24T03:42:58.944Z"}
{"msg":"In addition, I realized that the changes are spread into many small changes on gerrit, e.g., FAB-9449, FAB-9447. Is there a raft branch which includes these changes altogether to accommodate dev and testing?","username":"huikang","ts":"2018-07-24T03:52:03.700Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zSrykGSkRvW93SsRC) @huikang This looks like a good breakdown but I don't find links in the same for the JIRA items: https://docs.google.com/spreadsheets/d/1R02-xjdl4hNw90kN4NZ1kX0f4QoIYn51_1UHlwy-GQs/edit#gid=0","username":"adarshsaraf123","ts":"2018-07-24T06:40:26.835Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zSrykGSkRvW93SsRC","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zSrykGSkRvW93SsRC","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zSrykGSkRvW93SsRC) @huikang This is the breakdown but not all the items have a corresponding JIRA: https://docs.google.com/spreadsheets/d/1R02-xjdl4hNw90kN4NZ1kX0f4QoIYn51_1UHlwy-GQs/edit#gid=0","username":"adarshsaraf123","ts":"2018-07-24T06:40:26.835Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zSrykGSkRvW93SsRC","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zSrykGSkRvW93SsRC","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=d6xpyNbmkXLnAJ9pc) @adarshsaraf123 yes, I saw this as a pinned message. It would be nice if the jira ID can be added to the spreadsheet.","username":"huikang","ts":"2018-07-24T15:06:31.094Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=d6xpyNbmkXLnAJ9pc","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=d6xpyNbmkXLnAJ9pc","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Has joined the channel.","username":"anarodrigues","ts":"2018-07-24T18:53:32.771Z","type":"uj"}
{"msg":"Hi everyone. I'll try to catch up with everything I've missed today and tomorrow.","username":"kostas","ts":"2018-07-25T14:10:14.462Z"}
{"msg":"I'm currently going over recordings (maintainers meeting, JIRA changes, etc.).","username":"kostas","ts":"2018-07-25T16:01:20.499Z"}
{"msg":"Would it be fair to say that the JIRA workflow hasn't been vastly improved and there is still a ridiculously amount of flexibility moving forward?","username":"kostas","ts":"2018-07-25T16:02:17.944Z"}
{"msg":"Would it be fair to say that the JIRA workflow hasn't been vastly improved and there is still a ridiculous amount of flexibility moving forward?","username":"kostas","ts":"2018-07-25T16:02:17.944Z"}
{"msg":"I see the marginal improvements in JIRA, but there is still a ridiculous amount of flexibility moving forward?","username":"kostas","ts":"2018-07-25T16:02:17.944Z"}
{"msg":"Have we settled on one way of doing things?","username":"kostas","ts":"2018-07-25T16:04:02.305Z"}
{"msg":"Have we settled on one way of doing things? (Whatever that way is.)","username":"kostas","ts":"2018-07-25T16:04:02.305Z"}
{"msg":"(Whatever that way is.)","username":"kostas","ts":"2018-07-25T16:04:06.869Z"}
{"msg":"I'll try to push my patch tomorrow..","username":"guoger","ts":"2018-07-25T16:06:03.349Z"}
{"msg":"Jay, just to be clear -- I'm talking about some changes we're pushing to JIRA in general as Fabric team.","username":"kostas","ts":"2018-07-25T16:06:30.021Z"}
{"msg":"Jay, just to be clear -- I'm talking about some changes we're pushing to JIRA in general across the project.","username":"kostas","ts":"2018-07-25T16:06:30.021Z"}
{"msg":"one thing I'm currently struggling with is how to mock ticker so we have deterministic test","username":"guoger","ts":"2018-07-25T16:06:46.956Z"}
{"msg":"None of the above relates to Raft. I still have a ton of catch up to do there.","username":"kostas","ts":"2018-07-25T16:07:04.045Z"}
{"msg":"> I see the marginal improvements in JIRA, but there is still a ridiculous amount of flexibility moving forward?\nAs an example of this, when you bump into what is clearly a user-error submitted as bug, do you withdraw as Invalid: \"Environment Issue\", \"Invalid: Works as Expected\", or \"Invalid: Test Error\"?","username":"kostas","ts":"2018-07-25T18:04:15.217Z"}
{"msg":"> I see the marginal improvements in JIRA, but there is still a ridiculous amount of flexibility moving forward?\nAs an example of this, when you bump into what is clearly a user-error submitted as a bug, do you withdraw as \"Invalid: Environment Issue\", \"Invalid: Works as Expected\", or \"Invalid: Test Error\"?","username":"kostas","ts":"2018-07-25T18:04:15.217Z"}
{"msg":"I can make the case that all three are viable options.","username":"kostas","ts":"2018-07-25T18:04:25.656Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=rAEoPKjqh8RbRnEWf","username":"kostas","ts":"2018-07-25T20:59:19.983Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=rAEoPKjqh8RbRnEWf","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=rAEoPKjqh8RbRnEWf","remote":true,"fileId":null,"fileName":null}]}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=rone4YMga8TzssrcW","username":"kostas","ts":"2018-07-25T20:59:35.790Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=rone4YMga8TzssrcW","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=rone4YMga8TzssrcW","remote":true,"fileId":null,"fileName":null}]}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=kGBQcBr7fMkEvDFHG","username":"kostas","ts":"2018-07-25T21:00:11.943Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=kGBQcBr7fMkEvDFHG","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=kGBQcBr7fMkEvDFHG","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Rather confused about where the Raft work currently stands.","username":"kostas","ts":"2018-07-25T21:03:42.886Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=NHvvG72xf2cyx8KMD","username":"kostas","ts":"2018-07-25T21:04:07.279Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=NHvvG72xf2cyx8KMD","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=NHvvG72xf2cyx8KMD","remote":true,"fileId":null,"fileName":null}]}
{"msg":"What was the verdict of the call?","username":"kostas","ts":"2018-07-25T21:04:24.313Z"}
{"msg":"Let me know if there's code I could review to get a grasp of where things stand.","username":"kostas","ts":"2018-07-25T21:04:51.698Z"}
{"msg":"I went through the messages that were exchanged, and I'm confused about the FSM approach.","username":"kostas","ts":"2018-07-25T21:05:36.337Z"}
{"msg":"I pushed a change set for comm layer, but I need to do some changes tomorrow","username":"yacovm","ts":"2018-07-25T21:05:46.636Z"}
{"msg":"it's WIP ","username":"yacovm","ts":"2018-07-25T21:05:55.661Z"}
{"msg":"Kostas - it's much less simple than we thought ;) ","username":"yacovm","ts":"2018-07-25T21:06:12.226Z"}
{"msg":"The node object that the etcd/raft library exposes is an FSM.","username":"kostas","ts":"2018-07-25T21:06:12.325Z"}
{"msg":"multi-channel TLS pinning isn't that simple ;) ","username":"yacovm","ts":"2018-07-25T21:06:24.206Z"}
{"msg":"multi-channel TLS pinning with RPCs (not streams!) isn't that simple ;) ","username":"yacovm","ts":"2018-07-25T21:06:24.206Z"}
{"msg":"Ah, I'm interested in hearing more about this, when the time comes.","username":"kostas","ts":"2018-07-25T21:07:23.401Z"}
{"msg":"Going back to the FSM comment, and at the risk of misinterpreting the earlier discussion, it would be a mistake to route _all_ messages via the raft.Node FSM.","username":"kostas","ts":"2018-07-25T21:07:51.541Z"}
{"msg":"We only pass cut blocks to the FSM.","username":"kostas","ts":"2018-07-25T21:08:09.590Z"}
{"msg":"_Unless_ you mean that we're building our own FSM around the raft.Node FSM, in which case the approach of \"just pass everything to the FSM and we'll handle routing there\" makes sense.","username":"kostas","ts":"2018-07-25T21:08:46.105Z"}
{"msg":"obviously... we weren't planning on routing all messages via it","username":"yacovm","ts":"2018-07-25T21:08:49.465Z"}
{"msg":"where did you get that impression? :thinking: ","username":"yacovm","ts":"2018-07-25T21:08:58.826Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=kGBQcBr7fMkEvDFHG","username":"kostas","ts":"2018-07-25T21:09:05.043Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=kGBQcBr7fMkEvDFHG","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=kGBQcBr7fMkEvDFHG","remote":true,"fileId":null,"fileName":null}]}
{"msg":"oh","username":"yacovm","ts":"2018-07-25T21:09:07.928Z"}
{"msg":"^^","username":"kostas","ts":"2018-07-25T21:09:08.355Z"}
{"msg":"no, we talked since then","username":"yacovm","ts":"2018-07-25T21:09:13.315Z"}
{"msg":"Right, I figured I may be operating on stale data.","username":"kostas","ts":"2018-07-25T21:09:29.187Z"}
{"msg":"At any rate, I guess I'll catch up one way or another.","username":"kostas","ts":"2018-07-25T21:09:51.823Z"}
{"msg":"Feel free to tag me in upcoming CRs for review, or assign work my way.","username":"kostas","ts":"2018-07-25T21:10:06.546Z"}
{"msg":"It'd be good to have a quick Zoom call with a couple of you to get up to speed as well, whenever you have the chance.","username":"kostas","ts":"2018-07-25T21:10:25.646Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=AZuAqE5GxYBzZAQa2","username":"kostas","ts":"2018-07-25T21:14:30.028Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=AZuAqE5GxYBzZAQa2","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=AZuAqE5GxYBzZAQa2","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@sergefdrv: I'll join that call, thanks for the tip. Would you have any interest in porting that work over to Fabric as well? (Building on top of the changes we'll build in for the Raft work.)","username":"kostas","ts":"2018-07-25T21:15:05.395Z"}
{"msg":"@adarshsaraf123 @huikang: We'll try to straigthen things out by next week in JIRA. I'll keep you posted.","username":"kostas","ts":"2018-07-25T21:16:18.466Z"}
{"msg":"> @sergefdrv: I'll join that call, thanks for the tip. Would you have any interest in porting that work over to Fabric as well? (Building on top of the changes we'll build in for the Raft work.)\nAh, nevermind that. I see the dependency on TEE.","username":"kostas","ts":"2018-07-26T03:14:10.730Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=buXk5Gq6RL2uYFfuk) @kostas I would also be interested in listening in on the call to understand the status.","username":"adarshsaraf123","ts":"2018-07-26T03:56:26.779Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=buXk5Gq6RL2uYFfuk","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=buXk5Gq6RL2uYFfuk","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Right, if we are to have a call we’ll arrange it as-hoc in this very channel and also post the link here. We’ll @ you. ","username":"kostas","ts":"2018-07-26T04:07:17.372Z"}
{"msg":"Right, if we are to have a call we’ll arrange it ad-hoc in this very channel and also post the link here. We’ll @ you. ","username":"kostas","ts":"2018-07-26T04:07:17.372Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3tD9o4Gxf9cQPro9x) @kostas I'm wondering, what's your position regarding consensus protocols utilizing TEE?","username":"sergefdrv","ts":"2018-07-26T08:38:58.226Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3tD9o4Gxf9cQPro9x","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3tD9o4Gxf9cQPro9x","remote":true,"fileId":null,"fileName":null}]}
{"msg":"> I'm wondering, what's your position regarding consensus protocols utilizing TEE?\n@sergefdrv: Due to the TEE constraint, their applicability is quite limited.","username":"kostas","ts":"2018-07-26T12:28:38.200Z"}
{"msg":"> I'm wondering, what's your position regarding consensus protocols utilizing TEE?\n@sergefdrv Due to the TEE constraint, their applicability is quite limited.","username":"kostas","ts":"2018-07-26T12:28:38.200Z"}
{"msg":"@kostas I see your point, but TEE is becoming ubiquitous these days. Most modern PCs and servers are equipped with Intel SGX, whereas mobile devices have ARM TrustZone support...","username":"sergefdrv","ts":"2018-07-26T12:32:09.338Z"}
{"msg":"Ubiquitous is a bit of a stretch, but I also see your point. Here's this for another counterpoint: you have to trust Intel.","username":"kostas","ts":"2018-07-26T12:35:24.432Z"}
{"msg":"Ubiquitous is a bit of a stretch, but let's see that popularity is not an issue. Here's this for another counterpoint: you have to trust Intel.","username":"kostas","ts":"2018-07-26T12:35:24.432Z"}
{"msg":"Ubiquitous is a bit of a stretch, but let's assume that popularity is not an issue. Here's this for another counterpoint: you have to trust Intel.","username":"kostas","ts":"2018-07-26T12:35:24.432Z"}
{"msg":"@kostas I think it depends on a particular use case. My personal understanding is that it might be actually very hard to avoid a trusted third-party in a permissioned consortium completely, whether it's CA provider or TEE HW vendor","username":"sergefdrv","ts":"2018-07-26T12:49:10.174Z"}
{"msg":"Hm. I'd say it's several orders of magnitude easier to roll your own CA, than rolling your own TEE.","username":"kostas","ts":"2018-07-26T12:50:39.100Z"}
{"msg":"I mean, if we are fine to trust HTTPS certificates issued by well-known CA providers, why shouldn't we be fine trusting a TEE vendor? Of course, it depends on value of the asset at stake.","username":"sergefdrv","ts":"2018-07-26T12:54:07.836Z"}
{"msg":"Anyways, it is only about ordering of transaction proposals, if I understand correctly","username":"sergefdrv","ts":"2018-07-26T12:54:51.622Z"}
{"msg":"HTTPS certificates have expiration and there is certificate transparency ;)","username":"yacovm","ts":"2018-07-26T12:55:14.251Z"}
{"msg":"Trusting hardware is much more problematic... take the bluetooth bug discovered this week","username":"yacovm","ts":"2018-07-26T12:55:34.851Z"}
{"msg":"https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00128.html","username":"yacovm","ts":"2018-07-26T12:55:56.882Z"}
{"msg":"> A vulnerability in Bluetooth® pairing potentially allows an attacker with physical proximity (within 30 meters) to gain unauthorized access via an adjacent network, intercept traffic and send forged pairing messages between two vulnerable Bluetooth® devices","username":"yacovm","ts":"2018-07-26T12:56:16.181Z"}
{"msg":"Also - with all due respect... Fabric supports privately issued TLS certificates","username":"yacovm","ts":"2018-07-26T12:56:52.538Z"}
{"msg":"remote attestation can also have expiration and revocation mechanisms. What do you mean exactly by \"certificate transparency\"?","username":"sergefdrv","ts":"2018-07-26T12:56:56.717Z"}
{"msg":"google it ;) ","username":"yacovm","ts":"2018-07-26T12:57:21.658Z"}
{"msg":"https://www.certificate-transparency.org/","username":"yacovm","ts":"2018-07-26T12:57:34.716Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=WCN4q8LJzZAyBke2Z) @yacovm I see :slight_smile: ","username":"sergefdrv","ts":"2018-07-26T12:57:35.597Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=WCN4q8LJzZAyBke2Z","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=WCN4q8LJzZAyBke2Z","remote":true,"fileId":null,"fileName":null}]}
{"msg":"anyway - TEE is not a silver bullet....","username":"yacovm","ts":"2018-07-26T12:58:54.173Z"}
{"msg":"also BFT isn't. it's just a model","username":"yacovm","ts":"2018-07-26T12:59:21.001Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zPdsDqhxnsFNx6o5j) @yacovm Thanks, I'll look into this","username":"sergefdrv","ts":"2018-07-26T12:59:37.951Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zPdsDqhxnsFNx6o5j","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zPdsDqhxnsFNx6o5j","remote":true,"fileId":null,"fileName":null}]}
{"msg":"suppose, a particular TEE utilized by BFT consensus protocol in Fabric orderer turns out to be completely broken. What would be the worst consequence?","username":"sergefdrv","ts":"2018-07-26T13:04:31.576Z"}
{"msg":"chain fork","username":"yacovm","ts":"2018-07-26T13:04:51.305Z"}
{"msg":"I'd also add censorship to that list.","username":"kostas","ts":"2018-07-26T13:05:28.556Z"}
{"msg":"he asked the worst ;) ","username":"yacovm","ts":"2018-07-26T13:05:38.446Z"}
{"msg":"Touché.","username":"kostas","ts":"2018-07-26T13:05:50.385Z"}
{"msg":"Intel's license agreements reads:","username":"kostas","ts":"2018-07-26T13:07:57.518Z"}
{"msg":"> You acknowledge and agree that Intel has the right to immediately suspend your use of an SGX enclave by removing your authorization from Intel’s WhiteList of authorized keys if: (i) you fail or if in good faith Intel believes that you fail to comply in any way with any of the requirements set forth in the SGX Licensee Guide; or (ii) Intel in its reasonable discretion determines it reasonable or necessary in order to comply with applicable laws or legal requests on INTEL CONFIDENTIAL Page 5 of 11 v160908; or (iii) Intel reasonably believes such suspension to be reasonably prudent or necessary.","username":"kostas","ts":"2018-07-26T13:08:01.420Z"}
{"msg":"IANAL but this effectively means they can shut you down at any time?","username":"kostas","ts":"2018-07-26T13:08:27.657Z"}
{"msg":"I'm not so sure, if broken TEE used by MinBFT consensus in the ordering service could cause chain fork in Fabric validator nodes","username":"sergefdrv","ts":"2018-07-26T13:09:03.259Z"}
{"msg":"liveness might be at question in case of disaster with TEE","username":"sergefdrv","ts":"2018-07-26T13:12:06.141Z"}
{"msg":"why not? ","username":"yacovm","ts":"2018-07-26T13:13:37.529Z"}
{"msg":"I do't know what's MinBFT , by the way","username":"yacovm","ts":"2018-07-26T13:14:01.902Z"}
{"msg":"I assumed you meant to ask - if you achieve Byzantine tolerance via running the orderer code in an enclave and you don't use BFT","username":"yacovm","ts":"2018-07-26T13:14:22.605Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=2D3uz5pwu7eQhuBWB) @yacovm because the validator nodes would need to get f+1 consistent replies from different ordering nodes ","username":"sergefdrv","ts":"2018-07-26T13:15:18.451Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=2D3uz5pwu7eQhuBWB","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=2D3uz5pwu7eQhuBWB","remote":true,"fileId":null,"fileName":null}]}
{"msg":"We assume that F+1 enclosures are broken.","username":"kostas","ts":"2018-07-26T13:16:09.100Z"}
{"msg":"We assume that f+1 enclosures are broken.","username":"kostas","ts":"2018-07-26T13:16:09.100Z"}
{"msg":"but if you run BFT why do you need TEE?","username":"yacovm","ts":"2018-07-26T13:16:09.233Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=H5qGZbjp3cDjgitjc) @yacovm it's not that easy. MinBFT doesn't run substantial part of consensus in TEE. It utilized TEE to guarantee that a malicious node cannot send conflicting consensus messages to different peers","username":"sergefdrv","ts":"2018-07-26T13:16:54.892Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=H5qGZbjp3cDjgitjc","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=H5qGZbjp3cDjgitjc","remote":true,"fileId":null,"fileName":null}]}
{"msg":"so you need BFT anyway then, right?","username":"yacovm","ts":"2018-07-26T13:17:58.873Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=nPFWLSHy8N2eanNaa) @kostas I'm not sure that I got you right, but PBFT would break in case of f+1 faulty nodes as well","username":"sergefdrv","ts":"2018-07-26T13:18:22.813Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=nPFWLSHy8N2eanNaa","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=nPFWLSHy8N2eanNaa","remote":true,"fileId":null,"fileName":null}]}
{"msg":"are you saying that minBFT passes some of the algorithm steps via TEE and because of this it's more efficient?","username":"yacovm","ts":"2018-07-26T13:18:54.609Z"}
{"msg":"@sergefdrv: I'm responding to this comment of yours here:","username":"kostas","ts":"2018-07-26T13:19:04.026Z"}
{"msg":"> suppose, a particular TEE utilized by BFT consensus protocol in Fabric orderer turns out to be completely broken. What would be the worst consequence?","username":"kostas","ts":"2018-07-26T13:19:06.992Z"}
{"msg":"And my response is: if f+1 participating enclaves are broken, then everything than can go wrong with a traditional PBFT scheme, can also go wrong with MinBFT.","username":"kostas","ts":"2018-07-26T13:19:39.212Z"}
{"msg":"We tried to summarize core concepts of MinBFT: https://github.com/nec-blockchain/minbft#concepts","username":"sergefdrv","ts":"2018-07-26T13:19:56.937Z"}
{"msg":"So you got this and this: https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=8i8TYa7GzmB3LxePo","username":"kostas","ts":"2018-07-26T13:19:58.605Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=8i8TYa7GzmB3LxePo","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=8i8TYa7GzmB3LxePo","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KnupEttuLrTRW3x72) @kostas by completely broken TEE I meant that any faulty replica can cheat on the part of consensus logic that must be protected by TEE","username":"sergefdrv","ts":"2018-07-26T13:21:43.618Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KnupEttuLrTRW3x72","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KnupEttuLrTRW3x72","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I do not follow.","username":"kostas","ts":"2018-07-26T13:22:07.050Z"}
{"msg":"@kostas from which point? :slight_smile: ","username":"sergefdrv","ts":"2018-07-26T13:25:00.549Z"}
{"msg":"> by completely broken TEE I meant that any faulty replica can cheat on the part of consensus logic that must be protected by TEE","username":"kostas","ts":"2018-07-26T13:25:10.497Z"}
{"msg":"Just to speed up this conversation - what are we arguing here?","username":"kostas","ts":"2018-07-26T13:25:40.665Z"}
{"msg":"there is a part of consensus login protected by TEE. A faulty node is assumed to be unable to deviate in that part of protocol","username":"sergefdrv","ts":"2018-07-26T13:25:53.908Z"}
{"msg":"broken TEE would mean that a faulty node could actually deviate","username":"sergefdrv","ts":"2018-07-26T13:26:21.714Z"}
{"msg":"And if you f+1 of those, the protocol is broken.","username":"kostas","ts":"2018-07-26T13:26:37.208Z"}
{"msg":"And if you don't have f+1 of those, you're still crossing your fingers that Intel won't revoke your license.","username":"kostas","ts":"2018-07-26T13:27:00.502Z"}
{"msg":"the assumption that there is still at most f correct nodes is assumed to nevertheless hold","username":"sergefdrv","ts":"2018-07-26T13:27:19.592Z"}
{"msg":"the assumption that there is still at most f faulty nodes is assumed to nevertheless hold","username":"sergefdrv","ts":"2018-07-26T13:27:19.592Z"}
{"msg":"This is where I don't follow. You asked what would happen if we have a broken TEE.","username":"kostas","ts":"2018-07-26T13:28:10.059Z"}
{"msg":"And the response is simple: 1 broken TEE nothing, f+1 broken TEEs everything.","username":"kostas","ts":"2018-07-26T13:28:23.807Z"}
{"msg":"If we're saying that we have at most f broken TEEs, this is OK.","username":"kostas","ts":"2018-07-26T13:28:38.741Z"}
{"msg":"But the point we're tip-toeing around is:","username":"kostas","ts":"2018-07-26T13:28:50.723Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=8i8TYa7GzmB3LxePo","username":"kostas","ts":"2018-07-26T13:28:55.384Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=8i8TYa7GzmB3LxePo","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=8i8TYa7GzmB3LxePo","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I mean, broken TEE would allow faulty replica to deviate from the part of consensus handled by TEE. The correct nodes would sill behave correctly and do not abuse TEE vulnerability ","username":"sergefdrv","ts":"2018-07-26T13:29:29.081Z"}
{"msg":"in case TEE vendor would disrupt your ordering service, the nodes can fall back to dummy unprotected substitute of TEE piece of the protocol. That would mean switching to CFT mode","username":"sergefdrv","ts":"2018-07-26T13:32:05.208Z"}
{"msg":"I believe certain use cases would still be fine with this","username":"sergefdrv","ts":"2018-07-26T13:32:49.713Z"}
{"msg":"there is always some risk ","username":"sergefdrv","ts":"2018-07-26T13:33:01.820Z"}
{"msg":"> there is always some risk\nCan we agree on this as an objectively true statement:","username":"kostas","ts":"2018-07-26T13:33:46.634Z"}
{"msg":"Protocol A: A BFT protocol that depends on TEE.","username":"kostas","ts":"2018-07-26T13:34:03.948Z"}
{"msg":"Protocol A: A BFT protocol that depends on SGX.","username":"kostas","ts":"2018-07-26T13:34:03.948Z"}
{"msg":"Protocol B: A BFT protocol that does not depend on TEE.","username":"kostas","ts":"2018-07-26T13:34:11.989Z"}
{"msg":"Protocol B: A BFT protocol that does not depend on SGX.","username":"kostas","ts":"2018-07-26T13:34:11.989Z"}
{"msg":"Both protocols work correctly, i.e. no bugs.","username":"kostas","ts":"2018-07-26T13:34:24.797Z"}
{"msg":"Then: Protocol A *always carries more risk* than protocol B.","username":"kostas","ts":"2018-07-26T13:34:40.834Z"}
{"msg":"Actually, let me revise this statement.","username":"kostas","ts":"2018-07-26T13:34:58.371Z"}
{"msg":"I tend to personally agree with that","username":"sergefdrv","ts":"2018-07-26T13:35:11.424Z"}
{"msg":"I edited TEE to SGX.","username":"kostas","ts":"2018-07-26T13:35:23.354Z"}
{"msg":"why?","username":"sergefdrv","ts":"2018-07-26T13:35:27.297Z"}
{"msg":"Because: https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=8i8TYa7GzmB3LxePo","username":"kostas","ts":"2018-07-26T13:35:48.018Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=8i8TYa7GzmB3LxePo","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=8i8TYa7GzmB3LxePo","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Similar additional trust assumptions apply to any TEE, but I'd rather make a concrete statement here.","username":"kostas","ts":"2018-07-26T13:36:18.137Z"}
{"msg":"I mean, why we should speak about SGX rather than more generic term?","username":"sergefdrv","ts":"2018-07-26T13:36:22.037Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=YmkqgCxs9LcFd8wyT","username":"kostas","ts":"2018-07-26T13:36:31.657Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=YmkqgCxs9LcFd8wyT","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=YmkqgCxs9LcFd8wyT","remote":true,"fileId":null,"fileName":null}]}
{"msg":"okay, I see","username":"sergefdrv","ts":"2018-07-26T13:36:32.133Z"}
{"msg":"but at the same time Protocol A requires less computational resources and requires less consensus rounds","username":"sergefdrv","ts":"2018-07-26T13:37:30.917Z"}
{"msg":"sound's like a trade-off, doesn't it?","username":"sergefdrv","ts":"2018-07-26T13:37:56.402Z"}
{"msg":"and depending on a concrete use-case it might be reasonable to choose one or another option","username":"sergefdrv","ts":"2018-07-26T13:38:36.503Z"}
{"msg":"We're exchanging banal statements now :wink: ","username":"kostas","ts":"2018-07-26T13:39:28.174Z"}
{"msg":"but if we forget about ups and downs of different approaches for a moment, I'd like to point to https://hyperledger-fabric.readthedocs.io/en/latest/whatis.html#pluggable-consensus","username":"sergefdrv","ts":"2018-07-26T13:40:11.693Z"}
{"msg":"> multiple ordering services supporting different applications or application requirements","username":"sergefdrv","ts":"2018-07-26T13:40:34.687Z"}
{"msg":"that's all about options and trade-offs, I believe :slight_smile: ","username":"sergefdrv","ts":"2018-07-26T13:40:59.033Z"}
{"msg":"I'm just saying we're stating obvious things now.","username":"kostas","ts":"2018-07-26T13:41:53.803Z"}
{"msg":"Yes, there are trade-offs. I never argue otherwise. You'll never find any semi-reasonable person arguing otherwise.","username":"kostas","ts":"2018-07-26T13:42:38.948Z"}
{"msg":"Yes, there are trade-offs. I never argued otherwise. You'll never find any semi-reasonable person arguing otherwise.","username":"kostas","ts":"2018-07-26T13:42:38.948Z"}
{"msg":"that's why I'm wondering why it wouldn't make sense to try MinBFT as a Fabric ordering service","username":"sergefdrv","ts":"2018-07-26T13:43:30.508Z"}
{"msg":"By all means, go for it. We'd love to see this as an option.","username":"kostas","ts":"2018-07-26T13:44:12.099Z"}
{"msg":":slight_smile: ","username":"sergefdrv","ts":"2018-07-26T13:46:16.238Z"}
{"msg":"We put it like:\n> We hope that by evaluating this consensus component under the existing blockchain frameworks, the community will benefit from availability to leverage it in different practical use cases.","username":"sergefdrv","ts":"2018-07-26T13:46:43.967Z"}
{"msg":"Anybody using the new `#closes` convention in their CRs?","username":"kostas","ts":"2018-07-27T14:22:38.417Z"}
{"msg":"Anybody using the new `#done` convention in their CRs?","username":"kostas","ts":"2018-07-27T14:22:38.417Z"}
{"msg":"If so, please point me to one?","username":"kostas","ts":"2018-07-27T14:22:46.610Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-scrum?msg=CuzWKSF7KepZfZiQK","username":"kostas","ts":"2018-07-28T02:22:45.691Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-scrum?msg=CuzWKSF7KepZfZiQK","url":"https://chat.hyperledger.org/channel/fabric-scrum?msg=CuzWKSF7KepZfZiQK","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@jyellick: Just a heads up that I'll be slicing/dicing/restitching that config-related Raft work we had put out a couple of months ago into a different sequence early next week. Will message you to add your sign-off in anything that contains your code.","username":"kostas","ts":"2018-07-28T12:44:30.783Z"}
{"msg":"@yacovm @guoger @C0rWin: Any chance we could have that sync-up call early next week? (Tuesday 8am EDT?)","username":"kostas","ts":"2018-07-28T12:45:35.557Z"}
{"msg":"Tuesday is a very good day for me","username":"yacovm","ts":"2018-07-28T12:46:07.814Z"}
{"msg":"I'd like to get started and help out with whatever stack you are working on. I have the config-related CRs above to work with, and some slides to prepare for the design review, so I should be good for a couple of days.","username":"kostas","ts":"2018-07-28T12:48:05.878Z"}
{"msg":"Raft playback scheduled for this coming Thursday: https://wiki.hyperledger.org/projects/fabric/playbacks","username":"kostas","ts":"2018-07-28T13:00:49.908Z"}
{"msg":"@kostas @yacovm Tuesday works for me as well ","username":"C0rWin","ts":"2018-07-29T09:39:04.844Z"}
{"msg":"I pushed a CR here: https://gerrit.hyperledger.org/r/#/c/24919/\nhowever, it *only* meant to show interfaces I came up with, so we could have a discussion on top of it. I'll try to adapt to the CR from @yacovm , and coordinate with @C0rWin . ","username":"guoger","ts":"2018-07-29T17:07:29.964Z"}
{"msg":"yeah, we can discuss tomorrow at length - but, basically - the comm layer is interfaced via 3 methods:\n`Configure(channel string, members []*RemoteNode)` - configures the comm layer per channel. `RemoteNode` is `ID`, `Endpoint`, and server/client TLS certificates in DER encoding(NOT PEM!!!!)\n`Remote(channel string, id uint64) (RemoteStub, error)` - returns a `RemoteStub` which is an abstraction over the `Step`/`Propose` stream/rpc.\n`Handle(methodName, channel string, sender uint64, msg proto.Message) (proto.Message, error)` - whenever the comm layer receives a message, it calls this method and passes the channel, and the sender it identified using the TLS pinning, and of course - the message. ","username":"yacovm","ts":"2018-07-29T17:19:34.532Z"}
{"msg":"yeah, we can discuss tomorrow at length - but, basically - the comm layer is interfaced via 3 methods:\n`Configure(channel string, members []*RemoteNode)` - configures the comm layer per channel. `RemoteNode` is `ID`, `Endpoint`, and server/client TLS certificates in DER encoding(NOT PEM!!!!)\n`Remote(channel string, id uint64) (RemoteStub, error)` - returns a `RemoteStub` which is an abstraction over the `Step`/ `Propose` stream/rpc.\n`Handle(methodName, channel string, sender uint64, msg proto.Message) (proto.Message, error)` - whenever the comm layer receives a message, it calls this method and passes the channel, and the sender it identified using the TLS pinning, and of course - the message. ","username":"yacovm","ts":"2018-07-29T17:19:34.532Z"}
{"msg":"yeah, we can discuss tomorrow or Tuesday at length - but, basically - the comm layer is interfaced via 3 methods:\n`Configure(channel string, members []*RemoteNode)` - configures the comm layer per channel. `RemoteNode` is `ID`, `Endpoint`, and server/client TLS certificates in DER encoding(NOT PEM!!!!)\n`Remote(channel string, id uint64) (RemoteStub, error)` - returns a `RemoteStub` which is an abstraction over the `Step`/ `Propose` stream/rpc.\n`Handle(methodName, channel string, sender uint64, msg proto.Message) (proto.Message, error)` - whenever the comm layer receives a message, it calls this method and passes the channel, and the sender it identified using the TLS pinning, and of course - the message. ","username":"yacovm","ts":"2018-07-29T17:19:34.532Z"}
{"msg":"yeah, we can discuss tomorrow or Tuesday at length - but, basically - the comm layer is interfaced via 3 methods:\n`Configure(channel string, members []*RemoteNode)` - configures the comm layer per channel. `RemoteNode` is `ID`, `Endpoint`, and server/client TLS certificates in DER encoding(NOT PEM!!!!)\n`Remote(channel string, id uint64) (RemoteStub, error)` - returns a `RemoteStub` which is an abstraction over the `Step`/ `Propose` stream/rpc. Every operation with the `RemoteStub` would be sent over a connection to the appropriate remote node\n`Handle(methodName, channel string, sender uint64, msg proto.Message) (proto.Message, error)` - whenever the comm layer receives a message, it calls this method and passes the channel, and the sender it identified using the TLS pinning, and of course - the message. ","username":"yacovm","ts":"2018-07-29T17:19:34.532Z"}
{"msg":"yeah, we can discuss tomorrow or Tuesday at length - but, basically - the comm layer is interfaced via 3 methods:\n`Configure(channel string, members []*RemoteNode)` - configures the comm layer per channel. `RemoteNode` is `ID`, `Endpoint`, and server/client TLS certificates in DER encoding(NOT PEM!!!!)\n`Remote(channel string, id uint64) (RemoteStub, error)` - returns a `RemoteStub` which is an abstraction over the `Step`/ `Propose` stream/rpc. Every operation with the `RemoteStub` would be sent over a shared connection to that node.\n`Handle(methodName, channel string, sender uint64, msg proto.Message) (proto.Message, error)` - whenever the comm layer receives a message, it calls this method and passes the channel, and the sender it identified using the TLS pinning, and of course - the message. ","username":"yacovm","ts":"2018-07-29T17:19:34.532Z"}
{"msg":"yeah, we can discuss tomorrow or Tuesday at length - but, basically - the comm layer is interfaced via 3 methods:\n`Configure(channel string, members []*RemoteNode)` - configures the comm layer per channel. `RemoteNode` is `ID`, `Endpoint`, and server/client TLS certificates in DER encoding(NOT PEM!!!!)\n`Remote(channel string, id uint64) (RemoteStub, error)` - returns a `RemoteStub` which is an abstraction over the `Step`/ `Propose` stream/rpc. \nEvery operation with the `RemoteStub` would be sent over a shared connection to the remote node that has the server TLS certificate that was configured for the channel.\n`Handle(methodName, channel string, sender uint64, msg proto.Message) (proto.Message, error)` - whenever the comm layer receives a message, it calls this method and passes the channel, and the sender it identified using the TLS pinning, and of course - the message. ","username":"yacovm","ts":"2018-07-29T17:19:34.532Z"}
{"msg":"yeah, we can discuss tomorrow or Tuesday at length - but, basically - the comm layer is interfaced via 3 methods:\n`Configure(channel string, members []*RemoteNode)` - configures the comm layer per channel. `RemoteNode` is `ID`, `Endpoint`, and server/client TLS certificates in DER encoding(NOT PEM!!!!)\n`Remote(channel string, id uint64) (RemoteStub, error)` - returns a `RemoteStub` which is an abstraction over the `Step`/ `Propose` stream/rpc. \nEvery operation with the `RemoteStub` would be sent over a shared connection to the remote node that has the server TLS certificate that was configured for the channel.\n`Handle(methodName, channel string, sender uint64, msg proto.Message) (proto.Message, error)` - whenever the comm layer receives a message, it calls this method and passes the channel, and the sender it identified using the TLS pinning, and of course - the message.  The implementer of the `Handle` will return a message as a response, and this message / error would be returned to the client","username":"yacovm","ts":"2018-07-29T17:19:34.532Z"}
{"msg":"I am at the stage of writing UTs for the comm layer, and already have a basic test that passes with 2 nodes sending each other after `Configure()` and the `Handle` being dispatched correctly","username":"yacovm","ts":"2018-07-29T17:20:57.940Z"}
{"msg":"I can add a `Shutdown()` method too","username":"yacovm","ts":"2018-07-29T17:23:35.093Z"}
{"msg":"@yacovm I'm trying to rebase my patch on top of yours. Need your advice on how to mock interfaces for testing fsm.\n- should we define interfaces for `RPC`, so that `Step`, `SendPropose`, `ReceiveProposeResponse` could be mocked?\n- on server side, not sure I want to mock at stream level. any better ideas?","username":"guoger","ts":"2018-07-30T06:40:17.457Z"}
{"msg":"That was the idea... but the RPC should be defined in your package @guoger ","username":"yacovm","ts":"2018-07-30T07:17:08.441Z"}
{"msg":"That was the idea... but the interface should be defined in your package @guoger ","username":"yacovm","ts":"2018-07-30T07:17:08.441Z"}
{"msg":"and you need to implement:\n```\ntype Handler interface {\n\tHandle(methodName, channel string, sender uint64, msg proto.Message) (proto.Message, error)\n}\n```","username":"yacovm","ts":"2018-07-30T07:17:55.794Z"}
{"msg":"> - on server side, not sure I want to mock at stream level. any better ideas? \nYou don't need to mock a stream... just to implement the above method. The communication infrastructure does the stream handling on its own","username":"yacovm","ts":"2018-07-30T07:18:36.233Z"}
{"msg":"by mocking stream, I meant linking input/output of nodes without actually starting grpc server.","username":"guoger","ts":"2018-07-30T07:36:50.980Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=pCrrAYipp548Gbh7j) @yacovm not sure why these interfaces should be in my pkg? shouldn't it be part of communication?","username":"guoger","ts":"2018-07-30T07:38:27.488Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=pCrrAYipp548Gbh7j","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=pCrrAYipp548Gbh7j","remote":true,"fileId":null,"fileName":null}]}
{"msg":"> not sure why these interfaces should be in my pkg? shouldn't it be part of communication? \nno... because you need it :) ","username":"yacovm","ts":"2018-07-30T07:39:10.504Z"}
{"msg":"Has joined the channel.","username":"sujanpgowda","ts":"2018-07-30T14:45:00.109Z","type":"uj"}
{"msg":"Just a reminder that we'll do a Zoom session tomorrow at 8am EDT to sync up: @yacovm @C0rWin @guoger /cc @muralisr @adarshsaraf123 @huikang @jeroiraz","username":"kostas","ts":"2018-07-30T15:01:12.168Z"}
{"msg":"I'll post the link here a few minutes before the session is set to start.","username":"kostas","ts":"2018-07-30T15:01:31.944Z"}
{"msg":"Wait, how did Murali get into the list :O ","username":"yacovm","ts":"2018-07-30T15:02:13.038Z"}
{"msg":"Murali reached out and asked to be in the loop and of course he's more than welcome to","username":"kostas","ts":"2018-07-30T15:03:23.503Z"}
{"msg":" @muralisr I see your taste in fabric nodes has matured","username":"yacovm","ts":"2018-07-30T15:12:46.667Z"}
{"msg":"I always said the orderer looks sleeker than the peer","username":"yacovm","ts":"2018-07-30T15:13:10.422Z"}
{"msg":"but you never listened","username":"yacovm","ts":"2018-07-30T15:13:19.676Z"}
{"msg":"Zoom call in 25 minutes from now.","username":"kostas","ts":"2018-07-31T11:33:54.011Z"}
{"msg":"Zoom call in ~25~ 55 (see below) minutes from now.","username":"kostas","ts":"2018-07-31T11:33:54.011Z"}
{"msg":"Artem has a conflict, so we'll have to push this back by 30 minutes. Sorry about the late notice. Updated the calendar invitation I sent your way.","username":"kostas","ts":"2018-07-31T11:43:41.316Z"}
{"msg":"https://zoom.us/j/7432937602","username":"kostas","ts":"2018-07-31T12:28:17.985Z"}
{"msg":"same linke?","username":"guoger","ts":"2018-07-31T13:09:07.890Z"}
{"msg":"Yes.","username":"kostas","ts":"2018-07-31T13:09:13.174Z"}
{"msg":"Following-up on today's call --","username":"kostas","ts":"2018-07-31T18:10:29.976Z"}
{"msg":"We touched on the `rpc Step(raftpb.Message) returns (StepResponse)` definition being a not-so-good idea. Compilation when exposing `raftpb.Message` is broken (see: https://jira.hyperledger.org/browse/FAB-9864), that message alone is not enough as we need to piggyback the channel information (though we _could_ pass this in as grpc.Metadata no? this is also noted in the document), and it also seems like we can kill two birds with one stone here. `Step` and `Submit` are two methods that we will be using with any leader-based protocol, so we can make this implementation-agnostic.","username":"kostas","ts":"2018-07-31T18:16:23.839Z"}
{"msg":"This is covered in: https://jira.hyperledger.org/browse/FAB-11412 and I'm on board with it.","username":"kostas","ts":"2018-07-31T18:19:50.614Z"}
{"msg":"I'm still slightly lost on where https://jira.hyperledger.org/browse/FAB-11159 and https://jira.hyperledger.org/browse/FAB-11160 stand. @yacovm, you mentioned that their scope is subsumed by the work done in FAB-1161 I think, but if you can expand on it in JIRA that'd be great.","username":"kostas","ts":"2018-07-31T18:22:40.814Z"}
{"msg":"I'm still slightly lost on where https://jira.hyperledger.org/browse/FAB-11159 and https://jira.hyperledger.org/browse/FAB-11160 stand. @yacovm, you mentioned that their scope is subsumed by the work done in FAB-11161 I think, but if you can expand on it in JIRA that'd be great.","username":"kostas","ts":"2018-07-31T18:22:40.814Z"}
{"msg":"i will in a bit","username":"yacovm","ts":"2018-07-31T18:23:10.762Z"}
{"msg":"No rush.","username":"kostas","ts":"2018-07-31T18:23:20.252Z"}
{"msg":"@guoger: During the call today you talked about an integration test around my config-related work. Can you expand on it? What is the scenario you have in mind?","username":"kostas","ts":"2018-07-31T18:25:48.469Z"}
{"msg":"I've updated the document to reflect the changes above.","username":"kostas","ts":"2018-07-31T20:12:34.973Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=TiqoK2x2gGqZGCBu8) @kostas I meant integration test would depend on config-related work. If we merge our works together by next week, we need as least one integration test to:\n- start an OSN cluster using raft consensus\n- send normal tx and expect blocks to be produced","username":"guoger","ts":"2018-08-01T06:29:05.724Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=TiqoK2x2gGqZGCBu8","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=TiqoK2x2gGqZGCBu8","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I see @yacovm is using mockery, do we have a decision on this? i'm currently using counterfeiter, but that could be changed","username":"guoger","ts":"2018-08-01T06:30:05.058Z"}
{"msg":"also, why does `comm` dir contains pkg `consenster`?","username":"guoger","ts":"2018-08-01T06:31:08.021Z"}
{"msg":"Why do we need to be uniform?","username":"yacovm","ts":"2018-08-01T06:39:03.803Z"}
{"msg":"I use whatever i want, you use whatever you want","username":"yacovm","ts":"2018-08-01T06:39:16.752Z"}
{"msg":"This isn't an army 😉","username":"yacovm","ts":"2018-08-01T06:39:25.053Z"}
{"msg":"@guoger because if it had been comm it would stutter","username":"yacovm","ts":"2018-08-01T06:40:23.183Z"}
{"msg":"consenter.Communicator","username":"yacovm","ts":"2018-08-01T06:40:44.534Z"}
{"msg":"I think after i'm done we should move that to orderer common","username":"yacovm","ts":"2018-08-01T06:41:18.412Z"}
{"msg":"And not under raft","username":"yacovm","ts":"2018-08-01T06:41:27.307Z"}
{"msg":"to address comment https://gerrit.hyperledger.org/r/#/c/24919/1/protos/common/common.proto@181\n> I do not see reason why we should add type into metadata field, you anyway have to unmarshal block to be able to access it, which is heaviest part. You can conclude block type from the header, no need to introduce such redundancy especially where impact or improvement is dubious.\nhow to conclude block type from header?","username":"guoger","ts":"2018-08-01T06:45:25.041Z"}
{"msg":"to address comment https://gerrit.hyperledger.org/r/#/c/24919/1/protos/common/common.proto@181\n> I do not see reason why we should add type into metadata field, you anyway have to unmarshal block to be able to access it, which is heaviest part. You can conclude block type from the header, no need to introduce such redundancy especially where impact or improvement is dubious.\nhow to conclude block type from header? @C0rWin ","username":"guoger","ts":"2018-08-01T06:45:25.041Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=cce29c39-b31f-488e-a03b-3e5712106781) @yacovm agreed. Also, if we are to make\n```\n    rpc Propose(stream ProposeRequest) returns (stream ProposeResponse);\n    rpc Step(StepRequest) returns (StepResponse);\n```\nreusable, it shouldn't be in `raft.proto` (probably communication.proto?)\nalso, let's change `common.Envelope content` to bytes, so consumer could load it with whatever is needed.\nIn raft case, we need config_seq here","username":"guoger","ts":"2018-08-01T06:47:49.444Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=cce29c39-b31f-488e-a03b-3e5712106781","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=cce29c39-b31f-488e-a03b-3e5712106781","remote":true,"fileId":null,"fileName":null}]}
{"msg":">I think after i'm done we should move that to orderer common\n@yacovm agreed.\nAlso, if we are to make\n```\n    rpc Propose(stream ProposeRequest) returns (stream ProposeResponse);\n    rpc Step(StepRequest) returns (StepResponse);\n```\nreusable, it shouldn't be in `raft.proto` (probably communication.proto?)\nalso, let's change `common.Envelope content` to bytes, so consumer could load it with whatever is needed.\nIn raft case, we need config_seq here","username":"guoger","ts":"2018-08-01T06:47:49.444Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=cce29c39-b31f-488e-a03b-3e5712106781","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=cce29c39-b31f-488e-a03b-3e5712106781","remote":true,"fileId":null,"fileName":null}]}
{"msg":">I think after i'm done we should move that to orderer common\n@yacovm agreed.\nAlso, if we are to make\n```\n    rpc Propose(stream ProposeRequest) returns (stream ProposeResponse);\n    rpc Step(StepRequest) returns (StepResponse);\n```\nreusable, it shouldn't be in `raft.proto` (probably communication.proto?)\nalso, let's change `common.Envelope content` in both `ProposeRequest` and `StepRequest` to bytes, so consumer could load it with whatever is needed.\nIn raft case, we need config_seq here","username":"guoger","ts":"2018-08-01T06:47:49.444Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=cce29c39-b31f-488e-a03b-3e5712106781","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=cce29c39-b31f-488e-a03b-3e5712106781","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@guoger we merged the new protobuf schema","username":"yacovm","ts":"2018-08-01T07:44:13.885Z"}
{"msg":"please use these messages :) ","username":"yacovm","ts":"2018-08-01T07:44:26.926Z"}
{"msg":"https://github.com/hyperledger/fabric/blob/master/protos/orderer/cluster.proto","username":"yacovm","ts":"2018-08-01T07:44:37.960Z"}
{"msg":"ah, I missed that, great","username":"guoger","ts":"2018-08-01T07:45:45.368Z"}
{"msg":"Has joined the channel.","username":"seokju.hong","ts":"2018-08-01T12:52:44.175Z","type":"uj"}
{"msg":"Let's tag everything with `raft` in JIRA to make sure we're not missing anything.","username":"kostas","ts":"2018-08-01T14:18:38.294Z"}
{"msg":"Some of the text we have out there could be a bit more detailed, so I'll reach out to you with some questions and then expand it.","username":"kostas","ts":"2018-08-01T14:19:50.920Z"}
{"msg":"imagine following scenario:\n- nodeA is the leader, with follower nodeB, nodeC\n- nodeA receives transactions, cache them in the blockcutter\n- nodeA is isolated in the network, lost leadership\n- nodeB is elected, start receiving transactions, cache them into its own blockcutter\n- nodeA rejoins the network, cut the block, and `propose` it\nI suppose, we should discard this block in this case?","username":"guoger","ts":"2018-08-01T14:58:31.653Z"}
{"msg":"imagine following scenario:\n- nodeA is the leader, with follower nodeB, nodeC\n- nodeA receives transactions, cache them in the blockcutter\n- nodeA is isolated in the network, lost leadership\n- nodeB is elected, start receiving transactions, cache them into its own blockcutter\n- nodeA *rejoins* the network, cuts the block, and `propose` it\nI suppose, we should discard this block in this case?","username":"guoger","ts":"2018-08-01T14:58:31.653Z"}
{"msg":"i don't think this is your problem","username":"yacovm","ts":"2018-08-01T15:07:40.983Z"}
{"msg":"raft should take care of it no?","username":"yacovm","ts":"2018-08-01T15:07:46.061Z"}
{"msg":"hello :) the message of nodeA maybe discarded as i remember. if a message with *less term number* arrives, it is ignored","username":"seokju.hong","ts":"2018-08-01T15:09:58.145Z"}
{"msg":"And here's quick question: how do you guys test/debug your own orderer?","username":"seokju.hong","ts":"2018-08-01T15:10:25.648Z"}
{"msg":"we give it to uses, of course","username":"yacovm","ts":"2018-08-01T15:10:33.436Z"}
{"msg":"we give it to users, of course","username":"yacovm","ts":"2018-08-01T15:10:33.436Z"}
{"msg":"@guoger: That's a good question. @seokju 1 got it right - the message will be ignored by the state machine.","username":"kostas","ts":"2018-08-01T15:11:47.391Z"}
{"msg":"> And here's quick question: how do you guys test/debug your own orderer?\nMostly unit tests, and extended unit tests that are more like component-level integration tests.","username":"kostas","ts":"2018-08-01T15:14:08.357Z"}
{"msg":"I want us to improve on this with the Raft work. I want to bring integration tests early on in the process.","username":"kostas","ts":"2018-08-01T15:15:25.701Z"}
{"msg":"Where could I find those unit tests?","username":"seokju.hong","ts":"2018-08-01T15:16:19.086Z"}
{"msg":"once we have code merged we should have UTs","username":"yacovm","ts":"2018-08-01T15:16:54.099Z"}
{"msg":"stay tuned","username":"yacovm","ts":"2018-08-01T15:16:57.128Z"}
{"msg":"Hold on - if you're talking solo or kafka, these are checked in already.","username":"kostas","ts":"2018-08-01T15:17:19.243Z"}
{"msg":"Are you talking raft?","username":"kostas","ts":"2018-08-01T15:17:25.136Z"}
{"msg":"Yes, the raft one.","username":"seokju.hong","ts":"2018-08-01T15:17:39.551Z"}
{"msg":"What Yacov said then.","username":"kostas","ts":"2018-08-01T15:17:56.952Z"}
{"msg":"Are you interested in contributing?","username":"kostas","ts":"2018-08-01T15:18:03.524Z"}
{"msg":"Of course :) but I cannot find where to start.","username":"seokju.hong","ts":"2018-08-01T15:18:44.192Z"}
{"msg":"@yacovm @C0rWin @guoger: I'll gladly draw it out if we don't have it already, but we need a shitty 5-minute diagram that connects the blocks that we're working on. We need to post this in JIRA.","username":"kostas","ts":"2018-08-01T15:18:55.639Z"}
{"msg":"And we also need to document what the contract/interface between each of these blocks is.","username":"kostas","ts":"2018-08-01T15:19:26.314Z"}
{"msg":"@seokju 1: I hear you. Give us until the end of the week to rectify this?","username":"kostas","ts":"2018-08-01T15:20:46.101Z"}
{"msg":"@JaeseokLee : I hear you. Give us until the end of the week to rectify this?","username":"kostas","ts":"2018-08-01T15:20:46.101Z"}
{"msg":"@seokju.hong: I hear you. Give us until the end of the week to rectify this?","username":"kostas","ts":"2018-08-01T15:20:46.101Z"}
{"msg":"OK, thanks!","username":"seokju.hong","ts":"2018-08-01T15:21:54.681Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=5qEgjKJg5E9rEYQaH) @kostas i guess my follow-up question would be, how do we notify client? timeout?","username":"guoger","ts":"2018-08-01T16:00:24.479Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=5qEgjKJg5E9rEYQaH","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=5qEgjKJg5E9rEYQaH","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@guoger: What notification do you have in mind? Remember that the client figures out whether their transaction got accepted or not by inspecting the ledger. (See this discussion we had in the Google Doc regarding the submission guarantees: https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAAB62Ch5M)","username":"kostas","ts":"2018-08-01T17:15:07.531Z"}
{"msg":"If I'm misunderstanding something, let me know.","username":"kostas","ts":"2018-08-01T17:15:27.046Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=7Nd8xchiWmihxo2c9) @yacovm Yes, raft takes care the proposals from nodeA. However, nodeA may need to notify the client who submits the transactions that the transactions will not be committed or resubmitted.","username":"huikang","ts":"2018-08-01T20:56:58.160Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=7Nd8xchiWmihxo2c9","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=7Nd8xchiWmihxo2c9","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@huikang care to introduce yourself? :) ","username":"yacovm","ts":"2018-08-01T20:57:37.450Z"}
{"msg":"I am working for IBM and based in New York. My previous open source experiences include Open Stack, docker, Open vswitch. I am familiar with the Raft and Paxos algorithm. I am new to Fabric and interested in the Raft-based orderer.","username":"huikang","ts":"2018-08-01T21:01:35.437Z"}
{"msg":"I am looking at Jay's FSM implementation and see how I can contribute.","username":"huikang","ts":"2018-08-01T21:04:39.782Z"}
{"msg":">  Open Stack, docker, Open vswitch.\nso you committed code to openstack, docker, and vswitch?","username":"yacovm","ts":"2018-08-01T21:12:59.028Z"}
{"msg":"@huikang ","username":"yacovm","ts":"2018-08-01T21:13:03.291Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=PZCjPNCgMSmvhSb4x) @yacovm not too much.","username":"huikang","ts":"2018-08-01T21:13:46.826Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=PZCjPNCgMSmvhSb4x","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=PZCjPNCgMSmvhSb4x","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=PZCjPNCgMSmvhSb4x) @yacovm Are you IBMer? I saw a lot of fabric contributors are from IBM","username":"huikang","ts":"2018-08-01T21:15:04.449Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=PZCjPNCgMSmvhSb4x","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=PZCjPNCgMSmvhSb4x","remote":true,"fileId":null,"fileName":null}]}
{"msg":"openstack is in python isn't it? Are you familiar with Golang?","username":"yacovm","ts":"2018-08-01T21:15:20.639Z"}
{"msg":"the fabric core is in Golang","username":"yacovm","ts":"2018-08-01T21:15:26.334Z"}
{"msg":"yep, I have been using Go for a while for some internal projects","username":"huikang","ts":"2018-08-01T21:15:43.938Z"}
{"msg":"@guoger @C0rWin @kostas I'm thinking instead of the RPC API that is now maybe it will be simpler to just have the comm layer expose directly: \n`=!=ijiCQRpuiZ4AsW9c4=!=`","username":"yacovm","ts":"2018-08-02T11:21:13.477Z"}
{"msg":"@guoger @C0rWin @kostas I'm thinking instead of the RPC API that is now maybe it will be simpler to just have the comm layer expose directly: ","username":"yacovm","ts":"2018-08-02T11:21:13.477Z"}
{"msg":"```\ntype Communicator interface {\n\t// Remote returns a RemoteStub for the given RemoteNode ID in the context\n\t// of the given channel, or error if connection cannot be established, or\n\t// the channel wasn't configured\n\tRemote(channel string, id uint64) (orderer.ClusterClient, error)\n\t// Configure configures the communication to connect to all\n\t// given members, and disconnect from any members not among the given\n\t// members.\n\tConfigure(channel string, members []*RemoteNode)\n\t// Shutdown shuts down the communicator\n\tShutdown()\n}\n```","username":"yacovm","ts":"2018-08-02T11:21:40.221Z"}
{"msg":"```\ntype Communicator interface {\n\t// Remote returns a RemoteStub for the given RemoteNode ID in the context\n\t// of the given channel, or error if connection cannot be established, or\n\t// the channel wasn't configured\n\tRemote(channel string, id uint64) (orderer.ClusterClient, error)\n}\n```","username":"yacovm","ts":"2018-08-02T11:21:40.221Z"}
{"msg":"```\ntype Communicator interface {\n\t// Remote returns a RemoteStub for the given RemoteNode ID in the context\n\t// of the given channel, or error if connection cannot be established, or\n\t// the channel wasn't configured\n\tRemote(channel string, id uint64) (ClusterClient, error)\n}\n```","username":"yacovm","ts":"2018-08-02T11:21:40.221Z"}
{"msg":"when `ClusterClient` is\n````\n\t// Submit submits transactions to a cluster member\n\tSubmit(ctx context.Context, opts ...grpc.CallOption) (Cluster_SubmitClient, error)\n\t// Step passes an implementation-specific message to another cluster member.\n\tStep(ctx context.Context, in *StepRequest, opts ...grpc.CallOption) (*StepResponse, error)\n```\n\nwithout the context and grpc options","username":"yacovm","ts":"2018-08-02T11:22:41.435Z"}
{"msg":"when `ClusterClient` is\n````\n\t// Submit submits transactions to a cluster member\n\tSubmit() (Cluster_SubmitClient, error)\n\t// Step passes an implementation-specific message to another cluster member.\n\tStep(req *StepRequest) (*StepResponse, error)\n```\n\nwithout the context and grpc options","username":"yacovm","ts":"2018-08-02T11:22:41.435Z"}
{"msg":"when `ClusterClient` is\n````\n\t// Submit submits transactions to a cluster member\n\tSubmit() (Cluster_SubmitClient, error)\n\t// Step passes an implementation-specific message to another cluster member.\n\tStep(req *StepRequest) (*StepResponse, error)\n```","username":"yacovm","ts":"2018-08-02T11:22:41.435Z"}
{"msg":"Has joined the channel.","username":"joe-alewine","ts":"2018-08-02T14:22:57.672Z","type":"uj"}
{"msg":"Has joined the channel.","username":"mhomaid","ts":"2018-08-02T14:24:52.209Z","type":"uj"}
{"msg":"Has joined the channel.","username":"latitiah","ts":"2018-08-02T14:50:32.593Z","type":"uj"}
{"msg":"Is there a message you wanted to post here? (I see it ends in \":\")","username":"kostas","ts":"2018-08-02T14:54:38.864Z"}
{"msg":"@yacovm: Is there a follow-up to the message above?","username":"kostas","ts":"2018-08-02T14:54:38.864Z"}
{"msg":"Has joined the channel.","username":"zmaro","ts":"2018-08-03T15:22:13.154Z","type":"uj"}
{"msg":"submitted 3 CRs for review starting from https://gerrit.hyperledger.org/r/#/c/24919/","username":"guoger","ts":"2018-08-05T15:57:11.863Z"}
{"msg":"i'll keep updating it to address comments received previously","username":"guoger","ts":"2018-08-05T15:57:46.836Z"}
{"msg":"@C0rWin pls consult `RaftCluster` interface for a set of methods that you could use for your work","username":"guoger","ts":"2018-08-05T15:59:06.276Z"}
{"msg":"@C0rWin pls consult `RaftCluster` interface for a set of methods that you could use for your work (https://gerrit.hyperledger.org/r/#/c/24919/2/orderer/consensus/raft/cluster.go)","username":"guoger","ts":"2018-08-05T15:59:06.276Z"}
{"msg":"@guoger why not squash all the 3 together? :thinking_face: ","username":"yacovm","ts":"2018-08-05T16:17:41.562Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=dfqdmTvPKBRQnFbNL) @guoger thanks","username":"C0rWin","ts":"2018-08-05T19:50:41.551Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=dfqdmTvPKBRQnFbNL","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=dfqdmTvPKBRQnFbNL","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I was told it was easier to review if split. But I certainly could squash @yacovm [ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=oMSZYWRNWvWgyC2kH)","username":"guoger","ts":"2018-08-06T00:30:30.128Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=oMSZYWRNWvWgyC2kH","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=oMSZYWRNWvWgyC2kH","remote":true,"fileId":null,"fileName":null}]}
{"msg":"ok, this may be a very stupid question, but pls remind me, why is `Submit` rpc a bidi stream?","username":"guoger","ts":"2018-08-06T07:40:17.731Z"}
{"msg":"it's not a stupid question","username":"yacovm","ts":"2018-08-06T07:45:56.914Z"}
{"msg":"I think that @kostas wanted it to look like the client's stream","username":"yacovm","ts":"2018-08-06T07:46:19.646Z"}
{"msg":"hmmm... but why?\nalso, for both `submit` and `step`, i'm not sure we actually care about the process result on the server. In another word, _from sender point of view, as long as the message is successfully delivered by comm, I don't need to know if server has processed it successfully, because I couldn't do anything about it anyway_","username":"guoger","ts":"2018-08-06T08:04:29.763Z"}
{"msg":"so, there is an API for the `raft.Node` that says that a specific node is un-healthy, no?","username":"yacovm","ts":"2018-08-06T08:06:21.273Z"}
{"msg":"I'm not sure if we should use it","username":"yacovm","ts":"2018-08-06T08:06:27.781Z"}
{"msg":"(thinking aloud here, again)","username":"yacovm","ts":"2018-08-06T08:06:37.039Z"}
{"msg":"and i understand what you're saying","username":"yacovm","ts":"2018-08-06T08:06:42.671Z"}
{"msg":"the code-review comments were more to stirr a discussion and point others to interesting points than criticism, @guoger ","username":"yacovm","ts":"2018-08-06T08:08:16.938Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KdPASsshyMe8xaHdY) @yacovm which API is it?","username":"guoger","ts":"2018-08-06T08:15:27.229Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KdPASsshyMe8xaHdY","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KdPASsshyMe8xaHdY","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=jknnd9Dzdobbvr7qY) @yacovm happily accepting both criticism and discussion :)","username":"guoger","ts":"2018-08-06T08:16:08.125Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=jknnd9Dzdobbvr7qY","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=jknnd9Dzdobbvr7qY","remote":true,"fileId":null,"fileName":null}]}
{"msg":"`ReportUnreachable(id uint64)`","username":"yacovm","ts":"2018-08-06T08:24:04.682Z"}
{"msg":"oh, I thought meant an API to check if `raft.Node` is in erroneous state. You are certainly right, we could/should call this if _unreachable_ is reported by comm layer. but I'm not sure this should be called when the node received message, but throws error processing it.","username":"guoger","ts":"2018-08-06T08:30:18.469Z"}
{"msg":"oh, I thought you meant an API to check if `raft.Node` is in erroneous state. You are certainly right, we could/should call this if _unreachable_ is reported by comm layer. but I'm not sure this should be called when the node received message, but throws error processing it.","username":"guoger","ts":"2018-08-06T08:30:18.469Z"}
{"msg":"i think that if we call it - we should call it when `Step()` returns an error","username":"yacovm","ts":"2018-08-06T08:35:03.042Z"}
{"msg":"seems that `Step()` error is not sent: https://github.com/coreos/etcd/blob/master/etcdserver/api/rafthttp/peer.go#L177-L182","username":"guoger","ts":"2018-08-06T08:56:26.450Z"}
{"msg":"@guoger but that doesn't prove that we shouldn't call that","username":"yacovm","ts":"2018-08-06T09:26:59.225Z"}
{"msg":"I mean, what is that method for","username":"yacovm","ts":"2018-08-06T09:27:20.390Z"}
{"msg":"also - isn't etcd in gRPC? ","username":"yacovm","ts":"2018-08-06T09:27:39.413Z"}
{"msg":"what is the use of rafthttp in etcd?","username":"yacovm","ts":"2018-08-06T09:27:56.026Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Crp7boHAwAtLcfYYA) @yacovm internal communication is over rafthttp","username":"guoger","ts":"2018-08-06T09:52:55.957Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Crp7boHAwAtLcfYYA","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Crp7boHAwAtLcfYYA","remote":true,"fileId":null,"fileName":null}]}
{"msg":"i see","username":"yacovm","ts":"2018-08-06T09:53:21.325Z"}
{"msg":"well, up to you or @kostas i guess","username":"yacovm","ts":"2018-08-06T09:53:39.173Z"}
{"msg":"now as for submit being a bidi-stream","username":"yacovm","ts":"2018-08-06T09:53:52.471Z"}
{"msg":"i wanted it to be at least half a stream","username":"yacovm","ts":"2018-08-06T09:54:12.199Z"}
{"msg":"or something","username":"yacovm","ts":"2018-08-06T09:54:14.352Z"}
{"msg":"or an RPC ","username":"yacovm","ts":"2018-08-06T09:54:39.709Z"}
{"msg":"I don't mind personally what it will be","username":"yacovm","ts":"2018-08-06T09:55:13.247Z"}
{"msg":"but if it's a bidi-stream then we should make use of it and send back a response no?","username":"yacovm","ts":"2018-08-06T09:55:28.075Z"}
{"msg":"but why _stream_?","username":"guoger","ts":"2018-08-06T09:57:45.782Z"}
{"msg":"I don't have strong reason against it, i'm merely trying to infer the reason behind it, since I couldn't find one in design doc","username":"guoger","ts":"2018-08-06T09:59:18.726Z"}
{"msg":"because the client also has a stream","username":"yacovm","ts":"2018-08-06T10:17:32.500Z"}
{"msg":"so i believe it was intended to mimic this","username":"yacovm","ts":"2018-08-06T10:17:39.084Z"}
{"msg":"though I can't say I understand how that would work in practice","username":"yacovm","ts":"2018-08-06T10:17:55.975Z"}
{"msg":"There is indeed no concrete reason for anything being a stream. ","username":"kostas","ts":"2018-08-06T14:11:20.288Z"}
{"msg":"In the end, I did it mostly to maintain some sort of symmetry with AtomicBroadcast, which breaks of Step anyway.","username":"kostas","ts":"2018-08-06T14:11:48.600Z"}
{"msg":"I did some digging into this when I was writing the doc, and as best as I can tell, the only downside to using a unary RPC is that every time you call a unary RPC you're creating a new HTTP/2 stream, and you run the risk of maxing out the number of concurrent streams a recipient allows.","username":"kostas","ts":"2018-08-06T14:13:08.501Z"}
{"msg":"In our case however:","username":"kostas","ts":"2018-08-06T14:13:14.022Z"}
{"msg":"1. We control the recipient, and","username":"kostas","ts":"2018-08-06T14:13:24.471Z"}
{"msg":"2. In gRPC the default setting for `SETTINGS_MAX_CONCURRENT_STREAMS` is uncapped anyway","username":"kostas","ts":"2018-08-06T14:13:46.899Z"}
{"msg":"but the old one is deleted once the gRPC call ends, right?","username":"yacovm","ts":"2018-08-06T14:13:49.449Z"}
{"msg":"it's not monotonously increasing, is it?","username":"yacovm","ts":"2018-08-06T14:13:58.732Z"}
{"msg":"Correct. I should probably edit the above to reflect that.","username":"kostas","ts":"2018-08-06T14:14:29.474Z"}
{"msg":"This would be an issue for concurrent invocations then.","username":"kostas","ts":"2018-08-06T14:14:42.484Z"}
{"msg":"Going back to the `ReportUnreachable` observation, I've noted this down in page 22.","username":"kostas","ts":"2018-08-06T14:15:29.576Z"}
{"msg":"But my memory is fuzzy right now on the specifics of how it's used. `raftexample` and `swarmkit` should guide us here, and I can look this up if nobody's on it.","username":"kostas","ts":"2018-08-06T14:16:21.881Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=DS9FifiLAsZB5d4nK","username":"kostas","ts":"2018-08-06T14:17:11.326Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=DS9FifiLAsZB5d4nK","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=DS9FifiLAsZB5d4nK","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Expand on this Yacov?","username":"kostas","ts":"2018-08-06T14:17:17.663Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=tmHT4EJQ7fxfuEZMQ) @kostas if i get it correct, `raftexample` simply logs the error of `Step()`","username":"guoger","ts":"2018-08-06T14:17:39.028Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=tmHT4EJQ7fxfuEZMQ","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=tmHT4EJQ7fxfuEZMQ","remote":true,"fileId":null,"fileName":null}]}
{"msg":"not sure about `swarmkit` though, I could look into it","username":"guoger","ts":"2018-08-06T14:17:49.982Z"}
{"msg":"> But my memory is fuzzy right now on the specifics of how it's used. `raftexample` and `swarmkit` should guide us here, and I can look this up if nobody's on it.\nFrom my handwritten notes on the subject:","username":"kostas","ts":"2018-08-06T14:18:12.205Z"}
{"msg":"\"`ReportUnreachable` and `ReportSnapshot` should be wired to the `raft.Node` implementation. They should be invoked when we are sending Raft messages to other nodes in the cluster.\"","username":"kostas","ts":"2018-08-06T14:19:18.278Z"}
{"msg":"Yeah, not very helpful.","username":"kostas","ts":"2018-08-06T14:19:22.001Z"}
{"msg":"Give `swarmkit` a look Jay, and I can give it a second look as well if need be.","username":"kostas","ts":"2018-08-06T14:19:45.069Z"}
{"msg":"@jyellick: Have a look into the discussion over at: https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAACAcdGtU","username":"kostas","ts":"2018-08-06T23:17:12.340Z"}
{"msg":"This touches heavily into the config framework, so I'd like your take on it. I'm hoping there is an easier solution that we're overlooking.","username":"kostas","ts":"2018-08-06T23:17:46.528Z"}
{"msg":"@jyellick ^ \n> Option 2, suggested by Yacov, is more complicated but allows each org to update the TLS certs of their OSN unilaterally. We move the \"Consenter\" message under the \"Org\" config group. An org will be able to define a ConfigValue called \"Consenters\", similar to how they define AnchorPeers today.\n\nThat's possible, right? ","username":"yacovm","ts":"2018-08-06T23:29:24.965Z"}
{"msg":"(just double-checking :) )","username":"yacovm","ts":"2018-08-06T23:29:35.018Z"}
{"msg":"(_If_ this is a question for me, I'm fairly certain the answer is yes, but this is where Jason comes in to confirm.)","username":"kostas","ts":"2018-08-06T23:30:19.179Z"}
{"msg":"(_If_ this is a question for me, I've looked at the code and I'm fairly certain the answer is yes, but this is where Jason comes in to confirm.)","username":"kostas","ts":"2018-08-06T23:30:19.179Z"}
{"msg":"(_If_ this is a question for me, I've looked at the code and I'm ~fairly~ rather certain the answer is yes, but this is where Jason comes in to confirm.)","username":"kostas","ts":"2018-08-06T23:30:19.179Z"}
{"msg":"swarmkit simply logs `Step` error. `ReportUnreachable` is only invoked _iff_ transport layer has problem delivering the message. see https://github.com/docker/swarmkit/blob/master/manager/state/raft/raft.go?utf8=%E2%9C%93#L1454-L1456\ncc @yacovm @kostas ","username":"guoger","ts":"2018-08-07T06:09:56.727Z"}
{"msg":"swarmkit _only_ logs `Step` error. `ReportUnreachable` is only invoked _iff_ transport layer has problem delivering the message. see https://github.com/docker/swarmkit/blob/master/manager/state/raft/raft.go?utf8=%E2%9C%93#L1454-L1456\ncc @yacovm @kostas ","username":"guoger","ts":"2018-08-07T06:09:56.727Z"}
{"msg":"swarmkit _only_ logs `Step` error. `ReportUnreachable` is invoked _iff_ transport layer has problem delivering the message. see https://github.com/docker/swarmkit/blob/master/manager/state/raft/raft.go?utf8=%E2%9C%93#L1454-L1456\ncc @yacovm @kostas ","username":"guoger","ts":"2018-08-07T06:09:56.727Z"}
{"msg":"there _may_ be a type of error returned by `Step`, for which we could call `ReportUnreachable` on the caller. But I think it's safe to simply ignore, rather than putting effort into finding that error type","username":"guoger","ts":"2018-08-07T06:19:50.233Z"}
{"msg":"> That's possible, right?\n@yacovm Certainly, yes.","username":"jyellick","ts":"2018-08-07T13:16:56.516Z"}
{"msg":"thanks, just wanted to make sure","username":"yacovm","ts":"2018-08-07T13:17:38.557Z"}
{"msg":"`make protos` on the latest master regenerates all (or almost all?) of the protobuf messages. Is this expected?","username":"kostas","ts":"2018-08-07T19:00:54.538Z"}
{"msg":"I ran `make tools-docker-clean && make tools-docker` to make sure it's not an artifact of an older version running.","username":"kostas","ts":"2018-08-07T19:01:22.428Z"}
{"msg":"Per Jason, a clean-all is needed to pick up the protobuf upgrade.","username":"kostas","ts":"2018-08-07T19:02:36.976Z"}
{"msg":"(Update: Per Jason, a clean-all is likely needed to pick up the protobuf upgrade.)","username":"kostas","ts":"2018-08-07T19:02:36.976Z"}
{"msg":"```\ntype Handler interface {\n\tHandle(methodName, channel string, sender uint64, msg proto.Message) (proto.Message, error)\n}\n```\nPerhaps we should use here concrete types - the `SubmitRequest` and `StepRequest`, etc. etc. instead, and split `Handle()` to 2 methods - `OnStep` and `OnSubmit` ? @kostas  @guoger  @C0rWin  ? ","username":"yacovm","ts":"2018-08-07T21:27:15.280Z"}
{"msg":"I think that it doesn't make sense to keep the polymorphism of the `proto.Message` given that we have the consensus-alg-agnostic protobuf schema now","username":"yacovm","ts":"2018-08-07T21:28:04.062Z"}
{"msg":"I agree.","username":"kostas","ts":"2018-08-08T00:19:28.122Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=FTLQ9Wvf3iDT3mRHo","username":"kostas","ts":"2018-08-08T00:57:16.900Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=FTLQ9Wvf3iDT3mRHo","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=FTLQ9Wvf3iDT3mRHo","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@C0rWin: This should allow you to build on top hopefully: https://gerrit.hyperledger.org/r/c/25235/","username":"kostas","ts":"2018-08-08T01:03:37.053Z"}
{"msg":"And as we discussed earlier today, the contract is identical to the previous merge-conflicted CRs that were out there.","username":"kostas","ts":"2018-08-08T01:04:00.314Z"}
{"msg":"@yacovm: Your work does not touch on the dispatcher box shown here, correct? https://docs.google.com/presentation/d/1olukZUnriPS3HfWMPkQfKjypa3QV_iTacfI1lH8Mtqg/edit#slide=id.g3dec6414ec_0_0","username":"kostas","ts":"2018-08-08T01:09:04.537Z"}
{"msg":"@yacovm: You are not working on the dispatcher box shown here, correct? https://docs.google.com/presentation/d/1olukZUnriPS3HfWMPkQfKjypa3QV_iTacfI1lH8Mtqg/edit#slide=id.g3dec6414ec_0_0","username":"kostas","ts":"2018-08-08T01:09:04.537Z"}
{"msg":"(Looking to write a sub-task for it.)","username":"kostas","ts":"2018-08-08T01:12:58.110Z"}
{"msg":"are we already using `zap` in our codebase?","username":"guoger","ts":"2018-08-08T02:46:24.513Z"}
{"msg":"Hi, a quick question about submitting block to the raft.fsm. Is it only the leader OSN (assuming all OSN participates in the raft cluster) 's blockcutter can submit block to the fsm?","username":"huikang","ts":"2018-08-08T02:59:51.138Z"}
{"msg":"@huikang yes","username":"guoger","ts":"2018-08-08T03:48:40.943Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3Mrv646veqmHokLvT) @guoger thanks","username":"huikang","ts":"2018-08-08T03:50:53.796Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3Mrv646veqmHokLvT","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3Mrv646veqmHokLvT","remote":true,"fileId":null,"fileName":null}]}
{"msg":"what's the purpose of this method and how's that not achieved by `Commit` in current implementation? https://docs.google.com/presentation/d/1olukZUnriPS3HfWMPkQfKjypa3QV_iTacfI1lH8Mtqg/edit?disco=AAAABzkT3PA cc @kostas ","username":"guoger","ts":"2018-08-08T06:21:53.484Z"}
{"msg":"and I'm having hard time understanding this:\n> The rough rule of thumb should be: export EVERYTHING (the struct *and* its members). Don't think in terms of APIs and contracts that we have with the user.\nstructs should be exported, I agree. However, skim through stdlib, most of stuct members are hidden. I'd really appreciate some more verbose explanations. thx","username":"guoger","ts":"2018-08-08T06:44:31.880Z"}
{"msg":"and I'm having hard time understanding this:\n> The rough rule of thumb should be: export EVERYTHING (the struct *and* its members). Don't think in terms of APIs and contracts that we have with the user.\n(https://gerrit.hyperledger.org/r/c/24919/6/orderer/consensus/raft/cluster.go#47)\nstructs should be exported, I agree. However, skim through stdlib, most of stuct members are hidden. I'd really appreciate some more verbose explanations. thx","username":"guoger","ts":"2018-08-08T06:44:31.880Z"}
{"msg":"I agree with @guoger ","username":"yacovm","ts":"2018-08-08T07:51:00.796Z"}
{"msg":"and you (Jay) didn't tell what you think about:","username":"yacovm","ts":"2018-08-08T07:51:23.780Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=XdAgBurkxHQzdemAe","username":"yacovm","ts":"2018-08-08T07:51:30.775Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=XdAgBurkxHQzdemAe","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=XdAgBurkxHQzdemAe","remote":true,"fileId":null,"fileName":null}]}
{"msg":"like this?\n```\ntype Handler interface {\n  OnStep(req *StepRequest, sender uint64) (res *StepResponse, error)\n  OnSubmit(req *SubmitRequest, sender uint64) (res *SubmitResponse, error)\n}\n```","username":"guoger","ts":"2018-08-08T07:56:17.420Z"}
{"msg":"like this? @yacovm \n```\ntype Handler interface {\n  OnStep(req *StepRequest, sender uint64) (res *StepResponse, error)\n  OnSubmit(req *SubmitRequest, sender uint64) (res *SubmitResponse, error)\n}\n```","username":"guoger","ts":"2018-08-08T07:56:17.420Z"}
{"msg":"yeah","username":"yacovm","ts":"2018-08-08T08:01:58.316Z"}
{"msg":"which component is supposed to implement this interface? https://docs.google.com/presentation/d/1olukZUnriPS3HfWMPkQfKjypa3QV_iTacfI1lH8Mtqg/edit?usp=sharing","username":"guoger","ts":"2018-08-08T08:07:56.199Z"}
{"msg":"i suppose `dispatcher` in the diagram?","username":"guoger","ts":"2018-08-08T08:09:00.542Z"}
{"msg":"which one?","username":"yacovm","ts":"2018-08-08T08:10:17.853Z"}
{"msg":"`dispatcher` in `etcdraftplugin` at bottom","username":"guoger","ts":"2018-08-08T08:11:14.577Z"}
{"msg":"so I think if we split the `Handle` to 2 methods","username":"yacovm","ts":"2018-08-08T08:11:49.212Z"}
{"msg":"we'll have 2 dispatchers","username":"yacovm","ts":"2018-08-08T08:11:52.751Z"}
{"msg":"no?","username":"yacovm","ts":"2018-08-08T08:11:54.027Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=5xN6KqMLL4jEvz7o9) @guoger Shouldn't we be adding the channel name as a parameter as well? ","username":"adarshsaraf123","ts":"2018-08-08T08:19:32.217Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=5xN6KqMLL4jEvz7o9","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=5xN6KqMLL4jEvz7o9","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=2MjahaLqjaeR5Aqer) @yacovm I think I need a walkthrough of message flow...","username":"guoger","ts":"2018-08-08T08:21:03.378Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=2MjahaLqjaeR5Aqer","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=2MjahaLqjaeR5Aqer","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=WTZAHWb6d2mnqaNoA) @adarshsaraf123 if channel is included in both `StepReq` and `SubmitReq`, why should we?","username":"guoger","ts":"2018-08-08T08:21:28.937Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=WTZAHWb6d2mnqaNoA","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=WTZAHWb6d2mnqaNoA","remote":true,"fileId":null,"fileName":null}]}
{"msg":"in `cluster.proto`\n```\nmessage StepRequest {\n    string channel = 1;\n    bytes payload  = 2;\n}\n\n// SubmitRequest wraps a transaction to be sent for ordering\nmessage SubmitRequest {\n    string channel = 1;\n    // last_validation_seq denotes the last\n    // configuration sequence at which the\n    // sender validated this message\n    uint64 last_validation_seq = 2;\n    // content is the fabric transaction\n    // that is forwarded to the cluster member\n    common.Envelope content = 3;\n}\n```","username":"guoger","ts":"2018-08-08T08:22:19.476Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wYmQGSEKNxzKeZ4WF) @guoger :+1_tone4: ","username":"adarshsaraf123","ts":"2018-08-08T08:22:43.130Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wYmQGSEKNxzKeZ4WF","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wYmQGSEKNxzKeZ4WF","remote":true,"fileId":null,"fileName":null}]}
{"msg":"i started missing 'thread' in slack :P","username":"guoger","ts":"2018-08-08T08:23:51.306Z"}
{"msg":"@guoger what do you mean walkthrough?","username":"yacovm","ts":"2018-08-08T08:28:09.788Z"}
{"msg":"right now, someone needs to implement the `Handle` method, right? ","username":"yacovm","ts":"2018-08-08T08:28:20.108Z"}
{"msg":"mainly looking for:\n- who's implementing `ClusterServer` interface in grpc?\n- who calls dispatcher?\n- dispatcher looks up targeted `Chain`, and call `Order/Configure/Step`, correct?","username":"guoger","ts":"2018-08-08T08:30:36.512Z"}
{"msg":"mainly looking for:\n- ~who~which component is implementing `ClusterServer` interface in grpc?\n- ~who~which component calls dispatcher?\n- dispatcher looks up targeted `Chain`, and call `Order/Configure/Step`, correct?","username":"guoger","ts":"2018-08-08T08:30:36.512Z"}
{"msg":"(by who, I mean component, not person)","username":"guoger","ts":"2018-08-08T08:31:40.943Z"}
{"msg":"1) Me\n2) What's dispatcher? right now we have:\n```\ntype Handler interface {\n\tHandle(methodName, channel string, sender uint64, msg proto.Message) (proto.Message, error)\n}\n```","username":"yacovm","ts":"2018-08-08T08:31:42.062Z"}
{"msg":"@yacovm edited my questions, pardon my grammar :P","username":"guoger","ts":"2018-08-08T08:36:23.944Z"}
{"msg":"1) the `service.go` in my c hange set\n2) I guess... some components needs to dispatch the function calls to the right chain. I am not implementing it at this time","username":"yacovm","ts":"2018-08-08T08:37:12.115Z"}
{"msg":"and I don't know which component, but it should be pretty trivial no?","username":"yacovm","ts":"2018-08-08T08:37:39.403Z"}
{"msg":"I agree with `OnSubmit`/`OnStep` :)","username":"guoger","ts":"2018-08-08T08:43:27.221Z"}
{"msg":"I agree with `OnSubmit` / `OnStep` :)","username":"guoger","ts":"2018-08-08T08:43:27.221Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=PatgSwDpCMKa9xDTh) @yacovm The component handling (2) has been named dispatcher in this [diagram](https://docs.google.com/presentation/d/1olukZUnriPS3HfWMPkQfKjypa3QV_iTacfI1lH8Mtqg/edit?disco=AAAABzkT3PE).","username":"adarshsaraf123","ts":"2018-08-08T09:04:41.638Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=PatgSwDpCMKa9xDTh","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=PatgSwDpCMKa9xDTh","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@adarshsaraf123 thanks","username":"yacovm","ts":"2018-08-08T09:08:07.694Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=HenM5iysYbgXBc5Fs) @kostas @yacovm @kostas had asked you about this. If you aren't intending to work on this, I was planning on volunteering for the same. ","username":"adarshsaraf123","ts":"2018-08-08T09:12:17.654Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=HenM5iysYbgXBc5Fs","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=HenM5iysYbgXBc5Fs","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=HenM5iysYbgXBc5Fs) @kostas @yacovm, Kostas had asked you about this. If you aren't intending to work on this, I was planning on volunteering for the same. ","username":"adarshsaraf123","ts":"2018-08-08T09:12:17.654Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=HenM5iysYbgXBc5Fs","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=HenM5iysYbgXBc5Fs","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I said i am not working on this at the moment","username":"yacovm","ts":"2018-08-08T09:45:24.144Z"}
{"msg":"But before anyone does any work for this, I guess @guoger needs to change his code to adjust to the `OnSubmit` and `OnStep` no?","username":"yacovm","ts":"2018-08-08T09:46:09.108Z"}
{"msg":"`dispatcher` should be interacting with `Chain`, so it's up to @C0rWin ","username":"guoger","ts":"2018-08-08T09:49:10.327Z"}
{"msg":"I guess","username":"yacovm","ts":"2018-08-08T10:02:12.656Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wudhu247vxthxtsGF","username":"kostas","ts":"2018-08-08T10:04:52.106Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wudhu247vxthxtsGF","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wudhu247vxthxtsGF","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@guoger: What is/was the purpose of `sendChan`? That's exactly the purpose of this method?","username":"kostas","ts":"2018-08-08T10:05:28.671Z"}
{"msg":"@guoger: What is/was the purpose of `sendChan`? I would argue then that this method serves the same purpose? I may be missing something.","username":"kostas","ts":"2018-08-08T10:05:28.671Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zqMm2HxKPBBQJ9SHs","username":"kostas","ts":"2018-08-08T10:06:22.851Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zqMm2HxKPBBQJ9SHs","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zqMm2HxKPBBQJ9SHs","remote":true,"fileId":null,"fileName":null}]}
{"msg":"The next two sentences in that Gerrit comment go over the why. By locking/hiding things down, you make wiring/setting/testing needlessly difficult. We have been traditionally very bad at making our dependencies explicit and at nailing down how one should interact with our structs. Add to that the fact that we're short-sighted when it comes to anticipating who else might wish to interact with our components (esp. when it comes to testing). I don't think Matt's presentation is recorded anywhere; I'll see if there are any posts out there that make a more eloquent and convincing case for this.","username":"kostas","ts":"2018-08-08T10:27:20.195Z"}
{"msg":"Or @sykesm maybe you: (1) have such references handy, (2) can make the case for this more eloquently than I can, or (3) will correct me if any of the above reads wrong. (For reference, we started from here: https://gerrit.hyperledger.org/r/c/24919/6/orderer/consensus/raft/cluster.go#47)","username":"kostas","ts":"2018-08-08T10:34:21.468Z"}
{"msg":"not a very authoritative source of information, but https://www.reddit.com/r/golang/comments/3ia88a/exported_unexported_best_practices/","username":"guoger","ts":"2018-08-09T03:57:31.288Z"}
{"msg":"not a very authoritative source of information, but just using it for the sake of arguments https://www.reddit.com/r/golang/comments/3ia88a/exported_unexported_best_practices/","username":"guoger","ts":"2018-08-09T03:57:31.288Z"}
{"msg":"> definitely don't export everything by default. In fact, I'd argue the opposite: export only the bare minimum required, and think hard about anything else you export beyond that. Every exported symbol is weight added to your API, and risk of API breakage if you have to change it.","username":"guoger","ts":"2018-08-09T03:58:39.988Z"}
{"msg":"I think this only applies to _API_, not to internal packages","username":"jyellick","ts":"2018-08-09T03:59:25.012Z"}
{"msg":"In general, no one else consumes any of this fabric code, we could (and probably should) put it into an `internal` package to keep other packages from creating dependencies on exported symbols that are not intended to be API","username":"jyellick","ts":"2018-08-09T04:00:14.767Z"}
{"msg":"https://golang.org/doc/go1.4#internalpackages","username":"jyellick","ts":"2018-08-09T04:01:34.743Z"}
{"msg":"> we could (and probably should) put it into an `internal` package\nagreed. But still, I don't think _hiding struct members in internal package_ is anti-pattern","username":"guoger","ts":"2018-08-09T04:10:58.402Z"}
{"msg":"I feel the opposite by looking at _internal_ packages in stdlib","username":"guoger","ts":"2018-08-09T04:11:47.616Z"}
{"msg":"I feel the opposite by looking at _internal_ packages in stdlib (obviously i didn't exhaust the entire lib, but just a quick scan)","username":"guoger","ts":"2018-08-09T04:11:47.616Z"}
{"msg":"@jyellick I see you are typing and I know it's quite late there. But I do need some food at the moment. I'll read your message later and respond","username":"guoger","ts":"2018-08-09T04:21:10.237Z"}
{"msg":"thanks for having this discussion with me btw","username":"guoger","ts":"2018-08-09T04:21:48.209Z"}
{"msg":"I was a bit skeptical at first, I used to hide everything by default, but I've tried switching to the pattern of exporting everything, unless there is a good reason not to.  It has made wiring and unit and integration tests much simpler.\n\nThere are also some good very simple reasons to do so for the purposes of mocking.  It seems to be a fairly well established and good pattern not to mix mock files into the package directory and to instead isolated them into a `mock` package.  Consider an interface defined in a package which returns a struct, also defined in that package.  To generate the mock, satisfying the interface, the mock must import the struct.  This causes a bit of a predicament, because the mock must import the package, and the test wishes to import the mock.  The only real way to bypass this is to test from outside the package, (usually by declaring the test file to be in the `<package>_test` namespace.  But, now suddenly the unit test utilizing the mock no longer has access to all of these hidden members.  There are some techniques (such as writing exported accessors in a `_test.go`) but it's a bit hacky.  By exporting things, the unit test can have a different package context, but still manipulate the package as needed.\n\nCertainly, my pre-go background is C/C++/Java, so my first impulse is to hide all struct members, and export as few functions as possible.  I think it's because I assume that it will prevent other users from creating dependencies on the internal structure of my package, preventing me from maintaining it sanely.  However, in practice, it seems to be a much smaller barrier.  Within Fabric, if someone wants to manipulate a part of the package, they need only modify the package to export some accessor (or the field itself).  If it's for a bad reason, it should be caught in code review and prevented (though it isn't always), and if it's for a good reason, then we've just generated unnecessary work for ourselves.  Similarly, if the fields are already exported, this is not an invitation for other packages to begin manipulating them in nonsensical ways.  These sorts of CRs too are bad, and should be caught in code review (though suffers from the same problem as code adding accessors).\n\nAnd although this has dragged on perhaps longer than it should have, I also think it simply reads more cleanly.  Consider the following two initializations:\n\n```package cars\n\ntype Car struct {\n        engine Engine\n        tires  Tires\n        body   Body\n}\n\nfunc NewCar(engine Engine, tires Tires, body Body) *Car {\n        return &Car{\n                engine: engine,\n                tires:  tires,\n                body:   body,\n        }\n}\n\nfunc main() {\n        _ = NewCar(\n                NewV8Engine(),\n                NewRacingTires(),\n                NewFiberglassBody(),\n        )\n}\n```\n\nvs. \n\n```package cars\n\ntype Car struct {\n        Engine Engine\n        Tires  Tires\n        Body   Body\n}\n\nfunc main() {\n        _ = &Car{\n                Engine: &V8Engine{},\n                Tires:  &RacingTires{},\n                Body:   &FiberglassBody{},\n        }\n}\n```\n\nThe latter actually reads more concisely and easily to me.  All of the parameters are named, and if later we add an option Color field to the car, then existing users aren't broken.","username":"jyellick","ts":"2018-08-09T04:39:12.111Z"}
{"msg":"I was a bit skeptical at first, I used to hide everything by default, but I've tried switching to the pattern of exporting everything, unless there is a good reason not to.  It has made wiring and unit and integration tests much simpler.\n\nThere are also some good very simple reasons to do so for the purposes of mocking.  It seems to be a fairly well established and good pattern not to mix mock files into the package directory and to instead isolated them into a `mock` package.  Consider an interface defined in a package which returns a struct, also defined in that package.  To generate the mock, satisfying the interface, the mock must import the struct.  This causes a bit of a predicament, because the mock must import the package, and the test wishes to import the mock.  The only real way to bypass this is to test from outside the package, (usually by declaring the test file to be in the `<package>_test` namespace.  But, now suddenly the unit test utilizing the mock no longer has access to all of these hidden members.  There are some techniques (such as writing exported accessors in a `_test.go`) but it's a bit hacky.  By exporting things, the unit test can have a different package context, but still manipulate the package as needed.\n\nCertainly, my pre-go background is C/C++/Java, so my first impulse is to hide all struct members, and export as few functions as possible.  I think it's because I assume that it will prevent other users from creating dependencies on the internal structure of my package, preventing me from maintaining it sanely.  However, in practice, it seems to be a much smaller barrier.  Within Fabric, if someone wants to manipulate a part of the package, they need only modify the package to export some accessor (or the field itself).  If it's for a bad reason, it should be caught in code review and prevented (though it isn't always), and if it's for a good reason, then we've just generated unnecessary work for ourselves.  Similarly, if the fields are already exported, this is not an invitation for other packages to begin manipulating them in nonsensical ways.  These sorts of CRs too are bad, and should be caught in code review (though suffers from the same problem as code adding accessors).\n\nAnd although this has dragged on perhaps longer than it should have, I also think it simply reads more cleanly.  Consider the following two initializations:\n\n```type Car struct {\n        engine Engine\n        tires  Tires\n        body   Body\n}\n\nfunc NewCar(engine Engine, tires Tires, body Body) *Car {\n        return &Car{\n                engine: engine,\n                tires:  tires,\n                body:   body,\n        }\n}\n\nfunc main() {\n        _ = NewCar(\n                NewV8Engine(),\n                NewRacingTires(),\n                NewFiberglassBody(),\n        )\n}\n```\n\nvs. \n\n```type Car struct {\n        Engine Engine\n        Tires  Tires\n        Body   Body\n}\n\nfunc main() {\n        _ = &Car{\n                Engine: &V8Engine{},\n                Tires:  &RacingTires{},\n                Body:   &FiberglassBody{},\n        }\n}\n```\n\nThe latter actually reads more concisely and easily to me.  All of the parameters are named, and if later we add an option Color field to the car, then existing users aren't broken.","username":"jyellick","ts":"2018-08-09T04:39:12.111Z"}
{"msg":"I was a bit skeptical at first, I used to hide everything by default, but I've tried switching to the pattern of exporting everything, unless there is a good reason not to.  It has made wiring and unit and integration tests much simpler, and I'm generally becoming a fan.\n\nThere are also some good very simple reasons to do so for the purposes of mocking.  It seems to be a fairly well established and good pattern not to mix mock files into the package directory and to instead isolated them into a `mock` package.  Consider an interface defined in a package which returns a struct, also defined in that package.  To generate the mock, satisfying the interface, the mock must import the struct.  This causes a bit of a predicament, because the mock must import the package, and the test wishes to import the mock.  The only real way to bypass this is to test from outside the package, (usually by declaring the test file to be in the `<package>_test` namespace.  But, now suddenly the unit test utilizing the mock no longer has access to all of these hidden members.  There are some techniques (such as writing exported accessors in a `_test.go`) but it's a bit hacky.  By exporting things, the unit test can have a different package context, but still manipulate the package as needed.\n\nCertainly, my pre-go background is C/C++/Java, so my first impulse is to hide all struct members, and export as few functions as possible.  I think it's because I assume that it will prevent other users from creating dependencies on the internal structure of my package, preventing me from maintaining it sanely.  However, in practice, it seems to be a much smaller barrier.  Within Fabric, if someone wants to manipulate a part of the package, they need only modify the package to export some accessor (or the field itself).  If it's for a bad reason, it should be caught in code review and prevented (though it isn't always), and if it's for a good reason, then we've just generated unnecessary work for ourselves.  Similarly, if the fields are already exported, this is not an invitation for other packages to begin manipulating them in nonsensical ways.  These sorts of CRs too are bad, and should be caught in code review (though suffers from the same problem as code adding accessors).\n\nAnd although this has dragged on perhaps longer than it should have, I also think it simply reads more cleanly.  Consider the following two initializations:\n\n```type Car struct {\n        engine Engine\n        tires  Tires\n        body   Body\n}\n\nfunc NewCar(engine Engine, tires Tires, body Body) *Car {\n        return &Car{\n                engine: engine,\n                tires:  tires,\n                body:   body,\n        }\n}\n\nfunc main() {\n        _ = NewCar(\n                NewV8Engine(),\n                NewRacingTires(),\n                NewFiberglassBody(),\n        )\n}\n```\n\nvs. \n\n```type Car struct {\n        Engine Engine\n        Tires  Tires\n        Body   Body\n}\n\nfunc main() {\n        _ = &Car{\n                Engine: &V8Engine{},\n                Tires:  &RacingTires{},\n                Body:   &FiberglassBody{},\n        }\n}\n```\n\nThe latter actually reads more concisely and easily to me.  All of the parameters are named, and if later we add an option Color field to the car, then existing users aren't broken.","username":"jyellick","ts":"2018-08-09T04:39:12.111Z"}
{"msg":"I was a bit skeptical at first, I used to hide everything by default, but I've tried switching to the pattern of exporting everything, unless there is a good reason not to.  It has made wiring and unit and integration tests much simpler, and I'm generally becoming a fan.\n\nThere are also some good very simple reasons to do so for the purposes of mocking.  It seems to be a fairly well established and good pattern not to mix mock files into the package directory and to instead isolated them into a `mock` package.  Consider an interface defined in a package which returns a struct, also defined in that package.  To generate the mock, satisfying the interface, the mock must import the struct.  This causes a bit of a predicament, because the mock must import the package, and the test wishes to import the mock (resulting in an import cycle).  The only real way to bypass this is to test from outside the package, (usually by declaring the test file to be in the `<package>_test` namespace).  But, now suddenly the unit test utilizing the mock no longer has access to all of these hidden members.  There are some techniques (such as writing exported accessors in a `_test.go`) but it's a bit hacky.  By exporting things, the unit test can have a different package context, but still manipulate the package as needed.\n\nCertainly, my pre-go background is C/C++/Java, so my first impulse is to hide all struct members, and export as few functions as possible.  I think it's because I assume that it will prevent other users from creating dependencies on the internal structure of my package, preventing me from maintaining it sanely.  However, in practice, it seems to be a much smaller barrier.  Within Fabric, if someone wants to manipulate a part of the package, they need only modify the package to export some accessor (or the field itself).  If it's for a bad reason, it should be caught in code review and prevented (though it isn't always), and if it's for a good reason, then we've just generated unnecessary work for ourselves.  Similarly, if the fields are already exported, this is not an invitation for other packages to begin manipulating them in nonsensical ways.  These sorts of CRs too are bad, and should be caught in code review (though suffers from the same problem as code adding accessors).\n\nAnd although this has dragged on perhaps longer than it should have, I also think it simply reads more cleanly.  Consider the following two initializations:\n\n```type Car struct {\n        engine Engine\n        tires  Tires\n        body   Body\n}\n\nfunc NewCar(engine Engine, tires Tires, body Body) *Car {\n        return &Car{\n                engine: engine,\n                tires:  tires,\n                body:   body,\n        }\n}\n\nfunc main() {\n        _ = NewCar(\n                NewV8Engine(),\n                NewRacingTires(),\n                NewFiberglassBody(),\n        )\n}\n```\n\nvs. \n\n```type Car struct {\n        Engine Engine\n        Tires  Tires\n        Body   Body\n}\n\nfunc main() {\n        _ = &Car{\n                Engine: &V8Engine{},\n                Tires:  &RacingTires{},\n                Body:   &FiberglassBody{},\n        }\n}\n```\n\nThe latter actually reads more concisely and easily to me.  All of the parameters are named, and if later we add an option Color field to the car, then existing users aren't broken.","username":"jyellick","ts":"2018-08-09T04:39:12.111Z"}
{"msg":">  test from outside the package\nThis is very true, and that's why `ginkgo` already generates tests in `<package>_test.go`.\nBut it doesn't justify following statement:\n> By exporting things, the unit test can have a different package context, but still manipulate the package as needed.\nTests are _users_ of package. If a member is not meant to be used by its user, then it should _not_ be used by tests either. If some hidden members _have to be exported_ in order to be testable, then something is not right.\n\n>  Similarly, if the fields are already exported, this is not an invitation for other packages to begin manipulating them in nonsensical ways\nIn practice, it's hard to reason _nonsensical ways_ if everything is exported. Either author needs to document them, or user has to read the implementation in order to avoid manipulating _unintended-to-be-used-but-yet-available_ fields. This often leads to more work than\n> then we've just generated unnecessary work for ourselves\n\nin your example, consider we later on need extra steps to construct a Car,\n```\nfunc NewCar(engine Engine, tires Tires, body Body) *Car {\n    c := &Car{engine: engine, tires: tires, body: body}\n    if engine.Power() >= 100 && tires.Type == \"Mud\" { c.drivable == true }\n\n    return c\n}\n```\nConstructor gives us flexibility here. As for adding `Color` breaks code, my counter-argument would be:\n- constructor is an API, and cannot expect API to remain unchanged all the time.\n- this is when we need a `CarFactory`\n\nI hope this makes sense, cc @jyellick ","username":"guoger","ts":"2018-08-09T06:52:44.798Z"}
{"msg":">  test from outside the package\nThis is very true, and that's why `ginkgo` already generates tests in `<package>_test.go`.\nBut it doesn't justify following statement:\n> By exporting things, the unit test can have a different package context, but still manipulate the package as needed.\nTests are _users_ of package. If a member is not meant to be used by its user, then it should _not_ be used by tests either. If some hidden members _have to be exported_ in order to be testable, then something is not right.\n\n\n>  Similarly, if the fields are already exported, this is not an invitation for other packages to begin manipulating them in nonsensical ways\nIn practice, it's hard to reason _nonsensical ways_ if everything is exported. Either author needs to document them, or user has to read the implementation in order to avoid manipulating _unintended-to-be-used-but-yet-available_ fields. This often leads to more work than\n> then we've just generated unnecessary work for ourselves\n\nin your example, consider we later on need extra steps to construct a Car,\n```\nfunc NewCar(engine Engine, tires Tires, body Body) *Car {\n    c := &Car{engine: engine, tires: tires, body: body}\n    if engine.Power() >= 100 && tires.Type == \"Mud\" { c.drivable == true }\n\n    return c\n}\n```\nConstructor gives us flexibility here. As for adding `Color` breaks code, my counter-argument would be:\n- constructor is an API, and cannot expect API to remain unchanged all the time.\n- this is when we need a `CarFactory`\n\nI hope this makes sense, cc @jyellick ","username":"guoger","ts":"2018-08-09T06:52:44.798Z"}
{"msg":">  test from outside the package\nThis is very true, and that's why `ginkgo` already generates tests in `<package>_test.go`.\nBut it doesn't justify following statement:\n> By exporting things, the unit test can have a different package context, but still manipulate the package as needed.\nTests are _users_ of package. If a member is not meant to be used by its user, then it should _not_ be used by tests either. If some hidden members _have to be exported_ in order to be testable, then something is not right.\\\\\n\n>  Similarly, if the fields are already exported, this is not an invitation for other packages to begin manipulating them in nonsensical ways\nIn practice, it's hard to reason _nonsensical ways_ if everything is exported. Either author needs to document them, or user has to read the implementation in order to avoid manipulating _unintended-to-be-used-but-yet-available_ fields. This often leads to more work than\n> then we've just generated unnecessary work for ourselves\n\nin your example, consider we later on need extra steps to construct a Car,\n```\nfunc NewCar(engine Engine, tires Tires, body Body) *Car {\n    c := &Car{engine: engine, tires: tires, body: body}\n    if engine.Power() >= 100 && tires.Type == \"Mud\" { c.drivable == true }\n\n    return c\n}\n```\nConstructor gives us flexibility here. As for adding `Color` breaks code, my counter-argument would be:\n- constructor is an API, and cannot expect API to remain unchanged all the time.\n- this is when we need a `CarFactory`\n\nI hope this makes sense, cc @jyellick ","username":"guoger","ts":"2018-08-09T06:52:44.798Z"}
{"msg":">  test from outside the package\nThis is very true, and that's why `ginkgo` already generates tests in `<package>_test.go`.\nBut it doesn't justify following statement:\n> By exporting things, the unit test can have a different package context, but still manipulate the package as needed.\nTests are _users_ of package. If a member is not meant to be used by its user, then it should _not_ be used by tests either. If some hidden members _have to be exported_ in order to be testable, then something is not right.\n\n>  Similarly, if the fields are already exported, this is not an invitation for other packages to begin manipulating them in nonsensical ways\nIn practice, it's hard to reason _nonsensical ways_ if everything is exported. Either author needs to document them, or user has to read the implementation in order to avoid manipulating _unintended-to-be-used-but-yet-available_ fields. This often leads to more work than `then we've just generated unnecessary work for ourselves`\n\n\n\nin your example, consider we later on need extra steps to construct a Car,\n```\nfunc NewCar(engine Engine, tires Tires, body Body) *Car {\n    c := &Car{engine: engine, tires: tires, body: body}\n    if engine.Power() >= 100 && tires.Type == \"Mud\" { c.drivable == true }\n\n    return c\n}\n```\nConstructor gives us flexibility here. As for adding `Color` breaks code, my counter-argument would be:\n- constructor is an API, and cannot expect API to remain unchanged all the time.\n- this is when we need a `CarFactory`\n\nI hope this makes sense, cc @jyellick ","username":"guoger","ts":"2018-08-09T06:52:44.798Z"}
{"msg":">  test from outside the package\nThis is very true, and that's why `ginkgo` already generates tests in `<package>_test.go`.\nBut it doesn't justify following statement:\n> By exporting things, the unit test can have a different package context, but still manipulate the package as needed.\nTests are _users_ of package. If a member is not meant to be used by its user, then it should _not_ be used by tests either. If some hidden members _have to be exported_ in order to be testable, then something is not right.\n\n>  Similarly, if the fields are already exported, this is not an invitation for other packages to begin manipulating them in nonsensical ways\nIn practice, it's hard to reason _nonsensical ways_ if everything is exported. Either author needs to document them, or user has to read the implementation in order to avoid manipulating _unintended-to-be-used-but-yet-available_ fields. This often leads to more work than `then we've just generated unnecessary work for ourselves`\n\n\nin your example, consider we later on need extra steps to construct a Car,\n```\nfunc NewCar(engine Engine, tires Tires, body Body) *Car {\n    c := &Car{engine: engine, tires: tires, body: body}\n    if engine.Power() >= 100 && tires.Type == \"Mud\" { c.drivable == true }\n\n    return c\n}\n```\nConstructor gives us flexibility here. As for adding `Color` breaks code, my counter-argument would be:\n- constructor is an API, and cannot expect API to remain unchanged all the time.\n- this is when we need a `CarFactory`\n\nI hope this makes sense, cc @jyellick ","username":"guoger","ts":"2018-08-09T06:52:44.798Z"}
{"msg":">  test from outside the package\nThis is very true, and that's why `ginkgo` already generates tests in `<package>_test.go`.\nBut it doesn't justify following statement:\n> By exporting things, the unit test can have a different package context, but still manipulate the package as needed.\nTests are _users_ of package. If a member is not meant to be used by its user, then it should _not_ be used by tests either. If some hidden members _have to be exported_ in order to be testable, then something is not right.\n\n>  Similarly, if the fields are already exported, this is not an invitation for other packages to begin manipulating them in nonsensical ways\nIn practice, it's hard to reason _nonsensical ways_ if everything is exported. Either author needs to document them, or user has to read the implementation in order to avoid manipulating _unintended-to-be-used-but-yet-available_ fields. This often leads to more work than\n> then we've just generated unnecessary work for ourselves\n\nin your example, consider we later on need extra steps to construct a Car,\n```\nfunc NewCar(engine Engine, tires Tires, body Body) *Car {\n    c := &Car{engine: engine, tires: tires, body: body}\n    if engine.Power() >= 100 && tires.Type == \"Mud\" { c.drivable == true }\n\n    return c\n}\n```\nConstructor gives us flexibility here. As for adding `Color` breaks code, my counter-argument would be:\n- constructor is an API, and cannot expect API to remain unchanged all the time.\n- this is when we need a `CarFactory`\n\nI hope this makes sense, cc @jyellick ","username":"guoger","ts":"2018-08-09T06:52:44.798Z"}
{"msg":">  test from outside the package\nThis is very true, and that's why `ginkgo` already generates tests in `<package>_test.go`.\nBut it doesn't justify following statement:\n> By exporting things, the unit test can have a different package context, but still manipulate the package as needed.\nTests are _users_ of package. If a member is not meant to be used by its user, then it should _not_ be used by tests either. If some hidden members _have to be exported_ in order to be testable, then something is not right.\n\n\n>  Similarly, if the fields are already exported, this is not an invitation for other packages to begin manipulating them in nonsensical ways\nIn practice, it's hard to reason _nonsensical ways_ if everything is exported. Either author needs to document them, or user has to read the implementation in order to avoid manipulating _unintended-to-be-used-but-yet-available_ fields. This often leads to more work than\n> then we've just generated unnecessary work for ourselves\n\n\nin your example, consider we later on need extra steps to construct a Car,\n```\nfunc NewCar(engine Engine, tires Tires, body Body) *Car {\n    c := &Car{engine: engine, tires: tires, body: body}\n    if engine.Power() >= 100 && tires.Type == \"Mud\" { c.drivable == true }\n\n    return c\n}\n```\nConstructor gives us flexibility here. As for adding `Color` breaks code, my counter-argument would be:\n- constructor is an API, and cannot expect API to remain unchanged all the time.\n- this is when we need a `CarFactory`\n\n\nI hope this makes sense, cc @jyellick ","username":"guoger","ts":"2018-08-09T06:52:44.798Z"}
{"msg":">  test from outside the package\nThis is very true, and that's why `ginkgo` already generates tests in `<package>_test.go`.\nBut it doesn't justify following statement:\n> By exporting things, the unit test can have a different package context, but still manipulate the package as needed.\nTests are _users_ of package. If a member is not meant to be used by its user, then it should _not_ be used by tests either. If some hidden members _have to be exported_ in order to be testable, then something is not right.\n\n\n\n>  Similarly, if the fields are already exported, this is not an invitation for other packages to begin manipulating them in nonsensical ways\nIn practice, it's hard to reason _nonsensical ways_ if everything is exported. Either author needs to document them, or user has to read the implementation in order to avoid manipulating _unintended-to-be-used-but-yet-available_ fields. This often leads to more work than\n> then we've just generated unnecessary work for ourselves\n\n\n\nin your example, consider we later on need extra steps to construct a Car,\n```\nfunc NewCar(engine Engine, tires Tires, body Body) *Car {\n    c := &Car{engine: engine, tires: tires, body: body}\n    if engine.Power() >= 100 && tires.Type == \"Mud\" { c.drivable == true }\n\n    return c\n}\n```\nConstructor gives us flexibility here. As for adding `Color` breaks code, my counter-argument would be:\n- constructor is an API, and cannot expect API to remain unchanged all the time.\n- this is when we need a `CarFactory`\n\n\nI hope this makes sense, cc @jyellick ","username":"guoger","ts":"2018-08-09T06:52:44.798Z"}
{"msg":">  test from outside the package\nThis is very true, and that's why `ginkgo` already generates tests in `<package>_test.go`.\nBut it doesn't justify following statement:\n> By exporting things, the unit test can have a different package context, but still manipulate the package as needed.\nTests are _users_ of package. If a member is not meant to be used by its user, then it should _not_ be used by tests either. If some hidden members _have to be exported_ in order to be testable, then something is not right.\n\n\n\n>  Similarly, if the fields are already exported, this is not an invitation for other packages to begin manipulating them in nonsensical ways\nIn practice, it's hard to reason _nonsensical ways_ if everything is exported. Either author needs to document them, or user has to read the implementation in order to avoid manipulating _unintended-to-be-used-but-yet-available_ fields. This often leads to more work than > then we've just generated unnecessary work for ourselves\n\n\n\nin your example, consider we later on need extra steps to construct a Car,\n```\nfunc NewCar(engine Engine, tires Tires, body Body) *Car {\n    c := &Car{engine: engine, tires: tires, body: body}\n    if engine.Power() >= 100 && tires.Type == \"Mud\" { c.drivable == true }\n\n    return c\n}\n```\nConstructor gives us flexibility here. As for adding `Color` breaks code, my counter-argument would be:\n- constructor is an API, and cannot expect API to remain unchanged all the time.\n- this is when we need a `CarFactory`\n\n\nI hope this makes sense, cc @jyellick ","username":"guoger","ts":"2018-08-09T06:52:44.798Z"}
{"msg":">  test from outside the package\nThis is very true, and that's why `ginkgo` already generates tests in `<package>_test.go`.\nBut it doesn't justify following statement:\n> By exporting things, the unit test can have a different package context, but still manipulate the package as needed.\nTests are _users_ of package. If a member is not meant to be used by its user, then it should _not_ be used by tests either. If some hidden members _have to be exported_ in order to be testable, then something is not right.\n\n\n\n>  Similarly, if the fields are already exported, this is not an invitation for other packages to begin manipulating them in nonsensical ways\nIn practice, it's hard to reason _nonsensical ways_ if everything is exported. Either author needs to document them, or user has to read the implementation in order to avoid manipulating _unintended-to-be-used-but-yet-available_ fields. This often leads to more work than _\"then we've just generated unnecessary work for ourselves\"_\n\n\n\nin your example, consider we later on need extra steps to construct a Car,\n```\nfunc NewCar(engine Engine, tires Tires, body Body) *Car {\n    c := &Car{engine: engine, tires: tires, body: body}\n    if engine.Power() >= 100 && tires.Type == \"Mud\" { c.drivable == true }\n\n    return c\n}\n```\nConstructor gives us flexibility here. As for adding `Color` breaks code, my counter-argument would be:\n- constructor is an API, and cannot expect API to remain unchanged all the time.\n- this is when we need a `CarFactory`\n\n\nI hope this makes sense, cc @jyellick ","username":"guoger","ts":"2018-08-09T06:52:44.798Z"}
{"msg":">  test from outside the package\nThis is very true, and that's why `ginkgo` already generates tests in `<package>_test.go`.\nBut it doesn't justify following statement:\n> By exporting things, the unit test can have a different package context, but still manipulate the package as needed.\nTests are _users_ of package. If a member is not meant to be used by its user, then it should _not_ be used by tests either. If some hidden members _have to be exported_ in order to be testable, then something is not right. I should be able to refactor implementation without affecting users *and* tests.\n\n\n\n>  Similarly, if the fields are already exported, this is not an invitation for other packages to begin manipulating them in nonsensical ways\nIn practice, it's hard to reason _nonsensical ways_ if everything is exported. Either author needs to document them, or user has to read the implementation in order to avoid manipulating _unintended-to-be-used-but-yet-available_ fields. This often leads to more work than _\"then we've just generated unnecessary work for ourselves\"_\n\n\n\nin your example, consider we later on need extra steps to construct a Car,\n```\nfunc NewCar(engine Engine, tires Tires, body Body) *Car {\n    c := &Car{engine: engine, tires: tires, body: body}\n    if engine.Power() >= 100 && tires.Type == \"Mud\" { c.drivable == true }\n\n    return c\n}\n```\nConstructor gives us flexibility here. As for adding `Color` breaks code, my counter-argument would be:\n- constructor is an API, and cannot expect API to remain unchanged all the time.\n- this is when we need a `CarFactory`\n\n\nI hope this makes sense, cc @jyellick ","username":"guoger","ts":"2018-08-09T06:52:44.798Z"}
{"msg":">  test from outside the package\nThis is very true, and that's why `ginkgo` already generates tests in `<package>_test.go`.\nBut it doesn't justify following statement:\n> By exporting things, the unit test can have a different package context, but still manipulate the package as needed.\nTests are _users_ of package. If a member is not meant to be used by its user, then it should _not_ be used by tests either. If some hidden members _have to be exported_ in order to be testable, then something is not right. I should be able to refactor implementation without affecting users *and* tests.\n\n\n\n>  Similarly, if the fields are already exported, this is not an invitation for other packages to begin manipulating them in nonsensical ways\nIn practice, it's hard to reason _nonsensical ways_ if everything is exported. *Either* author needs to document them, *or* user has to read the implementation in order to avoid manipulating _unintended-to-be-used-but-yet-available_ fields. This often leads to more work than _\"then we've just generated unnecessary work for ourselves\"_\n\n\n\nin your example, consider we later on need extra steps to construct a Car,\n```\nfunc NewCar(engine Engine, tires Tires, body Body) *Car {\n    c := &Car{engine: engine, tires: tires, body: body}\n    if engine.Power() >= 100 && tires.Type == \"Mud\" { c.drivable == true }\n\n    return c\n}\n```\nConstructor gives us flexibility here. As for adding `Color` breaks code, my counter-argument would be:\n- constructor is an API, and cannot expect API to remain unchanged all the time.\n- this is when we need a `CarFactory`\n\n\nI hope this makes sense, cc @jyellick ","username":"guoger","ts":"2018-08-09T06:52:44.798Z"}
{"msg":">  test from outside the package\nThis is very true, and that's why `ginkgo` already generates tests in `<package>_test.go`.\nBut it doesn't justify following statement:\n> By exporting things, the unit test can have a different package context, but still manipulate the package as needed.\nTests are _users_ of package. If a member is not meant to be used by its user, then it should _not_ be used by tests either. If some hidden members _have to be exported_ in order to be testable, then either DI should be used, or something is wrong. One should be able to refactor implementation without affecting users *and* tests.\n\n\n\n>  Similarly, if the fields are already exported, this is not an invitation for other packages to begin manipulating them in nonsensical ways\nIn practice, it's hard to reason _nonsensical ways_ if everything is exported. *Either* author needs to document them, *or* user has to read the implementation in order to avoid manipulating _unintended-to-be-used-but-yet-available_ fields. This often leads to more work than _\"then we've just generated unnecessary work for ourselves\"_\n\n\n\nin your example, consider we later on need extra steps to construct a Car,\n```\nfunc NewCar(engine Engine, tires Tires, body Body) *Car {\n    c := &Car{engine: engine, tires: tires, body: body}\n    if engine.Power() >= 100 && tires.Type == \"Mud\" { c.drivable == true }\n\n    return c\n}\n```\nConstructor gives us flexibility here. As for adding `Color` breaks code, my counter-argument would be:\n- constructor is an API, and cannot expect API to remain unchanged all the time.\n- this is when we need a `CarFactory`\n\n\nI hope this makes sense, cc @jyellick ","username":"guoger","ts":"2018-08-09T06:52:44.798Z"}
{"msg":">  test from outside the package\nThis is very true, and that's why `ginkgo` already generates tests in `<package>_test.go`.\nBut it doesn't justify following statement:\n> By exporting things, the unit test can have a different package context, but still manipulate the package as needed.\nTests are _users_ of package. If a member is not meant to be used by its user, then it should _not_ be used by tests either. If some hidden members _have to be exported_ in order to be testable, then either DI should be used instead, or something is wrong. One should be able to refactor implementation without affecting users *and* tests.\n\n\n\n>  Similarly, if the fields are already exported, this is not an invitation for other packages to begin manipulating them in nonsensical ways\nIn practice, it's hard to reason _nonsensical ways_ if everything is exported. *Either* author needs to document them, *or* user has to read the implementation in order to avoid manipulating _unintended-to-be-used-but-yet-available_ fields. This often leads to more work than _\"then we've just generated unnecessary work for ourselves\"_\n\n\n\nin your example, consider we later on need extra steps to construct a Car,\n```\nfunc NewCar(engine Engine, tires Tires, body Body) *Car {\n    c := &Car{engine: engine, tires: tires, body: body}\n    if engine.Power() >= 100 && tires.Type == \"Mud\" { c.drivable == true }\n\n    return c\n}\n```\nConstructor gives us flexibility here. As for adding `Color` breaks code, my counter-argument would be:\n- constructor is an API, and cannot expect API to remain unchanged all the time.\n- this is when we need a `CarFactory`\n\n\nI hope this makes sense, cc @jyellick ","username":"guoger","ts":"2018-08-09T06:52:44.798Z"}
{"msg":"So, any consistently applied philosophy can work. That said, what we have in fabric right now does not. By advocating for exported concrete types with exported fields for dependencies, it enables easier wiring and reuse. That's been demonstrated. And yes, it has some cost.\n\nYour constructor example, while fine, could just as easily be implemented with a drivable() function instead of an attribute to achieve the same result. If the Drivable attribute is something consumers care about, then it would be exported. So, in general, that kind of logic usually raises flags for me.\n\nAgain, it's not\n\nSo, I don't advocate for exporting *everything* - I advocate for exporting injection points for dependencies and configuration. I also push people towards considering why something is or isn't exported; I simply don't believe the export-as-a-last resort philosophy for package we do not intent to be external API.\n\nFor example, I see many places where a sync.Mutex is embedded in a struct so (lazy) programmers can simply call lock on the self-reference without naming the lock. This exposes Lock and Unlock on the struct. I'd rarely (if ever) expect external lock management to be intended yet, we have it.\n\nI also advocate for using _test packages to force authors to consider how the api surface will be used and what the capabilities are. If dependencies are structured properly, we can still get to very high code coverage. If we need tests in the main production package, so be it - but I don't believe that's the unilateral starting point.\nAs for internal packages, I already have a JIRA opened for that. I strongly believe we should restructure all of our packages and move the vast majority into an internal namespace.","username":"sykesm","ts":"2018-08-09T20:32:20.099Z"}
{"msg":"So, any consistently applied philosophy can work. That said, what we have in fabric right now does not. By advocating for exported concrete types with exported fields for dependencies, it enables easier wiring and reuse. That's been demonstrated. And yes, it has some cost.\n\nYour constructor example, while fine, could just as easily be implemented with a drivable() function instead of an attribute to achieve the same result. If the Drivable attribute is something consumers care about, then it would be exported. So, in general, that kind of logic usually raises flags for me.\n\nIn general, I think constructors are overused. In general, I think factories are overused. I know singletons are overused and abused in fabric - especially when it comes to factories and config.\n\nAgain, it's not like we never want or need a constructor. Where we need one, we need one - commonly when we have to instantiate maps and channels another other internals. When we do have one, we should consider how it evolves. The option function pattern and config structs (a dependency) should be considered and employed. Long arg lists on construction should not.\n\nSo, I don't advocate for exporting *everything* - I advocate for exporting injection points for dependencies and configuration. I also push people towards considering why something is or isn't exported; I simply don't believe the export-as-a-last resort philosophy for package we do not intent to be external API.\n\nFor example, I see many places where a sync.Mutex is embedded in a struct so (lazy) programmers can simply call lock on the self-reference without naming the lock. This exposes Lock and Unlock on the struct. I'd rarely (if ever) expect external lock management to be intended yet, we have it.\n\nI also advocate for using _test packages to force authors to consider how the api surface will be used and what the capabilities are. If dependencies are structured properly, we can still get to very high code coverage. If we need tests in the main production package, so be it - but I don't believe that's the unilateral starting point.\nAs for internal packages, I already have a JIRA opened for that. I strongly believe we should restructure all of our packages and move the vast majority into an internal namespace.","username":"sykesm","ts":"2018-08-09T20:32:20.099Z"}
{"msg":"So, any consistently applied philosophy can work. That said, what we have in fabric right now does not. By advocating for exported concrete types with exported fields for dependencies, it enables easier wiring and reuse. That's been demonstrated. And yes, it has some cost.\n\nYour constructor example, while fine, could just as easily be implemented with a drivable() function instead of an attribute to achieve the same result. If the Drivable attribute is something consumers care about, then it would be exported. So, in general, that kind of logic usually raises flags for me.\n\nIn general, I think constructors are overused. In general, I think factories are overused. I know singletons are overused and abused in fabric - especially when it comes to factories and config.\n\nAgain, it's not like we never want or need a constructor. Where we need one, we need one - commonly when we have to instantiate maps and channels another other internals. When we do have one, we should consider how it evolves. The option function pattern and config structs (a dependency) should be considered and employed. Long arg lists on construction should not.\n\nSo, I don't advocate for exporting *everything* - I advocate for exporting injection points for dependencies and configuration. I also push people towards considering why something is or isn't exported; I simply don't believe the export-as-a-last resort philosophy for package we do not intent to be external API.\n\nFor example, I see many places where a sync.Mutex is embedded in a struct so (lazy) programmers can simply call lock on the self-reference without naming the lock. This exposes Lock and Unlock on the struct. I'd rarely (if ever) expect external lock management to be intended yet, we have it.\n\nI also advocate for using _test packages to force authors to consider how the api surface will be used and what the capabilities are. If dependencies are structured properly, we can still get to very high code coverage. If we need tests in the main production package, so be it - but I don't believe that's the unilateral starting point.\n\nAs for internal packages, I already have a JIRA opened for that. I strongly believe we should restructure all of our packages and move the vast majority into an internal namespace.","username":"sykesm","ts":"2018-08-09T20:32:20.099Z"}
{"msg":"> so (lazy) programmers can simply call lock on the self-reference without naming the lock\n:raised_back_of_hand_tone1: ","username":"yacovm","ts":"2018-08-09T21:24:38.220Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=aHDG8YXwm97ikLoaG) @yacovm yep. :)","username":"sykesm","ts":"2018-08-09T21:46:40.789Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=aHDG8YXwm97ikLoaG","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=aHDG8YXwm97ikLoaG","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Honestly I don't think all these things matter so much","username":"yacovm","ts":"2018-08-09T21:47:06.044Z"}
{"msg":"Then I think you've just volunteered to do all of the peer cleanup","username":"sykesm","ts":"2018-08-09T21:47:41.953Z"}
{"msg":"nah, i got better things to do","username":"yacovm","ts":"2018-08-09T21:48:01.582Z"}
{"msg":"the peer needs cleanup, for sure","username":"yacovm","ts":"2018-08-09T21:48:13.917Z"}
{"msg":"but we have bigger problems than just code style","username":"yacovm","ts":"2018-08-09T21:48:28.614Z"}
{"msg":"I agree - but nothing exists in isolation. ttyl","username":"sykesm","ts":"2018-08-09T21:49:07.576Z"}
{"msg":"as I'm thinking about it a bit more, perhaps a method to notify `Chain` about leadership changes is need. Suppose following scenario:\n- config seq is 1\n- nodeA is leader. It has 2 txs in blockcutter: {normalMsg, configSeq: 1}, {normalMsg, configSeq: 1}\n- nodeA loses leadership, nodeB becomes leader\n- nodeB receives msg {configMsg, configSeq: 1}, it cuts a block and apply\n- config seq now moves to 2\n- nodeB loses leadership, nodeA becomes leader again\n- nodeA cuts two _invalid_ messages into block due to timeout, and we have a problem.\n\n(although, this sounds like an _uncle blocks_ problem to me, which may be solved by revalidating enqueued txs if a config block is being committed?)","username":"guoger","ts":"2018-08-13T08:38:34.488Z"}
{"msg":"cc @C0rWin ","username":"guoger","ts":"2018-08-13T08:38:43.597Z"}
{"msg":"In such scenario I'd expect FSM to take care by not agreeing to consent on the block with smaller config sequence ","username":"C0rWin","ts":"2018-08-13T09:29:02.998Z"}
{"msg":"while handling Raft FSM step, we can check and reject propose of the block with old config sequence ","username":"C0rWin","ts":"2018-08-13T09:30:59.339Z"}
{"msg":"why `step`?","username":"guoger","ts":"2018-08-13T09:32:01.160Z"}
{"msg":"this is where you handled transitions, no?","username":"C0rWin","ts":"2018-08-13T09:32:19.563Z"}
{"msg":"why not `propose`?","username":"guoger","ts":"2018-08-13T09:40:50.885Z"}
{"msg":"i don't think we should intercept `step` messages","username":"guoger","ts":"2018-08-13T09:41:12.062Z"}
{"msg":"Good point @guoger.","username":"kostas","ts":"2018-08-13T14:27:39.424Z"}
{"msg":"Good point @guoger.","username":"kostas","ts":"2018-08-13T14:27:39.424Z"}
{"msg":"@guoger: Good point.","username":"kostas","ts":"2018-08-13T14:27:39.424Z"}
{"msg":"I _think_ that such a signal is needed as well.","username":"kostas","ts":"2018-08-13T14:28:11.665Z"}
{"msg":"@C0rWin: In the scenario that Jay describes, don't you (i.e. nodeA) run the risk of cutting a block with these stale 2 TXs even when node B has become the leader?","username":"kostas","ts":"2018-08-13T14:29:05.083Z"}
{"msg":"Your batch timer will eventually expire.","username":"kostas","ts":"2018-08-13T14:29:19.524Z"}
{"msg":"(A reminder to all that the package name is `etcdraft`, not `raft`. See: https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAAB62Du0s)","username":"kostas","ts":"2018-08-13T14:44:24.828Z"}
{"msg":"(A reminder that the package name is `etcdraft`, not `raft`. See: https://docs.google.com/document/d/138Brlx2BiYJm5bzFk_B0csuEUKYdXXr7Za9V7C76dwo/edit?disco=AAAAB62Du0s)","username":"kostas","ts":"2018-08-13T14:44:24.828Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=hw97s66jDf8cA5jwH) @kostas this is why I have asked Jay to provide such signal, he just articulated my request here out of loud to induce dialog I guess","username":"C0rWin","ts":"2018-08-13T15:24:40.441Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=hw97s66jDf8cA5jwH","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=hw97s66jDf8cA5jwH","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Not sure why this a risk, though, no one will consent on this block, so eventually transactions will get lost. Personally I think that if will have such signal ex-leader could try to forward transactions to new one","username":"C0rWin","ts":"2018-08-13T15:26:49.244Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=36GaitmaADX4NcyxM) right, @C0rWin suggested to add such a signal between chain and fsm, and i wasn't sure about it. then I thought a bit more, and this scenario occurred to me as a solid reason.","username":"guoger","ts":"2018-08-13T15:30:33.110Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=36GaitmaADX4NcyxM","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=36GaitmaADX4NcyxM","remote":true,"fileId":null,"fileName":null}]}
{"msg":"and i don't think it's a risk, because we guard `Propose` not to accept block as follower. (also, `DisableProposalForwarding` is enabled)","username":"guoger","ts":"2018-08-13T15:33:01.840Z"}
{"msg":"Ah, I see - thanks for having this discussion in public then.","username":"kostas","ts":"2018-08-13T15:35:40.776Z"}
{"msg":"Two quick comments:","username":"kostas","ts":"2018-08-13T15:35:44.931Z"}
{"msg":"> Personally I think that if will have such signal ex-leader could try to forward transactions to new one","username":"kostas","ts":"2018-08-13T15:35:49.858Z"}
{"msg":"Let's not do that for now. I'd rather we keep things simple, and not do anything that might be complicated for the BFT path.","username":"kostas","ts":"2018-08-13T15:36:50.243Z"}
{"msg":"i agree","username":"guoger","ts":"2018-08-13T15:37:07.947Z"}
{"msg":"> and i don't think it's a risk, because we guard `Propose` not to accept block as follower. (also, `DisableProposalForwarding` is enabled)\nExpand on this one?","username":"kostas","ts":"2018-08-13T15:37:12.029Z"}
{"msg":"Jay actually has a check which results in error if you as non leader will try to Propose block","username":"C0rWin","ts":"2018-08-13T15:37:54.127Z"}
{"msg":"Ah, I remember now.","username":"kostas","ts":"2018-08-13T15:38:46.666Z"}
{"msg":">  don't you (i.e. nodeA) run the risk of cutting a block with these stale 2 TXs even when node B has become the leader?\nfollower is not allowed to propose block to raft. And i also explicitly enable `DisableProposalForwarding` in raft.Config","username":"guoger","ts":"2018-08-13T15:38:46.716Z"}
{"msg":"> And i also explicitly enable `DisableProposalForwarding` in raft.Config\nI wasn't even aware this was a thing. Cool!","username":"kostas","ts":"2018-08-13T15:39:08.284Z"}
{"msg":"Can someone capture this decision/impl. detail in either of your two JIRAs?","username":"kostas","ts":"2018-08-13T15:39:27.945Z"}
{"msg":"I'll update my jira","username":"guoger","ts":"2018-08-13T15:39:40.343Z"}
{"msg":"Add it as a comment. I know that my memory sucks.","username":"kostas","ts":"2018-08-13T15:39:44.878Z"}
{"msg":"Cool, thanks Jay.","username":"kostas","ts":"2018-08-13T15:39:49.932Z"}
{"msg":"but we need to decide on the form of signal","username":"guoger","ts":"2018-08-13T15:39:53.550Z"}
{"msg":"Do either of you have proposal to begin with?","username":"kostas","ts":"2018-08-13T15:40:42.333Z"}
{"msg":"Do either of you have a proposal to begin with?","username":"kostas","ts":"2018-08-13T15:40:42.333Z"}
{"msg":"roughly, in `<-node.Ready()`, I'll compare `wasLeader` and current state, to detect leadership change","username":"guoger","ts":"2018-08-13T15:41:07.692Z"}
{"msg":"roughly, in `<-node.Ready()`, I'll compare `wasLeader` and current state, to detect leadership change. (this is basically how I would implement it, just in case anybody has a better idea)","username":"guoger","ts":"2018-08-13T15:41:07.692Z"}
{"msg":"and I would suggest a callback","username":"guoger","ts":"2018-08-13T15:41:32.181Z"}
{"msg":"and I would suggest a callback","username":"guoger","ts":"2018-08-13T15:41:32.181Z"}
{"msg":"Let's wait for Artem, and then we can chime in.","username":"kostas","ts":"2018-08-13T15:47:32.989Z"}
{"msg":"Callback is implementation detail, honestly don’t really mind how this gonna be implemented as long as we agree this is must have API","username":"C0rWin","ts":"2018-08-13T16:21:26.734Z"}
{"msg":"So @yacovm is right that the path that touches on updating the certificates on an existing replica/OSN is a bit hand-wavy.","username":"kostas","ts":"2018-08-13T17:48:17.943Z"}
{"msg":"Remember that we settled on a high-level approach on this a month ago or so, which can be summarized as:","username":"kostas","ts":"2018-08-13T17:48:42.848Z"}
{"msg":"This is a Fabric configuration update that should not trigger a Raft config update.","username":"kostas","ts":"2018-08-13T17:49:04.535Z"}
{"msg":"So the question is: how do we actually process these transactions and keep track of the new mapping? i.e. it used to be that replica 2 has cert \"foo\" and now its cert changes to \"bar\". We need to ensure that the new mapping reads:","username":"kostas","ts":"2018-08-13T17:50:39.698Z"}
{"msg":"```1: cert1\n2: bar\n3: cert3```","username":"kostas","ts":"2018-08-13T17:51:03.661Z"}
{"msg":"Instead of:","username":"kostas","ts":"2018-08-13T17:51:06.374Z"}
{"msg":"```1: cert1\n3: cert3\n4: bar```","username":"kostas","ts":"2018-08-13T17:51:20.440Z"}
{"msg":"(@yacovm - Did I get the question right?)","username":"kostas","ts":"2018-08-13T17:51:34.811Z"}
{"msg":"yeah","username":"yacovm","ts":"2018-08-13T17:51:39.047Z"}
{"msg":"Cool.","username":"kostas","ts":"2018-08-13T17:51:42.220Z"}
{"msg":"So here's what I'm thinking. And it's nothing exotic - standard process.","username":"kostas","ts":"2018-08-13T17:51:54.106Z"}
{"msg":"The `Chain` implements a `Configure` method.","username":"kostas","ts":"2018-08-13T17:52:22.396Z"}
{"msg":"hold on... before you dive in the code","username":"yacovm","ts":"2018-08-13T17:52:44.900Z"}
{"msg":"Sure.","username":"kostas","ts":"2018-08-13T17:52:51.766Z"}
{"msg":"how do you distinguish?","username":"yacovm","ts":"2018-08-13T17:53:00.290Z"}
{"msg":"i mean, conceptually","username":"yacovm","ts":"2018-08-13T17:53:23.952Z"}
{"msg":"I write logic that unpacks the `LastUpdate` of the proposed configuration and detects what's going on.","username":"kostas","ts":"2018-08-13T17:53:50.836Z"}
{"msg":"I will need to do that anyway for that bit where we are supposed to reject any configuration update that increases/decreases the replica set by more than one node at a time. (Per the doc.)","username":"kostas","ts":"2018-08-13T17:54:33.371Z"}
{"msg":"And on the leader side again, when they're about to create the config block and have it ordered, they will execute the same bit of processing logic, and update the config block's metadata (which carries the mapping) accordingly.","username":"kostas","ts":"2018-08-13T17:55:55.374Z"}
{"msg":"In fact, now that I think of it, this bit of logic should only be executed on the leader before they ask to have the config block ordered.","username":"kostas","ts":"2018-08-13T17:56:39.619Z"}
{"msg":"We don't need it on ingress.","username":"kostas","ts":"2018-08-13T17:56:44.533Z"}
{"msg":"The only custom piece of config processing logic on ingress should be:","username":"kostas","ts":"2018-08-13T17:56:59.294Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=J25FrcpgCjgpey9Bu","username":"kostas","ts":"2018-08-13T17:57:03.024Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=J25FrcpgCjgpey9Bu","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=J25FrcpgCjgpey9Bu","remote":true,"fileId":null,"fileName":null}]}
{"msg":"So, any comm layer changes will have to take effect once a new config block (with its associated metadata) is written to the ledger.","username":"kostas","ts":"2018-08-13T17:57:47.240Z"}
{"msg":"I still don't understand how you distinguish the 2","username":"yacovm","ts":"2018-08-13T17:58:10.128Z"}
{"msg":"Q1: Do I, the code author, have access to the most recent block metadata?","username":"kostas","ts":"2018-08-13T17:58:44.382Z"}
{"msg":"lets say you have access to any data in the world and you are computationally un-bounded","username":"yacovm","ts":"2018-08-13T17:59:09.577Z"}
{"msg":"how do you understand the config update's intent? ","username":"yacovm","ts":"2018-08-13T17:59:24.045Z"}
{"msg":"I read the `LastUpdate` and extract its `Writeset`?","username":"kostas","ts":"2018-08-13T17:59:52.697Z"}
{"msg":"And if what it wishes to update is the Consenter set, I go over each item and keep track of what's being modified?","username":"kostas","ts":"2018-08-13T18:00:13.591Z"}
{"msg":"yeah, you know the previous mapping","username":"yacovm","ts":"2018-08-13T18:00:17.127Z"}
{"msg":"you know the previous mapping of IDs to certificates","username":"yacovm","ts":"2018-08-13T18:00:24.345Z"}
{"msg":"but on the next config update you don't have the mapping","username":"yacovm","ts":"2018-08-13T18:00:33.404Z"}
{"msg":"and i understand that you can backward map the certs to the ID","username":"yacovm","ts":"2018-08-13T18:00:56.399Z"}
{"msg":"but how do you know if the ID changes or you should add a new ID?","username":"yacovm","ts":"2018-08-13T18:01:06.301Z"}
{"msg":"but how do you know if the certs changes or you should add a new ID?","username":"yacovm","ts":"2018-08-13T18:01:06.301Z"}
{"msg":"(I may have to cut off temporarily shortly, but I'll be back.)","username":"kostas","ts":"2018-08-13T18:01:37.622Z"}
{"msg":"So --","username":"kostas","ts":"2018-08-13T18:01:38.973Z"}
{"msg":"When I know the metadata I know:","username":"kostas","ts":"2018-08-13T18:01:47.701Z"}
{"msg":"`Raft node ID - OSN.host+port - OSN.certs`","username":"kostas","ts":"2018-08-13T18:02:15.853Z"}
{"msg":"Cannot we just add node id to solve your question @yacovm ?","username":"C0rWin","ts":"2018-08-13T18:02:19.235Z"}
{"msg":"that's what I am recommending Artem :) ","username":"yacovm","ts":"2018-08-13T18:02:29.988Z"}
{"msg":"Folks, I've got about 5 pages in the document explaining why the node ID is a no go.","username":"kostas","ts":"2018-08-13T18:03:09.567Z"}
{"msg":"Oh, I see. Having node id will allow to clearly and very easy distinguish ","username":"C0rWin","ts":"2018-08-13T18:03:11.464Z"}
{"msg":"Kostas - I just want to understand how we distinguish... that's all","username":"yacovm","ts":"2018-08-13T18:03:45.893Z"}
{"msg":"And I'm in the process of explaining it.","username":"kostas","ts":"2018-08-13T18:03:54.510Z"}
{"msg":"> When I know the metadata I know: `Raft node ID - OSN.host+port - OSN.certs`","username":"kostas","ts":"2018-08-13T18:04:10.409Z"}
{"msg":"Do you agree with this?","username":"kostas","ts":"2018-08-13T18:04:14.710Z"}
{"msg":"yeah","username":"yacovm","ts":"2018-08-13T18:04:17.376Z"}
{"msg":"Cool. And the writeset of the Fabric config update will include:","username":"kostas","ts":"2018-08-13T18:04:35.275Z"}
{"msg":"`OSN.host+port - new.OSN.cert`","username":"kostas","ts":"2018-08-13T18:04:46.857Z"}
{"msg":"So I can then join these two pieces and do the updating?","username":"kostas","ts":"2018-08-13T18:05:09.869Z"}
{"msg":"`OSN.host+port` is common between the two.","username":"kostas","ts":"2018-08-13T18:05:29.704Z"}
{"msg":"you're saying you are using the OSN.host:port to map to the ID","username":"yacovm","ts":"2018-08-13T18:05:39.258Z"}
{"msg":"During this kind update, yes.","username":"kostas","ts":"2018-08-13T18:06:06.183Z"}
{"msg":"Do you see any flaws to this approach?","username":"kostas","ts":"2018-08-13T18:06:14.083Z"}
{"msg":"that's what I was asking you","username":"yacovm","ts":"2018-08-13T18:07:30.571Z"}
{"msg":"and I'm not sure we can say it is","username":"yacovm","ts":"2018-08-13T18:07:39.535Z"}
{"msg":"I see your message in the private chat now.","username":"kostas","ts":"2018-08-13T18:07:51.882Z"}
{"msg":"You had indeed suggested this but I missed it.","username":"kostas","ts":"2018-08-13T18:07:58.324Z"}
{"msg":"it might be that we need to change the host and because of that - we need to also change the server cert because we would need to change the DNS/IP SAN","username":"yacovm","ts":"2018-08-13T18:08:12.974Z"}
{"msg":"> and I'm not sure we can say it is\nWe can say it is... flawed?","username":"kostas","ts":"2018-08-13T18:08:15.147Z"}
{"msg":"We are overthinking this.","username":"kostas","ts":"2018-08-13T18:08:39.421Z"}
{"msg":"If the host needs to change, drop the node and add it as a new one.","username":"kostas","ts":"2018-08-13T18:08:51.687Z"}
{"msg":"Optimize for the common case.","username":"kostas","ts":"2018-08-13T18:08:56.188Z"}
{"msg":"What will raft do in such a case, btw?","username":"yacovm","ts":"2018-08-13T18:09:22.530Z"}
{"msg":"Meaning?","username":"kostas","ts":"2018-08-13T18:09:36.664Z"}
{"msg":"you have a new node that has a valid log ","username":"yacovm","ts":"2018-08-13T18:09:45.186Z"}
{"msg":"will Raft handle that gracefully ? ","username":"yacovm","ts":"2018-08-13T18:09:53.047Z"}
{"msg":"surely, the other nodes will think at least at first, that it's a new node","username":"yacovm","ts":"2018-08-13T18:10:08.740Z"}
{"msg":"Yes.","username":"kostas","ts":"2018-08-13T18:10:08.785Z"}
{"msg":"It will find its place and sync up as needed, no issues.","username":"kostas","ts":"2018-08-13T18:10:21.647Z"}
{"msg":"so if we are over-optimizing this, I suggest we don't do the endpoint (host:port) mapping idea","username":"yacovm","ts":"2018-08-13T18:10:44.319Z"}
{"msg":"and go full new node each time","username":"yacovm","ts":"2018-08-13T18:10:53.648Z"}
{"msg":"less code paths to check in integration","username":"yacovm","ts":"2018-08-13T18:11:01.468Z"}
{"msg":"and if you say raft handles this well - then we need to always use it","username":"yacovm","ts":"2018-08-13T18:11:11.245Z"}
{"msg":"This is actually totally fine with me as well.","username":"kostas","ts":"2018-08-13T18:11:11.670Z"}
{"msg":"Depends on what our assumption is regarding TLS certs and how often they need to be rotated and changed.","username":"kostas","ts":"2018-08-13T18:11:36.124Z"}
{"msg":"I'd say once in every 3 months is good","username":"yacovm","ts":"2018-08-13T18:11:53.059Z"}
{"msg":"I believe this is how this whole convo started in the Google Doc as well, following Gari's observation.","username":"kostas","ts":"2018-08-13T18:11:58.038Z"}
{"msg":"hey I'm fine with everything we do as long as we are convinced it should work...","username":"yacovm","ts":"2018-08-13T18:13:15.725Z"}
{"msg":"Heh. We are actually not convinced it works until the integration test passes.","username":"kostas","ts":"2018-08-13T18:14:01.701Z"}
{"msg":"I mean, we do our best to study the paths and account for side-effects, but we'll certainly miss stuff.","username":"kostas","ts":"2018-08-13T18:14:27.752Z"}
{"msg":"Have we captured the `OnStep/OnSubmit` contract in JIRA or in the doc?","username":"kostas","ts":"2018-08-14T14:53:21.400Z"}
{"msg":"It's a smart contract ","username":"yacovm","ts":"2018-08-14T14:55:26.392Z"}
{"msg":"seriously - it's just an API between the communication and the consumers of it","username":"yacovm","ts":"2018-08-14T14:55:56.577Z"}
{"msg":" it's just an API between the communication and the consumers of it","username":"yacovm","ts":"2018-08-14T14:55:56.577Z"}
{"msg":"Where is this contract documented?","username":"kostas","ts":"2018-08-14T15:21:30.610Z"}
{"msg":"no idea.... ","username":"yacovm","ts":"2018-08-14T15:21:59.573Z"}
{"msg":"@kostas - i want to push the communication today - can i just use the story JIRA?","username":"yacovm","ts":"2018-08-14T15:22:13.627Z"}
{"msg":"I want to push several commits with the same JIRA number","username":"yacovm","ts":"2018-08-14T15:22:22.811Z"}
{"msg":"I'd create a sub-task under FAB-11161 capturing the specifics of the work (for you it's most likely the description you wrote in FAB-11161 - you can copy and paste it if that's the case) and submit it against that sub-task.","username":"kostas","ts":"2018-08-14T15:25:12.233Z"}
{"msg":"I want FAB-11161 to be the parent story for Week 6-8: https://docs.google.com/spreadsheets/d/1R02-xjdl4hNw90kN4NZ1kX0f4QoIYn51_1UHlwy-GQs/edit#gid=2125670104","username":"kostas","ts":"2018-08-14T15:25:50.561Z"}
{"msg":"So we may wish to add more sub-tasks to it later on.","username":"kostas","ts":"2018-08-14T15:26:10.120Z"}
{"msg":"ok so i will open a new one","username":"yacovm","ts":"2018-08-14T15:26:24.033Z"}
{"msg":"and submit 2 change sets for the same JIRA","username":"yacovm","ts":"2018-08-14T15:26:30.991Z"}
{"msg":"makes sense to you?","username":"yacovm","ts":"2018-08-14T15:26:34.941Z"}
{"msg":"Sure.","username":"kostas","ts":"2018-08-14T15:26:57.004Z"}
{"msg":"oook","username":"yacovm","ts":"2018-08-14T15:44:36.318Z"}
{"msg":"are you ready?","username":"yacovm","ts":"2018-08-14T15:44:39.541Z"}
{"msg":"https://gerrit.hyperledger.org/r/#/c/25533/\nhttps://gerrit.hyperledger.org/r/#/c/25535/\ntadaaa","username":"yacovm","ts":"2018-08-14T15:45:04.456Z"}
{"msg":"1) 100% code coverage, runs in ~ 2 seconds on average\n2) no data races (I checked)","username":"yacovm","ts":"2018-08-14T15:45:24.801Z"}
{"msg":"Got it, thanks Yacov. Will review.","username":"kostas","ts":"2018-08-14T15:46:33.782Z"}
{"msg":"sure, if something isn't clear feel free to ask, but i tried to put lots of documentation in the code to make it clear","username":"yacovm","ts":"2018-08-14T15:54:36.860Z"}
{"msg":"I'm writing down all the stories with acceptance criteria so that we can have some backlog.","username":"kostas","ts":"2018-08-14T16:53:08.740Z"}
{"msg":"Here's an issue I think I've bumped into.","username":"kostas","ts":"2018-08-14T16:53:17.021Z"}
{"msg":"It has to do with how we process configuration update transactions that modify the consenter set (by just one node, i.e. valid configuration updates).","username":"kostas","ts":"2018-08-14T16:53:53.215Z"}
{"msg":"As a spoiler alert, I think it is an invalid edge case, but let's make sure.","username":"kostas","ts":"2018-08-14T16:54:27.941Z"}
{"msg":"You have only 1 ordering service node. (Which is below the minimum 3.)","username":"kostas","ts":"2018-08-14T16:54:45.569Z"}
{"msg":"Ah, nevermind -- as I was writing out the scenario, I figured out that we're covered against it.","username":"kostas","ts":"2018-08-14T17:04:13.216Z"}
{"msg":"@kostas updated https://jira.hyperledger.org/browse/FAB-11162 to document `FSM` APIs","username":"guoger","ts":"2018-08-14T17:19:32.153Z"}
{"msg":"tomorrow I will 1) implement `OnLeaderChange` callback and document it, 2) rename pkg to etcdraft, 3) address remaining comments on that CR, namely storage engine","username":"guoger","ts":"2018-08-14T17:21:21.440Z"}
{"msg":"Jay: thanks! For the storage engine comment, what I'm driving at is that \"expose (almost) everything\" mentality that I'd like us to adopt for this package. Matt's advice comes down to \"exposing the injection points\", but I'd take it a step further for now and say \"expose almost everything\" because we can't properly tell the injection points for now. (The storage engine comment is a perfect example of this.)","username":"kostas","ts":"2018-08-14T17:37:35.138Z"}
{"msg":"@C0rWin I pushed a revision here https://gerrit.hyperledger.org/r/c/24919/12 to add `IsLeader() bool` method. I didn't do callback because:\n- i'm not sure if it's blocking\n- if there's an error, `fsm` is not able to handle it.\nif you check leadership when you are about to cut a block and act accordingly, it should be enough?\nAlso, jira is updated","username":"guoger","ts":"2018-08-15T09:16:43.155Z"}
{"msg":"Thanks, no I am not blocked ","username":"C0rWin","ts":"2018-08-15T09:18:20.758Z"}
{"msg":"oh wait, I just realized this doesn't solve this problem https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zv3LW5nDNCDXqxwvu\nyou need to be _immediately_ notified upon leadership change to purge blockcutter, right?","username":"guoger","ts":"2018-08-15T09:23:51.579Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zv3LW5nDNCDXqxwvu","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zv3LW5nDNCDXqxwvu","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Correct, the blockcutter needs to be purged right a way. You’re looking at something like LeaderChanged and it returns an empty struct channel.","username":"kostas","ts":"2018-08-15T10:35:58.033Z"}
{"msg":"Correct, the blockcutter needs to be purged right away. You’re looking at something like LeaderChanged and it returns an empty struct channel.","username":"kostas","ts":"2018-08-15T10:35:58.033Z"}
{"msg":"Correct, the blockcutter needs to be purged right away. You’re probably looking at something like `LeaderChanged() <- chan struct{}`.","username":"kostas","ts":"2018-08-15T10:35:58.033Z"}
{"msg":"FWIW: https://github.com/coreos/etcd/issues/9965","username":"kostas","ts":"2018-08-15T12:33:22.375Z"}
{"msg":"@yacovm: If one were to review your CRs, what would you suggest they start with? Is there maybe a specific test that will make everything sink in? A 3-line high-level overview of how your structs interact with each other?","username":"kostas","ts":"2018-08-15T14:35:18.801Z"}
{"msg":"the basic tet ;) ","username":"yacovm","ts":"2018-08-15T14:35:33.836Z"}
{"msg":"the basic test ;) ","username":"yacovm","ts":"2018-08-15T14:35:33.836Z"}
{"msg":"*test","username":"yacovm","ts":"2018-08-15T14:35:36.958Z"}
{"msg":"I figured (https://gerrit.hyperledger.org/r/c/25533/4/orderer/common/cluster/comm_test.go#222), but then again, you never know, and I guess I'm fishing more for the second part of the question.","username":"kostas","ts":"2018-08-15T14:36:15.952Z"}
{"msg":"hold on please, in a call","username":"yacovm","ts":"2018-08-15T14:36:28.310Z"}
{"msg":"No rush.","username":"kostas","ts":"2018-08-15T14:36:32.251Z"}
{"msg":"aah so w.r.t how structs interact with each other - the `Comm` struct is the communication implementation https://gerrit.hyperledger.org/r/#/c/25533/4/orderer/common/cluster/comm.go@80\nand it uses a `ConnectionStore` to store the connections https://gerrit.hyperledger.org/r/#/c/25533/4/orderer/common/cluster/connections.go@39 mapped by TLS certificates","username":"yacovm","ts":"2018-08-15T14:46:21.978Z"}
{"msg":"that's basically the first CR","username":"yacovm","ts":"2018-08-15T14:46:34.803Z"}
{"msg":"Perfect, that should get me going.","username":"kostas","ts":"2018-08-15T14:47:03.384Z"}
{"msg":"now for the second - the `service.go` is the implementation of the gRPC service itself but it just dispatches stuff into `Comm`","username":"yacovm","ts":"2018-08-15T14:47:04.724Z"}
{"msg":"and a corresponding \"client side\" is the `rpc.go`","username":"yacovm","ts":"2018-08-15T14:47:16.218Z"}
{"msg":"Hold off on the second for now. (Or post, and be ready for Qs later.)","username":"kostas","ts":"2018-08-15T14:47:18.269Z"}
{"msg":"they both use `Comm`","username":"yacovm","ts":"2018-08-15T14:47:19.684Z"}
{"msg":"Do we have an educated take as to whether we should be using `require` versus `assert`?","username":"kostas","ts":"2018-08-16T16:10:46.970Z"}
{"msg":"Do we have an educated take as to whether our `assert` statements in tests should be converted to `require`? We're asserting, but as I think about it, we should be requiring.","username":"kostas","ts":"2018-08-16T16:24:46.802Z"}
{"msg":"why?","username":"yacovm","ts":"2018-08-16T16:25:05.400Z"}
{"msg":"Fail fast?","username":"kostas","ts":"2018-08-16T16:26:09.429Z"}
{"msg":"I dont fail","username":"yacovm","ts":"2018-08-16T16:28:03.628Z"}
{"msg":"If the test fails","username":"yacovm","ts":"2018-08-16T16:28:28.277Z"}
{"msg":"IT is brittle","username":"yacovm","ts":"2018-08-16T16:28:35.767Z"}
{"msg":"It is brittle","username":"yacovm","ts":"2018-08-16T16:28:35.767Z"}
{"msg":"So the real problem is in the test","username":"yacovm","ts":"2018-08-16T16:28:50.840Z"}
{"msg":"No in the command you use- require/assert","username":"yacovm","ts":"2018-08-16T16:29:03.506Z"}
{"msg":"And if we need to use require instead of asset to figure out the problem then we have a bigger problem","username":"yacovm","ts":"2018-08-16T16:29:59.528Z"}
{"msg":"Not sure I follow the reasoning.","username":"kostas","ts":"2018-08-16T16:30:14.499Z"}
{"msg":"I'm saying it doesnt matter","username":"yacovm","ts":"2018-08-16T16:30:35.923Z"}
{"msg":"Neither should fail ","username":"yacovm","ts":"2018-08-16T16:31:05.470Z"}
{"msg":"> Neither should fail\nWho argued for the opposite?","username":"kostas","ts":"2018-08-16T16:55:37.497Z"}
{"msg":"The whole point is whether we should be failing fast. And I think we should.","username":"kostas","ts":"2018-08-16T16:55:55.664Z"}
{"msg":"See first paragraph here: https://npf.io/2017/08/lies/","username":"kostas","ts":"2018-08-16T16:56:21.518Z"}
{"msg":"If you have parallel code that has asserts in goroutines, then having them all logged in the test failure, might give you more information why the test failed than if you had require and you'd fail fast","username":"yacovm","ts":"2018-08-16T17:38:12.683Z"}
{"msg":"if you want me to change the asserts to requires in my code, please say so in the code review","username":"yacovm","ts":"2018-08-16T17:38:53.799Z"}
{"msg":"but keep in mind it would take time, and once you waste time you never reclaim it","username":"yacovm","ts":"2018-08-16T17:42:10.375Z"}
{"msg":"> We're asserting, but as I think about it, we should be requiring.\ndoes \"fail fast\" the only pros of `require` vs `assert`?","username":"C0rWin","ts":"2018-08-16T18:02:22.311Z"}
{"msg":"should we actually wait for a block to be consented before proposing next block? per https://gerrit.hyperledger.org/r/c/25587/5/orderer/consensus/raft/chain.go#201\ncc @C0rWin @kostas ","username":"guoger","ts":"2018-08-20T11:21:43.118Z"}
{"msg":"i thought the order is persisted: _ on raft leader, if `propose(A)` is called before `propose(B)`, then A is guaranteed to be ready before B_","username":"guoger","ts":"2018-08-20T11:23:56.410Z"}
{"msg":"Right now, we _have to_ do that. Because `CreateNextBlock` and `WriteNextBlock` are tightly coupled.","username":"kostas","ts":"2018-08-20T11:25:51.331Z"}
{"msg":"See footnote 13 on the document and Week 11 on the spreadsheet (when we'll address this).","username":"kostas","ts":"2018-08-20T11:26:11.745Z"}
{"msg":"oh right, I forgot about that","username":"guoger","ts":"2018-08-20T11:26:14.430Z"}
{"msg":"thx","username":"guoger","ts":"2018-08-20T11:26:32.077Z"}
{"msg":"Right, so _today_ we are unable to calculate the hash of B unless A has been written on our ledger.","username":"kostas","ts":"2018-08-20T11:26:47.947Z"}
{"msg":"Has joined the channel.","username":"bdjidi","ts":"2018-08-21T22:48:34.675Z","type":"uj"}
{"msg":"Jay's experimenting with a joint chain+FSM approach in his latest patchset: https://gerrit.hyperledger.org/r/c/24919/","username":"kostas","ts":"2018-08-22T12:19:58.653Z"}
{"msg":"This is a divergence from the original design but an inexpensive exploration, esp. given that Artem's CR is a WIP. ","username":"kostas","ts":"2018-08-22T12:20:39.750Z"}
{"msg":"We review and if it makes sense, we roll with it. If not, we revert back. Code is malleable.","username":"kostas","ts":"2018-08-22T12:20:59.781Z"}
{"msg":"Please take a look if the approach makes sense and if I'm in the right direction. \nhttps://gerrit.hyperledger.org/r/#/c/25891/1/orderer/consensus/etcdraft/dispatcher.go\nIf yes - then I'll add tests","username":"yacovm","ts":"2018-08-26T20:02:12.924Z"}
{"msg":"@kostas added sender ID per your request. Also, I think you accidentally updated my CR when you uploaded yours :P","username":"guoger","ts":"2018-08-27T14:39:26.285Z"}
{"msg":"(Probably, Yacov right?)","username":"kostas","ts":"2018-08-27T14:40:45.744Z"}
{"msg":"oh, @yacovm , wrong person :P","username":"guoger","ts":"2018-08-27T14:42:30.277Z"}
{"msg":"I just rebased your CR though","username":"yacovm","ts":"2018-08-27T14:47:17.723Z"}
{"msg":"Did not touch the code","username":"yacovm","ts":"2018-08-27T14:47:23.838Z"}
{"msg":"At least i think so","username":"yacovm","ts":"2018-08-27T14:47:47.981Z"}
{"msg":"ah, ok. I didn't see some newly added files back then so I thought it may get lost while being updated. Anyways, just rebased and added `sender`","username":"guoger","ts":"2018-08-27T14:49:17.501Z"}
{"msg":"Looking at the dispatcher CR. Let's expand a bit on how we expect it to be used in practice. We need a singleton that implements the ReceiverGetter interface in that CR. What is this singleton tasked with other than implementing that interface?","username":"kostas","ts":"2018-08-27T15:34:00.960Z"}
{"msg":"For instance, this will most likely be the singleton binding the grpcServer with the clusterServer, no?","username":"kostas","ts":"2018-08-27T15:34:32.175Z"}
{"msg":"No....","username":"yacovm","ts":"2018-08-27T16:58:03.574Z"}
{"msg":"We just need to somehow connect it to the regostrar","username":"yacovm","ts":"2018-08-27T16:58:20.473Z"}
{"msg":"*regostrar","username":"yacovm","ts":"2018-08-27T16:58:25.323Z"}
{"msg":"*registrar","username":"yacovm","ts":"2018-08-27T16:58:38.443Z"}
{"msg":"Expand on this please.","username":"kostas","ts":"2018-08-27T17:07:04.250Z"}
{"msg":"it's easy...","username":"yacovm","ts":"2018-08-27T17:07:31.748Z"}
{"msg":"I am dumb.","username":"kostas","ts":"2018-08-27T17:07:35.798Z"}
{"msg":"we need someone to give you the instances of the consenters/chains","username":"yacovm","ts":"2018-08-27T17:07:48.081Z"}
{"msg":"right?","username":"yacovm","ts":"2018-08-27T17:07:49.980Z"}
{"msg":"that's what that thing does","username":"yacovm","ts":"2018-08-27T17:07:53.193Z"}
{"msg":"the registrar currently maps this, no?","username":"yacovm","ts":"2018-08-27T17:08:02.434Z"}
{"msg":"it holds the consensus specific pointer to the consenter","username":"yacovm","ts":"2018-08-27T17:08:26.260Z"}
{"msg":"so we need somehow, i think -to connect from that point","username":"yacovm","ts":"2018-08-27T17:08:35.517Z"}
{"msg":"to where we are","username":"yacovm","ts":"2018-08-27T17:08:38.091Z"}
{"msg":"Alright, hear me out for a bit. ","username":"kostas","ts":"2018-08-27T17:09:12.082Z"}
{"msg":"We need to bind the gRPC server to the clusterServer.","username":"kostas","ts":"2018-08-27T17:09:31.775Z"}
{"msg":"sure","username":"yacovm","ts":"2018-08-27T17:09:33.187Z"}
{"msg":"to the *Service* ;) ","username":"yacovm","ts":"2018-08-27T17:09:49.262Z"}
{"msg":"`service.go`","username":"yacovm","ts":"2018-08-27T17:09:53.212Z"}
{"msg":"https://github.com/hyperledger/fabric/blob/release-1.2/orderer/common/server/main.go#L109","username":"kostas","ts":"2018-08-27T17:10:48.765Z"}
{"msg":"Likewise, we'll be looking at an `op.RegisterClusterServer(grpcServer.Server(), clusterServerImplGoesHere)`, correct?","username":"kostas","ts":"2018-08-27T17:11:22.504Z"}
{"msg":"ok","username":"yacovm","ts":"2018-08-27T17:12:00.456Z"}
{"msg":"And presumably this call will reside in a `[consenters\"etcdraft\"] = etcdraft.New(...)` line that will live here: https://github.com/hyperledger/fabric/blob/release-1.2/orderer/common/server/main.go#L258 before we pass on the `consenters` map to the registrar constructor.","username":"kostas","ts":"2018-08-27T17:12:49.877Z"}
{"msg":"Now, we need to do the binding _once_.","username":"kostas","ts":"2018-08-27T17:13:30.351Z"}
{"msg":"Kostas can we talk about this tomorrow in a screen sharing session?","username":"yacovm","ts":"2018-08-27T17:14:32.225Z"}
{"msg":"Of course.","username":"kostas","ts":"2018-08-27T17:14:45.521Z"}
{"msg":"cool thanks","username":"yacovm","ts":"2018-08-27T17:14:50.772Z"}
{"msg":"@guoger \nhttps://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/3978/console","username":"yacovm","ts":"2018-08-27T20:08:58.000Z"}
{"msg":"```\n\n15:12:25 unit-tests_1  | ••••••••••panic: runtime error: invalid memory address or nil pointer dereference\n15:12:25 unit-tests_1  | [signal SIGSEGV: segmentation violation code=0x1 addr=0x28 pc=0xdd259f]\n15:12:25 unit-tests_1  | \n15:12:25 unit-tests_1  | goroutine 214 [running]:\n15:12:25 unit-tests_1  | github.com/hyperledger/fabric/orderer/consensus/etcdraft_test.glob..func1.2.3.1(0x2, 0xc420312d20, 0x4, 0xc42000dde0, 0x2)\n15:12:25 unit-tests_1  | \t/opt/gopath/src/github.com/hyperledger/fabric/orderer/consensus/etcdraft/chain_test.go:192 +0x4f\n15:12:25 unit-tests_1  | github.com/hyperledger/fabric/orderer/consensus/etcdraft/etcdraftfakes.(*FakeTransport).Step(0xc420212a90, 0x2, 0xc420312d20, 0x1c, 0x1c, 0x2)\n15:12:25 unit-tests_1  | \t/opt/gopath/src/github.com/hyperledger/fabric/orderer/consensus/etcdraft/etcdraftfakes/fake_transport.go:52 +0x273\n15:12:25 unit-tests_1  | github.com/hyperledger/fabric/orderer/consensus/etcdraft.(*Chain).send(0xc42001ccc0, 0xc4202d4000, 0x1, 0x1)\n15:12:25 unit-tests_1  | \t/opt/gopath/src/github.com/hyperledger/fabric/orderer/consensus/etcdraft/chain.go:417 +0x1f7\n15:12:25 unit-tests_1  | github.com/hyperledger/fabric/orderer/consensus/etcdraft.(*Chain).serveRaft(0xc42001ccc0)\n15:12:25 unit-tests_1  | \t/opt/gopath/src/github.com/hyperledger/fabric/orderer/consensus/etcdraft/chain.go:326 +0x2ad\n15:12:25 unit-tests_1  | created by github.com/hyperledger/fabric/orderer/consensus/etcdraft.(*Chain).Start\n15:12:25 unit-tests_1  | \t/opt/gopath/src/github.com/hyperledger/fabric/orderer/consensus/etcdraft/chain.go:141 +0xdf\n```","username":"yacovm","ts":"2018-08-27T20:09:11.275Z"}
{"msg":"@guoger I rebased your https://gerrit.hyperledger.org/r/#/c/24919/ on top of my https://gerrit.hyperledger.org/r/#/c/25891/","username":"yacovm","ts":"2018-08-27T21:07:01.691Z"}
{"msg":"hope you don't mind :) ","username":"yacovm","ts":"2018-08-27T21:07:05.827Z"}
{"msg":"https://gerrit.hyperledger.org/r/#/c/25479/ is conflicted though, and can't be rebased without non trivial conflict resolution ","username":"yacovm","ts":"2018-08-27T21:07:47.383Z"}
{"msg":"@kostas please merge https://gerrit.hyperledger.org/r/#/c/25891/ :) ","username":"yacovm","ts":"2018-08-28T16:07:58.149Z"}
{"msg":"Has anybody tried using `delve` with either `orderer`, `configtxlator`, `configtxgen`? I keep getting this error:\n`could not launch process: decoding dwarf section info at offset 0x0: too short` \neven with `dlv debug`.","username":"adarshsaraf123","ts":"2018-08-29T11:58:21.336Z"}
{"msg":"@adarshsaraf123: I have and have bumped into the exact same issue.","username":"kostas","ts":"2018-08-29T17:29:47.769Z"}
{"msg":"Unfortunately, I never bothered to investigate it further.","username":"kostas","ts":"2018-08-29T17:29:59.230Z"}
{"msg":"@kostas Thanks for the confirmation. I have tried long enough and have given up :sweat_smile: ","username":"adarshsaraf123","ts":"2018-08-29T17:31:29.000Z"}
{"msg":"@guoger ","username":"yacovm","ts":"2018-08-30T08:43:28.792Z"}
{"msg":"what is this clocking thing in your CR","username":"yacovm","ts":"2018-08-30T08:43:36.400Z"}
{"msg":"and what is its purpose in life?","username":"yacovm","ts":"2018-08-30T08:43:43.392Z"}
{"msg":"clocking bool?","username":"guoger","ts":"2018-08-30T08:44:00.816Z"}
{"msg":"yeah","username":"yacovm","ts":"2018-08-30T08:44:03.627Z"}
{"msg":"indicate if timer is alive","username":"guoger","ts":"2018-08-30T08:45:09.432Z"}
{"msg":"alive?","username":"yacovm","ts":"2018-08-30T08:45:25.381Z"}
{"msg":"if it's running","username":"guoger","ts":"2018-08-30T08:46:04.037Z"}
{"msg":"(not sure how to describe it in proper english :P)","username":"guoger","ts":"2018-08-30T08:46:23.151Z"}
{"msg":"so basically...","username":"yacovm","ts":"2018-08-30T08:46:32.997Z"}
{"msg":"`serveRequest` both tells blocks to be cut","username":"yacovm","ts":"2018-08-30T08:46:47.418Z"}
{"msg":"and also orders into the block cutter?","username":"yacovm","ts":"2018-08-30T08:46:54.081Z"}
{"msg":"it's essentially `main()` in solo/consensus.go","username":"guoger","ts":"2018-08-30T08:48:13.227Z"}
{"msg":"I admit i don't understand something fundamental","username":"yacovm","ts":"2018-08-30T08:49:21.540Z"}
{"msg":"oh, nevermind. got it","username":"yacovm","ts":"2018-08-30T08:49:53.846Z"}
{"msg":"how exactly do we determine node IDs? I submitted [this CR](https://gerrit.hyperledger.org/r/c/25964/) to implement following statement in design doc page 16\n> During this iteration, each consenter also compares its own TLS certificates with the ones in the slice in order to detect its own node ID. Both its own ID, and the list of IDs it collected during the slice iteration, should be passed on to the Raft FSM constructor. (See Section C.I.3 \"The Raft FSM\".)\n\nI'm not exactly sure where to get _own TLS cert_?","username":"guoger","ts":"2018-08-30T08:55:41.299Z"}
{"msg":"appreciate some enlightenments...","username":"guoger","ts":"2018-08-30T08:56:41.719Z"}
{"msg":"I guess that should be a part of localconfig.EtcdRaft isnt it? Each orderer node should be able to locally specify the same in orderer.yaml","username":"adarshsaraf123","ts":"2018-08-30T09:17:44.204Z"}
{"msg":"I guess that should be a part of localconfig.EtcdRaft, isnt it? Each orderer node should be able to locally specify the same in orderer.yaml","username":"adarshsaraf123","ts":"2018-08-30T09:17:44.204Z"}
{"msg":"your own TLS certificate is from the orderer global config no?","username":"yacovm","ts":"2018-08-30T09:35:16.748Z"}
{"msg":"```\n\t\t\tbatches, _ := c.support.BlockCutter().Ordered(msg.Content)\n\t\t\tif len(batches) == 0 {\n\t\t\t\tif !clocking {\n\t\t\t\t\tclocking = true\n\t\t\t\t\ttimer.Reset(c.support.SharedConfig().BatchTimeout())\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n```\n\n@guoger - so if a block hasn't been cut yet, you reset the timer... can you explain why?","username":"yacovm","ts":"2018-08-30T09:49:55.074Z"}
{"msg":"*if* a block is not cut *and* timer is not started, *then* we start the timer","username":"guoger","ts":"2018-08-30T09:51:02.381Z"}
{"msg":"oh","username":"yacovm","ts":"2018-08-30T09:51:24.858Z"}
{"msg":"> your own TLS certificate is from the orderer global config no?\nare we ever going to rotate cert?","username":"guoger","ts":"2018-08-30T09:52:09.742Z"}
{"msg":"yeah we can","username":"yacovm","ts":"2018-08-30T09:52:41.125Z"}
{"msg":"but we need a gRPC admin service for that","username":"yacovm","ts":"2018-08-30T09:53:00.120Z"}
{"msg":"which we don't have","username":"yacovm","ts":"2018-08-30T09:53:02.173Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=jsvfM5Gmn9eCS6JEM","username":"kostas","ts":"2018-08-30T16:52:06.288Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=jsvfM5Gmn9eCS6JEM","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=jsvfM5Gmn9eCS6JEM","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@guoger: ^^ That is correct. Also have a look at this comment: https://gerrit.hyperledger.org/r/c/25235/4#message-3869ab34_48116562","username":"kostas","ts":"2018-08-30T16:52:21.069Z"}
{"msg":"Actually, what on earth am I talking about.","username":"kostas","ts":"2018-08-30T16:59:16.718Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Q5BA3agm8mym9csGS","username":"kostas","ts":"2018-08-30T16:59:33.352Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Q5BA3agm8mym9csGS","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Q5BA3agm8mym9csGS","remote":true,"fileId":null,"fileName":null}]}
{"msg":"^^ This is correct.","username":"kostas","ts":"2018-08-30T16:59:39.707Z"}
{"msg":"The Consenter knows what its own certs are because it loads them from the localconfig.","username":"kostas","ts":"2018-08-30T17:00:03.505Z"}
{"msg":"And it iterarates over the global config to find them in that slice.","username":"kostas","ts":"2018-08-30T17:00:19.090Z"}
{"msg":"From a very-very early draft I was working on way back:","username":"kostas","ts":"2018-08-30T17:00:57.748Z"}
{"msg":"","username":"kostas","ts":"2018-08-30T17:01:02.523Z","attachments":[{"type":"file","title":"draggingScreenshot.png","title_link":"/file-upload/Aw7J96chxyam65GBm/draggingScreenshot.png","image_url":"/file-upload/Aw7J96chxyam65GBm/draggingScreenshot.png","image_type":"image/png","image_size":259382,"url":"/file-upload/Aw7J96chxyam65GBm/draggingScreenshot.png","remote":false,"fileId":"Aw7J96chxyam65GBm","fileName":"draggingScreenshot.png"}]}
{"msg":"(Back from before we realized that we need both clients _and_ server TLS certs.)","username":"kostas","ts":"2018-08-30T17:01:27.595Z"}
{"msg":"@kostas obviously you need to know your own TLS cert to know what to look in the etcdraft configuration. there is no going around this","username":"yacovm","ts":"2018-08-30T19:08:14.416Z"}
{"msg":"@kostas can you take a look at [this](https://gerrit.hyperledger.org/r/c/25964/) to see if it's on right track? thx","username":"guoger","ts":"2018-08-31T02:30:10.843Z"}
{"msg":"@kostas We will need to assert that each of the raft consenter nodes are listening on the host, port combination as specified in its `Consenter` info in the `metadata`. Am I right?","username":"adarshsaraf123","ts":"2018-08-31T21:18:36.027Z"}
{"msg":"from @yacovm \n> we need to add the stuff you put in the config\nyes, and @adarshsaraf123 has a patch for this","username":"guoger","ts":"2018-09-04T13:41:13.066Z"}
{"msg":"oh","username":"yacovm","ts":"2018-09-04T13:41:40.740Z"}
{"msg":"is it already there?","username":"yacovm","ts":"2018-09-04T13:41:43.754Z"}
{"msg":"Pushing the patch now..","username":"adarshsaraf123","ts":"2018-09-04T13:42:09.097Z"}
{"msg":"oh cool thanks","username":"yacovm","ts":"2018-09-04T13:42:24.260Z"}
{"msg":"https://gerrit.hyperledger.org/r/#/c/26074/ ","username":"adarshsaraf123","ts":"2018-09-04T13:57:05.822Z"}
{"msg":"@guoger: Sorry for the radio silence, I was sick most of last week.","username":"kostas","ts":"2018-09-04T14:28:12.285Z"}
{"msg":"Will look now.","username":"kostas","ts":"2018-09-04T14:28:16.482Z"}
{"msg":"I'll check the CRs from Adarsh and Yacov today as well.","username":"kostas","ts":"2018-09-04T14:28:26.638Z"}
{"msg":"That `timer` API is killing me.","username":"kostas","ts":"2018-09-04T14:54:45.254Z"}
{"msg":"> To prevent a timer created with NewTimer from firing after a call to Stop, check the return value and drain the channel.","username":"kostas","ts":"2018-09-04T14:54:49.804Z"}
{"msg":"```if !t.Stop() {\n\t<-t.C\n}```","username":"kostas","ts":"2018-09-04T14:54:56.415Z"}
{"msg":"We enter that branch if `t.Stop()` returns false.","username":"kostas","ts":"2018-09-04T14:55:17.926Z"}
{"msg":"According to the Godoc, `t.Stop()` returns false is the timer \"has already expired or been stopped.\"","username":"kostas","ts":"2018-09-04T14:55:38.836Z"}
{"msg":"Also from the Godoc: \"If a program has already received a value from t.C, the timer is known to have expired...\"","username":"kostas","ts":"2018-09-04T14:56:17.475Z"}
{"msg":"So, if you're hitting that branch when the timer has expired (i.e. someone has already received the value from `t.C`, aren't you going to be stuck in `<-t.C`?","username":"kostas","ts":"2018-09-04T14:56:58.149Z"}
{"msg":"Someone enlighten me. I'm obviously missing something.","username":"kostas","ts":"2018-09-04T14:57:07.852Z"}
{"msg":"Ah, the GoDoc does note: \"This cannot be done concurrent to other receives from the Timer's channel.\"","username":"kostas","ts":"2018-09-04T14:59:40.653Z"}
{"msg":"Still confused however. Wouldn't I want to drain `t.C` if t.Stop() returns true as well?","username":"kostas","ts":"2018-09-04T15:02:01.481Z"}
{"msg":"if `t.Stop()` returns true, then timer is guaranteed to be explicitly stopped, no signal sent on channel, so you don't need to drain it","username":"guoger","ts":"2018-09-04T15:12:08.843Z"}
{"msg":"maybe you can take a look at https://gerrit.hyperledger.org/r/c/25975, which wraps timer to hide these details","username":"guoger","ts":"2018-09-04T15:12:28.928Z"}
{"msg":"Just reviewed that one and still had that question :grin:","username":"kostas","ts":"2018-09-04T15:12:46.635Z"}
{"msg":"I like the work on that CR though - chain.go reads much cleaner.","username":"kostas","ts":"2018-09-04T15:13:00.654Z"}
{"msg":"(thanks to @yacovm 's suggestion)","username":"guoger","ts":"2018-09-04T15:13:11.859Z"}
{"msg":"Still confused damn it.","username":"kostas","ts":"2018-09-04T15:13:33.322Z"}
{"msg":"So:","username":"kostas","ts":"2018-09-04T15:13:44.477Z"}
{"msg":"In our case `t.Stop` will return false only if the timer has already expired.","username":"kostas","ts":"2018-09-04T15:14:05.111Z"}
{"msg":"(Added a follow-up comment in that CR.)","username":"kostas","ts":"2018-09-04T15:18:45.050Z"}
{"msg":"not exactly. i.e.\n```\n\t\t\tbatches, _ := c.support.BlockCutter().Ordered(msg.Content)\n\t\t\tif len(batches) == 0 {\n\t\t\t\ttimer.start(c.support.SharedConfig().BatchTimeout())\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\ttimer.stop()\n```\nand suppose following scenario:\nchain receives an envelope exceeding batch size, and this is the first envelope (timer was not started previously).\nIn this case, `timer.stop()` would stop a stopped timer (that's why we have `t.ticking` check in `stop()`","username":"guoger","ts":"2018-09-04T15:20:59.269Z"}
{"msg":"you can think both `stop()` and `start()` as idempotent","username":"guoger","ts":"2018-09-04T15:21:49.242Z"}
{"msg":"start a started timer - no effect\nstop a stopped timer - no effect","username":"guoger","ts":"2018-09-04T15:22:12.506Z"}
{"msg":"Roger. I think I get you now.","username":"kostas","ts":"2018-09-04T15:22:26.446Z"}
{"msg":"Since I have your attention:","username":"kostas","ts":"2018-09-04T15:23:06.529Z"}
{"msg":"https://gerrit.hyperledger.org/r/c/24919/29/orderer/consensus/etcdraft/chain.go#178","username":"kostas","ts":"2018-09-04T15:23:07.663Z"}
{"msg":"in follow-up cr, it's changed to \n```\n\tt := c.NewTimer(0)\n\tif !t.Stop() {\n\t\t<-t.C()\n\t}\n```","username":"guoger","ts":"2018-09-04T15:24:59.419Z"}
{"msg":"basically, we need a stopped timer at the end of this","username":"guoger","ts":"2018-09-04T15:25:14.313Z"}
{"msg":"Roger. Line 174 in the follow-up CR reads nicely now.","username":"kostas","ts":"2018-09-04T15:25:55.346Z"}
{"msg":"in original implementation, we most likely don't need to drain it, _unless_ `batchtimeout` is extremely small","username":"guoger","ts":"2018-09-04T15:26:08.411Z"}
{"msg":"Have a comment on that follow-up CR and I think we're golden.","username":"kostas","ts":"2018-09-04T15:26:08.563Z"}
{"msg":"ah, then `timer.C()` would panic","username":"guoger","ts":"2018-09-04T15:26:44.994Z"}
{"msg":"and we select on it in main loop","username":"guoger","ts":"2018-09-04T15:26:51.035Z"}
{"msg":"that's why we need a _stopped timer_, instead of _nil timer_","username":"guoger","ts":"2018-09-04T15:27:08.549Z"}
{"msg":"i don't get this https://gerrit.hyperledger.org/r/c/24919/29/orderer/consensus/etcdraft/chain.go#66\ndone?","username":"guoger","ts":"2018-09-04T15:29:01.812Z"}
{"msg":"Oh, a snafu when using Gerrit - meaning \"Done\", you've addressed the comment from patchset 28.","username":"kostas","ts":"2018-09-04T15:30:41.683Z"}
{"msg":"> ah, then `timer.C()` would panic\nGot it. Thanks!","username":"kostas","ts":"2018-09-04T15:30:57.791Z"}
{"msg":"oh I see","username":"guoger","ts":"2018-09-04T15:32:07.737Z"}
{"msg":"why do we need raft algorithm specific stuff in `orderer.yaml` ? ","username":"yacovm","ts":"2018-09-04T15:48:03.439Z"}
{"msg":"let's talk about configuraiton","username":"yacovm","ts":"2018-09-04T15:48:03.562Z"}
{"msg":"guys","username":"yacovm","ts":"2018-09-04T15:48:03.633Z"}
{"msg":"we should IMO move everything that relates to raft.Node to the channel config","username":"yacovm","ts":"2018-09-04T15:48:05.815Z"}
{"msg":"I don't disagree with that. Where do you see us specifying our client TLS cert though?","username":"kostas","ts":"2018-09-04T15:51:20.326Z"}
{"msg":"See comments here: https://gerrit.hyperledger.org/r/c/26074/3/sampleconfig/orderer.yaml","username":"kostas","ts":"2018-09-04T15:51:38.589Z"}
{"msg":"yeah I commented just now","username":"yacovm","ts":"2018-09-04T15:52:19.882Z"}
{"msg":"IMO we need to expand the global config to have a client TLS cert/key ","username":"yacovm","ts":"2018-09-04T15:52:36.338Z"}
{"msg":"I think we can do that later though","username":"yacovm","ts":"2018-09-04T15:52:43.005Z"}
{"msg":"I _ think _ cryptogen produces TLS certs that have both the server and client x509 extensions set","username":"yacovm","ts":"2018-09-04T15:53:06.582Z"}
{"msg":"so we can use the same one for now ;)","username":"yacovm","ts":"2018-09-04T15:53:11.374Z"}
{"msg":"(use the server cert as a client cert)","username":"yacovm","ts":"2018-09-04T15:53:21.463Z"}
{"msg":"Commented there right now, that works for me just fine and I think it's a good idea.","username":"kostas","ts":"2018-09-04T15:55:22.062Z"}
{"msg":"We do need to figure out how to create Raft-specific defaults however, see: https://gerrit.hyperledger.org/r/c/26074/3/sampleconfig/orderer.yaml#298","username":"kostas","ts":"2018-09-04T15:55:42.775Z"}
{"msg":"@kostas the default i think makes sense","username":"yacovm","ts":"2018-09-04T16:06:51.634Z"}
{"msg":"is that if the client cert isn't specified","username":"yacovm","ts":"2018-09-04T16:06:57.436Z"}
{"msg":"we can check if the server cert can be used as a client cert","username":"yacovm","ts":"2018-09-04T16:07:06.189Z"}
{"msg":"I'm not talking about certs right now, however.","username":"kostas","ts":"2018-09-04T16:07:17.862Z"}
{"msg":"oh","username":"yacovm","ts":"2018-09-04T16:07:20.467Z"}
{"msg":"I'm talking about all of the other settings that go into raft.Config.","username":"kostas","ts":"2018-09-04T16:07:27.836Z"}
{"msg":"I have no clue sadly about defaults but you're right","username":"yacovm","ts":"2018-09-04T16:07:40.951Z"}
{"msg":"We need a template with sensible defaults stored somewhere in the global configuration. (Global as in shared across the network.)","username":"kostas","ts":"2018-09-04T16:07:54.024Z"}
{"msg":"I think we should proceed with expanding the namespace under \"EtcdRaft\" in the config section. Hopefully this won't bea slippery slope. @jyellick if you have thoughts on this - see: https://gerrit.hyperledger.org/r/c/26074/3/sampleconfig/orderer.yaml#298 ","username":"kostas","ts":"2018-09-04T16:09:06.721Z"}
{"msg":"why not simply defaults puts into configtxlator?","username":"yacovm","ts":"2018-09-04T16:09:10.181Z"}
{"msg":"or in configtx.yaml ? ","username":"yacovm","ts":"2018-09-04T16:09:21.464Z"}
{"msg":"Right, but _where_ in configtx.yaml? Where do these values reside in the channel config namespace?","username":"kostas","ts":"2018-09-04T16:09:51.399Z"}
{"msg":"similar to Kafka no?","username":"yacovm","ts":"2018-09-04T16:10:01.348Z"}
{"msg":"Kafka is a bad citizen and pollutes the namespace.","username":"kostas","ts":"2018-09-04T16:10:17.579Z"}
{"msg":"huh?","username":"yacovm","ts":"2018-09-04T16:10:25.330Z"}
{"msg":"is that how you talk about your baby?","username":"yacovm","ts":"2018-09-04T16:10:41.817Z"}
{"msg":"I subscribe to the tiger mom school of thought.","username":"kostas","ts":"2018-09-04T16:11:04.416Z"}
{"msg":"Seriously, though: it litters the namespace.","username":"kostas","ts":"2018-09-04T16:11:11.961Z"}
{"msg":"I don't understand why it pollutes, it's under the orderer section","username":"yacovm","ts":"2018-09-04T16:11:15.754Z"}
{"msg":"Let me rephrase:","username":"kostas","ts":"2018-09-04T16:12:07.006Z"}
{"msg":"As I'm about to type, I realize that my point is weaker than I thought.","username":"kostas","ts":"2018-09-04T16:15:34.305Z"}
{"msg":"Perhaps this is a better way to put it: ","username":"kostas","ts":"2018-09-04T16:16:15.552Z"}
{"msg":"Notice how all etcd-raft settings are better encapsulated in https://gerrit.hyperledger.org/r/c/25235/4/common/tools/configtxgen/localconfig/config.go compared to their Kafka counterparts.","username":"kostas","ts":"2018-09-04T16:16:53.696Z"}
{"msg":"If Kafka and Raft are plugins, they should spill over as less as possible to the rest of Fabric.","username":"kostas","ts":"2018-09-04T16:19:53.126Z"}
{"msg":"(If you say, but they spill over tremendously already, you'd be right. But for the Raft case that is because of how a Fabric user absolutely needs protolator if they're to use our system. This why we did this for instance: https://gerrit.hyperledger.org/r/c/25235/4/protos/orderer/etcdraft/configuration.go#22)","username":"kostas","ts":"2018-09-04T16:22:13.649Z"}
{"msg":"To the extend we can minimize spill over, we should. In my mind, this comes down to extending the `Metadata` message here: https://gerrit.hyperledger.org/r/c/25235/4/protos/orderer/etcdraft/configuration.proto","username":"kostas","ts":"2018-09-04T16:23:51.591Z"}
{"msg":"I think I am getting what you are saying @kostas \nA better perspective on this can be seen from the following Orderer interface in the channelconfig api (`common/channelconfig/api.go#81`):\n```\n// Orderer stores the common shared orderer config\ntype Orderer interface {\n\t// ConsensusType returns the configured consensus type\n\tConsensusType() string\n\n\t// ConsensusMetadata returns the metadata associated with the consensus type.\n\tConsensusMetadata() []byte\n\n\t// BatchSize returns the maximum number of messages to include in a block\n\tBatchSize() *ab.BatchSize\n\n\t// BatchTimeout returns the amount of time to wait before creating a batch\n\tBatchTimeout() time.Duration\n\n\t// MaxChannelsCount returns the maximum count of channels to allow for an ordering network\n\tMaxChannelsCount() uint64\n\n\t// KafkaBrokers returns the addresses (IP:port notation) of a set of \"bootstrap\"\n\t// Kafka brokers, i.e. this is not necessarily the entire set of Kafka brokers\n\t// used for ordering\n\tKafkaBrokers() []string\n\n\t// Organizations returns the organizations for the ordering service\n\tOrganizations() map[string]Org\n\n\t// Capabilities defines the capabilities for the orderer portion of a channel\n\tCapabilities() OrdererCapabilities\n}\n```\nHere I guess it would definitely look a lot neater if the `KafkaBrokers()` method was instead provided from `ConsensusMetadata()`.","username":"adarshsaraf123","ts":"2018-09-04T16:30:02.272Z"}
{"msg":"I think I am getting what you are saying @kostas \nA better perspective on this can perhaps be seen from the following Orderer interface in the channelconfig api (`common/channelconfig/api.go#81`):\n```\n// Orderer stores the common shared orderer config\ntype Orderer interface {\n\t// ConsensusType returns the configured consensus type\n\tConsensusType() string\n\n\t// ConsensusMetadata returns the metadata associated with the consensus type.\n\tConsensusMetadata() []byte\n\n\t// BatchSize returns the maximum number of messages to include in a block\n\tBatchSize() *ab.BatchSize\n\n\t// BatchTimeout returns the amount of time to wait before creating a batch\n\tBatchTimeout() time.Duration\n\n\t// MaxChannelsCount returns the maximum count of channels to allow for an ordering network\n\tMaxChannelsCount() uint64\n\n\t// KafkaBrokers returns the addresses (IP:port notation) of a set of \"bootstrap\"\n\t// Kafka brokers, i.e. this is not necessarily the entire set of Kafka brokers\n\t// used for ordering\n\tKafkaBrokers() []string\n\n\t// Organizations returns the organizations for the ordering service\n\tOrganizations() map[string]Org\n\n\t// Capabilities defines the capabilities for the orderer portion of a channel\n\tCapabilities() OrdererCapabilities\n}\n```\nHere I guess it would definitely look a lot neater if the `KafkaBrokers()` method was instead provided from `ConsensusMetadata()`.","username":"adarshsaraf123","ts":"2018-09-04T16:30:02.272Z"}
{"msg":"Ah, right - that's a great example.","username":"kostas","ts":"2018-09-04T16:30:23.029Z"}
{"msg":"There's no reason why `KafkaBrokers` should be part of that interface.","username":"kostas","ts":"2018-09-04T16:30:40.262Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KW7QgGjS28xRmfNta) @kostas And the same also suggests that the Raft config should be part of the `Metadata` message as you suggested so that they can be provided by the `ConsensusMetadata` method. ","username":"adarshsaraf123","ts":"2018-09-04T16:32:16.699Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KW7QgGjS28xRmfNta","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KW7QgGjS28xRmfNta","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KW7QgGjS28xRmfNta) @kostas And the same, IMO, also suggests that the Raft config should be part of the `Metadata` message as you suggested so that they can be provided by the `ConsensusMetadata` method. ","username":"adarshsaraf123","ts":"2018-09-04T16:32:16.699Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KW7QgGjS28xRmfNta","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KW7QgGjS28xRmfNta","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Spot on, yes. Would you like to tackle this?","username":"kostas","ts":"2018-09-04T16:33:15.507Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3mTnDf8bGzz6pnaM6) @kostas Sounds fun ;)","username":"adarshsaraf123","ts":"2018-09-04T16:33:35.587Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3mTnDf8bGzz6pnaM6","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3mTnDf8bGzz6pnaM6","remote":true,"fileId":null,"fileName":null}]}
{"msg":"This should be a story under FAB-11474.","username":"kostas","ts":"2018-09-04T16:33:38.212Z"}
{"msg":"This should be a ~story~ sub-task under FAB-11474.","username":"kostas","ts":"2018-09-04T16:33:38.212Z"}
{"msg":"Excellent, thank you.","username":"kostas","ts":"2018-09-04T16:33:42.588Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KW7QgGjS28xRmfNta) @kostas I will be leaving out the TLS config part out of this task since that will better be handled in the way @yacovm suggested (as part of the global config). ","username":"adarshsaraf123","ts":"2018-09-04T16:53:59.544Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KW7QgGjS28xRmfNta","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KW7QgGjS28xRmfNta","remote":true,"fileId":null,"fileName":null}]}
{"msg":"> IMO we need to expand the global config to have a client TLS cert/key\n> I think we can do that later though\n> I _ think _ cryptogen produces TLS certs that have both the server and client x509 extensions set\n> so we can use the same one for now 😉\n> (use the server cert as a client cert)","username":"kostas","ts":"2018-09-04T19:50:27.280Z"}
{"msg":"This is a good idea.","username":"kostas","ts":"2018-09-04T19:51:20.390Z"}
{"msg":"I've created a story with backlogged items, this ^^ is one of them: https://jira.hyperledger.org/browse/FAB-11864","username":"kostas","ts":"2018-09-04T19:52:27.749Z"}
{"msg":"I'll take it, ","username":"yacovm","ts":"2018-09-04T19:56:39.226Z"}
{"msg":"> See: https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=ivh9uMbvMpb7RqfLE\n\n@kostas :joy:  ","username":"yacovm","ts":"2018-09-04T19:56:55.594Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=ivh9uMbvMpb7RqfLE","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=ivh9uMbvMpb7RqfLE","remote":true,"fileId":null,"fileName":null}]}
{"msg":"> See: https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=ivh9uMbvMpb7RqfLE\n\n:joy:  ","username":"yacovm","ts":"2018-09-04T19:56:55.594Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=ivh9uMbvMpb7RqfLE","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=ivh9uMbvMpb7RqfLE","remote":true,"fileId":null,"fileName":null}]}
{"msg":"> See: `https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=ivh9uMbvMpb7RqfLE`\n\n:joy:  ","username":"yacovm","ts":"2018-09-04T19:56:55.594Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=ivh9uMbvMpb7RqfLE","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=ivh9uMbvMpb7RqfLE","remote":true,"fileId":null,"fileName":null}]}
{"msg":"https://jira.hyperledger.org/browse/FAB-11861?focusedCommentId=49853&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-49853","username":"kostas","ts":"2018-09-04T20:16:10.236Z"}
{"msg":"(For anyone who may have thoughts on this.)","username":"kostas","ts":"2018-09-04T20:16:24.553Z"}
{"msg":"@kostas these are very good questions","username":"yacovm","ts":"2018-09-04T20:18:42.444Z"}
{"msg":"but i don't think it's that risky... ","username":"yacovm","ts":"2018-09-04T20:18:53.102Z"}
{"msg":"if the cluster all commits the config update","username":"yacovm","ts":"2018-09-04T20:19:05.501Z"}
{"msg":"then more than a half of it committed it","username":"yacovm","ts":"2018-09-04T20:19:14.918Z"}
{"msg":"and it can then restart itself safely and join","username":"yacovm","ts":"2018-09-04T20:19:27.131Z"}
{"msg":"you'll have a temporary hiccup of the orderer","username":"yacovm","ts":"2018-09-04T20:19:38.986Z"}
{"msg":"but it should recover IMO","username":"yacovm","ts":"2018-09-04T20:19:44.534Z"}
{"msg":"Hm, good point.","username":"kostas","ts":"2018-09-04T20:20:16.240Z"}
{"msg":"I think you're right.","username":"kostas","ts":"2018-09-04T20:20:30.753Z"}
{"msg":"I think this should totally be customizable though ","username":"yacovm","ts":"2018-09-04T20:21:32.097Z"}
{"msg":"I can envision someone somewhere a year from now spending an entire weekend on a production problem that can be solved by updating these stuff on some particular channel","username":"yacovm","ts":"2018-09-04T20:22:04.994Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=k3qrH2pRT9cFHNKGr) @kostas https://jira.hyperledger.org/browse/FAB-11861?focusedCommentId=49872&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-49872","username":"guoger","ts":"2018-09-05T07:26:05.373Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=k3qrH2pRT9cFHNKGr","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=k3qrH2pRT9cFHNKGr","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@C0rWin The CR for enabling type-config updates:\nhttps://gerrit.hyperledger.org/r/#/c/26104/","username":"adarshsaraf123","ts":"2018-09-05T13:58:39.604Z"}
{"msg":"@adarshsaraf123 appreciate it ","username":"C0rWin","ts":"2018-09-05T14:11:57.238Z"}
{"msg":"temporarily hardcoded raft configs in https://gerrit.hyperledger.org/r/c/25964, let me know if it unblocks you @yacovm ","username":"guoger","ts":"2018-09-05T14:32:02.928Z"}
{"msg":"@C0rWin  addressed your comment in https://gerrit.hyperledger.org/r/c/24919 hope it makes sense","username":"guoger","ts":"2018-09-05T14:32:31.231Z"}
{"msg":"Thanks @guoger ","username":"yacovm","ts":"2018-09-05T14:33:33.380Z"}
{"msg":"election tick","username":"yacovm","ts":"2018-09-05T14:34:06.708Z"}
{"msg":"what units is that?","username":"yacovm","ts":"2018-09-05T14:34:11.010Z"}
{"msg":"int","username":"guoger","ts":"2018-09-05T14:34:39.036Z"}
{"msg":"hmmmm ok","username":"yacovm","ts":"2018-09-05T14:34:44.292Z"}
{"msg":"was worried for a second that it's time.Duration ;) ","username":"yacovm","ts":"2018-09-05T14:35:07.032Z"}
{"msg":"and that you made it 10 nano seconds","username":"yacovm","ts":"2018-09-05T14:35:14.876Z"}
{"msg":"super responsive cluster :metal_tone2:","username":"guoger","ts":"2018-09-05T14:36:15.279Z"}
{"msg":"> @C0rWin addressed your comment in https://gerrit.hyperledger.org/r/c/24919 hope it makes sense\n\n \nI think that it's not very clean to declare APIs where used only in UT. I think you can actually see whenever current node is a leader by asserting whenever it writes a block instead of adding a channel","username":"C0rWin","ts":"2018-09-05T14:38:10.581Z"}
{"msg":"you can do it with mocks or something ","username":"C0rWin","ts":"2018-09-05T14:38:19.037Z"}
{"msg":"the minor problem in _raftexample_ is:\nit uses `lastIndex` [here](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/raft.go#L180) to determine if replay has finished. `lastIndex` is inferred from *the Index of last entry in wal* [here](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/raft.go#L245). Although, entries in wal are unstable (may be overwritten by newer leader). Therefore, recovered former leader would potentially be blocked at [here](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/kvstore.go#L43).\nTo reproduce:\n- start raftexample 3-nodes cluster with long TickInterval (change code and recompile), so you have enough time to send requests while it's in transition)\n- send some requests to leader\n- kill two _followers_\n- send more requests to _leader_ (so it has more uncommitted entries appended in wal than other nodes)\n- kill _leader_\n- restart two _followers_, wait for a leader to be elected\n- restart _leader_, it would be stuck at the line aforementioned","username":"guoger","ts":"2018-09-05T14:45:47.680Z"}
{"msg":"the minor problem in _raftexample_  I mentioned during the meeting is:\nit uses `lastIndex` [here](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/raft.go#L180) to determine if replay has finished. `lastIndex` is inferred from *the Index of last entry in wal* [here](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/raft.go#L245). Although, entries in wal are unstable (may be overwritten by newer leader). Therefore, recovered former leader would potentially be blocked at [here](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/kvstore.go#L43).\nTo reproduce:\n- start raftexample 3-nodes cluster with long TickInterval (change code and recompile), so you have enough time to send requests while it's in transition)\n- send some requests to leader\n- kill two _followers_\n- send more requests to _leader_ (so it has more uncommitted entries appended in wal than other nodes)\n- kill _leader_\n- restart two _followers_, wait for a leader to be elected\n- restart _leader_, it would be stuck at the line aforementioned","username":"guoger","ts":"2018-09-05T14:45:47.680Z"}
{"msg":"cluster would still function correctly after sending more transactions to new leader, and wait for them to overwrite stale entries on former leader, till `Index` exceeds the _last index_ previously persisted in former leader.","username":"guoger","ts":"2018-09-05T14:48:09.345Z"}
{"msg":"*tl;dr*, the code in _raftexample_ is correct but written in an odd way. we should follow etcd/swarmkit w.r.t `wal`","username":"guoger","ts":"2018-09-05T14:50:15.655Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Fujo7XepHRGFffYFx) @C0rWin tried it, and it's neither clean nor testing what we intended. pls feel free to try cleaning it up, but my suggestion is let's proceed with this","username":"guoger","ts":"2018-09-05T14:52:31.674Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Fujo7XepHRGFffYFx","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Fujo7XepHRGFffYFx","remote":true,"fileId":null,"fileName":null}]}
{"msg":"> @C0rWin tried it, and it's neither clean nor testing what we intended. pls feel free to try cleaning it up, but my suggestion is let's proceed with this\nI cannot say I agree with this, but as far as @sykesm and @kostas considered this as acceptable, I will remove my -1 for now, to not block this from going in and we can definitely address it later ","username":"C0rWin","ts":"2018-09-05T14:54:18.428Z"}
{"msg":"yup, that's what I was trying to say, let's not clog pipeline with this and we could always revisit this","username":"guoger","ts":"2018-09-05T15:00:58.966Z"}
{"msg":"sure","username":"C0rWin","ts":"2018-09-05T15:01:42.358Z"}
{"msg":"(I did try using various way of testing it without adding channel, but tests end up being flaky or poorly-readable, but I *do* appreciate any clean-up that I didn't think of. For multi-cluster tests in particular, we do need a means to detect leader change deterministically)","username":"guoger","ts":"2018-09-05T15:05:05.722Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=qRESNebBjdjpCGEqx","username":"kostas","ts":"2018-09-06T00:46:53.698Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=qRESNebBjdjpCGEqx","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=qRESNebBjdjpCGEqx","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Excellent write-up, thanks Jay. ","username":"kostas","ts":"2018-09-06T00:47:01.853Z"}
{"msg":"I had missed that. Good catch!","username":"kostas","ts":"2018-09-06T00:47:51.011Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=hpgCP7A7jPix49yGT","username":"kostas","ts":"2018-09-06T00:54:34.290Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=hpgCP7A7jPix49yGT","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=hpgCP7A7jPix49yGT","remote":true,"fileId":null,"fileName":null}]}
{"msg":"FWIW, I totally missed that in my review. Artem's right to call that out. But for now, yes, let's clear up the pipeline a bit and if anybody thinks of a better way to handle this, let's go for it.","username":"kostas","ts":"2018-09-06T00:56:13.193Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=MAmhRqMmi7Z4vba87","username":"kostas","ts":"2018-09-06T13:09:53.856Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=MAmhRqMmi7Z4vba87","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=MAmhRqMmi7Z4vba87","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@guoger: Not sure we'd want to spill over to the localconfig package for this?","username":"kostas","ts":"2018-09-06T13:10:10.253Z"}
{"msg":"Why not hard-code them inside \"etcdraft\"?","username":"kostas","ts":"2018-09-06T13:10:23.907Z"}
{"msg":"@guoger how close are you to make the FSM support multi-nodes? :thinking: ","username":"yacovm","ts":"2018-09-06T13:22:15.395Z"}
{"msg":"@kostas ","username":"yacovm","ts":"2018-09-06T14:38:53.751Z"}
{"msg":"why are we reading the file system inside the `New` of the consenter?","username":"yacovm","ts":"2018-09-06T14:39:05.214Z"}
{"msg":"we should inject dependenices ","username":"yacovm","ts":"2018-09-06T14:39:11.957Z"}
{"msg":"we should inject dependencies","username":"yacovm","ts":"2018-09-06T14:39:11.957Z"}
{"msg":"and not read them from the file system :( ","username":"yacovm","ts":"2018-09-06T14:39:18.703Z"}
{"msg":"we have a reference to the certificate in the `main.go` and we can just pass it as a reference to the consenter...","username":"yacovm","ts":"2018-09-06T14:39:47.317Z"}
{"msg":"Link?","username":"kostas","ts":"2018-09-06T14:39:47.854Z"}
{"msg":"https://gerrit.hyperledger.org/r/#/c/25964/9/orderer/consensus/etcdraft/consenter.go@32","username":"yacovm","ts":"2018-09-06T14:40:17.696Z"}
{"msg":"I think that's a good call. Add it to the CR as comment?","username":"kostas","ts":"2018-09-06T14:41:44.785Z"}
{"msg":"I think that's a good call. Add it to the CR as a comment?","username":"kostas","ts":"2018-09-06T14:41:44.785Z"}
{"msg":"no...","username":"yacovm","ts":"2018-09-06T14:42:27.448Z"}
{"msg":"it will create a cascading conflict","username":"yacovm","ts":"2018-09-06T14:42:37.739Z"}
{"msg":"I prefere to just address it in a CR ","username":"yacovm","ts":"2018-09-06T14:42:45.124Z"}
{"msg":"otherwise we'll never finish this work","username":"yacovm","ts":"2018-09-06T14:42:56.417Z"}
{"msg":"I'm fine either way.","username":"kostas","ts":"2018-09-06T14:43:18.425Z"}
{"msg":"I don't want Jay to suffer any more than he has to so I'll jut do it","username":"yacovm","ts":"2018-09-06T14:43:29.020Z"}
{"msg":"I don't want Jay to suffer any more than he has to so I'll just do it","username":"yacovm","ts":"2018-09-06T14:43:29.020Z"}
{"msg":"Suffer?","username":"kostas","ts":"2018-09-06T14:43:58.440Z"}
{"msg":"constantly changing his code","username":"yacovm","ts":"2018-09-06T14:44:50.813Z"}
{"msg":"> Why not hard-code them inside \"etcdraft\"?\nI don't understand.. expand please?","username":"guoger","ts":"2018-09-06T15:19:31.943Z"}
{"msg":"> I don't want Jay to suffer any more than he has to so I'll just do it\nhaha, not suffering at all. I was suggested to read the file and I didn't think that much.","username":"guoger","ts":"2018-09-06T15:21:06.312Z"}
{"msg":"I could update it the first thing tomorrow morning. but if you want to do it now, go for it :) @yacovm ","username":"guoger","ts":"2018-09-06T15:21:35.870Z"}
{"msg":"> how close are you to make the FSM support multi-nodes?\n1) rebase the code 2) wire them to communicator","username":"guoger","ts":"2018-09-06T15:23:01.304Z"}
{"msg":"var RaftChannelOptions = struct {\n\tTickInterval    time.Duration\n\tElectionTick    int\n\tHeartbeatTick   int\n\tMaxSizePerMsg   uint64\n\tMaxInflightMsgs int\n}{TickInterval: ..., ElectionTick: ...}","username":"kostas","ts":"2018-09-06T15:23:03.412Z"}
{"msg":"```var RaftChannelOptions = struct {\n\tTickInterval    time.Duration\n\tElectionTick    int\n\tHeartbeatTick   int\n\tMaxSizePerMsg   uint64\n\tMaxInflightMsgs int\n}{TickInterval: ..., ElectionTick: ...}```","username":"kostas","ts":"2018-09-06T15:23:03.412Z"}
{"msg":"And have that var in `chain.go`.","username":"kostas","ts":"2018-09-06T15:23:27.728Z"}
{"msg":"and then have `type Option struct` encapsulating `Storage`, `Clock`, `RaftChannelOptions`, etc?","username":"guoger","ts":"2018-09-06T15:25:26.307Z"}
{"msg":"That part I haven't thought about, but my main point is - if we know that these options are going to leave in Adarsh's `Metadata` message, we should contain them now temporarily in `etcdraft` instead of in any other package.","username":"kostas","ts":"2018-09-06T15:26:31.335Z"}
{"msg":"Not a deal-breaker at the end of the day.","username":"kostas","ts":"2018-09-06T15:26:44.589Z"}
{"msg":"> Not sure we'd want to spill over to the localconfig package for this?\nif you are talking about [this](https://gerrit.hyperledger.org/r/c/25964/9/orderer/common/localconfig/config.go#165), yes, I forgot to delete it from localconfig.","username":"guoger","ts":"2018-09-06T15:26:48.055Z"}
{"msg":"We know that this will change.","username":"kostas","ts":"2018-09-06T15:26:49.606Z"}
{"msg":"Yes, this is what I was talking about.","username":"kostas","ts":"2018-09-06T15:27:02.994Z"}
{"msg":"then absolutely corret, as Artem also pointed out in review, my bad :P","username":"guoger","ts":"2018-09-06T15:27:53.388Z"}
{"msg":"No worries","username":"kostas","ts":"2018-09-06T15:28:43.567Z"}
{"msg":"Noo jay dont wire into the communicator yet 😉","username":"yacovm","ts":"2018-09-06T15:57:28.993Z"}
{"msg":"I just dont like doing file system io inside constructora","username":"yacovm","ts":"2018-09-06T15:57:52.902Z"}
{"msg":"Hi, since Jay's Raft chain change has been merged, is there any plan to support reconfiguring raft on top of that? I am interesting in doing that. Thanks.","username":"huikang","ts":"2018-09-06T16:06:48.891Z"}
{"msg":"@huikang: Hello! Haven't forgotten about your offer to help - and thanks for that! Unfortunately I can't think of any additional task that can be processed in parallel _right now_, and I don't want to have you running in circles. As thing stand right now: Jay's working on adding crash-fault tolerance to the ordering node (FAB-11589), Yacov's working on wiring the components so that we can bootstrap a Raft-based ordering node (FAB-11798), and Artem (Type B) and Adarsh (Type A) are tackling reconfiguration (FAB-11590). You can help out by reviewing the code that's out there (which will help us identify deficiencies that _you_ can work on), or keep an eye out on https://jira.hyperledger.org/browse/FAB-11863 for backlogged issues. I'd also ask the team to consider spitting out additional sub-tasks, as they're working on their stories and leave them out for grabs. This should also help with creating a list of issues that can be tackled.","username":"kostas","ts":"2018-09-06T19:30:59.405Z"}
{"msg":"@huikang: Hello! Haven't forgotten about your offer to help - and thanks for that! Unfortunately I can't think of any additional task that can be processed in parallel _right now_, and I don't want to have you running in circles. As thing stand right now: Jay's working on adding crash-fault tolerance to the ordering node (FAB-11589), Yacov's working on wiring the components so that we can bootstrap a Raft-based ordering node (FAB-11798), and Artem (Type B ) and Adarsh (Type A) are tackling reconfiguration (FAB-11590). You can help out by reviewing the code that's out there (which will help us identify deficiencies that _you_ can work on), or keep an eye out on https://jira.hyperledger.org/browse/FAB-11863 for backlogged issues. I'd also ask the team to consider spitting out additional sub-tasks, as they're working on their stories and leave them out for grabs. This should also help with creating a list of issues that can be tackled.","username":"kostas","ts":"2018-09-06T19:30:59.405Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=xZtpxgNK3jDCxsq7C) @kostas Hi, Kostas, sure I will be glad to review the code there and look for new tasks from there. Thanks.","username":"huikang","ts":"2018-09-06T19:40:13.225Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=xZtpxgNK3jDCxsq7C","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=xZtpxgNK3jDCxsq7C","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@kostas @sykesm replied in [CR](https://gerrit.hyperledger.org/r/c/25975/), IIUC, you suggestions reset the timer every time a new envelope comes in. Although we shouldn't be doing that. If a timer is started, we don't reset","username":"guoger","ts":"2018-09-07T02:40:56.870Z"}
{"msg":"Has joined the channel.","username":"yj511608130","ts":"2018-09-07T03:54:06.940Z","type":"uj"}
{"msg":"i have an update to [this CR|https://gerrit.hyperledger.org/r/c/25964] to address comments. However, as Yacov aforementioned, it would cause cascading conflicts. How could I push it somewhere so it can be reviewed independently, and once it's ready, following CRs in stack only need to be rebased once.","username":"guoger","ts":"2018-09-07T09:41:47.524Z"}
{"msg":"i have an update to [this CR](https://gerrit.hyperledger.org/r/c/25964) to address comments. However, as Yacov aforementioned, it would cause cascading conflicts. How could I push it somewhere so it can be reviewed independently, and once it's ready, following CRs in stack only need to be rebased once.","username":"guoger","ts":"2018-09-07T09:41:47.524Z"}
{"msg":"it's impossible to do what you ask...","username":"yacovm","ts":"2018-09-07T10:20:01.899Z"}
{"msg":"just address in that change set","username":"yacovm","ts":"2018-09-07T10:20:07.351Z"}
{"msg":"and I'll rebase on top once it was reviewed ","username":"yacovm","ts":"2018-09-07T10:20:19.457Z"}
{"msg":"Has joined the channel.","username":"raviyelleni","ts":"2018-09-09T04:44:36.284Z","type":"uj"}
{"msg":"Everyone - we have a working Raft OSN - https://gerrit.hyperledger.org/r/#/c/26038/   ( @kostas @C0rWin  @guoger ) \n```\n2018-09-10 01:46:27.816 IDT [orderer/common/server] initializeServerConfig -> INFO 003 Starting orderer with mutual TLS enabled\n2018-09-10 01:46:27.826 IDT [fsblkstorage] newBlockfileMgr -> INFO 004 Getting block information from block storage\n2018-09-10 01:46:27.848 IDT [orderer/commmon/multichannel] Initialize -> INFO 005 Starting system channel 'system' with genesis block hash e37db8b8a56929b375adc05f9961fe681d39f45262d61babbe5e1038dd2c2681 and orderer type etcdraft\n2018-09-10 01:46:27.849 IDT [orderer/consensus/etcdraft] becomeFollower -> INFO 006 1 became follower at term 0 {\"channel\": \"system\"}\n2018-09-10 01:46:27.849 IDT [orderer/consensus/etcdraft] newRaft -> INFO 007 newRaft 1 [peers: [], term: 0, commit: 0, applied: 0, lastindex: 0, lastterm: 0] {\"channel\": \"system\"}\n2018-09-10 01:46:27.849 IDT [orderer/consensus/etcdraft] becomeFollower -> INFO 008 1 became follower at term 1 {\"channel\": \"system\"}\n2018-09-10 01:46:27.849 IDT [orderer/common/cluster] Configure -> INFO 009 Entering, channel: system, nodes: []\n2018-09-10 01:46:27.849 IDT [orderer/common/cluster] Configure -> INFO 00a Exiting\n2018-09-10 01:46:27.849 IDT [orderer/common/server] Start -> INFO 00b Starting orderer:\n Version: 1.3.0\n Commit SHA: 04e3af2\n Go version: go1.10.3\n OS/Arch: linux/amd64\n Experimental features: true\n2018-09-10 01:46:27.849 IDT [orderer/common/server] Start -> INFO 00c Beginning to serve requests\n2018-09-10 01:46:28.950 IDT [orderer/consensus/etcdraft] Step -> INFO 00d 1 is starting a new election at term 1 {\"channel\": \"system\"}\n2018-09-10 01:46:28.950 IDT [orderer/consensus/etcdraft] becomeCandidate -> INFO 00e 1 became candidate at term 2 {\"channel\": \"system\"}\n2018-09-10 01:46:28.950 IDT [orderer/consensus/etcdraft] poll -> INFO 00f 1 received MsgVoteResp from 1 at term 2 {\"channel\": \"system\"}\n2018-09-10 01:46:28.950 IDT [orderer/consensus/etcdraft] becomeLeader -> INFO 010 1 became leader at term 2 {\"channel\": \"system\"}\n2018-09-10 01:46:28.950 IDT [orderer/consensus/etcdraft] run -> INFO 011 raft.node: 1 elected leader 1 at term 2 {\"channel\": \"system\"}\n2018-09-10 01:46:28.951 IDT [orderer/consensus/etcdraft] serveRaft -> INFO 012 Raft leader changed on node 1: 0 -> 1 {\"channel\": \"system\"}\n```\n@guoger can you please rebase your change sets above the change set? It touches quite a bit of places and it is crucial to keep it functioning so I can proceed with integration tests ... ","username":"yacovm","ts":"2018-09-09T22:49:39.355Z"}
{"msg":"Everyone - we have a working Raft OSN - https://gerrit.hyperledger.org/r/#/c/26038/   ( @kostas @C0rWin  @guoger ) \n```\n2018-09-10 01:46:27.816 IDT [orderer/common/server] initializeServerConfig -> INFO 003 Starting orderer with mutual TLS enabled\n2018-09-10 01:46:27.826 IDT [fsblkstorage] newBlockfileMgr -> INFO 004 Getting block information from block storage\n2018-09-10 01:46:27.848 IDT [orderer/commmon/multichannel] Initialize -> INFO 005 Starting system channel 'system' with genesis block hash e37db8b8a56929b375adc05f9961fe681d39f45262d61babbe5e1038dd2c2681 and orderer type etcdraft\n2018-09-10 01:46:27.849 IDT [orderer/consensus/etcdraft] becomeFollower -> INFO 006 1 became follower at term 0 {\"channel\": \"system\"}\n2018-09-10 01:46:27.849 IDT [orderer/consensus/etcdraft] newRaft -> INFO 007 newRaft 1 [peers: [], term: 0, commit: 0, applied: 0, lastindex: 0, lastterm: 0] {\"channel\": \"system\"}\n2018-09-10 01:46:27.849 IDT [orderer/consensus/etcdraft] becomeFollower -> INFO 008 1 became follower at term 1 {\"channel\": \"system\"}\n2018-09-10 01:46:27.849 IDT [orderer/common/cluster] Configure -> INFO 009 Entering, channel: system, nodes: []\n2018-09-10 01:46:27.849 IDT [orderer/common/cluster] Configure -> INFO 00a Exiting\n2018-09-10 01:46:27.849 IDT [orderer/common/server] Start -> INFO 00b Starting orderer:\n Version: 1.3.0\n Commit SHA: 04e3af2\n Go version: go1.10.3\n OS/Arch: linux/amd64\n Experimental features: true\n2018-09-10 01:46:27.849 IDT [orderer/common/server] Start -> INFO 00c Beginning to serve requests\n2018-09-10 01:46:28.950 IDT [orderer/consensus/etcdraft] Step -> INFO 00d 1 is starting a new election at term 1 {\"channel\": \"system\"}\n2018-09-10 01:46:28.950 IDT [orderer/consensus/etcdraft] becomeCandidate -> INFO 00e 1 became candidate at term 2 {\"channel\": \"system\"}\n2018-09-10 01:46:28.950 IDT [orderer/consensus/etcdraft] poll -> INFO 00f 1 received MsgVoteResp from 1 at term 2 {\"channel\": \"system\"}\n2018-09-10 01:46:28.950 IDT [orderer/consensus/etcdraft] becomeLeader -> INFO 010 1 became leader at term 2 {\"channel\": \"system\"}\n2018-09-10 01:46:28.950 IDT [orderer/consensus/etcdraft] run -> INFO 011 raft.node: 1 elected leader 1 at term 2 {\"channel\": \"system\"}\n2018-09-10 01:46:28.951 IDT [orderer/consensus/etcdraft] serveRaft -> INFO 012 Raft leader changed on node 1: 0 -> 1 {\"channel\": \"system\"}\n```\n @guoger can you please rebase your change sets above the change set? It touches quite a bit of places and it is crucial to keep it functioning so I can proceed with integration tests ... ","username":"yacovm","ts":"2018-09-09T22:49:39.355Z"}
{"msg":"Everyone - we have a working Raft OSN - https://gerrit.hyperledger.org/r/#/c/26038/   ( @kostas @C0rWin  @guoger ) \n```\n2018-09-10 01:46:27.816 IDT [orderer/common/server] initializeServerConfig -> INFO 003 Starting orderer with mutual TLS enabled\n2018-09-10 01:46:27.826 IDT [fsblkstorage] newBlockfileMgr -> INFO 004 Getting block information from block storage\n2018-09-10 01:46:27.848 IDT [orderer/commmon/multichannel] Initialize -> INFO 005 Starting system channel 'system' with genesis block hash e37db8b8a56929b375adc05f9961fe681d39f45262d61babbe5e1038dd2c2681 and orderer type etcdraft\n2018-09-10 01:46:27.849 IDT [orderer/consensus/etcdraft] becomeFollower -> INFO 006 1 became follower at term 0 {\"channel\": \"system\"}\n2018-09-10 01:46:27.849 IDT [orderer/consensus/etcdraft] newRaft -> INFO 007 newRaft 1 [peers: [], term: 0, commit: 0, applied: 0, lastindex: 0, lastterm: 0] {\"channel\": \"system\"}\n2018-09-10 01:46:27.849 IDT [orderer/consensus/etcdraft] becomeFollower -> INFO 008 1 became follower at term 1 {\"channel\": \"system\"}\n2018-09-10 01:46:27.849 IDT [orderer/common/cluster] Configure -> INFO 009 Entering, channel: system, nodes: []\n2018-09-10 01:46:27.849 IDT [orderer/common/cluster] Configure -> INFO 00a Exiting\n2018-09-10 01:46:27.849 IDT [orderer/common/server] Start -> INFO 00b Starting orderer:\n Version: 1.3.0\n Commit SHA: 04e3af2\n Go version: go1.10.3\n OS/Arch: linux/amd64\n Experimental features: true\n2018-09-10 01:46:27.849 IDT [orderer/common/server] Start -> INFO 00c Beginning to serve requests\n2018-09-10 01:46:28.950 IDT [orderer/consensus/etcdraft] Step -> INFO 00d 1 is starting a new election at term 1 {\"channel\": \"system\"}\n2018-09-10 01:46:28.950 IDT [orderer/consensus/etcdraft] becomeCandidate -> INFO 00e 1 became candidate at term 2 {\"channel\": \"system\"}\n2018-09-10 01:46:28.950 IDT [orderer/consensus/etcdraft] poll -> INFO 00f 1 received MsgVoteResp from 1 at term 2 {\"channel\": \"system\"}\n2018-09-10 01:46:28.950 IDT [orderer/consensus/etcdraft] becomeLeader -> INFO 010 1 became leader at term 2 {\"channel\": \"system\"}\n2018-09-10 01:46:28.950 IDT [orderer/consensus/etcdraft] run -> INFO 011 raft.node: 1 elected leader 1 at term 2 {\"channel\": \"system\"}\n2018-09-10 01:46:28.951 IDT [orderer/consensus/etcdraft] serveRaft -> INFO 012 Raft leader changed on node 1: 0 -> 1 {\"channel\": \"system\"}\n```\n @guoger can you please rebase your change sets (that are in progress, and are not ancestors of my change set) above the change set? It touches quite a bit of places and it is crucial to keep it functioning so I can proceed with integration tests ... ","username":"yacovm","ts":"2018-09-09T22:49:39.355Z"}
{"msg":":clap:","username":"C0rWin","ts":"2018-09-09T22:51:09.805Z"}
{"msg":":metal_tone2:","username":"guoger","ts":"2018-09-10T01:41:52.070Z"}
{"msg":"those two in-review CRs are for crash and recovery, are you testing those already?","username":"guoger","ts":"2018-09-10T01:42:27.079Z"}
{"msg":"(I certainly could rebase on top yours, just curious about the urgency)","username":"guoger","ts":"2018-09-10T01:51:33.635Z"}
{"msg":"(I certainly should rebase on top yours, just curious about the urgency)","username":"guoger","ts":"2018-09-10T01:51:33.635Z"}
{"msg":"I'm not sure about the term in https://gerrit.hyperledger.org/r/c/26178. In etcd/raft, FSM has two [meanings](https://github.com/etcd-io/etcd/tree/master/raft):\n- the state machine that consented messages are applied on, i.e. _Apply Snapshot (if any) and CommittedEntries to the state machine_\n- etcd/raft internal state machine, i.e. _the library models Raft as a state machine_\nto distinguish, I would suggest `RaftConfig` vs `FabricConfig`/`ConsenterConfig`. wdyt, @adarshsaraf123 ","username":"guoger","ts":"2018-09-10T05:29:27.946Z"}
{"msg":"@guoger Sure we can try a different term. I couldn't reply to your comment on the CR but I also like just Config as you had suggested.","username":"adarshsaraf123","ts":"2018-09-10T05:52:33.505Z"}
{"msg":"@guoger - no... i am not testing anything. I just want to make sure we don't have a jungle of change sets and we'll end up in conflict resolution hell.\nIt's not urgent... rebase when you think your stuff is ready","username":"yacovm","ts":"2018-09-10T09:30:49.214Z"}
{"msg":"@guoger  m @adarshsaraf123  maybe instead of FSM we can call it RSM ? as in Replicated state machine (not research staff member)","username":"yacovm","ts":"2018-09-10T09:33:00.541Z"}
{"msg":"this is essentially, the configuration of the replicated state machine, no?","username":"yacovm","ts":"2018-09-10T09:33:21.896Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=GEXtrHQdPn2GddekC) @yacovm Posted similar comment on the CR. I am only wondering if when we read the from within the code will it be instructive enough to have just `etcdraft.RSM` and that's why had started out with `etcdraft.FSMConfig`. WDYT?","username":"adarshsaraf123","ts":"2018-09-10T09:40:05.832Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=GEXtrHQdPn2GddekC","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=GEXtrHQdPn2GddekC","remote":true,"fileId":null,"fileName":null}]}
{"msg":"well we have `Consenters` don't we?","username":"yacovm","ts":"2018-09-10T09:40:55.811Z"}
{"msg":"doesn't the same argument apply here?","username":"yacovm","ts":"2018-09-10T09:41:04.876Z"}
{"msg":"I'm still in favor of RaftConfig:\n- OSNs are RSM, etcd/raft is RSM too\n- RaftConfig is smaller than RSMConfig in scope","username":"guoger","ts":"2018-09-10T09:46:33.624Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=fTCzdPR6jhspCGnoC) @yacovm WRT `etcdraft.Consenters` personally I think more of the struct members for each `Consenter` as identifying the consenter and not just as configuration value for the consenter. In the case of the `etcdraft.RSM` the struct members do not seem to identify an RSM but only specify some configuration parameters for the RSM. ","username":"adarshsaraf123","ts":"2018-09-10T09:50:59.225Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=fTCzdPR6jhspCGnoC","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=fTCzdPR6jhspCGnoC","remote":true,"fileId":null,"fileName":null}]}
{"msg":"sure.... if you insist. it doesn't matter to me. I'm fine calling it `Foo` as well.","username":"yacovm","ts":"2018-09-10T09:51:13.029Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wmQdxYBdncNz46S6T) @guoger I think the `Raft` in `RaftConfig` is implied from the import since it will  be `etcdraft.RaftConfig`. This is why I had liked just `etcdraft.Config` suggested by you in the CR.","username":"adarshsaraf123","ts":"2018-09-10T09:52:33.586Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wmQdxYBdncNz46S6T","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wmQdxYBdncNz46S6T","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@yacovm @guoger How about we call it `etcdraft.Params`? Since @yacovm 's point about `Config` not looking good in `configtx.yaml` is also very true.","username":"adarshsaraf123","ts":"2018-09-10T10:41:59.217Z"}
{"msg":"I personally think that `Params` is too general and I think `RSM` best describes what the parameters are, but - as I said - it doesn't matter to me that much.","username":"yacovm","ts":"2018-09-10T10:44:39.573Z"}
{"msg":"Has joined the channel.","username":"dairehoman","ts":"2018-09-10T19:09:38.654Z","type":"uj"}
{"msg":"On going through the naming patterns in the `sampleconfig/*.yaml` files, I realize that @yacovm 's proposal of the name being `RSM` makes most sense. ","username":"adarshsaraf123","ts":"2018-09-10T19:45:23.845Z"}
{"msg":"Why is it?","username":"guoger","ts":"2018-09-11T00:21:09.068Z"}
{"msg":"I'm slightly partial to `RaftConfig` but I hear the argument about stuttering.","username":"kostas","ts":"2018-09-11T03:18:12.042Z"}
{"msg":"how about* etcdraft.ClusterConfig* if the parameters are applied to the raft cluster?","username":"huikang","ts":"2018-09-11T03:26:41.748Z"}
{"msg":"how about *etcdraft.ClusterConfig* if the parameters are applied to the raft cluster?","username":"huikang","ts":"2018-09-11T03:26:41.748Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=yP80dW7acE0pPiLdo0) @guoger If you look at all the key names there, they all specify various configuration parameters and none of them have the name `Config` appended to them","username":"adarshsaraf123","ts":"2018-09-11T04:44:10.138Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=yP80dW7acE0pPiLdo0","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=yP80dW7acE0pPiLdo0","remote":true,"fileId":null,"fileName":null}]}
{"msg":"So I guess it will be good if we can avoid having `Config` in the name and since @guoger mentioned that `FSM` seems to generic I had thought `RSM` was better.","username":"adarshsaraf123","ts":"2018-09-11T04:45:24.735Z"}
{"msg":"yes, and in that case why not RaftConfig, just to be specific. I don't think we'll ever have consensus on this name, so I'm OK with whatever you feel most comfortable with :)","username":"guoger","ts":"2018-09-11T04:52:21.537Z"}
{"msg":"Yaa consensus _is_ a *hard* problem. ","username":"adarshsaraf123","ts":"2018-09-11T04:55:36.101Z"}
{"msg":"Yaa consensus _is a hard problem_. ","username":"adarshsaraf123","ts":"2018-09-11T04:55:36.101Z"}
{"msg":"Yaa consensus _is a hard problem_. ","username":"adarshsaraf123","ts":"2018-09-11T04:55:36.101Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=fHXmSYStjMyZ9zyee","username":"yacovm","ts":"2018-09-11T07:14:22.442Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=fHXmSYStjMyZ9zyee","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=fHXmSYStjMyZ9zyee","remote":true,"fileId":null,"fileName":null}]}
{"msg":"we already have a cluster config in the code so we can't reuse it","username":"yacovm","ts":"2018-09-11T07:14:45.959Z"}
{"msg":"you've been typing for an hour, Jay","username":"yacovm","ts":"2018-09-11T07:49:34.423Z"}
{"msg":"I addressed your comments","username":"yacovm","ts":"2018-09-11T07:49:41.243Z"}
{"msg":"@yacovm pls help me understand communication, thx!\n- `Chain` should be using `RemoteContext` to send msg to other nodes, right?\n- what if a connection cannot be established, would `Communicator.Remote` fail? or it still returns an obj, but subsequent calls fail?","username":"guoger","ts":"2018-09-11T07:50:52.541Z"}
{"msg":"no","username":"yacovm","ts":"2018-09-11T07:51:08.037Z"}
{"msg":"you just use the `RPC` struct to send to remote nodes","username":"yacovm","ts":"2018-09-11T07:51:23.311Z"}
{"msg":"`RPC` is just a friendly wrapper around the comm","username":"yacovm","ts":"2018-09-11T07:51:47.391Z"}
{"msg":"and how do i get rpc?","username":"guoger","ts":"2018-09-11T07:53:59.753Z"}
{"msg":"to initialize an `RPC` you just create the struct instance and pass the reference of `Comm` into it. \nTo wire the reference of the `Comm` into it, you need to simply add another exported field to the `Consenter` like I did for the `Configurator Configurator` which is the comm itself","username":"yacovm","ts":"2018-09-11T07:54:10.855Z"}
{"msg":"I guess I can just make `Configurator` to a full blown `Communicator` which also is a `Configurator` ","username":"yacovm","ts":"2018-09-11T07:54:46.284Z"}
{"msg":"in my change set","username":"yacovm","ts":"2018-09-11T07:54:49.234Z"}
{"msg":"yeah, I was about to ask that","username":"guoger","ts":"2018-09-11T07:54:56.759Z"}
{"msg":"and then things will be easier for you","username":"yacovm","ts":"2018-09-11T07:54:58.560Z"}
{"msg":"either way","username":"guoger","ts":"2018-09-11T07:55:03.174Z"}
{"msg":"~either way~ it's better that you do it","username":"guoger","ts":"2018-09-11T07:55:03.174Z"}
{"msg":"wdyt?","username":"yacovm","ts":"2018-09-11T07:55:03.685Z"}
{"msg":"I'll do it now","username":"yacovm","ts":"2018-09-11T07:55:13.605Z"}
{"msg":"but in the meantime you understand how to create an `RPC` ?","username":"yacovm","ts":"2018-09-11T07:55:57.729Z"}
{"msg":"you just give it the name of the channel","username":"yacovm","ts":"2018-09-11T07:56:02.212Z"}
{"msg":"and the reference of the `Comm`","username":"yacovm","ts":"2018-09-11T07:56:08.646Z"}
{"msg":"yup","username":"guoger","ts":"2018-09-11T07:57:03.068Z"}
{"msg":"I almost wanted to call `Remote` for every message in `Chain` and manage those stubs in Chain. And I figured I better ask :joy:","username":"guoger","ts":"2018-09-11T07:57:58.750Z"}
{"msg":"`Remote` is smart, actually","username":"yacovm","ts":"2018-09-11T08:00:05.028Z"}
{"msg":"it returns to you an existing connection if it exists","username":"yacovm","ts":"2018-09-11T08:00:22.923Z"}
{"msg":"wait, I thought RPC does that for me, no?","username":"guoger","ts":"2018-09-11T08:05:13.935Z"}
{"msg":"~wait, I thought RPC does that for me, no?~","username":"guoger","ts":"2018-09-11T08:05:13.935Z"}
{"msg":"nvm, misread msg","username":"guoger","ts":"2018-09-11T08:11:42.072Z"}
{"msg":"@guoger done","username":"yacovm","ts":"2018-09-11T08:31:18.407Z"}
{"msg":"Has joined the channel.","username":"Rosan","ts":"2018-09-13T06:42:24.637Z","type":"uj"}
{"msg":"why are both of [this](https://github.com/hyperledger/fabric/blob/master/sampleconfig/configtx.yaml#L523-L524) using client cert?","username":"guoger","ts":"2018-09-13T09:01:05.356Z"}
{"msg":"@yacovm may I know which integration scenario are you currently working on? trying to avoid overlap here. thx","username":"guoger","ts":"2018-09-13T09:14:49.177Z"}
{"msg":"I'm working on a single raft node for now","username":"yacovm","ts":"2018-09-13T09:25:10.805Z"}
{"msg":"but before I need to even make it possible to create a raft node in the `nwo` stuff","username":"yacovm","ts":"2018-09-13T09:25:30.291Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=sSpCgTsMd5KpMTxEi) @yacovm btw, can you take a look at this when you have time?","username":"guoger","ts":"2018-09-13T09:43:01.359Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=sSpCgTsMd5KpMTxEi","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=sSpCgTsMd5KpMTxEi","remote":true,"fileId":null,"fileName":null}]}
{"msg":"i did","username":"yacovm","ts":"2018-09-13T09:43:10.971Z"}
{"msg":"i have no clue","username":"yacovm","ts":"2018-09-13T09:43:13.269Z"}
{"msg":"it's not important ","username":"yacovm","ts":"2018-09-13T09:43:19.330Z"}
{"msg":"it's only a file path....","username":"yacovm","ts":"2018-09-13T09:43:31.842Z"}
{"msg":"I'm asking @adarshsaraf123 to help with multi-node integration test, and I'm trying to figure out how it can be parallelized with your integration test work","username":"guoger","ts":"2018-09-13T09:45:42.933Z"}
{"msg":"I'm asking @adarshsaraf123 to help with multi-node integration test, and I'm trying to figure out how it can be parallelized with _your_ integration test work","username":"guoger","ts":"2018-09-13T09:45:42.933Z"}
{"msg":"it cannot.... ","username":"yacovm","ts":"2018-09-13T09:46:07.992Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=sSpCgTsMd5KpMTxEi) @guoger I think it is just a tiny mistake. I had stumbled upon it when doing the configuration defaults work. ","username":"adarshsaraf123","ts":"2018-09-13T09:46:56.819Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=sSpCgTsMd5KpMTxEi","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=sSpCgTsMd5KpMTxEi","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=sSpCgTsMd5KpMTxEi) @guoger I think it is just a tiny mistake. I had stumbled upon it when doing the configuration defaults work and was thinking of fixing it in my patch. ","username":"adarshsaraf123","ts":"2018-09-13T09:46:56.819Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=sSpCgTsMd5KpMTxEi","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=sSpCgTsMd5KpMTxEi","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@guoger I don't understand though, you're doing now ginkgo tests for multi node raft ","username":"yacovm","ts":"2018-09-13T09:50:53.872Z"}
{"msg":"> I'm asking @adarshsaraf123 to help with multi-node integration test, and I'm trying to figure out how it can be parallelized with _your_ integration test work \njust to be precise - you mean the ginkgo tests under `integration/` right?","username":"yacovm","ts":"2018-09-13T09:51:24.869Z"}
{"msg":"yes","username":"guoger","ts":"2018-09-13T09:51:43.650Z"}
{"msg":"well he can't really start anything until I'm done preparing the integration tests infrastructure to support raft type OSNs","username":"yacovm","ts":"2018-09-13T09:52:31.473Z"}
{"msg":"sorry to dissapoint :) ","username":"yacovm","ts":"2018-09-13T09:52:49.088Z"}
{"msg":"ha, not at all, just wanna check so we have view","username":"guoger","ts":"2018-09-13T09:53:55.889Z"}
{"msg":"*same view","username":"guoger","ts":"2018-09-13T09:54:03.139Z"}
{"msg":"@yacovm About my comment [here](https://gerrit.hyperledger.org/r/#/c/26038/34/orderer/consensus/etcdraft/consenter.go) at line 80 about having to check for all parameters of the consenter matching to detect self-id. You said that isn't necessary. Can you please comment on it further? I thought if the consenting node is not correctly configured to have the same parameters as specified in the consenters set, then the other nodes will not be able to discover this node correctly. If the host/ip is mismatched then they cannot contact this node and if the client cert is different it might fail the TLS connection. ","username":"adarshsaraf123","ts":"2018-09-13T09:59:35.176Z"}
{"msg":"@yacovm About my comment [here](https://gerrit.hyperledger.org/r/#/c/26038/34/orderer/consensus/etcdraft/consenter.go) at line 80 about having to check for all parameters of the consenter matching to detect self-id. You said that isn't necessary. Can you please comment on it further? I thought if the consenting node is not correctly configured to have the same parameters as specified in the consenters set, then the other consenting nodes will not be able to discover this node correctly. If the host/ip is mismatched then they cannot contact this node and if the client cert is different it might fail the TLS connection. ","username":"adarshsaraf123","ts":"2018-09-13T09:59:35.176Z"}
{"msg":"but you need to make sure that _ you _ are reachable","username":"yacovm","ts":"2018-09-13T10:00:41.397Z"}
{"msg":"not that you can connect to others","username":"yacovm","ts":"2018-09-13T10:00:47.259Z"}
{"msg":"The orderer doesn't have an endpoint","username":"yacovm","ts":"2018-09-13T10:01:09.653Z"}
{"msg":"it's not a peer","username":"yacovm","ts":"2018-09-13T10:01:12.145Z"}
{"msg":"so there is no string to compare yourself to anyone","username":"yacovm","ts":"2018-09-13T10:01:19.929Z"}
{"msg":"how do you know what is your endpoint?","username":"yacovm","ts":"2018-09-13T10:01:28.830Z"}
{"msg":"give me an example please","username":"yacovm","ts":"2018-09-13T10:01:37.753Z"}
{"msg":"The etcdraft metadata contains the `Consenter` list which I believe is the only place from where the various consenting nodes come to know who the other consenting nodes are in the cluster. This `Consenter` [struct](https://github.com/hyperledger/fabric/blob/master/protos/orderer/etcdraft/configuration.proto#L21-#L26) specifies `host`, `port`, `client-tls-cert` and `server-tls-cert`. Now when I spin up a new raft node if I only compare my server cert to detect my own id while the other three of these are different, will it not happen that the other nodes will not be able to correctly locate/identify me?","username":"adarshsaraf123","ts":"2018-09-13T10:08:05.907Z"}
{"msg":"@yacovm ^^","username":"adarshsaraf123","ts":"2018-09-13T10:09:15.002Z"}
{"msg":"so you proposed to check the ip/host, right?","username":"yacovm","ts":"2018-09-13T10:09:49.598Z"}
{"msg":">  If the host/ip is mismatched then they cannot contact this node and if the client cert is different it might fail the TLS connection. ","username":"yacovm","ts":"2018-09-13T10:09:56.572Z"}
{"msg":"i'm asking  - how do you know, your host / ip ? ","username":"yacovm","ts":"2018-09-13T10:10:08.283Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=eHyKQA7y8rB66XH9n) @yacovm Yes, and the client cert as well","username":"adarshsaraf123","ts":"2018-09-13T10:10:17.483Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=eHyKQA7y8rB66XH9n","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=eHyKQA7y8rB66XH9n","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=e5gN8a42KzKxE7wj7) @yacovm isn't this supposed to be specified in `orderer.yaml` like the other certs.","username":"adarshsaraf123","ts":"2018-09-13T10:11:03.688Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=e5gN8a42KzKxE7wj7","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=e5gN8a42KzKxE7wj7","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=e5gN8a42KzKxE7wj7) @yacovm isn't this supposed to be specified in `orderer.yaml` like the other certs.?","username":"adarshsaraf123","ts":"2018-09-13T10:11:03.688Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=e5gN8a42KzKxE7wj7","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=e5gN8a42KzKxE7wj7","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=e5gN8a42KzKxE7wj7) @yacovm isn't this supposed to be specified in `orderer.yaml` like the other certs?","username":"adarshsaraf123","ts":"2018-09-13T10:11:03.688Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=e5gN8a42KzKxE7wj7","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=e5gN8a42KzKxE7wj7","remote":true,"fileId":null,"fileName":null}]}
{"msg":"no","username":"yacovm","ts":"2018-09-13T10:11:17.919Z"}
{"msg":"and if it is, then it's wrong. ","username":"yacovm","ts":"2018-09-13T10:11:27.375Z"}
{"msg":"because the orderer has no use of this information","username":"yacovm","ts":"2018-09-13T10:11:37.702Z"}
{"msg":"i.e - if i'm running my orderer in front of a load balancer, a firewall, a proxy, etc. etc.","username":"yacovm","ts":"2018-09-13T10:11:52.951Z"}
{"msg":"I need the TLS server cert to have that instead of my own ip/host","username":"yacovm","ts":"2018-09-13T10:12:06.634Z"}
{"msg":"I can also, run inside a container, and have an ip that is like 172.20.0.5","username":"yacovm","ts":"2018-09-13T10:12:18.596Z"}
{"msg":"let's not make things complex where we can keep them simple ;) ","username":"yacovm","ts":"2018-09-13T10:12:44.086Z"}
{"msg":"Oh okay. I get what you are saying. Then essentially [this specification](https://github.com/hyperledger/fabric/blob/master/sampleconfig/orderer.yaml#L24-#L28) of `ListenAddress` and `ListenPort` does not really help us?","username":"adarshsaraf123","ts":"2018-09-13T10:13:33.041Z"}
{"msg":"listen address is what you bind to","username":"yacovm","ts":"2018-09-13T10:14:44.909Z"}
{"msg":"it can be like 0.0.0.0","username":"yacovm","ts":"2018-09-13T10:14:48.236Z"}
{"msg":"And then what purpose does the host/ip specification in the `Consenter` struct serve?","username":"adarshsaraf123","ts":"2018-09-13T10:15:14.562Z"}
{"msg":"that's how other nodes reach you","username":"yacovm","ts":"2018-09-13T10:15:29.313Z"}
{"msg":"and i'm saying - there is nothing you can compare it to","username":"yacovm","ts":"2018-09-13T10:15:44.614Z"}
{"msg":"Ok got it. So I am to summarize, there is a static ip/port that a consenting node has to be reachable at as specified in the `Consenter` but while we spin up the node we cannot really check if the node is reachable at that. And it is the job of the admin to ensure that it is indeed reachable at the specified address. Am I right?","username":"adarshsaraf123","ts":"2018-09-13T10:17:49.379Z"}
{"msg":"Ok got it. So I am to summarize, there _is_ a static ip/port that a consenting node has to be reachable at as specified in the `Consenter` but while we spin up the node we cannot really check if the node is reachable at that. And it is the job of the admin to ensure that it is indeed reachable at the specified address. Am I right?","username":"adarshsaraf123","ts":"2018-09-13T10:17:49.379Z"}
{"msg":"yes","username":"yacovm","ts":"2018-09-13T10:18:21.126Z"}
{"msg":"OK thanks. And even the client cert need not be compared against? ","username":"adarshsaraf123","ts":"2018-09-13T10:18:50.620Z"}
{"msg":"let's keep it simple for now","username":"yacovm","ts":"2018-09-13T10:19:01.491Z"}
{"msg":"we can always add it","username":"yacovm","ts":"2018-09-13T10:19:05.259Z"}
{"msg":"Ok sure. Thanks again :)","username":"adarshsaraf123","ts":"2018-09-13T10:19:18.700Z"}
{"msg":"the way i see it, we need to get a full specification working first","username":"yacovm","ts":"2018-09-13T10:19:43.853Z"}
{"msg":"all these misc can always be added later","username":"yacovm","ts":"2018-09-13T10:19:48.976Z"}
{"msg":"Got it :+1_tone4: ","username":"adarshsaraf123","ts":"2018-09-13T10:20:04.040Z"}
{"msg":"Has joined the channel.","username":"JaydipMakadia","ts":"2018-09-13T13:12:23.293Z","type":"uj"}
{"msg":"so, we have 4 people working on the same CR stack with mixed dependencies... how do you guys think that we could streamline the review pipeline...","username":"guoger","ts":"2018-09-14T02:06:40.375Z"}
{"msg":"I think we can continue carefully build on top of this stack upcoming changes making sure to rebase and resolving conflicts ","username":"C0rWin","ts":"2018-09-14T08:15:34.671Z"}
{"msg":"also I think we need to try to design interfaces which will reduce frictions of conflicts","username":"C0rWin","ts":"2018-09-14T08:16:27.078Z"}
{"msg":"for example if we have had separation between chain and raft fsm we might have had less contention ","username":"C0rWin","ts":"2018-09-14T08:16:41.372Z"}
{"msg":"currently it seems that all 4 of us working on single piece i.e. `chain.go`","username":"C0rWin","ts":"2018-09-14T08:17:09.530Z"}
{"msg":"ha, we might end up working on another single piece still :P and I don't see an obvious line in between, we may frequently change the design of interface. So I proposed to couple them for faster iteration.","username":"guoger","ts":"2018-09-14T08:28:43.726Z"}
{"msg":"ha, we might end up working on another single piece still :P. I don't see an obvious line between raft and chain, we may frequently change the design of interface. So I proposed to couple them for faster iteration.","username":"guoger","ts":"2018-09-14T08:28:43.726Z"}
{"msg":"we need to take care of this: https://jira.hyperledger.org/browse/FAB-12003 cc @jyellick ","username":"guoger","ts":"2018-09-14T08:29:12.518Z"}
{"msg":"@guoger: This might be a n00b question, but I don't quite get the concept of a watcher in clockfoundry's fake clock. (And GoDoc/Google are not helping at all.) High-level overview of what it's meant to do?","username":"kostas","ts":"2018-09-15T19:09:05.705Z"}
{"msg":"(Looking at your clock CR right now.)","username":"kostas","ts":"2018-09-15T19:09:15.440Z"}
{"msg":"Do we have any idea why I'm unable to rebase this one? https://gerrit.hyperledger.org/r/c/26037/","username":"kostas","ts":"2018-09-15T20:33:41.569Z"}
{"msg":"I see no option to do so, and cherry-picking it on top of Jay's updated stack and pushing it gives me:","username":"kostas","ts":"2018-09-15T20:34:08.472Z"}
{"msg":"```~/Go/src/github.com/hyperledger/fabric/orderer/consensus (fab-11162-jay) $ git lg | head -n4\n* 818b91713 - (HEAD -> fab-11162-jay) [FAB-11832] Extract registrar initialization logic (54 seconds ago) <yacovm>\n* d88381642 - [FAB-11163] Implement barebones etcdraft consenter (60 minutes ago) <Jay Guo>\n* 43f436b7e - [FAB-11162] Simplify clock management in chain. (72 minutes ago) <Jay Guo>\n* 944adf2d5 - [FAB-11960] Introduce TLS to integration tests (2 days ago) <yacovm>\n~/Go/src/github.com/hyperledger/fabric/orderer/consensus (fab-11162-jay) $ git push origin HEAD:refs/for/master\nCounting objects: 23, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (23/23), done.\nWriting objects: 100% (23/23), 7.18 KiB | 432.00 KiB/s, done.\nTotal 23 (delta 16), reused 0 (delta 0)\nremote: Resolving deltas: 100% (16/16)\nremote: Processing changes: refs: 1, done\nTo ssh://gerrit.hyperledger.org:29418/fabric\n ! [remote rejected]     HEAD -> refs/for/master (cannot add patch set to 26037.)\nerror: failed to push some refs to 'ssh://kchristidis@gerrit.hyperledger.org:29418/fabric'```","username":"kostas","ts":"2018-09-15T20:34:33.789Z"}
{"msg":"yes, because @guoger really likes his drafts ","username":"yacovm","ts":"2018-09-15T20:48:57.085Z"}
{"msg":"@kostas ","username":"yacovm","ts":"2018-09-15T20:49:01.722Z"}
{"msg":"I fixed it... should work now","username":"yacovm","ts":"2018-09-15T20:49:10.326Z"}
{"msg":"and the TLS change set is merged","username":"yacovm","ts":"2018-09-15T20:49:25.579Z"}
{"msg":"Ah, I see. Sorry about that. I know rebasing is a pain.","username":"kostas","ts":"2018-09-15T20:49:30.790Z"}
{"msg":"it's not a pain through gerrit UI","username":"yacovm","ts":"2018-09-15T20:51:15.638Z"}
{"msg":":joy: no more draft","username":"guoger","ts":"2018-09-16T05:01:00.992Z"}
{"msg":"> the concept of a watcher in clockfoundry's fake clock. \nAre you talking about the `WaitForWatcherAndIncrement`? so when a timer is started with fakeclock, it uses a watcher to track it. this method make sure that the timer is actually started before advance the clock, so that we can deterministically assert the result. Does this answer help?","username":"guoger","ts":"2018-09-16T05:03:31.142Z"}
{"msg":"Guys, can we please try to have a single change set chain and not a tree of change sets?","username":"yacovm","ts":"2018-09-16T08:56:38.872Z"}
{"msg":"otherwise we're going to merge-conflict-resolution-hell ","username":"yacovm","ts":"2018-09-16T08:57:11.453Z"}
{"msg":"@guoger can you please put https://gerrit.hyperledger.org/r/#/c/25479/ somewhere inside the change set chain?","username":"yacovm","ts":"2018-09-16T10:59:21.919Z"}
{"msg":"without it being in the chain, we can't create channels, because https://gerrit.hyperledger.org/r/#/c/26286/ is not below and not on top of it","username":"yacovm","ts":"2018-09-16T11:00:27.326Z"}
{"msg":"I want tomorrow to enable multi-raft e2e_cli","username":"yacovm","ts":"2018-09-16T11:02:01.008Z"}
{"msg":"but i can't do that without having a chain with both the ability to create channels, and multi-raft chains ;) ","username":"yacovm","ts":"2018-09-16T11:02:22.258Z"}
{"msg":"@guoger: I'm not quite sure I get you just yet :)","username":"kostas","ts":"2018-09-16T15:46:46.595Z"}
{"msg":"For instance: `Eventually(clock.WatcherCount).Should(Equal(2))`","username":"kostas","ts":"2018-09-16T15:46:56.330Z"}
{"msg":"I don't get this.","username":"kostas","ts":"2018-09-16T15:47:01.161Z"}
{"msg":"@kostas To the extent I understand, and @guoger can correct me if I am wrong, the fake clock works in such a way that each time a `Timer` or a `Ticker` is created, the clock keeps track of them as `Watcher`s. In the case of `Eventually(clock.WatcherCount).Should(Equal(2))` we are expecting two watchers of the fake clock. One is the `Ticker` for ticking the raft node, and the other is a `Timer` for the batch timeout that ought to be started post receiving of a normal block. ","username":"adarshsaraf123","ts":"2018-09-16T15:58:58.242Z"}
{"msg":"Ahhh, this makes sense.","username":"kostas","ts":"2018-09-16T16:02:25.689Z"}
{"msg":"Ahhh, this makes sense now.","username":"kostas","ts":"2018-09-16T16:02:25.689Z"}
{"msg":"Thank you sir.","username":"kostas","ts":"2018-09-16T16:02:29.314Z"}
{"msg":"Thank you both.","username":"kostas","ts":"2018-09-16T16:02:29.314Z"}
{"msg":"sorry I did a poor job explaining this...","username":"guoger","ts":"2018-09-17T01:05:42.119Z"}
{"msg":"thank you @adarshsaraf123 ","username":"guoger","ts":"2018-09-17T01:06:56.100Z"}
{"msg":"@yacovm rebased the stack. \"Say hello to Raft OSN\" is updated with trivial changes to be rebased","username":"guoger","ts":"2018-09-17T02:16:03.227Z"}
{"msg":"Trivial changes you mean it's a draft now, @guoger ?","username":"yacovm","ts":"2018-09-17T04:28:59.623Z"}
{"msg":"No... no draft anymore","username":"guoger","ts":"2018-09-17T04:31:13.811Z"}
{"msg":"I think just some comments. It was not rebased on latest version of first two CRs in the stack","username":"guoger","ts":"2018-09-17T04:32:34.715Z"}
{"msg":"By the way","username":"yacovm","ts":"2018-09-17T05:00:38.466Z"}
{"msg":"@guoger that was a joke 😉","username":"yacovm","ts":"2018-09-17T05:01:57.394Z"}
{"msg":"lol, for a moment I thought I pushed to draft again :P","username":"guoger","ts":"2018-09-17T05:03:54.910Z"}
{"msg":"@kostas @guoger @adarshsaraf123 @C0rWin  - the change set chain is still not properly rebased, I think.... I'm doing a cascading rebase starting from the first CR to figure out where it is split ","username":"yacovm","ts":"2018-09-17T06:11:37.057Z"}
{"msg":"I'm rebasing via gerrit UI, so please when you update a CR - pull the CR from gerrit before continuing the work, otherwise you'll end up un-rebasing :( ","username":"yacovm","ts":"2018-09-17T06:12:15.881Z"}
{"msg":"@guoger - this one https://gerrit.hyperledger.org/r/#/c/26180/ needs a manual rebase as it can't be automatically rebased","username":"yacovm","ts":"2018-09-17T06:14:32.587Z"}
{"msg":"that's after multi-node and can you ignore that for now? i don't know whether that should be after/before Adarsh's work yet...","username":"guoger","ts":"2018-09-17T06:15:18.768Z"}
{"msg":"so it's currently a cousin of his work now..","username":"guoger","ts":"2018-09-17T06:15:40.261Z"}
{"msg":"@yacovm @C0rWin @guoger @kostas  \nI was thinking of calling the erstwhile `FSMConfig` just `Options` It will look good in the `configtxyaml` as yacov had pointed out and spells out the meaning also sufficiently clearly. If there is consensus on this then I can proceed with making the change.","username":"adarshsaraf123","ts":"2018-09-17T06:15:44.168Z"}
{"msg":"Options LGTM","username":"guoger","ts":"2018-09-17T06:16:02.639Z"}
{"msg":"@guoger - your change set is only above https://gerrit.hyperledger.org/r/#/c/26038/ but it's not above https://gerrit.hyperledger.org/r/#/c/26287/ : (","username":"yacovm","ts":"2018-09-17T06:17:53.993Z"}
{"msg":"@guoger - your change set is only above https://gerrit.hyperledger.org/r/#/c/26038/ but it's not above https://gerrit.hyperledger.org/r/#/c/26287/  :(","username":"yacovm","ts":"2018-09-17T06:17:53.993Z"}
{"msg":"do you mind if I try rebasing it on top?","username":"yacovm","ts":"2018-09-17T06:18:04.555Z"}
{"msg":"go ahead, if it's blocking anything, throw it to the tail. It shouldn't not be in mvp anyway","username":"guoger","ts":"2018-09-17T06:22:44.057Z"}
{"msg":"(don't bother to rebase it, just put it to tail. I'll rebase)","username":"guoger","ts":"2018-09-17T06:23:03.620Z"}
{"msg":"so I had to solve conflicts, @guoger ","username":"yacovm","ts":"2018-09-17T06:52:28.368Z"}
{"msg":"and now the consenter tests aren't passing :/ ","username":"yacovm","ts":"2018-09-17T06:52:40.434Z"}
{"msg":"I had similar _'concern'_ as @adarshsaraf123 w.r.t decoupling and my understanding is that it's ok for a leader to fail to write _all_ blocks in its queue into ledger, as long as we guarantee that new leader creates new blocks starting from last _applied_ block. Although, I just wanna point out that it may get a bit more complicated if we want to prevent new normal blocks while a config block is in-flight","username":"guoger","ts":"2018-09-17T06:53:08.071Z"}
{"msg":"@yacovm where did you see conflict? nothing should be depending on wal yet, no?","username":"guoger","ts":"2018-09-17T06:53:41.840Z"}
{"msg":"unrelated to WAL","username":"yacovm","ts":"2018-09-17T06:53:50.747Z"}
{"msg":"https://gerrit.hyperledger.org/r/#/c/25479/","username":"yacovm","ts":"2018-09-17T06:54:31.732Z"}
{"msg":"in my local stack, multi-node comes right after 'say hello', and you want to inject 'creation' in between?","username":"guoger","ts":"2018-09-17T06:54:33.309Z"}
{"msg":"the integration tests pass","username":"yacovm","ts":"2018-09-17T06:54:36.592Z"}
{"msg":"https://gerrit.hyperledger.org/r/#/c/25479/","username":"yacovm","ts":"2018-09-17T06:54:39.864Z"}
{"msg":"> I had similar _'concern'_ as @adarshsaraf123 w.r.t decoupling and my understanding is that it's ok for a leader to fail to write _all_ blocks in its queue into ledger, as long as we guarantee that new leader creates new blocks starting from last _applied_ block.\n@guoger: Jay, what else could it start creating new blocks on, other than the last applied block?","username":"kostas","ts":"2018-09-17T06:54:41.853Z"}
{"msg":"but the UT don't...","username":"yacovm","ts":"2018-09-17T06:54:44.559Z"}
{"msg":"@guoger  can you please take a look at https://gerrit.hyperledger.org/r/#/c/25479/ ? ","username":"yacovm","ts":"2018-09-17T06:54:51.493Z"}
{"msg":"these are your tests :joy: ","username":"yacovm","ts":"2018-09-17T06:54:56.207Z"}
{"msg":"I want to spearhead into multi-node raft e2e_cli if possible","username":"yacovm","ts":"2018-09-17T06:55:12.113Z"}
{"msg":"looking","username":"guoger","ts":"2018-09-17T06:55:35.306Z"}
{"msg":">  in my local stack, multi-node comes right after 'say hello', and you want to inject 'creation' in between? \nSo, I want to put the multi-node right after https://gerrit.hyperledger.org/r/#/c/26297/","username":"yacovm","ts":"2018-09-17T06:56:05.709Z"}
{"msg":"the reason is - the https://gerrit.hyperledger.org/r/#/c/26297/ (single node integration tests) is in a way -a checkpoint in the development","username":"yacovm","ts":"2018-09-17T06:56:23.203Z"}
{"msg":"that \"things work good for a single node\"","username":"yacovm","ts":"2018-09-17T06:56:29.200Z"}
{"msg":"fixed. two lines were missing from rebasing..","username":"guoger","ts":"2018-09-17T07:05:57.454Z"}
{"msg":"@yacovm can you give it another try?","username":"guoger","ts":"2018-09-17T07:06:31.545Z"}
{"msg":"yay it works, thanks","username":"yacovm","ts":"2018-09-17T07:09:51.844Z"}
{"msg":"> what else could it start creating new blocks on, other than the last applied block?\n@kostas that's to say, we should discard blocks in queue if leadership is lost, with the same reason for purging blockcutter. And read last applied when elected.","username":"guoger","ts":"2018-09-17T07:27:32.603Z"}
{"msg":"I'm not saying it's a problem, just wanna make sure it's taken care of","username":"guoger","ts":"2018-09-17T07:27:54.151Z"}
{"msg":"so when we create jira, it may be worth to be added to description, cc @adarshsaraf123 ","username":"guoger","ts":"2018-09-17T07:28:35.404Z"}
{"msg":"ok it's not working, guys","username":"yacovm","ts":"2018-09-17T08:30:01.085Z"}
{"msg":"```\n2018-09-17 08:28:14.094 UTC [orderer/common/cluster] handleSubmit -> WARN 20f Handling of Propose() from 192.168.192.7:56099 failed: badly formatted message, cannot extract channel\ngithub.com/hyperledger/fabric/orderer/common/cluster.(*Comm).requestContext\n        /opt/gopath/src/github.com/hyperledger/fabric/orderer/common/cluster/comm.go:124\ngithub.com/hyperledger/fabric/orderer/common/cluster.(*Comm).DispatchSubmit\n        /opt/gopath/src/github.com/hyperledger/fabric/orderer/common/cluster/comm.go:102\ngithub.com/hyperledger/fabric/orderer/common/cluster.(*Service).handleSubmit\n        /opt/gopath/src/github.com/hyperledger/fabric/orderer/common/cluster/service.go:82\ngithub.com/hyperledger/fabric/orderer/common/cluster.(*Service).Submit\n        /opt/gopath/src/github.com/hyperledger/fabric/orderer/common/cluster/service.go:61\ngithub.com/hyperledger/fabric/protos/orderer._Cluster_Submit_Handler\n        /opt/gopath/src/github.com/hyperledger/fabric/protos/orderer/cluster.pb.go:312\ngithub.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).processStreamingRPC\n        /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:1160\ngithub.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).handleStream\n        /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:1253\ngithub.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).serveStreams.func1.1\n        /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:680\nruntime.goexit\n        /opt/go/src/runtime/asm_amd64.s:2361\ngithub.com/hyperledger/fabric/orderer/common/cluster.(*Comm).DispatchSubmit\n        /opt/gopath/src/github.com/hyperledger/fabric/orderer/common/cluster/comm.go:104\ngithub.com/hyperledger/fabric/orderer/common/cluster.(*Service).handleSubmit\n        /opt/gopath/src/github.com/hyperledger/fabric/orderer/common/cluster/service.go:82\ngithub.com/hyperledger/fabric/orderer/common/cluster.(*Service).Submit\n        /opt/gopath/src/github.com/hyperledger/fabric/orderer/common/cluster/service.go:61\ngithub.com/hyperledger/fabric/protos/orderer._Cluster_Submit_Handler\n        /opt/gopath/src/github.com/hyperledger/fabric/protos/orderer/cluster.pb.go:312\ngithub.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).processStreamingRPC\n        /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:1160\ngithub.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).handleStream\n        /opt/gopath/src/github.com/hyperledger/fabric/vendor/google.golang.org/grpc/server.go:1253\ngithub.com/hyperledger/fabric/vendor/google.golang.org/grpc.(*Server).serveStreams.func1.1\n```","username":"yacovm","ts":"2018-09-17T08:30:04.857Z"}
{"msg":"but hey at least the communication is working :) ","username":"yacovm","ts":"2018-09-17T08:30:17.169Z"}
{"msg":"going now to a meeting and will investigate after, but looks like someone didn't put a channel tag maybe","username":"yacovm","ts":"2018-09-17T08:30:42.835Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=dJZFWeifTsGrTkGBw) @adarshsaraf123 I'm good with it","username":"C0rWin","ts":"2018-09-17T08:33:15.813Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=dJZFWeifTsGrTkGBw","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=dJZFWeifTsGrTkGBw","remote":true,"fileId":null,"fileName":null}]}
{"msg":"attention all - I have rebased today the entire CR stack, please take care in pushing change sets :) ","username":"yacovm","ts":"2018-09-17T14:43:37.913Z"}
{"msg":"attention all - I have rebased today the entire CR stack, please take care in pushing change sets :) \n@kostas @adarshsaraf123 @C0rWin ","username":"yacovm","ts":"2018-09-17T14:43:37.913Z"}
{"msg":"attention all - I have rebased today the entire CR stack, please take care in pushing change sets :) \n @kostas @adarshsaraf123 @C0rWin   ","username":"yacovm","ts":"2018-09-17T14:43:37.913Z"}
{"msg":"attention all - I have rebased today the entire CR stack, to fix something in a CR in between, and also to pick up latest code changes from master. please take care in pushing change sets :) \n @kostas @adarshsaraf123 @C0rWin   ","username":"yacovm","ts":"2018-09-17T14:43:37.913Z"}
{"msg":"@guoger  I have updated slightly your change set for multi-node raft","username":"yacovm","ts":"2018-09-17T14:43:48.749Z"}
{"msg":"Since rocket was down I was unable to contact you to fix it","username":"yacovm","ts":"2018-09-17T14:43:59.358Z"}
{"msg":"but basically - i added the channel ID to the `chain` struct","username":"yacovm","ts":"2018-09-17T14:44:10.210Z"}
{"msg":"and added the channel ID to the `Submit()` invocations to the comm layer","username":"yacovm","ts":"2018-09-17T14:44:21.823Z"}
{"msg":"otherwise - the comm layer on the other side rejects the messages","username":"yacovm","ts":"2018-09-17T14:44:30.352Z"}
{"msg":"Has joined the channel.","username":"Jgnuid","ts":"2018-09-17T15:14:07.339Z","type":"uj"}
{"msg":"The Gods have blessed us by taking RC down. Praise be. It was good while it lasted.","username":"kostas","ts":"2018-09-17T15:19:29.357Z"}
{"msg":"Has joined the channel.","username":"snakejerusalem","ts":"2018-09-17T15:36:06.545Z","type":"uj"}
{"msg":"Greetings. I am not sure if this is the correct channel, so apologies in advance. I am working with my own Fabric v1.2 fork, and I currently need to fetch the orderer type from within this method: `https://github.com/hyperledger/fabric/blob/release-1.2/core/committer/txvalidator/validator.go#L264`. I've seen that the TxValidator interface provides a Support and Vscc attribute. Is it possible to fetch the orderer type using any of these methods?","username":"snakejerusalem","ts":"2018-09-17T15:41:05.453Z"}
{"msg":"@snakejerusalem The orderer type can be retrieved via the channel configuration.  You could likely extend the `Support` interface to also return the OrdererConfig  in addition to the ApplicationConfig data.","username":"jyellick","ts":"2018-09-17T17:31:36.901Z"}
{"msg":"However, as a design principle, the peers should generally be agnostic to the orderer implementation type.  The only piece that changes is typically the 'block validation policy' which determines who and how many valid signatures a block must have","username":"jyellick","ts":"2018-09-17T17:32:19.291Z"}
{"msg":"snake, here is sample code that does what you need\n```\nfunc ordererType(genesisBlock *cb.Block) string {\n\tif genesisBlock.Data == nil || len(genesisBlock.Data.Data) == 0 {\n\t\tlogger.Fatalf(\"Empty genesis block\")\n\t}\n\tenv := &cb.Envelope{}\n\tif err := proto.Unmarshal(genesisBlock.Data.Data[0], env); err != nil {\n\t\tlogger.Fatalf(\"Failed to unmarshal the genesis block's envelope: %v\", err)\n\t}\n\tbundle, err := channelconfig.NewBundleFromEnvelope(env)\n\tif err != nil {\n\t\tlogger.Fatalf(\"Failed creating bundle from the genesis block: %v\", err)\n\t}\n\tordConf, exists := bundle.OrdererConfig()\n\tif !exists {\n\t\tlogger.Fatalf(\"Orderer config doesn't exist in bundle derived from genesis block\")\n\t}\n\n\treturn ordConf.ConsensusType()\n}\n`````","username":"yacovm","ts":"2018-09-17T17:45:42.616Z"}
{"msg":"Thanks, @jyellick . But unfortunately, I have an issue that really forces me to do one of two things: a) assume that I always use the same orderer type, or b)  break that principle so that I know I can do some thing different that my orderer needs","username":"snakejerusalem","ts":"2018-09-17T17:46:48.865Z"}
{"msg":"@yacovm thank you very much!","username":"snakejerusalem","ts":"2018-09-17T17:47:04.054Z"}
{"msg":"btw, the issue I have is related to the fact that configuration envelopes need to be signed by the orderer. However, from what I understand of Fabric, I do not see why they need to be. When a configuration envelope is created, it is placed in block all to it self, and blocks are always signed by the orderer. So if that configuration block is signed, does the configuration envelope inside it really needs t be signed as well?","username":"snakejerusalem","ts":"2018-09-17T17:54:24.251Z"}
{"msg":"You may think of it as more of an audit trail.  Some orderer receives a 'config update', from a client.  That orderer validates that update, and produces a new config based on that update.  Then, the config is ordered, and each orderer optionally validates (depending on consensus type) and commits  the config.  When the peers receive the config, they similarly validate the update, before committing the block.  The config should _always_ validate, because the orderers should have validated it before committing.  However, if the config does not validate, having evidence (an ID + signature) of which orderer generated the config is valuable.","username":"jyellick","ts":"2018-09-17T17:58:34.322Z"}
{"msg":"You may think of it as more of an audit trail.  Some orderer receives a 'config update', from a client.  That orderer validates that update, and produces a new config based on that update.  Then, the config is ordered, and each orderer optionally re-validates (depending on consensus type) and commits  the config.  When the peers receive the config, they similarly validate the update, before committing the block.  The config should _always_ validate, because the orderers should have validated it before committing.  However, if the config does not validate, having evidence (an ID + signature) of which orderer generated the config is valuable.","username":"jyellick","ts":"2018-09-17T17:58:34.322Z"}
{"msg":"But both the config and the block are signe by the orderers. Since the config is added to a block comprised by only that config, aren't one fo the signatures redundant?","username":"snakejerusalem","ts":"2018-09-17T18:05:47.246Z"}
{"msg":"But both the config and the block are signed by the orderers. Since the config is added to a block comprised by only that config, isn't one of the signatures redundant?","username":"snakejerusalem","ts":"2018-09-17T18:05:47.246Z"}
{"msg":"But both the config and the block are signed by the orderers. Since the config is added to a block comprised by only that config, isn't one of the signatures redundant? Don't both signatures serve to validate the same thing?","username":"snakejerusalem","ts":"2018-09-17T18:05:47.246Z"}
{"msg":"And since all blocks need to be signed, isn't it theoretically safe to leave the config unsigned?","username":"snakejerusalem","ts":"2018-09-17T18:09:07.392Z"}
{"msg":"Depends on your assumptions.  It is a nice feature of fabric, that every envelope on the blockchain is signed by the entity which created it.  It leaves a nice audit trail.  Because in the special case of config transactions, the orderers do some additional validation, you could argue that the signature is redundant.  However, for instance in the CFT case like with Kafka, the other orderers do not generally revalidate the config, they simply commit it, so the signature on the block is attesting to something slightly different.","username":"jyellick","ts":"2018-09-17T18:18:28.444Z"}
{"msg":"yes, but once you start working with the BFT case, this is a problem. In CFT one signature is enough, but in BFT you need a Byzantine majority of signatures. Unfortunately the envelopes only support a single signature, whereas the blocks support multiple signatures. ","username":"snakejerusalem","ts":"2018-09-17T18:35:19.515Z"}
{"msg":"In the BFT case, the signature over the config would generally be that of the node which generated it (usually the leader at the time).  Though the f+1 signatures on the block would attest to the config's validity.","username":"jyellick","ts":"2018-09-17T18:36:04.426Z"}
{"msg":"but why would a single signature from a leader (that could very well be malicious) be enough for safety?","username":"snakejerusalem","ts":"2018-09-17T18:37:41.440Z"}
{"msg":"I don't see how you could preserve safety in the BFT case having the config envelope be signed by a single orderer, be it the leader or other process.","username":"snakejerusalem","ts":"2018-09-17T18:42:15.407Z"}
{"msg":"In the BFT case, it is not for safety, it's for audit.","username":"jyellick","ts":"2018-09-17T19:07:25.933Z"}
{"msg":"As you say, if all of the BFT orderers validate the config before agreeing to commit it, there is no safety concern.  However, it is nice to be able to associate any generated transaction content with a particular identity.","username":"jyellick","ts":"2018-09-17T19:09:22.788Z"}
{"msg":"ok, gotcha.","username":"snakejerusalem","ts":"2018-09-17T19:15:59.354Z"}
{"msg":"Also, one other thing, I am having trouble finding in the source code the place where the block signatures are verified. Where is that done?","username":"snakejerusalem","ts":"2018-09-17T19:16:35.282Z"}
{"msg":"https://github.com/hyperledger/fabric/blob/77c3aa6ce5b0cfba93bfda009095886dbcadff91/peer/gossip/mcs.go#L117-L196","username":"jyellick","ts":"2018-09-17T19:20:39.432Z"}
{"msg":"thank you!","username":"snakejerusalem","ts":"2018-09-17T19:21:46.929Z"}
{"msg":"Just one last thing. Fabric generates a second block signature here: https://github.com/hyperledger/fabric/blob/3ec2839de4d0d754b1eaf01bd18b389e3edd2086/orderer/common/multichannel/blockwriter.go#L195 . But where in the code is this signature validated? I found some places where the method `GetLastConfigIndexFromBlock` is used to fetch the value encoded in the metadata, but where is the respective signature validated?","username":"snakejerusalem","ts":"2018-09-17T20:10:39.262Z"}
{"msg":"so, the truth is - it is not used....","username":"yacovm","ts":"2018-09-17T20:27:27.027Z"}
{"msg":"it is only used when it has already been committed","username":"yacovm","ts":"2018-09-17T20:27:50.199Z"}
{"msg":"but - it is never used on a block that is pending to be committed, or in-flight","username":"yacovm","ts":"2018-09-17T20:28:04.456Z"}
{"msg":"and since you committed the block, you also checked its height. ","username":"yacovm","ts":"2018-09-17T20:28:27.215Z"}
{"msg":"and i have to ask what's the deal with your name?","username":"yacovm","ts":"2018-09-17T20:29:00.810Z"}
{"msg":"and i have to ask what's the deal with your name? (what does it mean?)","username":"yacovm","ts":"2018-09-17T20:29:00.810Z"}
{"msg":"Ok, thank you! a for my username, it is a reference to a comic book called \"transmetropolitan\". The protagonist is called \"Spider Jerusalem\", but I changed it slightly so that I can always","username":"snakejerusalem","ts":"2018-09-17T20:32:46.413Z"}
{"msg":"Ok, thank you! a for my username, it is a reference to a comic book called \"transmetropolitan\". The protagonist is called \"Spider Jerusalem\", but I changed it slightly so that I can always fetch an unused username anywhere I sign up to.","username":"snakejerusalem","ts":"2018-09-17T20:32:46.413Z"}
{"msg":"> Spider's weapon of choice for most of the series is a \"bowel disruptor,\" which causes instant and painful loss of bowel control, with settings that allow him to vary the level of pain and discomfort, ranging from simple loose, watery diarrhea to complete rectal prolapse.\n\nSeems like a nice man, overall. ","username":"yacovm","ts":"2018-09-17T20:35:36.356Z"}
{"msg":"Definitely a model citizen ^^","username":"snakejerusalem","ts":"2018-09-17T20:37:35.214Z"}
{"msg":"@guoger @adarshsaraf123 where did you change the FSMConfig to Options ?","username":"yacovm","ts":"2018-09-18T07:44:42.189Z"}
{"msg":"in what change set?","username":"yacovm","ts":"2018-09-18T07:44:44.591Z"}
{"msg":"ah found it  https://gerrit.hyperledger.org/r/#/c/26178/","username":"yacovm","ts":"2018-09-18T07:45:31.568Z"}
{"msg":"Hi, I have a noob question about these two lines (https://github.com/hyperledger/fabric/blob/e6bdd232138c7e22ccb373587956ee6f5c18725a/orderer/consensus/etcdraft/chain.go#L190-L191). My understanding is that if the submitted message `msg.LastValidationSeq ` is behind current channel's config seq, it calls ProcessNormalMsg(msg.Content). However, when I look at the function ProcessNormalMsg, it seems not check the configuration seq and returns nil, which means this msg will be sent to the cutter. Will this cause any conflict if a tx with outdated config seq is sent to the current order? Thanks.","username":"huikang","ts":"2018-09-19T04:47:48.648Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=9rnC4swCGz7YYNYFy) @huikang Not sure which `ProcessNormalMsg` implementation you have looked at. Check [this one](https://github.com/hyperledger/fabric/blob/e6bdd232138c7e22ccb373587956ee6f5c18725a/orderer/common/msgprocessor/standardchannel.go#L77-#L83) out. ","username":"adarshsaraf123","ts":"2018-09-19T05:03:05.725Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=9rnC4swCGz7YYNYFy","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=9rnC4swCGz7YYNYFy","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=QSbddsrz4qgXnrLLb) @adarshsaraf123 Yes, I was looking at this one. It gets the current seq and apply a filter. However, the code in chain.go still has the msg.LastValidationSeq < seq. I am trying to understand in which case, the tx msg is considered a bad one if msg.LastValidationSeq < seq.","username":"huikang","ts":"2018-09-19T13:59:50.331Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=QSbddsrz4qgXnrLLb","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=QSbddsrz4qgXnrLLb","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=2N5QwWFjdgJGwxapH) @huikang Oh got you now.. Let's say, hypothetically, that the `AbsoluteMaxBytes` was earlier 5MB and tx A comes in of size 2MB. Currently A is a valid tx. Now let us assume that a config block is created with changes the `AbsoluteMaxBytes` to 1MB. Then this tx will no longer be valid and would be rejected at `ProcessNormalMsg`. ","username":"adarshsaraf123","ts":"2018-09-19T14:04:24.159Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=2N5QwWFjdgJGwxapH","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=2N5QwWFjdgJGwxapH","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=2N5QwWFjdgJGwxapH) @huikang Oh got you now.. Let's say, hypothetically, that the `AbsoluteMaxBytes` was earlier 5MB and tx A comes in of size 2MB. Currently A is a valid tx. Now let us assume that a config block is created which changes the `AbsoluteMaxBytes` to 1MB. Then this tx will no longer be valid and would be rejected at `ProcessNormalMsg`. ","username":"adarshsaraf123","ts":"2018-09-19T14:04:24.159Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=2N5QwWFjdgJGwxapH","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=2N5QwWFjdgJGwxapH","remote":true,"fileId":null,"fileName":null}]}
{"msg":"A similar example could also be created with signature invalidation due to an `Org` update in the config block. ","username":"adarshsaraf123","ts":"2018-09-19T14:05:24.531Z"}
{"msg":"@adarshsaraf123 thanks for providing the example. That's what I am looking for. However, where can I find in the call path of ProcessNormalMsg that rejects the tx (is it part of the filter)?","username":"huikang","ts":"2018-09-19T14:08:20.885Z"}
{"msg":"Yes it is part of the filters. ","username":"adarshsaraf123","ts":"2018-09-19T14:08:53.453Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=gCb8CvwzmpXDEBCD8) @adarshsaraf123 Looks like the filters are very simple (https://github.com/hyperledger/fabric/blob/e6bdd232138c7e22ccb373587956ee6f5c18725a/orderer/common/msgprocessor/filter.go). My assumption is that the support chain will create some specific rules to check those configurations. Is that correct?","username":"huikang","ts":"2018-09-19T14:13:28.016Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=gCb8CvwzmpXDEBCD8","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=gCb8CvwzmpXDEBCD8","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[These](https://github.com/hyperledger/fabric/blob/master/orderer/common/msgprocessor/standardchannel.go#L47-#L59) are the filters for the standard channels.  ","username":"adarshsaraf123","ts":"2018-09-19T14:17:18.742Z"}
{"msg":"[These](https://github.com/hyperledger/fabric/blob/master/orderer/common/msgprocessor/systemchannel.go#L43-#L56) are the filters for the system channels. ","username":"adarshsaraf123","ts":"2018-09-19T14:18:03.598Z"}
{"msg":"@huikang ^^","username":"adarshsaraf123","ts":"2018-09-19T14:18:42.725Z"}
{"msg":"Got you. I see the SizeFilter as you described in the example. Thanks!","username":"huikang","ts":"2018-09-19T14:53:20.628Z"}
{"msg":"theoretically speaking, can we use Ethereum as OSN?","username":"guoger","ts":"2018-09-20T05:54:06.917Z"}
{"msg":"Has joined the channel.","username":"Shyam_Pratap_Singh","ts":"2018-09-20T06:25:55.957Z","type":"uj"}
{"msg":"@guoger, I think so as long as the output blocks are the same order for all peers.","username":"huikang","ts":"2018-09-20T13:44:28.704Z"}
{"msg":"I'm not sure if `etcd/contrib/raftexample` actually handles snapshotting correctly. can someone help me verify if this failure could be reproduced?\n_I'm on master branch with commit `1a3be73`_\n\nchange [defaultSnapshotCount](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/raft.go#L74) to smaller number, i.e. 10\n*Failure case A:*\n1) start a fresh raftexample cluster per [readme](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/README.md#fault-tolerance)\n2) run `while curl -L http://127.0.0.1:12380/my-key -XPUT -d foo; do :; done`\n3) it panics at second snapshot with\n```\n15:19:14 raftexample3 | panic: requested index is unavailable due to compaction\n15:19:14 raftexample3 | goroutine 111 [running]:\n15:19:14 raftexample3 | main.(*raftNode).maybeTriggerSnapshot(0xc4201be000)\n15:19:14 raftexample3 | \t/Users/guoger/workspace/go-project/src/go.etcd.io/etcd/contrib/raftexample/raft.go:373 +0x405\n15:19:14 raftexample3 | main.(*raftNode).serveChannels(0xc4201be000)\n15:19:14 raftexample3 | \t/Users/guoger/workspace/go-project/src/go.etcd.io/etcd/contrib/raftexample/raft.go:442 +0x548\n15:19:14 raftexample3 | created by main.(*raftNode).startRaft\n15:19:14 raftexample3 | \t/Users/guoger/workspace/go-project/src/go.etcd.io/etcd/contrib/raftexample/raft.go:313 +0x5d3\n```\n*Failure case B:*\n1) start a fresh raftexample cluster per [readme](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/README.md#fault-tolerance)\n2) repeatedly insert key till first compact (raft log should say `compacted log at index X`)\n3) kill cluster\n4) restart with goreman, and all nodes *stuck* at `loading snapshot at term X and index Y`. (unable to insert new key, service is not started)","username":"guoger","ts":"2018-09-21T07:36:24.030Z"}
{"msg":"I'm not sure if `etcd/contrib/raftexample` actually handles snapshotting correctly. can someone help me verify if this failure could be reproduced?\n_I'm on master branch with commit `1a3be73` _\n\nchange [defaultSnapshotCount](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/raft.go#L74) to smaller number, i.e. 10\n*Failure case A:*\n1) start a fresh raftexample cluster per [readme](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/README.md#fault-tolerance)\n2) run `while curl -L http://127.0.0.1:12380/my-key -XPUT -d foo; do :; done`\n3) it panics at second snapshot with\n```\n15:19:14 raftexample3 | panic: requested index is unavailable due to compaction\n15:19:14 raftexample3 | goroutine 111 [running]:\n15:19:14 raftexample3 | main.(*raftNode).maybeTriggerSnapshot(0xc4201be000)\n15:19:14 raftexample3 | \t/Users/guoger/workspace/go-project/src/go.etcd.io/etcd/contrib/raftexample/raft.go:373 +0x405\n15:19:14 raftexample3 | main.(*raftNode).serveChannels(0xc4201be000)\n15:19:14 raftexample3 | \t/Users/guoger/workspace/go-project/src/go.etcd.io/etcd/contrib/raftexample/raft.go:442 +0x548\n15:19:14 raftexample3 | created by main.(*raftNode).startRaft\n15:19:14 raftexample3 | \t/Users/guoger/workspace/go-project/src/go.etcd.io/etcd/contrib/raftexample/raft.go:313 +0x5d3\n```\n*Failure case B:*\n1) start a fresh raftexample cluster per [readme](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/README.md#fault-tolerance)\n2) repeatedly insert key till first compact (raft log should say `compacted log at index X`)\n3) kill cluster\n4) restart with goreman, and all nodes *stuck* at `loading snapshot at term X and index Y`. (unable to insert new key, service is not started)","username":"guoger","ts":"2018-09-21T07:36:24.030Z"}
{"msg":"I'm not sure if `etcd/contrib/raftexample` actually handles snapshotting correctly. can someone help me verify if this failure could be reproduced?\n_I'm on master branch with commit `1a3be73` _\n\nchange [defaultSnapshotCount](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/raft.go#L74) to smaller number, i.e. 10\n*Failure case A:*\n1) start a fresh raftexample cluster per [readme](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/README.md#fault-tolerance)\n2) run `while curl -L http://127.0.0.1:12380/my-key -XPUT -d foo; do :; done`\n3) it panics (fairly quick) at second snapshot with\n```\n15:19:14 raftexample3 | panic: requested index is unavailable due to compaction\n15:19:14 raftexample3 | goroutine 111 [running]:\n15:19:14 raftexample3 | main.(*raftNode).maybeTriggerSnapshot(0xc4201be000)\n15:19:14 raftexample3 | \t/Users/guoger/workspace/go-project/src/go.etcd.io/etcd/contrib/raftexample/raft.go:373 +0x405\n15:19:14 raftexample3 | main.(*raftNode).serveChannels(0xc4201be000)\n15:19:14 raftexample3 | \t/Users/guoger/workspace/go-project/src/go.etcd.io/etcd/contrib/raftexample/raft.go:442 +0x548\n15:19:14 raftexample3 | created by main.(*raftNode).startRaft\n15:19:14 raftexample3 | \t/Users/guoger/workspace/go-project/src/go.etcd.io/etcd/contrib/raftexample/raft.go:313 +0x5d3\n```\n*Failure case B:*\n1) start a fresh raftexample cluster per [readme](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/README.md#fault-tolerance)\n2) repeatedly insert key till first compact (raft log should say `compacted log at index X`)\n3) kill cluster\n4) restart with goreman, and all nodes *stuck* at `loading snapshot at term X and index Y`. (unable to insert new key, service is not started)","username":"guoger","ts":"2018-09-21T07:36:24.030Z"}
{"msg":"I'm not sure if `etcd/contrib/raftexample` actually handles snapshotting correctly. can someone help me verify if this failure could be reproduced?\n_I'm on master branch with commit `1a3be73` _\n\nchange [defaultSnapshotCount](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/raft.go#L74) to smaller number, i.e. 10\n~*Failure case A:*~ never mind this case, you actually need to change both [defaultSnapshotCount](https://github.com/etcd-io/etcd/blob/2cf47366216a50826aab7c37784eba0c1ced3ee1/contrib/raftexample/raft.go#L74) and [snapshotCatchUpEntriesN](https://github.com/etcd-io/etcd/blob/2cf47366216a50826aab7c37784eba0c1ced3ee1/contrib/raftexample/raft.go#L348)\n1) start a fresh raftexample cluster per [readme](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/README.md#fault-tolerance)\n2) run `while curl -L http://127.0.0.1:12380/my-key -XPUT -d foo; do :; done`\n3) it panics (fairly quick) at second snapshot with\n```\n15:19:14 raftexample3 | panic: requested index is unavailable due to compaction\n15:19:14 raftexample3 | goroutine 111 [running]:\n15:19:14 raftexample3 | main.(*raftNode).maybeTriggerSnapshot(0xc4201be000)\n15:19:14 raftexample3 | \t/Users/guoger/workspace/go-project/src/go.etcd.io/etcd/contrib/raftexample/raft.go:373 +0x405\n15:19:14 raftexample3 | main.(*raftNode).serveChannels(0xc4201be000)\n15:19:14 raftexample3 | \t/Users/guoger/workspace/go-project/src/go.etcd.io/etcd/contrib/raftexample/raft.go:442 +0x548\n15:19:14 raftexample3 | created by main.(*raftNode).startRaft\n15:19:14 raftexample3 | \t/Users/guoger/workspace/go-project/src/go.etcd.io/etcd/contrib/raftexample/raft.go:313 +0x5d3\n```\n*Failure case B:*\n1) start a fresh raftexample cluster per [readme](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/README.md#fault-tolerance)\n2) repeatedly insert key till first compact (raft log should say `compacted log at index X`)\n3) kill cluster\n4) restart with goreman, and all nodes *stuck* at `loading snapshot at term X and index Y`. (unable to insert new key, service is not started)","username":"guoger","ts":"2018-09-21T07:36:24.030Z"}
{"msg":"I'm not sure if `etcd/contrib/raftexample` actually handles snapshotting correctly. can someone help me verify if this failure could be reproduced?\n_I'm on master branch with commit `1a3be73` _\n\nchange [defaultSnapshotCount](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/raft.go#L74) to smaller number, i.e. 10\n~*Failure case A:*~ never mind this case, you actually need to change both [defaultSnapshotCount](https://github.com/etcd-io/etcd/blob/2cf47366216a50826aab7c37784eba0c1ced3ee1/contrib/raftexample/raft.go#L74) and [snapshotCatchUpEntriesN](https://github.com/etcd-io/etcd/blob/2cf47366216a50826aab7c37784eba0c1ced3ee1/contrib/raftexample/raft.go#L348)\n1) start a fresh raftexample cluster per [readme](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/README.md#fault-tolerance)\n2) run `while curl -L http://127.0.0.1:12380/my-key -XPUT -d foo; do :; done`\n3) it panics (fairly quick) at second snapshot with\n```\n15:19:14 raftexample3 | panic: requested index is unavailable due to compaction\n15:19:14 raftexample3 | goroutine 111 [running]:\n15:19:14 raftexample3 | main.(*raftNode).maybeTriggerSnapshot(0xc4201be000)\n15:19:14 raftexample3 | \t/Users/guoger/workspace/go-project/src/go.etcd.io/etcd/contrib/raftexample/raft.go:373 +0x405\n15:19:14 raftexample3 | main.(*raftNode).serveChannels(0xc4201be000)\n15:19:14 raftexample3 | \t/Users/guoger/workspace/go-project/src/go.etcd.io/etcd/contrib/raftexample/raft.go:442 +0x548\n15:19:14 raftexample3 | created by main.(*raftNode).startRaft\n15:19:14 raftexample3 | \t/Users/guoger/workspace/go-project/src/go.etcd.io/etcd/contrib/raftexample/raft.go:313 +0x5d3\n```\n*Failure case B:* (filed and [issue](https://github.com/etcd-io/etcd/issues/10118))\n1) start a fresh raftexample cluster per [readme](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/README.md#fault-tolerance)\n2) repeatedly insert key till first compact (raft log should say `compacted log at index X`)\n3) kill cluster\n4) restart with goreman, and all nodes *stuck* at `loading snapshot at term X and index Y`. (unable to insert new key, service is not started)","username":"guoger","ts":"2018-09-21T07:36:24.030Z"}
{"msg":"I'm not sure if `etcd/contrib/raftexample` actually handles snapshotting correctly. can someone help me verify if this failure could be reproduced?\n_I'm on master branch with commit `1a3be73` _\n\nchange [defaultSnapshotCount](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/raft.go#L74) to smaller number, i.e. 10\n~*Failure case A:*~ _ignore this case_, you actually need to change both [defaultSnapshotCount](https://github.com/etcd-io/etcd/blob/2cf47366216a50826aab7c37784eba0c1ced3ee1/contrib/raftexample/raft.go#L74) and [snapshotCatchUpEntriesN](https://github.com/etcd-io/etcd/blob/2cf47366216a50826aab7c37784eba0c1ced3ee1/contrib/raftexample/raft.go#L348)\n1) start a fresh raftexample cluster per [readme](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/README.md#fault-tolerance)\n2) run `while curl -L http://127.0.0.1:12380/my-key -XPUT -d foo; do :; done`\n3) it panics (fairly quick) at second snapshot with\n```\n15:19:14 raftexample3 | panic: requested index is unavailable due to compaction\n15:19:14 raftexample3 | goroutine 111 [running]:\n15:19:14 raftexample3 | main.(*raftNode).maybeTriggerSnapshot(0xc4201be000)\n15:19:14 raftexample3 | \t/Users/guoger/workspace/go-project/src/go.etcd.io/etcd/contrib/raftexample/raft.go:373 +0x405\n15:19:14 raftexample3 | main.(*raftNode).serveChannels(0xc4201be000)\n15:19:14 raftexample3 | \t/Users/guoger/workspace/go-project/src/go.etcd.io/etcd/contrib/raftexample/raft.go:442 +0x548\n15:19:14 raftexample3 | created by main.(*raftNode).startRaft\n15:19:14 raftexample3 | \t/Users/guoger/workspace/go-project/src/go.etcd.io/etcd/contrib/raftexample/raft.go:313 +0x5d3\n```\n*Failure case B:* (filed and [issue](https://github.com/etcd-io/etcd/issues/10118))\n1) start a fresh raftexample cluster per [readme](https://github.com/etcd-io/etcd/blob/master/contrib/raftexample/README.md#fault-tolerance)\n2) repeatedly insert key till first compact (raft log should say `compacted log at index X`)\n3) kill cluster\n4) restart with goreman, and all nodes *stuck* at `loading snapshot at term X and index Y`. (unable to insert new key, service is not started)","username":"guoger","ts":"2018-09-21T07:36:24.030Z"}
{"msg":"@kostas @guoger @yacovm @C0rWin Have pushed the multi-node etcd raft integration test CR: https://gerrit.hyperledger.org/r/#/c/26547/\nCurrently I have assigned it the JIRA number FAB-11161 since @kostas had mentioned that the integration tests belong to the parent story. Can be changed as necessary. ","username":"adarshsaraf123","ts":"2018-09-25T09:47:02.489Z"}
{"msg":"@kostas @guoger @yacovm @C0rWin Have pushed the multi-node etcd raft integration test CR: https://gerrit.hyperledger.org/r/#/c/26547/\nCurrently I have assigned it the JIRA number [FAB-11161](https://jira.hyperledger.org/browse/FAB-11161) since @kostas had mentioned that the integration tests belong to the parent story. Can be changed as necessary. ","username":"adarshsaraf123","ts":"2018-09-25T09:47:02.489Z"}
{"msg":"@yacovm Despite my comment on [your CR](https://gerrit.hyperledger.org/r/#/c/26297/) I have not changed the ClusterMembers function in `integration/nwo/network.go` since it was comfortable to use it as such. I figured this out later :sweat_smile:  ","username":"adarshsaraf123","ts":"2018-09-25T09:49:42.309Z"}
{"msg":"Cool.","username":"yacovm","ts":"2018-09-25T09:56:04.382Z"}
{"msg":"I think it needs to be extended to test failure scenarios of the leader, etc.","username":"yacovm","ts":"2018-09-25T09:56:20.247Z"}
{"msg":"you can know who is the leader by parsing the certificate from the signature of the latest block and then figuring out what is the subject name.","username":"yacovm","ts":"2018-09-25T09:56:56.620Z"}
{"msg":"@yacovm aren't you supposed to be on vacation? :P","username":"guoger","ts":"2018-09-25T10:10:06.782Z"}
{"msg":"i am - that's why I'm not doing it myself","username":"yacovm","ts":"2018-09-25T10:12:05.218Z"}
{"msg":"I get phone notifications","username":"yacovm","ts":"2018-09-25T10:12:14.162Z"}
{"msg":"(if i'm tagged)","username":"yacovm","ts":"2018-09-25T10:12:19.712Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=kC9fdHSFGJZvLvCiY) @yacovm I thought that is anyways taken care of by the unit tests at the etcdraft level. ","username":"adarshsaraf123","ts":"2018-09-25T10:59:28.133Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=kC9fdHSFGJZvLvCiY","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=kC9fdHSFGJZvLvCiY","remote":true,"fileId":null,"fileName":null}]}
{"msg":"We need integration scenarios that test failover of nodes, leader recovery, etc. etc.","username":"yacovm","ts":"2018-09-25T11:12:58.338Z"}
{"msg":"the UT aren't enough IMO... @guoger @C0rWin and @kostas can chime in too ","username":"yacovm","ts":"2018-09-25T11:13:27.414Z"}
{"msg":"also @jyellick :) ","username":"yacovm","ts":"2018-09-25T11:13:38.595Z"}
{"msg":"While we wait for the others to chime in, I will present my point of view. I think that the etcdraft cluster can be isolated as a black box once we unit-test the said failures. That this black box indeed works in tandem with the rest of the system is then being tested by the pushed CR. This in my opinion does provide a comprehensive test. Of course I could be missing some details here.","username":"adarshsaraf123","ts":"2018-09-25T11:34:00.341Z"}
{"msg":"@guoger 's tests use a mock communication layer. How do you test that you don't run into a distributed deadlock because due to something untested in the communication unit tests? The communication unit tests can't mimick the usage pattern of etcdraft's raft.Node, therefore we need to test them together.","username":"yacovm","ts":"2018-09-25T14:11:22.875Z"}
{"msg":"also we need to make sure that reconfiguration and addition of new nodes works","username":"yacovm","ts":"2018-09-25T14:12:02.032Z"}
{"msg":"My take: We should definitely have some integration tests which verify the interaction between the etcd/raft code and the Fabric code.  This should include a green path, and a common failure or two.  We certainly don't need or want to re-test etcd/raft via integration tests, but getting a base level of comfort via tests that the pieces do fit together and work seems like a good thing to me.","username":"jyellick","ts":"2018-09-25T14:22:35.424Z"}
{"msg":"","username":"guoger","ts":"2018-09-26T01:45:01.193Z","attachments":[{"type":"file","title":"integration.png","title_link":"/file-upload/LxXyAB6SL9fXq8pHP/integration.png","image_url":"/file-upload/LxXyAB6SL9fXq8pHP/integration.png","image_type":"image/png","image_size":461143,"url":"/file-upload/LxXyAB6SL9fXq8pHP/integration.png","remote":false,"fileId":"LxXyAB6SL9fXq8pHP","fileName":"integration.png"}]}
{"msg":"I tend to agree with @jyellick ","username":"guoger","ts":"2018-09-26T01:45:06.985Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wq5FLMXwc9rYiSuNk) @jyellick With the [CR pushed](https://gerrit.hyperledger.org/r/#/c/26547/) earlier, we have got the green path covered. I will come up with some failure scenarios at a system level. I am assuming that these failures will have to be something triggered due to the way the orderer interacts with the rest of the system.  ","username":"adarshsaraf123","ts":"2018-09-26T05:44:56.394Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wq5FLMXwc9rYiSuNk","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wq5FLMXwc9rYiSuNk","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=EYrYx2xbJBqzHBjhg) @yacovm True. These are definitely necessary and, IMO, these tests should be isolated within the orderer codebase since the rest of the system should only see a reliable orderer. I think this also helps keep the orderer completely independent such that someone can just pull the orderer/ subdirectory and work with it for any project. For this to work, I think all the tests for the orderer behaviour per se should be within the orderer codebase.","username":"adarshsaraf123","ts":"2018-09-26T05:50:22.232Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=EYrYx2xbJBqzHBjhg","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=EYrYx2xbJBqzHBjhg","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@kostas @yacovm @guoger @C0rWin I am working on the decoupling of `CreateNextBlock` and `WriteBlock`. Currently, [WriteBlock](https://github.com/hyperledger/fabric/blob/master/orderer/common/multichannel/blockwriter.go#L149-#L157) launches a goroutine for `commitBlock`. Now, if there are errors in committing the block like unexpected block number, etc. then `commitBlock` panics. I would like to test this panic of `commitBlock` but I am making the call to only `WriteBlock` within `assert.Panics`. Since the `commitBlock` is in a separate goroutine, `assert.Panics` cannot catch this panic. Does anybody have any idea on how this can be done? ","username":"adarshsaraf123","ts":"2018-09-28T08:23:04.276Z"}
{"msg":"Has joined the channel.","username":"Bartb0","ts":"2018-10-02T10:56:14.600Z","type":"uj"}
{"msg":"Hi everyone. I'm back from vacation and in catch-up mode. I intend to go over all the messages I missed here during the past couple of weeks, but in the meantime can I rebase those Raft-related CRs in \"Merge Conflict\"? Or is there a specific reason these are left untouched?","username":"kostas","ts":"2018-10-03T19:07:35.542Z"}
{"msg":"Hey @kostas I'm still on vacation till Oct 6. For wal, I'm rebasing them cuz it conflicts with some of Adarsh's CRs. For multi-node CR, feel free to rebase.","username":"guoger","ts":"2018-10-03T19:29:55.035Z"}
{"msg":"Excellent. Thanks for letting me know; we'll see you next week.","username":"kostas","ts":"2018-10-03T19:30:26.660Z"}
{"msg":"Just to make sure I'm not losing my mind: is the latest master consistently failing on unit tests for everyone else?","username":"kostas","ts":"2018-10-05T14:12:08.835Z"}
{"msg":"The culprit seems to be `github.com/hyperledger/fabric/core/chaincode`","username":"kostas","ts":"2018-10-05T14:12:29.783Z"}
{"msg":"Has joined the channel.","username":"qiangqinqq","ts":"2018-10-06T07:37:06.222Z","type":"uj"}
{"msg":"@guoger  @adarshsaraf123  I rebased the chain up until https://gerrit.hyperledger.org/r/#/c/26038/, can you guys please continue the rebasing further?","username":"yacovm","ts":"2018-10-07T14:33:48.578Z"}
{"msg":"we need to get these merge conflicts solved :) ","username":"yacovm","ts":"2018-10-07T14:33:56.892Z"}
{"msg":"next in line are https://gerrit.hyperledger.org/r/#/c/26104/ and https://gerrit.hyperledger.org/r/#/c/26178/ @adarshsaraf123  - that's yours","username":"yacovm","ts":"2018-10-07T14:34:21.214Z"}
{"msg":"and I don't want to break anything while solving merge conflicts...","username":"yacovm","ts":"2018-10-07T14:34:33.336Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=uWwtmzhSzYfp7qYe9) @yacovm On it :)","username":"adarshsaraf123","ts":"2018-10-08T05:28:57.385Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=uWwtmzhSzYfp7qYe9","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=uWwtmzhSzYfp7qYe9","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@adarshsaraf123 thank you! ","username":"yacovm","ts":"2018-10-08T06:13:26.093Z"}
{"msg":"are we still targeting 1.4? or it's changed to 2.0?","username":"guoger","ts":"2018-10-08T08:54:41.278Z"}
{"msg":"I have updated the CRs up until https://gerrit.hyperledger.org/r/#/c/26670/ to resolve the merge conflicts. @guoger @C0rWin @yacovm You might like to go through your CRs to verify that I haven't inadvertently made some errors during the updates.","username":"adarshsaraf123","ts":"2018-10-08T09:39:08.243Z"}
{"msg":"thanks a lot!","username":"guoger","ts":"2018-10-08T09:40:19.647Z"}
{"msg":"@guoger we are targeting v1.4 as a beta release","username":"yacovm","ts":"2018-10-08T09:41:20.607Z"}
{"msg":"@adarshsaraf123 they are still conflicted","username":"yacovm","ts":"2018-10-08T11:57:59.958Z"}
{"msg":"I rebased my https://gerrit.hyperledger.org/r/#/c/26038/ on top of master","username":"yacovm","ts":"2018-10-08T11:58:09.197Z"}
{"msg":"Ok. I will recheck","username":"adarshsaraf123","ts":"2018-10-08T11:59:11.393Z"}
{"msg":"@yacovm could you also post the race condition you found in multi-node support?","username":"guoger","ts":"2018-10-08T12:56:09.320Z"}
{"msg":"haven't looked too deep ","username":"yacovm","ts":"2018-10-08T12:57:00.924Z"}
{"msg":"https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/5235/console","username":"yacovm","ts":"2018-10-08T12:57:04.431Z"}
{"msg":"i just assume it's related since multi-node support is the thing that adds concurrency and my work passed race checks","username":"yacovm","ts":"2018-10-08T12:57:52.442Z"}
{"msg":"and the other work (configuration handling) seems to me (in intuiting) as something that wouldn't create race conditions :) ","username":"yacovm","ts":"2018-10-08T12:58:14.505Z"}
{"msg":"but i might be wrong","username":"yacovm","ts":"2018-10-08T12:58:17.022Z"}
{"msg":"that's a very fair observation, I'll take a look","username":"guoger","ts":"2018-10-08T12:59:56.759Z"}
{"msg":"thx!","username":"guoger","ts":"2018-10-08T13:00:02.428Z"}
{"msg":"","username":"adarshsaraf123","ts":"2018-10-08T19:24:32.090Z","attachments":[{"type":"file","title":"Screen Shot 2018-10-09 at 12.53.44 AM.png","title_link":"/file-upload/5FQ95LLgxDZTMBNKn/Screen%20Shot%202018-10-09%20at%2012.53.44%20AM.png","image_url":"/file-upload/5FQ95LLgxDZTMBNKn/Screen%20Shot%202018-10-09%20at%2012.53.44%20AM.png","image_type":"image/png","image_size":142606,"url":"/file-upload/5FQ95LLgxDZTMBNKn/Screen%20Shot%202018-10-09%20at%2012.53.44%20AM.png","remote":false,"fileId":"5FQ95LLgxDZTMBNKn","fileName":"Screen Shot 2018-10-09 at 12.53.44 AM.png"}]}
{"msg":"@guoger ^^ Just in case you did not locate this yet, this is from the jenkins build log of https://gerrit.hyperledger.org/r/#/c/25479/. \nAlso confirmed that it is a deterministic failure since the CRs above this on the stack also fail in the unit tests. ","username":"adarshsaraf123","ts":"2018-10-08T19:29:02.861Z"}
{"msg":"And, ironically, for the [decoupling CreateNextBlock and WriteBlock CR](https://gerrit.hyperledger.org/r/#/c/26670/) I worked hard to write test cases that can specifically introduce race conditions!! :sweat_smile: ","username":"adarshsaraf123","ts":"2018-10-08T19:35:24.419Z"}
{"msg":"how do you create a text with a clickable link @adarshsaraf123  ? ","username":"yacovm","ts":"2018-10-08T19:37:26.797Z"}
{"msg":"You use '[text](link)' ","username":"adarshsaraf123","ts":"2018-10-08T19:38:39.129Z"}
{"msg":"@yacovm You use '[text](link)' ","username":"adarshsaraf123","ts":"2018-10-08T19:38:39.129Z"}
{"msg":"[thanks](https://en.wiktionary.org/wiki/thanks)","username":"yacovm","ts":"2018-10-08T19:39:51.654Z"}
{"msg":"> Also confirmed that it is a deterministic failure since the CRs above this on the stack also fail in the unit tests.\n@adarshsaraf123 could you confirm which test case is deterministically failing? I couldn't reproduce it locally...\nAs far as I could tell, there *is* a data race in _test_, and I'm now fixing it.","username":"guoger","ts":"2018-10-09T06:01:53.881Z"}
{"msg":"@adarshsaraf123 \n> Also confirmed that it is a deterministic failure since the CRs above this on the stack also fail in the unit tests.\ncould you confirm which test case is deterministically failing? I couldn't reproduce it locally...\nAs far as I could tell, there *is* a data race in _test_, and I'm now fixing it.","username":"guoger","ts":"2018-10-09T06:01:53.881Z"}
{"msg":"@guoger did you try with `go test -race` in the `orderer/consensus/etcdraft` package?","username":"adarshsaraf123","ts":"2018-10-09T06:06:40.838Z"}
{"msg":"","username":"adarshsaraf123","ts":"2018-10-09T06:07:31.493Z","attachments":[{"type":"file","title":"Screen Shot 2018-10-09 at 11.36.59 AM.png","title_link":"/file-upload/6HsWwGtvoNsFRgFNK/Screen%20Shot%202018-10-09%20at%2011.36.59%20AM.png","image_url":"/file-upload/6HsWwGtvoNsFRgFNK/Screen%20Shot%202018-10-09%20at%2011.36.59%20AM.png","image_type":"image/png","image_size":178266,"url":"/file-upload/6HsWwGtvoNsFRgFNK/Screen%20Shot%202018-10-09%20at%2011.36.59%20AM.png","remote":false,"fileId":"6HsWwGtvoNsFRgFNK","fileName":"Screen Shot 2018-10-09 at 11.36.59 AM.png"}]}
{"msg":"oh, I thought you said a test case is failing. It actually pass, but a race is detected","username":"guoger","ts":"2018-10-09T06:07:40.790Z"}
{"msg":"The above is from a local run. ","username":"adarshsaraf123","ts":"2018-10-09T06:07:41.638Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=97d5vt8BntqFJ9QLh) @guoger Doesn't the race detection fail the test?","username":"adarshsaraf123","ts":"2018-10-09T06:08:18.058Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=97d5vt8BntqFJ9QLh","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=97d5vt8BntqFJ9QLh","remote":true,"fileId":null,"fileName":null}]}
{"msg":"nvm, I thought you were saying `ginkgo` failed, but not `ginkgo -race`","username":"guoger","ts":"2018-10-09T06:08:59.836Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=sXpcwvdas8agxjriG) @guoger Ok. Got it.","username":"adarshsaraf123","ts":"2018-10-09T06:09:12.491Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=sXpcwvdas8agxjriG","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=sXpcwvdas8agxjriG","remote":true,"fileId":null,"fileName":null}]}
{"msg":"> oh, I thought you said a test case is failing. It actually pass, but a race is detected\nAh, FWIW a test _was_ failing there as well due to a type mismatch, but that was an easy fix.","username":"kostas","ts":"2018-10-09T14:41:53.971Z"}
{"msg":"which one?","username":"guoger","ts":"2018-10-09T17:11:10.256Z"}
{"msg":"@guoger: https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=GLyARozSonRzjD5nB","username":"kostas","ts":"2018-10-09T21:07:41.926Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=GLyARozSonRzjD5nB","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=GLyARozSonRzjD5nB","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@guoger: https://gerrit.hyperledger.org/r/c/25479/27/orderer/consensus/etcdraft/chain_test.go#660","username":"kostas","ts":"2018-10-09T21:15:21.923Z"}
{"msg":"Setting the Kafka migration work aside (sheet \"Weeks 12-14\") is there any work in [this spreadsheet](https://docs.google.com/spreadsheets/d/1R02-xjdl4hNw90kN4NZ1kX0f4QoIYn51_1UHlwy-GQs/edit) that we haven't already done or are not currently working on? Please have a look and let me know.","username":"kostas","ts":"2018-10-09T21:16:34.302Z"}
{"msg":"we certainly never tested adding new nodes :( ","username":"yacovm","ts":"2018-10-09T21:17:27.443Z"}
{"msg":"like - dynamically","username":"yacovm","ts":"2018-10-09T21:17:32.180Z"}
{"msg":"unless i'm mistaken","username":"yacovm","ts":"2018-10-09T21:17:41.730Z"}
{"msg":"I don't think you are.","username":"kostas","ts":"2018-10-09T21:18:01.080Z"}
{"msg":"I am going to add this as new sub-task in FAB-11161 before we close it.","username":"kostas","ts":"2018-10-09T21:18:29.500Z"}
{"msg":"Thanks for that.","username":"kostas","ts":"2018-10-09T21:18:34.733Z"}
{"msg":"We have about 5-6 weeks to nail everything (outside of Kafka migration), so if anything basic is missing, please speak up ;)","username":"kostas","ts":"2018-10-09T21:26:31.867Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=EwtX2BFMEFj2ah4tx","username":"kostas","ts":"2018-10-09T21:33:09.652Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=EwtX2BFMEFj2ah4tx","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=EwtX2BFMEFj2ah4tx","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Actually, we have written this down as Scenario 3 in FAB-11590.","username":"kostas","ts":"2018-10-09T21:33:33.845Z"}
{"msg":"So we should have this integration test when Artem submits his Type B CR. Good reminder.","username":"kostas","ts":"2018-10-09T21:39:38.416Z"}
{"msg":"Has joined the channel.","username":"grapebaba","ts":"2018-10-10T02:15:14.863Z","type":"uj"}
{"msg":"am i the only one seeing this [constant ut failure](https://logs.hyperledger.org/production/vex-yul-hyp-jenkins-3/fabric-verify-unit-tests-x86_64/5284/console.log.gz) ?","username":"guoger","ts":"2018-10-10T08:26:47.874Z"}
{"msg":"it's not constant","username":"yacovm","ts":"2018-10-10T08:28:24.204Z"}
{"msg":"re-run the UTs","username":"yacovm","ts":"2018-10-10T08:28:30.562Z"}
{"msg":"via `Run UnitTest`","username":"yacovm","ts":"2018-10-10T08:28:34.271Z"}
{"msg":"did it twice.. will try again..","username":"guoger","ts":"2018-10-10T08:29:22.865Z"}
{"msg":"are we supposed to use dep v0.5.0 now?","username":"guoger","ts":"2018-10-10T08:33:57.618Z"}
{"msg":"running `dep check` on master gives me error","username":"guoger","ts":"2018-10-10T08:34:37.502Z"}
{"msg":"running `dep check` on master gives me error (with 0.5.0)","username":"guoger","ts":"2018-10-10T08:34:37.502Z"}
{"msg":"nvm, `build` somehow crawls back to my fabric dir and all go files in it are generating toubles...","username":"guoger","ts":"2018-10-10T09:54:43.806Z"}
{"msg":"nvm, `build` somehow crawls back to my fabric dir and all go files in it are generating troubles...","username":"guoger","ts":"2018-10-10T09:54:43.806Z"}
{"msg":"@yacovm @C0rWin @guoger I am arranging the stack in order. Some CRs are out of date with updates to their parents.","username":"adarshsaraf123","ts":"2018-10-12T03:31:24.653Z"}
{"msg":"@adarshsaraf123 i pushed my wal CRs on top of multi-node support CR. once your decoupling CR is somewhat stable, I'll rebase atop","username":"guoger","ts":"2018-10-12T06:24:18.832Z"}
{"msg":"so don't worry about conflict there yet","username":"guoger","ts":"2018-10-12T06:24:42.756Z"}
{"msg":"Cool :+1_tone4: ","username":"adarshsaraf123","ts":"2018-10-12T06:27:07.276Z"}
{"msg":"so, i'm adding `WALDir` to orderer config and I need suggestion here: as we want to make consensus pluggable, i'm reluctant to add a `Etcdraft` section along with `Kafka` in `orderer.yaml`.\nshould we:\n- add a section there which is opaque to orderer, and\n- add a consensus specific parser that understands this section","username":"guoger","ts":"2018-10-12T06:40:42.119Z"}
{"msg":"Can there not be `WALDir` that can be configured irrespective of the consensus type? Of course, we don't need it for `solo` and `kafka` but my guess is we will need it for the subsequent BFT as well. I think it will fit well in the `FileLedger` section. ","username":"adarshsaraf123","ts":"2018-10-12T06:57:08.359Z"}
{"msg":"in that line of thinking, it probably deserve a separate section for `Consensus Data` or `Replicated Logs` (better names are needed here) other than `FileLedger`.","username":"guoger","ts":"2018-10-12T07:01:21.696Z"}
{"msg":"in that line of thinking, it probably deserve a separate section for `Consensus Data` or `Replicated Logs` (better names are needed here) other than `FileLedger`. the same applies to snapshotting","username":"guoger","ts":"2018-10-12T07:01:21.696Z"}
{"msg":"cc @kostas ","username":"guoger","ts":"2018-10-12T07:29:15.282Z"}
{"msg":"> should we:\n> - add a section there which is opaque to orderer, and\n> - add a consensus specific parser that understands this section","username":"kostas","ts":"2018-10-12T18:12:20.546Z"}
{"msg":"@guoger: Expand a bit on how you see this one working?","username":"kostas","ts":"2018-10-12T18:12:30.177Z"}
{"msg":"I have rebased the existing stack on master","username":"adarshsaraf123","ts":"2018-10-14T09:21:35.800Z"}
{"msg":"@guoger  I pushed a preliminary version of the block puller and I added some glue code that adds it to the `chain.go` so you can take a look.\nhttps://gerrit.hyperledger.org/r/#/c/26932/11/orderer/consensus/etcdraft/chain.go\nHere :arrow_up:  is a definition of the interface + adding it to the `etcdraft.Chain` struct\nhttps://gerrit.hyperledger.org/r/#/c/26932/11/orderer/consensus/etcdraft/consenter.go\nHere :arrow_up: is how it's added to the `consenter.go`, \nI guess we have time until the change sets below will get to the master branch so i'll try to complete the change set this week and also split it to several parts so it'll be easier to review, but - it's pretty straight forward to add this into the `etcdraft.Consenter` from what I see","username":"yacovm","ts":"2018-10-14T10:34:07.866Z"}
{"msg":" @kostas  @C0rWin  @adarshsaraf123 ^ ","username":"yacovm","ts":"2018-10-14T10:34:23.391Z"}
{"msg":"also got a basic (green path UT)[https://gerrit.hyperledger.org/r/#/c/26932/17/orderer/common/cluster/deliver_test.go@171] working ","username":"yacovm","ts":"2018-10-14T15:29:06.975Z"}
{"msg":"also got a basic [green path UT](https://gerrit.hyperledger.org/r/#/c/26932/17/orderer/common/cluster/deliver_test.go@171) working ","username":"yacovm","ts":"2018-10-14T15:29:23.934Z"}
{"msg":"https://gerrit.hyperledger.org/r/#/c/26297/ @kostas  is there a reason you didn't merge this?","username":"yacovm","ts":"2018-10-14T16:40:37.278Z"}
{"msg":"@yacovm: Was being a bit conservative to see if Matt had any follow-up comments. Merged now.","username":"kostas","ts":"2018-10-14T16:43:29.558Z"}
{"msg":"@yacovm @C0rWin: Have a look at Adarsh's decoupling work ([CR1](https://gerrit.hyperledger.org/r/c/26670/), [CR2](https://gerrit.hyperledger.org/r/c/26880/)) when you get a chance. I'll check the delta between patchsets 18 and 20 tomorrow, but we should try to make a decision towards either merging or revising further tomorrow.","username":"kostas","ts":"2018-10-14T16:46:15.114Z"}
{"msg":"you didn't merge yet @kostas ","username":"yacovm","ts":"2018-10-14T16:57:48.922Z"}
{"msg":"Hmm, indeed I didn't, and that was a slip-up.","username":"kostas","ts":"2018-10-14T17:38:18.858Z"}
{"msg":"Here's what I get when I click on `Submit` now:","username":"kostas","ts":"2018-10-14T17:38:26.734Z"}
{"msg":"","username":"kostas","ts":"2018-10-14T17:39:11.274Z","attachments":[{"type":"file","title":"Screenshot 2018-10-14 at 13.37.51.png","title_link":"/file-upload/hB5RRSyyeoCuJNRLv/Screenshot%202018-10-14%20at%2013.37.51.png","image_url":"/file-upload/hB5RRSyyeoCuJNRLv/Screenshot%202018-10-14%20at%2013.37.51.png","image_type":"image/png","image_size":20199,"url":"/file-upload/hB5RRSyyeoCuJNRLv/Screenshot%202018-10-14%20at%2013.37.51.png","remote":false,"fileId":"hB5RRSyyeoCuJNRLv","fileName":"Screenshot 2018-10-14 at 13.37.51.png"}]}
{"msg":"Any idea what's up?","username":"kostas","ts":"2018-10-14T17:39:14.114Z"}
{"msg":"","username":"kostas","ts":"2018-10-14T17:40:13.440Z","attachments":[{"type":"file","title":"Screenshot 2018-10-14 at 13.39.24.png","title_link":"/file-upload/bzNhYSSgzsyFenBPu/Screenshot%202018-10-14%20at%2013.39.24.png","image_url":"/file-upload/bzNhYSSgzsyFenBPu/Screenshot%202018-10-14%20at%2013.39.24.png","image_type":"image/png","image_size":17629,"url":"/file-upload/bzNhYSSgzsyFenBPu/Screenshot%202018-10-14%20at%2013.39.24.png","remote":false,"fileId":"bzNhYSSgzsyFenBPu","fileName":"Screenshot 2018-10-14 at 13.39.24.png"}]}
{"msg":"try now","username":"yacovm","ts":"2018-10-14T18:18:06.734Z"}
{"msg":"@kostas ","username":"yacovm","ts":"2018-10-14T18:18:08.398Z"}
{"msg":"thanks","username":"yacovm","ts":"2018-10-14T18:25:31.920Z"}
{"msg":"Has joined the channel.","username":"baoyangc","ts":"2018-10-15T03:03:41.839Z","type":"uj"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=g5vAzv3cefGoawyET) @kostas i.e. we could have this in `orderer.yaml`:\n```\nConsensus:\n  Type: etcdraft\n  Config:\n    WALDir: /path/to/etcdraft/data/wal\n```\nand define this struct under `TopLevel`:\n```\ntype TopLevel struct {\n\tGeneral    General\n\tFileLedger FileLedger\n\tRAMLedger  RAMLedger\n\tKafka      Kafka\n\tDebug      Debug\n\tConsensus  Consensus\n}\n\ntype Consensus struct {\n\tType   string\n\tConfig interface{}\n}\n\ntype EtcdRaft struct {\n\tWALDir string\n}\n```\nwhen we decode viper configs into struct, we will decode this section based on `Consensus.Type`. wdyt?","username":"guoger","ts":"2018-10-15T09:07:47.375Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=g5vAzv3cefGoawyET","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=g5vAzv3cefGoawyET","remote":true,"fileId":null,"fileName":null}]}
{"msg":"guys, I most likely won't be able to attend our scrum today, here's my progress:\nsnapshotting is currently split into 4 pieces:\n- refactor current `chain` to bundle memory storage, wal and snapshot into a `Storage struct` (done)\n- enable chain to take snapshots at certain interval (wip)\n- enable chain to handle `Snap` messages from raft leader (wip)\n- pull blocks using BlockPuller (todo)\n\ndecision we need to make:\n- how do we configure snapshotting intervals? it can be taken independently across OSN, i.e. Node A takes snapshot every X blocks, Node B takes snapshot every Y blocks. So it could be in `orderer.yaml`. _OR_, it can be the same in a channel.","username":"guoger","ts":"2018-10-15T09:40:33.600Z"}
{"msg":"guys, I most likely won't be able to attend our scrum today, my apologies... here's my progress:\nsnapshotting is currently split into 4 pieces:\n- refactor current `chain` to bundle memory storage, wal and snapshot into a `Storage struct` (done)\n- enable chain to take snapshots at certain interval (wip)\n- enable chain to handle `Snap` messages from raft leader (wip)\n- pull blocks using BlockPuller (todo)\n\ndecision we need to make:\n- how do we configure snapshotting intervals? it can be taken independently across OSN, i.e. Node A takes snapshot every X blocks, Node B takes snapshot every Y blocks. So it could be in `orderer.yaml`. _OR_, it can be the same in a channel.","username":"guoger","ts":"2018-10-15T09:40:33.600Z"}
{"msg":"it shouldn't be per block numbers IMO","username":"yacovm","ts":"2018-10-15T09:44:48.623Z"}
{"msg":"it should be per block cumulative size ","username":"yacovm","ts":"2018-10-15T09:44:59.277Z"}
{"msg":"i.e - once a certain amount of data passed in the chain","username":"yacovm","ts":"2018-10-15T09:45:13.887Z"}
{"msg":"also I don't think it should be in orderer.yaml but in the channel config","username":"yacovm","ts":"2018-10-15T09:45:50.906Z"}
{"msg":"I see stuff belongs to orderer.yaml only if they are either related to information about the node itself, or related to performance/failure detection configuration such as timeouts, memory buffers, etc.","username":"yacovm","ts":"2018-10-15T09:47:13.498Z"}
{"msg":"I agree with the snapshotting interval being a channel config.\nI also think that the interval should be in terms of the number of blocks and not the cumulative block size. Block size is not a number we can easily think in terms of and also it does not reflect the total number of transactions so I am not really sure if we gain anything by specifying the snapshot interval in terms of the block size.\n ","username":"adarshsaraf123","ts":"2018-10-15T09:56:55.677Z"}
{"msg":"block size is a very good estimate for number of transactions actually","username":"yacovm","ts":"2018-10-15T09:58:28.162Z"}
{"msg":"i think that transactions have a zipf distribution in terms of size","username":"yacovm","ts":"2018-10-15T09:59:18.366Z"}
{"msg":"because, the initial size of a transaction is 3KB","username":"yacovm","ts":"2018-10-15T09:59:35.992Z"}
{"msg":"because, the initial size of a transaction is  ~ 2.5KB","username":"yacovm","ts":"2018-10-15T09:59:35.992Z"}
{"msg":"since we have roughly 3 PEMs and each PEM is 0.7KB :) ","username":"yacovm","ts":"2018-10-15T09:59:53.842Z"}
{"msg":"since we have roughly 3 PEMs and each PEM is 0.7KB :)  and most people just want to transfer simple strings and don't put images or blue ray DVDs in the transactions","username":"yacovm","ts":"2018-10-15T09:59:53.842Z"}
{"msg":"on the other hand - you might have a noisy channel where a block would be committed once per second even if the timeout is 2 seconds","username":"yacovm","ts":"2018-10-15T10:00:22.899Z"}
{"msg":"(say, in kafka)","username":"yacovm","ts":"2018-10-15T10:00:27.014Z"}
{"msg":"but - you might have another channel where you have only a single transction in 2 seconds ","username":"yacovm","ts":"2018-10-15T10:01:02.464Z"}
{"msg":"so you have 2 channels - one with huge blocks, and one with tiny blocks","username":"yacovm","ts":"2018-10-15T10:01:13.329Z"}
{"msg":"doesn't make sense to snapshot in the same frequency both channels ","username":"yacovm","ts":"2018-10-15T10:01:26.342Z"}
{"msg":"my 2 cents","username":"yacovm","ts":"2018-10-15T10:01:29.523Z"}
{"msg":"I would think that, in this case, the onus is on the orderer admins to correctly configure the snapshot interval taking into account the frequency of block creation in both the channels. ","username":"adarshsaraf123","ts":"2018-10-15T10:07:10.515Z"}
{"msg":"Also, as a related question, @yacovm will not the size of the transaction vary based on the number of endorsements required? Since each of the endorsers would have to sign it? Or are you only referring to the general sizes seen? ","username":"adarshsaraf123","ts":"2018-10-15T10:09:26.733Z"}
{"msg":"I used block number as an example, it could also be the same way we but blocks, i.e. block number and size. Whichever comes first ","username":"guoger","ts":"2018-10-15T10:19:02.869Z"}
{"msg":"Also, if we don’t have a raft specific config section, I assume we will have a consensus data dir path in ordered.yaml?","username":"guoger","ts":"2018-10-15T10:25:14.668Z"}
{"msg":"> will not the size of the transaction vary based on the number of endorsements required? Since each of the endorsers would have to sign it? \nof course it is related. But that only strengthens my claim that what matters is the size and not the block count, no?\n\n> I would think that, in this case, the onus is on the orderer admins to correctly configure the snapshot interval taking into account the frequency of block creation in both the channels. \nThere is no onus here... we put a sane default and no one messes with it, or if you want to change it -  you just put whatever you want in the `configtx.yaml` and not touch it ever again. ","username":"yacovm","ts":"2018-10-15T11:10:55.175Z"}
{"msg":">But that only strengthens my claim that what matters is the size and not the block count, no?\nLike I was mentioning earlier, IMO, block size is not something that is easy to think in terms of. For example, when I say that a snapshot is taken every 100 blocks it is much easier to get a mental picture of than saying I want a snapshot every 100 MB. Due to the varying block sizes, which follows from the varying transaction sizes, 100 MB could mean 50 blocks in one snapshot period and 100 in another. I think reasoning about a system like this is a little more difficult. Also, if blocks are being cut, let's say 80% of the time, due to a block timeout of 1s then we could even assume that snapshots are taken every 80 seconds. Also, if were to draw references from databases, snapshots are taken every n seconds and the closest we probably have to such a timer is number of blocks. \nOf course, I do understand that block size would make more sense in terms of the 'amount of data'  that a snapshot contains. ","username":"adarshsaraf123","ts":"2018-10-15T11:58:15.860Z"}
{"msg":"who says that in databases snapshots are done every several seconds?","username":"yacovm","ts":"2018-10-15T12:02:07.366Z"}
{"msg":"I don't think it's correct... snapshots for backup in databases from my knowledge are made on demand","username":"yacovm","ts":"2018-10-15T12:02:51.402Z"}
{"msg":"when you want to snapshot a database, it stops writing to the data files, and writes only to redo logs","username":"yacovm","ts":"2018-10-15T12:03:09.190Z"}
{"msg":"this way the files don't change and you can back them up","username":"yacovm","ts":"2018-10-15T12:03:19.287Z"}
{"msg":"then when you finish backing up the file you make the database commit the redo logs into the files back","username":"yacovm","ts":"2018-10-15T12:03:45.670Z"}
{"msg":"My bad. I meant database checkpoints and not snapshots. And now it makes me wonder if what we are doing for the raft consensus is different from checkpoints. I would think not.","username":"adarshsaraf123","ts":"2018-10-15T12:15:43.651Z"}
{"msg":"i'm a bit confused. aren't checkpoints for recovery? I thought snapshots in raft are for replication and not recovery. ","username":"yacovm","ts":"2018-10-15T12:21:58.543Z"}
{"msg":"but in any case... even if we'd want to do a time-based snapshot","username":"yacovm","ts":"2018-10-15T12:22:23.478Z"}
{"msg":"you can't use the blocks number for that ;) ","username":"yacovm","ts":"2018-10-15T12:22:31.548Z"}
{"msg":"@guoger: So the benefit of this approach when it comes to config, is that we don't have to keep expanding the file which hosts the `TopLevel` definition with configuration options for _all_ the consensus implementations that Fabric supports.","username":"kostas","ts":"2018-10-15T14:18:22.433Z"}
{"msg":"Instead we can only provide the definition (`type EtcdRaft struct...` in your case) for _only_ the implementations that we wish to support.","username":"kostas","ts":"2018-10-15T14:19:10.797Z"}
{"msg":"Do I get this right? Any other benefits that I'm overlooking?","username":"kostas","ts":"2018-10-15T14:19:21.559Z"}
{"msg":"I'd say I'm onboard BTW - not sure what others think.","username":"kostas","ts":"2018-10-15T14:19:32.160Z"}
{"msg":"> how do we configure snapshotting intervals? it can be taken independently across OSN, i.e. Node A takes snapshot every X blocks, Node B takes snapshot every Y blocks. So it could be in `orderer.yaml`. _OR_, it can be the same in a channel.\nNth-ing the motion to make this a channel configuration.","username":"kostas","ts":"2018-10-15T14:27:48.523Z"}
{"msg":"> how do we configure snapshotting intervals? it can be taken independently across OSN, i.e. Node A takes snapshot every X blocks, Node B takes snapshot every Y blocks. So it could be in `orderer.yaml`. _OR_, it can be the same in a channel.\nNth-ing the motion to make this a channel configuration item.","username":"kostas","ts":"2018-10-15T14:27:48.523Z"}
{"msg":"As for how we define the snapshot interval: I'm torn. Snapshotting per size is the proper thing to do, but there is something to be said about saying \"we snapshot every 100 blocks\".","username":"kostas","ts":"2018-10-15T14:28:56.421Z"}
{"msg":"I don't have a strong preference for this.","username":"kostas","ts":"2018-10-15T14:29:38.634Z"}
{"msg":"Let's proceed with whatever is easier for now so that we have something out there.","username":"kostas","ts":"2018-10-15T14:30:10.313Z"}
{"msg":"@kostas @yacovm @C0rWin @guoger There is only one lock that I introduce in the decoupling CR and in my opinion it should not create any troubles. However, I can also understand the concern and definitely it is very easy to ignore certain corner cases which will leave us hanging in the dark. \nThe addition of the blocks enabled the parallel creation and writing of blocks. Now, if that does not seem to be important since it looks like everyone's thinking of having a single goroutine per chain, then we can do away with the second lock. If this seems okay, then I will change the implementation accordingly.  ","username":"adarshsaraf123","ts":"2018-10-15T14:45:41.052Z"}
{"msg":"@adarshsaraf123: I am good with the current implementation. (I'm always concerned with locks :wink:) If anybody else objects, now's the time to raise that objection.","username":"kostas","ts":"2018-10-15T15:09:58.116Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=WkhrDGSKK3nQ4qRh3) @kostas I assume you were talking about expanding `orderer.yaml` to contain a `Consensus` section, and have an `EctdRaft struct`?","username":"guoger","ts":"2018-10-15T15:45:31.714Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=WkhrDGSKK3nQ4qRh3","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=WkhrDGSKK3nQ4qRh3","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I am talking about `localconfig/config.go`.","username":"kostas","ts":"2018-10-15T16:08:44.864Z"}
{"msg":"If we proceed as you suggest, we can omit the definition for `BFT` and we'll still have a working binary.","username":"kostas","ts":"2018-10-15T16:09:21.345Z"}
{"msg":"@kostas @yacovm @C0rWin @guoger I also need consensus on whether we have only one goroutine which calls either `CreateNextBlock` or `WriteBlock` or if we would like to have them in separate goroutines. If it will ever only be one goroutine then I can do away with the extra locking in place and make the implementation simpler. I could have erred on going overboard with allowing them to be called parallely. \n\n@guoger I had pointed it out in today's scrum to the others that you had an objection with this. You can comment further here if you would like to.","username":"adarshsaraf123","ts":"2018-10-15T16:31:09.133Z"}
{"msg":"@kostas @yacovm @C0rWin @guoger I also need consensus on whether we have only one goroutine which calls either `CreateNextBlock` or `WriteBlock` or if we would like to have them in separate goroutines. If it will ever only be one goroutine then I can do away with the extra locking in place and make the implementation simpler. I could have erred on going overboard with allowing them to be called parallely. \n\n@guoger  I had pointed it out in today's scrum to the others that you had an objection with this. You can comment further here if you would like to.","username":"adarshsaraf123","ts":"2018-10-15T16:31:09.133Z"}
{"msg":"it's @guoger 's code , he knows best ;) ","username":"yacovm","ts":"2018-10-15T16:33:42.025Z"}
{"msg":"@adarshsaraf123: Do you think it'd be a significant rewrite to switch to one goroutine?","username":"kostas","ts":"2018-10-15T16:42:56.439Z"}
{"msg":"If it's not, let's try this out?","username":"kostas","ts":"2018-10-15T16:43:07.875Z"}
{"msg":"so I looked in the code and we only call CreateNextBlock and WriteBlock from a single goroutine","username":"yacovm","ts":"2018-10-15T16:48:46.997Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=7DkkTjknaKw6FjjBR) @kostas No, in fact, it would be a lot simpler if we are not to have multiple goroutines. And upon thinking of it more, I too think it is better to have the simpler implementation. I will submit a patch set with this update. I also think with this we may not have need to have a separate blockwriter for etcd raft and would not do the separation. If after seeing the CR, there is a need felt to create a separate package, i will take care of it then. ","username":"adarshsaraf123","ts":"2018-10-15T17:31:52.074Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=7DkkTjknaKw6FjjBR","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=7DkkTjknaKw6FjjBR","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=883bxFnYbbefac5ea) @yacovm True that. I was although thinking of multiple goroutines going ahead. But i admit this is indeed an overkill and it's a lot neater to keep things simple. ","username":"adarshsaraf123","ts":"2018-10-15T17:33:02.756Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=883bxFnYbbefac5ea","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=883bxFnYbbefac5ea","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Have updated the CRs with only a single goroutine. I hope this patch set is a lot simpler and clearer. ","username":"adarshsaraf123","ts":"2018-10-15T18:47:33.531Z"}
{"msg":"Has joined the channel.","username":"akshay.sood","ts":"2018-10-15T19:47:42.078Z","type":"uj"}
{"msg":"what about lock count?","username":"yacovm","ts":"2018-10-15T19:52:43.970Z"}
{"msg":"still 10 mutexes?","username":"yacovm","ts":"2018-10-15T19:52:54.448Z"}
{"msg":"wait i don't understand i thought Kostas wanted a separate CR that adds it.... and doesn't change the existing one, no?","username":"yacovm","ts":"2018-10-15T19:54:04.259Z"}
{"msg":"haven't looked latest decoupling code yet, but here's what I think based on the conversation in this channel:\nwe call `create` and `write` in _single go routine_ because:\n- in solo and kafka, there's no need to separate them, cuz we are consenting on tx instead of blocks, so `create` and `write` can be done back-to-back.\n- in etcdraft, this coupling *is* the reason we call them in single go routine. Once they are decoupled, we can (and most likely should) access them from separate go routines\n\nwhat I was objecting is that we _shouldn't_ enforce them to be called by different go routines, but @adarshsaraf123 has fixed it after an offline conversation. (in previous implementation, there's a potential deadlock when `create` and `write` are accessed by single go routine)","username":"guoger","ts":"2018-10-16T02:33:30.492Z"}
{"msg":"however, I would like us to defer changing the caller to use 2 go routines, cuz i feel there are more to be taken care of than [this](https://gerrit.hyperledger.org/r/c/26880/), i.e. blocking incoming envelopes while a config block is being assembled, consented and written.","username":"guoger","ts":"2018-10-16T02:37:52.730Z"}
{"msg":"however, I would like us to defer changing the caller to use 2 go routines, cuz i feel there are more to be taken care of than [this](https://gerrit.hyperledger.org/r/c/26880/), i.e. blocking incoming envelopes while a config block is being assembled, consented and written.","username":"guoger","ts":"2018-10-16T02:37:52.730Z"}
{"msg":"I suggest we create a JIRA to log this, and revisit once we are done with a fully functional etcd/raft chain","username":"guoger","ts":"2018-10-16T02:39:37.909Z"}
{"msg":"@yacovm in your reply in FAB-12016\n> We first pull the chains, and pull the system chain last until it reaches the sequence of the bootstrap config block in the file system, which is used to bootstrap the orderer.\nwhy are we pulling chains _before_ system chain?","username":"guoger","ts":"2018-10-16T04:38:39.756Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=dyhS3tuyanhoAEQmc) @guoger Oh okay. From our conversations I got the feeling that you were against splitting them out into two goroutines. That said, I am now of the opinion that there is not much that we gain by separating them into two goroutines. There is hardly much being done in `WriteBlock` to justify the additional lock management and complexity in code necessary to allow `CreateNextBlock` to be called in parallel to `WriteBlock`. I think it is better we stick to the single goroutine implementation. We do have the decoupling still though, just without the parallelism though. ","username":"adarshsaraf123","ts":"2018-10-16T05:04:46.454Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=dyhS3tuyanhoAEQmc","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=dyhS3tuyanhoAEQmc","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=dyhS3tuyanhoAEQmc) @guoger Oh okay. From our conversations I got the feeling that you were against splitting them out into two goroutines. That said, I am now of the opinion that there is not much that we gain by separating them into two goroutines. There is hardly much being done in `WriteBlock` to justify the additional lock management and complexity in code necessary to allow `CreateNextBlock` to be called in parallel to `WriteBlock`. I think it is better we stick to the single goroutine implementation. We do have the decoupling still, just without the parallelism though. ","username":"adarshsaraf123","ts":"2018-10-16T05:04:46.454Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=dyhS3tuyanhoAEQmc","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=dyhS3tuyanhoAEQmc","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@adarshsaraf123 then may i ask why we are decoupling them at first place?","username":"guoger","ts":"2018-10-16T05:30:05.664Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bg2Xg9BShfjyDh49c) @guoger Decoupling was not in the sense of calling `CreateNextBlock` and `WriteBlock` in parallel. With the earlier implementation, we could only create one block and then wait until this block was written before being able to create the next block. However, the present decoupling allows multiple blocks to be created without having to wait for the created blocks to be written. We can create 10 blocks without waiting for any of them to be written, a luxury we could not afford earlier. Perhaps looking at the [follow-up CR](https://gerrit.hyperledger.org/r/#/c/26880/) will help make this clearer?","username":"adarshsaraf123","ts":"2018-10-16T05:59:06.986Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bg2Xg9BShfjyDh49c","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bg2Xg9BShfjyDh49c","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@adarshsaraf123 and if we do not plan to call them in parallel, how do you create new blocks without waiting for the previous one to be written? (actually the one before that, given current impl)","username":"guoger","ts":"2018-10-16T06:01:33.474Z"}
{"msg":"wait, I got it..","username":"guoger","ts":"2018-10-16T06:02:30.744Z"}
{"msg":"alright, I agree that it doesn't need to be thread-safe _for now_. *but*, you need to handle this case in your follow-up CR:\n>blocking incoming envelopes while a config block is being assembled, consented and written","username":"guoger","ts":"2018-10-16T06:08:31.858Z"}
{"msg":"cc @adarshsaraf123 ","username":"guoger","ts":"2018-10-16T06:09:29.982Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Zg3ibLEwnnktiETcu) @guoger Actually that's part of a [separate JIRA](https://jira.hyperledger.org/browse/FAB-12226). I will create a sub-task there and work on it. ","username":"adarshsaraf123","ts":"2018-10-16T06:10:34.193Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Zg3ibLEwnnktiETcu","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Zg3ibLEwnnktiETcu","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I think we are talking about the [same CR](https://gerrit.hyperledger.org/r/#/c/26880/)","username":"guoger","ts":"2018-10-16T06:12:09.905Z"}
{"msg":"It is based on the [Raft JIRA breakdown sheet](https://docs.google.com/spreadsheets/d/1R02-xjdl4hNw90kN4NZ1kX0f4QoIYn51_1UHlwy-GQs/edit#gid=879975188) Week 11.","username":"adarshsaraf123","ts":"2018-10-16T06:13:14.451Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=cXdWna7Ww4FrKCfsQ) @guoger For bookkeeping reasons i think it is better that we separate the optimization part from the decoupling. Towards that I was suggesting having a separate JIRA","username":"adarshsaraf123","ts":"2018-10-16T06:15:06.152Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=cXdWna7Ww4FrKCfsQ","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=cXdWna7Ww4FrKCfsQ","remote":true,"fileId":null,"fileName":null}]}
{"msg":"but to utilize decoupling, you *have to* implement this blocking manner, otherwise it's not correct","username":"guoger","ts":"2018-10-16T06:16:23.930Z"}
{"msg":"in case we are talking about the same thing again, here's what I meant:\n- https://gerrit.hyperledger.org/r/c/26670/ decoupling\n- https://gerrit.hyperledger.org/r/c/26880/19 utilize decoupling (blocking is required)","username":"guoger","ts":"2018-10-16T06:18:24.036Z"}
{"msg":"and by _follow-up_ CR, I meant the second","username":"guoger","ts":"2018-10-16T06:19:38.777Z"}
{"msg":":+1_tone4: ","username":"adarshsaraf123","ts":"2018-10-16T07:03:46.917Z"}
{"msg":"@C0rWin: You have undone my patchset on this one :-( https://gerrit.hyperledger.org/r/c/25479/35..36","username":"kostas","ts":"2018-10-16T11:41:34.261Z"}
{"msg":"(I don't want to ripple through your work, so please give it a fix when you get a chance?)","username":"kostas","ts":"2018-10-16T11:43:46.704Z"}
{"msg":"@kostas not intentionally, just rebased stack of commits and put mine on top","username":"C0rWin","ts":"2018-10-16T11:43:47.998Z"}
{"msg":"Yeah, I know.","username":"kostas","ts":"2018-10-16T11:43:57.281Z"}
{"msg":"> why are we pulling chains _before_ system chain?","username":"kostas","ts":"2018-10-16T11:45:25.181Z"}
{"msg":"That's a good question.","username":"kostas","ts":"2018-10-16T11:45:29.304Z"}
{"msg":"I'm interested in it as well.","username":"kostas","ts":"2018-10-16T11:45:36.918Z"}
{"msg":"if first pull the system channel and only later on pull the chains and then crash","username":"yacovm","ts":"2018-10-16T11:46:17.180Z"}
{"msg":"when you restart you are in limbo state","username":"yacovm","ts":"2018-10-16T11:46:23.818Z"}
{"msg":"you don't know how to continue","username":"yacovm","ts":"2018-10-16T11:46:30.098Z"}
{"msg":"you don't know how to continue - you'll have chains that some are good, and some can never be recovered","username":"yacovm","ts":"2018-10-16T11:46:30.098Z"}
{"msg":"therefore you first pull the chains, and then pull the system chain","username":"yacovm","ts":"2018-10-16T11:46:39.721Z"}
{"msg":"now, if you crash during this time","username":"yacovm","ts":"2018-10-16T11:46:45.592Z"}
{"msg":"when you start, you look at the lastest block sequence of the system chain","username":"yacovm","ts":"2018-10-16T11:46:55.558Z"}
{"msg":"if that block sequence is less than the block sequence of the config block of the system chain you were given","username":"yacovm","ts":"2018-10-16T11:47:10.952Z"}
{"msg":"it means you crashed during the restart ","username":"yacovm","ts":"2018-10-16T11:47:17.354Z"}
{"msg":"if it's equal, or higher, then it means you don't need to perform the recovery protocol","username":"yacovm","ts":"2018-10-16T11:47:48.390Z"}
{"msg":"@kostas https://gerrit.hyperledger.org/r/#/c/25479/35..37, done","username":"C0rWin","ts":"2018-10-16T11:48:35.329Z"}
{"msg":"> blocking incoming envelopes while a config block is being assembled, consented and written","username":"kostas","ts":"2018-10-16T11:53:14.659Z"}
{"msg":"@guoger @adarshsaraf123: Why does this have to be handled now? Not doubting you're right, just seeking clarification.","username":"kostas","ts":"2018-10-16T11:53:37.011Z"}
{"msg":"@C0rWin My [follow-up CR for decoupling](https://gerrit.hyperledger.org/r/#/c/26880/) is in a bit of a flux for now. Me and @guoger had a discussion and we found another corner case that had to be handled. I will rebase yours on top of it after I finalize it. Thanks for the patience :sweat_smile: ","username":"adarshsaraf123","ts":"2018-10-16T11:55:03.909Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=MZXWj8JbCggAq9W3Y) @kostas May I rephrase that line to 'wait until the proposed config block has been written out to disk before continuing with creation of blocks'. This is necessary since we only do the revalidation of the incoming envelopes for config sequence changes once before the creation of blocks. If we don't hold up the block creation then we will end up having transactions with incorrect config sequences in the subsequent blocks.","username":"adarshsaraf123","ts":"2018-10-16T11:58:28.241Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=MZXWj8JbCggAq9W3Y","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=MZXWj8JbCggAq9W3Y","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Makes total sense now. Thanks!","username":"kostas","ts":"2018-10-16T11:59:07.328Z"}
{"msg":"Looks like the smoke tests are failing for everybody consistently.. ","username":"adarshsaraf123","ts":"2018-10-16T12:59:48.959Z"}
{"msg":"Yes, this was on #fabric-release the other day as well.","username":"kostas","ts":"2018-10-16T13:00:04.686Z"}
{"msg":"Adarsh and I are going over the logic change in `ResetCreatedBlocks` (formerly `DiscardCreatedBlocks`) here: https://gerrit.hyperledger.org/r/c/26670/26/orderer/common/multichannel/blockwriter.go#114","username":"kostas","ts":"2018-10-16T13:20:28.123Z"}
{"msg":"If a proposal fails, retrying is the way to go, correct?","username":"kostas","ts":"2018-10-16T13:21:13.505Z"}
{"msg":"Even if you're a network-partitioned leader, and the rest of the cluster has switched to a new leader that you're not aware of, I claim that you should keep retrying to Propose _until_ you get a heartbeat informing you that there's a new leader.","username":"kostas","ts":"2018-10-16T13:22:01.183Z"}
{"msg":"And I'm fairly certain that the Raft library itself has the check where proposals from old leaders are discarded.","username":"kostas","ts":"2018-10-16T13:22:20.789Z"}
{"msg":"Would you say the above is right? @guoger ","username":"kostas","ts":"2018-10-16T13:22:36.176Z"}
{"msg":"If it is right, I think the consensus we're reaching with @adarshsaraf123 is that we can go back to the old logic for `DiscardCreatedBlocks` w/o the need for the `onwardsBlockNumber` logic.","username":"kostas","ts":"2018-10-16T13:23:18.940Z"}
{"msg":">  And I'm fairly certain that the Raft library itself has the check where proposals from old leaders are discarded. \nthis is usual in all consensus algorithms as every propose has an epoch / ballot number attached to it","username":"yacovm","ts":"2018-10-16T13:23:19.309Z"}
{"msg":"@guoger: Going back to the configuration question, my vote is that we define `Consensus.Config` as an empty interface as you suggested, and we decode it based on `Consensus.Type`.","username":"kostas","ts":"2018-10-16T13:35:56.466Z"}
{"msg":"Looking at your WAL CR now.","username":"kostas","ts":"2018-10-16T13:36:11.256Z"}
{"msg":"> And I'm fairly certain that the Raft library itself has the check where proposals from old leaders are discarded\nAs the _partitioned network leader_, `Propose` should not fail, because leader *exists*. This method fails in following conditions:\n1. node is stopped (we exit, nothing to be done)\n2. this node is removed from cluster (this node does not participate in consensus anymore, mostly likely should be stopped, we don't care)\n3. no leader is available\n4. proposal forwarding is disabled","username":"guoger","ts":"2018-10-16T13:43:01.201Z"}
{"msg":"> And I'm fairly certain that the Raft library itself has the check where proposals from old leaders are discarded\nAs the _partitioned network leader_, `Propose` does *not* fail, because leader *exists*. This method fails in following conditions:\n1. node is stopped (we exit, nothing to be done)\n2. this node is removed from cluster (this node does not participate in consensus anymore, mostly likely should be stopped, we don't care)\n3. no leader is available\n4. proposal forwarding is disabled","username":"guoger","ts":"2018-10-16T13:43:01.201Z"}
{"msg":"3&4 might happen at leadership transition phase, where _this node_ was leader. Therefore, we shouldn't retry.","username":"guoger","ts":"2018-10-16T13:43:53.696Z"}
{"msg":"3&4 might happen at leadership transition phase, where _this node_ was leader. we shouldn't retry in this case because leader change is already underway (network reconnected and new leader is being elected)","username":"guoger","ts":"2018-10-16T13:43:53.696Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3TRW2NHr6S2ouN2jN) @guoger Even in this case it _is_ okay to retry? Of course the retries themselves would likely fail but there is no harm in retrying. Am I right? ","username":"adarshsaraf123","ts":"2018-10-16T13:49:57.470Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3TRW2NHr6S2ouN2jN","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3TRW2NHr6S2ouN2jN","remote":true,"fileId":null,"fileName":null}]}
{"msg":"no, we should not retry because it's definitely going to fail. I'm writing an explanation, which could lengthy","username":"guoger","ts":"2018-10-16T13:55:23.718Z"}
{"msg":"no, we should not retry because it's definitely going to fail. I'm writing an explanation, which could be lengthy","username":"guoger","ts":"2018-10-16T13:55:23.718Z"}
{"msg":"3 happens in this case:\na. we have 3 node cluster, 1, 2, 3\nb. 1 is elected as leader\nc. 1 is disconnected (still thinks itself as leader)\nd. an envelope is ordered on 1, a new block is created, about to be proposed\ne. 1 reconnected, and figured out new leader 2 has been elected, 1 steps down. It's view on leader goes through 1 -> 0 -> 2\nf. just when it's 0, `Propose` is called, you get an error\ng. if you retry, you fail because either 1) it's still 0, or 2) it's 2, proposal forwarding is disabled and you cannot forward","username":"guoger","ts":"2018-10-16T13:59:36.723Z"}
{"msg":"@guoger: We are arguing that retrying will go on until we're notified of a new leader.","username":"kostas","ts":"2018-10-16T14:05:22.168Z"}
{"msg":"If the leader is 0 or 2, then we won't retry.","username":"kostas","ts":"2018-10-16T14:05:42.216Z"}
{"msg":"if the leader is 1, then `Propose` actual succeeds","username":"guoger","ts":"2018-10-16T14:05:56.773Z"}
{"msg":"As it should, right?","username":"kostas","ts":"2018-10-16T14:06:16.038Z"}
{"msg":"If the leader is actually 1, then that node's proposals should succeed.","username":"kostas","ts":"2018-10-16T14:06:30.944Z"}
{"msg":"If 1 thinks 1 is the leader, but everybody else thinks 2 is the leader, 1 will propose, but everybody else will reject.","username":"kostas","ts":"2018-10-16T14:06:50.234Z"}
{"msg":"In both cases we're good, it seems?","username":"kostas","ts":"2018-10-16T14:07:06.756Z"}
{"msg":"but you got an error because 1 thinks there's *no* leader.","username":"guoger","ts":"2018-10-16T14:10:24.196Z"}
{"msg":"Then I stop proposing.","username":"kostas","ts":"2018-10-16T14:11:23.641Z"}
{"msg":"Ah, I think I see the issue.","username":"kostas","ts":"2018-10-16T14:12:47.016Z"}
{"msg":"> We are arguing that retrying will go on until we're notified of a new leader.","username":"kostas","ts":"2018-10-16T14:12:51.934Z"}
{"msg":"Let me rephrase:","username":"kostas","ts":"2018-10-16T14:12:55.667Z"}
{"msg":"As long as we are the leader, we keep proposing.","username":"kostas","ts":"2018-10-16T14:13:05.978Z"}
{"msg":"Does this work better?","username":"kostas","ts":"2018-10-16T14:13:10.584Z"}
{"msg":"Are we still missing the substance?","username":"kostas","ts":"2018-10-16T14:13:20.142Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=cn4mpRMvzs7fzjhe5) @kostas and you keep succeeding... no retry needed","username":"guoger","ts":"2018-10-16T14:13:37.732Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=cn4mpRMvzs7fzjhe5","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=cn4mpRMvzs7fzjhe5","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I am partitioned from the network.","username":"kostas","ts":"2018-10-16T14:13:51.305Z"}
{"msg":"How does the proposal succeed?","username":"kostas","ts":"2018-10-16T14:14:00.632Z"}
{"msg":"`Propose` succeeds, but never got committed","username":"guoger","ts":"2018-10-16T14:14:15.188Z"}
{"msg":"`Propose` method returns nil error","username":"guoger","ts":"2018-10-16T14:14:25.043Z"}
{"msg":"just never comes out in `CommittedEntries` in `Ready()`","username":"guoger","ts":"2018-10-16T14:14:52.689Z"}
{"msg":"how is that possible?","username":"yacovm","ts":"2018-10-16T14:15:02.777Z"}
{"msg":"Point me to that line in the code?","username":"kostas","ts":"2018-10-16T14:15:09.259Z"}
{"msg":"if propose succeeded then a quorum agreed on the block","username":"yacovm","ts":"2018-10-16T14:15:16.041Z"}
{"msg":"i assume by succeed you mean it goes through all the stages of consensus","username":"yacovm","ts":"2018-10-16T14:15:39.042Z"}
{"msg":"then it has to come out of the committed entries","username":"yacovm","ts":"2018-10-16T14:15:53.883Z"}
{"msg":"no, by succeed, I mean `Propose` returns nil","username":"guoger","ts":"2018-10-16T14:15:54.923Z"}
{"msg":"but it does *not* guarantee it's going to be committed","username":"guoger","ts":"2018-10-16T14:16:10.313Z"}
{"msg":"it's not blocking","username":"guoger","ts":"2018-10-16T14:16:13.001Z"}
{"msg":"ah ok","username":"yacovm","ts":"2018-10-16T14:16:25.827Z"}
{"msg":"then you mean you sent a propose via Step()","username":"yacovm","ts":"2018-10-16T14:16:38.009Z"}
{"msg":"that's all","username":"yacovm","ts":"2018-10-16T14:16:39.669Z"}
{"msg":"exactly","username":"guoger","ts":"2018-10-16T14:16:47.498Z"}
{"msg":"Shouldn't Step fail if I'm partitioned?","username":"kostas","ts":"2018-10-16T14:16:57.787Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=qD8wXj3e96SDBTSXz) @kostas do you mean code in fabric or etcd/raft?","username":"guoger","ts":"2018-10-16T14:17:03.978Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=qD8wXj3e96SDBTSXz","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=qD8wXj3e96SDBTSXz","remote":true,"fileId":null,"fileName":null}]}
{"msg":"it should because it's an RPC and not a stream ","username":"yacovm","ts":"2018-10-16T14:17:15.490Z"}
{"msg":"@guoger: Fabric.","username":"kostas","ts":"2018-10-16T14:17:17.874Z"}
{"msg":"had it been a stream it wouldn't :) ","username":"yacovm","ts":"2018-10-16T14:17:23.918Z"}
{"msg":"because stream Send() is async (I read too much of gRPC code in these months...)","username":"yacovm","ts":"2018-10-16T14:17:41.099Z"}
{"msg":"it's async up to 64KB ","username":"yacovm","ts":"2018-10-16T14:17:48.950Z"}
{"msg":"this is the max quota of bytes to put in the http/2 buffer ","username":"yacovm","ts":"2018-10-16T14:18:43.754Z"}
{"msg":"@kostas  https://github.com/hyperledger/fabric/blob/master/orderer/consensus/etcdraft/chain.go#L367","username":"guoger","ts":"2018-10-16T14:19:50.807Z"}
{"msg":"but fabric code doesn't help much actually.. how do you detect yourself as partitioned from rest of network?","username":"guoger","ts":"2018-10-16T14:20:19.831Z"}
{"msg":"Sigh, I'm confused. Zoom?","username":"kostas","ts":"2018-10-16T14:21:06.828Z"}
{"msg":"sure","username":"guoger","ts":"2018-10-16T14:21:10.141Z"}
{"msg":"grabbing earphone","username":"guoger","ts":"2018-10-16T14:21:20.378Z"}
{"msg":"https://zoom.us/j/7432937602","username":"kostas","ts":"2018-10-16T14:21:33.341Z"}
{"msg":"OK, discussed with Jay. He came up with what I think is a very nice idea.","username":"kostas","ts":"2018-10-16T14:35:42.980Z"}
{"msg":"The way we're currently doing things is: maintain in the blockwriter a queue of blocks that are not yet chained to each other.","username":"kostas","ts":"2018-10-16T14:39:39.356Z"}
{"msg":"The way we're currently doing things is: maintain in the blockwriter a queue of blocks ~that are not yet chained to each other~. (This is incorrect, see below.)","username":"kostas","ts":"2018-10-16T14:39:39.356Z"}
{"msg":"Why not maintain a candidate _chain_ of blocks at the leader (under the `etcdraft` package)?","username":"kostas","ts":"2018-10-16T14:40:46.828Z"}
{"msg":"Whenever a new block is created at the leader, we stored in our queue complete with the hash that links it to the previous block, right there on the spot. (Hence my reference to a chain of blocks.)","username":"kostas","ts":"2018-10-16T14:42:03.921Z"}
{"msg":"This means that `CreateNextBlock` now needs two arguments: (blockToBeCreated, prevBlock)","username":"kostas","ts":"2018-10-16T14:43:58.523Z"}
{"msg":"i thought that was where we wanted to go anyway?","username":"yacovm","ts":"2018-10-16T14:44:04.014Z"}
{"msg":"Gimme a sec to clarify this a bit further. I was in a rush to capture this right after the call, but I need to go over a few details first. Will look at the code and BRB.","username":"kostas","ts":"2018-10-16T14:46:42.484Z"}
{"msg":"i would say `CreateNextBlock` is most likely to be an utility function, which does not need knowledge of `BlockWriter`. Basically, node can propose however it wants, and we just write it into ledger once it's consented.","username":"guoger","ts":"2018-10-16T15:04:01.158Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=QBKs8ozRCvEYNcRyw) @kostas I know you said you want to clarify this further but the queue maintained in the blockwriter is in fact a chain.","username":"adarshsaraf123","ts":"2018-10-16T15:21:49.698Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=QBKs8ozRCvEYNcRyw","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=QBKs8ozRCvEYNcRyw","remote":true,"fileId":null,"fileName":null}]}
{"msg":"And when I mention divergent blocks in the decoupling CR I mean a block that is diverging from this chain. ","username":"adarshsaraf123","ts":"2018-10-16T15:24:11.064Z"}
{"msg":"> I know you said you want to clarify this further but the queue maintained in the blockwriter is in fact a chain.","username":"kostas","ts":"2018-10-16T15:56:45.847Z"}
{"msg":"@adarshsaraf123: Yes, you are right and I'm wrong.","username":"kostas","ts":"2018-10-16T15:56:54.911Z"}
{"msg":"When I was writing this, I realized I may have jumped the gun a bit, which is why I stopped and wanted to check the code again.","username":"kostas","ts":"2018-10-16T15:57:16.569Z"}
{"msg":"Still, I think the proposal is worth considering. Reframing it the way @guoger put it:","username":"kostas","ts":"2018-10-16T15:57:42.645Z"}
{"msg":"Should we have all of this logic in the blockwriter?","username":"kostas","ts":"2018-10-16T15:58:10.100Z"}
{"msg":"I suggest the following so as to resolve the dilemma, and be done with this.","username":"kostas","ts":"2018-10-16T16:00:44.230Z"}
{"msg":"Is there any time before 9:30pm EDT today that would work for us to have a Zoom call and settle on a final direction for this?","username":"kostas","ts":"2018-10-16T16:01:23.376Z"}
{"msg":"Is there any time ~before~ by 9:30pm EDT today that would work for us to have a Zoom call and settle on a final direction for this?","username":"kostas","ts":"2018-10-16T16:01:23.376Z"}
{"msg":"If so, let me know. @guoger @adarshsaraf123 ","username":"kostas","ts":"2018-10-16T16:01:34.071Z"}
{"msg":"Otherwise, I can get on a call at 6am EDT tomorrow morning if needed.","username":"kostas","ts":"2018-10-16T16:01:55.555Z"}
{"msg":"I am okay with a time that is suitable to @guoger He is the one further away on the timezone ;)","username":"adarshsaraf123","ts":"2018-10-16T16:03:42.990Z"}
{"msg":"I will keep checking throughout the day to see if he's available tonight. Otherwise, tomorrow morning.","username":"kostas","ts":"2018-10-16T16:04:46.700Z"}
{"msg":"Thanks Adarsh, and sorry for the back and forth on this one.","username":"kostas","ts":"2018-10-16T16:04:57.847Z"}
{"msg":"There's nothing to be sorry about. This has also been fun in a way ;)","username":"adarshsaraf123","ts":"2018-10-16T16:05:53.374Z"}
{"msg":"@kostas Just realized that anytime beyond 3pm edt before 9:30 pm edt would be late night and early morning for me. So something before that would be good. ","username":"adarshsaraf123","ts":"2018-10-16T16:14:52.124Z"}
{"msg":"my availability: 8:30 am EDT onwards @adarshsaraf123 @kostas ","username":"guoger","ts":"2018-10-16T16:25:03.356Z"}
{"msg":"> I know you said you want to clarify this further but the queue maintained in the blockwriter is in fact a chain.\nthat's right. I was just suggesting that instead of maintaining queue in blockwriter, we could do that in chain, to simplify the management and avoid complicated api. Anyway, let's discuss over the call","username":"guoger","ts":"2018-10-16T16:27:19.544Z"}
{"msg":"We'll do 8:30am tomorrow if that works for Adarsh.","username":"kostas","ts":"2018-10-16T16:31:57.809Z"}
{"msg":"Works for me :+1_tone3: ","username":"adarshsaraf123","ts":"2018-10-16T16:33:11.771Z"}
{"msg":"https://gerrit.hyperledger.org/r/c/25479/","username":"kostas","ts":"2018-10-16T20:33:41.554Z"}
{"msg":"https://gerrit.hyperledger.org/r/c/26547/","username":"kostas","ts":"2018-10-16T20:33:45.689Z"}
{"msg":"Yacov/Artem: Both of these look mergeable to me. If you agree, let's get them in.","username":"kostas","ts":"2018-10-16T20:34:35.946Z"}
{"msg":"my name is on the signed off by","username":"yacovm","ts":"2018-10-16T20:36:04.173Z"}
{"msg":"i generally agree","username":"yacovm","ts":"2018-10-16T20:36:15.131Z"}
{"msg":"skimmed it today","username":"yacovm","ts":"2018-10-16T20:36:17.855Z"}
{"msg":"My name is on the signed-off-by as well, this is not a blocker.","username":"kostas","ts":"2018-10-16T20:37:08.319Z"}
{"msg":"If you agree, +2 and merge.","username":"kostas","ts":"2018-10-16T20:37:13.280Z"}
{"msg":"i will merge after a thorough review, Kostas","username":"yacovm","ts":"2018-10-16T20:38:30.885Z"}
{"msg":"I'm currently battling my UTs","username":"yacovm","ts":"2018-10-16T20:38:36.766Z"}
{"msg":"I'm not rushing a review.","username":"kostas","ts":"2018-10-16T20:39:06.103Z"}
{"msg":"I've actually used both of these for integration testing of type B tx","username":"C0rWin","ts":"2018-10-16T20:39:57.237Z"}
{"msg":"looks fine, so merged, if @yacovm will have concerns we might address them in following CRs","username":"C0rWin","ts":"2018-10-16T20:40:36.361Z"}
{"msg":"Agreed, thank you both for looking into it!","username":"kostas","ts":"2018-10-16T20:40:52.049Z"}
{"msg":"btw, turns out integration framework needs to be updated to support type B updates as well ","username":"C0rWin","ts":"2018-10-16T20:42:01.957Z"}
{"msg":"https://gerrit.hyperledger.org/r/#/c/27040/","username":"C0rWin","ts":"2018-10-16T20:42:05.842Z"}
{"msg":"mod policy for type is orderer admin, so need to be able to sign update with orderer org admin user","username":"C0rWin","ts":"2018-10-16T20:42:34.080Z"}
{"msg":"A-ha. Cool, thanks for pushing this!","username":"kostas","ts":"2018-10-16T20:43:07.324Z"}
{"msg":"looks like CI is complete total lose :(","username":"C0rWin","ts":"2018-10-16T20:44:02.285Z"}
{"msg":"trying to solve protos divergence, I mean not solve, but rather push... fails all the way on not related to updated things, seriously considering to put +1 for verification myself ","username":"C0rWin","ts":"2018-10-16T20:45:01.688Z"}
{"msg":"I was following the discussion in #fabric-scrum earlier today w/ the smoke tests failing. Not good","username":"kostas","ts":"2018-10-16T20:48:15.494Z"}
{"msg":"I was following the discussion in #fabric-scrum earlier today w/ the smoke tests failing. Not good.","username":"kostas","ts":"2018-10-16T20:48:15.494Z"}
{"msg":"question, as `commitBlock` is async, wouldn't we encounter problem in following case:\n- about to `WriteConfigBlock` to create a new chain `foo`\n- `newChain` is [invoked](https://github.com/hyperledger/fabric/blob/release-1.3/orderer/common/multichannel/blockwriter.go#L118) before `commitBlock`.\n- local directory is created as part of chain resources, *but* config block is *not* yet appended to ledger\n- orderer crash\n- upon reboot, it finds chain `foo` because it exists on disk, however the config block does not exist on system chain.","username":"guoger","ts":"2018-10-17T08:03:38.469Z"}
{"msg":"basically, shouldn't _appending block to ledger_ and _actual creation of chain_ be atomic?","username":"guoger","ts":"2018-10-17T08:04:42.493Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=9PmjC3L9cqqf4LD8r) @guoger I will second you on that. \nJust to add to the discussion what reasoning I could come up with upon finding out `commitBlock` was asynchronous:\nAny error in `commitBlock` causes a panic. Perhaps it was worth the performance gains to ignore such corner cases while allowing the normal path to be _significantly_ faster. Maybe it is also reasonable to expect that such anomalies will be taken care of while restarting from a crash (although I am not sure if we do have a checklist to take care of while recovering from an orderer crash). \nAlso, it _may_ again be reasonable to expect that the append of the genesis block for the new chain will also fail given that the append of the block on the system chain failed.","username":"adarshsaraf123","ts":"2018-10-17T09:56:47.723Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=9PmjC3L9cqqf4LD8r","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=9PmjC3L9cqqf4LD8r","remote":true,"fileId":null,"fileName":null}]}
{"msg":"cc @jyellick ","username":"guoger","ts":"2018-10-17T10:05:53.317Z"}
{"msg":"@kostas @adarshsaraf123 are we going to have the discussion?","username":"guoger","ts":"2018-10-17T12:28:56.742Z"}
{"msg":"Yes, meeting in 1' right?","username":"kostas","ts":"2018-10-17T12:29:10.152Z"}
{"msg":"👍🏽","username":"adarshsaraf123","ts":"2018-10-17T12:29:21.534Z"}
{"msg":"what meeting @kostas  ? ","username":"yacovm","ts":"2018-10-17T12:29:52.571Z"}
{"msg":"Ah, we posted here yesterday that we wanted to talk about the blockwriter so as to settle the direction we're going.","username":"kostas","ts":"2018-10-17T12:30:34.737Z"}
{"msg":"You're welcome to join.","username":"kostas","ts":"2018-10-17T12:30:39.507Z"}
{"msg":"ok","username":"yacovm","ts":"2018-10-17T12:30:40.092Z"}
{"msg":"https://zoom.us/j/7432937602","username":"kostas","ts":"2018-10-17T12:30:42.906Z"}
{"msg":"We reached the 40m limit, restarting","username":"kostas","ts":"2018-10-17T13:11:42.552Z"}
{"msg":"@adarshsaraf123 so, my objection against `BlockWriter` is not strong enough to have you rewrite it, but I just wanna suggest that, we probably should avoid making assumptions, and keep it simple (dumb), until we see it being useful. (`BlockWriter` API itself is an example, isn't it :P)","username":"guoger","ts":"2018-10-17T13:48:21.181Z"}
{"msg":"but if you see it being over-complicated to shift logic to chain, let's keep your current approach","username":"guoger","ts":"2018-10-17T13:52:07.422Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=BEiNqAWHpLqGWrTnf) @guoger Fair enough. \nI believe there shouldn't be much of a rewrite now that the `GetBlock` call is in. Also, the statement that _it is up to the consensus implementation to decide how it wants to create the blocks_ makes a lot of sense and now I am convinced that this logic sits well within `etcdraft`. The main argument for me against moving it out of `blockwriter` was that we may need it for subsequent consensus implementations but that _is_ an assumption and like you said we _should_ avoid making assumptions :)","username":"adarshsaraf123","ts":"2018-10-17T13:56:13.053Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=BEiNqAWHpLqGWrTnf","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=BEiNqAWHpLqGWrTnf","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=BEiNqAWHpLqGWrTnf) @guoger Fair enough. \nI believe there shouldn't be much of a rewrite now that the `GetBlock` call will be in. Also, the statement that _it is up to the consensus implementation to decide how it wants to create the blocks_ makes a lot of sense and now I am convinced that this logic sits well within `etcdraft`. The main argument for me against moving it out of `blockwriter` was that we may need it for subsequent consensus implementations but that _is_ an assumption and like you said we _should_ avoid making assumptions :)","username":"adarshsaraf123","ts":"2018-10-17T13:56:13.053Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=BEiNqAWHpLqGWrTnf","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=BEiNqAWHpLqGWrTnf","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=BEiNqAWHpLqGWrTnf) @guoger Fair enough. \nI believe there shouldn't be much of a rewrite now that the `GetBlock` call will be in. Also, the statement that _it is up to the consensus implementation to decide how it wants to create the blocks_ makes a lot of sense and now I am pretty convinced that this logic sits well within `etcdraft`. The main argument for me against moving it out of `blockwriter` was that we may need it for subsequent consensus implementations but that _is_ an assumption and like you said we _should_ avoid making assumptions :)","username":"adarshsaraf123","ts":"2018-10-17T13:56:13.053Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=BEiNqAWHpLqGWrTnf","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=BEiNqAWHpLqGWrTnf","remote":true,"fileId":null,"fileName":null}]}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=9PmjC3L9cqqf4LD8r","username":"jyellick","ts":"2018-10-17T15:45:50.724Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=9PmjC3L9cqqf4LD8r","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=9PmjC3L9cqqf4LD8r","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@guoger Absolutely, this is a bug/risk and it should be addressed.  There probably should be a comment in the code to that affect.  At the time it seemed like a rather unlikely corner case (and recovery in the Kafka case is as simple as deleting the ledger and rebootstrapping).  At the very least, we should probably put a check during chain creation time that the chain is already of length zero.","username":"jyellick","ts":"2018-10-17T15:47:31.314Z"}
{"msg":"With that check... it's not obvious to me how replaying the orderer system channel would be problematic.","username":"jyellick","ts":"2018-10-17T15:47:56.065Z"}
{"msg":"(Of course, making the operation entirely atomic would be superior, but I think we could get away without)","username":"jyellick","ts":"2018-10-17T15:48:19.447Z"}
{"msg":"> put a check during chain creation time that the chain is already of length zero.\n@jyellick mind elaborating a bit?","username":"guoger","ts":"2018-10-18T02:37:58.199Z"}
{"msg":"> put a check during chain creation time that the chain is already of length zero.\nmind elaborating a bit? @jyellick ","username":"guoger","ts":"2018-10-18T02:37:58.199Z"}
{"msg":"btw, filed FAB-12521 for this","username":"guoger","ts":"2018-10-18T03:02:34.377Z"}
{"msg":"Heads-up: I _may_ miss tomorrow’s scrum. I suggest we use Slack Audio so this can go on w/o me if need be.","username":"kostas","ts":"2018-10-18T04:48:06.446Z"}
{"msg":"guys, I remember we have discussed at some point, how we suppose to address Raft reconfiguration. I.e. adding or removing OSNs. As far as I can recall, @yacovm suggested to simply stop old instance and create a new one with updated list of peers.\n\n@kostas @guoger @adarshsaraf123 is there other suggestions or proposals?","username":"C0rWin","ts":"2018-10-18T09:52:01.160Z"}
{"msg":"guys, I remember we have discussed at some point, how we suppose to address Raft reconfiguration. I.e. adding or removing OSNs. As far as I can recall, @yacovm suggested to simply stop old instance and create a new one with updated list of peers.\n\n@kostas  @guoger @adarshsaraf123 is there other suggestions or proposals?","username":"C0rWin","ts":"2018-10-18T09:52:01.160Z"}
{"msg":"guys, I remember we have discussed at some point, how we suppose to address Raft reconfiguration. I.e. adding or removing OSNs. As far as I can recall, @yacovm suggested to simply stop old instance and create a new one with updated list of peers.\n\n @kostas  @guoger @adarshsaraf123 is there other suggestions or proposals?","username":"C0rWin","ts":"2018-10-18T09:52:01.160Z"}
{"msg":"Has joined the channel.","username":"kh.nguyen","ts":"2018-10-19T00:21:56.173Z","type":"uj"}
{"msg":" @guoger  - I finished the CR that adds support for creation of block pullers, and since I see that the `chain.go` and `consenter.go` is a bit ballooning, I added a new file - `util.go` in the `etcdraft` folder.\nyou may use the `newBlockPuller` method in https://gerrit.hyperledger.org/r/#/c/27055/13/orderer/consensus/etcdraft/util.go@75 to create the block puller for your chain.\nThe best place to put it, IMO, is in the `HandleChain` method. \nYou'll need to re-use the `*cluster.PredicateDialer` instance from the communication layer (don't worry - it knows to clone itself so it's safe), and also pass the `localconfig.Cluster` from the top level. \n ","username":"yacovm","ts":"2018-10-19T00:48:05.931Z"}
{"msg":"and now I need to ::sleeping: ","username":"yacovm","ts":"2018-10-19T00:51:36.348Z"}
{"msg":"edit: `03:55:50 orderer/consensus/kafka/chain_test.go:3644: unreachable code`  I'll fix it tomorrow :/ ","username":"yacovm","ts":"2018-10-19T00:56:41.055Z"}
{"msg":"Has left the channel.","username":"Jgnuid","ts":"2018-10-19T01:43:20.747Z","type":"ul"}
{"msg":"I'm seeing this running `make basic-checks` on master:\n```\nChecking with gofmt\nThe following files contain gofmt errors\nbccsp/pkcs11/impl_test.go\nbccsp/sw/impl_test.go\nbccsp/utils/x509_test.go\ncommon/cauthdsl/policyparser.go\ncommon/tools/idemixgen/idemixca/idemixca.go\ncore/endorser/endorser.go\ncore/endorser/endorser_test.go\ncore/handlers/validation/builtin/v12/validation_logic_test.go\ncore/handlers/validation/builtin/v13/validation_logic_test.go\ncore/ledger/kvledger/txmgmt/rwsetutil/rwset_builder_test.go\ncore/peer/deliverevents.go\ndiscovery/support/acl/support.go\ndiscovery/support/acl/support_test.go\ngossip/gossip/channel/channel.go\ngossip/gossip/channel/channel_test.go\ngossip/privdata/coordinator.go\nintegration/nwo/network.go\nmsp/configbuilder.go\nThe gofmt command 'gofmt -l -s -w' must be run for these files\nmake: *** [linter] Error 1\n```\ncan anyone confirm?","username":"guoger","ts":"2018-10-19T09:24:19.596Z"}
{"msg":"(but running gofmt doesn't really alter files...)","username":"guoger","ts":"2018-10-19T09:24:43.321Z"}
{"msg":"everything is fine in CI otherwise it'd fail","username":"yacovm","ts":"2018-10-19T09:32:01.457Z"}
{"msg":"https://gerrit.hyperledger.org/r/#/c/27102/1/sampleconfig/orderer.yaml","username":"yacovm","ts":"2018-10-19T09:32:31.909Z"}
{"msg":"@guoger what is this? ","username":"yacovm","ts":"2018-10-19T09:32:36.889Z"}
{"msg":"CI does fail https://logs.hyperledger.org/production/vex-yul-hyp-jenkins-3/fabric-verify-build-checks-x86_64/6279/console.log.gz","username":"guoger","ts":"2018-10-19T09:33:30.801Z"}
{"msg":"that CR is to pass consensus specific configurations to consenter","username":"guoger","ts":"2018-10-19T09:34:23.267Z"}
{"msg":"i.e. WAL dir and Snapshot dir","username":"guoger","ts":"2018-10-19T09:34:37.391Z"}
{"msg":"but \"hello world\" ? ","username":"yacovm","ts":"2018-10-19T09:34:59.565Z"}
{"msg":"if we say `WALDir`, then it would be misleading that it's raft specific","username":"guoger","ts":"2018-10-19T09:35:36.617Z"}
{"msg":"right but why not just add a raft section instead","username":"yacovm","ts":"2018-10-19T09:35:52.771Z"}
{"msg":"what does \"hello world\" mean? :) ","username":"yacovm","ts":"2018-10-19T09:36:00.864Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=4HqdJbAzyz2dr76XZ) @yacovm because we don't want a raft section?","username":"guoger","ts":"2018-10-19T09:37:01.074Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=4HqdJbAzyz2dr76XZ","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=4HqdJbAzyz2dr76XZ","remote":true,"fileId":null,"fileName":null}]}
{"msg":"it doesn't mean anything, because orderer doesn't care","username":"guoger","ts":"2018-10-19T09:37:19.795Z"}
{"msg":"and TBH I think at this stage where we are - golang plugins isn't viable and since we have kafka section we should just add an etcdraft section and call it a day","username":"yacovm","ts":"2018-10-19T09:37:20.182Z"}
{"msg":"like - if we have kafka section then it's not generic anyhow","username":"yacovm","ts":"2018-10-19T09:37:42.164Z"}
{"msg":"shouldn't we defer pluggability to 2.0 ? ","username":"yacovm","ts":"2018-10-19T09:38:03.424Z"}
{"msg":"we have so much left to be done","username":"yacovm","ts":"2018-10-19T09:38:09.822Z"}
{"msg":"and, while you're here - I finished my work for the deliver client support","username":"yacovm","ts":"2018-10-19T09:38:30.353Z"}
{"msg":"","username":"yacovm","ts":"2018-10-19T09:38:35.116Z","attachments":[{"type":"file","title":"Clipboard - October 19, 2018 12:38 PM","title_link":"/file-upload/iy7we9SzT6aQgKJYY/Clipboard%20-%20October%2019,%202018%2012:38%20PM","image_url":"/file-upload/iy7we9SzT6aQgKJYY/Clipboard%20-%20October%2019,%202018%2012:38%20PM","image_type":"image/png","image_size":3776,"url":"/file-upload/iy7we9SzT6aQgKJYY/Clipboard%20-%20October%2019,%202018%2012:38%20PM","remote":false,"fileId":"iy7we9SzT6aQgKJYY","fileName":"Clipboard - October 19, 2018 12:38 PM"}]}
{"msg":"may you please rebase on top of my change sets to not conflict me? :) ","username":"yacovm","ts":"2018-10-19T09:38:46.314Z"}
{"msg":"and you need to pick up the deliver stuff anyway for the snapshotting i believe","username":"yacovm","ts":"2018-10-19T09:39:16.646Z"}
{"msg":"I removed the interfaces from the etcdraft chain/consenter so you can easily rebase without any conflicts","username":"yacovm","ts":"2018-10-19T09:39:36.883Z"}
{"msg":"as I added code in a new file `util.go`","username":"yacovm","ts":"2018-10-19T09:39:50.774Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=4HqdJbAzyz2dr76XZ) @yacovm I thought we had discussion here earlier? even though we don't care about plugin right now, I'm inclined to add opaque one instead of `EtcdRaft`, we don't need to expand config.","username":"guoger","ts":"2018-10-19T09:46:26.142Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=4HqdJbAzyz2dr76XZ","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=4HqdJbAzyz2dr76XZ","remote":true,"fileId":null,"fileName":null}]}
{"msg":"and `kafka` should be this way as well, we just don't refactor that for now","username":"guoger","ts":"2018-10-19T09:46:46.991Z"}
{"msg":"I'm not sure it has any value at this point in time given we all know how hard it is to actually add a new consensus to fabric.\nif you strongly believe this is optimal, please do so, but please rebase on top of my CR stack :smiling_imp:","username":"yacovm","ts":"2018-10-19T09:52:49.971Z"}
{"msg":"I'm not sure it has any value at this point in time given we all know how hard it is to actually add a new consensus to fabric. \nThe code base is just not ready for pluggability IMO. \nif you strongly believe this is optimal, please do so, but please rebase on top of my CR stack :smiling_imp:","username":"yacovm","ts":"2018-10-19T09:52:49.971Z"}
{"msg":"@C0rWin I'm rebasing on top of yours, do you want me to rebase yours on top of @yacovm 's CR?","username":"guoger","ts":"2018-10-19T10:04:11.078Z"}
{"msg":"hold on, maybe i should move his CR on top of my stack? :thinking: ","username":"yacovm","ts":"2018-10-19T10:06:30.214Z"}
{"msg":"then you'll end up getting all the goodness ","username":"yacovm","ts":"2018-10-19T10:06:42.594Z"}
{"msg":"`wal` has to be on top of his. `snap` has to be on top of yours. I'm rebasing `wal` right now","username":"guoger","ts":"2018-10-19T10:08:07.073Z"}
{"msg":"https://gerrit.hyperledger.org/r/c/27018/","username":"guoger","ts":"2018-10-19T10:08:25.386Z"}
{"msg":"wait hold on","username":"yacovm","ts":"2018-10-19T10:08:33.423Z"}
{"msg":"I'll rebase his on top of my stack","username":"yacovm","ts":"2018-10-19T10:08:39.430Z"}
{"msg":"then if we end up CRing his before mine, we'll rebase it on top of master, merge it, and then I'll cascade-rebase from gerrit ","username":"yacovm","ts":"2018-10-19T10:09:02.029Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=LzTMXWxrmJvFY6GmT) @yacovm that's what I was trying to do","username":"guoger","ts":"2018-10-19T10:10:08.191Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=LzTMXWxrmJvFY6GmT","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=LzTMXWxrmJvFY6GmT","remote":true,"fileId":null,"fileName":null}]}
{"msg":"oh then be my guest","username":"yacovm","ts":"2018-10-19T10:10:34.915Z"}
{"msg":" feel free to do that","username":"yacovm","ts":"2018-10-19T10:10:46.125Z"}
{"msg":"nevermind I did it myself @guoger ","username":"yacovm","ts":"2018-10-19T10:35:01.979Z"}
{"msg":"","username":"yacovm","ts":"2018-10-19T10:35:25.765Z","attachments":[{"type":"file","title":"Clipboard - October 19, 2018 1:35 PM","title_link":"/file-upload/qNgGmmamWhvrhB3qs/Clipboard%20-%20October%2019,%202018%201:35%20PM","image_url":"/file-upload/qNgGmmamWhvrhB3qs/Clipboard%20-%20October%2019,%202018%201:35%20PM","image_type":"image/png","image_size":4413,"url":"/file-upload/qNgGmmamWhvrhB3qs/Clipboard%20-%20October%2019,%202018%201:35%20PM","remote":false,"fileId":"qNgGmmamWhvrhB3qs","fileName":"Clipboard - October 19, 2018 1:35 PM"}]}
{"msg":"thx!","username":"guoger","ts":"2018-10-19T10:35:29.506Z"}
{"msg":" @guoger  @adarshsaraf123  @C0rWin  please everyone keep in mind rebasing on top of this chain so we can slide this to master as smoothly as possible","username":"yacovm","ts":"2018-10-19T10:36:19.780Z"}
{"msg":" @kostas  ^ ","username":"yacovm","ts":"2018-10-19T10:36:30.121Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=HDEGQyqubDMeANrAg","username":"kostas","ts":"2018-10-19T12:21:58.201Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=HDEGQyqubDMeANrAg","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=HDEGQyqubDMeANrAg","remote":true,"fileId":null,"fileName":null}]}
{"msg":"It is hard, and we botched things with the way we hard-coded Kafka. So long as adding new things in an opaque way is not slowing us down, we should do it like so.","username":"kostas","ts":"2018-10-19T12:26:08.713Z"}
{"msg":"It is hard, and we botched things with the way we hard-coded Kafka. So long as adding new things in an opaque way is not slowing us down however, we should do it like so.","username":"kostas","ts":"2018-10-19T12:26:08.713Z"}
{"msg":"Put differently: if we can do the right thing w/o it being a significant detour, let's do the right thing. That opaque consensus section strikes me as the right thing.","username":"kostas","ts":"2018-10-19T12:27:08.335Z"}
{"msg":"@adarshsaraf123 could you insert your optimistic block creation somewhere in the CR stack? it's rebased","username":"guoger","ts":"2018-10-19T12:28:39.034Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=8FeWdnYnFCS6fnFpx) @guoger I have not completed working on it yet. I can rebase it wherever in the stack you would like me to. ","username":"adarshsaraf123","ts":"2018-10-19T12:30:22.263Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=8FeWdnYnFCS6fnFpx","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=8FeWdnYnFCS6fnFpx","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@guoger: Don't let that derail you from your current line of work, a heads up that we had an integration test failure related to the \"stale leader should not be able to propose block because of lagged term\" spec.","username":"kostas","ts":"2018-10-19T12:42:17.440Z"}
{"msg":"@guoger: Don't let that derail you from your current line of work, but a heads up that we had an integration test failure related to the \"stale leader should not be able to propose block because of lagged term\" spec.","username":"kostas","ts":"2018-10-19T12:42:17.440Z"}
{"msg":"(It showed up in the WAL CR, but was not introduced by it.)","username":"kostas","ts":"2018-10-19T12:42:36.444Z"}
{"msg":"i remember it's in UT, not integration. There was one failed *integration* test, but fixed in latest CR (basically I didn't pass WALDir to it)","username":"guoger","ts":"2018-10-19T12:47:19.503Z"}
{"msg":"and the UT you pointed out, yes, I was aware of it... and trying to reproduce..","username":"guoger","ts":"2018-10-19T12:47:52.714Z"}
{"msg":"Right, right - I stand corrected; UT.","username":"kostas","ts":"2018-10-19T12:53:22.309Z"}
{"msg":"why can't https://gerrit.hyperledger.org/r/#/c/26180/ be rebased on top of its parent ? :thinking: ","username":"yacovm","ts":"2018-10-21T20:47:39.093Z"}
{"msg":"@guoger  ","username":"yacovm","ts":"2018-10-21T20:48:15.581Z"}
{"msg":"any idea?","username":"yacovm","ts":"2018-10-21T20:48:20.039Z"}
{"msg":"btw heads up - i rebased most of the CRs in the chain until Jay's change set above.\nI had a brittle test so I had to change some lines in a file of mine which I added","username":"yacovm","ts":"2018-10-21T20:49:07.676Z"}
{"msg":"@yacovm i was, until Artem changed [his](https://gerrit.hyperledger.org/r/c/27108/4), and I'm rebasing it","username":"guoger","ts":"2018-10-22T03:04:31.546Z"}
{"msg":"@yacovm I agree with you that we should take snapshot *every n bytes*, instead of every n blocks. However, do you mind if we defer this, cuz it adds a bit complexity:\nevery time we reboot an OSN, we need to load blocks since last snapshotted and calculate total bytes, so we have a correct initial state. (it should also be straightforward with newly added `Block` api)","username":"guoger","ts":"2018-10-22T10:04:12.690Z"}
{"msg":"I don't understand... if you boot the OSN you just load whatever you have no?","username":"yacovm","ts":"2018-10-22T10:11:21.658Z"}
{"msg":"you don't snapshot when you boot","username":"yacovm","ts":"2018-10-22T10:11:28.311Z"}
{"msg":"so where is the added complexity at boot?","username":"yacovm","ts":"2018-10-22T10:11:32.647Z"}
{"msg":"@guoger ","username":"yacovm","ts":"2018-10-22T10:21:59.085Z"}
{"msg":"we need to know how many bytes of blocks we have accumulated since last snapshot","username":"guoger","ts":"2018-10-22T10:22:40.280Z"}
{"msg":"i.e. if we snapshotted at block 5, and then produced 6 & 7, then reboot. we need to have total size of 6 & 7 as initial state. Does it make sense?","username":"guoger","ts":"2018-10-22T10:23:43.316Z"}
{"msg":"if we go with just snapshotting every n blocks, then I'll just load block number from last snapshot","username":"guoger","ts":"2018-10-22T10:24:34.669Z"}
{"msg":"@yacovm ","username":"guoger","ts":"2018-10-22T10:25:01.256Z"}
{"msg":"oh i see you need to persist the last block index @guoger  right?","username":"yacovm","ts":"2018-10-22T11:07:44.714Z"}
{"msg":"by \"last block index\", do you mean \"lasted snapshotted block number\"? we don't need that in block metadata. we could get it from last snapshot","username":"guoger","ts":"2018-10-22T11:19:12.582Z"}
{"msg":"so what is the problem then? you can retrieve any block using the support now","username":"yacovm","ts":"2018-10-22T11:21:34.510Z"}
{"msg":"you can just retrieve the blocks when you start up and count their lengths","username":"yacovm","ts":"2018-10-22T11:21:46.261Z"}
{"msg":"oh, there's no problem per se. just a bit more complicated (code and tests) than \"snapshot per n blocks\", and I think we could defer it to a later improvement. (also, does it make sense to provide both, just like how we cut blocks?)","username":"guoger","ts":"2018-10-22T12:28:08.704Z"}
{"msg":"@kostas  ? wdyt?","username":"yacovm","ts":"2018-10-22T12:41:42.900Z"}
{"msg":"https://jira.hyperledger.org/browse/FAB-12016","username":"yacovm","ts":"2018-10-22T13:08:20.500Z"}
{"msg":"> oh, there's no problem per se. just a bit more complicated (code and tests) than \"snapshot per n blocks\", and I think we could defer it to a later improvement. (also, does it make sense to provide both, just like how we cut blocks?)\nLet's defer and keep it simple for now.","username":"kostas","ts":"2018-10-22T13:38:57.272Z"}
{"msg":"So in FAB-12016 it was proposed in the comments to just use the lastest config block of the system channel","username":"yacovm","ts":"2018-10-22T13:45:58.839Z"}
{"msg":"but the system channel doesn't record config transactions of channels","username":"yacovm","ts":"2018-10-22T13:46:23.572Z"}
{"msg":"and if the consenter nodes completely changed, or the TLS CA cert changed -  it would mean that you can't use the system channel to figure out the chains","username":"yacovm","ts":"2018-10-22T13:47:09.475Z"}
{"msg":"currently, this problem also exists for peers but at some point we're going to make peers join from the latest config block","username":"yacovm","ts":"2018-10-22T13:47:46.694Z"}
{"msg":"and i want to solve this problem for raft OSNs now, if possible","username":"yacovm","ts":"2018-10-22T13:47:56.659Z"}
{"msg":"I had proposed a mechanism in the JIRA that involves adding some more information via a config file.... ","username":"yacovm","ts":"2018-10-22T13:48:12.912Z"}
{"msg":"@kostas  @jyellick","username":"yacovm","ts":"2018-10-22T13:48:19.605Z"}
{"msg":"@yacovm: Re-reading that thread now.","username":"kostas","ts":"2018-10-22T16:11:25.317Z"}
{"msg":"> We first pull the chains, and pull the system chain last until it reaches the sequence of the bootstrap config block in the file system, which is used to bootstrap the orderer.","username":"kostas","ts":"2018-10-22T16:11:26.670Z"}
{"msg":"Let's set aside the concern you raise for now. Remind me this:","username":"kostas","ts":"2018-10-22T16:11:55.738Z"}
{"msg":"You feed the new OSN with the latest configuration block of the system channel.","username":"kostas","ts":"2018-10-22T16:12:14.750Z"}
{"msg":"The new OSN gets a listing of all the created chains.","username":"kostas","ts":"2018-10-22T16:12:39.984Z"}
{"msg":"Does it attempt to connect to all of them, or are we passing in a list of the channels it should reach out to?","username":"kostas","ts":"2018-10-22T16:13:10.921Z"}
{"msg":"I am guessing the former, and after a series of unsuccessful attempts, it realizes that it does not have access to a certain chain, and gives up.","username":"kostas","ts":"2018-10-22T16:13:46.892Z"}
{"msg":"I am guessing the former, and after a series of unsuccessful attempts, it realizes that it does not have access to a certain chain, and gives up. Correct?","username":"kostas","ts":"2018-10-22T16:13:46.892Z"}
{"msg":"I am guessing the former, and after a series of unsuccessful attempts, it realizes that it does not have access to a certain chain, and gives up. Correct? (UPDATE: Yes. Based on your description of how the \"cluster\" bootstrap method would work.)","username":"kostas","ts":"2018-10-22T16:13:46.892Z"}
{"msg":"Now, that's an aside. Just want to make sure I'm on the same page.","username":"kostas","ts":"2018-10-22T16:14:32.996Z"}
{"msg":"Now, that's an aside.","username":"kostas","ts":"2018-10-22T16:14:32.996Z"}
{"msg":"> and if the consenter nodes completely changed, or the TLS CA cert changed - it would mean that you can't use the system channel to figure out the chains","username":"kostas","ts":"2018-10-22T16:14:57.860Z"}
{"msg":"I see the issue.","username":"kostas","ts":"2018-10-22T16:15:00.493Z"}
{"msg":"> I had proposed a mechanism in the JIRA that involves adding some more information via a config file....","username":"kostas","ts":"2018-10-22T16:22:09.810Z"}
{"msg":"This is tricky as well, no?","username":"kostas","ts":"2018-10-22T16:23:12.538Z"}
{"msg":"You need to list in `netboot.yaml` OSNs that can read the system channel, and OSNs that are part of the channels you will join later on.","username":"kostas","ts":"2018-10-22T16:23:43.002Z"}
{"msg":"There may be no overlap between the two sets.","username":"kostas","ts":"2018-10-22T16:25:03.190Z"}
{"msg":"> Reach out to a majority of OSNs and figure out the latest system channel height and some OSN that possesses it.","username":"kostas","ts":"2018-10-22T16:25:48.530Z"}
{"msg":"I am also skeptical about the `majority` bit here. Is it the majority of the OSNs provided in the `netboot.yaml` file? Or is it the majority of the OSNs listed in the provided config block? Both are of limited value from a byzantine perspective.","username":"kostas","ts":"2018-10-22T16:30:21.961Z"}
{"msg":"I am also skeptical about the \"majority\" bit here. Is it the majority of the OSNs provided in the `netboot.yaml` file? Or is it the majority of the OSNs listed in the provided config block? Both are of limited value from a byzantine perspective.","username":"kostas","ts":"2018-10-22T16:30:21.961Z"}
{"msg":"As I'm thinking about it more, here's what it comes down to:","username":"kostas","ts":"2018-10-22T16:54:24.222Z"}
{"msg":"What is the model, or set of assumptions, that we're adopting? If a consenter set for application channel \"foo\" can diverge far enough so that it has no overlap with the consenter set recorded in the system channel during foo's creation, then our system channel-based approach is flawed.","username":"kostas","ts":"2018-10-22T16:56:02.734Z"}
{"msg":"What is the model, or set of assumptions, that we're adopting? If the consenter set for application channel \"foo\" can diverge far enough so that it has no overlap with the consenter set recorded in the system channel during foo's creation, then our system channel-based approach is flawed.","username":"kostas","ts":"2018-10-22T16:56:02.734Z"}
{"msg":"What is the model, or set of assumptions, that we're adopting? If the consenter set for application channel \"foo\" can diverge far enough so that it has no overlap with the consenter set recorded in the system channel during foo's creation, then our system channel-based approach is flawed, and neither the \"latest system channel config block\" or the \"cluster\"/`netboot.yaml` approach can work.","username":"kostas","ts":"2018-10-22T16:56:02.734Z"}
{"msg":"If we assume that at any point in time, only OSNs that are approved by the ordering service of the system channel can be added to application channels, then we're good with the \"latest system channel config block\" approach that Jason suggested.","username":"kostas","ts":"2018-10-22T16:59:52.685Z"}
{"msg":"We can ensure that is the case by setting the modification policies for the cluster set to be restrictive enough and editable by the majority of the ordering service org admins (which is the default I believe).","username":"kostas","ts":"2018-10-22T17:00:38.625Z"}
{"msg":"So a channel can go rogue as much as it wants when it comes to adding peer orgs.","username":"kostas","ts":"2018-10-22T17:01:08.646Z"}
{"msg":"But when it comes to adding orderer orgs, it is limited to the selection provided to it by the ordering service from which this channel was spawned.","username":"kostas","ts":"2018-10-22T17:01:37.002Z"}
{"msg":"why do you think the netbook approach is flawed ? ","username":"yacovm","ts":"2018-10-22T17:08:06.652Z"}
{"msg":"all OSNs have system channels in them, no?","username":"yacovm","ts":"2018-10-22T17:08:26.916Z"}
{"msg":"even though the system channel might not record these OSNs","username":"yacovm","ts":"2018-10-22T17:08:40.339Z"}
{"msg":"they are aware of the system channel heights, since they have the system channels and they are authorized to read them... no?","username":"yacovm","ts":"2018-10-22T17:09:01.717Z"}
{"msg":"an OSN is authorized to read a system channel if its org is authorized to read it","username":"yacovm","ts":"2018-10-22T17:09:17.099Z"}
{"msg":"and an org of an OSN might be in a system channel, but the OSN itself might not be in it, no?","username":"yacovm","ts":"2018-10-22T17:09:32.763Z"}
{"msg":"@kostas ","username":"yacovm","ts":"2018-10-22T17:09:36.096Z"}
{"msg":"therefore I suggested the net-boot file as a union of the OSNs of all channels that you might need","username":"yacovm","ts":"2018-10-22T17:10:00.663Z"}
{"msg":"I suggested the net-boot file as a union of the OSNs of all channels that you might need","username":"yacovm","ts":"2018-10-22T17:10:00.663Z"}
{"msg":"essentially - this contains all the communication crypto material + the endpoints that is recorded in the last config block(s) of the channels","username":"yacovm","ts":"2018-10-22T17:10:36.197Z"}
{"msg":"and the genesis blocks aside the net-book files, to be able to verify the blocks you pull.","username":"yacovm","ts":"2018-10-22T17:10:57.636Z"}
{"msg":"After thinking for a while, I realized that for any OSN - if it's in the system channel, then we know it from the last config block.\nIf it's not in the system channel - then we can't create a channel via that OSN.... since it's not in the system channel.","username":"yacovm","ts":"2018-10-22T18:25:30.387Z"}
{"msg":"but as we know - an OSN can't be without a system channel","username":"yacovm","ts":"2018-10-22T18:25:47.373Z"}
{"msg":"so that means that if OSNs diverge from the system channel, it means they actually fork the system channel in a way ;) ","username":"yacovm","ts":"2018-10-22T18:26:18.344Z"}
{"msg":"so that means that if OSNs diverge from the system channel, it means they actually fork the system channel in a way if they participate in a system channel but it's not the original system channel. But - since you always add nodes incrementally it's not possible to do that","username":"yacovm","ts":"2018-10-22T18:26:18.344Z"}
{"msg":"thinking aloud - let's assume that OSNs can diverge from the system channel. \nTo do that, you need to do a channel reconfiguration that adds a node on a channel and not do a similar reconfiguration in the system channel.\nSo, the OSN you're adding - is not going to participate in the system channel, and even if it pulls the system chain, it will not participate in it since it will not find its own certificate in it (which currently in our code - we panic if that happens)","username":"yacovm","ts":"2018-10-22T18:29:28.280Z"}
{"msg":"Therefore this isn't really a question of \"how\" but is a question of \"what\" - what is the right model we want to have in Fabric? Should we even allow adding an OSN to a channel, but not to the system channel?\nIf we do - then we have the problem that I described above.\nIf we don't allow this, and all OSNs are always members of the system channel, then joining from the last config block suffices and we don't need the net-book.yaml or anything else....","username":"yacovm","ts":"2018-10-22T18:31:57.899Z"}
{"msg":" @kostas  @jyellick ","username":"yacovm","ts":"2018-10-22T18:32:05.855Z"}
{"msg":"The bottom line I'm saying is - given that continue the kafka model where a cluster is only \"1\" cluster all the time, and OSNs don't \"belong\" to different clusters - then it makes sense to always add an OSN to the system channel. \nElse, if we don't add an OSN to the system channel, we encounter all kinds of problems like inability to create channels with that OSN at all, etc. etc.","username":"yacovm","ts":"2018-10-22T18:39:02.360Z"}
{"msg":"now we're left with the \"problem\" of knowing if an OSN belongs to a chain, or doesn't belong to it. Even if all OSNs belong to the system channel, they might not belong to all chains.","username":"yacovm","ts":"2018-10-22T18:56:13.944Z"}
{"msg":"I think the pragmatic approach for now, is to just pull the latest block, look if you're in the chain, and if you're not - then just believe that OSN.","username":"yacovm","ts":"2018-10-22T18:56:50.877Z"}
{"msg":"later on in BFT we could just pull the last config block from 2f+1 OSNs, and see the truth.","username":"yacovm","ts":"2018-10-22T18:58:19.742Z"}
{"msg":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=tfzuAv9Cn69j5zXh8","username":"kostas","ts":"2018-10-22T20:03:41.975Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=tfzuAv9Cn69j5zXh8","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=tfzuAv9Cn69j5zXh8","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Up until this point, are we not saying exactly the same thing?","username":"kostas","ts":"2018-10-22T20:03:52.066Z"}
{"msg":"At any rate, my take is this: the only reasonable model we can follow _now_ is one where all OSNs have access to the system channel, i.e. they are endorsed/known/recorded by the cluster that brought up the system channel.","username":"kostas","ts":"2018-10-22T20:06:17.543Z"}
{"msg":"I fail to see how we can solve this in a contained manner, if we want to make it so that OSNs can serve an application channel, but don't have access to the system channel.","username":"kostas","ts":"2018-10-22T20:07:25.595Z"}
{"msg":"> I think the pragmatic approach for now, is to just pull the latest block, look if you're in the chain, and if you're not - then just believe that OSN.\nFor instance, I'm not sure if I get what this is proposing.","username":"kostas","ts":"2018-10-22T20:08:07.722Z"}
{"msg":"@kostas - if you have, say - 5 OSNs in the system channel but only 3 of them service channel `foo` - then you don't want all 5 to have channel `foo` in them","username":"yacovm","ts":"2018-10-22T20:20:43.989Z"}
{"msg":"Alright, so you agree that any application channel can only have a subset of the system channel OSNs as its orderers?","username":"kostas","ts":"2018-10-22T21:58:08.320Z"}
{"msg":"(As a pragmatic assumption, given how the code looks today.)","username":"kostas","ts":"2018-10-22T21:58:26.849Z"}
{"msg":"yeah","username":"yacovm","ts":"2018-10-22T22:11:47.583Z"}
{"msg":"> mind elaborating a bit?\n@guoger The process when an ORDERER_TRANSACTION is encountered (ie a chain creation) \n\n1) \"GetOrCreate\" the new ledger dir\n2) Append the genesis block to the application channel\n3) Append the channel creation block to the orderer system channel\n\nIf the process is interrupted, then (1) is idempotent, so no harm done.  We may detect if (2) has been done if the chain is of length == 1.  And (3) completing implies the block was successfully committed.","username":"jyellick","ts":"2018-10-23T01:21:43.679Z"}
{"msg":"> At any rate, my take is this: the only reasonable model we can follow _now_ is one where all OSNs have access to the system channel, i.e. they are endorsed/known/recorded by the cluster that brought up the system channel.\n+1","username":"jyellick","ts":"2018-10-23T01:23:22.326Z"}
{"msg":"do we actually rely on the synchronous behavior of `WaitReady` anywhere? what if we just error out if a chain is not ready (not started, stopped, catching up) cc @kostas ","username":"guoger","ts":"2018-10-23T03:46:52.158Z"}
{"msg":"do we actually (plan to) rely on the synchronous behavior of `WaitReady` anywhere? what if we just error out if a chain is not ready (not started, stopped, catching up) cc @kostas ","username":"guoger","ts":"2018-10-23T03:46:52.158Z"}
{"msg":"That seems reasonable. Ofc the description on that method should change.","username":"kostas","ts":"2018-10-23T04:10:55.459Z"}
{"msg":" @guoger heads up - I changed https://gerrit.hyperledger.org/r/#/c/27055/ slightly - I removed a parameter from the `newPuller` method - you don't need the consenters anymore, as I made it grab the endpoints straight from the orderer endpoints of the config block.","username":"yacovm","ts":"2018-10-24T20:30:10.934Z"}
{"msg":"@yacovm are you going to rebase rest of your stack?","username":"guoger","ts":"2018-10-25T03:11:00.503Z"}
{"msg":"Uh... Can you just do it from gerrit @guoger ?","username":"yacovm","ts":"2018-10-25T04:55:50.390Z"}
{"msg":"I can do it when i get to the office ","username":"yacovm","ts":"2018-10-25T04:56:09.792Z"}
{"msg":"@yacovm hmmm... is https://gerrit.hyperledger.org/r/c/27173/ supposed to be at the tail of your stack? i might missed something.. could you give it another push when you are available?","username":"guoger","ts":"2018-10-25T05:41:49.854Z"}
{"msg":"in [update](https://gerrit.hyperledger.org/r/c/27173/4..5/orderer/common/cluster/replication.go), you were trying to extract a func, however I don't see the extracted func anywhere...","username":"guoger","ts":"2018-10-25T05:56:52.957Z"}
{"msg":"in [this update](https://gerrit.hyperledger.org/r/c/27173/4..5/orderer/common/cluster/replication.go), you were trying to extract a func, however I don't see the extracted func anywhere...","username":"guoger","ts":"2018-10-25T05:56:52.957Z"}
{"msg":"It's the end of my stack but you don't need it","username":"yacovm","ts":"2018-10-25T06:16:31.184Z"}
{"msg":"you can just use the one below","username":"yacovm","ts":"2018-10-25T06:16:35.569Z"}
{"msg":"but you can also rebase on top of it","username":"yacovm","ts":"2018-10-25T06:16:39.965Z"}
{"msg":"> I don't see the extracted func anywhere... \nI am not using it yet","username":"yacovm","ts":"2018-10-25T06:17:01.146Z"}
{"msg":"will use it in the future ","username":"yacovm","ts":"2018-10-25T06:17:05.408Z"}
{"msg":"Has joined the channel.","username":"cagdast","ts":"2018-10-25T07:50:13.450Z","type":"uj"}
{"msg":"can someone paste webex link here?","username":"guoger","ts":"2018-10-29T12:32:38.841Z"}
{"msg":"are we not having scrum today? @kostas ","username":"guoger","ts":"2018-10-29T12:34:20.946Z"}
{"msg":"Sorry guys, car trouble.","username":"kostas","ts":"2018-10-29T12:40:45.058Z"}
{"msg":"Joining now.","username":"kostas","ts":"2018-10-29T12:40:59.613Z"}
{"msg":"@guoger: https://ibm.webex.com/meet/kchrist","username":"kostas","ts":"2018-10-29T12:41:51.661Z"}
{"msg":"Yacov and Artem won't be able to attend today, so it's @adarshsaraf123, @guoger, and myself.","username":"kostas","ts":"2018-10-29T12:42:23.670Z"}
{"msg":"Has joined the channel.","username":"john-philipp","ts":"2018-10-29T17:07:32.385Z","type":"uj"}
{"msg":"@kostas  : \n1) Anything interesting in the call? \n2) I addressed comments in https://gerrit.hyperledger.org/r/#/c/27138/ , may i get a +2 pretty please? \n3) Created https://gerrit.hyperledger.org/r/#/c/27262/ to address the your CR comments to the +2ed / merged CRs \n","username":"yacovm","ts":"2018-10-29T18:41:32.114Z"}
{"msg":"@yacovm: 1. No, we didn't end up having it. 2. Done. 3. Thanks!","username":"kostas","ts":"2018-10-29T18:51:52.662Z"}
{"msg":"Will need an extra pair of eyes or two @ Adarsh's CR: https://gerrit.hyperledger.org/r/c/27117/ and Artem's CRs: https://gerrit.hyperledger.org/r/c/27238/ https://gerrit.hyperledger.org/r/c/27163/ +/- 1/2 accordingly.","username":"kostas","ts":"2018-10-31T14:06:46.917Z"}
{"msg":"Will need an extra pair of eyes or two @ Adarsh's CR: https://gerrit.hyperledger.org/r/c/27117/ and Artem's CRs: https://gerrit.hyperledger.org/r/c/27238/ https://gerrit.hyperledger.org/r/c/27163/ — +/- 1/2 accordingly.","username":"kostas","ts":"2018-10-31T14:06:46.917Z"}
{"msg":"https://jira.hyperledger.org/browse/FAB-11937","username":"kostas","ts":"2018-10-31T17:50:46.518Z"}
{"msg":"FYI https://jira.hyperledger.org/browse/FAB-11937 - Let's start thinking about the metrics we'd like to expose in the `etcdraft` package. Things that will give us a quick snapshot of what's going in the cluster/channel.","username":"kostas","ts":"2018-10-31T17:50:46.518Z"}
{"msg":"Other than a manual check against the acceptance criteria listed above, are we missing anything else before we mark the \"multiple channels\" story (https://jira.hyperledger.org/browse/FAB-11591) as done?","username":"kostas","ts":"2018-11-01T00:48:41.117Z"}
{"msg":"just wanna confirm this: even though already support running user channel on a subset of OSNs, it is not possible w/o type B config, because newly created channels always inherit configurations from system channel, which contains a complete list of OSNs. In another word, we have to _explicitly remove_ an OSN from a user channel, and that requires type B. is this accurate?","username":"guoger","ts":"2018-11-01T08:01:56.972Z"}
{"msg":"just wanna confirm this: even though we already support running user channel on a subset of OSNs, it is not possible w/o type B config, because newly created channels always inherit configurations from system channel, which contains a complete list of OSNs. In another word, we have to _explicitly remove_ an OSN from a user channel, and that requires type B. is this accurate?","username":"guoger","ts":"2018-11-01T08:01:56.972Z"}
{"msg":"that's a good point :( ","username":"yacovm","ts":"2018-11-01T08:16:44.602Z"}
{"msg":"@jyellick  @kostas  your opinion?","username":"yacovm","ts":"2018-11-01T08:16:57.412Z"}
{"msg":"I think this is accurate. And this may make the whole \"each channel on a different subset\" idea a bit problematic.","username":"kostas","ts":"2018-11-01T12:26:03.223Z"}
{"msg":"Let's see if Jason confirms that this is indeed the case, and if it is, whether there's a way to alter the channel creation path so that we can achieve what we want.","username":"kostas","ts":"2018-11-01T12:27:52.253Z"}
{"msg":"@kostas @guoger I think I'm missing what \"type B config\" means.","username":"jyellick","ts":"2018-11-01T14:11:58.234Z"}
{"msg":"A configuration update that modifies the consenters.","username":"kostas","ts":"2018-11-01T14:12:46.048Z"}
{"msg":"(Essentially.)","username":"kostas","ts":"2018-11-01T14:12:51.089Z"}
{"msg":"I would however indicate/mention that it is entirely possible to construct a new channel with a custom set of orderers.  Yes, the ephemeral configuration which is the precursor to the genesis block inherits everything from the orderer system channel, but the 'channel creation tx' is an channel config update against that ephemeral config, and you may modify any elements which are mutable (including the orderer addresses).","username":"jyellick","ts":"2018-11-01T14:13:08.509Z"}
{"msg":"Ah, that is great.","username":"kostas","ts":"2018-11-01T14:13:44.184Z"}
{"msg":"That means we can have a system channel with A, B, C, D, E as its consenters.","username":"kostas","ts":"2018-11-01T14:13:58.010Z"}
{"msg":"And channel foo is created with A, C, E only correct?","username":"kostas","ts":"2018-11-01T14:14:11.770Z"}
{"msg":"(It's a modification over what the system channel consenter set reads.)","username":"kostas","ts":"2018-11-01T14:14:31.274Z"}
{"msg":"Correct.  However, I would note, by default, to modify the set of orderers/consenters will require that there be signatures included on the creation tx which satisfy the /Channel/Orderer/Admins policy (with a single org, this would be the signature of an orderer admin).","username":"jyellick","ts":"2018-11-01T14:15:11.021Z"}
{"msg":"Correct.  However, I would note, by default, to modify the set of orderers/consenters will require that there be signatures included on the creation tx which satisfy the /Channel/Orderer/Admins policy (with a single orderer org, this would be the signature of an orderer admin).","username":"jyellick","ts":"2018-11-01T14:15:11.021Z"}
{"msg":"@kostas @jyellick so, just to confirm. if we create a new user channel with consenters set which is a subset of consenters in system channel, at this tx signature conforms `/Channel/Orderer/Admins` policy new channel configuration will be updated to include only declared subset.. am I right?\n\nI.e. if system channel contains as @kostas mentioned A, B, C, D, E and new channel declares to have only B, C, E signed with orderer admin the consenters set will be automatically updated?","username":"C0rWin","ts":"2018-11-01T14:46:54.108Z"}
{"msg":"Correct. The config in the genesis block of the new channel is the post-image of applying the config update to the ephemeral config.  The ephemeral config contains all consenters, the config update may modify them.","username":"jyellick","ts":"2018-11-01T14:48:28.174Z"}
{"msg":"Let me know if this isn't the correct channel to ask this is:\n\nReading the design document you reemphasise to only ever edit one consenting node at a time, which makes sense, however, what happens when in a two-node system another consenter is registered that then never starts voting (assuming 2f + 1)?\n\nIs there a protocol level defense against this? Or is it simply a matter of any network is allowed to kill itself?\n","username":"john-philipp","ts":"2018-11-01T15:49:24.083Z"}
{"msg":"@john-philipp: There is no protocol level defense against this because that node would be byzantine.","username":"kostas","ts":"2018-11-01T17:15:07.341Z"}
{"msg":"For the particular example that you describe, we'd still be able to operate with just 2 active nodes, so long as that 3rd node was idle and wouldn't cast bad votes.","username":"kostas","ts":"2018-11-01T17:15:49.314Z"}
{"msg":"If we were to re-examine your question in a BFT setting, I'd say the answer is more or less still the same. That new node can do whatever it wants (abstain, cast bad votes, whatever) and as long as we have up to f of those nodes in, we're good. Anything beyond that, and the protocol cannot defend against it.","username":"kostas","ts":"2018-11-01T17:18:42.446Z"}
{"msg":"Let me know if that answers the question.","username":"kostas","ts":"2018-11-01T17:18:51.558Z"}
{"msg":"@kostas: Well, sort of. :)\n\nClearly I am new here, so feel free to point out any potential lack of understanding. I've put some effort into reading your design, but of course I may have missed something.\n\nIn a BFT setting we want to protect ourselves from attack surfaces requiring less than *f* players. In the two node example (assuming *2f + 1*) the third player wouldn't be able to do whatever he wants, in fact he absolutely has to play by the rules, since otherwise *f = 1*, and we'd require * n_honest >= 2(1) + 1 = 3*. But *n_honest = 2*. //\n\nWhich hopefully leads to a clearer definition of my question:\nHow are you planning to protect yourself against malicious voter creation, that is one node suggesting new voters that may not exist. And even if most nodes would have to agree to such a config change, specifically how would/could they?\n\nNow this seems like a high-level problem, but it has the potential to completely circumvent any BFT mechanisms, so I was just wondering how you are planning to address it.","username":"john-philipp","ts":"2018-11-02T09:57:16.495Z"}
{"msg":"the config change is enforced via signature checks of majority of organizations among the orderer orgs @john-philipp ","username":"yacovm","ts":"2018-11-02T10:00:41.225Z"}
{"msg":"a majority of 2 is just 2.... ","username":"yacovm","ts":"2018-11-02T10:00:49.406Z"}
{"msg":"and in case of BFT you have to start with 4","username":"yacovm","ts":"2018-11-02T10:01:10.289Z"}
{"msg":"you can't start with 2","username":"yacovm","ts":"2018-11-02T10:01:25.296Z"}
{"msg":"@yacovm : Appreciate the response. I think we're getting closer.\n\n_n=3_ was really only a small example without loss of generality.\n\nI am interested in the following:\n* Who is _allowed to propose_ a consenter addition to the existing set?\n* Based on what rules do orderer organisations _sign-off_ on a config change that introduces a new consenter?","username":"john-philipp","ts":"2018-11-02T11:48:51.623Z"}
{"msg":"By propose I mean submit config tx to the ordering cluster (... I think).","username":"john-philipp","ts":"2018-11-02T11:50:07.519Z"}
{"msg":"the admins of the existing orgs are allowed to propose a consenter addition","username":"yacovm","ts":"2018-11-02T13:16:34.539Z"}
{"msg":"the rules are flexible.... it's just a policy","username":"yacovm","ts":"2018-11-02T13:16:45.697Z"}
{"msg":"Right, I am catching up. :) There is an out-of-band communication I didn't expect. So basically, new consenter endorsement is a _manual_ step which isn't communicated through the ledger itself. I understand this better now, thanks.","username":"john-philipp","ts":"2018-11-02T13:51:24.142Z"}
{"msg":"i don't understand why this test is failing...\n```\nRunning Suite: Grpclogging Suite\n================================\nRandom Seed: 1541170356\nWill run 23 of 23 specs\n\nâ€¢â€¢â€¢â€¢â€¢\n------------------------------\nâ€¢ Failure [0.820 seconds]\nServer\n/w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/common/grpclogging/server_test.go:33\n  UnaryServerInterceptor\n  /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/common/grpclogging/server_test.go:114\n    logs request data [It]\n    /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/common/grpclogging/server_test.go:130\n\n    Expected\n        <time.Time>: 2018-11-02T14:52:38.444451365Z\n    to be ~\n        <time.Time>: 2018-11-02T14:52:38.42875931Z\n\n    /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/common/grpclogging/server_test.go:193\n------------------------------\nâ€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢\n\nSummarizing 1 Failure:\n\n[Fail] Server UnaryServerInterceptor [It] logs request data \n/w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/common/grpclogging/server_test.go:193\n\nRan 23 of 23 Specs in 10.920 seconds\nFAIL! -- 22 Passed | 1 Failed | 0 Pending | 0 Skipped\n--- FAIL: TestGrpclogging (10.92s)\nFAIL\ncoverage: 100.0% of statements\nFAIL\tgithub.com/hyperledger/fabric/common/grpclogging\t11.021s\n```\nthose two time points seem to be close to each other?","username":"guoger","ts":"2018-11-02T15:14:44.927Z"}
{"msg":"Looks like there is a flaky test ? \nhttps://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/5802/console\n","username":"yacovm","ts":"2018-11-04T20:21:45.215Z"}
{"msg":"it should be fixed by Artem's [later CR](https://gerrit.hyperledger.org/r/c/27350/4/orderer/consensus/etcdraft/chain.go#924), although maybe worth to be migrated to the [first one](https://gerrit.hyperledger.org/r/c/27163/29/orderer/consensus/etcdraft/chain.go#907)","username":"guoger","ts":"2018-11-05T02:33:32.192Z"}
{"msg":"IIUC, `ORDERER_GENERAL_TLS_ENABLED` becomes mandatory in etcdraft? cc @yacovm ","username":"guoger","ts":"2018-11-05T03:46:17.009Z"}
{"msg":"yep @guoger ","username":"yacovm","ts":"2018-11-05T10:32:12.454Z"}
{"msg":"@guoger @C0rWin @kostas  - when we create a new channel with a subset of OSNs (a subset of the system channel OSNs) - do we have code that makes an OSN that isn't in the channel, to skip adding the genesis block to its ledger?","username":"yacovm","ts":"2018-11-05T11:35:16.171Z"}
{"msg":"(I'm asking because it's easier to save my current \"dirty\" git repo and pull the latest change set and see ;) )","username":"yacovm","ts":"2018-11-05T11:36:00.836Z"}
{"msg":"(I'm asking because it's easier to ask than to save my current \"dirty\" git repo and pull the latest change set and see ;) )","username":"yacovm","ts":"2018-11-05T11:36:00.836Z"}
{"msg":"If we don't have such code we'll need it... I think. ","username":"yacovm","ts":"2018-11-05T11:36:28.837Z"}
{"msg":"and we'll also need to handle an addition of a node to a channel, when that node is already in the system channel","username":"yacovm","ts":"2018-11-05T11:36:47.517Z"}
{"msg":"no?","username":"yacovm","ts":"2018-11-05T11:36:48.527Z"}
{"msg":"i don't think so... when a new channel is created, our code makes a copy of system channel config","username":"guoger","ts":"2018-11-05T11:36:59.658Z"}
{"msg":"i don't think so... when a new channel is created, our code makes a copy of system channel config while processing the config update, and assemble the new config block (genesis block)","username":"guoger","ts":"2018-11-05T11:36:59.658Z"}
{"msg":"of course, 1 thing at a time","username":"yacovm","ts":"2018-11-05T11:37:02.489Z"}
{"msg":"just thinking out loud","username":"yacovm","ts":"2018-11-05T11:37:07.089Z"}
{"msg":"Anybody else have trouble joining the meeting?","username":"kostas","ts":"2018-11-05T13:31:38.862Z"}
{"msg":"","username":"kostas","ts":"2018-11-05T13:31:44.852Z","attachments":[{"type":"file","title":"draggingScreenshot.png","title_link":"/file-upload/oRTPLN92bK98tNcmq/draggingScreenshot.png","image_url":"/file-upload/oRTPLN92bK98tNcmq/draggingScreenshot.png","image_type":"image/png","image_size":59265,"url":"/file-upload/oRTPLN92bK98tNcmq/draggingScreenshot.png","remote":false,"fileId":"oRTPLN92bK98tNcmq","fileName":"draggingScreenshot.png"}]}
{"msg":"Let's switch to Zoom if you don't mind: https://zoom.us/j/7432937602","username":"kostas","ts":"2018-11-05T13:32:17.543Z"}
{"msg":"@adarshsaraf123 @yacovm @guoger @C0rWin ","username":"kostas","ts":"2018-11-05T13:32:36.180Z"}
{"msg":"Nevermind, we got WebEx working again, so we're switching there.","username":"kostas","ts":"2018-11-05T13:34:09.389Z"}
{"msg":"joining","username":"guoger","ts":"2018-11-05T13:38:27.815Z"}
{"msg":"I forgot to say: when you add functional tests, please update the description in https://jira.hyperledger.org/browse/FAB-6135","username":"kostas","ts":"2018-11-05T13:49:13.836Z"}
{"msg":"","username":"kostas","ts":"2018-11-05T13:49:29.502Z","attachments":[{"type":"file","title":"draggingScreenshot.png","title_link":"/file-upload/iHZjYxRzxaJ6myWJm/draggingScreenshot.png","image_url":"/file-upload/iHZjYxRzxaJ6myWJm/draggingScreenshot.png","image_type":"image/png","image_size":25515,"url":"/file-upload/iHZjYxRzxaJ6myWJm/draggingScreenshot.png","remote":false,"fileId":"iHZjYxRzxaJ6myWJm","fileName":"draggingScreenshot.png"}]}
{"msg":"> when we create a new channel with a subset of OSNs (a subset of the system channel OSNs) - do we have code that makes an OSN that isn't in the channel, to skip adding the genesis block to its ledger?","username":"kostas","ts":"2018-11-05T13:51:24.480Z"}
{"msg":"@yacovm: Good catch.","username":"kostas","ts":"2018-11-05T13:52:21.020Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=yz93a8YAYNYMBxz9c) just to make sure IIUC, @yacovm is referring to this topic, correct?","username":"guoger","ts":"2018-11-05T13:54:54.291Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=yz93a8YAYNYMBxz9c","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=yz93a8YAYNYMBxz9c","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I am not really referring to that","username":"yacovm","ts":"2018-11-05T13:57:12.699Z"}
{"msg":"you can have a custom config","username":"yacovm","ts":"2018-11-05T13:57:17.681Z"}
{"msg":"but it won't make the OSN that its certificate is *not* in the config *skip* from participating in the consensus","username":"yacovm","ts":"2018-11-05T13:57:41.370Z"}
{"msg":"and initializing the chain object....","username":"yacovm","ts":"2018-11-05T13:57:46.543Z"}
{"msg":"as i said it's not blocking me *now* because i want to walk before I run :) ","username":"yacovm","ts":"2018-11-05T13:58:13.900Z"}
{"msg":"but we need to add some code... I'll open a JIRA for that","username":"yacovm","ts":"2018-11-05T13:58:29.123Z"}
{"msg":"A \"story\" JIRA - @kostas , don't worry ;) ","username":"yacovm","ts":"2018-11-05T13:58:39.356Z"}
{"msg":"Not a story! I'm gonna have a heart attack.","username":"kostas","ts":"2018-11-05T13:58:56.209Z"}
{"msg":"you said we need a story for those no?","username":"yacovm","ts":"2018-11-05T13:59:05.748Z"}
{"msg":":thinking: ","username":"yacovm","ts":"2018-11-05T13:59:09.422Z"}
{"msg":"All of these discoveries should be filed as sub-tasks under a story around \"onboarding\".","username":"kostas","ts":"2018-11-05T13:59:23.069Z"}
{"msg":"no but this is not a task, this is a story","username":"yacovm","ts":"2018-11-05T13:59:31.286Z"}
{"msg":"this is not related to onboarding IMO","username":"yacovm","ts":"2018-11-05T13:59:38.897Z"}
{"msg":"this is related to reconfiguration","username":"yacovm","ts":"2018-11-05T13:59:54.401Z"}
{"msg":"no?","username":"yacovm","ts":"2018-11-05T13:59:56.079Z"}
{"msg":"You are right actually. Reconfiguration.","username":"kostas","ts":"2018-11-05T14:00:18.872Z"}
{"msg":"if it couldn't detect its own raft id, doesn't it fail to create chain object?","username":"guoger","ts":"2018-11-05T14:09:39.391Z"}
{"msg":"if it couldn't detect its own raft id, doesn't it fail to create chain object?\n> if it couldn't detect its own raft id, doesn't it fail to create chain object?","username":"guoger","ts":"2018-11-05T14:09:39.391Z"}
{"msg":"if it couldn't detect its own raft id, doesn't it fail to create chain object?\n>but it won't make the OSN that its certificate is *not* in the config *skip* from participating in the consensus","username":"guoger","ts":"2018-11-05T14:09:39.391Z"}
{"msg":"if it couldn't detect its own raft id, doesn't it fail to create chain object? cc @yacovm \n>but it won't make the OSN that its certificate is *not* in the config *skip* from participating in the consensus","username":"guoger","ts":"2018-11-05T14:09:39.391Z"}
{"msg":"that's part of the problem @guoger ","username":"yacovm","ts":"2018-11-05T14:15:02.142Z"}
{"msg":"it panics....","username":"yacovm","ts":"2018-11-05T14:15:04.009Z"}
{"msg":"but we don't want to get there","username":"yacovm","ts":"2018-11-05T14:15:09.251Z"}
{"msg":"we don't want the chain support object to be created","username":"yacovm","ts":"2018-11-05T14:15:18.309Z"}
{"msg":"I'll open a JIRA today and tag the relevant people","username":"yacovm","ts":"2018-11-05T14:24:19.788Z"}
{"msg":"@tock: Can you expand a bit on the set of scripts you're working on for those tests against the acceptance criteria? Artem touched on it briefly during our scrum today.","username":"kostas","ts":"2018-11-05T19:31:15.638Z"}
{"msg":"Has joined the channel.","username":"tock","ts":"2018-11-05T19:31:15.911Z","type":"uj"}
{"msg":"as I was replying to @jyellick in a CR comment, and I think this point is worth to be called out here:\n> we should not suggest users to alter raft-related config options (at least for now), i.e. TickInterval, HeartbeatTimeout, ElectionTimeout, etc\nThey are put in channel config to enforce consistency across a channel, because difference of ticks would result in unstable cluster otherwise. However, we could *not* alter them while node is up and running, due to the limitation of etcd/raft lib. Change of these configs will take effect on next boot, however we end up with an unstable cluster if those nodes are not rebooted synchronously","username":"guoger","ts":"2018-11-06T02:28:11.483Z"}
{"msg":"cc @kostas should we explicitly check against those configurations?","username":"guoger","ts":"2018-11-06T02:29:03.379Z"}
{"msg":"Has joined the channel.","username":"awes0menessInc","ts":"2018-11-06T03:39:09.295Z","type":"uj"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=2aFHquoGS4MSCbXZG) @kostas First, I am augmenting the fabric-samples/first-network to include an etcd/raft orderer option. I will keep this sample \"simple\" and support only a single orderer. Next, I plan to take this sample and turn it into a more extensive example: 3 raft orderers, multiple channels, injecting transactions, stopping an orderer, injecting transactions, restarting an orderer, checking that it caught up. Not sure that this fits to the scope of fabric-samples thought. We'll have to think where to put it. Right now in remains in my private repo until further decision.","username":"tock","ts":"2018-11-06T07:18:04.239Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=2aFHquoGS4MSCbXZG","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=2aFHquoGS4MSCbXZG","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=2aFHquoGS4MSCbXZG) @kostas First, I am augmenting the fabric-samples/first-network to include an etcd/raft orderer option. I will keep this sample \"simple\" and support only a single orderer. Next, I plan to take this sample and turn it into a more extensive example/test: 3 raft orderers, multiple channels, injecting transactions, stopping an orderer, injecting transactions, restarting an orderer, checking that it caught up. Not sure that this fits to the scope of fabric-samples thought. We'll have to think where to put it. Right now in remains in my private repo until further decision.","username":"tock","ts":"2018-11-06T07:18:04.239Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=2aFHquoGS4MSCbXZG","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=2aFHquoGS4MSCbXZG","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@tock maybe you wanna take a look at these two CRs? I think they captured part of the scenario you described? https://gerrit.hyperledger.org/r/c/27249/7 & https://gerrit.hyperledger.org/r/c/27330/3","username":"guoger","ts":"2018-11-06T07:53:53.633Z"}
{"msg":"@guoger regarding altering the ticks, etc. - i think for now it's good enough documenting that users not do this without off-band collaboration and proper maintenance ","username":"yacovm","ts":"2018-11-06T08:16:57.666Z"}
{"msg":"Has joined the channel.","username":"kisna","ts":"2018-11-06T18:48:46.200Z","type":"uj"}
{"msg":"hello, trying to customize an e2e test in Fabric 1.3-rc1 but orderer keeps failing\n orderer still cannot find e2e-orderer-syschan?\n\nand cli keeps searching for Attempting to fetch system channel 'e2e-orderer-syschan' ..XXX secs\nor an orderer detailed setup/documentation? \n\n","username":"kisna","ts":"2018-11-06T18:50:10.571Z"}
{"msg":"\n\ndid re generate crypto keys certs and the tx blocks successfully, also inspected them that all domains are correctly updated\nquestion is, how do I verify that the default channels like e2e-orderer-syschan are created in the orderer?\n\n`../../.build/bin/cryptogen generate --config=crypto-config.yaml\n../../.build/bin/configtxgen -profile TwoOrgsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block\nexport CHANNEL_NAME=custom_domain_channel && ../../.build/bin/configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID $CHANNEL_NAME\n.. anchor peer .tx files\n` \n\n../../.build/bin/configtxgen -channelID custom_channel -outputBlock custom_channel_genesisblock.pb -inspectBlock custom_channel_genesisblock.pb -profile TwoOrgsOrdererGenesis\n\nalso returns all MSPs, orderers properly, looks like orderer is not coming up fine, *i.e., their system channels are not and I don't know how to investigate this*","username":"kisna","ts":"2018-11-06T18:50:58.789Z"}
{"msg":"\ndid re generate crypto keys certs and the tx blocks successfully, also inspected them that all domains are correctly updated\nquestion is, how do I verify that the default channels like e2e-orderer-syschan are created in the orderer?\n\n`../../.build/bin/cryptogen generate --config=crypto-config.yaml\n../../.build/bin/configtxgen -profile TwoOrgsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block\nexport CHANNEL_NAME=custom_domain_channel && ../../.build/bin/configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID $CHANNEL_NAME\n.. anchor peer .tx files\n` \n\n../../.build/bin/configtxgen -channelID custom_channel -outputBlock custom_channel_genesisblock.pb -inspectBlock custom_channel_genesisblock.pb -profile TwoOrgsOrdererGenesis\n\nalso returns all MSPs, orderers properly, looks like orderer is not coming up fine, *i.e., their system channels are not and I don't know how to investigate this*","username":"kisna","ts":"2018-11-06T18:50:58.789Z"}
{"msg":"\ndid re generate crypto keys certs and the tx blocks successfully, also inspected them that all domains are correctly updated\nquestion is, how do I verify that the default channels like e2e-orderer-syschan are created in the orderer?\n\n`../../.build/bin/cryptogen generate --config=crypto-config.yaml\n../../.build/bin/configtxgen -profile TwoOrgsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block\nexport CHANNEL_NAME=custom_domain_channel && ../../.build/bin/configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID $CHANNEL_NAME\n.. anchor peer .tx files\n` \n\n../../.build/bin/configtxgen -channelID custom_channel -outputBlock custom_channel_genesisblock.pb -inspectBlock custom_channel_genesisblock.pb -profile TwoOrgsOrdererGenesis\n\nalso returns all MSPs, orderers properly, looks like orderer is not coming up fine, *i.e., their system channels are not and I don't know how to investigate this*","username":"kisna","ts":"2018-11-06T18:50:58.789Z"}
{"msg":"kisna","username":"kostas","ts":"2018-11-06T19:21:04.239Z","type":"user-muted"}
{"msg":"When you get all get chance, do give a look at Adarsh's and Artem's CRs please.","username":"kostas","ts":"2018-11-06T19:24:47.680Z"}
{"msg":"Has left the channel.","username":"kisna","ts":"2018-11-06T19:49:25.677Z","type":"ul"}
{"msg":"Raft-related integration test failure on this one: https://gerrit.hyperledger.org/r/c/27117/","username":"kostas","ts":"2018-11-07T02:01:55.321Z"}
{"msg":"``` [Fail] EndToEnd Crash Fault Tolerance when orderer stops and restarts [It] keeps network up and running \n17:44:51 /w/workspace/fabric-verify-integration-tests-x86_64/gopath/src/github.com/hyperledger/fabric/integration/e2e/e2e_test.go:318\n17:44:51 \n17:44:51 [Fail] EndToEnd basic single node etcdraft network with 2 orgs and 2 channels [It] executes a basic etcdraft network with 2 orgs and 2 channels ```","username":"kostas","ts":"2018-11-07T02:01:58.061Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=H669emNSe4Xso2q7R) @kostas Working on it. Can't nail down the cause yet.","username":"adarshsaraf123","ts":"2018-11-07T08:01:51.203Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=H669emNSe4Xso2q7R","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=H669emNSe4Xso2q7R","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Has joined the channel.","username":"enriquebusti","ts":"2018-11-07T12:01:39.134Z","type":"uj"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=sno42hHksye7xf5Dh) @kostas I've reviewed @adrash work and have few concerns, provided my comments in CR.","username":"C0rWin","ts":"2018-11-07T17:00:01.463Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=sno42hHksye7xf5Dh","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=sno42hHksye7xf5Dh","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@C0rWin: Thanks for taking a look! Fairly certain that the first comment is on making that channel instead of draining it; not the parent method. As for the other code block - Adarsh and I were discussing about it earlier today before the review; this is how we prevent ourselves from reading from `submitC`. Let's get Adarsh to chime in on the CR though — perhaps there is something that we've missed there.","username":"kostas","ts":"2018-11-07T19:23:14.671Z"}
{"msg":"@C0rWin: Thanks for taking a look! ~Fairly~ Reasonably certain that the first comment is on making that channel instead of draining it; not the parent method. As for the other code block - Adarsh and I were discussing about it earlier today before the review; this is how we prevent ourselves from reading from `submitC`. Let's get Adarsh to chime in on the CR though — perhaps there is something that we've missed there.","username":"kostas","ts":"2018-11-07T19:23:14.671Z"}
{"msg":"@C0rWin: Thanks for taking a look! ~Fairly~ Reasonably certain that the first comment is on making that channel instead of draining it; not the parent method. As for the other code block, that gave me pause as well and in fact Adarsh and I were discussing about it earlier today before the review; this is how we prevent ourselves from reading from `submitC`. Let's get Adarsh to chime in on the CR though — perhaps there is something that we've missed there.","username":"kostas","ts":"2018-11-07T19:23:14.671Z"}
{"msg":"> his is how we prevent ourselves from reading from `submitC`\n\nI'm not following here, didn't we decouple next block and block commit to being able to parallelize consenting on block and block commit at first place?","username":"C0rWin","ts":"2018-11-07T23:29:35.967Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=PggP6HKCEMuA3Zttv) @kostas Thanks Kostas. The first one is indeed a comment on making that channel instead of draining it. I left the comment in since earlier the same concern had been raised.","username":"adarshsaraf123","ts":"2018-11-08T04:31:52.911Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=PggP6HKCEMuA3Zttv","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=PggP6HKCEMuA3Zttv","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=PACsTQbD9ZyszP2HY) @C0rWin So the thing is that we can only pipeline the creation and writing of normal blocks. When it comes to config blocks, we must wait for the write of the config block (which also leads to the config change being applied). If we do not do this we end up processing the future txns at an older config sequence. To clarify this further, consider the following scenario:\n1. Current `batchsize` is 20. ","username":"adarshsaraf123","ts":"2018-11-08T04:41:37.926Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=PACsTQbD9ZyszP2HY","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=PACsTQbD9ZyszP2HY","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=PACsTQbD9ZyszP2HY) @C0rWin So the thing is that we can only pipeline the creation and writing of normal blocks. When it comes to config blocks, we must wait for the write of the config block (which also leads to the config change being applied). If we do not do this we end up processing the future txns at an older config sequence. To clarify this further, consider the following scenario:\n1. Current `batchsize` is 20. \n2. A config txn that changes the `batchsize` to 10 arrives and we create the config block and do not wait for its write.\n3. We create the next normal block with 20 txns since the config change has been applied. \nIn this scenario, if we look at the ledger, then the normal block after the config block is incorrect since it does not adhere to the new configuration.  ","username":"adarshsaraf123","ts":"2018-11-08T04:41:37.926Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=PACsTQbD9ZyszP2HY","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=PACsTQbD9ZyszP2HY","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@C0rWin Just curious about what motivated this CR\nhttps://gerrit.hyperledger.org/r/#/c/27372/","username":"adarshsaraf123","ts":"2018-11-08T06:15:59.287Z"}
{"msg":"@adarshsaraf123 that is to mitigate flaky tests in case of slow IO","username":"guoger","ts":"2018-11-08T06:27:02.999Z"}
{"msg":"Thanks @guoger ","username":"adarshsaraf123","ts":"2018-11-08T06:27:31.541Z"}
{"msg":"@adarshsaraf123 @guoger thanks for explanations. though I think this needs to be rebased at first place regardless to comments otherwise it will be conflicting with rest of the stack of commits we have out there.","username":"C0rWin","ts":"2018-11-08T09:14:34.252Z"}
{"msg":"Sure @C0rWin I will work on the rebasing later in the day. I saw that [this CR](https://gerrit.hyperledger.org/r/#/c/27350/) had a -1 in VerifyBuild and that is why held out the rebasing for future. I will do the rebasing once the CRs a bit stable. ","username":"adarshsaraf123","ts":"2018-11-08T09:20:14.801Z"}
{"msg":"Sure @C0rWin I will work on the rebasing later in the day. I saw that [this CR](https://gerrit.hyperledger.org/r/#/c/27350/) had a -1 in VerifyBuild and that is why held out the rebasing for future. I will do the rebasing once the CRs are a bit stable. ","username":"adarshsaraf123","ts":"2018-11-08T09:20:14.801Z"}
{"msg":"As best as I can tell, everything up until this point is merge-able: https://gerrit.hyperledger.org/r/c/27349/","username":"kostas","ts":"2018-11-08T15:14:11.987Z"}
{"msg":"If you disagree, as they say in American weddings in the movies, speak now or forever hold your silence.","username":"kostas","ts":"2018-11-08T15:14:39.061Z"}
{"msg":"(Otherwise, let's get that pending stack down.)","username":"kostas","ts":"2018-11-08T15:14:56.916Z"}
{"msg":"I will review now the snapshotting part ","username":"C0rWin","ts":"2018-11-08T15:17:56.749Z"}
{"msg":"just done w/ first one in a stack (re: WAL)","username":"C0rWin","ts":"2018-11-08T15:18:18.322Z"}
{"msg":"and we can always address comments/concerns post factum ","username":"C0rWin","ts":"2018-11-08T15:18:59.529Z"}
{"msg":"IMO, it's better to have it in to reduce overhead of perpetual daily rebasing","username":"C0rWin","ts":"2018-11-08T15:20:10.989Z"}
{"msg":"I concur. We've been more-or-less rolling like this for a few weeks now.","username":"kostas","ts":"2018-11-08T15:20:45.612Z"}
{"msg":"of course unless there is major issue","username":"C0rWin","ts":"2018-11-08T15:20:49.279Z"}
{"msg":"I am also in the midst of reviewing Artem's type B config changes. Can we please defer that for merging?","username":"adarshsaraf123","ts":"2018-11-08T20:05:34.813Z"}
{"msg":"@kostas ^^","username":"adarshsaraf123","ts":"2018-11-08T20:06:06.314Z"}
{"msg":"Sure thing. Thanks for taking a look!","username":"kostas","ts":"2018-11-08T20:06:26.486Z"}
{"msg":"Whoops: https://twitter.com/copyconstruct/status/1061818753925578753","username":"kostas","ts":"2018-11-12T14:51:27.018Z"}
{"msg":"It'll be fascinating to see whether we agree with this realization a few months down the line as well.","username":"kostas","ts":"2018-11-12T14:51:47.723Z"}
{"msg":"Well, we are not implementing Raft neither Paxos, we just integrating it into Fabric. But in general that’s true, the fact that it’s simplier for human to understand doesn’t mean it’s simply to implement.","username":"C0rWin","ts":"2018-11-12T22:10:01.522Z"}
{"msg":"CockroachDB is not implementing Raft either. They're using etcd/raft.","username":"kostas","ts":"2018-11-12T22:20:06.253Z"}
{"msg":"oh, from this perspective we only started :) ... there are many interesting Raft specific revelations underway, I'm sure...","username":"C0rWin","ts":"2018-11-13T07:20:06.360Z"}
{"msg":"Heya, I was hoping to debug the ordering service to get a better understanding of the internal message flow. Is there some sort of trick? I tried in goland and vscode. Error is .debug_frame section missing. Any pointers?\n\nExec summary:\n* I can't debug fabric.\n* How do I debug fabric? :)","username":"john-philipp","ts":"2018-11-14T11:09:07.269Z"}
{"msg":"Heya, I was hoping to debug the ordering service to get a better understanding of the internal message flow. Is there some sort of trick? I tried in goland and vscode. Error is .debug_frame section missing. Any pointers?\n\nExec summary:\n* I can't debug the ordering service.\n* How do I debug the ordering service? :)","username":"john-philipp","ts":"2018-11-14T11:09:07.269Z"}
{"msg":"@john-philipp Because fabric uses golang plugins the debuggers can have some troubles.  My recollection is that the development version of go v1.12 may get you past some of these, but I no promises.  In general, I've found go debuggers to be of limited value.","username":"jyellick","ts":"2018-11-14T15:57:16.430Z"}
{"msg":"@jyellick Yes, I am trying to installing 1.12 now, let's see how that goes. Thanks.","username":"john-philipp","ts":"2018-11-14T16:03:19.506Z"}
{"msg":"you mean debug as in use the debugger? it's multi-threaded and distributed (i.e - etcdraft) - not exactly the ideal code to use a debugger on","username":"yacovm","ts":"2018-11-14T16:09:28.612Z"}
{"msg":"maybe you mean to debug a specific section or function?","username":"yacovm","ts":"2018-11-14T16:10:07.820Z"}
{"msg":"@yacovm I was hoping to use a debugger yes. Specific sections or functions would be acceptable. I come from Python I am beginning to understand that I may have been spoiled. :/\nBasically, I am looking to set up an effective dev environment. But by the above, I do have to ask, what *do* you use? Do you debug at all?","username":"john-philipp","ts":"2018-11-14T16:15:14.654Z"}
{"msg":"I use `fmt.Println`","username":"yacovm","ts":"2018-11-14T16:15:31.505Z"}
{"msg":"... I see. I was hoping to avoid as much.","username":"john-philipp","ts":"2018-11-14T16:15:53.524Z"}
{"msg":"Incidentally, I do seem to have some debugging capability on the ordering service now. :]","username":"john-philipp","ts":"2018-11-14T16:34:00.538Z"}
{"msg":"Has joined the channel.","username":"magar36","ts":"2018-11-15T17:28:36.442Z","type":"uj"}
{"msg":"Hello Everyone! \nI have been trying to understand the way grpc over http2 works under the hood in fabric. What I am trying to find out is how exactly does the orderer disseminate the block to the leader peers and I am talking from networking perspective. \nSo we know that there is multiplexing supported in http2. In other words, the client (say peer) uses a source port to connect to the destination port (say orderer). Each source and destination port pairing identifies a separate virtual connection, allowing multiple connections to share one physical network connection - meaning multiple parallel requests can be sent over the same persistent connection. Now that we have the physical connection established, how does the destination send any information back to the source that is not the part of the request? Mind that the block that gets sent by the orderer to the peers is not a server push mechanism and it gets sent only when the block is ready to be sent. In other words, it is not something that orderer sends to the peers as part of a request.\nI have taken balance-transfer as an example from the fabric-samples project to take the packet capture and analyze it through wireshark. Since the entire communication uses grpcs, I am unable to get the exact information as to when is the block being sent by the orderer and corresponding header/data details to understand more.\nIs there a way that the balance-transfer example can be modified to use grpc instead of grpcs so packet capture can make things much easier?","username":"magar36","ts":"2018-11-15T17:48:49.933Z"}
{"msg":"I do hope that the question makes some sense to atleast someone or else let me know. I would really appreciate any ideas here.","username":"magar36","ts":"2018-11-15T17:49:38.622Z"}
{"msg":"@magar36 This is a better question for #fabric-orderer I will cross-post it there for you.","username":"jyellick","ts":"2018-11-15T17:50:14.897Z"}
{"msg":"thank you","username":"magar36","ts":"2018-11-15T17:51:30.944Z"}
{"msg":"Has joined the channel.","username":"Skprog","ts":"2018-11-16T03:12:27.940Z","type":"uj"}
{"msg":"Has joined the channel.","username":"BellaAdams","ts":"2018-11-17T00:46:06.413Z","type":"uj"}
{"msg":"in etcdraft, `Step` is a super frequent unary grpc call, and with [commit I868f1e13](https://github.com/hyperledger/fabric/commit/91e0b0b9dde01b52914e13ed1375ad1359fdc30b), log is overwhelmed with `step` messages. is it possible to suppress an interceptor for a particular api? cc @sykesm @kostas ","username":"guoger","ts":"2018-11-19T04:23:22.040Z"}
{"msg":"webex is still loading...","username":"guoger","ts":"2018-11-19T13:30:44.740Z"}
{"msg":"Let me look. Thanks for the heads up.","username":"kostas","ts":"2018-11-19T15:12:10.749Z"}
{"msg":"Has joined the channel.","username":"huxiangdong","ts":"2018-11-20T00:33:46.677Z","type":"uj"}
{"msg":"I assume no sync today... Happy thanksgiving :-)","username":"tock","ts":"2018-11-22T13:31:13.387Z"}
{"msg":"Correct, no participation from me anyway, as noted in Monday's scrum. And thanks!","username":"kostas","ts":"2018-11-22T14:23:31.664Z"}
{"msg":"Has joined the channel.","username":"Unni_1994","ts":"2018-11-23T10:31:04.227Z","type":"uj"}
{"msg":"https://gerrit.hyperledger.org/r/c/27163/","username":"kostas","ts":"2018-11-26T19:14:09.843Z"}
{"msg":"https://gerrit.hyperledger.org/r/c/27350/","username":"kostas","ts":"2018-11-26T19:14:12.096Z"}
{"msg":"These ones are missing a +2 and they'll allow us to get 8 CRs in today.","username":"kostas","ts":"2018-11-26T19:15:13.956Z"}
{"msg":"These ones are missing a +2 and they'll allow us to get 8 CRs in.","username":"kostas","ts":"2018-11-26T19:15:13.956Z"}
{"msg":"I'd ask in #fabric-pr-review but they require domain knowledge to get in.","username":"kostas","ts":"2018-11-26T19:15:30.784Z"}
{"msg":"@yacovm I know you're swamped, but have a look when you get a chance? (These are Artem's CRs so he can't +2.)","username":"kostas","ts":"2018-11-26T19:16:13.550Z"}
{"msg":"@yacovm I know you're swamped, but have a look whenever you get a chance? (These are Artem's CRs so he can't +2.)","username":"kostas","ts":"2018-11-26T19:16:13.550Z"}
{"msg":"I can take a look tomorrow :) ","username":"yacovm","ts":"2018-11-26T19:34:31.791Z"}
{"msg":"oh hmmm","username":"yacovm","ts":"2018-11-26T19:34:43.134Z"}
{"msg":"I merged some. will CR the 2nd one tomorrow","username":"yacovm","ts":"2018-11-26T19:48:47.132Z"}
{"msg":"Color me confused on this one.","username":"kostas","ts":"2018-11-27T01:32:16.506Z"}
{"msg":"The Viper documentation reads:","username":"kostas","ts":"2018-11-27T01:32:24.214Z"}
{"msg":"```Viper uses the following precedence order. Each item takes precedence over the item below it:\n- explicit call to Set\n- flag\n- env\n- config\n- key/value store\n- default```","username":"kostas","ts":"2018-11-27T01:32:47.502Z"}
{"msg":"Notice how env takes precedence over config.","username":"kostas","ts":"2018-11-27T01:33:12.569Z"}
{"msg":"It is my expectation then, that:","username":"kostas","ts":"2018-11-27T01:33:39.357Z"}
{"msg":"1. If I remove, say, the `Consensus` section from the `orderer.yaml`: https://github.com/hyperledger/fabric/blob/69a34181ce4cb8eb890509ec9de3dbb8e77df6e4/sampleconfig/orderer.yaml#L311..L321","username":"kostas","ts":"2018-11-27T01:34:23.529Z"}
{"msg":"1. If I remove, say, the `Cluster` section from `orderer.yaml`: https://github.com/hyperledger/fabric/blob/master/sampleconfig/orderer.yaml#L54..L79","username":"kostas","ts":"2018-11-27T01:34:23.529Z"}
{"msg":"2. But keep the backing data structure: https://github.com/hyperledger/fabric/blob/69a34181ce4cb8eb890509ec9de3dbb8e77df6e4/orderer/common/localconfig/config.go#L46","username":"kostas","ts":"2018-11-27T01:35:42.708Z"}
{"msg":"3. And set those configuration options via ENV vars: https://github.com/hyperledger/fabric/blob/69a34181ce4cb8eb890509ec9de3dbb8e77df6e4/orderer/common/server/etcdraft_test.go#L80..L82","username":"kostas","ts":"2018-11-27T01:36:32.623Z"}
{"msg":"3. And set those configuration options via environment variables: https://github.com/hyperledger/fabric/blob/69a34181ce4cb8eb890509ec9de3dbb8e77df6e4/orderer/common/server/etcdraft_test.go#L80..L82","username":"kostas","ts":"2018-11-27T01:36:32.623Z"}
{"msg":"I should still expect the `Cluster` field in the backing data structure to be populated with the ENV var values when loading the configuration: https://github.com/hyperledger/fabric/blob/69a34181ce4cb8eb890509ec9de3dbb8e77df6e4/orderer/common/server/main.go#L78","username":"kostas","ts":"2018-11-27T01:38:56.134Z"}
{"msg":"However, that is not the case.","username":"kostas","ts":"2018-11-27T01:39:02.669Z"}
{"msg":"All `Cluster` field-related values come up with their nil value defaults:","username":"kostas","ts":"2018-11-27T01:42:07.760Z"}
{"msg":"`Cluster:{RootCAs:[] ClientCertificate: ClientPrivateKey: DialTimeout:0s RPCTimeout:0s ReplicationBufferSize:0 ReplicationPullTimeout:0s ReplicationRetryTimeout:0s}`","username":"kostas","ts":"2018-11-27T01:42:10.160Z"}
{"msg":"Ah, I know what's going on.","username":"kostas","ts":"2018-11-27T01:51:54.676Z"}
{"msg":"It's the lack of `Cluster` defaults [here](https://github.com/hyperledger/fabric/blob/69a34181ce4cb8eb890509ec9de3dbb8e77df6e4/orderer/common/localconfig/config.go#L209) that's preventing Steps 1-2-3 above from working as expected.","username":"kostas","ts":"2018-11-27T01:54:53.750Z"}
{"msg":"Still, even if `Cluster` can be addressed this way, `Consensus` cannot (because it's an `interface{}`).","username":"kostas","ts":"2018-11-27T01:56:08.923Z"}
{"msg":"Still, even if `Cluster` can be addressed this way, `Consensus` cannot, because it's an `interface{}`, so there's really no default value.","username":"kostas","ts":"2018-11-27T01:56:08.923Z"}
{"msg":"I think I have a work around.","username":"kostas","ts":"2018-11-27T01:56:44.481Z"}
{"msg":"I have a work around.","username":"kostas","ts":"2018-11-27T01:56:44.481Z"}
{"msg":"I'm working on this BTW: https://jira.hyperledger.org/browse/FAB-12828","username":"kostas","ts":"2018-11-27T01:56:55.866Z"}
{"msg":"as I'm reviewing https://gerrit.hyperledger.org/r/c/27350/25, this edge case occurs to me: tl;dr, if a `raftpb.MsgApp` got lost on wire, (no leadership change), our program hangs.\nTo expand on this:\n- `Order` an env on leader, leader cuts block and invoke `Propose`\n- this block data will be replicated to followers via `raftpb.MsgApp`\n- `raftpb.MsgApp` got lost\n- leader is waiting for this block to come back on `commitC`\n\netcd/raft handles this by:\n- `Propose` is invoked\n- it is sent to followers via `MsgApp` (Index: 1)\n- this `MsgApp` is lost\n- new data comes, `Propose` is invoked again\n- it is sent to followers via `MsgApp` (Index: 2)\n- follower notices the gap in index (expecting 1, got 2)\n- follower replies `MsgAppResp` to reject it, with Index hint set to 1\n- leader retransmits Index 1\n\nSo, this is not a problem with optimistic block creation, cuz we are not block waiting for previous block to be consented, and next block will trigger the retransmission of previous block. However, we need to solve this with `Config Block`.\n\nIf message loss can be detected, maybe we could `Propose` empty data to enforce retransmission.","username":"guoger","ts":"2018-11-27T06:18:58.555Z"}
{"msg":"as I'm reviewing https://gerrit.hyperledger.org/r/c/27350/25, this edge case occurs to me: tl;dr, if a `raftpb.MsgApp` got lost on wire, (no leadership change), our program hangs.\nTo expand on this:\n- `Order` an env on leader, leader cuts block and invoke `Propose`\n- this block data will be replicated to followers via `raftpb.MsgApp`\n- `raftpb.MsgApp` got lost\n- leader is waiting for this block to come back on `commitC`\n\netcd/raft handles this by:\n- `Propose` is invoked\n- it is sent to followers via `MsgApp` (Index: 1)\n- this `MsgApp` is lost\n- new data comes, `Propose` is invoked again\n- it is sent to followers via `MsgApp` (Index: 2)\n- follower notices the gap in index (expecting 1, got 2)\n- follower replies `MsgAppResp` to reject it, with Index hint set to 1\n- leader retransmits Index 1\n\nSo, this is not a problem with optimistic block creation, cuz we are not block waiting for previous block to be consented, and next block will trigger the retransmission of previous block. However, we need to solve this with `Config Block`.\n\nMaybe we could `Propose` empty data to enforce retransmission. But I wanna check if this message loss can be detected in some way?\ncc @yacovm @C0rWin @adarshsaraf123 ","username":"guoger","ts":"2018-11-27T06:18:58.555Z"}
{"msg":"as I'm reviewing https://gerrit.hyperledger.org/r/c/27350/25, this edge case occurs to me:\ntl;dr, if a `raftpb.MsgApp` got lost on wire, (no leadership change), our program hangs.\n\nTo expand on this:\n- `Order` an env on leader, leader cuts block and invoke `Propose`\n- this block data will be replicated to followers via `raftpb.MsgApp`\n- `raftpb.MsgApp` got lost\n- leader is waiting for this block to come back on `commitC`\n\netcd/raft handles this by:\n- `Propose` is invoked\n- it is sent to followers via `MsgApp` (Index: 1)\n- this `MsgApp` is lost\n- new data comes, `Propose` is invoked again\n- it is sent to followers via `MsgApp` (Index: 2)\n- follower notices the gap in index (expecting 1, got 2)\n- follower replies `MsgAppResp` to reject it, with Index hint set to 1\n- leader retransmits Index 1\n\nSo, this is not a problem with optimistic block creation, cuz we are not block waiting for previous block to be consented, and next block will trigger the retransmission of previous block. However, we need to solve this with `Config Block`.\n\nMaybe we could `Propose` empty data to enforce retransmission. But I wanna check if this message loss can be detected in some way?\ncc @yacovm @C0rWin @adarshsaraf123 ","username":"guoger","ts":"2018-11-27T06:18:58.555Z"}
{"msg":"as I'm reviewing https://gerrit.hyperledger.org/r/c/27350/25, this edge case occurs to me:\ntl;dr, if a `raftpb.MsgApp` got lost on wire, (no leadership change), our program hangs.\n\nTo expand on this:\n- `Order` an env on leader, leader cuts block and invoke `Propose`\n- this block data will be replicated to followers via `raftpb.MsgApp`\n- `raftpb.MsgApp` got lost\n- leader is infinitely waiting for this block to come back on `commitC`\n\netcd/raft handles this by:\n- `Propose` is invoked\n- it is sent to followers via `MsgApp` (Index: 1)\n- this `MsgApp` is lost\n- new data comes, `Propose` is invoked again\n- it is sent to followers via `MsgApp` (Index: 2)\n- follower notices the gap in index (expecting 1, got 2)\n- follower replies `MsgAppResp` to reject it, with Index hint set to 1\n- leader retransmits Index 1\n\nSo, this is not a problem with optimistic block creation, cuz we are not block waiting for previous block to be consented, and next block will trigger the retransmission of previous block. However, we need to solve this with `Config Block`.\n\nMaybe we could `Propose` empty data to enforce retransmission. But I wanna check if this message loss can be detected in some way?\ncc @yacovm @C0rWin @adarshsaraf123 ","username":"guoger","ts":"2018-11-27T06:18:58.555Z"}
{"msg":"@guoger Can you expand on how `raftpb.MsgApp` can get lost on wire? I would think that should not be possible unless the grpc APIs are not reliable.","username":"adarshsaraf123","ts":"2018-11-27T06:51:51.697Z"}
{"msg":"basically if `rpc.Step` returns error, we probably should consider retransmitting?","username":"guoger","ts":"2018-11-27T06:56:45.355Z"}
{"msg":"@guoger first of all not sure why this is related to failover,  this appears to me as general problem. ","username":"C0rWin","ts":"2018-11-27T09:11:04.318Z"}
{"msg":"with optimistic block creation, we _may_ not have this problem with _normal blocks_, but we do need to take care of _config block_, since it goes through two rounds of consensus. But I guess this does not block failover CR still. lift -1 now.","username":"guoger","ts":"2018-11-27T09:21:16.860Z"}
{"msg":"with optimistic block creation, we _may_ not have this problem with _normal blocks_, but we do need to take care of _config block_. But I guess this does not block failover CR still. lift -1 now.","username":"guoger","ts":"2018-11-27T09:21:16.860Z"}
{"msg":"@guoger: Thanks for posting this.","username":"kostas","ts":"2018-11-27T14:49:44.715Z"}
{"msg":"> next block will trigger the retransmission of previous block.","username":"kostas","ts":"2018-11-27T14:49:54.895Z"}
{"msg":"Expand on this, I'm not sure I got you here?","username":"kostas","ts":"2018-11-27T14:50:02.023Z"}
{"msg":"Expand on this. I'm not sure I got you here?","username":"kostas","ts":"2018-11-27T14:50:02.023Z"}
{"msg":"Expand on this? I'm not sure I got you here.","username":"kostas","ts":"2018-11-27T14:50:02.023Z"}
{"msg":"`rpc.Step` could return success while you still might lose the block, no?","username":"C0rWin","ts":"2018-11-27T16:22:16.024Z"}
{"msg":"also, @guoger can you please expand in your scenario who will lose the block? Do you mean the follower will get stack on waiting for block on `commitC`? ","username":"C0rWin","ts":"2018-11-27T16:23:41.023Z"}
{"msg":"but if `MsgApp` got lost, doesn't that mean you will be waiting for `c.node.Ready()` at first place?","username":"C0rWin","ts":"2018-11-27T16:27:54.833Z"}
{"msg":"Back to disabling/hiding the etcd/raft plugin for 1.4 for a second if I may -","username":"kostas","ts":"2018-11-27T20:47:31.423Z"}
{"msg":"At the end of the day, _disabling_ the etcd/raft plugin comes down to remove the \"etcdraft\" string from this map: https://github.com/hyperledger/fabric/blob/5c8a405dde739567e5e996b8be12db8f1ebecf0a/orderer/common/server/main.go#L67","username":"kostas","ts":"2018-11-27T20:47:58.528Z"}
{"msg":"(Hiding includes removing all references from user-facing assets, i.e. config files, and adjusting tests accordingly.)","username":"kostas","ts":"2018-11-27T20:48:43.039Z"}
{"msg":"Of course, if I remove that string from `clusterTypes` everything we have out there will break and development will come to a halt.","username":"kostas","ts":"2018-11-27T20:49:16.559Z"}
{"msg":"What does everyone thing about pushing two CRs to master:","username":"kostas","ts":"2018-11-27T20:51:11.563Z"}
{"msg":"1. CR A removes \"etcdraft\" from `clusterTypes` -- this is what gets merged to master right away so that we cut 1.4","username":"kostas","ts":"2018-11-27T20:51:38.105Z"}
{"msg":"2. CR B is a revert commit of CR A, i.e. re-adds \"etcdraft\" to `clusterTypes`. We then rebase all pending CRs on top of CR B.","username":"kostas","ts":"2018-11-27T20:52:38.272Z"}
{"msg":"Let me know what you think, or if you can think of a less intrusive way of going at it.","username":"kostas","ts":"2018-11-27T20:52:54.777Z"}
{"msg":"This is also a reason why I want us to decrease the height of the pending CR stack this week.","username":"kostas","ts":"2018-11-27T20:53:19.730Z"}
{"msg":"> In etcdraft, `Step` is a super frequent unary grpc call, and with commit I868f1e13, log is overwhelmed with `step` messages. is it possible to suppress an interceptor for a particular api?","username":"kostas","ts":"2018-11-27T21:30:44.532Z"}
{"msg":"@guoger: Matt has merged this: https://gerrit.hyperledger.org/r/c/27700/","username":"kostas","ts":"2018-11-27T21:30:57.408Z"}
{"msg":"can't we hide raft related staff behind build tags as we did for java shim in early releases? ","username":"C0rWin","ts":"2018-11-27T22:10:06.162Z"}
{"msg":"What do you do with Raft-related stuff that coexists with non-Raft related things?","username":"kostas","ts":"2018-11-27T23:02:16.915Z"}
{"msg":"For instance: the YAML files, or the integration test file which includes both Raft and non-Raft specs?","username":"kostas","ts":"2018-11-27T23:02:59.410Z"}
{"msg":"(I know you can disable individual specs.)","username":"kostas","ts":"2018-11-27T23:03:13.992Z"}
{"msg":"why do we need to hide raft stuff?","username":"yacovm","ts":"2018-11-27T23:07:29.997Z"}
{"msg":"it's not like someone can accidentally activate raft","username":"yacovm","ts":"2018-11-27T23:07:41.652Z"}
{"msg":"or migrate to it","username":"yacovm","ts":"2018-11-27T23:07:44.774Z"}
{"msg":"Per David:","username":"kostas","ts":"2018-11-27T23:23:37.020Z"}
{"msg":"Per Dave:","username":"kostas","ts":"2018-11-27T23:23:37.020Z"}
{"msg":"> We have a policy of not exposing 'experimental' features in official releases anymore, we'll need a way to disable raft from code perspective before we ship v1.4","username":"kostas","ts":"2018-11-27T23:23:41.911Z"}
{"msg":"And:","username":"kostas","ts":"2018-11-27T23:24:21.616Z"}
{"msg":"> the main requirement is that v1.4 consumers should not be able to enable it. depending on the feature, this often means a few lines of code to disable the entry points.","username":"kostas","ts":"2018-11-27T23:24:23.032Z"}
{"msg":"I say we just add in this function, a panic: https://github.com/hyperledger/fabric/blob/master/orderer/common/server/main.go#L351-L369","username":"yacovm","ts":"2018-11-27T23:28:15.110Z"}
{"msg":"this decides whether the OSN is a cluster type","username":"yacovm","ts":"2018-11-27T23:28:38.602Z"}
{"msg":"which means it's compatible with etcdraft","username":"yacovm","ts":"2018-11-27T23:28:45.186Z"}
{"msg":"so, if you accidentally make a bootstrap genesis block that is of type etcdraft","username":"yacovm","ts":"2018-11-27T23:29:10.302Z"}
{"msg":"you'll never going live","username":"yacovm","ts":"2018-11-27T23:29:14.166Z"}
{"msg":"you crash","username":"yacovm","ts":"2018-11-27T23:29:30.736Z"}
{"msg":"That's probably even better than editing `clusterTypes`. Still, we'd be looking at two commits as I describe above, correct?","username":"kostas","ts":"2018-11-27T23:30:09.887Z"}
{"msg":"why 2 commits?","username":"yacovm","ts":"2018-11-27T23:32:10.690Z"}
{"msg":"One adds the panic (and is the one we merge for 1.4) and one reverts it, and is the one on top of which we add any raft-related code that depends on the `isClusterType` function to work correctly.","username":"kostas","ts":"2018-11-27T23:33:52.719Z"}
{"msg":"(That second one doesn't get merged until we cut 1.4)","username":"kostas","ts":"2018-11-27T23:34:04.217Z"}
{"msg":"(That second one doesn't get merged until we cut 1.4.)","username":"kostas","ts":"2018-11-27T23:34:04.217Z"}
{"msg":"ah yeah","username":"yacovm","ts":"2018-11-27T23:38:20.837Z"}
{"msg":"I can do it now.... ","username":"yacovm","ts":"2018-11-27T23:38:36.270Z"}
{"msg":"@kostas ","username":"yacovm","ts":"2018-11-27T23:38:39.245Z"}
{"msg":"how bout it?","username":"yacovm","ts":"2018-11-27T23:38:42.721Z"}
{"msg":"By all means, be my guest. I think we'll need a bit more than that though.","username":"kostas","ts":"2018-11-27T23:39:46.409Z"}
{"msg":"So, we need to remove all references to etcd/raft from the YAML files (configtx, orderer).","username":"kostas","ts":"2018-11-27T23:40:04.997Z"}
{"msg":"If we do that, `TestSpawnEtcdRaft` will fail.","username":"kostas","ts":"2018-11-27T23:40:17.589Z"}
{"msg":"So we need to copy over `orderer.yaml` (w/ some modifications) to `orderer/common/server/testdata`.","username":"kostas","ts":"2018-11-27T23:40:43.638Z"}
{"msg":"And we need to disable the E2E integration specs that are related to Raft.","username":"kostas","ts":"2018-11-27T23:41:05.205Z"}
{"msg":"At least that's what I've done so far. (I keep running tests.)","username":"kostas","ts":"2018-11-27T23:41:19.899Z"}
{"msg":"Am I missing anything?","username":"kostas","ts":"2018-11-27T23:41:27.219Z"}
{"msg":"disabling tests can be done in the same change set","username":"yacovm","ts":"2018-11-27T23:43:27.137Z"}
{"msg":"ah is that what you meant?","username":"yacovm","ts":"2018-11-27T23:44:08.757Z"}
{"msg":"I didn't suggest otherwise. I'm just saying, just doing the panic will fail.","username":"kostas","ts":"2018-11-27T23:44:17.916Z"}
{"msg":"so IMO *not reverting YAMLs* does not contradicts @dave.enyeart  's criteria","username":"yacovm","ts":"2018-11-27T23:45:38.573Z"}
{"msg":"so IMO *not reverting YAMLs* does not contradict @dave.enyeart  's criteria","username":"yacovm","ts":"2018-11-27T23:45:38.573Z"}
{"msg":"that is - we can just disable etcdraft and keep the YAMLs","username":"yacovm","ts":"2018-11-27T23:46:01.470Z"}
{"msg":"@dave.enyeart  ? ","username":"yacovm","ts":"2018-11-27T23:46:16.369Z"}
{"msg":"I would think we'll need to hide references from the YAMLs otherwise folks will be trying to activate raft just because they see it as an option. (As you know, nobody RTFM, much less the release notes.)","username":"kostas","ts":"2018-11-27T23:47:12.206Z"}
{"msg":"But let's see what Dave says.","username":"kostas","ts":"2018-11-27T23:47:16.637Z"}
{"msg":"if someone specifies a profile in configtx.yaml that activates etcdraft, then the OSN will not boot","username":"yacovm","ts":"2018-11-27T23:49:07.887Z"}
{"msg":"I am just worried about merge conflicts, honestly","username":"yacovm","ts":"2018-11-27T23:49:22.958Z"}
{"msg":"I don't want to merge the disable CR soon","username":"yacovm","ts":"2018-11-27T23:49:32.345Z"}
{"msg":"only before the release...","username":"yacovm","ts":"2018-11-27T23:49:43.333Z"}
{"msg":"Yeah, I'm aware, same here. Was planning to -2 and let Dave know about the timing anyway.","username":"kostas","ts":"2018-11-27T23:50:30.043Z"}
{"msg":"> if someone specifies a profile in configtx.yaml that activates etcdraft, then the OSN will not boot\nThat someone will be wondering why on earth \"raft\" is listed as an option?","username":"kostas","ts":"2018-11-27T23:51:05.163Z"}
{"msg":"hmmm but we didn't add it to the `fabric-samples` ","username":"yacovm","ts":"2018-11-27T23:56:37.558Z"}
{"msg":"(classic excuse, I know)","username":"yacovm","ts":"2018-11-27T23:56:47.719Z"}
{"msg":"Heh, let's see what Dave says.","username":"kostas","ts":"2018-11-27T23:58:40.166Z"}
{"msg":"> If we do that, `TestSpawnEtcdRaft` will fail.\n> So we need to copy over `orderer.yaml` (w/ some modifications) to `orderer/common/server/testdata`.","username":"kostas","ts":"2018-11-27T23:58:59.390Z"}
{"msg":"I'm obviously wrong here BTW.","username":"kostas","ts":"2018-11-27T23:59:04.307Z"}
{"msg":"Because of course that test will fail when `isClusterType` panics, whether the `orderer.yaml` has been copied over or not.","username":"kostas","ts":"2018-11-27T23:59:31.988Z"}
{"msg":"So I'll hide https://github.com/hyperledger/fabric/blob/5c8a405dde739567e5e996b8be12db8f1ebecf0a/orderer/common/server/etcdraft_test.go behind a build tag.","username":"kostas","ts":"2018-11-28T00:02:38.180Z"}
{"msg":"we can just disable the test","username":"yacovm","ts":"2018-11-28T00:03:07.069Z"}
{"msg":"`t.Skip()`?","username":"kostas","ts":"2018-11-28T00:14:44.682Z"}
{"msg":"yes","username":"yacovm","ts":"2018-11-28T01:00:28.993Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=6khZ2K4tWZwCbwM85) @kostas let's say we have leader node A, and follower node B. And retransmission can be explained with following steps:\n- client `Propose` data to A\n- A replicates it by sending `MsgApp1` (Index: 1) to B\n- this message got lost\n- client `Propose` data to A\n- A replicates it by sending `MsgApp2` (Index: 2) to B\n- B is expecting index 1, therefore rejects it by sending `MsgAppResp` that contains `{reject: true, rejectHint: 1}`\n- A realizes expected index 1 from rejectHint, and resend  `MsgApp1` to B","username":"guoger","ts":"2018-11-28T02:14:58.630Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=6khZ2K4tWZwCbwM85","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=6khZ2K4tWZwCbwM85","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@guoger: I get you. Now walk me over how this is a problem with `Config` blocks? (Or is it Raft configuration transactions?)","username":"kostas","ts":"2018-11-28T02:17:20.908Z"}
{"msg":"*without* optimistic block creation, this problem applies to both normal block and config block. Because the 4th step in above scenario never goes through, as `serverReq` is waiting for the first block to be consented before accepting new envelopes.","username":"guoger","ts":"2018-11-28T02:20:09.689Z"}
{"msg":"*with* optimistic block creation, proposal of subsequent block triggers retransmission of previously lost block","username":"guoger","ts":"2018-11-28T02:21:33.670Z"}
{"msg":"*with* optimistic block creation, proposal of subsequent normal block triggers retransmission of previously lost block","username":"guoger","ts":"2018-11-28T02:21:33.670Z"}
{"msg":"however, for config block, we still block waiting for it before processing subsequent envelopes","username":"guoger","ts":"2018-11-28T02:22:26.515Z"}
{"msg":"Link to code if you have it handy? No rush. And sorry I'm slow. Been a long day.","username":"kostas","ts":"2018-11-28T02:33:40.816Z"}
{"msg":"Link to code snipper that shows the problem in action, if you have it handy? No rush. And sorry I'm slow - been a long day.","username":"kostas","ts":"2018-11-28T02:33:40.816Z"}
{"msg":"sure gimme a sec","username":"guoger","ts":"2018-11-28T02:35:33.911Z"}
{"msg":"(I'll see this tomorrow as I'm signing off for the day.)","username":"kostas","ts":"2018-11-28T02:37:22.747Z"}
{"msg":"as merged code currently stands, when a block is cut, it's [proposed to raft](https://github.com/hyperledger/fabric/blob/5c8a405dde739567e5e996b8be12db8f1ebecf0a/orderer/consensus/etcdraft/chain.go#L536), then block waiting on `commitC` [here](https://github.com/hyperledger/fabric/blob/5c8a405dde739567e5e996b8be12db8f1ebecf0a/orderer/consensus/etcdraft/chain.go#L541), therefore not consuming `submitC` anymore, since it's in the same go routine.","username":"guoger","ts":"2018-11-28T02:37:56.624Z"}
{"msg":"sure, gn","username":"guoger","ts":"2018-11-28T02:38:02.600Z"}
{"msg":"ttyl","username":"guoger","ts":"2018-11-28T02:38:04.637Z"}
{"msg":"i'll have a discussion with @C0rWin when he wakes up","username":"guoger","ts":"2018-11-28T02:38:32.501Z"}
{"msg":"@kostas @yacovm   As long as it's disabled, I'm fine if the yaml and test files remain, although it would be helpful to add a comment in there indicating that it is for future use and can not be enabled in v1.4, so as to not confuse people.","username":"dave.enyeart","ts":"2018-11-28T03:23:30.559Z"}
{"msg":"@kostas ^","username":"yacovm","ts":"2018-11-28T08:45:33.908Z"}
{"msg":"the release manager has spoken ","username":"yacovm","ts":"2018-11-28T08:45:40.051Z"}
{"msg":"the YAML files can stay :) ","username":"yacovm","ts":"2018-11-28T08:45:48.863Z"}
{"msg":"Hi, I have a quick question about the orderer. When there are multiple channels on the same set of orderers, will the orderer use transactions from different channel to form a single block? Thanks.","username":"huikang","ts":"2018-11-28T15:14:35.826Z"}
{"msg":"no","username":"yacovm","ts":"2018-11-28T15:15:19.259Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Tr6wne5bKvmkyDuSg) @yacovm ok, thanks","username":"huikang","ts":"2018-11-28T15:15:40.988Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Tr6wne5bKvmkyDuSg","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Tr6wne5bKvmkyDuSg","remote":true,"fileId":null,"fileName":null}]}
{"msg":"> the YAML files can stay\n@yacovm: Roger. Feel free to go for it then.","username":"kostas","ts":"2018-11-28T15:20:42.198Z"}
{"msg":"> the YAML files can stay\n@yacovm: Roger. Feel free to go for it then.","username":"kostas","ts":"2018-11-28T15:20:42.198Z"}
{"msg":"> as merged code currently stands, when a block is cut, it's proposed to raft, then block waiting on `commitC` here, therefore not consuming `submitC` anymore, since it's in the same go routine.","username":"kostas","ts":"2018-11-28T15:22:26.206Z"}
{"msg":"@C0rWin: What is the conclusion with your discussion with @guoger here?","username":"kostas","ts":"2018-11-28T15:22:48.384Z"}
{"msg":"@kostas I'll do it next week ","username":"yacovm","ts":"2018-11-28T15:24:22.868Z"}
{"msg":"overloaded with 1.4 stuff right now","username":"yacovm","ts":"2018-11-28T15:24:32.186Z"}
{"msg":"@kostas no conclusions as @guoger was offline most of the day","username":"C0rWin","ts":"2018-11-28T16:03:14.393Z"}
{"msg":"What is your take?","username":"kostas","ts":"2018-11-28T16:04:42.151Z"}
{"msg":"I need to understand the whole picture thus need to speak with Jay before giving any take on this","username":"C0rWin","ts":"2018-11-28T16:07:54.671Z"}
{"msg":"Basically it would be great to have a test which will outline the issue","username":"C0rWin","ts":"2018-11-28T16:08:43.859Z"}
{"msg":"Alright. Just a reminder that we need to close the reconfiguration work (as in have it merged and covering all cases) by the end of this week.","username":"kostas","ts":"2018-11-28T16:10:02.391Z"}
{"msg":"This issue has nothing to do with reconfiguration and last item has been pushed to gerrit","username":"C0rWin","ts":"2018-11-28T16:13:45.894Z"}
{"msg":"Here is the CR which handles restarts during config type B processing: https://gerrit.hyperledger.org/r/#/c/27773/","username":"C0rWin","ts":"2018-11-28T16:19:43.775Z"}
{"msg":"@kostas ^^^","username":"C0rWin","ts":"2018-11-28T16:19:59.797Z"}
{"msg":"Has joined the channel.","username":"haggis","ts":"2018-11-29T08:08:27.151Z","type":"uj"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=jRntaAqhZgEoJR8jQ) @kostas OK, as I dig a bit deeper, this appears to be a false alert :joy: every time leader receives a `MsgHeartbeatResp`, it retransmits uncommitted entries, if any, to the follower. I've pushed a draft UT to assert this: https://gerrit.hyperledger.org/r/c/27804/ I'll add it to top of CR stack if someone can kindly confirms it","username":"guoger","ts":"2018-11-29T11:09:52.473Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=jRntaAqhZgEoJR8jQ","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=jRntaAqhZgEoJR8jQ","remote":true,"fileId":null,"fileName":null}]}
{"msg":"sorry to stir the conversation without a thorough investigation :(","username":"guoger","ts":"2018-11-29T11:10:27.641Z"}
{"msg":"cc @C0rWin ","username":"guoger","ts":"2018-11-29T11:10:40.241Z"}
{"msg":"@guoger it's better to be alerted and disproof than thinking we are safe w/o attesting the assertions :)","username":"C0rWin","ts":"2018-11-29T11:18:38.737Z"}
{"msg":"IMO, I still think we might need to consider introducing timeouts while proposing blocks or conf changes","username":"C0rWin","ts":"2018-11-29T11:19:16.333Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=WfcLAttCA3qa5jiaQ) @C0rWin Agreed!!","username":"adarshsaraf123","ts":"2018-11-29T11:21:24.835Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=WfcLAttCA3qa5jiaQ","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=WfcLAttCA3qa5jiaQ","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Yup, but that’s to address another problem space and we are safe with current cr stack at least.","username":"guoger","ts":"2018-11-29T11:28:11.630Z"}
{"msg":"@kostas https://gerrit.hyperledger.org/r/#/c/27773/ added UT to cover the restart (loose of quorum) case + addressed your comments, please have a look","username":"C0rWin","ts":"2018-11-29T14:20:17.853Z"}
{"msg":"Hi, could anyone help to look at my question (https://chat.hyperledger.org/channel/fabric-peer-endorser-committer?msg=fRv7hqHnoN7tC4Dyo) Thanks.","username":"huikang","ts":"2018-11-29T14:53:50.956Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-peer-endorser-committer?msg=fRv7hqHnoN7tC4Dyo","url":"https://chat.hyperledger.org/channel/fabric-peer-endorser-committer?msg=fRv7hqHnoN7tC4Dyo","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Has joined the channel.","username":"StefanKosc","ts":"2018-11-30T08:55:05.088Z","type":"uj"}
{"msg":"Hi, I have a general question about network design. Let's assume that I have one channel with two organisations in it. Is it possible that each of organisations hosts its own orderer?","username":"StefanKosc","ts":"2018-11-30T08:57:33.109Z"}
{"msg":"@kostas please take a look: https://gerrit.hyperledger.org/r/#/c/27770/","username":"tock","ts":"2018-11-30T11:03:43.750Z"}
{"msg":"@StefanKosc yes, although it doesn't make much sense in the context of cft","username":"guoger","ts":"2018-11-30T13:06:35.927Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=ZAF75fT9SSbaM8Y7q) @guoger thanks for response, what do you mean by cft context?","username":"StefanKosc","ts":"2018-11-30T13:23:53.341Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=ZAF75fT9SSbaM8Y7q","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=ZAF75fT9SSbaM8Y7q","remote":true,"fileId":null,"fileName":null}]}
{"msg":"kafka/raft is crash fault tolerant (cft), so having each of orgs running an orderer node only adds operation complexity, but not gaining anything","username":"guoger","ts":"2018-11-30T13:51:54.855Z"}
{"msg":"Looks like there is a Raft related test flake if anyone has a minute to look https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/6664/console","username":"jyellick","ts":"2018-11-30T21:46:59.429Z"}
{"msg":"@jyellick I have a fix but it's stuck in a chain of CRs","username":"yacovm","ts":"2018-11-30T21:58:45.517Z"}
{"msg":"https://gerrit.hyperledger.org/r/#/c/27602/","username":"yacovm","ts":"2018-11-30T21:59:28.637Z"}
{"msg":"I can move it on top of master if it's important enough, but - the failure is rare","username":"yacovm","ts":"2018-11-30T22:00:44.190Z"}
{"msg":"Or we can merge the stack...","username":"kostas","ts":"2018-11-30T22:05:01.507Z"}
{"msg":"Heads up: I will miss tomorrow’s scrum. If I’m not mistaken, the Zoom URL should still work even w/ the host out. @adarshsaraf123 @C0rWin @guoger @tock @yacovm","username":"kostas","ts":"2018-12-03T02:42:24.800Z"}
{"msg":"@C0rWin @guoger @yacovm Our CR stack needs some rebasing to make them all align with the latest patch sets from previous CRs\n ","username":"adarshsaraf123","ts":"2018-12-04T03:29:42.810Z"}
{"msg":"@guoger @adarshsaraf123: Thank you for the reviews! _Whenever_ you have a chance or spare cycles, have a look at this one as well and LMK what you think? https://gerrit.hyperledger.org/r/c/27773","username":"kostas","ts":"2018-12-04T17:15:39.036Z"}
{"msg":"Sure @kostas That's the next item on my list.","username":"adarshsaraf123","ts":"2018-12-04T17:16:34.875Z"}
{"msg":"Has joined the channel.","username":"arjitkhullar","ts":"2018-12-05T00:04:00.843Z","type":"uj"}
{"msg":"A few of us are involved in a 8-9am EST call tomorrow that we can't get out of (for reference, our scrum is at 8:30am EST). I asked to have that 8-9am meeting rescheduled w/o luck. As such, I will have to reschedule tomorrow's scrum - sorry about that. We'll do it on Friday same time if that works for everyone?","username":"kostas","ts":"2018-12-05T23:22:11.479Z"}
{"msg":"Friday is weekend in Israel","username":"C0rWin","ts":"2018-12-06T05:34:57.829Z"}
{"msg":"I probably won't attend a Friday scrum either because I don't have anything interesting to talk about. Busy with v1.4 items this week","username":"yacovm","ts":"2018-12-06T06:41:59.749Z"}
{"msg":"works for me","username":"guoger","ts":"2018-12-06T07:42:58.415Z"}
{"msg":"just to make sure i understand this correctly, to write an integration test for etcdraft now, i'll have to locally revert the commit that disables etcdraft?","username":"guoger","ts":"2018-12-06T07:43:57.892Z"}
{"msg":"just to make sure i understand this correctly, to write an integration test for etcdraft now, i'll have to locally revert the commit that disables etcdraft? cc @yacovm ","username":"guoger","ts":"2018-12-06T07:43:57.892Z"}
{"msg":"@guoger no, I have a commit that reverts it","username":"yacovm","ts":"2018-12-06T07:45:25.157Z"}
{"msg":"you need to rebase on top","username":"yacovm","ts":"2018-12-06T07:45:28.054Z"}
{"msg":"https://gerrit.hyperledger.org/r/#/c/27909/","username":"yacovm","ts":"2018-12-06T07:45:46.391Z"}
{"msg":"yep, just found the link. Thanks!","username":"guoger","ts":"2018-12-06T07:46:17.217Z"}
{"msg":"I too cannot make it on Friday. ","username":"adarshsaraf123","ts":"2018-12-06T08:10:19.784Z"}
{"msg":"No worries, Friday's off then.","username":"kostas","ts":"2018-12-06T13:37:14.944Z"}
{"msg":"Please post anything that's blocking you, or you need to draw attention to here.","username":"kostas","ts":"2018-12-06T13:37:53.181Z"}
{"msg":"Other than the existing in-progress/in-review (and Kafka migration that @tock's working on), I _think_ this is a list of items we need to have ready within the next couple of weeks: https://jira.hyperledger.org/issues/?jql=labels%20%3D%20raft-must","username":"kostas","ts":"2018-12-06T13:39:18.507Z"}
{"msg":"Please have a look and LMK if you think we need to add/remove something to it.","username":"kostas","ts":"2018-12-06T13:39:50.727Z"}
{"msg":"https://gerrit.hyperledger.org/r/c/27656/9","username":"kostas","ts":"2018-12-10T14:10:58.918Z"}
{"msg":"https://gerrit.hyperledger.org/r/c/27656/","username":"kostas","ts":"2018-12-10T14:10:58.918Z"}
{"msg":"https://gerrit.hyperledger.org/r/c/27719/","username":"kostas","ts":"2018-12-10T14:11:03.996Z"}
{"msg":"https://gerrit.hyperledger.org/r/c/27773/","username":"kostas","ts":"2018-12-10T14:11:15.153Z"}
{"msg":"^^ Let's please review and merge.","username":"kostas","ts":"2018-12-10T14:11:37.205Z"}
{"msg":"hey, just arrived at hotel. let me know when you are available to talk :)","username":"guoger","ts":"2018-12-11T17:09:28.800Z"}
{"msg":"https://gerrit.hyperledger.org/r/c/28119/ cc @kostas @C0rWin there's a typo in UT and we got lucky that test passes.","username":"guoger","ts":"2018-12-12T16:50:39.793Z"}
{"msg":"@guoger thanks :thumbsup: ","username":"C0rWin","ts":"2018-12-12T18:08:26.231Z"}
{"msg":"This should be an easy one to review: https://gerrit.hyperledger.org/r/c/27804/","username":"kostas","ts":"2018-12-12T19:46:16.394Z"}
{"msg":"@kostas @yacovm Since 1.4 was cut, let us revive this one and continue the CR: https://gerrit.hyperledger.org/r/#/c/27822/","username":"tock","ts":"2018-12-13T07:03:14.159Z"}
{"msg":"@kostas @yacovm @C0rWin Since 1.4 was cut, let us revive this one and continue the CR: https://gerrit.hyperledger.org/r/#/c/27822/","username":"tock","ts":"2018-12-13T07:03:14.159Z"}
{"msg":"There is a monster waiting for you after this one, see: https://gerrit.hyperledger.org/r/#/c/28113/","username":"tock","ts":"2018-12-13T07:04:37.103Z"}
{"msg":"Also @yacovm - please be kind enough to escort this one all the way home, and merge it to fabric-samples: https://gerrit.hyperledger.org/r/#/c/27770/","username":"tock","ts":"2018-12-13T07:08:44.509Z"}
{"msg":"Also @yacovm & @kostas - please be kind enough to escort this one all the way home, and merge it to fabric-samples: https://gerrit.hyperledger.org/r/#/c/27770/","username":"tock","ts":"2018-12-13T07:08:44.509Z"}
{"msg":"@tock but i +2ed....","username":"yacovm","ts":"2018-12-13T07:28:11.225Z"}
{"msg":"Following Yacov's advice I am going to divide the \"monster\" into pieces that are easier to digest... see the last patch: https://gerrit.hyperledger.org/r/#/c/28113/ which now only handles the protobuffs.","username":"tock","ts":"2018-12-13T12:04:06.797Z"}
{"msg":"Following @yacovm 's advice I am going to divide the \"monster\" into pieces that are easier to digest... see the last patch: https://gerrit.hyperledger.org/r/#/c/28113/ which now only handles the protobuffs.","username":"tock","ts":"2018-12-13T12:04:06.797Z"}
{"msg":"Divine and conquer is the way to go","username":"yacovm","ts":"2018-12-13T12:23:08.044Z"}
{"msg":"Divide and conquer is the way to go","username":"yacovm","ts":"2018-12-13T12:23:08.044Z"}
{"msg":"and i also have a change set of my own here- https://gerrit.hyperledger.org/r/#/c/28107/ , which adds a separate listener for intra-cluster communication. ","username":"yacovm","ts":"2018-12-13T13:06:42.143Z"}
{"msg":"> Following @yacovm 's advice I am going to divide the \"monster\" into pieces that are easier to digest... see the last patch: https://gerrit.hyperledger.org/r/#/c/28113/ which now only handles the protobuffs.\nRight, I saw the multi-K line CR and almost had a heart-attack. Thanks for splitting!","username":"kostas","ts":"2018-12-13T13:16:53.474Z"}
{"msg":"@aso can you please revisit this one?  https://gerrit.hyperledger.org/r/#/c/27822/","username":"tock","ts":"2018-12-13T19:15:04.500Z"}
{"msg":"Has joined the channel.","username":"aso","ts":"2018-12-13T19:15:04.905Z","type":"uj"}
{"msg":"@tock : I'll wait for @jyellick's comment to be addressed","username":"aso","ts":"2018-12-13T19:36:31.500Z"}
{"msg":"@tock: I wouldn't view that as a blocker. We'll probably move to merge the whole stack only when the corresponding tests are there anyway, so don't let this block you. (You're doing well to ask for reviews though.)","username":"kostas","ts":"2018-12-13T21:44:02.081Z"}
{"msg":"Speaking of, not sure if this one's ready for review https://gerrit.hyperledger.org/r/c/28155/1 but if it is, add everyone here as a reviewer so we can have a look. Thanks.","username":"kostas","ts":"2018-12-13T21:44:42.475Z"}
{"msg":"Speaking of, not sure if this one's ready for review https://gerrit.hyperledger.org/r/c/28155/1 but if it is, add everyone here as a reviewer so that we know it's good to go - thanks!","username":"kostas","ts":"2018-12-13T21:44:42.475Z"}
{"msg":"@kostas @jyellick  @aso w.r.t.  https://gerrit.hyperledger.org/r/#/c/28107/ ,  I address your comments in full, please take a look.","username":"tock","ts":"2018-12-14T07:06:22.418Z"}
{"msg":"@kostas @jyellick  @aso w.r.t.  https://gerrit.hyperledger.org/r/#/c/28107/ ,  I addressed your comments in full, please take a look at the latest patch.","username":"tock","ts":"2018-12-14T07:06:22.418Z"}
{"msg":"Has joined the channel.","username":"amitr","ts":"2018-12-15T02:52:46.899Z","type":"uj"}
{"msg":"https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/7191/console","username":"yacovm","ts":"2018-12-17T10:26:47.021Z"}
{"msg":"fresh CI failure from today","username":"yacovm","ts":"2018-12-17T10:26:51.372Z"}
{"msg":"thx, i'll look into it","username":"guoger","ts":"2018-12-17T12:50:09.237Z"}
{"msg":"Posted the same question in fabric-orderer channel but not sure if it is very active:","username":"magar36","ts":"2018-12-18T22:51:14.029Z"}
{"msg":"How is deliver api able to utilize grpc to create a two-way client-server model? We know grpc supports bidirectional communication but typically it's a client-server setup wherein client generates requests and server responds to those requests and all this can happen in parallel on a single tcp connection. In fabric though, orderer dispatches the blocks to the peers which are not a direct consequence of the request coming from the peer.\nSo peer establishes a grpc connection with the orderer (and invokes the deliver api), sends some data, gets the response - this is typical grpc but after some time orderer is able to use the same connection to send the block to the peer as and when a new block is generated. How does orderer know when to send the block to the peer? It must be keeping the connection details with all the peers in memory somehwere to be able to use those when dispatching the new blocks, right?","username":"magar36","ts":"2018-12-18T22:51:16.800Z"}
{"msg":"Has left the channel.","username":"magar36","ts":"2018-12-18T22:56:49.290Z","type":"ul"}
{"msg":"Has joined the channel.","username":"sanket1211","ts":"2018-12-20T06:25:28.462Z","type":"uj"}
{"msg":"@yacovm to echo our scrum discussion yesterday, ginkgo parallelize tests by spawning multiple process, so they don't share vars, see http://onsi.github.io/ginkgo/#parallel-specs","username":"guoger","ts":"2018-12-21T03:17:35.461Z"}
{"msg":"(i believe in the same process, tests are still ran in serial)","username":"guoger","ts":"2018-12-21T03:17:55.949Z"}
{"msg":"btw, is it possible to print debug logs if a test fails? it's pretty hard to reproduce some flaky tests locally, and i wanna see if CI could output debug logs once it hits a failure. (or should i simply turn on log in tests by default?)","username":"guoger","ts":"2018-12-21T03:19:58.457Z"}
{"msg":"btw, is it possible to print debug logs if a test fails? it's pretty hard to reproduce some flaky tests locally, and i wanna see if CI could output debug logs once it hits a failure. (or should i simply turn on log in tests by default? it shouldn't pollute CI logs, right?)","username":"guoger","ts":"2018-12-21T03:19:58.457Z"}
{"msg":"Also, i need some pro tips on how to reproduce flaky tests locally... i'm currently using `ginkgo -untilItFails`, but it seems not very productive :(","username":"guoger","ts":"2018-12-21T03:25:02.796Z"}
{"msg":"@guoger i see, that's a surprise. ","username":"yacovm","ts":"2018-12-21T08:34:46.556Z"}
{"msg":"and it is truly devil's work... ","username":"yacovm","ts":"2018-12-21T08:35:08.888Z"}
{"msg":"how to reproduce flaky tests locally - i usually reproduce them in CI","username":"yacovm","ts":"2018-12-21T08:35:48.297Z"}
{"msg":"by having a custom change set that runs the test 1000 times","username":"yacovm","ts":"2018-12-21T08:35:57.764Z"}
{"msg":"and only that test","username":"yacovm","ts":"2018-12-21T08:36:01.634Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Qkmb3iCujp3uPJkJA) @yacovm great tips! how do you do that? CI configuration or simply loop in the code?","username":"guoger","ts":"2018-12-21T08:37:21.517Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Qkmb3iCujp3uPJkJA","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Qkmb3iCujp3uPJkJA","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=AC9MaP79LBAXaZrfh) @yacovm i'm curious to hear the reason","username":"guoger","ts":"2018-12-21T08:38:07.002Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=AC9MaP79LBAXaZrfh","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=AC9MaP79LBAXaZrfh","remote":true,"fileId":null,"fileName":null}]}
{"msg":"look here https://gerrit.hyperledger.org/r/#/c/28258/4/unit-test/run.sh","username":"yacovm","ts":"2018-12-21T08:40:10.343Z"}
{"msg":"the reason is - ginkgo was written by the devil","username":"yacovm","ts":"2018-12-21T08:40:24.710Z"}
{"msg":"to tempt innocent developers with a framework that looks nice and productive but it is un-usable when problems arise and you need to debug your test ","username":"yacovm","ts":"2018-12-21T08:41:21.576Z"}
{"msg":"is there an integration test for add/remove node?","username":"guoger","ts":"2018-12-21T14:44:59.975Z"}
{"msg":"oh yeah","username":"yacovm","ts":"2018-12-21T15:50:15.656Z"}
{"msg":"we merged today a test that changes ALL the cluster ;) @guoger ","username":"yacovm","ts":"2018-12-21T15:50:36.391Z"}
{"msg":"`etcdraft_config_test.go`?","username":"guoger","ts":"2018-12-21T15:51:25.838Z"}
{"msg":"yes","username":"yacovm","ts":"2018-12-21T16:00:39.542Z"}
{"msg":"is there a list of commands used for gerrit reply? like `Run VerifyBuild`, etc","username":"guoger","ts":"2018-12-21T16:04:23.221Z"}
{"msg":"^^ @rameshthoomu - do we have these recorded anywhere?","username":"kostas","ts":"2018-12-21T16:05:03.659Z"}
{"msg":"Has joined the channel.","username":"rameshthoomu","ts":"2018-12-21T16:05:03.779Z","type":"uj"}
{"msg":"it's `Run` and then the name of the test...","username":"yacovm","ts":"2018-12-21T16:05:55.655Z"}
{"msg":"```\nF1-VerifyBuild\t\n\nF2-DocBuild\t\n\nF3-IntegrationTest\t\n\nF3-UnitTest\t\n\n```","username":"yacovm","ts":"2018-12-21T16:06:22.354Z"}
{"msg":"@kostas @guoger Please see this https://ci-docs.readthedocs.io/en/latest/source/fabric_ci_process.html#trigger-failed-jobs-through-gerrit-comments","username":"rameshthoomu","ts":"2018-12-21T22:49:12.789Z"}
{"msg":"Hi guys, I’m not able to make to our scrum today. I’m taking Mon and Tue off. I put 3 CRs out there for FAB-13178, but -1 the last myself cuz there is a corner case needed to be taken care of. Otherwise, happy holiday!!","username":"guoger","ts":"2018-12-24T13:27:35.113Z"}
{"msg":"Happy Holidays!","username":"adarshsaraf123","ts":"2018-12-24T13:45:44.103Z"}
{"msg":"I think we have a problem... in the `deliver.go`, the `erroredChan` , returned by the `chain.Errored()` method - does *not* close when the cluster loses the leader :( \nIt means that if a peer is connected to an orderer node and that orderer is in a network partition and cannot connect to the cluster because reasons, \nthe peer will not try to failover to another OSN in order to check if it can pull blocks from some other OSN, and since the OSN the peer is connected to, is disconnected from the cluster,\nthen it will not get any blocks in the meantine....\n\nI suggest that this is solved by using some other channel than `doneC` when `Errored()` is invoked.\nlet's say that we have a channel that is initialized when `Errored()` is called, and then we keep it until we detect that we don't know who is the leader (which, we need to track too... I don't think we currently do that actively).\nwhen we detect that the leader is lost, we need to close the channel we gave to the goroutines that invokes the `Errored()`, and create a new channel on demand.\nsomething roughly like this:\n\n```\nfunc (c *Chain) Errored() <-chan struct{} {\n\tlead := atomic.LoadUint64(&c.leader)\n\tif lead == raft.None {\n\t\tclosedChan := make(chan struct{})\n\t\tclose(closedChan)\n\t\treturn closedChan\n\t}\n\t\n\t// Else, we have a leader.\n\tc.syncLock.Lock()\n\terroredChan := c.erroredChan\n\tif erroredChan == nil {\n\t\terroredChan = make(chan struct{})\n\t}\n\tc.syncLock.Unlock()\n\t\n\treturn erroredChan\n}\n```\n","username":"yacovm","ts":"2018-12-24T17:52:05.951Z"}
{"msg":"@guoger @kostas @C0rWin @tock @adarshsaraf123 ","username":"yacovm","ts":"2018-12-24T17:52:21.291Z"}
{"msg":"I opened https://jira.hyperledger.org/browse/FAB-13438 ","username":"yacovm","ts":"2018-12-24T17:57:42.981Z"}
{"msg":"In case I am not wrong, that is","username":"yacovm","ts":"2018-12-24T17:57:49.851Z"}
{"msg":"To track/discuss this","username":"yacovm","ts":"2018-12-24T17:58:01.817Z"}
{"msg":"that seems to be a reasonable solution","username":"guoger","ts":"2018-12-27T10:01:20.778Z"}
{"msg":"i've linked FAB-12709 to the jira you created to address this:\n> and then we keep it until we detect that we don't know who is the leader (which, we need to track too... I don't think we currently do that actively).","username":"guoger","ts":"2018-12-27T10:01:32.703Z"}
{"msg":"i'll do that as part of my WIP stack","username":"guoger","ts":"2018-12-27T10:02:02.596Z"}
{"msg":"Something is off with the chain, I think.... @guoger \nhttps://gerrit.hyperledger.org/r/#/c/28391/8/integration/e2e/etcdraft_reconfig_test.go\nIn this test - I bring up a new OSN - orderer4, and I send a transaction through it:\n```\n\t\t\tBy(\"Submitting a transaction through orderer4\")\n\t\t\tassertInvoke(network, peer, o4, mycc2.Name, \"testchannel2\", \"Chaincode invoke successful. result: status:200\", 0)\n\n\t\t\tBy(\"And ensuring it is propagated amongst all orderers\")\n\t\t\tassertBlockReception(map[string]int{\n\t\t\t\t\"testchannel2\":   3,\n\t\t\t}, orderers, peer, network)\n```\nAll orderers but that OSN commit the transaction :/ \n```\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:26.751 IST [orderer.consensus.etcdraft] run -> INFO 1ee raft.node: 4 elected leader 1 at term 2 {\"channel\": \"testchannel2\", \"node\": 4}\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:26.751 IST [orderer.consensus.etcdraft] serveRaft -> INFO 1ef Raft leader changed: 0 -> 1 {\"channel\": \"testchannel2\", \"node\": 4}\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:26.761 IST [orderer.consensus.etcdraft] Step -> INFO 1f0 7 [term: 1] received a MsgHeartbeat message with higher term from 4 [term: 3] {\"channel\": \"testchannel\", \"\nnode\": 7}\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:26.761 IST [orderer.consensus.etcdraft] becomeFollower -> INFO 1f1 7 became follower at term 3 {\"channel\": \"testchannel\", \"node\": 7}\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:26.761 IST [orderer.consensus.etcdraft] run -> INFO 1f2 raft.node: 7 elected leader 4 at term 3 {\"channel\": \"testchannel\", \"node\": 7}\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:26.762 IST [orderer.consensus.etcdraft] Step -> INFO 1f3 7 [term: 1] received a MsgHeartbeat message with higher term from 4 [term: 4] {\"channel\": \"systemchannel\",\n \"node\": 7}\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:26.762 IST [orderer.consensus.etcdraft] becomeFollower -> INFO 1f4 7 became follower at term 4 {\"channel\": \"systemchannel\", \"node\": 7}\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:26.762 IST [orderer.consensus.etcdraft] run -> INFO 1f5 raft.node: 7 elected leader 4 at term 4 {\"channel\": \"systemchannel\", \"node\": 7}\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:26.766 IST [orderer.consensus.etcdraft] serveRaft -> INFO 1f6 Raft leader changed: 0 -> 4 {\"channel\": \"testchannel\", \"node\": 7}\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:26.767 IST [orderer.consensus.etcdraft] serveRaft -> INFO 1f7 Raft leader changed: 0 -> 4 {\"channel\": \"systemchannel\", \"node\": 7}\nSTEP: Submitting a transaction through orderer4\n[e][Org1.peer1] 2018-12-28 22:55:36.120 IST [endorser] callChaincode -> INFO 0e0 [testchannel2][b504068d] Entry chaincode: name:\"mycc2\" \n[e][Org1.peer1] 2018-12-28 22:55:36.121 IST [peer.chaincode.7c26ujzkrnf45ha2nnbb2y4o6m-Org1.peer1-mycc2-0.0] func2 -> INFO 0e1 ex02 Invoke\n[e][Org1.peer1] 2018-12-28 22:55:36.122 IST [peer.chaincode.7c26ujzkrnf45ha2nnbb2y4o6m-Org1.peer1-mycc2-0.0] func2 -> INFO 0e2 Aval = 90, Bval = 210\n[e][Org1.peer1] 2018-12-28 22:55:36.122 IST [endorser] callChaincode -> INFO 0e3 [testchannel2][b504068d] Exit chaincode: name:\"mycc2\"  (2ms)\n[e][Org1.peer1] 2018-12-28 22:55:36.122 IST [comm.grpc.server] 1 -> INFO 0e4 unary call completed {\"grpc.start_time\": \"2018-12-28T22:55:36.119+02:00\", \"grpc.service\": \"protos.Endorser\", \"grpc.method\": \"Pro\ncessProposal\", \"grpc.peer_address\": \"127.0.0.1:47110\", \"grpc.code\": \"OK\", \"grpc.call_duration\": \"3.543639ms\"}\n[e][Org1.peer1] 2018-12-28 22:55:36.126 IST [common.deliver] deliverBlocks -> INFO 0e5 [channel: testchannel2] Delivering block for (0xc00bd22a80) for 127.0.0.1:47111\n[o][OrdererOrg.orderer1] <<<<<< c.commitC <- block{ 3 }\n[o][OrdererOrg.orderer1] <<<<<< writeBlock( 3 )\n[o][OrdererOrg.orderer1] >>>>>>>>>>> writing block 3 for channel testchannel2\n[o][OrdererOrg.orderer2] <<<<<< c.commitC <- block{ 3 }\n[o][OrdererOrg.orderer2] <<<<<< writeBlock( 3 )\n[o][OrdererOrg.orderer2] >>>>>>>>>>> writing block 3 for channel testchannel2\n[o][OrdererOrg.orderer3] <<<<<< c.commitC <- block{ 3 }\n[o][OrdererOrg.orderer3] <<<<<< writeBlock( 3 )\n[o][OrdererOrg.orderer3] >>>>>>>>>>> writing block 3 for channel testchannel2\n```","username":"yacovm","ts":"2018-12-28T21:11:59.785Z"}
{"msg":"Something is off with the chain, I think.... @guoger \nhttps://gerrit.hyperledger.org/r/#/c/28391/8/integration/e2e/etcdraft_reconfig_test.go\nIn this test - I bring up a new OSN - orderer4, and I send a transaction through it:\n```\n\t\t\tBy(\"Submitting a transaction through orderer4\")\n\t\t\tassertInvoke(network, peer, o4, mycc2.Name, \"testchannel2\", \"Chaincode invoke successful. result: status:200\", 0)\n\n\t\t\tBy(\"And ensuring it is propagated amongst all orderers\")\n\t\t\tassertBlockReception(map[string]int{\n\t\t\t\t\"testchannel2\":   3,\n\t\t\t}, orderers, peer, network)\n```\nAll orderers but that OSN commit the block :/ \n```\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:26.751 IST [orderer.consensus.etcdraft] run -> INFO 1ee raft.node: 4 elected leader 1 at term 2 {\"channel\": \"testchannel2\", \"node\": 4}\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:26.751 IST [orderer.consensus.etcdraft] serveRaft -> INFO 1ef Raft leader changed: 0 -> 1 {\"channel\": \"testchannel2\", \"node\": 4}\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:26.761 IST [orderer.consensus.etcdraft] Step -> INFO 1f0 7 [term: 1] received a MsgHeartbeat message with higher term from 4 [term: 3] {\"channel\": \"testchannel\", \"\nnode\": 7}\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:26.761 IST [orderer.consensus.etcdraft] becomeFollower -> INFO 1f1 7 became follower at term 3 {\"channel\": \"testchannel\", \"node\": 7}\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:26.761 IST [orderer.consensus.etcdraft] run -> INFO 1f2 raft.node: 7 elected leader 4 at term 3 {\"channel\": \"testchannel\", \"node\": 7}\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:26.762 IST [orderer.consensus.etcdraft] Step -> INFO 1f3 7 [term: 1] received a MsgHeartbeat message with higher term from 4 [term: 4] {\"channel\": \"systemchannel\",\n \"node\": 7}\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:26.762 IST [orderer.consensus.etcdraft] becomeFollower -> INFO 1f4 7 became follower at term 4 {\"channel\": \"systemchannel\", \"node\": 7}\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:26.762 IST [orderer.consensus.etcdraft] run -> INFO 1f5 raft.node: 7 elected leader 4 at term 4 {\"channel\": \"systemchannel\", \"node\": 7}\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:26.766 IST [orderer.consensus.etcdraft] serveRaft -> INFO 1f6 Raft leader changed: 0 -> 4 {\"channel\": \"testchannel\", \"node\": 7}\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:26.767 IST [orderer.consensus.etcdraft] serveRaft -> INFO 1f7 Raft leader changed: 0 -> 4 {\"channel\": \"systemchannel\", \"node\": 7}\nSTEP: Submitting a transaction through orderer4\n[e][Org1.peer1] 2018-12-28 22:55:36.120 IST [endorser] callChaincode -> INFO 0e0 [testchannel2][b504068d] Entry chaincode: name:\"mycc2\" \n[e][Org1.peer1] 2018-12-28 22:55:36.121 IST [peer.chaincode.7c26ujzkrnf45ha2nnbb2y4o6m-Org1.peer1-mycc2-0.0] func2 -> INFO 0e1 ex02 Invoke\n[e][Org1.peer1] 2018-12-28 22:55:36.122 IST [peer.chaincode.7c26ujzkrnf45ha2nnbb2y4o6m-Org1.peer1-mycc2-0.0] func2 -> INFO 0e2 Aval = 90, Bval = 210\n[e][Org1.peer1] 2018-12-28 22:55:36.122 IST [endorser] callChaincode -> INFO 0e3 [testchannel2][b504068d] Exit chaincode: name:\"mycc2\"  (2ms)\n[e][Org1.peer1] 2018-12-28 22:55:36.122 IST [comm.grpc.server] 1 -> INFO 0e4 unary call completed {\"grpc.start_time\": \"2018-12-28T22:55:36.119+02:00\", \"grpc.service\": \"protos.Endorser\", \"grpc.method\": \"Pro\ncessProposal\", \"grpc.peer_address\": \"127.0.0.1:47110\", \"grpc.code\": \"OK\", \"grpc.call_duration\": \"3.543639ms\"}\n[e][Org1.peer1] 2018-12-28 22:55:36.126 IST [common.deliver] deliverBlocks -> INFO 0e5 [channel: testchannel2] Delivering block for (0xc00bd22a80) for 127.0.0.1:47111\n[o][OrdererOrg.orderer1] <<<<<< c.commitC <- block{ 3 }\n[o][OrdererOrg.orderer1] <<<<<< writeBlock( 3 )\n[o][OrdererOrg.orderer1] >>>>>>>>>>> writing block 3 for channel testchannel2\n[o][OrdererOrg.orderer2] <<<<<< c.commitC <- block{ 3 }\n[o][OrdererOrg.orderer2] <<<<<< writeBlock( 3 )\n[o][OrdererOrg.orderer2] >>>>>>>>>>> writing block 3 for channel testchannel2\n[o][OrdererOrg.orderer3] <<<<<< c.commitC <- block{ 3 }\n[o][OrdererOrg.orderer3] <<<<<< writeBlock( 3 )\n[o][OrdererOrg.orderer3] >>>>>>>>>>> writing block 3 for channel testchannel2\n```","username":"yacovm","ts":"2018-12-28T21:11:59.785Z"}
{"msg":"Any idea why? ","username":"yacovm","ts":"2018-12-28T21:12:03.433Z"}
{"msg":"As shown in the logs above - orderer4 clearly participates in `testchannel2` - it knows that `1` is the leader of `testchannel2`, and the transaction is clearly sent through orderer4, because after the block is committed, the peer CLI exists and the log prints:\n```\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:36.154 IST [orderer.common.broadcast] Handle -> WARN 1f8 Error reading from 127.0.0.1:40790: rpc error: code = Canceled desc = context canceled\n[e][OrdererOrg.orderer4] 2018-12-28 22:55:36.154 IST [comm.grpc.server] 1 -> INFO 1f9 streaming call completed {\"grpc.start_time\": \"2018-12-28T22:55:36.119+02:00\", \"grpc.service\": \"orderer.AtomicBroadcast\"\n, \"grpc.method\": \"Broadcast\", \"grpc.peer_address\": \"127.0.0.1:40790\", \"error\": \"rpc error: code = Canceled desc = context canceled\", \"grpc.code\": \"Canceled\", \"grpc.call_duration\": \"35.331141ms\"}\n```\nwhich is an abrupt connection close from the client side, when the server side is orderer4","username":"yacovm","ts":"2018-12-28T21:14:51.649Z"}
{"msg":"I added the `<<<<` prints to see if the `commitC` channel gets the block, and it seems that in `orderer4` it doesn't. ","username":"yacovm","ts":"2018-12-28T21:16:13.484Z"}
{"msg":"Now, given the fact that the transaction was sent through orderer4 I deduce that the cluster communication must be OK.... any idea what's the problem, @guoger ? ","username":"yacovm","ts":"2018-12-28T21:16:48.869Z"}
{"msg":"@yacovm do you know how to change log level to debug on orderer4?","username":"guoger","ts":"2018-12-29T06:45:49.147Z"}
{"msg":"Yeah... Via some env var called logging_spec","username":"yacovm","ts":"2018-12-29T07:49:27.662Z"}
{"msg":"in nwo?","username":"guoger","ts":"2018-12-29T08:17:00.334Z"}
{"msg":"In fabric in general","username":"yacovm","ts":"2018-12-29T08:25:47.987Z"}
{"msg":"Look in the documentation, it is documented","username":"yacovm","ts":"2018-12-29T08:25:59.435Z"}
{"msg":"I'm on the phone so can't really link","username":"yacovm","ts":"2018-12-29T08:26:18.736Z"}
{"msg":"oh, thx. I was looking at nwo and trying to find the log level switch in yamls..","username":"guoger","ts":"2018-12-29T08:26:55.377Z"}
{"msg":"Any idea what can be the problem? :thinking:","username":"yacovm","ts":"2018-12-29T08:27:07.554Z"}
{"msg":"sill trying to diagnose...","username":"guoger","ts":"2018-12-29T08:27:17.881Z"}
{"msg":"I think something is wrong with the snapshotting mechanism: \n```\n[e][Org1.peer1] 2018-12-29 11:26:25.202 IST [endorser] callChaincode -> INFO 0dc [testchannel2][4dbf7885] Entry chaincode: name:\"mycc2\" \n[e][Org1.peer1] 2018-12-29 11:26:25.203 IST [peer.chaincode.q2tmhlbjifcsjel3zp2juyohcq-Org1.peer1-mycc2-0.0] func2 -> INFO 0dd ex02 Invoke\n[e][Org1.peer1] 2018-12-29 11:26:25.203 IST [peer.chaincode.q2tmhlbjifcsjel3zp2juyohcq-Org1.peer1-mycc2-0.0] func2 -> INFO 0de Aval = 90, Bval = 210\n[e][Org1.peer1] 2018-12-29 11:26:25.204 IST [endorser] callChaincode -> INFO 0df [testchannel2][4dbf7885] Exit chaincode: name:\"mycc2\"  (2ms)\n[e][Org1.peer1] 2018-12-29 11:26:25.204 IST [comm.grpc.server] 1 -> INFO 0e0 unary call completed {\"grpc.start_time\": \"2018-12-29T11:26:25.201+02:00\", \"grpc.service\": \"protos.Endorser\", \"grpc.method\": \"Pro\ncessProposal\", \"grpc.peer_address\": \"127.0.0.1:43522\", \"grpc.code\": \"OK\", \"grpc.call_duration\": \"3.752881ms\"}\n[o][OrdererOrg.orderer3] >>>>> sending 2 messages: [to: 2, type: MsgApp to: 1, type: MsgApp]\n[o][OrdererOrg.orderer2] >>>>> sending 1 messages: [to: 3, type: MsgAppResp]\n[o][OrdererOrg.orderer1] >>>>> sending 1 messages: [to: 3, type: MsgAppResp]\n[o][OrdererOrg.orderer3] >>>>> going to apply 1 entries of size 3079\n[o][OrdererOrg.orderer3] >>>>> sending 2 messages: [to: 2, type: MsgApp to: 1, type: MsgApp]\n[o][OrdererOrg.orderer2] >>>>> going to apply 1 entries of size 3079\n[o][OrdererOrg.orderer2] >>>>> sending 1 messages: [to: 3, type: MsgAppResp]\n[o][OrdererOrg.orderer1] >>>>> going to apply 1 entries of size 3079\n[o][OrdererOrg.orderer1] >>>>> sending 1 messages: [to: 3, type: MsgAppResp]\n[e][Org1.peer1] 2018-12-29 11:26:25.221 IST [gossip.privdata] StoreBlock -> INFO 0e1 [testchannel2] Received block [3] from buffer\n[e][Org1.peer1] 2018-12-29 11:26:25.222 IST [committer.txvalidator] Validate -> INFO 0e2 [testchannel2] Validated block [3] in 1ms\n[o][OrdererOrg.orderer3] >>>>> sending 3 messages: [to: 2, type: MsgHeartbeat to: 1, type: MsgHeartbeat to: 4, type: MsgHeartbeat]\n[o][OrdererOrg.orderer2] >>>>> sending 1 messages: [to: 3, type: MsgHeartbeatResp]\n[o][OrdererOrg.orderer1] >>>>> sending 1 messages: [to: 3, type: MsgHeartbeatResp]\n[o][OrdererOrg.orderer4] >>>>> sending 1 messages: [to: 3, type: MsgHeartbeatResp]\n[o][OrdererOrg.orderer3] >>>>> sending 1 messages: [to: 4, type: MsgApp]\n[o][OrdererOrg.orderer4] >>>>> sending 1 messages: [to: 3, type: MsgAppResp]\n[o][OrdererOrg.orderer3] >>>>> sending 1 messages: [to: 4, type: MsgApp]\n[o][OrdererOrg.orderer4] >>>>> sending 1 messages: [to: 3, type: MsgAppResp]\n```","username":"yacovm","ts":"2018-12-29T09:39:51.779Z"}
{"msg":"\n```\n[e][Org1.peer1] 2018-12-29 11:26:25.202 IST [endorser] callChaincode -> INFO 0dc [testchannel2][4dbf7885] Entry chaincode: name:\"mycc2\" \n[e][Org1.peer1] 2018-12-29 11:26:25.203 IST [peer.chaincode.q2tmhlbjifcsjel3zp2juyohcq-Org1.peer1-mycc2-0.0] func2 -> INFO 0dd ex02 Invoke\n[e][Org1.peer1] 2018-12-29 11:26:25.203 IST [peer.chaincode.q2tmhlbjifcsjel3zp2juyohcq-Org1.peer1-mycc2-0.0] func2 -> INFO 0de Aval = 90, Bval = 210\n[e][Org1.peer1] 2018-12-29 11:26:25.204 IST [endorser] callChaincode -> INFO 0df [testchannel2][4dbf7885] Exit chaincode: name:\"mycc2\"  (2ms)\n[e][Org1.peer1] 2018-12-29 11:26:25.204 IST [comm.grpc.server] 1 -> INFO 0e0 unary call completed {\"grpc.start_time\": \"2018-12-29T11:26:25.201+02:00\", \"grpc.service\": \"protos.Endorser\", \"grpc.method\": \"Pro\ncessProposal\", \"grpc.peer_address\": \"127.0.0.1:43522\", \"grpc.code\": \"OK\", \"grpc.call_duration\": \"3.752881ms\"}\n[o][OrdererOrg.orderer3] >>>>> sending 2 messages: [to: 2, type: MsgApp to: 1, type: MsgApp]\n[o][OrdererOrg.orderer2] >>>>> sending 1 messages: [to: 3, type: MsgAppResp]\n[o][OrdererOrg.orderer1] >>>>> sending 1 messages: [to: 3, type: MsgAppResp]\n[o][OrdererOrg.orderer3] >>>>> going to apply 1 entries of size 3079\n[o][OrdererOrg.orderer3] >>>>> sending 2 messages: [to: 2, type: MsgApp to: 1, type: MsgApp]\n[o][OrdererOrg.orderer2] >>>>> going to apply 1 entries of size 3079\n[o][OrdererOrg.orderer2] >>>>> sending 1 messages: [to: 3, type: MsgAppResp]\n[o][OrdererOrg.orderer1] >>>>> going to apply 1 entries of size 3079\n[o][OrdererOrg.orderer1] >>>>> sending 1 messages: [to: 3, type: MsgAppResp]\n[e][Org1.peer1] 2018-12-29 11:26:25.221 IST [gossip.privdata] StoreBlock -> INFO 0e1 [testchannel2] Received block [3] from buffer\n[e][Org1.peer1] 2018-12-29 11:26:25.222 IST [committer.txvalidator] Validate -> INFO 0e2 [testchannel2] Validated block [3] in 1ms\n[o][OrdererOrg.orderer3] >>>>> sending 3 messages: [to: 2, type: MsgHeartbeat to: 1, type: MsgHeartbeat to: 4, type: MsgHeartbeat]\n[o][OrdererOrg.orderer2] >>>>> sending 1 messages: [to: 3, type: MsgHeartbeatResp]\n[o][OrdererOrg.orderer1] >>>>> sending 1 messages: [to: 3, type: MsgHeartbeatResp]\n[o][OrdererOrg.orderer4] >>>>> sending 1 messages: [to: 3, type: MsgHeartbeatResp]\n[o][OrdererOrg.orderer3] >>>>> sending 1 messages: [to: 4, type: MsgApp]\n[o][OrdererOrg.orderer4] >>>>> sending 1 messages: [to: 3, type: MsgAppResp]\n[o][OrdererOrg.orderer3] >>>>> sending 1 messages: [to: 4, type: MsgApp]\n[o][OrdererOrg.orderer4] >>>>> sending 1 messages: [to: 3, type: MsgAppResp]\n```","username":"yacovm","ts":"2018-12-29T09:39:51.779Z"}
{"msg":"orderer4 keeps _rejecting_ MsgApp for block 3 from leader in `testchannel2`, however leader does not have any older data to offer... i'll keep digging..","username":"guoger","ts":"2018-12-29T09:59:32.378Z"}
{"msg":"OK, thanks","username":"yacovm","ts":"2018-12-29T10:03:05.926Z"}
{"msg":"looks like the leader tries to sync `orderer4` with entries of term 2 but it rejects them, and then it tries to sync with term 1 and it doesn't reject them.\nafter a while, it sends again, term2, and it rejects again, etc. etc.\n```\n[o][OrdererOrg.orderer2] testchannel2 >>>>> sending 1 messages: [to: 4, type: MsgApp, term 2, reject? false, size: 38400, entries: [EntryNormal EntryNormal EntryConfChange EntryNormal]]\n[o][OrdererOrg.orderer4] testchannel2 >>>>> sending 1 messages: [to: 2, type: MsgAppResp, term 0, reject? true, size: 28, entries: []]\n[o][OrdererOrg.orderer2] testchannel2 >>>>> sending 1 messages: [to: 4, type: MsgApp, term 1, reject? false, size: 38408, entries: [EntryNormal EntryNormal EntryNormal EntryConfChange EntryNormal]]\n[o][OrdererOrg.orderer4] testchannel2 >>>>> sending 1 messages: [to: 2, type: MsgAppResp, term 0, reject? false, size: 28, entries: []]\n```\n[o][OrdererOrg.orderer2] testchannel2 >>>>> sending 1 messages: [to: 4, type: MsgApp, term 2, reject? false, size: 38400, entries: [EntryNormal EntryNormal EntryConfChange EntryNormal]]\n[o][OrdererOrg.orderer4] testchannel2 >>>>> sending 1 messages: [to: 2, type: MsgAppResp, term 0, reject? true, size: 28, entries: []]\n[o][OrdererOrg.orderer2] testchannel2 >>>>> sending 1 messages: [to: 4, type: MsgApp, term 1, reject? false, size: 38408, entries: [EntryNormal EntryNormal EntryNormal EntryConfChange EntryNormal]]\n[o][OrdererOrg.orderer4] testchannel2 >>>>> sending 1 messages: [to: 2, type: MsgAppResp, term 0, reject? false, size: 28, entries: []]\n\n```\n```","username":"yacovm","ts":"2018-12-29T12:10:07.957Z"}
{"msg":"looks like the leader tries to sync `orderer4` with entries of term 2 but it rejects them, and then it tries to sync with term 1 and it doesn't reject them.\nafter a while, it sends again, term2, and it rejects again, etc. etc.\n```\n[o][OrdererOrg.orderer2] testchannel2 >>>>> sending 1 messages: [to: 4, type: MsgApp, term 2, reject? false, size: 38400, entries: [EntryNormal EntryNormal EntryConfChange EntryNormal]]\n[o][OrdererOrg.orderer4] testchannel2 >>>>> sending 1 messages: [to: 2, type: MsgAppResp, term 0, reject? true, size: 28, entries: []]\n[o][OrdererOrg.orderer2] testchannel2 >>>>> sending 1 messages: [to: 4, type: MsgApp, term 1, reject? false, size: 38408, entries: [EntryNormal EntryNormal EntryNormal EntryConfChange EntryNormal]]\n[o][OrdererOrg.orderer4] testchannel2 >>>>> sending 1 messages: [to: 2, type: MsgAppResp, term 0, reject? false, size: 28, entries: []]\n```\n[o][OrdererOrg.orderer2] testchannel2 >>>>> sending 1 messages: [to: 4, type: MsgApp, term 2, reject? false, size: 38400, entries: [EntryNormal EntryNormal EntryConfChange EntryNormal]]\n[o][OrdererOrg.orderer4] testchannel2 >>>>> sending 1 messages: [to: 2, type: MsgAppResp, term 0, reject? true, size: 28, entries: []]\n[o][OrdererOrg.orderer2] testchannel2 >>>>> sending 1 messages: [to: 4, type: MsgApp, term 1, reject? false, size: 38408, entries: [EntryNormal EntryNormal EntryNormal EntryConfChange EntryNormal]]\n[o][OrdererOrg.orderer4] testchannel2 >>>>> sending 1 messages: [to: 2, type: MsgAppResp, term 0, reject? false, size: 28, entries: []]\n\n```\n","username":"yacovm","ts":"2018-12-29T12:10:07.957Z"}
{"msg":"looks like the leader tries to sync `orderer4` with entries of term 2 but it rejects them, and then it tries to sync with term 1 and it doesn't reject them.\nafter a while, it sends again, term2, and it rejects again, etc. etc.\n```\n[o][OrdererOrg.orderer2] testchannel2 >>>>> sending 1 messages: [to: 4, type: MsgApp, term 2, reject? false, size: 38400, entries: [EntryNormal EntryNormal EntryConfChange EntryNormal]]\n[o][OrdererOrg.orderer4] testchannel2 >>>>> sending 1 messages: [to: 2, type: MsgAppResp, term 0, reject? true, size: 28, entries: []]\n[o][OrdererOrg.orderer2] testchannel2 >>>>> sending 1 messages: [to: 4, type: MsgApp, term 1, reject? false, size: 38408, entries: [EntryNormal EntryNormal EntryNormal EntryConfChange EntryNormal]]\n[o][OrdererOrg.orderer4] testchannel2 >>>>> sending 1 messages: [to: 2, type: MsgAppResp, term 0, reject? false, size: 28, entries: []]\n```\n```\n[o][OrdererOrg.orderer2] testchannel2 >>>>> sending 1 messages: [to: 4, type: MsgApp, term 2, reject? false, size: 38400, entries: [EntryNormal EntryNormal EntryConfChange EntryNormal]]\n[o][OrdererOrg.orderer4] testchannel2 >>>>> sending 1 messages: [to: 2, type: MsgAppResp, term 0, reject? true, size: 28, entries: []]\n[o][OrdererOrg.orderer2] testchannel2 >>>>> sending 1 messages: [to: 4, type: MsgApp, term 1, reject? false, size: 38408, entries: [EntryNormal EntryNormal EntryNormal EntryConfChange EntryNormal]]\n[o][OrdererOrg.orderer4] testchannel2 >>>>> sending 1 messages: [to: 2, type: MsgAppResp, term 0, reject? false, size: 28, entries: []]\n\n```\n","username":"yacovm","ts":"2018-12-29T12:10:07.957Z"}
{"msg":"@guoger any idea what's going on? ","username":"yacovm","ts":"2018-12-29T12:10:38.582Z"}
{"msg":"problem still remains unsolved, but one thing i could currently see is that this message pattern can be observed with our [type b config UT](https://github.com/hyperledger/fabric/blob/d3e80320e5bd97bf7e1232f327be6377c66e3d5f/orderer/consensus/etcdraft/chain_test.go#L1375). Rejection goes away when a new message is proposed in UT. still trying to figure out why 1) new node keeps rejecting MsgApp 2) why block is not committed in integration tests","username":"guoger","ts":"2018-12-29T13:53:32.053Z"}
{"msg":"problem still remains unsolved, but one thing i could currently see is that this message pattern can be observed with our [type b config UT](https://github.com/hyperledger/fabric/blob/d3e80320e5bd97bf7e1232f327be6377c66e3d5f/orderer/consensus/etcdraft/chain_test.go#L1375). Although _Rejection goes away when a new message is proposed in UT_. still trying to figure out why 1) new node keeps rejecting MsgApp 2) why block is not committed in integration tests","username":"guoger","ts":"2018-12-29T13:53:32.053Z"}
{"msg":"problem still remains unsolved, but one thing i could currently see is that this message pattern can be observed with our [type b config UT](https://github.com/hyperledger/fabric/blob/d3e80320e5bd97bf7e1232f327be6377c66e3d5f/orderer/consensus/etcdraft/chain_test.go#L1375). ~Although _Rejection goes away when a new message is proposed in UT_~ leader simply probes new follower for its current state. still trying to figure out why ~1) new node keeps rejecting MsgApp~ 2) why block is not committed in integration tests","username":"guoger","ts":"2018-12-29T13:53:32.053Z"}
{"msg":"what do you mean the message pattern can be observed? @guoger ?","username":"yacovm","ts":"2018-12-29T15:10:01.305Z"}
{"msg":"that is sends `iterm i` and then term `i-1` ? ","username":"yacovm","ts":"2018-12-29T15:10:16.786Z"}
{"msg":"when new node joins network, leader tries to replicate latest entry to it, which will be rejected. then leader decrease to lower term/index, and try again","username":"guoger","ts":"2018-12-29T15:11:13.305Z"}
{"msg":"I see","username":"yacovm","ts":"2018-12-29T15:11:32.333Z"}
{"msg":"so, the problem is, when joining a node to existing network, raft should be booted with empty `startPeers`, see https://github.com/etcd-io/etcd/blob/cc8d446a6ec334d7a10a291279b77389b4f2faf7/contrib/raftexample/raft.go#L290-L292","username":"guoger","ts":"2018-12-29T16:42:38.139Z"}
{"msg":"so, the problem is, when joining a node to existing network, raft should be booted with empty `startPeers`, see [this](https://github.com/etcd-io/etcd/blob/cc8d446a6ec334d7a10a291279b77389b4f2faf7/contrib/raftexample/raft.go#L290-L292)","username":"guoger","ts":"2018-12-29T16:42:38.139Z"}
{"msg":"but in our code, it boots with a complete list of nodes in network, [here](https://github.com/hyperledger/fabric/blob/d3e80320e5bd97bf7e1232f327be6377c66e3d5f/orderer/consensus/etcdraft/consenter.go#L120)","username":"guoger","ts":"2018-12-29T16:44:13.036Z"}
{"msg":"I'll try to push a fix tomorrow","username":"guoger","ts":"2018-12-29T16:44:36.361Z"}
{"msg":"created FAB-13456 I'll try to push a fix tomorrow","username":"guoger","ts":"2018-12-29T16:44:36.361Z"}
{"msg":"cc @yacovm ","username":"guoger","ts":"2018-12-29T16:48:08.161Z"}
{"msg":"thanks @guoger ... I am wondering - how can we tell whether we join an existing network or not? :thinking: ","username":"yacovm","ts":"2018-12-29T17:18:27.763Z"}
{"msg":"oh, but I think we already do that, no?\n```\n\tif c.fresh {\n\t\tc.logger.Info(\"starting new raft node\")\n\t\tc.node = raft.StartNode(config, raftPeers)\n\t} else {\n\t\tc.logger.Info(\"restarting raft node\")\n\t\tc.node = raft.RestartNode(config)\n\t}\n```","username":"yacovm","ts":"2018-12-29T17:27:07.064Z"}
{"msg":"when a node is started, it's one of:\n- fresh new node within fresh cluster\n- fresh new node joining existing cluster\n- restarted node with some existing data (wal) (and obviously it's part of existing cluster)","username":"guoger","ts":"2018-12-29T17:28:46.816Z"}
{"msg":"the code snippet you posted is to differentiate 3) from others","username":"guoger","ts":"2018-12-29T17:29:23.715Z"}
{"msg":"however, it doesn't help with 1) and 2)","username":"guoger","ts":"2018-12-29T17:29:30.380Z"}
{"msg":"oh \n`[e][OrdererOrg.orderer4] 2018-12-29 14:01:47.025 IST [orderer.consensus.etcdraft] Start -> INFO 134 starting new raft node {\"channel\": \"testchannel2\", \"node\": 4}`\n","username":"yacovm","ts":"2018-12-29T17:30:04.163Z"}
{"msg":"how come it prints this? it shouldn't have the WAL at that point","username":"yacovm","ts":"2018-12-29T17:30:38.711Z"}
{"msg":"if it has wal, it'll print `Restarting raft node`","username":"guoger","ts":"2018-12-29T17:31:10.190Z"}
{"msg":"oh i see","username":"yacovm","ts":"2018-12-29T17:31:28.423Z"}
{"msg":"so, how are we going to solve this then?","username":"yacovm","ts":"2018-12-29T17:31:39.675Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=YpCMiAqH55tsbMkQJ) @yacovm i was wondering the same... and need some input from you :)","username":"guoger","ts":"2018-12-29T17:31:40.811Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=YpCMiAqH55tsbMkQJ","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=YpCMiAqH55tsbMkQJ","remote":true,"fileId":null,"fileName":null}]}
{"msg":"hehe","username":"yacovm","ts":"2018-12-29T17:31:48.548Z"}
{"msg":"You said you're going to push a fix so i thought you have a solution ;) ","username":"yacovm","ts":"2018-12-29T17:32:00.895Z"}
{"msg":"In theory we can look at the config block before or something like that, but - i don't understand the etcdraft problem with having a list of peers in the first place... why is that an issue?","username":"yacovm","ts":"2018-12-29T17:32:43.245Z"}
{"msg":"hehe, that why i put \"try\" there, cuz i need to read some onboarding work first...","username":"guoger","ts":"2018-12-29T17:33:06.321Z"}
{"msg":"if a node is to join a cluster, it should have a config block already?","username":"guoger","ts":"2018-12-29T17:33:09.630Z"}
{"msg":"when you onboard a cluster, you just get the blocks until (including) the latest config block","username":"yacovm","ts":"2018-12-29T17:33:48.479Z"}
{"msg":"it's like someone takes your hard drive, puts there the blockchain","username":"yacovm","ts":"2018-12-29T17:34:00.113Z"}
{"msg":"and then restarts your OSN node","username":"yacovm","ts":"2018-12-29T17:34:05.568Z"}
{"msg":"but i still don't get why the empty list of peers is needed for raft","username":"yacovm","ts":"2018-12-29T17:34:48.523Z"}
{"msg":"> i don't understand the etcdraft problem with having a list of peers in the first place... why is that an issue?\nthe short answer is, the way etcdraft is implemented requires this. I could update the jira with a more verbose description tomorrow","username":"guoger","ts":"2018-12-29T17:34:50.443Z"}
{"msg":"fairly late here and having an early flight to catch. but i'll keep you posted","username":"guoger","ts":"2018-12-29T17:35:45.181Z"}
{"msg":"> // It appends a ConfChangeAddNode entry for each given peer to the initial log.\nI think it's because of this","username":"yacovm","ts":"2018-12-29T17:36:01.727Z"}
{"msg":"when you do `StartNode`, it appends your config entry to the log","username":"yacovm","ts":"2018-12-29T17:36:18.985Z"}
{"msg":"so you reject the config change of term 2","username":"yacovm","ts":"2018-12-29T17:36:27.096Z"}
{"msg":"because I think what you put in the log maybe is different or something","username":"yacovm","ts":"2018-12-29T17:36:48.553Z"}
{"msg":"`e := pb.Entry{Type: pb.EntryConfChange, Term: 1, Index: r.raftLog.lastIndex() + 1, Data: d}`","username":"yacovm","ts":"2018-12-29T17:37:05.286Z"}
{"msg":"this is what it puts in its log","username":"yacovm","ts":"2018-12-29T17:37:11.370Z"}
{"msg":"I see now what's the problem","username":"yacovm","ts":"2018-12-29T17:37:19.470Z"}
{"msg":"in Term1 - orderer 4 doesn't exist at all","username":"yacovm","ts":"2018-12-29T17:37:36.552Z"}
{"msg":"so when you call `StartNode` the config you persist in the log never happened in the rest of the cluster","username":"yacovm","ts":"2018-12-29T17:37:58.899Z"}
{"msg":"since you didn't exist in term 1 for everyone else","username":"yacovm","ts":"2018-12-29T17:38:11.029Z"}
{"msg":"I have an idea @guoger  - what if we put in `raftPeers := RaftPeers(c.opts.RaftMetadata.Consenters)` all peers but ourselves, in case we are \"fresh\" ? ","username":"yacovm","ts":"2018-12-29T17:39:33.589Z"}
{"msg":"can that work?","username":"yacovm","ts":"2018-12-29T17:39:36.914Z"}
{"msg":"wdyt?","username":"yacovm","ts":"2018-12-29T17:39:43.902Z"}
{"msg":"oh i have an idea... if you don't have a WAL, BUT you have blocks in the ledger, it means you also joined the cluster","username":"yacovm","ts":"2018-12-29T17:44:58.653Z"}
{"msg":"that's what i thought first, but I wasn't sure if it work in the context of onboarding","username":"guoger","ts":"2018-12-29T17:47:33.405Z"}
{"msg":"let me try and see if it works","username":"yacovm","ts":"2018-12-29T17:47:41.493Z"}
{"msg":"cool","username":"guoger","ts":"2018-12-29T17:48:07.102Z"}
{"msg":"ttyl","username":"guoger","ts":"2018-12-29T17:48:11.844Z"}
{"msg":"ok that didn't go quite well....","username":"yacovm","ts":"2018-12-29T18:51:37.270Z"}
{"msg":"so, i don't get this... \n`[e][OrdererOrg.orderer4] 2018-12-29 21:00:38.538 IST [orderer.consensus.etcdraft] Start -> INFO 0b2 testchannel starting new raft node {\"channel\": \"testchannel\", \"node\": 7}`\n`[e][OrdererOrg.orderer4] 2018-12-29 21:00:38.550 IST [orderer.consensus.etcdraft] Start -> INFO 0c6 systemchannel starting new raft node {\"channel\": \"systemchannel\", \"node\": 7}`\nfor the system channel and testchannel, this all works well, and it starts a fresh node. \nHow does it work then, if we said that when you join a node - you need to make it print `restarting raft node` (start with a nil membership) ?","username":"yacovm","ts":"2018-12-29T19:14:14.369Z"}
{"msg":" it works!! :woo:\n```\nRan 1 of 12 Specs in 74.003 seconds\nSUCCESS! -- 1 Passed | 0 Failed | 0 Pending | 11 Skipped\nPASS\n```\n\nWhat I did to fix was:\n```\n\t//fresh := !wal.Exist(opts.WALDir)\n\tfresh := height == 1\n```","username":"yacovm","ts":"2018-12-29T19:26:37.856Z"}
{"msg":"While I tested this, what is left to test is what happens when an existing cluster that no node is fresh, is restarted together (shut down all nodes and then bring them all up).","username":"yacovm","ts":"2018-12-29T19:58:37.053Z"}
{"msg":"my hypothesis is that in such a case, the state should contain the last membership, and this way it still work. ","username":"yacovm","ts":"2018-12-29T19:59:10.964Z"}
{"msg":"my hypothesis is that in such a case, the state should contain the last membership, and this way it will still work. ","username":"yacovm","ts":"2018-12-29T19:59:10.964Z"}
{"msg":"@guoger I'll let you push a change set tomorrow so I can +2 and find another maintainer who is not in Christmas winter hibernation....","username":"yacovm","ts":"2018-12-29T20:01:11.624Z"}
{"msg":"Sure","username":"guoger","ts":"2018-12-29T23:06:33.842Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=qmqDEw53gy2Lv5tuc) @yacovm yep, nodes would be _restarting_ in this case, and obtain membership from persisted data.","username":"guoger","ts":"2018-12-30T00:36:08.458Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=qmqDEw53gy2Lv5tuc","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=qmqDEw53gy2Lv5tuc","remote":true,"fileId":null,"fileName":null}]}
{"msg":"pushed https://gerrit.hyperledger.org/r/28402","username":"guoger","ts":"2018-12-30T01:48:33.110Z"}
{"msg":"should be an easy review: https://gerrit.hyperledger.org/r/c/28475/  @yacovm @C0rWin ","username":"guoger","ts":"2019-01-04T06:41:35.251Z"}
{"msg":"Hello, I tried to install and instantiate two chaincodes concurrently using locust, peer endorses install and instantiation proposals and then it fails on sending instantiate proposal to orderer, does anyone has an idea what might be happening?","username":"StefanKosc","ts":"2019-01-04T08:54:51.194Z"}
{"msg":"Hello, I tried to install and instantiate two chaincodes concurrently using locust, peer endorses install and instantiation proposals and then it freezes and then timeouts on sending instantiate proposal to orderer, does anyone has an idea what might be happening?","username":"StefanKosc","ts":"2019-01-04T08:54:51.194Z"}
{"msg":"Hello, I tried to install and instantiate two chaincodes concurrently using locust, peer endorses install and instantiation proposals and then it freezes and then timeouts on sending instantiate proposal to orderer, does anyone has an idea what might be happening? the result is that the system breaks and chaincodes cannot be installed and instantiated anymore","username":"StefanKosc","ts":"2019-01-04T08:54:51.194Z"}
{"msg":"Hello, I tried to install and instantiate two chaincodes concurrently using locust, sdk freezes after sending instantiate proposals to orderer. In orderer logs it looks that everything is ok and proposals have been endorsed but nothing else happens in sdk, any ideas what might be happening?","username":"StefanKosc","ts":"2019-01-04T11:09:12.837Z"}
{"msg":"Hi everyone! As I'm slowly coming back up to speed (reviewing past CRs that have been merged but I missed, etc.), please add me to any pending CRs that you'd like me to have a look at. Thanks!","username":"kostas","ts":"2019-01-04T21:27:57.747Z"}
{"msg":"@kostas Please take a look at this chain:\nhttps://gerrit.hyperledger.org/r/#/c/27822/\nhttps://gerrit.hyperledger.org/r/#/c/28113/\nhttps://gerrit.hyperledger.org/r/#/c/28155/\nhttps://gerrit.hyperledger.org/r/#/c/28435/\nhttps://gerrit.hyperledger.org/r/#/c/28439/\nIt covers the consensus-type migration green path end-to-end including integration tests.\n@guoger This work may collide with some of the work you do on the etcdraft/chain, so please take note to the developments there, any comment is welcome.","username":"tock","ts":"2019-01-06T11:00:53.716Z"}
{"msg":"@kostas Please take a look at this chain:\nhttps://gerrit.hyperledger.org/r/#/c/27822/\nhttps://gerrit.hyperledger.org/r/#/c/28113/\nhttps://gerrit.hyperledger.org/r/#/c/28155/\nhttps://gerrit.hyperledger.org/r/#/c/28435/\nhttps://gerrit.hyperledger.org/r/#/c/28439/\nIt covers the consensus-type migration green path end-to-end including integration tests.\n@guoger  This work may collide with some of the work you do on the etcdraft/chain, so please take note to the developments there, any comment is welcome.","username":"tock","ts":"2019-01-06T11:00:53.716Z"}
{"msg":"@kostas @jyellick @yacovm @C0rWin  Please take a look at this chain:\nhttps://gerrit.hyperledger.org/r/#/c/27822/\nhttps://gerrit.hyperledger.org/r/#/c/28113/\nhttps://gerrit.hyperledger.org/r/#/c/28155/\nhttps://gerrit.hyperledger.org/r/#/c/28435/\nhttps://gerrit.hyperledger.org/r/#/c/28439/\nIt covers the consensus-type migration green path end-to-end including integration tests.\n@guoger  This work may collide with some of the work you do on the etcdraft/chain, so please take note to the developments there, any comment is welcome.","username":"tock","ts":"2019-01-06T11:00:53.716Z"}
{"msg":"Note that the respective JIRA items contain a more detailed description than what is included in the commit message, so look there when you review. ","username":"tock","ts":"2019-01-06T11:02:52.670Z"}
{"msg":"working on [slides](https://docs.google.com/presentation/d/1H_aajW2mDsKa8Q-mayvEI-p2brl4O0jRsfcC6O8t2rg/edit?usp=sharing) for community playback. pls give it a look and leave some comments if you find anything missing/inaccurate/redundant, thx in advance!","username":"guoger","ts":"2019-01-07T09:35:55.064Z"}
{"msg":"I think we should add a slide about the fact that nodes identify each other by their TLS certificates","username":"yacovm","ts":"2019-01-07T09:39:49.869Z"}
{"msg":"and stress out that you have to run EtcdRaft OSNs only with TLS","username":"yacovm","ts":"2019-01-07T09:40:01.152Z"}
{"msg":"And to explain that we prevent a sybil attack of connection foreign OSNs by having the OSNs authenticate each other via TLS pinning","username":"yacovm","ts":"2019-01-07T09:40:49.039Z"}
{"msg":"Also instead of `Replicator` let's call this `Replication` ","username":"yacovm","ts":"2019-01-07T09:41:14.099Z"}
{"msg":"and I wouldn't put the slide of the interface of the gRPC layer in the slides","username":"yacovm","ts":"2019-01-07T09:42:22.778Z"}
{"msg":"community cares about functionality, less about implementation IMO","username":"yacovm","ts":"2019-01-07T09:42:31.110Z"}
{"msg":"a nit, but I would not put `channel C` on slide 4 with two nodes only","username":"C0rWin","ts":"2019-01-07T09:46:20.485Z"}
{"msg":"> and stress out that you have to run EtcdRaft OSNs only with TLS\n\nto add to it, there are two TLS certificates, for cluster communication and for clients","username":"C0rWin","ts":"2019-01-07T09:47:01.986Z"}
{"msg":"","username":"C0rWin","ts":"2019-01-07T09:47:46.690Z","attachments":[{"type":"file","title":"Clipboard - January 7, 2019 11:47 AM","title_link":"/file-upload/CwLPeio94sQvBw9je/Clipboard%20-%20January%207,%202019%2011:47%20AM","image_url":"/file-upload/CwLPeio94sQvBw9je/Clipboard%20-%20January%207,%202019%2011:47%20AM","image_type":"image/png","image_size":129597,"url":"/file-upload/CwLPeio94sQvBw9je/Clipboard%20-%20January%207,%202019%2011:47%20AM","remote":false,"fileId":"CwLPeio94sQvBw9je","fileName":"Clipboard - January 7, 2019 11:47 AM"}]}
{"msg":"this diagram very confusing, since it makes think that OSNs consumes from kafka different transactions, while they are using kafka topic per channel and within the channel there is offsets per blocks","username":"C0rWin","ts":"2019-01-07T09:49:07.240Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=jwWA6hZdMgABmujHQ) @C0rWin because of different color on txs?","username":"guoger","ts":"2019-01-07T09:51:17.904Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=jwWA6hZdMgABmujHQ","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=jwWA6hZdMgABmujHQ","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=fkeYH4mTe8GfBCwJY) @guoger yes, I'm guessing you wanted to show that orderes using topic per channel. but it look different ","username":"C0rWin","ts":"2019-01-07T09:52:24.215Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=fkeYH4mTe8GfBCwJY","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=fkeYH4mTe8GfBCwJY","remote":true,"fileId":null,"fileName":null}]}
{"msg":"huh, actually i did not intend to indicate anything related to channels... (put differently, that diagram only shows one channel)","username":"guoger","ts":"2019-01-07T09:54:01.309Z"}
{"msg":"txs are put in different color only for visual effect. but clearly it already causes confusion :P","username":"guoger","ts":"2019-01-07T09:55:09.200Z"}
{"msg":"maybe in the same color? wdyt @C0rWin ","username":"guoger","ts":"2019-01-07T09:55:18.854Z"}
{"msg":"same color will be fine, I guess","username":"C0rWin","ts":"2019-01-07T10:42:51.546Z"}
{"msg":"same color will be fine, I guess @guoger ","username":"C0rWin","ts":"2019-01-07T10:42:51.546Z"}
{"msg":"when is the community playback? @guoger ","username":"C0rWin","ts":"2019-01-07T10:48:15.400Z"}
{"msg":"@guoger one more thing :) \ninstead of writing \"reusable\" I think it's better phrased as \"independent of consensus plugin\", what do you think?","username":"yacovm","ts":"2019-01-07T11:26:22.105Z"}
{"msg":"maybe i have missed some details in the past, but did we enforce the system channel to be run on all OSNs? Can an OSN not be part of the system channel and still serve another channel?","username":"adarshsaraf123","ts":"2019-01-07T11:27:41.687Z"}
{"msg":"all OSNs run the system channel. Otherwise they can't know about channel creation. \nan application channel can service only a subset of OSNs ","username":"yacovm","ts":"2019-01-07T11:28:44.075Z"}
{"msg":"all OSNs run the system channel. Otherwise they can't know about channel creation. \nan application channel can be serviced by only a subset of OSNs ","username":"yacovm","ts":"2019-01-07T11:28:44.075Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=9njQBa5jWu2hP54yg) @C0rWin it's 9am-10am EST","username":"guoger","ts":"2019-01-07T13:03:28.141Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=9njQBa5jWu2hP54yg","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=9njQBa5jWu2hP54yg","remote":true,"fileId":null,"fileName":null}]}
{"msg":"https://wiki.hyperledger.org/projects/fabric/playbacks","username":"kostas","ts":"2019-01-07T13:23:18.982Z"}
{"msg":"What is going on (here)[https://jenkins.hyperledger.org/job/fabric-verify-integration-tests-x86_64/4481/consoleFull] guys? \nIt seems like a transaction was sent but never reached any peer.  `20:50:13 [e][peer-chaincode-invoke] Error: timed out waiting for txid on all peers - proposal response: <nil>` is the error and it happens after we submit a transaction and wait for it to be committed.\nFrom the logs:\n```\n20:50:13 STEP: Submitting a transaction through orderer4\n20:50:13 [e][Org1.peer1] 2019-01-07 18:49:40.565 UTC [endorser] callChaincode -> INFO 0df [testchannel2][16733dee] Entry chaincode: name:\"mycc2\" \n20:50:13 [e][Org1.peer1] 2019-01-07 18:49:40.571 UTC [peer.chaincode.acxteedkxzf7rccv5itrdmjrw4-Org1.peer1-mycc2-0.0] func2 -> INFO 0e0 ex02 Invoke\n20:50:13 [e][Org1.peer1] 2019-01-07 18:49:40.574 UTC [peer.chaincode.acxteedkxzf7rccv5itrdmjrw4-Org1.peer1-mycc2-0.0] func2 -> INFO 0e1 Aval = 90, Bval = 210\n20:50:13 [e][Org1.peer1] 2019-01-07 18:49:40.577 UTC [endorser] callChaincode -> INFO 0e2 [testchannel2][16733dee] Exit chaincode: name:\"mycc2\"  (11ms)\n20:50:13 [e][Org1.peer1] 2019-01-07 18:49:40.578 UTC [comm.grpc.server] 1 -> INFO 0e3 unary call completed {\"grpc.start_time\": \"2019-01-07T18:49:40.556Z\", \"grpc.service\": \"protos.Endorser\", \"grpc.method\": \"ProcessProposal\", \"grpc.peer_address\": \"127.0.0.1:51780\", \"grpc.code\": \"OK\", \"grpc.call_duration\": \"21.837509ms\"}\n20:50:13 [e][OrdererOrg.orderer4] 2019-01-07 18:49:41.567 UTC [orderer.consensus.etcdraft] Step -> INFO 135 4 is starting a new election at term 2 {\"channel\": \"testchannel2\", \"node\": 4}\n20:50:13 [e][OrdererOrg.orderer4] 2019-01-07 18:49:41.568 UTC [orderer.consensus.etcdraft] becomePreCandidate -> INFO 136 4 became pre-candidate at term 2 {\"channel\": \"testchannel2\", \"node\": 4}\n20:50:13 [e][OrdererOrg.orderer4] 2019-01-07 18:49:41.568 UTC [orderer.consensus.etcdraft] poll -> INFO 137 4 received MsgPreVoteResp from 4 at term 2 {\"channel\": \"testchannel2\", \"node\": 4}\n20:50:13 [e][OrdererOrg.orderer4] 2019-01-07 18:49:41.568 UTC [orderer.consensus.etcdraft] campaign -> INFO 138 4 [logterm: 2, index: 7] sent MsgPreVote request to 1 at term 2 {\"channel\": \"testchannel2\", \"node\": 4}\n20:50:13 [e][OrdererOrg.orderer4] 2019-01-07 18:49:41.568 UTC [orderer.consensus.etcdraft] campaign -> INFO 139 4 [logterm: 2, index: 7] sent MsgPreVote request to 2 at term 2 {\"channel\": \"testchannel2\", \"node\": 4}\n20:50:13 [e][OrdererOrg.orderer4] 2019-01-07 18:49:41.568 UTC [orderer.consensus.etcdraft] campaign -> INFO 13a 4 [logterm: 2, index: 7] sent MsgPreVote request to 3 at term 2 {\"channel\": \"testchannel2\", \"node\": 4}\n20:50:13 [e][OrdererOrg.orderer1] 2019-01-07 18:49:41.569 UTC [orderer.consensus.etcdraft] Step -> INFO 721 1 [logterm: 2, index: 7, vote: 3] cast MsgPreVote for 4 [logterm: 2, index: 7] at term 2 {\"channel\": \"testchannel2\", \"node\": 1}\n20:50:13 [e][OrdererOrg.orderer4] 2019-01-07 18:49:41.570 UTC [orderer.consensus.etcdraft] poll -> INFO 13b 4 received MsgPreVoteResp from 1 at term 2 {\"channel\": \"testchannel2\", \"node\": 4}\n20:50:13 [e][OrdererOrg.orderer4] 2019-01-07 18:49:41.570 UTC [orderer.consensus.etcdraft] stepCandidate -> INFO 13c 4 [quorum:3] has received 2 MsgPreVoteResp votes and 0 vote rejections {\"channel\": \"testchannel2\", \"node\": 4}\n20:50:13 [e][OrdererOrg.orderer2] 2019-01-07 18:49:41.571 UTC [orderer.consensus.etcdraft] Step -> INFO 109 2 [logterm: 2, index: 7, vote: 3] cast MsgPreVote for 4 [logterm: 2, index: 7] at term 2 {\"channel\": \"testchannel2\", \"node\": 2}\n20:50:13 [e][OrdererOrg.orderer4] 2019-01-07 18:49:41.572 UTC [orderer.consensus.etcdraft] poll -> INFO 13d 4 received MsgPreVoteResp from 2 at term 2 {\"channel\": \"testchannel2\", \"node\": 4}\n20:50:13 [e][OrdererOrg.orderer4] 2019-01-07 18:49:41.573 UTC [orderer.consensus.etcdraft] stepCandidate -> INFO 13e 4 [quorum:3] has received 3 MsgPreVoteResp votes and 0 vote rejections {\"channel\": \"testchannel2\", \"node\": 4}\n```\nit seems like there was no leader while the chaincode was invoked. But - if there was no leader then how come the OSN didn't return service unavailable? :thinking_face: ","username":"yacovm","ts":"2019-01-07T21:04:12.700Z"}
{"msg":"What is going on here- https://jenkins.hyperledger.org/job/fabric-verify-integration-tests-x86_64/4481/consoleFull  guys? \nIt seems like a transaction was sent but never reached any peer.  `20:50:13 [e][peer-chaincode-invoke] Error: timed out waiting for txid on all peers - proposal response: <nil>` is the error and it happens after we submit a transaction and wait for it to be committed.\nFrom the logs:\n```\n20:50:13 STEP: Submitting a transaction through orderer4\n20:50:13 [e][Org1.peer1] 2019-01-07 18:49:40.565 UTC [endorser] callChaincode -> INFO 0df [testchannel2][16733dee] Entry chaincode: name:\"mycc2\" \n20:50:13 [e][Org1.peer1] 2019-01-07 18:49:40.571 UTC [peer.chaincode.acxteedkxzf7rccv5itrdmjrw4-Org1.peer1-mycc2-0.0] func2 -> INFO 0e0 ex02 Invoke\n20:50:13 [e][Org1.peer1] 2019-01-07 18:49:40.574 UTC [peer.chaincode.acxteedkxzf7rccv5itrdmjrw4-Org1.peer1-mycc2-0.0] func2 -> INFO 0e1 Aval = 90, Bval = 210\n20:50:13 [e][Org1.peer1] 2019-01-07 18:49:40.577 UTC [endorser] callChaincode -> INFO 0e2 [testchannel2][16733dee] Exit chaincode: name:\"mycc2\"  (11ms)\n20:50:13 [e][Org1.peer1] 2019-01-07 18:49:40.578 UTC [comm.grpc.server] 1 -> INFO 0e3 unary call completed {\"grpc.start_time\": \"2019-01-07T18:49:40.556Z\", \"grpc.service\": \"protos.Endorser\", \"grpc.method\": \"ProcessProposal\", \"grpc.peer_address\": \"127.0.0.1:51780\", \"grpc.code\": \"OK\", \"grpc.call_duration\": \"21.837509ms\"}\n20:50:13 [e][OrdererOrg.orderer4] 2019-01-07 18:49:41.567 UTC [orderer.consensus.etcdraft] Step -> INFO 135 4 is starting a new election at term 2 {\"channel\": \"testchannel2\", \"node\": 4}\n20:50:13 [e][OrdererOrg.orderer4] 2019-01-07 18:49:41.568 UTC [orderer.consensus.etcdraft] becomePreCandidate -> INFO 136 4 became pre-candidate at term 2 {\"channel\": \"testchannel2\", \"node\": 4}\n20:50:13 [e][OrdererOrg.orderer4] 2019-01-07 18:49:41.568 UTC [orderer.consensus.etcdraft] poll -> INFO 137 4 received MsgPreVoteResp from 4 at term 2 {\"channel\": \"testchannel2\", \"node\": 4}\n20:50:13 [e][OrdererOrg.orderer4] 2019-01-07 18:49:41.568 UTC [orderer.consensus.etcdraft] campaign -> INFO 138 4 [logterm: 2, index: 7] sent MsgPreVote request to 1 at term 2 {\"channel\": \"testchannel2\", \"node\": 4}\n20:50:13 [e][OrdererOrg.orderer4] 2019-01-07 18:49:41.568 UTC [orderer.consensus.etcdraft] campaign -> INFO 139 4 [logterm: 2, index: 7] sent MsgPreVote request to 2 at term 2 {\"channel\": \"testchannel2\", \"node\": 4}\n20:50:13 [e][OrdererOrg.orderer4] 2019-01-07 18:49:41.568 UTC [orderer.consensus.etcdraft] campaign -> INFO 13a 4 [logterm: 2, index: 7] sent MsgPreVote request to 3 at term 2 {\"channel\": \"testchannel2\", \"node\": 4}\n20:50:13 [e][OrdererOrg.orderer1] 2019-01-07 18:49:41.569 UTC [orderer.consensus.etcdraft] Step -> INFO 721 1 [logterm: 2, index: 7, vote: 3] cast MsgPreVote for 4 [logterm: 2, index: 7] at term 2 {\"channel\": \"testchannel2\", \"node\": 1}\n20:50:13 [e][OrdererOrg.orderer4] 2019-01-07 18:49:41.570 UTC [orderer.consensus.etcdraft] poll -> INFO 13b 4 received MsgPreVoteResp from 1 at term 2 {\"channel\": \"testchannel2\", \"node\": 4}\n20:50:13 [e][OrdererOrg.orderer4] 2019-01-07 18:49:41.570 UTC [orderer.consensus.etcdraft] stepCandidate -> INFO 13c 4 [quorum:3] has received 2 MsgPreVoteResp votes and 0 vote rejections {\"channel\": \"testchannel2\", \"node\": 4}\n20:50:13 [e][OrdererOrg.orderer2] 2019-01-07 18:49:41.571 UTC [orderer.consensus.etcdraft] Step -> INFO 109 2 [logterm: 2, index: 7, vote: 3] cast MsgPreVote for 4 [logterm: 2, index: 7] at term 2 {\"channel\": \"testchannel2\", \"node\": 2}\n20:50:13 [e][OrdererOrg.orderer4] 2019-01-07 18:49:41.572 UTC [orderer.consensus.etcdraft] poll -> INFO 13d 4 received MsgPreVoteResp from 2 at term 2 {\"channel\": \"testchannel2\", \"node\": 4}\n20:50:13 [e][OrdererOrg.orderer4] 2019-01-07 18:49:41.573 UTC [orderer.consensus.etcdraft] stepCandidate -> INFO 13e 4 [quorum:3] has received 3 MsgPreVoteResp votes and 0 vote rejections {\"channel\": \"testchannel2\", \"node\": 4}\n```\nit seems like there was no leader while the chaincode was invoked. But - if there was no leader then how come the OSN didn't return service unavailable? :thinking_face: ","username":"yacovm","ts":"2019-01-07T21:04:12.700Z"}
{"msg":"@yacovm  can you take a look at this? gossip is flaky in unit tests, is this a known problem?","username":"tock","ts":"2019-01-07T21:27:29.202Z"}
{"msg":"https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/7674/console","username":"tock","ts":"2019-01-07T21:27:34.100Z"}
{"msg":"yep","username":"yacovm","ts":"2019-01-07T21:35:44.357Z"}
{"msg":"@yacovm there *is* a leader (3), however its _heartbeats_ do not reach (4) in timely fashion. while (4) is campaigning for leadership, it receives a transaction, and forwards it to (3). Then (4) got elected as new leader. That tx never got committed. Since it is forwarded by follower, client is not notified","username":"guoger","ts":"2019-01-08T06:08:01.572Z"}
{"msg":"the problem is, as log indicates, *(3)* can receive step messages (it acknowledges new leader *(4)*), but not sending step messages out (*(2)* doesn't receive heartbeats neither).","username":"guoger","ts":"2019-01-08T06:10:12.428Z"}
{"msg":"the problem is, as log indicates, *(3)* can receive step messages (it acknowledges new leader *(4)*), but not sending step messages out ( *(2)* doesn't receive heartbeats neither).","username":"guoger","ts":"2019-01-08T06:10:12.428Z"}
{"msg":"Why is client not notified?","username":"yacovm","ts":"2019-01-08T07:46:19.628Z"}
{"msg":"The notification comes from a perr","username":"yacovm","ts":"2019-01-08T07:46:35.458Z"}
{"msg":"*peer","username":"yacovm","ts":"2019-01-08T07:46:38.378Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=8d29bf0e-c01e-4f37-ac05-dc48c6fc5133) @yacovm by client, i mean whoever submits that tx to orderer. It is not notified because that orderer actually successfully forwards tx to leader (and leader actually receives it)","username":"guoger","ts":"2019-01-08T09:03:24.498Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=8d29bf0e-c01e-4f37-ac05-dc48c6fc5133","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=8d29bf0e-c01e-4f37-ac05-dc48c6fc5133","remote":true,"fileId":null,"fileName":null}]}
{"msg":"if it transfers the transaction to the leader then the transaction should be committed","username":"yacovm","ts":"2019-01-08T09:03:51.013Z"}
{"msg":"but it is never committed","username":"yacovm","ts":"2019-01-08T09:03:53.747Z"}
{"msg":"that's the error in the test...","username":"yacovm","ts":"2019-01-08T09:03:59.095Z"}
{"msg":"i guess i was just trying to say, the test failed not because there's no leader, but because leader does not send out step messages. As a matter of why that happened, i haven't figured out yet.","username":"guoger","ts":"2019-01-08T09:07:50.352Z"}
{"msg":"if the leader's heartbeats don't reach (4) then it can't forward to the leader, right? because it doesn't know a leader","username":"yacovm","ts":"2019-01-08T09:11:39.429Z"}
{"msg":"if it doesn't know a leader, and it is not a leader itself - it needs to return a bad status of unavailable to the submit attempt from the client","username":"yacovm","ts":"2019-01-08T09:12:02.397Z"}
{"msg":"think it as one-way pipe","username":"guoger","ts":"2019-01-08T09:15:19.207Z"}
{"msg":"it *does* know a leader","username":"guoger","ts":"2019-01-08T09:15:35.462Z"}
{"msg":"ah... i see","username":"yacovm","ts":"2019-01-08T09:15:45.696Z"}
{"msg":"so, it forwards the message to the leader then... but it never gets into any block","username":"yacovm","ts":"2019-01-08T09:16:52.769Z"}
{"msg":"i suspect that wal sync took too long,\n> [e][OrdererOrg.orderer3] 2019-01-07 18:49:42.154059 W | wal: sync duration of 1.563002974s, expected less than 1s\nand leader was stuck","username":"guoger","ts":"2019-01-08T09:17:08.399Z"}
{"msg":"i suspect that wal sync took too long,\n> [e][OrdererOrg.orderer3] 2019-01-07 18:49:42.154059 W | wal: sync duration of 1.563002974s, expected less than 1s\nand leader was stuck beyond election timeout","username":"guoger","ts":"2019-01-08T09:17:08.399Z"}
{"msg":"hmmm","username":"yacovm","ts":"2019-01-08T09:17:19.061Z"}
{"msg":"i see... ","username":"yacovm","ts":"2019-01-08T09:17:36.644Z"}
{"msg":"but it's only 1.5 seconds","username":"yacovm","ts":"2019-01-08T09:17:55.391Z"}
{"msg":"however, i'll need to give it another look... after playback maybe","username":"guoger","ts":"2019-01-08T09:18:04.919Z"}
{"msg":"ok ok","username":"yacovm","ts":"2019-01-08T09:18:10.122Z"}
{"msg":"election timeout is 1 second","username":"guoger","ts":"2019-01-08T09:18:13.862Z"}
{"msg":"100ms * 10","username":"guoger","ts":"2019-01-08T09:18:27.997Z"}
{"msg":"election timeout is the time of heart-beats?","username":"yacovm","ts":"2019-01-08T09:18:48.971Z"}
{"msg":"no, by default, it's 10 times of heartbeat","username":"guoger","ts":"2019-01-08T09:19:02.110Z"}
{"msg":"got it","username":"yacovm","ts":"2019-01-08T09:19:13.137Z"}
{"msg":"actually, if you happen to know this (which is very likely :P), how am i supposed to use `configtxlator` to create a tx that adds a consenter? my current steps are:\n- fetch `genesis.block`\n- edit `configtx.yaml` to contain one extra consenter, and use `configtxgen` to produce `genesis.udpated.block`\n- `configtxlator compute_update` those two genesis blocks\nHowever I got `no differences detected between original and updated config`.","username":"guoger","ts":"2019-01-08T09:22:41.274Z"}
{"msg":"if I decode them to json and diff, there's difference. @yacovm ","username":"guoger","ts":"2019-01-08T09:23:28.106Z"}
{"msg":"just look at my script","username":"yacovm","ts":"2019-01-08T09:27:28.429Z"}
{"msg":"script?","username":"guoger","ts":"2019-01-08T09:27:51.963Z"}
{"msg":"https://gerrit.hyperledger.org/r/#/c/27734/4/examples/e2e_cli/scripts/script.sh@76","username":"yacovm","ts":"2019-01-08T09:28:08.267Z"}
{"msg":"@yacovm gossip unit test is punishing me again: https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/7686/console\nI think this defies the purpose of unit tests... if 1 out of 3 runs succeeds, people stop looking at these tests results, not to mention the waste of time and resources. I think it is worth identifying the flaky test cases and correcting them or removing them for CI builds.","username":"tock","ts":"2019-01-08T12:04:55.786Z"}
{"msg":"@tock not sure what is your point? ","username":"yacovm","ts":"2019-01-08T14:03:44.581Z"}
{"msg":"this isn't related to #fabric-orderer-dev  :) ","username":"yacovm","ts":"2019-01-08T14:03:59.515Z"}
{"msg":"@yacovm my point is, someone has got to do it, and you are the best man for the job ;-)  (or maybe @C0rWin can do it better then you? :yum:)","username":"tock","ts":"2019-01-08T14:29:39.651Z"}
{"msg":"@tock we are working on this 24/7","username":"C0rWin","ts":"2019-01-08T14:30:52.701Z"}
{"msg":"but I am the best man for any job @tock , not sure what's your point :/ ","username":"yacovm","ts":"2019-01-08T14:31:04.926Z"}
{"msg":"@C0rWin  can fix it if he wants, I don't have any feelings toward gossip","username":"yacovm","ts":"2019-01-08T14:33:33.392Z"}
{"msg":"@tock: Not sure if a new patchset was to be submitted here: https://gerrit.hyperledger.org/r/c/28435/","username":"kostas","ts":"2019-01-08T16:18:38.064Z"}
{"msg":"@tock: Not sure if a new patchset was to be submitted here? https://gerrit.hyperledger.org/r/c/28435/","username":"kostas","ts":"2019-01-08T16:18:38.064Z"}
{"msg":"(I see items marked as Done on the most recent patchset.)","username":"kostas","ts":"2019-01-08T16:18:53.553Z"}
{"msg":"I'll keep reviewing PS6.","username":"kostas","ts":"2019-01-08T16:19:10.865Z"}
{"msg":"Not submitted yet. I am working on you're reviews and commenting as I fix it locally. Will let you know when I push a new one. Thanks for the review!","username":"tock","ts":"2019-01-09T06:37:36.998Z"}
{"msg":"Not submitted yet. I am working on your reviews and commenting as I fix it locally. Will let you know when I push a new one. Thanks for the review!","username":"tock","ts":"2019-01-09T06:37:36.998Z"}
{"msg":"@kostas Not submitted yet. I am working on your reviews and commenting as I fix it locally. Will let you know when I push a new one. Thanks for the review!","username":"tock","ts":"2019-01-09T06:37:36.998Z"}
{"msg":"@guoger , I think we should do [FAB-13438](https://jira.hyperledger.org/browse/FAB-13438), otherwise we diverge from the user experience kafka OSNs give us - return service unavailable when the consensus is faulty. ","username":"yacovm","ts":"2019-01-09T07:33:15.500Z"}
{"msg":"You commented in that JIRA but that was something not really related to what I advocate for :) ","username":"yacovm","ts":"2019-01-09T07:33:42.514Z"}
{"msg":"I infer from gerrit that you have enough things on your plate, so I can just take on this, and push a CR either rebased on top of master or on top of some CR of your choice","username":"yacovm","ts":"2019-01-09T07:34:21.051Z"}
{"msg":"what do you say?","username":"yacovm","ts":"2019-01-09T07:34:23.373Z"}
{"msg":"(It's not like I really want to touch the chain's code, particularly the ginkgo tests(...) but I think that since SVT has more or less started, we should try and close down any functional-altering items as soon as possible)","username":"yacovm","ts":"2019-01-09T07:36:18.308Z"}
{"msg":"(of course, if you want to take this instead - I'm also good with that)","username":"yacovm","ts":"2019-01-09T07:37:09.221Z"}
{"msg":"But I think it should be done, by someone, one way or another... we can't have an OSN be disconnected from the cluster and return on Deliver that everything is great","username":"yacovm","ts":"2019-01-09T07:37:58.421Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=8XrSiuCyZxfS2vzro) @yacovm what's the delta?","username":"guoger","ts":"2019-01-09T11:23:45.888Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=8XrSiuCyZxfS2vzro","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=8XrSiuCyZxfS2vzro","remote":true,"fileId":null,"fileName":null}]}
{"msg":"the delta is 100% ","username":"yacovm","ts":"2019-01-09T11:37:50.747Z"}
{"msg":"I'm not talking about leader stepping down","username":"yacovm","ts":"2019-01-09T11:37:58.274Z"}
{"msg":"to realize \"return service unavailable when the consensus is faulty\", you'll need to detect \"faulty\", right? :)","username":"guoger","ts":"2019-01-09T11:39:09.241Z"}
{"msg":"but we can just probe the soft state no?","username":"yacovm","ts":"2019-01-09T11:40:07.054Z"}
{"msg":"I mean - if the soft state returns there is no leader","username":"yacovm","ts":"2019-01-09T11:40:51.120Z"}
{"msg":"then we should return service unavailable in response to deliver requests","username":"yacovm","ts":"2019-01-09T11:41:02.037Z"}
{"msg":"what we do now, is - we actually serve the block to the client","username":"yacovm","ts":"2019-01-09T11:41:13.098Z"}
{"msg":"but we shouldn't do that","username":"yacovm","ts":"2019-01-09T11:41:16.388Z"}
{"msg":"we should instead make the client go find some other orderer","username":"yacovm","ts":"2019-01-09T11:41:27.027Z"}
{"msg":"a node that _already_ knows there's no leader?","username":"guoger","ts":"2019-01-09T11:43:07.627Z"}
{"msg":"yeah","username":"yacovm","ts":"2019-01-09T11:43:27.124Z"}
{"msg":"that part is fine, but you couldn't really tell whether there's leader or not w/o `CheckQuorum`, right? ","username":"guoger","ts":"2019-01-09T11:50:13.793Z"}
{"msg":"why not?","username":"yacovm","ts":"2019-01-09T11:50:30.401Z"}
{"msg":"don't we do this now?","username":"yacovm","ts":"2019-01-09T11:50:33.701Z"}
{"msg":"when you send a submit RPC","username":"yacovm","ts":"2019-01-09T11:50:42.701Z"}
{"msg":"you check who is the leader","username":"yacovm","ts":"2019-01-09T11:50:48.493Z"}
{"msg":"if it's 0, you return an error back, right>","username":"yacovm","ts":"2019-01-09T11:50:57.880Z"}
{"msg":"if it's 0, you return an error back, right?","username":"yacovm","ts":"2019-01-09T11:50:57.880Z"}
{"msg":"let me rephrase, as an ex-leader, you don't know when to step down, unless somebody else is elected (as the code currently stands)","username":"guoger","ts":"2019-01-09T11:51:20.031Z"}
{"msg":"you're saying that we have a problem of false positive","username":"yacovm","ts":"2019-01-09T11:51:50.681Z"}
{"msg":"but it doesn't mean that there are cases where you know there is no leader","username":"yacovm","ts":"2019-01-09T11:52:01.265Z"}
{"msg":"your proposal is for leaders that are no longer leaders","username":"yacovm","ts":"2019-01-09T11:52:11.930Z"}
{"msg":"I am talking here about a node, in general-  leader or not","username":"yacovm","ts":"2019-01-09T11:52:21.281Z"}
{"msg":"w/o `CheckQuorum`, \"no Raft leader\" only happens when cluster has just started","username":"guoger","ts":"2019-01-09T11:53:38.254Z"}
{"msg":"really?","username":"yacovm","ts":"2019-01-09T11:53:57.681Z"}
{"msg":"even for nodes that were never leaders?","username":"yacovm","ts":"2019-01-09T11:54:11.187Z"}
{"msg":"if a follower doesn't receive heartbeats in timeout, it becomes pre-candidate and start campaigning. in this state, it still recognizes the leader (forwarding tx to it), until it actually becomes candidate","username":"guoger","ts":"2019-01-09T12:01:23.582Z"}
{"msg":"if a follower doesn't receive heartbeats in timeout, it becomes pre-candidate and start pre-voting. in this state, it still recognizes the leader (forwarding tx to it), until it actually becomes candidate","username":"guoger","ts":"2019-01-09T12:01:23.582Z"}
{"msg":"I don't think this is good.... do you?","username":"yacovm","ts":"2019-01-09T12:01:57.058Z"}
{"msg":"why not?","username":"guoger","ts":"2019-01-09T12:02:08.414Z"}
{"msg":"because what happens to the envelope it forwarded to the leader which is not the leader anymore?","username":"yacovm","ts":"2019-01-09T12:02:23.565Z"}
{"msg":"because as a follower, without receiving heartbeats, you don't know if yourself is disconnected, or leader is disconnected","username":"guoger","ts":"2019-01-09T12:02:55.693Z"}
{"msg":"so you start probing, and find out","username":"guoger","ts":"2019-01-09T12:03:19.214Z"}
{"msg":"either yourself can be elected, or you are disconnected","username":"guoger","ts":"2019-01-09T12:03:31.362Z"}
{"msg":"it doesn't matter if it's your fault or the leader's fault - I say that you should return an error back to the user if the leader didn't ping you within a timely manner","username":"yacovm","ts":"2019-01-09T12:03:41.947Z"}
{"msg":"else the envelope the user sent you will be silently discarded","username":"yacovm","ts":"2019-01-09T12:04:11.214Z"}
{"msg":"this way at least you give the client a chance to re-transmit the transaction to another OSN","username":"yacovm","ts":"2019-01-09T12:04:27.761Z"}
{"msg":"i agree that we should return error if we *know* there's no leader. however, we simple are not able to make any guarantees. (packets that are lost on wire are \"silently dropped\" too).\nThere's one case I felt that we should do something about, where follower is disconnected, and just keeps campaigning in vein. It still recognizes leader in softstate.","username":"guoger","ts":"2019-01-09T12:16:30.989Z"}
{"msg":"etcdraft doesn't help us there (CheckQuorum is only for leader)","username":"guoger","ts":"2019-01-09T12:16:44.853Z"}
{"msg":"however, i'd say shouldn't `SendSubmit` call return error in this case? (tcp link is broken)","username":"guoger","ts":"2019-01-09T12:17:22.036Z"}
{"msg":"if packets are lost they are retransmitted because TCP ensures FIFO delivery or an error report","username":"yacovm","ts":"2019-01-09T12:17:46.851Z"}
{"msg":"if you send down a gRPC stream 2 messages, they will never reach in an opposite order","username":"yacovm","ts":"2019-01-09T12:18:05.317Z"}
{"msg":"therefore, packet won't dropped \"silently\", right?","username":"guoger","ts":"2019-01-09T12:18:42.492Z"}
{"msg":">  however, i'd say shouldn't `SendSubmit` call return error in this case? (tcp link is broken) \nso, SendSubmit is asynchronous","username":"yacovm","ts":"2019-01-09T12:18:49.860Z"}
{"msg":"you just put a message down a buffer","username":"yacovm","ts":"2019-01-09T12:18:59.356Z"}
{"msg":"gRPC http/2 transport does the transfer","username":"yacovm","ts":"2019-01-09T12:19:06.778Z"}
{"msg":"if the underlying http/2 layer reaches a conclusion that the stream is broken","username":"yacovm","ts":"2019-01-09T12:19:20.500Z"}
{"msg":"then it returns an error","username":"yacovm","ts":"2019-01-09T12:19:23.501Z"}
{"msg":"I have a question","username":"yacovm","ts":"2019-01-09T12:19:59.324Z"}
{"msg":"I don't understand something","username":"yacovm","ts":"2019-01-09T12:20:03.621Z"}
{"msg":">  etcdraft doesn't help us there (CheckQuorum is only for leader) ","username":"yacovm","ts":"2019-01-09T12:20:09.274Z"}
{"msg":"does it mean that if you're a follower and you start campaign for a leader election because you concluded the leader is down","username":"yacovm","ts":"2019-01-09T12:20:28.044Z"}
{"msg":"but you never, ever, say- within an hour - make contact with the rest of the cluster","username":"yacovm","ts":"2019-01-09T12:20:46.761Z"}
{"msg":"so you effectively have *no leader* in an hour","username":"yacovm","ts":"2019-01-09T12:20:56.090Z"}
{"msg":"my question is....","username":"yacovm","ts":"2019-01-09T12:21:00.935Z"}
{"msg":"what does the soft state return w.r.t the leader number?","username":"yacovm","ts":"2019-01-09T12:21:09.750Z"}
{"msg":"is it 0, or the previous leader ID?","username":"yacovm","ts":"2019-01-09T12:21:16.655Z"}
{"msg":"previous leader ID","username":"guoger","ts":"2019-01-09T12:21:35.103Z"}
{"msg":"oh my god","username":"yacovm","ts":"2019-01-09T12:21:38.187Z"}
{"msg":"this is horrible","username":"yacovm","ts":"2019-01-09T12:21:48.926Z"}
{"msg":"it means if we have an internal cluster issue ","username":"yacovm","ts":"2019-01-09T12:22:08.641Z"}
{"msg":"and you select randomly OSNs ","username":"yacovm","ts":"2019-01-09T12:22:23.171Z"}
{"msg":"and the internal cluster network is down","username":"yacovm","ts":"2019-01-09T12:22:57.011Z"}
{"msg":"or, say - you misconfigured the certificates","username":"yacovm","ts":"2019-01-09T12:23:09.284Z"}
{"msg":"then with probability of (n-1)/n - your transaction goes to /dev/null :/ ","username":"yacovm","ts":"2019-01-09T12:23:24.752Z"}
{"msg":"and you don't know about it...","username":"yacovm","ts":"2019-01-09T12:23:33.620Z"}
{"msg":"haha, it's n/n, because even you get to leader, your tx is not consented","username":"guoger","ts":"2019-01-09T12:24:07.326Z"}
{"msg":"the leader has the check quorum","username":"yacovm","ts":"2019-01-09T12:24:16.912Z"}
{"msg":"so it can return an error ","username":"yacovm","ts":"2019-01-09T12:24:20.650Z"}
{"msg":"at least you know, things are bad","username":"yacovm","ts":"2019-01-09T12:24:35.412Z"}
{"msg":"anyway.... I need to go now, be back later.... I suggest @kostas reads this conversation when he wakes up ","username":"yacovm","ts":"2019-01-09T12:25:03.318Z"}
{"msg":"and we can discuss later here in this channel, or tomorrow on scrum","username":"yacovm","ts":"2019-01-09T12:25:12.686Z"}
{"msg":"sure","username":"guoger","ts":"2019-01-09T12:25:41.710Z"}
{"msg":"> Not submitted yet. I am working on your reviews and commenting as I fix it locally.\n@tock: I hear you. Let's do this instead. Comment locally for your own book-keeping but please do not submit until after your patchset is pushed. Gerrit persists your comments across sessions (even if you close your tab/do not submit the review). This makes bookkeeping easier for the reviewer as well, and is the established norm.","username":"kostas","ts":"2019-01-09T15:16:31.134Z"}
{"msg":"```    // CheckQuorum specifies if the leader should check quorum activity. Leader\n    // steps down when quorum is not active for an electionTimeout.\n    CheckQuorum bool```","username":"kostas","ts":"2019-01-09T15:28:13.424Z"}
{"msg":"```\n// CheckQuorum specifies if the leader should check quorum activity. Leader\n// steps down when quorum is not active for an electionTimeout.\nCheckQuorum bool\n```","username":"kostas","ts":"2019-01-09T15:28:13.424Z"}
{"msg":"First of all, I see this referenced in the discussion and I'm not sure I get how it's connected?","username":"kostas","ts":"2019-01-09T15:29:01.952Z"}
{"msg":"What is quorum activity? Transmission and reception of heartbeats?","username":"kostas","ts":"2019-01-09T15:30:41.372Z"}
{"msg":"Something else?","username":"kostas","ts":"2019-01-09T15:30:44.117Z"}
{"msg":"The one safe conclusion I gather from the discussion is that we cannot rely on `SoftState.Lead` to tell whether a channel is leaderless. (We were hoping it'd be 0, but it isn't.)","username":"kostas","ts":"2019-01-09T15:32:56.825Z"}
{"msg":"And all incoming transactions during this leaderless state get forwarded to the current value of `SoftState.Lead` (which is not accurate, if we're leaderless).","username":"kostas","ts":"2019-01-09T15:34:03.922Z"}
{"msg":"So these transactions are lost.","username":"kostas","ts":"2019-01-09T15:34:15.580Z"}
{"msg":"Assuming `CheckQuorum` is set to `true` --","username":"kostas","ts":"2019-01-09T15:35:23.239Z"}
{"msg":"Even if the leader steps down, we still cannot rely on `SoftState.Lead` (since it would carry that node's ID).","username":"kostas","ts":"2019-01-09T15:35:49.072Z"}
{"msg":"So, forget everything else for a second.","username":"kostas","ts":"2019-01-09T15:36:01.503Z"}
{"msg":"Assuming we only care about the former leader saying \"we don't have a leader!\". How do we do this @guoger? What is the programmatic check?","username":"kostas","ts":"2019-01-09T15:36:40.321Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=APjcwKZmRchr7hpsS) @kostas Enable `CheckQuorum`, former leader will step down when it doesn't receive MsgHeartbeatResp from quorum","username":"guoger","ts":"2019-01-09T15:38:28.314Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=APjcwKZmRchr7hpsS","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=APjcwKZmRchr7hpsS","remote":true,"fileId":null,"fileName":null}]}
{"msg":"it steps down, and sets it to zero","username":"guoger","ts":"2019-01-09T15:39:20.647Z"}
{"msg":"Awesome.","username":"kostas","ts":"2019-01-09T15:39:32.959Z"}
{"msg":"So let's go back to the problem that Yacov is referring to.","username":"kostas","ts":"2019-01-09T15:40:04.976Z"}
{"msg":"He's suggesting that we return service unavailable when the channel is leaderless (basically).","username":"kostas","ts":"2019-01-09T15:40:37.956Z"}
{"msg":"And we said the most recent leader can do this check by himself.","username":"kostas","ts":"2019-01-09T15:41:01.727Z"}
{"msg":"yes","username":"guoger","ts":"2019-01-09T15:41:49.159Z"}
{"msg":"Can we have the followers periodically ping the most recent leader (i.e. the value in their `SoftState.Lead`?) to get that value back?","username":"kostas","ts":"2019-01-09T15:42:01.742Z"}
{"msg":"Either by piggybacking on an existing RPC, or by -gasp- creating a new one?","username":"kostas","ts":"2019-01-09T15:42:24.446Z"}
{"msg":"On a side note: No matter how we go about approaching, this will truly kill our throughput.","username":"kostas","ts":"2019-01-09T15:43:25.521Z"}
{"msg":"I'm kind of surprised that etcd/raft is so laissez-faire about this as well, TBH and this is something I had not picked up on when I was exploring it.","username":"kostas","ts":"2019-01-09T15:43:54.910Z"}
{"msg":"I'm kind of surprised that etcd/raft is so laissez-faire about this as well TBH and this is something I had not picked up on when I was exploring it.","username":"kostas","ts":"2019-01-09T15:43:54.910Z"}
{"msg":"> to get that value back?\nwhich value?","username":"guoger","ts":"2019-01-09T15:44:40.702Z"}
{"msg":"> it steps down, and sets it to zero","username":"kostas","ts":"2019-01-09T15:44:55.266Z"}
{"msg":"My understanding is that the (former) leader's `SoftState.Lead` value is the absolute source of truth.","username":"kostas","ts":"2019-01-09T15:45:16.844Z"}
{"msg":"Well, I can already see how this is not true that I typed it.","username":"kostas","ts":"2019-01-09T15:45:38.007Z"}
{"msg":"what we are really trying to solve is this:\n> if a node is in `Candidate` state, it should return service unavailable","username":"guoger","ts":"2019-01-09T15:46:58.123Z"}
{"msg":"Oh, I see the equivalence.","username":"kostas","ts":"2019-01-09T15:47:34.512Z"}
{"msg":"And your take is?","username":"kostas","ts":"2019-01-09T15:47:46.813Z"}
{"msg":"What prevents us from checking our state and returning the appropriate status?","username":"kostas","ts":"2019-01-09T15:48:02.242Z"}
{"msg":"nothing.. we just don't `RaftState` in `SoftState` today. we can just make use of it, and solve this problem","username":"guoger","ts":"2019-01-09T15:53:30.250Z"}
{"msg":"nothing.. we are just not using `RaftState` in `SoftState` today. we can just make use of it, and solve this problem","username":"guoger","ts":"2019-01-09T15:53:30.250Z"}
{"msg":"instead of using `Lead` in `SoftState`, we turn to use `RaftState ` to determine status.","username":"guoger","ts":"2019-01-09T15:54:37.652Z"}
{"msg":"Perfect.","username":"kostas","ts":"2019-01-09T15:54:45.597Z"}
{"msg":"@yacovm: Does this address the concern?","username":"kostas","ts":"2019-01-09T15:55:11.235Z"}
{"msg":"@kostas @C0rWin @yacovm  Unless there are further comments, I think these two are ready to merge:  https://gerrit.hyperledger.org/r/#/c/28113/  https://gerrit.hyperledger.org/r/#/c/28155/","username":"tock","ts":"2019-01-09T16:08:35.693Z"}
{"msg":"I pushed a big patch that addressed your comments on this one, please review: https://gerrit.hyperledger.org/r/#/c/28435/","username":"tock","ts":"2019-01-09T16:09:33.995Z"}
{"msg":"enabling check quorum won't help","username":"yacovm","ts":"2019-01-09T16:20:14.897Z"}
{"msg":"the leader might step down but the followers might not see that if they are disconnected to it","username":"yacovm","ts":"2019-01-09T16:20:34.612Z"}
{"msg":"I don't think we should have the followers probe the leader","username":"yacovm","ts":"2019-01-09T16:23:52.566Z"}
{"msg":"we can just intercept the hearbeats from the leader instead","username":"yacovm","ts":"2019-01-09T16:24:05.218Z"}
{"msg":"since it already does that","username":"yacovm","ts":"2019-01-09T16:24:09.697Z"}
{"msg":"but we need to decide on how to approach this","username":"yacovm","ts":"2019-01-09T16:24:19.512Z"}
{"msg":"*and* make sure clients are aware their transaction can not be safely forwarded to the leadwr","username":"yacovm","ts":"2019-01-09T16:24:34.443Z"}
{"msg":"> I don't think we should have the followers probe the leader\n","username":"kostas","ts":"2019-01-09T16:31:05.136Z"}
{"msg":"We agreed that we won't do that and instead inspect our own `RaftState`, no?","username":"kostas","ts":"2019-01-09T16:31:31.206Z"}
{"msg":"wait, so `RaftState` is up to date or something?","username":"yacovm","ts":"2019-01-09T16:39:16.673Z"}
{"msg":"what is the status of raft state?","username":"yacovm","ts":"2019-01-09T16:39:41.704Z"}
{"msg":"If a node senses that there's no leader, it won't be reflected in `SoftState.Lead` but it will be reflected in the fact they're campaigning.","username":"kostas","ts":"2019-01-09T16:40:48.803Z"}
{"msg":"did you verify it ? ","username":"yacovm","ts":"2019-01-09T16:41:25.280Z"}
{"msg":"i did","username":"guoger","ts":"2019-01-09T16:41:29.706Z"}
{"msg":"I think we should add a UT for this, honestly","username":"yacovm","ts":"2019-01-09T16:41:51.893Z"}
{"msg":"if we update the etcdraft package","username":"yacovm","ts":"2019-01-09T16:41:58.267Z"}
{"msg":"and it somehow breaks","username":"yacovm","ts":"2019-01-09T16:42:01.047Z"}
{"msg":"we don't know this otherwise","username":"yacovm","ts":"2019-01-09T16:42:07.476Z"}
{"msg":"if we reach the conclusion that this is the way to go, i'll surely add UT while working on this","username":"guoger","ts":"2019-01-09T16:43:15.395Z"}
{"msg":"and actually FAB-13438 is the next thing to tackle on my side, as i promised to kostas at the beginning of this week :P","username":"guoger","ts":"2019-01-09T16:43:40.722Z"}
{"msg":"especially when i just pushed CRs for FAB-13447","username":"guoger","ts":"2019-01-09T16:43:57.681Z"}
{"msg":"ok... so do you guys agree to the idea of sending service unavailable to deliver requests, once there is no leader, + periodically probing the raft state?","username":"yacovm","ts":"2019-01-09T17:15:43.848Z"}
{"msg":"I agree, other than the part \"periodically probing the raft state\".","username":"guoger","ts":"2019-01-09T17:41:45.077Z"}
{"msg":"there's not need to probe it","username":"guoger","ts":"2019-01-09T17:41:59.199Z"}
{"msg":"there's no need to probe it","username":"guoger","ts":"2019-01-09T17:41:59.199Z"}
{"msg":"why not?","username":"yacovm","ts":"2019-01-09T17:55:50.829Z"}
{"msg":"how do you know if you suddenly lost the leader?","username":"yacovm","ts":"2019-01-09T17:56:06.472Z"}
{"msg":"if follower doesn't receive heartbeat in timeout, it loses leader","username":"guoger","ts":"2019-01-09T17:56:55.049Z"}
{"msg":"we just inspect raft state, but why periodically?","username":"guoger","ts":"2019-01-09T17:57:32.809Z"}
{"msg":"because you need to tell the clients connected to you via deliver","username":"yacovm","ts":"2019-01-09T17:58:01.597Z"}
{"msg":"to look somewhere else","username":"yacovm","ts":"2019-01-09T17:58:05.137Z"}
{"msg":"isn't that equivalent to returning a closed channel on `Errored()`?","username":"guoger","ts":"2019-01-09T17:58:58.528Z"}
{"msg":"@guoger but we don't do that","username":"yacovm","ts":"2019-01-09T18:29:43.984Z"}
{"msg":"@kostas ... \n>  ok... so do you guys agree to the idea of sending service unavailable to deliver requests, once there is no leader, + periodically probing the raft state? \n?","username":"yacovm","ts":"2019-01-09T19:23:55.911Z"}
{"msg":"I do, and saw the discussion but I've been meaning to go back and check what `Errored` does. (Caught in a couple of other threads at the moment.) Unless you have it handy?","username":"kostas","ts":"2019-01-09T19:24:36.281Z"}
{"msg":"> isn't that equivalent to returning a closed channel on `Errored()`?\nReading the description for `Errored` in `consensus.go` this is exactly what I would expect us to do.","username":"kostas","ts":"2019-01-09T19:31:45.827Z"}
{"msg":"it doesn't do what the kafka does","username":"yacovm","ts":"2019-01-09T19:32:32.450Z"}
{"msg":"Ah, I see the code now.","username":"kostas","ts":"2019-01-09T19:32:41.718Z"}
{"msg":"in etcdraft it returns the ready channel....","username":"yacovm","ts":"2019-01-09T19:32:42.264Z"}
{"msg":"`// Errored returns a channel that closes when the chain stops.\nfunc (c *Chain) Errored() <-chan struct{} {\n\treturn c.doneC\n}\n`","username":"kostas","ts":"2019-01-09T19:32:50.852Z"}
{"msg":"```\n// Errored returns a channel that closes when the chain stops.\nfunc (c *Chain) Errored() <-chan struct{} {\n\treturn c.doneC\n}\n```","username":"kostas","ts":"2019-01-09T19:32:50.852Z"}
{"msg":"yeah","username":"yacovm","ts":"2019-01-09T19:32:55.708Z"}
{"msg":"we need to be uniform :) ","username":"yacovm","ts":"2019-01-09T19:32:59.984Z"}
{"msg":"so a peer/user would be oblivious of the type of OSN","username":"yacovm","ts":"2019-01-09T19:33:29.795Z"}
{"msg":"Why don't we modify `Errored` so that it works like we expect it to?","username":"kostas","ts":"2019-01-09T19:33:33.932Z"}
{"msg":"Or is that you've been proposing all along?","username":"kostas","ts":"2019-01-09T19:33:39.595Z"}
{"msg":"we need to couple that with a periodical probing no?","username":"yacovm","ts":"2019-01-09T19:33:52.289Z"}
{"msg":"otherwise you don't know when to close the channel","username":"yacovm","ts":"2019-01-09T19:34:02.371Z"}
{"msg":"Is it not enough to close if you're a candidate?","username":"kostas","ts":"2019-01-09T19:34:20.909Z"}
{"msg":"Doesn't this mean that the king is dead, and we have a Game of Thrones thing going on?","username":"kostas","ts":"2019-01-09T19:34:35.943Z"}
{"msg":"it is (you don't want to close the ready channel, right? you need to close another channel)","username":"yacovm","ts":"2019-01-09T19:34:47.557Z"}
{"msg":"but the point it","username":"yacovm","ts":"2019-01-09T19:34:50.113Z"}
{"msg":"you need to know *when* to close","username":"yacovm","ts":"2019-01-09T19:34:56.065Z"}
{"msg":"and we currently can't do that because we don't have periodic probing","username":"yacovm","ts":"2019-01-09T19:35:07.041Z"}
{"msg":"or if we do that while piggybacking on the FSM tick","username":"yacovm","ts":"2019-01-09T19:35:29.886Z"}
{"msg":"that's also an option","username":"yacovm","ts":"2019-01-09T19:35:34.724Z"}
{"msg":"but I don't like that because it's too \"frequent\"","username":"yacovm","ts":"2019-01-09T19:35:49.016Z"}
{"msg":"I'm saying the following: Create a channel whenever we're not a candidate. Close that channel when we become a candidate. Return that channel via Errored. What am I missing?","username":"kostas","ts":"2019-01-09T19:36:22.380Z"}
{"msg":">  Doesn't this mean that the king is dead, and we have a Game of Thrones thing going on? \nI honestly never ever watched a single episode of GoT","username":"yacovm","ts":"2019-01-09T19:36:36.274Z"}
{"msg":"I guess you realize, I don't have time for this ","username":"yacovm","ts":"2019-01-09T19:36:50.646Z"}
{"msg":"It's a family-friendly show where absolutely nobody dies.","username":"kostas","ts":"2019-01-09T19:36:57.939Z"}
{"msg":"I know the content :) ","username":"yacovm","ts":"2019-01-09T19:37:09.365Z"}
{"msg":"Back to the question at hand, what am I missing?","username":"kostas","ts":"2019-01-09T19:37:19.186Z"}
{"msg":"what you propose here:\n>  I'm saying the following: Create a channel whenever we're not a candidate. Close that channel when we become a candidate. Return that channel via Errored. What am I missing? \nseems what I had in mind. The question is - how, or - when do you close the channel when you become a candidate?","username":"yacovm","ts":"2019-01-09T19:38:23.759Z"}
{"msg":"there is no callback that the `raft.Node` calls you to do that","username":"yacovm","ts":"2019-01-09T19:38:40.112Z"}
{"msg":"Ah, I get you now.","username":"kostas","ts":"2019-01-09T19:38:47.827Z"}
{"msg":"This is where I point my finger to Jay.","username":"kostas","ts":"2019-01-09T19:38:59.070Z"}
{"msg":"But yeah, absent a callback, this'll need probing.","username":"kostas","ts":"2019-01-09T19:39:08.797Z"}
{"msg":"so, we can either piggyback on the FSM tick","username":"yacovm","ts":"2019-01-09T19:39:51.250Z"}
{"msg":"or make a new goroutine with a timer","username":"yacovm","ts":"2019-01-09T19:40:03.173Z"}
{"msg":"Piggybacking seems like a simpler approach?","username":"kostas","ts":"2019-01-09T19:40:42.489Z"}
{"msg":"When the sun shines again at where @guoger resides, he can think and say his opinion :) ","username":"yacovm","ts":"2019-01-09T19:40:47.394Z"}
{"msg":"I'm good with piggybacking","username":"yacovm","ts":"2019-01-09T19:40:56.368Z"}
{"msg":"but then we won't have that 2nd chance / 2nd sweep you advocated for","username":"yacovm","ts":"2019-01-09T19:41:12.814Z"}
{"msg":"Why does everything in life have to be a tradeoff?","username":"kostas","ts":"2019-01-09T19:41:26.547Z"}
{"msg":"but i guess that in a way, loss of heartbeats from the leader takes that into account implictly ","username":"yacovm","ts":"2019-01-09T19:41:31.951Z"}
{"msg":"A true bummer.","username":"kostas","ts":"2019-01-09T19:41:33.138Z"}
{"msg":"anyway i guess we can decide tomorrow when @guoger is awake","username":"yacovm","ts":"2019-01-09T19:42:16.613Z"}
{"msg":"> but i guess that in a way, loss of heartbeats from the leader takes that into account implictly\nThat makes sense and mitigates the original concern.","username":"kostas","ts":"2019-01-09T19:42:18.853Z"}
{"msg":"I still don't get this... why couldn't `Errored` simply return a closed channel if node is candidate? The actually problem w.r.t \n> I'm saying the following: Create a channel whenever we're not a candidate. Close that channel when we become a candidate. Return that channel via Errored. What am I missing?\nis that, when the node becomes available, how to open the previously closed channel without contention (someone might be reading the channel while you change it). And I propose that every time `Errored` is called, it inspects current SoftState, and return a closed/open channel based on that. (a new channel being created and returned)","username":"guoger","ts":"2019-01-10T02:06:59.050Z"}
{"msg":"cc @yacovm @kostas ","username":"guoger","ts":"2019-01-10T02:07:16.327Z"}
{"msg":"@guoger: That can work I think.","username":"kostas","ts":"2019-01-10T02:55:33.883Z"}
{"msg":"Returning an opened/closed channel won't suffice. Imagine you return an open channel, but then you detect the loss of leadership. \nyou need to close the open channel you returned, otherwise a connected peer won't know you lost leadership","username":"yacovm","ts":"2019-01-10T08:27:09.555Z"}
{"msg":"What you did @guoger in the change set, seems right to me","username":"yacovm","ts":"2019-01-10T09:11:43.248Z"}
{"msg":"but - are we guaranteed to get a notification via the `Ready` channel about a leadership loss, and a leadership election?","username":"yacovm","ts":"2019-01-10T09:12:22.941Z"}
{"msg":"I guess we are because we need to add it to the log, right?","username":"yacovm","ts":"2019-01-10T09:12:33.273Z"}
{"msg":"yes we are guaranteed to get notified about softstate change. but no we don't need to persist this to log","username":"guoger","ts":"2019-01-10T09:13:27.161Z"}
{"msg":"oh, i see","username":"yacovm","ts":"2019-01-10T09:13:48.050Z"}
{"msg":"you are fast! i haven't added you to reviewer list yet :P","username":"guoger","ts":"2019-01-10T09:16:16.494Z"}
{"msg":"is there an integration test to verify https://jira.hyperledger.org/browse/FAB-13438 ?","username":"guoger","ts":"2019-01-10T09:18:07.103Z"}
{"msg":"not that i know of... ","username":"yacovm","ts":"2019-01-10T09:25:01.305Z"}
{"msg":"and it will be hard to do one","username":"yacovm","ts":"2019-01-10T09:25:11.896Z"}
{"msg":"because you need from one end, to connect to Deliver to the orderer","username":"yacovm","ts":"2019-01-10T09:25:21.899Z"}
{"msg":"then to make a quorum loss","username":"yacovm","ts":"2019-01-10T09:25:29.843Z"}
{"msg":"and then to ensure the deliver is closed","username":"yacovm","ts":"2019-01-10T09:25:33.708Z"}
{"msg":"I suggest we check that in unit tests","username":"yacovm","ts":"2019-01-10T09:25:50.933Z"}
{"msg":"like you did","username":"yacovm","ts":"2019-01-10T09:25:59.607Z"}
{"msg":"@guoger can you take a look at this integration test failure? https://jenkins.hyperledger.org/job/fabric-verify-integration-tests-x86_64/4558/consoleFull\n(1)\n`orderer4` decides there is a leader:\n```\n00:52:19 [e][OrdererOrg.orderer4] 2019-01-09 22:51:38.695 UTC [orderer.consensus.etcdraft] Step -> INFO 135 4 [term: 1] received a MsgHeartbeat message with higher term from 3 [term: 2] {\"channel\": \"testchannel2\", \"node\": 4}\n00:52:19 [e][OrdererOrg.orderer4] 2019-01-09 22:51:38.695 UTC [orderer.consensus.etcdraft] becomeFollower -> INFO 136 4 became follower at term 2 {\"channel\": \"testchannel2\", \"node\": 4}\n00:52:19 [e][OrdererOrg.orderer4] 2019-01-09 22:51:38.695 UTC [orderer.consensus.etcdraft] run -> INFO 137 raft.node: 4 elected leader 3 at term 2 {\"channel\": \"testchannel2\", \"node\": 4}\n00:52:19 [e][OrdererOrg.orderer4] 2019-01-09 22:51:38.697 UTC [orderer.consensus.etcdraft] serveRaft -> INFO 138 Raft leader changed: 0 -> 3 {\"channel\": \"testchannel2\", \"node\": 4}\n```\n\nBut at the same second, node 2 starts an election:\n```\n00:52:19 [e][OrdererOrg.orderer2] 2019-01-09 22:51:47.037 UTC [orderer.consensus.etcdraft] Step -> INFO 112 2 is starting a new election at term 2 {\"channel\": \"testchannel2\", \"node\": 2}\n00:52:19 [e][OrdererOrg.orderer2] 2019-01-09 22:51:47.038 UTC [orderer.consensus.etcdraft] becomePreCandidate -> INFO 113 2 became pre-candidate at term 2 {\"channel\": \"testchannel2\", \n```\n\nWhat is happening here? :thinking_face:  \n\n(2)\nNow, it sends orderer4 a transaction, and it is lost... orderer 4 should forward it to a leader. I guess the transaction is lost because there is a leader switch, but why does it happen?","username":"yacovm","ts":"2019-01-10T09:51:54.867Z"}
{"msg":"hmm, is it a deterministic failure? orderer1 also start election in the log. I guess 2&1 do not receive heartbeats. it does seem odd though. we see `Failed to send StepRequest to 4`, so orderer3 should be sending out heartbeats to all nodes. If it's flaky, i guess i'll need to add some printf and run it repeatedly in CI","username":"guoger","ts":"2019-01-10T10:11:58.508Z"}
{"msg":"ot","username":"yacovm","ts":"2019-01-10T10:41:36.940Z"}
{"msg":"it's not deterministic","username":"yacovm","ts":"2019-01-10T10:41:41.216Z"}
{"msg":"I don't understand","username":"yacovm","ts":"2019-01-10T10:42:07.270Z"}
{"msg":"`Failed to send StepRequest to 4` is fine","username":"yacovm","ts":"2019-01-10T10:44:52.099Z"}
{"msg":"it is a newly booted node","username":"yacovm","ts":"2019-01-10T10:45:02.814Z"}
{"msg":"what I don't understand is - why node 2 is starting an election","username":"yacovm","ts":"2019-01-10T10:45:36.346Z"}
{"msg":"how is node 3 elected as a leader in time `00:52:19` and also in time `00:52:19`, node 2 starts election?","username":"yacovm","ts":"2019-01-10T10:46:05.146Z"}
{"msg":"@guoger ","username":"yacovm","ts":"2019-01-10T10:46:49.783Z"}
{"msg":"that's not node 3 being elected at `00:52:19`. it is always leader. that log entry only indicates that orderer4 _just learnt_ this fact.","username":"guoger","ts":"2019-01-10T10:47:58.059Z"}
{"msg":"_both_ node 2 and 1 start election actually.","username":"guoger","ts":"2019-01-10T10:48:34.917Z"}
{"msg":"> Raft leader changed: 0 -> 3\nthis is log should be interpreted as: from this node's point view, raft leader changes from A to B","username":"guoger","ts":"2019-01-10T10:49:29.073Z"}
{"msg":"Yeah, my bad.","username":"yacovm","ts":"2019-01-10T10:50:08.025Z"}
{"msg":"but - do you know why is node 2 or node 1 starting election?","username":"yacovm","ts":"2019-01-10T10:50:25.352Z"}
{"msg":"I don't see any errors of communication from nodes 2, 1","username":"yacovm","ts":"2019-01-10T10:51:41.546Z"}
{"msg":"> I guess 2&1 do not receive heartbeats\nAs for reason, idk, and i'll need to insert some printf and run in CI repeatedly","username":"guoger","ts":"2019-01-10T10:51:44.218Z"}
{"msg":"hmm ok, thanks","username":"yacovm","ts":"2019-01-10T10:52:24.488Z"}
{"msg":"btw, doesn't [this](https://github.com/hyperledger/fabric/blob/1203bd18e2ca115bc100b57b0ebf766b68a992e1/orderer/common/cluster/replication.go#L210) cause problem, when the config block used to onboard node is at height 1?","username":"guoger","ts":"2019-01-10T10:52:30.965Z"}
{"msg":"btw, doesn't [this](https://github.com/hyperledger/fabric/blob/1203bd18e2ca115bc100b57b0ebf766b68a992e1/orderer/common/cluster/replication.go#L210) cause problem, when the config block used to onboard node is at height 1? in which case genesis block is not pulled","username":"guoger","ts":"2019-01-10T10:52:30.965Z"}
{"msg":"do you mean the system channel or an application channel?","username":"yacovm","ts":"2019-01-10T10:53:29.176Z"}
{"msg":"syschannel","username":"guoger","ts":"2019-01-10T10:53:43.204Z"}
{"msg":"you're saying the system channel has a sequence of 1, or a height of 1?","username":"yacovm","ts":"2019-01-10T10:54:04.696Z"}
{"msg":"sequence","username":"guoger","ts":"2019-01-10T10:54:19.799Z"}
{"msg":"height of 1 indicates genesis block only, right?","username":"guoger","ts":"2019-01-10T10:54:42.853Z"}
{"msg":"right","username":"yacovm","ts":"2019-01-10T10:54:47.585Z"}
{"msg":"I know this looks weird, and I also explicitly made my tests to not handle a case where the system channel's last config block sequence is 1","username":"yacovm","ts":"2019-01-10T10:55:29.697Z"}
{"msg":"if you start a network with genesis block (block 0), then add a node (this is block 1). And then you use block 1 to boot new node","username":"guoger","ts":"2019-01-10T10:55:32.412Z"}
{"msg":"haha, so this is the easter egg?","username":"guoger","ts":"2019-01-10T10:55:32.412Z"}
{"msg":"because i find it unlikely","username":"yacovm","ts":"2019-01-10T10:55:36.999Z"}
{"msg":"that you have have a last config block of 1","username":"yacovm","ts":"2019-01-10T10:55:55.354Z"}
{"msg":"and you want to onboard a new orderer","username":"yacovm","ts":"2019-01-10T10:56:01.885Z"}
{"msg":"because it means you have no application channels","username":"yacovm","ts":"2019-01-10T10:56:15.702Z"}
{"msg":"and you suddenly decide to onboard a new orderer","username":"yacovm","ts":"2019-01-10T10:56:24.256Z"}
{"msg":"usually when you setup a network, you create some channel ","username":"yacovm","ts":"2019-01-10T10:56:52.076Z"}
{"msg":"when you do that - the last config block's sequence will be 2 :) ","username":"yacovm","ts":"2019-01-10T10:57:01.576Z"}
{"msg":"haha, so this is the easter egg?","username":"guoger","ts":"2019-01-10T10:57:25.622Z"}
{"msg":"eh, I wouldn't call it an easter egg","username":"yacovm","ts":"2019-01-10T10:57:36.682Z"}
{"msg":"(accidentally editted previous sentence...)","username":"guoger","ts":"2019-01-10T10:57:37.478Z"}
{"msg":"but i just find the use case far fetched","username":"yacovm","ts":"2019-01-10T10:57:49.879Z"}
{"msg":"in any case you can \"solve\" this by making a new config transaction","username":"yacovm","ts":"2019-01-10T10:58:17.379Z"}
{"msg":"is it really hard to fix this? otherwise, we definitely need to document this","username":"guoger","ts":"2019-01-10T10:58:24.608Z"}
{"msg":"is it really hard to fix this? otherwise, we definitely need to document this behavior","username":"guoger","ts":"2019-01-10T10:58:24.608Z"}
{"msg":"I'll open a JIRA for that and we'll prioritize this","username":"yacovm","ts":"2019-01-10T10:59:10.016Z"}
{"msg":"(i spent some time yesterday figuring this out when i was preparing for demo :joy: )","username":"guoger","ts":"2019-01-10T10:59:54.461Z"}
{"msg":"@guoger actually - if we have more than 2 blocks in the system channel... then latest height will be 2","username":"yacovm","ts":"2019-01-10T12:30:55.006Z"}
{"msg":"so the loop should work...","username":"yacovm","ts":"2019-01-10T12:30:58.387Z"}
{"msg":"```\nfunc TestSystemChannelLatestSequenceIsOne(t *testing.T) {\n\tsystemChannelBlocks := createBlockChain(0, 1)\n\tfirstBlockResponse := &orderer.DeliverResponse{\n\t\tType: &orderer.DeliverResponse_Block{\n\t\t\tBlock: systemChannelBlocks[0],\n\t\t},\n\t}\n\tsecondBlockResponse := &orderer.DeliverResponse{\n\t\tType: &orderer.DeliverResponse_Block{\n\t\t\tBlock: systemChannelBlocks[1],\n\t\t},\n\t}\n\n\tosn := newClusterNode(t)\n\tdefer osn.stop()\n\tosn.blockResponses = make(chan *orderer.DeliverResponse, 10)\n\n\tdialer := newCountingDialer()\n\tbp := newBlockPuller(dialer, osn.srv.Address())\n\tbp.FetchTimeout = time.Hour\n\tbp.MaxPullBlockRetries = 1\n\n\n\tchannelLister := &mocks.ChannelLister{}\n\tchannelLister.On(\"Channels\").Return([]cluster.ChannelGenesisBlock{})\n\tchannelLister.On(\"Close\")\n\n\tblocksCommittedToSystemLedger := make(chan *common.Block, 2)\n\n\tsystemLedger := &mocks.LedgerWriter{}\n\tsystemLedger.On(\"Append\", mock.Anything).Return(nil).Run(func(arg mock.Arguments) {\n\t\tblocksCommittedToSystemLedger <- arg.Get(0).(*common.Block)\n\t})\n\tsystemLedger.On(\"Height\").Return(func() uint64 {\n\t\treturn uint64(len(blocksCommittedToSystemLedger))\n\t})\n\n\tlf := &mocks.LedgerFactory{}\n\tlf.On(\"Close\")\n\tlf.On(\"GetOrCreate\", \"system\").Return(systemLedger, nil)\n\n\tr := cluster.Replicator{\n\t\tFilter:        cluster.AnyChannel,\n\t\tLedgerFactory: lf,\n\t\tAmIPartOfChannel: func(configBlock *common.Block) error {\n\t\t\treturn cluster.ErrNotInChannel\n\t\t},\n\t\tLogger:        flogging.MustGetLogger(\"test\"),\n\t\tSystemChannel: \"system\",\n\t\tChannelLister: channelLister,\n\t\tPuller:        bp,\n\t\tBootBlock:     systemChannelBlocks[1],\n\t}\n\n\tosn.addExpectProbeAssert()\n\tosn.blockResponses <- secondBlockResponse\n\n\tosn.addExpectProbeAssert()\n\tosn.blockResponses <- secondBlockResponse\n\n\tosn.addExpectPullAssert(0)\n\tosn.blockResponses <- firstBlockResponse\n\tosn.blockResponses <- secondBlockResponse\n\n\tr.ReplicateChains()\n\n\tbp.Close()\n\tdialer.assertAllConnectionsClosed(t)\n\n\tassert.Len(t, systemChannelBlocks, 2)\n}\n```","username":"yacovm","ts":"2019-01-10T12:31:33.166Z"}
{"msg":"This unit test which  I just wrote, replicates a system channel with a genesis block, and a config block on top of it","username":"yacovm","ts":"2019-01-10T12:31:52.985Z"}
{"msg":"and it passes","username":"yacovm","ts":"2019-01-10T12:32:19.703Z"}
{"msg":":thinking: tried again and you are right","username":"guoger","ts":"2019-01-10T12:47:39.898Z"}
{"msg":"should we be concerned w.r.t integration test failure seen [here](https://jenkins.hyperledger.org/job/fabric-verify-integration-tests-x86_64/4600/console) and [here](https://jenkins.hyperledger.org/job/fabric-verify-integration-tests-x86_64/4603/console)?\n```\n23:30:25 Summarizing 1 Failure:\n23:30:25 \n23:30:25 [Fail] PrivateData reconciliation [BeforeEach] verify private data reconciliation when adding a new org to collection config \n```\n```\n23:25:51 Summarizing 2 Failures:\n23:25:51 \n23:25:51 [Fail] EndToEndACL [It] enforces access control list policies \n23:25:51 /w/workspace/fabric-verify-integration-tests-x86_64/gopath/src/github.com/hyperledger/fabric/integration/e2e/acl_test.go:181\n23:25:51 \n23:25:51 [Fail] EndToEnd basic kafka network with 2 orgs [BeforeEach] executes a basic kafka network with 2 orgs \n23:25:51 /w/workspace/fabric-verify-integration-tests-x86_64/gopath/src/github.com/hyperledger/fabric/integration/e2e/e2e_test.go:135\n```","username":"guoger","ts":"2019-01-10T16:07:37.624Z"}
{"msg":"@sykesm do you have the above in your collection? :thinking_face:  ","username":"yacovm","ts":"2019-01-10T16:15:57.661Z"}
{"msg":"the collection is here: https://jira.hyperledger.org/issues/?filter=12178","username":"sykesm","ts":"2019-01-10T16:19:56.113Z"}
{"msg":"thanks, I'll look :) ","username":"yacovm","ts":"2019-01-10T16:20:11.614Z"}
{"msg":"Looks like FAB-13594","username":"sykesm","ts":"2019-01-10T16:20:27.785Z"}
{"msg":"but FAB-13594 doesn't have 181 in the stack trace","username":"yacovm","ts":"2019-01-10T16:21:33.624Z"}
{"msg":"don't they both call the same helper function for updating the config block?","username":"sykesm","ts":"2019-01-10T16:22:19.945Z"}
{"msg":"```\n\n17:11:25   Saw:\n17:11:25       Get instantiated chaincodes on channel testchannel:\n17:11:25       Name: mycc, Version: 0.0, Path: github.com/hyperledger/fabric/integration/chaincode/simple/cmd, Escc: escc, Vscc: vscc\n17:11:25       \n17:11:25   Which matches the unexpected:\n17:11:25       Name: mycc, Version: 0.0, Path: .*, Escc: escc, Vscc: vscc\n```","username":"yacovm","ts":"2019-01-10T16:24:13.700Z"}
{"msg":"this is the error in the ACL test that Jay linked","username":"yacovm","ts":"2019-01-10T16:24:25.762Z"}
{"msg":"while in FAB-13594 the error is that you get an unexpected status","username":"yacovm","ts":"2019-01-10T16:24:45.935Z"}
{"msg":"while in FAB-13594 the error is that you get an unexpected status - `can't read the block: &{FORBIDDEN}`","username":"yacovm","ts":"2019-01-10T16:24:45.935Z"}
{"msg":"@sykesm ","username":"yacovm","ts":"2019-01-10T16:31:07.815Z"}
{"msg":"I added an [integration test ](https://gerrit.hyperledger.org/r/#/c/28648/) that find the current Raft leader, kills it, and makes sure a new one is elected. It only runs in 20 seconds, and I think it's worth having. ","username":"yacovm","ts":"2019-01-11T20:43:53.965Z"}
{"msg":"Had a look, also think it's worth having. Thanks for putting this together.","username":"kostas","ts":"2019-01-11T21:03:27.984Z"}
{"msg":"@yacovm but how's that different from the one we already had in that file? (or at least you could just augment that test to perform leader checks, which is probably still redundant IMO, cuz if no leader exists, that test couldn't perform tx)","username":"guoger","ts":"2019-01-12T03:21:05.031Z"}
{"msg":"one more test doesn't harm, just checking the dealt","username":"guoger","ts":"2019-01-12T03:21:26.768Z"}
{"msg":"one more test doesn't harm, just checking the delta","username":"guoger","ts":"2019-01-12T03:21:26.768Z"}
{"msg":"and for our fake clocks, i opened an issue [there](https://github.com/cloudfoundry/clock/issues/6). Welcome some work around ideas for now (this is the main factor that slows the test down) cc @sykesm ","username":"guoger","ts":"2019-01-12T03:30:09.045Z"}
{"msg":"and for our fake clocks, i opened an issue [there](https://github.com/cloudfoundry/clock/issues/6). Welcome some work around ideas for now (this is the main factor that slows the etcdraft test down) cc @sykesm ","username":"guoger","ts":"2019-01-12T03:30:09.045Z"}
{"msg":"and a question (may be very dumb) to @tock , when migrate to raft, one should submit `configUpdate` that changes ConsensusType from `kafka` to `etcdraft` *only* to system channel. And system channel will cascade that to app channels, am i getting this right?","username":"guoger","ts":"2019-01-12T03:38:12.067Z"}
{"msg":"and a question (may be very dumb) to @tock , when migrate to raft, one should submit `configUpdate` that changes ConsensusType from `kafka` to `etcdraft` *ONLY* to system channel. And system channel will cascade that to app channels, am i getting this right?","username":"guoger","ts":"2019-01-12T03:38:12.067Z"}
{"msg":"and a question (may be very dumb) to @tock , when migrate to raft, one should submit `configUpdate` that changes ConsensusType from `kafka` to `etcdraft` *ONLY* to system channel. ~And system channel will cascade that to app channels, am i getting this right?~ from the description of FAB-13264, i figured this is not the case... but why should user do it for app channels?","username":"guoger","ts":"2019-01-12T03:38:12.067Z"}
{"msg":"also, could you briefly summarize the use of `ConsensusMigrationContext` for sys-channel and app-channel, if this is not too much to ask. it'll help me understanding the code while doing review. thx!","username":"guoger","ts":"2019-01-12T04:01:16.071Z"}
{"msg":"also, could you briefly summarize the use of `ConsensusMigrationContext` for sys-channel and app-channel, if this is not too much to ask. it'll help me understanding the code while doing review (mostly because i couldn't find it in design doc). thx!","username":"guoger","ts":"2019-01-12T04:01:16.071Z"}
{"msg":"in design doc:\n> If anything goes wrong after BEGIN-MIG, one may invoke ABORT-MIG to abort the migration.\nwhat's failure scenario we are talking about here? can user abort during migration?","username":"guoger","ts":"2019-01-12T04:08:50.125Z"}
{"msg":"(pls don't take me wrong, i'm not jumping out in the middle of development and criticize the design. I'm simply trying to understand this...)","username":"guoger","ts":"2019-01-12T04:10:00.673Z"}
{"msg":"> but how's that different from the one we already had in that file?\nbecause you don't find who is the leader and kill it. you just kill some orderer who may not be the leader, no? @guoger ","username":"yacovm","ts":"2019-01-12T07:07:21.875Z"}
{"msg":"ahh, true, thx!","username":"guoger","ts":"2019-01-12T07:08:47.961Z"}
{"msg":"can anyone look at [this](https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/7883/console) ?","username":"yacovm","ts":"2019-01-12T14:59:27.840Z"}
{"msg":"I see here 2 failures:\n1) A test of mine failed:\n```\n16:35:21 --- FAIL: TestTicker (0.08s)\n16:35:21     --- FAIL: TestTicker/Stop_ticker_serially (0.02s)\n16:35:21         <autogenerated>:1: \n16:35:21             \tError Trace:\tsched_test.go:48\n16:35:21             \tError:      \tShould be false\n16:35:21             \tTest:       \tTestTicker/Stop_ticker_serially\n```\n\n2) \n```\n\n16:35:21 2019-01-12 14:34:10.540 UTC [orderer.common.server] func1 -> ERRO 03d Broadcast client triggered panic: runtime error: invalid memory address or nil pointer dereference\n16:35:21 goroutine 133 [running]:\n16:35:21 runtime/debug.Stack(0x2823600, 0x1, 0x1)\n16:35:21 \t/opt/go/go1.11.1.linux.amd64/src/runtime/debug/stack.go:24 +0xb5\n16:35:21 github.com/hyperledger/fabric/orderer/common/server.(*server).Broadcast.func1()\n16:35:21 \t/w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/orderer/common/server/server.go:145 +0x104\n16:35:21 panic(0x196ba60, 0x27e2460)\n16:35:21 \t/opt/go/go1.11.1.linux.amd64/src/runtime/panic.go:513 +0x1b9\n16:35:21 github.com/hyperledger/fabric/orderer/common/server.(*broadcastMsgTracer).Context(0xc000d3bb30, 0x17f7300, 0x0)\n16:35:21 \t<autogenerated>:1 +0x59\n16:35:21 github.com/hyperledger/fabric/orderer/common/broadcast.(*Handler).Handle(0x0, 0x1ca0880, 0xc000d3bb30, 0x0, 0x0)\n16:35:21 \t/w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/orderer/common/broadcast/broadcast.go:67 +0x5d\n16:35:21 github.com/hyperledger/fabric/orderer/common/server.(*server).Broadcast(0xc00039ef48, 0x0, 0x0, 0x0, 0x0)\n16:35:21 \t/w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/orderer/common/server/server.go:149 +0x1cf\n16:35:21 github.com/hyperledger/fabric/orderer/common/server.TestBroadcastNoPanic(0xc000ac1200)\n16:35:21 \t/w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/orderer/common/server/server_test.go:30 +0x55\n```\nnull pointer exception in some broadcast test","username":"yacovm","ts":"2019-01-12T15:00:45.574Z"}
{"msg":"I opened [FAB-13653](https://jira.hyperledger.org/browse/FAB-13653) for mine, but does anyone has a clue what's the other one?","username":"yacovm","ts":"2019-01-12T15:02:37.656Z"}
{"msg":"is it deterministic?","username":"guoger","ts":"2019-01-12T15:09:14.762Z"}
{"msg":"btw, how to convert a story to bug? i accidentally created one with wrong type....","username":"guoger","ts":"2019-01-12T15:09:29.779Z"}
{"msg":"it's in CI, so of course it's not","username":"yacovm","ts":"2019-01-12T15:11:31.836Z"}
{"msg":"which FAB?","username":"yacovm","ts":"2019-01-12T15:11:54.927Z"}
{"msg":"https://jira.hyperledger.org/browse/FAB-13652","username":"guoger","ts":"2019-01-12T15:12:52.399Z"}
{"msg":"ah you just click F you click F5 on your keyboard","username":"yacovm","ts":"2019-01-12T15:13:52.082Z"}
{"msg":"ah you just click F5 on your keyboard","username":"yacovm","ts":"2019-01-12T15:14:08.805Z"}
{"msg":"lol","username":"guoger","ts":"2019-01-12T15:14:30.349Z"}
{"msg":"but seriously, how did you do that? i don't see `type` in edit tab","username":"guoger","ts":"2019-01-12T15:15:40.579Z"}
{"msg":"Answered in PM","username":"yacovm","ts":"2019-01-12T15:16:29.443Z"}
{"msg":"Oh man, worst timing ever.","username":"kostas","ts":"2019-01-12T17:32:12.446Z"}
{"msg":"So, the more Raft groups the more overhead you have to deal with (in terms of requests that need not be duplicated  --or can be batched better-- such as heartbeats, etc.).","username":"kostas","ts":"2019-01-12T17:33:56.732Z"}
{"msg":"So, the more Raft groups you have, the bigger the overhead an OSN has to deal with (in terms of requests that need not be duplicated  --or can be batched better-- such as heartbeats, etc.).","username":"kostas","ts":"2019-01-12T17:33:56.732Z"}
{"msg":"Remember the MultiRaft effort by CockroachDB that was abandoned: https://www.cockroachlabs.com/blog/scaling-raft/ (I had linked to that in the design doc)","username":"kostas","ts":"2019-01-12T17:34:29.617Z"}
{"msg":"Today I found this: https://github.com/lni/dragonboat","username":"kostas","ts":"2019-01-12T17:34:45.203Z"}
{"msg":"(First commit 9 days ago, 1.2K stars on GitHub already :astonished:)","username":"kostas","ts":"2019-01-12T17:36:00.162Z"}
{"msg":"But we manage everything in Fabric via per channel configuration","username":"yacovm","ts":"2019-01-12T18:03:43.565Z"}
{"msg":"if we have a Raft FSM serving several channels then we run into existential and philosophical questions of how to map the configuration to the real world","username":"yacovm","ts":"2019-01-12T18:04:39.249Z"}
{"msg":"I, for one - like the one-to-one and onto mapping of the channels and Raft instances","username":"yacovm","ts":"2019-01-12T18:05:03.363Z"}
{"msg":"I actually happened to read a bit about dragonboat today. Most of optimization there is on IO and batching, as well as key value storage","username":"guoger","ts":"2019-01-12T22:40:12.222Z"}
{"msg":"Do you see any particular piece we could take as reference there? @kostas ","username":"guoger","ts":"2019-01-12T22:40:55.326Z"}
{"msg":"But this is true... @kostas [ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=oRjgNC8BXBCuuzT8i)","username":"guoger","ts":"2019-01-12T22:41:35.466Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=oRjgNC8BXBCuuzT8i","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=oRjgNC8BXBCuuzT8i","remote":true,"fileId":null,"fileName":null}]}
{"msg":"One thing we could potentially do to optimize the heartbeats, is to creat our own layer of connectivity check, and intercept heartbeat messages","username":"guoger","ts":"2019-01-12T23:12:59.632Z"}
{"msg":"The layer simply does a full mesh connectivity check. Whenever a node sends out a heartbeat, we lookup the connectivity, and feed it with artificial MsgHeartbeatResp","username":"guoger","ts":"2019-01-12T23:16:21.010Z"}
{"msg":"The layer simply does a full mesh connectivity check. Whenever a node sends out a heartbeat, we look up the connectivity status, and feed it with artificial MsgHeartbeatResp if the connection between src and dest has been active recently (<1s)","username":"guoger","ts":"2019-01-12T23:16:21.010Z"}
{"msg":"And we periodically give followers MsgHeartbeatResp based on connectivity as well","username":"guoger","ts":"2019-01-12T23:16:57.794Z"}
{"msg":"why not just make the heart beat interval bigger @guoger ?","username":"yacovm","ts":"2019-01-13T07:13:51.159Z"}
{"msg":"> One thing we could potentially do to optimize the heartbeats, is to creat our own layer of connectivity check, and intercept heartbeat messages \nthat won't solve the I/O problem because it also writes these heart beats into the disk, doesn't it?","username":"yacovm","ts":"2019-01-13T07:15:37.400Z"}
{"msg":"I say we first finish Raft and make it solid and sturdy and only later think how we make it fast for multi-tenancy. ","username":"yacovm","ts":"2019-01-13T07:16:39.128Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=RtH7Gas7ZWdci9YXB) @yacovm that's probably the best option we have for now, although it prolongs leader failover time a bit","username":"guoger","ts":"2019-01-13T07:20:56.018Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=RtH7Gas7ZWdci9YXB","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=RtH7Gas7ZWdci9YXB","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zSM9bE5kZBspvQGNh) @yacovm it's not trying to solve i/o problem. it's just a means to reduce number of heartbeat messages. plus, heartbeat is not written to disk","username":"guoger","ts":"2019-01-13T07:21:32.660Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zSM9bE5kZBspvQGNh","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zSM9bE5kZBspvQGNh","remote":true,"fileId":null,"fileName":null}]}
{"msg":"that's good","username":"yacovm","ts":"2019-01-13T07:21:43.477Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KiqrnF4t7TT6SDXND) @yacovm i agree. just trying to brainstorm some ideas here :)","username":"guoger","ts":"2019-01-13T07:22:06.144Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KiqrnF4t7TT6SDXND","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KiqrnF4t7TT6SDXND","remote":true,"fileId":null,"fileName":null}]}
{"msg":"look at the upside, at least we have a single gRPC connection between nodes regardless how many channels","username":"yacovm","ts":"2019-01-13T07:22:17.672Z"}
{"msg":"well, actually 2 - egress and ingress","username":"yacovm","ts":"2019-01-13T07:22:37.359Z"}
{"msg":"gossip has a single...","username":"yacovm","ts":"2019-01-13T07:22:44.264Z"}
{"msg":"another problem i often see is:\n> 22:12:40 [e][OrdererOrg.orderer1] 2019-01-12 14:11:31.545331 W | wal: sync duration of 1.438320949s, expected less than 1s","username":"guoger","ts":"2019-01-13T07:25:30.731Z"}
{"msg":"this is on critical path where data is persisted to wal.","username":"guoger","ts":"2019-01-13T07:26:54.106Z"}
{"msg":"and 1.4s looks pretty bad... it blocks raft thread, which prevents next round of heartbeat from being broadcasted. ","username":"guoger","ts":"2019-01-13T07:29:30.881Z"}
{"msg":"where do you see it?","username":"yacovm","ts":"2019-01-13T07:29:34.939Z"}
{"msg":"only in CI","username":"guoger","ts":"2019-01-13T07:29:42.228Z"}
{"msg":"so no problem","username":"yacovm","ts":"2019-01-13T07:29:47.012Z"}
{"msg":"we can document in the documentation site - not run Raft in production on CI servers","username":"yacovm","ts":"2019-01-13T07:30:06.756Z"}
{"msg":"we can document in the documentation site - not run Raft in production on our CI servers","username":"yacovm","ts":"2019-01-13T07:30:06.756Z"}
{"msg":"lol","username":"guoger","ts":"2019-01-13T07:30:16.076Z"}
{"msg":"actually, have you ever seen this in svt tests?","username":"guoger","ts":"2019-01-13T07:30:34.157Z"}
{"msg":"i have SSD, and no","username":"yacovm","ts":"2019-01-13T07:30:42.248Z"}
{"msg":"no","username":"yacovm","ts":"2019-01-13T07:30:42.248Z"}
{"msg":"I think we really should relax the times though","username":"yacovm","ts":"2019-01-13T07:31:16.288Z"}
{"msg":"100 milliseconds for a heart beat sounds a bit edgy to me","username":"yacovm","ts":"2019-01-13T07:31:30.526Z"}
{"msg":"what are the recommended values?","username":"yacovm","ts":"2019-01-13T07:31:36.497Z"}
{"msg":"that's the default value for etcd","username":"guoger","ts":"2019-01-13T07:31:48.323Z"}
{"msg":"what are the recommended values for production?","username":"yacovm","ts":"2019-01-13T07:32:03.471Z"}
{"msg":"what does etcd use?","username":"yacovm","ts":"2019-01-13T07:32:16.652Z"}
{"msg":"and from https://coreos.com/etcd/docs/latest/tuning.html:\n> The value of heartbeat interval is recommended to be around the maximum of average round-trip time (RTT) between members, normally around 0.5-1.5x the round-trip time.","username":"guoger","ts":"2019-01-13T07:32:33.847Z"}
{"msg":"by the way now that you mention it","username":"yacovm","ts":"2019-01-13T07:35:42.901Z"}
{"msg":"do we support dynamic changing of this value? :thinking: ","username":"yacovm","ts":"2019-01-13T07:35:51.868Z"}
{"msg":"good point. no, and we should guard against this...","username":"guoger","ts":"2019-01-13T08:35:12.645Z"}
{"msg":"i don't see a good reason to make this changeable, at least for now...","username":"guoger","ts":"2019-01-13T08:36:18.343Z"}
{"msg":"although, we probably should make `SnapshotInterval` changeable, and as you suggested before, per size instead of # of blocks. although i think that's not at top priority","username":"guoger","ts":"2019-01-13T08:37:15.722Z"}
{"msg":"we should document all these easter eggs in JIRA :/ ","username":"yacovm","ts":"2019-01-13T08:42:54.342Z"}
{"msg":"to not lose them","username":"yacovm","ts":"2019-01-13T08:42:59.464Z"}
{"msg":"or are they already documented?","username":"yacovm","ts":"2019-01-13T08:43:11.615Z"}
{"msg":"good point, created FAB-13654 FAB-13655 FAB-13656","username":"guoger","ts":"2019-01-13T08:56:45.471Z"}
{"msg":"need a another pair of eyes for [this](https://jenkins.hyperledger.org/job/fabric-verify-integration-tests-x86_64/4704/consoleFull)\nseems that `Inovke` is successful and peer committed the block,\n```\n14:42:01 [e][Org2.peer0] 2019-01-14 06:41:59.561 UTC [kvledger] CommitWithPvtData -> INFO 057 [testchannel] Committed block [8] with 1 transaction(s) in 28ms (state_validation=0ms block_commit=19ms state_commit=4ms)\n14:42:01 [e][Org1.peer0] 2019-01-14 06:41:59.561 UTC [kvledger] CommitWithPvtData -> INFO 08a [testchannel] Committed block [8] with 1 transaction(s) in 27ms (state_validation=0ms block_commit=18ms state_commit=4ms)\n14:42:01 [e][peer-chaincode-invoke] 2019-01-14 06:41:59.561 UTC [chaincodeCmd] ClientWait -> INFO 001 txid [86e9b9034cf6a469cdbec286d2999cb306c4024ccd3d6af42686ff6b843518a2] committed with status (VALID) at 127.0.0.1:33009\n14:42:01 [e][Org2.peer1] 2019-01-14 06:41:59.563 UTC [kvledger] CommitWithPvtData -> INFO 082 [testchannel] Committed block [8] with 1 transaction(s) in 27ms (state_validation=0ms block_commit=18ms state_commit=4ms)\n14:42:01 [e][peer-chaincode-invoke] 2019-01-14 06:41:59.563 UTC [chaincodeCmd] ClientWait -> INFO 002 txid [86e9b9034cf6a469cdbec286d2999cb306c4024ccd3d6af42686ff6b843518a2] committed with status (VALID) at 127.0.0.1:33024\n14:42:01 [e][peer-chaincode-invoke] 2019-01-14 06:41:59.563 UTC [chaincodeCmd] chaincodeInvokeOrQuery -> INFO 003 Chaincode invoke successful. result: status:200 \n```\nHowever, `Query` failed with a stale value...\n```\n14:42:01 [e][Org1.peer1] 2019-01-14 06:41:59.635 UTC [endorser] callChaincode -> INFO 077 [testchannel][4b55e50b] Entry chaincode: name:\"mycc\" \n14:42:01 [e][Org1.peer1] 2019-01-14 06:41:59.635 UTC [peer.chaincode.6nacn2bmlfenfpvac6ca5uumbi-Org1.peer1-mycc-0.0] func2 -> INFO 078 ex02 Invoke\n14:42:01 [e][Org1.peer1] 2019-01-14 06:41:59.636 UTC [peer.chaincode.6nacn2bmlfenfpvac6ca5uumbi-Org1.peer1-mycc-0.0] func2 -> INFO 079 Query Response:{\"Name\":\"a\",\"Amount\":\"40\"}\n```","username":"guoger","ts":"2019-01-14T10:08:13.336Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KANgekNWAsBRbPWwe) @tock here :) and also state machine diagram would be super helpful","username":"guoger","ts":"2019-01-14T13:42:57.743Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KANgekNWAsBRbPWwe","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=KANgekNWAsBRbPWwe","remote":true,"fileId":null,"fileName":null}]}
{"msg":"> Do you see any particular piece we could take as reference there? @kostas \nRE: Dragonboat. Haven't studied the codebase in detail yet, just a quick skim, so no. But as we wrote before, we are certainly exposed to the same issues for which the Multiraft project was started. At any rate, I agree w/ you guys. Nothing to sweat about at this point. Just posted it so that it's out there. We can optimize later if need be.","username":"kostas","ts":"2019-01-14T13:45:45.722Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=NWm4xR5JzjmJobz3t) The user will have to put a config-update with state=CONTEXT, type=etcdraft, and rarft-metadata on every app channel. The reason is, that once a channel is created, the system channel really has no way to enforce anything on it (\"cascade\"). In order to have a valid etcdraft config-block on an app channel, it has to come from a config-update on that channel.","username":"tock","ts":"2019-01-14T13:46:25.391Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=NWm4xR5JzjmJobz3t","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=NWm4xR5JzjmJobz3t","remote":true,"fileId":null,"fileName":null}]}
{"msg":"RE: RPC changes. +1 on calling everything `Step` as the etcd/raft library does, similar to what Jay suggested in the scrum. So, one `Step` stream to rule everything.","username":"kostas","ts":"2019-01-14T13:47:10.080Z"}
{"msg":"ok, so i'll just add a field `Type` to the protobuf message we send that would denote the recipient of the message - i.e, a transaction or a consensus message","username":"yacovm","ts":"2019-01-14T13:52:59.168Z"}
{"msg":"sounds good, @kostas  @guoger ?  ","username":"yacovm","ts":"2019-01-14T13:53:17.137Z"}
{"msg":"ok we have a quorum","username":"yacovm","ts":"2019-01-14T13:54:28.270Z"}
{"msg":"@kostas @yacovm @C0rWin @guoger I split the migration green path into 4 parts:\nhttps://gerrit.hyperledger.org/r/#/c/28435/\nhttps://gerrit.hyperledger.org/r/#/c/28705/\nhttps://gerrit.hyperledger.org/r/#/c/28707/\nhttps://gerrit.hyperledger.org/r/#/c/28708/\n","username":"tock","ts":"2019-01-14T17:07:38.581Z"}
{"msg":"This doesn't seem to match any of the existing test flakes: https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/7974/console but wanted to confirm before I opened a bug","username":"jyellick","ts":"2019-01-15T04:26:10.319Z"}
{"msg":"@jyellick thanks for reporting this. i haven't seen this either, pls open a bug under https://jira.hyperledger.org/browse/FAB-13371, thx!","username":"guoger","ts":"2019-01-15T05:36:33.627Z"}
{"msg":"https://jira.hyperledger.org/browse/FAB-13691","username":"jyellick","ts":"2019-01-15T06:23:26.477Z"}
{"msg":"@guoger is this something you are familiar with? etcdraft failing integration, https://jenkins.hyperledger.org/job/fabric-verify-integration-tests-x86_64/4718/console ","username":"tock","ts":"2019-01-15T08:21:09.021Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=MgzAN4k5m3MSqpMpG) @yacovm posted this before. It hasn't hit etcdraft chain yet, but i do find this failure weird... could you open a jira for this, if yacov hasn't done it.","username":"guoger","ts":"2019-01-15T08:30:21.635Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=MgzAN4k5m3MSqpMpG","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=MgzAN4k5m3MSqpMpG","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I didn't open a JIRA for the 2nd one","username":"yacovm","ts":"2019-01-15T08:30:54.193Z"}
{"msg":"that's the reason for the failure I think","username":"yacovm","ts":"2019-01-15T08:31:11.294Z"}
{"msg":"what's the reason?","username":"guoger","ts":"2019-01-15T08:45:30.803Z"}
{"msg":"well if you have an envelope that is swallowed ","username":"yacovm","ts":"2019-01-15T08:53:59.300Z"}
{"msg":"the test will fail....","username":"yacovm","ts":"2019-01-15T08:54:03.608Z"}
{"msg":"the broadcast client causes a panic which causes the panic handler to swallow the envelope","username":"yacovm","ts":"2019-01-15T08:54:22.485Z"}
{"msg":"well, more like puke it","username":"yacovm","ts":"2019-01-15T08:54:28.020Z"}
{"msg":"instead of swallowing","username":"yacovm","ts":"2019-01-15T08:54:31.492Z"}
{"msg":"@yacovm @guoger is this related to the previous one? it looks different to my untrained eye: https://jenkins.hyperledger.org/job/fabric-verify-integration-tests-x86_64/4718/console","username":"tock","ts":"2019-01-15T09:22:38.007Z"}
{"msg":"@yacovm @guoger is this related to the previous one? it looks different to my untrained eye (it is a rerun): https://jenkins.hyperledger.org/job/fabric-verify-integration-tests-x86_64/4718/console","username":"tock","ts":"2019-01-15T09:22:38.007Z"}
{"msg":"hmmm... it looks like the same panic stack?","username":"guoger","ts":"2019-01-15T10:32:13.523Z"}
{"msg":"i'm probably missing something... wdyt @yacovm ","username":"guoger","ts":"2019-01-15T10:32:45.109Z"}
{"msg":"i agree","username":"yacovm","ts":"2019-01-15T10:34:37.085Z"}
{"msg":"Has joined the channel.","username":"jlcs","ts":"2019-01-15T10:52:06.420Z","type":"uj"}
{"msg":"@guoger @yacovm my bad... I split the CR and left a hole in the etcdraft/chain... sorry for wasting your time :flushed:","username":"tock","ts":"2019-01-15T13:06:18.333Z"}
{"msg":"a hole in the chain","username":"yacovm","ts":"2019-01-15T13:13:41.355Z"}
{"msg":"sounds painful ","username":"yacovm","ts":"2019-01-15T13:13:49.075Z"}
{"msg":"@tock nothing to be sorry for :) we observed this failure before anyway. Btw, do you have the state machine diagram handy? thx","username":"guoger","ts":"2019-01-16T02:38:03.538Z"}
{"msg":"@tock i'm confused... can `migration_context` be > 0 on system channel? in proto, it states:\n> // On a standard channel, this must be >0. On a system channel, this is =0.\nalthough in the code, it checks:\n```\nsysState, sysContext := r.systemChannel.MigrationStatus().StateContext()\n\tif !(sysState == ab.ConsensusType_MIG_STATE_START && sysContext > 0) {\n\t\terr = fmt.Errorf(\"Cannot commit consensus-type migration because system channel (%s): state=%s, context=%d (expect: state=%s, context>0)\",\n\t\t\tr.systemChannel.ChainID(), sysState.String(), sysContext, ab.ConsensusType_MIG_STATE_START)\n\t\treturn err\n\t}\n```","username":"guoger","ts":"2019-01-16T03:35:21.118Z"}
{"msg":"correct. the documentation in protos needs updating. I decided to enforce the relation between start and commit+abort with the context in the system channel too. good catch, I'll update it. thanks!","username":"tock","ts":"2019-01-16T07:35:59.836Z"}
{"msg":"@guoger  correct. the documentation in protos needs updating. I decided to enforce the relation between start and commit+abort with the context in the system channel too. good catch, I'll update it. thanks!\nI created a JIRA so that I won't forget: https://jira.hyperledger.org/browse/FAB-13704","username":"tock","ts":"2019-01-16T07:35:59.836Z"}
{"msg":"@jyellick I have a question about `Bundle.ValidateNew()` and `ConsortiumsConfig()`:\nLooking at the code in `multichannel.Registrar`, I understood that  `_, ok := ConsortiumsConfig()` is used to identify the system channel. If two system channels are identified, the code panics. \nNow, in  `Bundle.ValidateNew()`, we have:\n```golang\nif cc, ok := b.ConsortiumsConfig(); ok {\n\t\tncc, ok := nb.ConsortiumsConfig()\n\t\tif !ok {\n\t\t\treturn errors.Errorf(\"Current config has consortiums section, but new config does not\")\n\t\t}\n\n\t\tfor consortiumName, consortium := range cc.Consortiums() {\n\t\t\tnconsortium, ok := ncc.Consortiums()[consortiumName]\n\t\t\tif !ok {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tfor orgName, org := range consortium.Organizations() {\n\t\t\t\tnorg, ok := nconsortium.Organizations()[orgName]\n\t\t\t\tif !ok {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tmspID := org.MSPID()\n\t\t\t\tif mspID != norg.MSPID() {\n\t\t\t\t\treturn errors.Errorf(\"Consortium %s org %s attempted to change MSP ID from %s to %s\", consortiumName, orgName, mspID, norg.MSPID())\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\nwhat prevents a new config update on a standard channel from adding a `ConsortiumsConfig` ? ","username":"tock","ts":"2019-01-16T08:04:09.639Z"}
{"msg":"@jyellick I have a question about `Bundle.ValidateNew()` and `ConsortiumsConfig()`:\nLooking at the code in `multichannel.Registrar`, I understood that  `_, ok := ConsortiumsConfig()` is used to identify the system channel. If two system channels are identified, the code panics. \nNow, in  `Bundle.ValidateNew()`, we have:\n```go\nif cc, ok := b.ConsortiumsConfig(); ok {\n\t\tncc, ok := nb.ConsortiumsConfig()\n\t\tif !ok {\n\t\t\treturn errors.Errorf(\"Current config has consortiums section, but new config does not\")\n\t\t}\n\n\t\tfor consortiumName, consortium := range cc.Consortiums() {\n\t\t\tnconsortium, ok := ncc.Consortiums()[consortiumName]\n\t\t\tif !ok {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tfor orgName, org := range consortium.Organizations() {\n\t\t\t\tnorg, ok := nconsortium.Organizations()[orgName]\n\t\t\t\tif !ok {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tmspID := org.MSPID()\n\t\t\t\tif mspID != norg.MSPID() {\n\t\t\t\t\treturn errors.Errorf(\"Consortium %s org %s attempted to change MSP ID from %s to %s\", consortiumName, orgName, mspID, norg.MSPID())\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\nwhat prevents a new config update on a standard channel from adding a `ConsortiumsConfig` ? ","username":"tock","ts":"2019-01-16T08:04:09.639Z"}
{"msg":"@jyellick I have a question about `Bundle.ValidateNew()` and `ConsortiumsConfig()`:\nLooking at the code in `multichannel.Registrar`, I understood that  `_, ok := ConsortiumsConfig()` is used to identify the system channel. If two system channels are identified, the code panics. \nNow, in  `Bundle.ValidateNew()`, we have:\n```\nif cc, ok := b.ConsortiumsConfig(); ok {\n\t\tncc, ok := nb.ConsortiumsConfig()\n\t\tif !ok {\n\t\t\treturn errors.Errorf(\"Current config has consortiums section, but new config does not\")\n\t\t}\n\n\t\tfor consortiumName, consortium := range cc.Consortiums() {\n\t\t\tnconsortium, ok := ncc.Consortiums()[consortiumName]\n\t\t\tif !ok {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tfor orgName, org := range consortium.Organizations() {\n\t\t\t\tnorg, ok := nconsortium.Organizations()[orgName]\n\t\t\t\tif !ok {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tmspID := org.MSPID()\n\t\t\t\tif mspID != norg.MSPID() {\n\t\t\t\t\treturn errors.Errorf(\"Consortium %s org %s attempted to change MSP ID from %s to %s\", consortiumName, orgName, mspID, norg.MSPID())\n\t\t\t\t}\n\t\t\t}\n\t\t}\n}\n```\nwhat prevents a new config update on a standard channel from adding a `ConsortiumsConfig` ? ","username":"tock","ts":"2019-01-16T08:04:09.639Z"}
{"msg":"@jyellick I have a question about `Bundle.ValidateNew()` and `ConsortiumsConfig()`:\nLooking at the code in `multichannel.Registrar`, I understood that  `_, ok := ConsortiumsConfig()` is used to identify the system channel. If two system channels are identified, the code panics. \nNow, in  `Bundle.ValidateNew()`, we have:\n```\n```\nwhat prevents a new config update on a standard channel from adding a `ConsortiumsConfig` ? ","username":"tock","ts":"2019-01-16T08:04:09.639Z"}
{"msg":"@jyellick I have a question about `Bundle.ValidateNew()` and `ConsortiumsConfig()`:\nLooking at the code in `multichannel.Registrar`, I understood that  `_, ok := ConsortiumsConfig()` is used to identify the system channel. If two system channels are identified, the code panics. \nNow, in  `Bundle.ValidateNew()`, we have:\n```\n\tif cc, ok := b.ConsortiumsConfig(); ok {\n\t\tncc, ok := nb.ConsortiumsConfig()\n\t\tif !ok {\n\t\t\treturn errors.Errorf(\"Current config has consortiums section, but new config does not\")\n\t\t}\n\n\t\tfor consortiumName, consortium := range cc.Consortiums() {\n\t\t\tnconsortium, ok := ncc.Consortiums()[consortiumName]\n\t\t\tif !ok {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tfor orgName, org := range consortium.Organizations() {\n\t\t\t\tnorg, ok := nconsortium.Organizations()[orgName]\n\t\t\t\tif !ok {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tmspID := org.MSPID()\n\t\t\t\tif mspID != norg.MSPID() {\n\t\t\t\t\treturn errors.Errorf(\"Consortium %s org %s attempted to change MSP ID from %s to %s\", consortiumName, orgName, mspID, norg.MSPID())\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n```\nwhat prevents a new config update on a standard channel from adding a `ConsortiumsConfig` ? ","username":"tock","ts":"2019-01-16T08:04:09.639Z"}
{"msg":"@jyellick I have a question about `Bundle.ValidateNew()` and `ConsortiumsConfig()`:\nLooking at the code in `multichannel.Registrar`, I understood that  `_, ok := ConsortiumsConfig()` is used to identify the system channel. If two system channels are identified, the code panics. \nNow, in  `Bundle.ValidateNew()`, we have:\n```\n\tif cc, ok := b.ConsortiumsConfig(); ok {\n\t\tncc, ok := nb.ConsortiumsConfig()\n\t\tif !ok {\n\t\t\treturn errors.Errorf(\"Current config has consortiums section, but new config does not\")\n\t\t}\n\n\t\tfor consortiumName, consortium := range cc.Consortiums() {\n\t\t\tnconsortium, ok := ncc.Consortiums()[consortiumName]\n\t\t\tif !ok {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tfor orgName, org := range consortium.Organizations() {\n\t\t\t\tnorg, ok := nconsortium.Organizations()[orgName]\n\t\t\t\tif !ok {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tmspID := org.MSPID()\n\t\t\t\tif mspID != norg.MSPID() {\n\t\t\t\t\treturn errors.Errorf(\"Consortium %s org %s attempted to change MSP ID from %s to %s\", consortiumName, orgName, mspID, norg.MSPID())\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n```\nWhat prevents a new config update on a standard channel from adding a `ConsortiumsConfig` ? \nIf it is allowed to happen, this could mess up the next Registrar initialization. Am I missing something?","username":"tock","ts":"2019-01-16T08:04:09.639Z"}
{"msg":"@jyellick I have a question about `Bundle.ValidateNew()` and `ConsortiumsConfig()`:\nLooking at the code in `multichannel.Registrar`, I understood that  `_, ok := ledgerResources.ConsortiumsConfig()` is used to identify the system channel. If two system channels are identified, the code panics. \nNow, in  `Bundle.ValidateNew()`, we have:\n```\n\tif cc, ok := b.ConsortiumsConfig(); ok {\n\t\tncc, ok := nb.ConsortiumsConfig()\n\t\tif !ok {\n\t\t\treturn errors.Errorf(\"Current config has consortiums section, but new config does not\")\n\t\t}\n\n\t\tfor consortiumName, consortium := range cc.Consortiums() {\n\t\t\tnconsortium, ok := ncc.Consortiums()[consortiumName]\n\t\t\tif !ok {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tfor orgName, org := range consortium.Organizations() {\n\t\t\t\tnorg, ok := nconsortium.Organizations()[orgName]\n\t\t\t\tif !ok {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tmspID := org.MSPID()\n\t\t\t\tif mspID != norg.MSPID() {\n\t\t\t\t\treturn errors.Errorf(\"Consortium %s org %s attempted to change MSP ID from %s to %s\", consortiumName, orgName, mspID, norg.MSPID())\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n```\nWhat prevents a new config update on a standard channel from adding a `ConsortiumsConfig` ? \nIf it is allowed to happen, this could mess up the next Registrar initialization. Am I missing something?","username":"tock","ts":"2019-01-16T08:04:09.639Z"}
{"msg":"Has left the channel.","username":"sanket1211","ts":"2019-01-16T11:23:11.719Z","type":"ul"}
{"msg":"@guoger @yacovm @C0rWin @kostas  Here is a draft document that describes the migration state machine: https://docs.google.com/document/d/1g_M8KO9cdbYMLBsscHd6ffv-X_ZRLeHvDcIEoV7YXUE/edit?usp=sharing","username":"tock","ts":"2019-01-16T12:23:21.085Z"}
{"msg":"@tock can you make it commentable?","username":"guoger","ts":"2019-01-16T13:19:44.731Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=D6XidjSzKmfLxa4FD) @guoger https://docs.google.com/document/d/1g_M8KO9cdbYMLBsscHd6ffv-X_ZRLeHvDcIEoV7YXUE/edit?usp=sharing","username":"tock","ts":"2019-01-16T13:51:49.569Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=D6XidjSzKmfLxa4FD","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=D6XidjSzKmfLxa4FD","remote":true,"fileId":null,"fileName":null}]}
{"msg":"> What prevents a new config update on a standard channel from adding a `ConsortiumsConfig` ? \n> If it is allowed to happen, this could mess up the next Registrar initialization. Am I missing something?","username":"kostas","ts":"2019-01-16T15:37:14.694Z"}
{"msg":"@tock: I am not jyellick, but you're reading this right and not missing anything.","username":"kostas","ts":"2019-01-16T15:37:38.649Z"}
{"msg":"(It will be hilarious if I'm wrong though.)","username":"kostas","ts":"2019-01-16T15:38:11.750Z"}
{"msg":"luckily, channel config transactions are too complex to be a good way to shoot yourself in the foot","username":"yacovm","ts":"2019-01-16T15:39:04.707Z"}
{"msg":"Yes, the only thing protecting the network from getting messed up with initialization is that the orderer admin should not agree to define Consortiums on an application channel.","username":"jyellick","ts":"2019-01-16T15:39:13.722Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=LXFdBCNRr7TW8Y6Hn) @jyellick Do you object if I fix this while I am doing the migration work? I am not sure all orderer admins realize the implications of this...","username":"tock","ts":"2019-01-16T16:10:23.494Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=LXFdBCNRr7TW8Y6Hn","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=LXFdBCNRr7TW8Y6Hn","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=vyc4vQQaebujXqbhW) @yacovm Security by obscurity ;-)","username":"tock","ts":"2019-01-16T16:12:17.004Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=vyc4vQQaebujXqbhW","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=vyc4vQQaebujXqbhW","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@tock By all means.  https://github.com/hyperledger/fabric/blob/f80f06953cf8eca38c9d428533f2547a953d983a/common/channelconfig/bundle.go#L79-L148\n\nYou will need to modify this function to allow migration from one consensus type to another.  This is also where the check for addition of a consortiums group should go.  Both should likely be protected by a capability to avoid forking.","username":"jyellick","ts":"2019-01-16T16:15:35.642Z"}
{"msg":"Good. I'll do it in the context of this task: https://jira.hyperledger.org/browse/FAB-13705","username":"tock","ts":"2019-01-16T16:22:56.603Z"}
{"msg":"@yacovm @kostas @C0rWin \nI added these two to the bottom of the stack because they are easy and improve upon code that was already merged:\nhttps://gerrit.hyperledger.org/r/#/c/28776/  - this one is just documentation https://jira.hyperledger.org/browse/FAB-13704  following @guoger 's comments\nhttps://gerrit.hyperledger.org/r/#/c/28780/  - @jyellick  this one addresses the issue  with ConsortiumsConfig discussed above: https://jira.hyperledger.org/browse/FAB-13705\n","username":"tock","ts":"2019-01-17T12:21:28.563Z"}
{"msg":"Do we know what's causing the verify build failures in CI?","username":"kostas","ts":"2019-01-17T15:33:30.289Z"}
{"msg":"@kostas which one?","username":"guoger","ts":"2019-01-17T15:39:26.137Z"}
{"msg":"I was looking at https://gerrit.hyperledger.org/r/c/27845/ but I'm asking more generally. Why on earth does verify-build fail so often?","username":"kostas","ts":"2019-01-17T15:44:07.893Z"}
{"msg":"`11:28:37 github.com/onsi/gomega/types: imported or required, but missing from Gopkg.lock's input-imports`","username":"yacovm","ts":"2019-01-17T15:47:48.112Z"}
{"msg":"@kostas ah, that was me being careless while pushing the previous [CR](https://gerrit.hyperledger.org/r/c/28778/), where `dep ensure` should be ran","username":"guoger","ts":"2019-01-17T15:48:07.218Z"}
{"msg":"@yacovm you beat me on this","username":"guoger","ts":"2019-01-17T15:48:12.924Z"}
{"msg":"you're using forbidden magic (gomega)","username":"yacovm","ts":"2019-01-17T15:48:16.852Z"}
{"msg":"haha","username":"guoger","ts":"2019-01-17T15:48:27.830Z"}
{"msg":"So verify-build failures are always legitimate user errors and not the CI dying on us.","username":"kostas","ts":"2019-01-17T15:55:16.337Z"}
{"msg":"@kostas updated those CR, waiting for CI","username":"guoger","ts":"2019-01-17T16:55:03.395Z"}
{"msg":"if a node is removed from consenter set *while it is disconnected*, how does it properly halt itself? if wouldn't be able to connect to other nodes at all due to the removal of certificate, right? even if it can connect, leader would not replicate data to it anyway... thoughts? @yacovm @kostas ","username":"guoger","ts":"2019-01-18T09:41:46.280Z"}
{"msg":"it is not a problem in etcd because this node is going to be shut down anyway...","username":"guoger","ts":"2019-01-18T09:42:23.948Z"}
{"msg":"it is not a problem in etcd because this node is going to be shut down anyway... created https://jira.hyperledger.org/browse/FAB-13750 to track this. (it's currently under FAB-11863 (backlog)","username":"guoger","ts":"2019-01-18T09:42:23.948Z"}
{"msg":"etcd doesn't deal with this problem because this node is going to be shut down anyway... created https://jira.hyperledger.org/browse/FAB-13750 to track this. (it's currently under FAB-11863 (backlog)","username":"guoger","ts":"2019-01-18T09:42:23.948Z"}
{"msg":"not sure what's the issue? I thought the `etcdraft.Chain` halts itself, @guoger ","username":"yacovm","ts":"2019-01-18T10:18:54.923Z"}
{"msg":"are you saying the node is removed and it never receives the config update about it?","username":"yacovm","ts":"2019-01-18T10:19:15.876Z"}
{"msg":"it will keep trying to connect to other OSNs in that case","username":"yacovm","ts":"2019-01-18T10:20:24.143Z"}
{"msg":"but we have the same problem in peers too - a peer doesn't detect its own eviction from an organization. It will keep trying to pull blocks despite not being eligible ","username":"yacovm","ts":"2019-01-18T10:21:30.105Z"}
{"msg":"I think we can solve this by having the node probe the system channel OSNs via deliver and seeing if it is a participant of the chain or not. ","username":"yacovm","ts":"2019-01-18T11:04:09.788Z"}
{"msg":"I'll take this on","username":"yacovm","ts":"2019-01-18T11:04:13.553Z"}
{"msg":"will do it after I take care of the comm layer's Step RPC","username":"yacovm","ts":"2019-01-18T11:19:54.921Z"}
{"msg":"Cool. Just be mindful about the distinction between a newly added node and just removed node","username":"guoger","ts":"2019-01-18T12:19:37.981Z"}
{"msg":"Hold on, how does system channel know if a node is part of an application channel?","username":"guoger","ts":"2019-01-18T12:21:03.668Z"}
{"msg":"And what if a node is removed from sys but not app channel? Do we have explicit check to prevent that?","username":"guoger","ts":"2019-01-18T12:22:13.529Z"}
{"msg":">  Hold on, how does system channel know if a node is part of an application channel? \nit doesn't. you need to ask every system channel *OSN* about the application channel","username":"yacovm","ts":"2019-01-18T14:39:24.467Z"}
{"msg":">  And what if a node is removed from sys but not app channel? Do we have explicit check to prevent that? \nWe don't have a check for that, no. ","username":"yacovm","ts":"2019-01-18T14:40:25.496Z"}
{"msg":"if a node is removed from the system channel, it should be removed from all ","username":"yacovm","ts":"2019-01-18T14:40:36.798Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Fx4h3rsv5LABn5hS5) @yacovm yeah... i have this in my mind: to remove a node from network, one needs to remove it from all the application channel, then remove it from system channel, and stop it.","username":"guoger","ts":"2019-01-18T14:54:44.680Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Fx4h3rsv5LABn5hS5","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Fx4h3rsv5LABn5hS5","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Fx4h3rsv5LABn5hS5) @yacovm yeah... i have this in my mind: _to remove a node from network, one needs to remove it from all the application channel, then remove it from system channel, and stop it_ but not very willing to say it out :joy:","username":"guoger","ts":"2019-01-18T14:54:44.680Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Fx4h3rsv5LABn5hS5","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Fx4h3rsv5LABn5hS5","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Fx4h3rsv5LABn5hS5) @yacovm yeah... i have this in my mind: _to remove a node from network, one needs to remove it from all the application channel, then remove it from system channel, and stop it._ but not very willing to say it out :joy:","username":"guoger","ts":"2019-01-18T14:54:44.680Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Fx4h3rsv5LABn5hS5","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Fx4h3rsv5LABn5hS5","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Fx4h3rsv5LABn5hS5) @yacovm yeah... i have this in my mind: _to remove a node from network, one needs to remove it from all the application channel, then remove it from system channel_","username":"guoger","ts":"2019-01-18T14:54:44.680Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Fx4h3rsv5LABn5hS5","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Fx4h3rsv5LABn5hS5","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=TPNe5ACj7pB6huS3r) @yacovm i don't follow how this solves our problem here?","username":"guoger","ts":"2019-01-18T14:56:48.002Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=TPNe5ACj7pB6huS3r","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=TPNe5ACj7pB6huS3r","remote":true,"fileId":null,"fileName":null}]}
{"msg":"it solves the problem because the node can ask the system channel members whether the application channel he thinks he is part of, has its certificate in the latest config block","username":"yacovm","ts":"2019-01-18T15:00:56.593Z"}
{"msg":"but how does system channel access the config block (current consenter set) of a particular application channel?","username":"guoger","ts":"2019-01-18T15:10:23.091Z"}
{"msg":"btw, have you seen this before [this](https://jenkins.hyperledger.org/job/fabric-verify-integration-tests-x86_64/4839/console)?\n> 20:15:53 [e][peer-channel-create] Error: got unexpected status: BAD_REQUEST -- error authorizing update: error validating ReadSet: readset expected key [Group]  /Channel/Application at version 0, but got version 1","username":"guoger","ts":"2019-01-18T15:11:03.285Z"}
{"msg":"btw, have you seen this before [this](https://jenkins.hyperledger.org/job/fabric-verify-integration-tests-x86_64/4839/console)?\n```\n20:15:53 [e][peer-channel-create] Error: got unexpected status: BAD_REQUEST -- error authorizing update: error validating ReadSet: readset expected key [Group]  /Channel/Application at version 0, but got version 1\n```","username":"guoger","ts":"2019-01-18T15:11:03.285Z"}
{"msg":"it doesn't access.","username":"yacovm","ts":"2019-01-18T15:12:37.232Z"}
{"msg":"the OSN will access it","username":"yacovm","ts":"2019-01-18T15:12:42.447Z"}
{"msg":"it will poll the system channel OSNs","username":"yacovm","ts":"2019-01-18T15:12:52.162Z"}
{"msg":"that means the channel is already created, Jay","username":"yacovm","ts":"2019-01-18T15:13:06.343Z"}
{"msg":"haha, i mean why does this fails onboard integration test?","username":"guoger","ts":"2019-01-18T15:14:38.996Z"}
{"msg":"haha, i mean why does this fail onboard integration test?","username":"guoger","ts":"2019-01-18T15:14:38.996Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=skSeDCkjy3xas4k36) @yacovm bear with me. can you break this down? no hurry, it's late here anyway. Also, i feel it's a bit overkill. if certificate is refused, we do get error, right? and if we repeatedly encounter this error, it very likely means that we are banned from this channel, and should halt. operator could always remove and then add again this node, if that's not the case.","username":"guoger","ts":"2019-01-18T15:20:15.131Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=skSeDCkjy3xas4k36","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=skSeDCkjy3xas4k36","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=skSeDCkjy3xas4k36) @yacovm bear with me. can you break this down? no hurry, it's late here anyway. Also, i feel it's a bit overkill. if certificate is refused, we do get error, right? and if we repeatedly encounter this error, it very likely means that this node is banned from this channel, and should halt. operator could always remove and then add again this node, if that's not the case.","username":"guoger","ts":"2019-01-18T15:20:15.131Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=skSeDCkjy3xas4k36","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=skSeDCkjy3xas4k36","remote":true,"fileId":null,"fileName":null}]}
{"msg":"it's not that simple... because it can be that the nodes you are polling are the ones that are late","username":"yacovm","ts":"2019-01-18T15:23:36.183Z"}
{"msg":"and don't know that you were added","username":"yacovm","ts":"2019-01-18T15:23:40.447Z"}
{"msg":"so the idea i have in mind is - lets say you cannot reach any node in the channel and they all tell your TLS certificate is not in the channel.","username":"yacovm","ts":"2019-01-18T15:33:08.897Z"}
{"msg":"you then just query all OSNs you know are in the system channel","username":"yacovm","ts":"2019-01-18T15:33:19.697Z"}
{"msg":"each such an OSN returns to you its latest config block","username":"yacovm","ts":"2019-01-18T15:33:29.204Z"}
{"msg":"if the latest config block they return to you is later than your own","username":"yacovm","ts":"2019-01-18T15:33:38.920Z"}
{"msg":"and you get that config block, and see that you're not in the channel ","username":"yacovm","ts":"2019-01-18T15:33:57.537Z"}
{"msg":"then you halt the chain","username":"yacovm","ts":"2019-01-18T15:34:03.055Z"}
{"msg":"Good catch. I left a comment with some thoughts on FAB-13750.","username":"kostas","ts":"2019-01-18T17:08:42.610Z"}
{"msg":"Let's try to review/merge as much of Jay's CR stack as we can in the meantime please.","username":"kostas","ts":"2019-01-18T17:09:17.749Z"}
{"msg":"Ah, I guess I misinterpreted this to be _the latest config in systemchannel_ but you actually meant application channel, correct? @yacovm [ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3hyzyFmGCjYSfxR6F)","username":"guoger","ts":"2019-01-19T00:20:40.821Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3hyzyFmGCjYSfxR6F","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=3hyzyFmGCjYSfxR6F","remote":true,"fileId":null,"fileName":null}]}
{"msg":"yeah","username":"yacovm","ts":"2019-01-19T00:38:48.448Z"}
{"msg":"If a removed node notices that *all* other nodes in its channel *reject* its certificate, wouldn’t that be sufficient hint it’s been excluded from channel?","username":"guoger","ts":"2019-01-19T02:05:30.361Z"}
{"msg":"@guoger: That’s the approach I suggested in the FAB you opened up. ","username":"kostas","ts":"2019-01-19T03:57:15.845Z"}
{"msg":"The TL;DR (see Yacov’s response in the thread) is that in order for us to be able to re-add that OSN to the channel on the future *and* be able to re-use a lot of the code that Yacov has written already, we need to append that config block that tells the OSN it’s not part of the ledger. ","username":"kostas","ts":"2019-01-19T04:03:46.350Z"}
{"msg":"Ah Just saw that","username":"guoger","ts":"2019-01-19T04:04:40.574Z"}
{"msg":"also, what if you have 8 nodes, and you remove 2 but they were offline and didn't get the config update. the 2 nodes come back online, and can talk to each other. that violates the *all* condition no?","username":"yacovm","ts":"2019-01-19T08:17:36.935Z"}
{"msg":"@guoger ","username":"yacovm","ts":"2019-01-19T08:17:41.862Z"}
{"msg":"True... what about rejected by quorum?","username":"guoger","ts":"2019-01-19T10:37:21.160Z"}
{"msg":"Btw, can a node pull blocks from the channel it was removed from?","username":"guoger","ts":"2019-01-19T10:37:51.536Z"}
{"msg":">  Btw, can a node pull blocks from the channel it was removed from? \nUh, yeah... ? why not? removing the node only means you removed its certificate from the consenter set. you can still connect as a client.","username":"yacovm","ts":"2019-01-19T10:50:45.105Z"}
{"msg":"That is actually not the case I had in mind. ","username":"kostas","ts":"2019-01-19T10:55:32.970Z"}
{"msg":">  True... what about rejected by quorum? \nIf you have, say - 3 nodes and 1 is brought offline. Now if you replace the certificates of the other 2 nodes (gradually, but due to periodic rotation), but also remove that offline node, and the offline node is brought back online later - it won't be able to connect to the quorum at all because the certificates have changed, and the TLS Dialer only trusts the specific certificates from the past","username":"yacovm","ts":"2019-01-19T10:55:34.807Z"}
{"msg":"Basically - production grade permissioned blockchain is complex ;) ","username":"yacovm","ts":"2019-01-19T10:56:39.185Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=SqZ4zKjSR4odpFAL2) @ Consider the chase where you remove a node because that org leaves the consortium.","username":"kostas","ts":"2019-01-19T10:56:50.123Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=SqZ4zKjSR4odpFAL2","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=SqZ4zKjSR4odpFAL2","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Consider the case where you remove a node because that org leaves the consortium.","username":"kostas","ts":"2019-01-19T10:56:50.123Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=SqZ4zKjSR4odpFAL2","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=SqZ4zKjSR4odpFAL2","remote":true,"fileId":null,"fileName":null}]}
{"msg":"then you get a forbidden status","username":"yacovm","ts":"2019-01-19T10:57:28.094Z"}
{"msg":"and you know you're outside ","username":"yacovm","ts":"2019-01-19T10:57:33.041Z"}
{"msg":"onboarding actually has this as a use case, which is tested in UTs","username":"yacovm","ts":"2019-01-19T10:57:46.415Z"}
{"msg":"and in integration test","username":"yacovm","ts":"2019-01-19T10:58:01.801Z"}
{"msg":"(I make a policy that says that no one can pull blocks, but only the onboarded OSN is effected by it :joy: because the other OSNs don't call deliver by use Raft )","username":"yacovm","ts":"2019-01-19T10:58:59.051Z"}
{"msg":"> but also remove that offline node, and the offline node is brought back online later - it won't be able to connect to the quorum at all because the certificates have changed, and the TLS Dialer only trusts the specific certificates from the past\na seemingly irrelevant question: if the offline node is *not* removed from the channel, how will it reconnect to other nodes when brought back online?","username":"guoger","ts":"2019-01-20T03:43:45.108Z"}
{"msg":"if their certificates/endpoints changed, it won't. that's why we need to make the change i proposed to make the OSN pull the blocks to see what's going on, and also have the administrators remove it and re-add it back.","username":"yacovm","ts":"2019-01-20T08:42:03.630Z"}
{"msg":"wait.... a second look at my question gives me pause.. it should still be able to connect to network, because its own certificate is not removed from consenter set, right?\n\nback to the scenario you described, if offline node is removed and not being able to connect to other nodes, i still don't get the necessity of it learning this from latest config block.. :(","username":"guoger","ts":"2019-01-20T14:49:27.823Z"}
{"msg":"because you need to make it understand that it is out of the chain. Once it is disconnected and removed it can't ask for blocks via Raft so nothing would tell it about its eviction. ","username":"yacovm","ts":"2019-01-20T16:32:38.522Z"}
{"msg":"hmm.... why does CI give me `No Builds Executed`?","username":"guoger","ts":"2019-01-22T08:10:32.468Z"}
{"msg":"Has joined the channel.","username":"ycarmel","ts":"2019-01-22T08:46:55.616Z","type":"uj"}
{"msg":"Has joined the channel.","username":"incarose","ts":"2019-01-23T00:23:55.110Z","type":"uj"}
{"msg":"Has joined the channel.","username":"allan.gulley","ts":"2019-01-23T03:29:36.681Z","type":"uj"}
{"msg":"updated https://gerrit.hyperledger.org/r/c/28918/ to point to sub-task. Another problem is, we couldn't increase tick interval beyond 250ms. That would result in a 5s leaderless period, and prevent `Deliver` api to return genesis block of newly created channel. and our {{peer channel create}} has default timeout of 5s.\n\nOne way to solve this, is to explicitly call `Campaign` on a raft node upon boot, to proactively start election, instead of waiting for ElectionTimeout. However, we need to decide how to have nodes decide on which node to start election... and i say we take the easy way for now: 1) enlarge peer timeout, or 2) leave it to 200/250ms","username":"guoger","ts":"2019-01-23T10:39:08.980Z"}
{"msg":"updated https://gerrit.hyperledger.org/r/c/28918/ to point to sub-task. Another problem is, we couldn't increase tick interval beyond 250ms. That would result in a 5s leaderless period, and prevent `Deliver` api to return genesis block of newly created channel. and our {{peer channel create}} has default timeout of 5s.\n\nOne way to solve this, is to explicitly call `Campaign` on a raft node upon boot, to proactively start election, instead of waiting for ElectionTimeout. However, we need to decide how to have nodes decide on which node to start election... and i say we take the easy way for now: 1) increase peer timeout, or 2) leave it to 200/250ms","username":"guoger","ts":"2019-01-23T10:39:08.980Z"}
{"msg":"wdyt @yacovm ","username":"guoger","ts":"2019-01-23T10:39:13.324Z"}
{"msg":"or we could have our own random timer at startup, and call `Campaign`","username":"guoger","ts":"2019-01-23T10:43:06.040Z"}
{"msg":"let's jut fix the peer CLI to have a bigger default timeout","username":"yacovm","ts":"2019-01-23T11:14:34.261Z"}
{"msg":"The election period is now longer, any way you look at it","username":"yacovm","ts":"2019-01-23T11:15:27.065Z"}
{"msg":"even if you start campaigning immediately it can only halve the timeout","username":"yacovm","ts":"2019-01-23T11:15:46.308Z"}
{"msg":"I know this is unrelated to the orderer, but: CI unit test failed \n```\n12:59:31 ok  \tgithub.com/hyperledger/fabric/core/admin\t0.406s\tcoverage: 98.8% of statements\n12:59:31 ==================\n12:59:31 WARNING: DATA RACE\n12:59:31 Write at 0x000001d3e110 by goroutine 26:\n12:59:31   github.com/hyperledger/fabric/core/cclifecycle_test.newLogRecorder()\n12:59:31       /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/core/cclifecycle/lifecycle_test.go:464 +0x99\n12:59:31   github.com/hyperledger/fabric/core/cclifecycle_test.TestMetadata()\n12:59:31       /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/core/cclifecycle/lifecycle_test.go:344 +0x53\n12:59:31   testing.tRunner()\n12:59:31       /opt/go/go1.11.1.linux.amd64/src/testing/testing.go:827 +0x162\n12:59:31 \n12:59:31 2019-01-23 10:58:34.887 UTC [discovery.lifecycle] DeployedChaincodes -> ERRO 033 Chaincode cc1 is listed in LSCC as cc2\n12:59:31 2019-01-23 10:58:34.888 UTC [discovery.lifecycle] DeployedChaincodes -> INFO 034 Chaincode cc1 isn't instantiated\n12:59:31 FAIL\n12:59:31 coverage: 99.3% of statements\n```\nany ideas who's in charge of that?","username":"tock","ts":"2019-01-23T12:06:57.387Z"}
{"msg":"I know this is unrelated to the orderer, but: CI unit test failed \n```\n12:59:31 ok  \tgithub.com/hyperledger/fabric/core/admin\t0.406s\tcoverage: 98.8% of statements\n12:59:31 ==================\n12:59:31 WARNING: DATA RACE\n12:59:31 Write at 0x000001d3e110 by goroutine 26:\n12:59:31   github.com/hyperledger/fabric/core/cclifecycle_test.newLogRecorder()\n12:59:31       /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/core/cclifecycle/lifecycle_test.go:464 +0x99\n12:59:31   github.com/hyperledger/fabric/core/cclifecycle_test.TestMetadata()\n12:59:31       /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/core/cclifecycle/lifecycle_test.go:344 +0x53\n12:59:31   testing.tRunner()\n12:59:31       /opt/go/go1.11.1.linux.amd64/src/testing/testing.go:827 +0x162\n...\n12:59:31 2019-01-23 10:58:34.887 UTC [discovery.lifecycle] DeployedChaincodes -> ERRO 033 Chaincode cc1 is listed in LSCC as cc2\n12:59:31 2019-01-23 10:58:34.888 UTC [discovery.lifecycle] DeployedChaincodes -> INFO 034 Chaincode cc1 isn't instantiated\n12:59:31 FAIL\n12:59:31 coverage: 99.3% of statements\n12:59:31 FAIL\tgithub.com/hyperledger/fabric/core/cclifecycle\t0.523s\n```\nany ideas who's in charge of that?","username":"tock","ts":"2019-01-23T12:06:57.387Z"}
{"msg":"I know this is unrelated to the orderer, but: CI unit test failed \n```\n12:59:31 ok  \tgithub.com/hyperledger/fabric/core/admin\t0.406s\tcoverage: 98.8% of statements\n12:59:31 ==================\n12:59:31 WARNING: DATA RACE\n12:59:31 Write at 0x000001d3e110 by goroutine 26:\n12:59:31   github.com/hyperledger/fabric/core/cclifecycle_test.newLogRecorder()\n12:59:31       /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/core/cclifecycle/lifecycle_test.go:464 +0x99\n12:59:31   github.com/hyperledger/fabric/core/cclifecycle_test.TestMetadata()\n12:59:31       /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/core/cclifecycle/lifecycle_test.go:344 +0x53\n12:59:31   testing.tRunner()\n12:59:31       /opt/go/go1.11.1.linux.amd64/src/testing/testing.go:827 +0x162\n...\n12:59:31 2019-01-23 10:58:34.887 UTC [discovery.lifecycle] DeployedChaincodes -> ERRO 033 Chaincode cc1 is listed in LSCC as cc2\n12:59:31 2019-01-23 10:58:34.888 UTC [discovery.lifecycle] DeployedChaincodes -> INFO 034 Chaincode cc1 isn't instantiated\n12:59:31 FAIL\n12:59:31 coverage: 99.3% of statements\n12:59:31 FAIL\tgithub.com/hyperledger/fabric/core/cclifecycle\t0.523s\n```\nany ideas who's in charge of that?","username":"tock","ts":"2019-01-23T12:06:57.387Z"}
{"msg":"I know this is unrelated to the orderer, but: CI unit test failed \n```\n12:59:31 ok  \tgithub.com/hyperledger/fabric/core/admin\t0.406s\tcoverage: 98.8% of statements\n12:59:31 ==================\n12:59:31 WARNING: DATA RACE\n12:59:31 Write at 0x000001d3e110 by goroutine 26:\n12:59:31   github.com/hyperledger/fabric/core/cclifecycle_test.newLogRecorder()\n12:59:31       /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/core/cclifecycle/lifecycle_test.go:464 +0x99\n12:59:31   github.com/hyperledger/fabric/core/cclifecycle_test.TestMetadata()\n12:59:31       /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/core/cclifecycle/lifecycle_test.go:344 +0x53\n12:59:31   testing.tRunner()\n12:59:31       /opt/go/go1.11.1.linux.amd64/src/testing/testing.go:827 +0x162\n...\n12:59:31 2019-01-23 10:58:34.887 UTC [discovery.lifecycle] DeployedChaincodes -> ERRO 033 Chaincode cc1 is listed in LSCC as cc2\n12:59:31 2019-01-23 10:58:34.888 UTC [discovery.lifecycle] DeployedChaincodes -> INFO 034 Chaincode cc1 isn't instantiated\n12:59:31 FAIL\n12:59:31 coverage: 99.3% of statements\n12:59:31 FAIL\tgithub.com/hyperledger/fabric/core/cclifecycle\t0.523s\n```\nany ideas who's in charge of that?","username":"tock","ts":"2019-01-23T12:06:57.387Z"}
{"msg":"@tock i create FAB-13843 for this, made a minor attempt to fix but gave up :(","username":"guoger","ts":"2019-01-23T12:15:04.684Z"}
{"msg":"i guess @sykesm or @jyellick could take a look?","username":"guoger","ts":"2019-01-23T12:15:35.415Z"}
{"msg":"> However, we need to decide how to have nodes decide on which node to start election...","username":"kostas","ts":"2019-01-23T15:05:52.607Z"}
{"msg":"@guoger: Can you expand on this?","username":"kostas","ts":"2019-01-23T15:05:58.489Z"}
{"msg":"What is it that I would take a look at? The core/cclifecycle data race? Assuming it's new... I would go to whoever introduced it.  I know @yacovm recently made some changes in there (though not sure if they're the culprit)","username":"jyellick","ts":"2019-01-23T17:13:46.177Z"}
{"msg":"I usually am, @jyellick ","username":"yacovm","ts":"2019-01-23T17:22:20.293Z"}
{"msg":"(the culprit)","username":"yacovm","ts":"2019-01-23T17:22:25.346Z"}
{"msg":"I put the JIRA on my tab","username":"yacovm","ts":"2019-01-23T17:23:04.475Z"}
{"msg":"Thanks @yacovm ","username":"jyellick","ts":"2019-01-23T17:23:27.963Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zght732vhXdyRvhGj) @kostas what i have in mind is, when a chain has just started (`Start` is called), we spawn a background go routine doing something like this:\n```\nselect {\ncase <-time.After(randomTimeout):\n  c.logger.Infof(\"Proactively start campaign\")\n  c.node.Campaign()\ncase <-c.electedC:\n  fallthrough\ncase <-c.doneC:\n  return\n}\n```\n  ","username":"guoger","ts":"2019-01-24T02:29:55.301Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zght732vhXdyRvhGj","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zght732vhXdyRvhGj","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I know this is unrelated to the orderer, but: CI unit test failed \n```\n12:59:31 ok  \tgithub.com/hyperledger/fabric/core/admin\t0.406s\tcoverage: 98.8% of statements\n12:59:31 ==================\n12:59:31 WARNING: DATA RACE\n12:59:31 Write at 0x000001d3e110 by g\n...\n12:59:31 2019-01-23 10:58:34.887 UTC [discovery.lifecycle] DeployedChaincodes -> ERRO 033 Chaincode cc1 is listed in LSCC as cc2\n12:59:31 2019-01-23 10:58:34.888 UTC [discovery.lifecycle] DeployedChaincodes -> INFO 034 Chaincode cc1 isn't instantiated\n12:59:31 FAIL\n12:59:31 coverage: 99.3% of statements\n12:59:31 FAIL\tgithub.com/hyperledger/fabric/core/cclifecycle\t0.523s\n```\nany ideas who's in charge of that?","username":"tock","ts":"2019-01-24T09:06:41.075Z"}
{"msg":"Again, unrelated to orderer but bothering all of us regardless; this failure in unit-test:\n```09:50:50 Running Suite: Grpclogging Suite\n09:50:50 ================================\n09:50:50 Random Seed: 1548575439\n09:50:50 Will run 31 of 31 specs\n09:50:50 \n09:50:50 •••••••••••••••••••••••\n09:50:50 ------------------------------\n09:50:50 • Failure [0.363 seconds]\n09:50:50 Server\n09:50:50 /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/common/grpclogging/server_test.go:36\n09:50:50   StreamServerInterceptor\n09:50:50   /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/common/grpclogging/server_test.go:356\n09:50:50     when options are used\n09:50:50     /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/common/grpclogging/server_test.go:579\n09:50:50       uses the levels returned by the levelers [It]\n09:50:50       /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/common/grpclogging/server_test.go:636\n09:50:50 \n09:50:50       Expected\n09:50:50           <[]observer.LoggedEntry | len:0, cap:0>: []\n09:50:50       to have length 1\n09:50:50 \n09:50:50       /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/common/grpclogging/server_test.go:638\n09:50:50 ------------------------------\n09:50:50 •••••••\n09:50:50 \n09:50:50 Summarizing 1 Failure:\n09:50:50 \n09:50:50 [Fail] Server StreamServerInterceptor when options are used [It] uses the levels returned by the levelers \n09:50:50 /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/common/grpclogging/server_test.go:638\n09:50:50 \n09:50:50 Ran 31 of 31 Specs in 11.297 seconds\n09:50:50 FAIL! -- 30 Passed | 1 Failed | 0 Pending | 0 Skipped\n09:50:50 --- FAIL: TestGrpclogging (11.30s)\n09:50:50 FAIL\n09:50:50 coverage: 100.0% of statements\n09:50:50 FAIL\tgithub.com/hyperledger/fabric/common/grpclogging\t11.372s\n```\n","username":"tock","ts":"2019-01-27T08:24:29.266Z"}
{"msg":"any ideas who's in charge of that?","username":"tock","ts":"2019-01-27T08:25:08.781Z"}
{"msg":"https://jira.hyperledger.org/browse/FAB-12777","username":"tock","ts":"2019-01-27T09:48:48.926Z"}
{"msg":"@sykesm ^^^","username":"C0rWin","ts":"2019-01-27T12:38:24.048Z"}
{"msg":"@tock: Search JIRA for all items labeled as `flakes`. This shows https://jira.hyperledger.org/browse/FAB-13867 (which is already assigned to Matt). Can you post a comment there with the link to the CI failure?","username":"kostas","ts":"2019-01-27T21:58:25.503Z"}
{"msg":"UT is passed for https://gerrit.hyperledger.org/r/c/28918/, although green label was not added :thinking: ","username":"guoger","ts":"2019-01-28T01:59:39.934Z"}
{"msg":"@guoer i rebased my change set on top of your chain","username":"yacovm","ts":"2019-01-28T06:42:29.758Z"}
{"msg":"Please pile on top of mine if add more","username":"yacovm","ts":"2019-01-28T06:43:06.917Z"}
{"msg":"Ok? :)","username":"yacovm","ts":"2019-01-28T06:43:31.647Z"}
{"msg":"@yacovm sure :) actually i wanted to ask, should i rebase yours if i make change to the current stack? (and i'm about to, for the conclusion we reached on snapshot pruning)","username":"guoger","ts":"2019-01-28T06:58:01.279Z"}
{"msg":"@guoger  just had a failure in integration:\n```\n08:42:36 Summarizing 2 Failures:\n08:42:36 \n08:42:36 [Fail] EndToEnd Crash Fault Tolerance when orderer stops and restarts [It] keeps network up and running \n08:42:36 /w/workspace/fabric-verify-integration-tests-x86_64/gopath/src/github.com/hyperledger/fabric/integration/e2e/cft_test.go:121\n08:42:36 \n08:42:36 [Fail] EndToEnd Crash Fault Tolerance when an orderer is behind the latest snapshot on leader [It] catches up using the block stored in snapshot \n08:42:36 /w/workspace/fabric-verify-integration-tests-x86_64/gopath/src/github.com/hyperledger/fabric/integration/e2e/cft_test.go:172\n08:42:36 \n08:42:36 Ran 15 of 15 Specs in 623.478 seconds\n08:42:36 FAIL! -- 13 Passed | 2 Failed | 0 Pending | 0 Skipped\n08:42:36 --- FAIL: TestEndToEnd (623.48s)\n```\nhttps://jenkins.hyperledger.org/job/fabric-verify-integration-tests-x86_64/5065/console","username":"tock","ts":"2019-01-28T07:15:51.409Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=4xzqcSXspdF6cb7hg) @tock Not really sure what's going on there (for both of them) ... the problem happens here:\n```\n\t\t\tpeerProc = ifrit.Invoke(peerGroup)\n\t\t\tEventually(peerProc.Ready()).Should(BeClosed())\n```\ntest waits for peer to start. However, I don't see peer logs in console at all... filed https://jira.hyperledger.org/browse/FAB-13914 to track this","username":"guoger","ts":"2019-01-28T08:11:28.335Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=4xzqcSXspdF6cb7hg","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=4xzqcSXspdF6cb7hg","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=4xzqcSXspdF6cb7hg) @tock Not really sure what's going on there (for both of them) ... the problem happens here:\n```\npeerProc = ifrit.Invoke(peerGroup)\nEventually(peerProc.Ready()).Should(BeClosed())\n```\ntest waits for peer to start. However, I don't see peer logs in console at all... filed https://jira.hyperledger.org/browse/FAB-13914 to track this","username":"guoger","ts":"2019-01-28T08:11:28.335Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=4xzqcSXspdF6cb7hg","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=4xzqcSXspdF6cb7hg","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I rerun the test... it overwrites the log :rolling_eyes:","username":"tock","ts":"2019-01-28T08:15:01.597Z"}
{"msg":"it will happen again, I am sure ;-)","username":"tock","ts":"2019-01-28T08:15:31.814Z"}
{"msg":"@guoger  \n>  actually i wanted to ask, should i rebase yours if i make change to the current stack? (and i'm about to, for the conclusion we reached on snapshot pruning) \nare you making changes below my CR or above it? if below then don't bother... I'll just rebase eventually again when I'm done. If above then you can just rebase on top","username":"yacovm","ts":"2019-01-28T08:17:19.250Z"}
{"msg":"gotcha. I meant below","username":"guoger","ts":"2019-01-28T08:17:54.487Z"}
{"msg":"a general question: if i'm filing a JIRA for flaky test found in CI, what `affects version` should i tag it?","username":"guoger","ts":"2019-01-28T09:56:48.752Z"}
{"msg":"2.0","username":"yacovm","ts":"2019-01-28T10:28:56.247Z"}
{"msg":"Has joined the channel.","username":"edisinovcic","ts":"2019-01-28T13:15:53.260Z","type":"uj"}
{"msg":"may one of you @kostas @tock put a summary of the conclusion you reached yesterday to https://jira.hyperledger.org/browse/FAB-13247? thx, i think i didn't fully get your solution...","username":"guoger","ts":"2019-01-29T02:49:08.772Z"}
{"msg":"I'll let @tock chime in on this.","username":"kostas","ts":"2019-01-30T03:15:14.971Z"}
{"msg":"W.r.t https://jira.hyperledger.org/browse/FAB-13247 (recovery from crashes) - I will take a minimalistic approach, but will take care of recovery from a failure (we have to). I think my dilemma was not whether to do it or not, but really what kind of assumptions I could take on the behavior of the user (admin). If the user is rational and not byzantine, i.e. he follows protocol when submitting the sequence of config transactions, then I can design a recovery mechanism that is relatively simple. This will address one main concern - an OSN that crashes before or during migration, and recovers during or after migration. What is not covered is (some) user behavior that is documented to be bad - submitting conflicting  migration commands in quick succession from multiple OSN's, and things like that. The code protects against most of these scenarios, but not against all. \nI documented the protocol for migration here: https://docs.google.com/document/d/1g_M8KO9cdbYMLBsscHd6ffv-X_ZRLeHvDcIEoV7YXUE/edit?usp=sharing\nAnd I will update this document as I make progress, to include the abort path, and a recovery from failures.","username":"tock","ts":"2019-01-30T07:50:08.298Z"}
{"msg":"W.r.t https://jira.hyperledger.org/browse/FAB-13247 (recovery from crashes) - I will take a minimalistic approach, but will take care of recovery from a failure (we have to). I think my dilemma was not whether to do it or not, but really what kind of assumptions I could take on the behavior of the user (admin). If the user is rational and not byzantine, i.e. he follows protocol when submitting the sequence of config transactions, then I can design a recovery mechanism that is relatively simple. This will address one main concern - an OSN that crashes before or during migration, and recovers during or after migration. What is not covered is (some) user behavior that is documented to be bad - submitting conflicting  migration commands in quick succession from multiple OSN's, and things like that. The code protects against most of these scenarios, but not against all. \nI documented the protocol for migration here: https://docs.google.com/document/d/1g_M8KO9cdbYMLBsscHd6ffv-X_ZRLeHvDcIEoV7YXUE/edit?usp=sharing\nAnd I will update this document as I make progress, to include the abort path, and a recovery from failures. There is a link to this document from the main story https://jira.hyperledger.org/browse/FAB-12777 as well.","username":"tock","ts":"2019-01-30T07:50:08.298Z"}
{"msg":">  the behavior of the user (admin)\nMy take is, they are rational, dumb, and trying to play smart. So as long as we can recover to previous state (kafka), i think we are fine.\n> then I can design a recovery mechanism that is relatively simple","username":"guoger","ts":"2019-01-30T09:54:12.507Z"}
{"msg":">  the behavior of the user (admin)\nMy take is, they are rational, dumb, and trying to play smart. So as long as we can recover to previous state (kafka), i think we are fine.\n> then I can design a recovery mechanism that is relatively simple\nIf at some point of time, you can have a small writeup about this mechanism, i'd appreciate it! cc @tock ","username":"guoger","ts":"2019-01-30T09:54:12.507Z"}
{"msg":"I am working on it in the Jira.","username":"tock","ts":"2019-01-30T10:50:37.784Z"}
{"msg":"I am working on it in the Jira (the writeup). I'll let you know when i am done","username":"tock","ts":"2019-01-30T10:50:37.784Z"}
{"msg":"I agree that users sometime make mistakes. we'll have to clearly document what we expect and also probably make a tool (maybe a bunch of scripts) to help them do it right","username":"tock","ts":"2019-01-30T10:52:49.432Z"}
{"msg":"In addition, the START command stops all traffic to the orderers, apart from migration related config updates. Waiting for the start to be committed, an then waiting for the Kafka pipeline to drain,  gives a good backup point.","username":"tock","ts":"2019-01-30T10:58:46.570Z"}
{"msg":"@yacovm i think your comm CR is not part of my stack now (and i don't think it needs to be). But if you ever want/need, just insert it to the bottom/top/middle of my stack as you see fit.","username":"guoger","ts":"2019-01-30T15:40:50.835Z"}
{"msg":"I slightly doubt that follower forwarding tx to leader would become the bottleneck, but that's definitely a great point!","username":"guoger","ts":"2019-01-31T14:17:25.227Z"}
{"msg":"I slightly doubt that follower forwarding tx to leader would become the bottleneck with raft, but that's definitely a great point!","username":"guoger","ts":"2019-01-31T14:17:25.227Z"}
{"msg":"as my current benchmark suggests, disk io seems to be a constraint","username":"guoger","ts":"2019-01-31T14:17:44.976Z"}
{"msg":"(which is kind of expected because raft protocol is io intensive by definition)","username":"guoger","ts":"2019-01-31T14:18:03.939Z"}
{"msg":"We've got 4 CRs with one +2 already that we should try to merge today:\nhttps://gerrit.hyperledger.org/r/c/28850/\nhttps://gerrit.hyperledger.org/r/c/28998/\nhttps://gerrit.hyperledger.org/r/c/29034/\nhttps://gerrit.hyperledger.org/r/c/28892/","username":"kostas","ts":"2019-01-31T14:35:47.907Z"}
{"msg":"to avoid 5-10s leaderless in a newly created channel (due to prolonged tick interval), i suggest that we can have the node with *smallest* raft id to proactively start campaign via raft api, *iff* it's a new cluster (not rejoin, not reboot). If, for some reasons, the node with smallest id is absent, we just regress to normal case, where other nodes wait for election timeout. but i think we should've got most of cases covered this way. Of course, this can be backlogged with lower priority. I'm just trying to see if it's worth a jira in our backlog, and i'm not super comfortable with deterministic 5-10s leaderless when a new channel is created.","username":"guoger","ts":"2019-02-01T04:11:21.490Z"}
{"msg":"to avoid 5-10s leaderless in a newly created channel (due to prolonged tick interval), i suggest that we can have the node with *smallest* raft id to proactively start campaign via raft api, *iff* it's a new cluster (not rejoin, not reboot). If, for some reasons, the node with smallest id is absent, we just regress to normal case, where other nodes wait for election timeout. but i think we should've got most of cases covered this way. Of course, this can be backlogged with lower priority. I'm just trying to see if it's worth a jira in our backlog, and i'm not super comfortable with deterministic 5-10s leaderless when a new channel is created.","username":"guoger","ts":"2019-02-01T04:11:21.490Z"}
{"msg":"wdyt @yacovm @kostas ","username":"guoger","ts":"2019-02-01T04:11:30.936Z"}
{"msg":"@guoger to pitch in here, is it not possible to trigger a leader election artificially in the case that this is a new channel like what you have done in the tests?","username":"adarshsaraf123","ts":"2019-02-01T05:05:23.226Z"}
{"msg":"but who's going to trigger it? and i don't think we should add an api to `Chain`","username":"guoger","ts":"2019-02-01T05:18:20.132Z"}
{"msg":"@guoger sounds fine to me... but can we add a few lines in some integration test to actually see that it works?","username":"yacovm","ts":"2019-02-01T07:44:19.774Z"}
{"msg":"There is a unit test failure on etcdraft: \n12:35:42 FAIL\tgithub.com/hyperledger/fabric/orderer/consensus/etcdraft\t1200.460s\nhttps://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/8591/console","username":"tock","ts":"2019-02-03T10:39:49.348Z"}
{"msg":"@tock: Is there a JIRA for it?","username":"kostas","ts":"2019-02-03T14:19:59.625Z"}
{"msg":"> to avoid 5-10s leaderless in a newly created channel (due to prolonged tick interval), i suggest that we can have the node with *smallest* raft id to proactively start campaign via raft api, *iff* it's a new cluster (not rejoin, not reboot). If, for some reasons, the node with smallest id is absent, we just regress to normal case, where other nodes wait for election timeout. but i think we should've got most of cases covered this way. Of course, this can be backlogged with lower priority. I'm just trying to see if it's worth a jira in our backlog, and i'm not super comfortable with deterministic 5-10s leaderless when a new channel is created.","username":"kostas","ts":"2019-02-03T16:34:15.590Z"}
{"msg":"@guoger: Sorry for missing this earlier. Doesn't this give an advantage to the node with the smallest ID?","username":"kostas","ts":"2019-02-03T16:34:47.121Z"}
{"msg":"*If* it does, I would advise against it. In general we want the spread of leaders to be as diversified as possible. I get that the leader is not static, but I can see how users may not be big fans of this choice.","username":"kostas","ts":"2019-02-03T16:36:09.354Z"}
{"msg":"The creation of a channel is a one-off process; I think a 10-second delay is OK at the end of the day.","username":"kostas","ts":"2019-02-03T16:36:30.148Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=88aae33b-86bb-405d-a0a9-3040055532bc) @kostas no","username":"tock","ts":"2019-02-03T18:22:20.016Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=88aae33b-86bb-405d-a0a9-3040055532bc","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=88aae33b-86bb-405d-a0a9-3040055532bc","remote":true,"fileId":null,"fileName":null}]}
{"msg":"13:29:50 FAIL\tgithub.com/hyperledger/fabric/orderer/consensus/etcdraft\t1200.537s\nhttps://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/8592/console\nOops, it happened again ;-)","username":"tock","ts":"2019-02-03T18:26:10.496Z"}
{"msg":"@tock: Roger, can you please open up a JIRA for it? Add it as a child of this story: https://jira.hyperledger.org/browse/FAB-13371","username":"kostas","ts":"2019-02-03T20:25:00.327Z"}
{"msg":"@tock is it rebased on master?","username":"guoger","ts":"2019-02-04T02:58:55.332Z"}
{"msg":"@guoger @kostas @yacovm An early WIP on the metrics thread without the tests to see if there are any comments:\nhttps://gerrit.hyperledger.org/r/#/c/29153/","username":"adarshsaraf123","ts":"2019-02-06T10:05:20.723Z"}
{"msg":"Would appreciate a quick look at it. ","username":"adarshsaraf123","ts":"2019-02-06T10:05:34.735Z"}
{"msg":"I also need to take care of rebasing it on the right stack. @guoger Can you point me to the right tip for this?","username":"adarshsaraf123","ts":"2019-02-06T10:07:01.971Z"}
{"msg":"I also need to take care of rebasing it on the right stack. @guoger Can you also point me to the right tip for this? Thanks :)","username":"adarshsaraf123","ts":"2019-02-06T10:07:01.971Z"}
{"msg":"@adarshsaraf123 skimmed through your CR and i think i looks ok (I'll review once it's ready). i say you don't worry about rebasing for now. i'll resolve the conflicts once mine is done.","username":"guoger","ts":"2019-02-06T16:37:30.395Z"}
{"msg":"another question, are we going to add metrics for kafka-based chain?","username":"guoger","ts":"2019-02-06T16:37:43.985Z"}
{"msg":"Would someone mind taking a look at this and telling me if it looks like a known flake? https://jenkins.hyperledger.org/job/fabric-verify-integration-tests-x86_64/5419/console","username":"jyellick","ts":"2019-02-06T17:37:37.846Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Qg8veQYNqfT6wEva3) @guoger @jyellick had implemented some metrics for kafka-based chains that mostly wraps metrics implemented by Sarama. Link to the same: https://gerrit.hyperledger.org/r/#/c/27741/","username":"adarshsaraf123","ts":"2019-02-06T17:45:35.002Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Qg8veQYNqfT6wEva3","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Qg8veQYNqfT6wEva3","remote":true,"fileId":null,"fileName":null}]}
{"msg":"lol, all tests but the reconfiguration suite failed ","username":"yacovm","ts":"2019-02-06T17:45:36.883Z"}
{"msg":"no @jyellick I've never seen 6 out of 11 tests fail at the same time","username":"yacovm","ts":"2019-02-06T17:46:05.690Z"}
{"msg":"Okay -- I figured it was something I broke, thanks for confirming","username":"jyellick","ts":"2019-02-06T17:46:43.029Z"}
{"msg":"?","username":"guoger","ts":"2019-02-06T17:47:40.828Z"}
{"msg":"how can you break something? you don't touch Raft @jyellick ","username":"yacovm","ts":"2019-02-06T17:47:57.551Z"}
{"msg":"the error there was that there is no raft leader","username":"yacovm","ts":"2019-02-06T17:48:03.369Z"}
{"msg":"Actually, I've been working on Raft for the past few days, implementing those changes to `configtxgen` :slight_smile:","username":"jyellick","ts":"2019-02-06T17:48:25.158Z"}
{"msg":"@tock could you explain the purpose of having `Context` storing the block number? it's not documented in both design docs. thx in advance!","username":"guoger","ts":"2019-02-07T14:31:53.455Z"}
{"msg":"It is in order to collate a context, commit and an abort to the start that opened the migration. It is also a way to force the user to wait for start to commit in order to submit the context (you have to know the height).","username":"tock","ts":"2019-02-07T14:47:28.859Z"}
{"msg":"It is enforced in the code, so that the context / commit / abort must match the start context. the context can be thought of as a \"transaction id\", for the big nested transaction that is migration.","username":"tock","ts":"2019-02-07T14:48:54.617Z"}
{"msg":"Ah, I remember you mentioning this in the presentation. It has no use as a rollback piece of info, does it?","username":"kostas","ts":"2019-02-07T14:49:47.910Z"}
{"msg":"In the sense that no piece of code is reading it and says: I should roll back to the config, as noted in migration context (block height) X.","username":"kostas","ts":"2019-02-07T14:50:21.380Z"}
{"msg":"When I say Rollback, I mean the procedure that would be taken when you restart into raft and find out to your horror that the cluster does not form, or crash... ","username":"tock","ts":"2019-02-07T14:51:21.409Z"}
{"msg":"This can happen if the user puts the wrong certificates in the raft-metadata, for example, and we don't spot it before commit. At that point, What I am planning on doing, it to instruct the user to manually swap the bootstrap files - put the original kafka genesis block back in place, and restart. I add a small piece of code that will detect this kind of restart (easy - last config block has type=raft, whereas bootstrap has type=kafka), and enter into a \"special\" state that would allow the user to do an abort sequence.","username":"tock","ts":"2019-02-07T14:55:54.597Z"}
{"msg":"This can happen if the user puts the wrong certificates in the raft-metadata, for example, and we don't spot it before commit. At that point, What I am planning on doing, it to instruct the user to manually swap the bootstrap files - put the original kafka genesis block back in place, and restart. I will add a small piece of code that will detect this kind of restart (easy - last config block has type=raft, whereas bootstrap has type=kafka), and enter into a \"special\" state that would allow the user to do an abort sequence.","username":"tock","ts":"2019-02-07T14:55:54.597Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=HgcvTh9dbQqmSBjmJ) @tock ahh, got it. I was struggling to understand the txid vs context during the presentation...","username":"guoger","ts":"2019-02-07T15:12:41.016Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=HgcvTh9dbQqmSBjmJ","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=HgcvTh9dbQqmSBjmJ","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=EHh77jTdp7n9tv7et) @tock i know this case is very unlikely, but when you say \"collate\", does it mean that we are prepared for the cases where `context` number among them _don't check_?","username":"guoger","ts":"2019-02-07T15:13:29.958Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=EHh77jTdp7n9tv7et","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=EHh77jTdp7n9tv7et","remote":true,"fileId":null,"fileName":null}]}
{"msg":"A very preliminary benchmark:\n```\nType: kafka Nodes: 3 Broadcast Clients: 15 Total Tx:  3000 Elapsed Time: 10.66s Write tps: 281.3 tx/s\nType: etcdraft Nodes: 3 Broadcast Clients: 15 Total Tx:  3000 Elapsed Time: 4.95s Write tps: 605.9 tx/s\n```","username":"guoger","ts":"2019-02-08T16:02:41.331Z"}
{"msg":"A very preliminary benchmark (batchsize == 1):\n```\nType: kafka Nodes: 3 Broadcast Clients: 15 Total Tx:  3000 Elapsed Time: 10.66s Write tps: 281.3 tx/s\nType: etcdraft Nodes: 3 Broadcast Clients: 15 Total Tx:  3000 Elapsed Time: 4.95s Write tps: 605.9 tx/s\n```","username":"guoger","ts":"2019-02-08T16:02:41.331Z"}
{"msg":"(all running locally on my OSX)","username":"guoger","ts":"2019-02-08T16:03:10.567Z"}
{"msg":"(all running locally on my OSX, where wal sync is super slow)","username":"guoger","ts":"2019-02-08T16:03:10.567Z"}
{"msg":"Suspiciously good?","username":"kostas","ts":"2019-02-08T16:39:51.767Z"}
{"msg":"@guoger: Numbers looking suspiciously good? :grin:","username":"kostas","ts":"2019-02-08T16:39:51.767Z"}
{"msg":"Two CRs that I _think_ look good for merging:","username":"kostas","ts":"2019-02-08T16:44:28.525Z"}
{"msg":"https://gerrit.hyperledger.org/r/c/29180/","username":"kostas","ts":"2019-02-08T16:44:30.831Z"}
{"msg":"https://gerrit.hyperledger.org/r/c/29152/","username":"kostas","ts":"2019-02-08T16:44:34.834Z"}
{"msg":"That’s why I say _very preliminary_ ;-)","username":"guoger","ts":"2019-02-08T16:54:21.643Z"}
{"msg":"I’ll take a closer look later","username":"guoger","ts":"2019-02-08T16:54:54.271Z"}
{"msg":"I say that @guoger is a bit biased","username":"yacovm","ts":"2019-02-08T17:19:58.489Z"}
{"msg":"he must've faked the results ;) ","username":"yacovm","ts":"2019-02-08T17:20:08.270Z"}
{"msg":"(just kidding)","username":"yacovm","ts":"2019-02-08T17:20:19.920Z"}
{"msg":"@guoger what is the setup of the benchmark?","username":"yacovm","ts":"2019-02-08T17:21:36.687Z"}
{"msg":"@yacovm here: https://gerrit.hyperledger.org/r/c/27846/9","username":"guoger","ts":"2019-02-08T23:13:51.118Z"}
{"msg":"and maybe that could help with debugging memory leak...","username":"guoger","ts":"2019-02-08T23:49:59.800Z"}
{"msg":"a test that runs several seconds?","username":"yacovm","ts":"2019-02-09T00:03:40.978Z"}
{"msg":"and i think 10 is probably too harsh for default `SendBufferSize`","username":"guoger","ts":"2019-02-09T00:03:54.093Z"}
{"msg":"do you see dropped messages?","username":"yacovm","ts":"2019-02-09T00:04:10.424Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bjEWhqRCB73xYac9E) @yacovm you can modify parameters to have it run for minutes/hours","username":"guoger","ts":"2019-02-09T00:04:15.410Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bjEWhqRCB73xYac9E","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=bjEWhqRCB73xYac9E","remote":true,"fileId":null,"fileName":null}]}
{"msg":"but you put in the CR - no compaction","username":"yacovm","ts":"2019-02-09T00:04:29.969Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=vzubZjvEvf9shrkkG) @yacovm a lot...","username":"guoger","ts":"2019-02-09T00:04:30.469Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=vzubZjvEvf9shrkkG","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=vzubZjvEvf9shrkkG","remote":true,"fileId":null,"fileName":null}]}
{"msg":"the memory will explode","username":"yacovm","ts":"2019-02-09T00:04:37.889Z"}
{"msg":"you can change that too","username":"guoger","ts":"2019-02-09T00:04:49.391Z"}
{"msg":"yep","username":"yacovm","ts":"2019-02-09T00:04:52.985Z"}
{"msg":"> a lot... \nthis is interesting. how many blocks are created?","username":"yacovm","ts":"2019-02-09T00:05:24.836Z"}
{"msg":"thousands","username":"guoger","ts":"2019-02-09T00:05:57.719Z"}
{"msg":"so we have 3,000 transactions","username":"yacovm","ts":"2019-02-09T00:06:48.216Z"}
{"msg":"and thousands of blocks are created?","username":"yacovm","ts":"2019-02-09T00:06:54.399Z"}
{"msg":"doesn't make sense","username":"yacovm","ts":"2019-02-09T00:06:58.179Z"}
{"msg":"```\n\t\t\tfor _, p := range cfg.Profiles {\n\t\t\t\tp.BatchSize.MaxMessageCount = MaxMessageCount\n\t\t\t\tp.SnapshotInterval = SnapshotInterval\n```","username":"yacovm","ts":"2019-02-09T00:09:03.010Z"}
{"msg":"why are we putting 1 message in a batch?","username":"yacovm","ts":"2019-02-09T00:09:10.179Z"}
{"msg":"why are we putting 1 message in a batch? `MaxMessageCount  = 1   // MaxMessageCount in BatchSize`","username":"yacovm","ts":"2019-02-09T00:09:10.179Z"}
{"msg":"this isn't a realistic scenario....","username":"yacovm","ts":"2019-02-09T00:09:18.042Z"}
{"msg":"Raft needs big blocks, not blocks with a single envelope.","username":"yacovm","ts":"2019-02-09T00:09:38.978Z"}
{"msg":"@guoger ","username":"yacovm","ts":"2019-02-09T00:10:22.746Z"}
{"msg":"- those params are put there to be changed (to mimic realistic scenario or whatever we want to test)\n- i'm mostly interested in blocks per second w/p batching","username":"guoger","ts":"2019-02-09T00:11:44.230Z"}
{"msg":"I don't think that blocks *number* per second is a metric we need to increase.... we need to increase the block *size* per second","username":"yacovm","ts":"2019-02-09T00:13:56.689Z"}
{"msg":"yeah... ultimately bits per second :)","username":"guoger","ts":"2019-02-09T00:16:35.822Z"}
{"msg":"and of course the benchmark params and measurements are malleable. i think it's another way to aid memory leak debug. (did a rudimentary experiment by putting periodic `runtime.ReadMemStats` to a background goroutine in orderer, and i don't see an obvious memory leak...)","username":"guoger","ts":"2019-02-09T00:21:00.003Z"}
{"msg":"will continue later today","username":"guoger","ts":"2019-02-09T00:21:06.023Z"}
{"msg":"","username":"guoger","ts":"2019-02-09T15:45:15.695Z","attachments":[{"type":"file","title":"Screen Shot 2019-02-09 at 23.42.13.png","title_link":"/file-upload/Q5f6YsTp6emgphHRr/Screen%20Shot%202019-02-09%20at%2023.42.13.png","image_url":"/file-upload/Q5f6YsTp6emgphHRr/Screen%20Shot%202019-02-09%20at%2023.42.13.png","image_type":"image/png","image_size":1595417,"url":"/file-upload/Q5f6YsTp6emgphHRr/Screen%20Shot%202019-02-09%20at%2023.42.13.png","remote":false,"fileId":"Q5f6YsTp6emgphHRr","fileName":"Screen Shot 2019-02-09 at 23.42.13.png"}]}
{"msg":"```\nconst (\n\tEnvSize          = 2000    // size of envelope payload in bytes\n\tClientPerNode    = 5       // number of clients connecting to each orderer\n\tTxPerClient      = 20000   // number of tx sent by each client\n\tClusterSize      = 3       // number of orderers in cluster\n\tSnapshotInterval = \"10 MB\" // take snapshto if cumulative data exceeds limit\n\tMaxMessageCount  = 50      // MaxMessageCount in BatchSize\n)\n```\n```\nType: etcdraft Nodes: 3 Broadcast Clients: 15 Total Tx: 300000 Elapsed Time: 87.53s Write tps: 3427.4 tx/s\n```","username":"guoger","ts":"2019-02-09T15:45:21.197Z"}
{"msg":"uploaded a plot of memory footprint","username":"guoger","ts":"2019-02-09T15:45:45.404Z"}
{"msg":"uploaded a plot of memory footprint (memory sample rate: 100ms)","username":"guoger","ts":"2019-02-09T15:45:45.404Z"}
{"msg":"uploaded a plot of memory footprint (memory sample rate: 100ms, gathered using in-proc `runtime.ReadMemStats`)","username":"guoger","ts":"2019-02-09T15:45:45.404Z"}
{"msg":"uploaded a plot of memory footprint (memory sample rate: 100ms, gathered using in-proc `runtime.ReadMemStats`) Avg mem usage: ~30MB","username":"guoger","ts":"2019-02-09T15:45:45.404Z"}
{"msg":"It'll be interesting to find the maximum point of the throughput, as a function of the max message count, where the other variables are fixed @guoger ","username":"yacovm","ts":"2019-02-09T16:40:11.571Z"}
{"msg":"It'll be interesting to find the absolute maximum of the throughput, as a function of the max message count, where the other variables are fixed @guoger ","username":"yacovm","ts":"2019-02-09T16:41:50.152Z"}
{"msg":"However, we must not forget that this is within the same machine.","username":"yacovm","ts":"2019-02-09T16:42:43.832Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Zsyhegx5ZLah4BFCG) @guoger when they do not check, we generally drop the offending transaction, certainly in the broadcast phase (before Kafka ordering).","username":"tock","ts":"2019-02-10T11:09:35.321Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Zsyhegx5ZLah4BFCG","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Zsyhegx5ZLah4BFCG","remote":true,"fileId":null,"fileName":null}]}
{"msg":"a second thought - doesn't `consensus_etcdraft_committed_block_number ` overlap with `ledger.block_processing_time.%{channel} `?","username":"guoger","ts":"2019-02-10T15:01:00.048Z"}
{"msg":"a second thought - doesn't `consensus_etcdraft_committed_block_number ` overlap with `ledger.block_processing_time.%{channel} `? cc @adarshsaraf123 ","username":"guoger","ts":"2019-02-10T15:01:00.048Z"}
{"msg":"@guoger actually `ledger_blockchain_height` is closer. However, I am not sure if we end up exposing that metric too for raft nodes through ledger. I am trying to verify the same. ","username":"adarshsaraf123","ts":"2019-02-11T09:04:33.199Z"}
{"msg":"From what I could make out, and I might be wrong, we do not expose the `ledger_blockchain_height` metric for orderer nodes and therefore retaining `consensus_etcdraft_committed_block_number` should be good. ","username":"adarshsaraf123","ts":"2019-02-11T09:18:08.261Z"}
{"msg":"looking into FAB-14129","username":"guoger","ts":"2019-02-11T13:39:25.896Z"}
{"msg":"@yacovm to continue the conversation during scrum. _In concept_ (regardless of how implementation looks right now), if a admin supplies a _trusted_ config block to start a channel, this channel should be able to start performing consensus based on that config block (verify hash links), while pulling blocks prior to that config block in background. Is this correct? (of course, ledger impl needs to be changed to allow committing a future block with gaps, assuming that block is trusted)","username":"guoger","ts":"2019-02-11T15:09:02.164Z"}
{"msg":"but the admin only uses the last config block from the system channel","username":"yacovm","ts":"2019-02-11T15:15:24.760Z"}
{"msg":"not for all channels","username":"yacovm","ts":"2019-02-11T15:15:28.105Z"}
{"msg":"you don't want to get 100 blocks if you have 100 channels","username":"yacovm","ts":"2019-02-11T15:15:36.367Z"}
{"msg":"you want the OSN to do its own thing autonomously ","username":"yacovm","ts":"2019-02-11T15:15:43.681Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=xWWt5464hNsqn86Nb) @yacovm and how does this prevent us from doing what was described?","username":"guoger","ts":"2019-02-11T15:21:20.512Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=xWWt5464hNsqn86Nb","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=xWWt5464hNsqn86Nb","remote":true,"fileId":null,"fileName":null}]}
{"msg":"i still don't understand what you're proposing ","username":"yacovm","ts":"2019-02-11T15:27:40.566Z"}
{"msg":"are you proposing to supply last config blocks for all channels?","username":"yacovm","ts":"2019-02-11T15:27:49.848Z"}
{"msg":"no.. not really proposing anything :), just asking a question. I'm trying to understand the fundamental reason of why starting chain has to be dependent on pulling all missing blocks prior to supplied config block.","username":"guoger","ts":"2019-02-11T15:31:10.165Z"}
{"msg":"there are several reasons","username":"yacovm","ts":"2019-02-11T15:34:28.181Z"}
{"msg":"1) because if you start the chain you need to commit the new blocks, but you can't because the ledger is in-order append","username":"yacovm","ts":"2019-02-11T15:34:37.240Z"}
{"msg":"2) because if you start the chain, you can't validate the last config block of that chain before pulling the blocks before that","username":"yacovm","ts":"2019-02-11T15:35:23.645Z"}
{"msg":"3) because if you start the chain and a peer/client asks from you a block you don't have - you can't service the request, and that's sort of a diversion from the existing error handling model","username":"yacovm","ts":"2019-02-11T15:36:46.788Z"}
{"msg":"1) yes of course, unless our ledger implementation allows committing of future blocks, assuming they are supplied by admin of _this_ orderer\n2) what if that config block is given in the same way as genesis block, so it should be trusted?\n3) that's true, although we could still have this orderer service the channel after all missing blocks are pulled, even though it participates in rafting already (just not seen from peer/client)\n\nIf i have a chance to rephrase my question, i could've said: is there any security concern or impossibility in theory, that prevents us from doing XYZ?","username":"guoger","ts":"2019-02-11T15:45:20.092Z"}
{"msg":"1) yes of course, unless our ledger implementation allows committing of future blocks, assuming they are supplied by admin of _this_ orderer\n2) what if that config block is given in the same way as genesis block, so it should be trusted?\n3) that's true, although we could still have this orderer service the channel after all missing blocks are pulled, even though it participates in rafting already (just not seen from peer/client)\n\nIf i have a chance to rephrase my question, i could've said: is there any security concern or impossibility in theory, that prevents us from doing XYZ? @yacovm ","username":"guoger","ts":"2019-02-11T15:45:20.092Z"}
{"msg":"if you have a cluster of 3 nodes and you slowly replace all nodes completely","username":"yacovm","ts":"2019-02-11T15:49:11.406Z"}
{"msg":"you then need to ensure they replicated the blocks in all channels","username":"yacovm","ts":"2019-02-11T15:49:26.769Z"}
{"msg":"otherwise - you have no data loss","username":"yacovm","ts":"2019-02-11T15:49:31.802Z"}
{"msg":"with the current onboarding protocol - there is no way of making the user do that, i.e - you can never replace them all because they need to pull the blocks beforehand.","username":"yacovm","ts":"2019-02-11T15:50:04.802Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=ie5vbFsRgfhbZzmeZ) @yacovm I guess you meant data loss?","username":"guoger","ts":"2019-02-11T15:57:24.689Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=ie5vbFsRgfhbZzmeZ","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=ie5vbFsRgfhbZzmeZ","remote":true,"fileId":null,"fileName":null}]}
{"msg":"that's what i said no?","username":"yacovm","ts":"2019-02-11T15:58:46.100Z"}
{"msg":"data loss","username":"yacovm","ts":"2019-02-11T15:58:47.370Z"}
{"msg":"no data loss == data _not_ lost?","username":"guoger","ts":"2019-02-11T16:00:44.980Z"}
{"msg":"shouldn't it be\n> otherwise - you have data loss\n?","username":"guoger","ts":"2019-02-11T16:00:45.041Z"}
{"msg":"yeah","username":"yacovm","ts":"2019-02-11T16:02:28.148Z"}
{"msg":"just to make i get to this correct, you need to make sure there are at least 1 node in system channel that has full data to prevent data loss. Although pulling blocks in parallel with starting the chain _violates_ this, for the reason you described","username":"guoger","ts":"2019-02-11T16:03:10.823Z"}
{"msg":"@yacovm  just to make i get to this correct, you need to make sure there are at least 1 node in system channel that has full data to prevent data loss. Although pulling blocks in parallel with starting the chain _violates_ this, for the reason you described","username":"guoger","ts":"2019-02-11T16:03:10.823Z"}
{"msg":"@yacovm  just to make i get to this correct, you need to make sure there are at least 1 node in system channel that has full data at any given point of time, to prevent data loss. Although pulling blocks in parallel with starting the chain _violates_ this, for the reason you described","username":"guoger","ts":"2019-02-11T16:03:10.823Z"}
{"msg":"@yacovm  just to make i get to this correct, you need to make sure there are at least 1 node in system channel that has full data _at any given point of time_, to prevent data loss. Although pulling blocks in parallel with starting the chain _violates_ this, for the reason you described","username":"guoger","ts":"2019-02-11T16:03:10.823Z"}
{"msg":"not only 1 node","username":"yacovm","ts":"2019-02-11T16:15:02.916Z"}
{"msg":"the number of nodes that you want to guard against data loss","username":"yacovm","ts":"2019-02-11T16:15:16.342Z"}
{"msg":"for example if you have 3 nodes then you need at least 2 nodes, right?","username":"yacovm","ts":"2019-02-11T16:15:24.896Z"}
{"msg":"because if only 1 node has the ledger, and that node is forever gone - you've lost the state","username":"yacovm","ts":"2019-02-11T16:15:40.338Z"}
{"msg":"well, the ledger","username":"yacovm","ts":"2019-02-11T16:15:43.851Z"}
{"msg":"that's why I am advocating against starting chains prematurely. ","username":"yacovm","ts":"2019-02-11T16:15:59.863Z"}
{"msg":"gotcha, thanks for explaining this :)","username":"guoger","ts":"2019-02-11T17:09:25.303Z"}
{"msg":"@yacovm what is your suspect in memory leak?","username":"guoger","ts":"2019-02-11T23:37:06.641Z"}
{"msg":"I suspect protobuf and gRPC","username":"yacovm","ts":"2019-02-11T23:39:06.096Z"}
{"msg":"I uploaded a docker image to dockerhub (my private repo) that does 2 things:\n1) in the step method - it makes [this](https://github.com/hyperledger/fabric/blob/release-1.4/orderer/consensus/etcdraft/chain.go#L363) a concrete type and not a pointer","username":"yacovm","ts":"2019-02-11T23:41:27.860Z"}
{"msg":"2) In the cluster method - it nils out the payload after the dispatching is done","username":"yacovm","ts":"2019-02-11T23:41:44.247Z"}
{"msg":"2) In the [Consensus](https://github.com/hyperledger/fabric/blob/master/orderer/common/cluster/comm.go#L115-L120) method - it nils out the payload after the dispatching is done","username":"yacovm","ts":"2019-02-11T23:41:44.247Z"}
{"msg":"my wild shot in the dark guess is - that maybe gRPC somehow caches message objects, and the memory is still pointing to these buffer slices. ","username":"yacovm","ts":"2019-02-11T23:44:26.855Z"}
{"msg":"but the memory graphs [only reach](https://jira.hyperledger.org/secure/attachment/16793/02112019-top-command-output-on-orderers.txt) 500MB, i'd wish they reach 1GB or so. ","username":"yacovm","ts":"2019-02-11T23:53:51.262Z"}
{"msg":"hmmm... but how come it's not observed in benchmark test...","username":"guoger","ts":"2019-02-12T02:06:17.891Z"}
{"msg":"does QA able to reproduce memory leak running Raft OSNs? @yacovm @guoger @scottz ","username":"C0rWin","ts":"2019-02-12T08:19:07.078Z"}
{"msg":"does SVT able to reproduce memory leak running Raft OSNs? @yacovm @guoger @scottz ","username":"C0rWin","ts":"2019-02-12T08:19:07.078Z"}
{"msg":"Has joined the channel.","username":"scottz","ts":"2019-02-12T08:19:07.384Z","type":"uj"}
{"msg":"I think they do?","username":"guoger","ts":"2019-02-12T10:04:35.782Z"}
{"msg":"@C0rWin  yes. We attached a new set of files yesterday to FAB-14054","username":"scottz","ts":"2019-02-12T13:24:25.617Z"}
{"msg":"something i realized today (it's new to me, pls ignore if you already knew) - this does not properly recover panic:\n```\nfunc catch() {\n\tif e := recover(); e != nil {\n\t\tfmt.Printf(\"Panicking: %s\\n\", e)\n\t}\n}\n\nfunc main() {\n\tdefer func() {\n\t\tcatch()\n\t}()\n\n\tpanic(\"Blah\")\n}\n```\nbecause `recover` has to be called *directly* by a deferred func. This leads to [this snippet of code](https://github.com/hyperledger/fabric/blob/a7dddec829743edcf05c8b7f316859395e1cde40/integration/e2e/etcdraft_reconfig_test.go#L543-L546) not to take effect.","username":"guoger","ts":"2019-02-13T10:05:13.354Z"}
{"msg":"I actually did not know that.","username":"kostas","ts":"2019-02-13T12:32:13.469Z"}
{"msg":"That's good to know.","username":"kostas","ts":"2019-02-13T12:32:32.009Z"}
{"msg":"Here is a UT failure I haven't seen before: https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/8887/console\n`15:12:07 FAIL\tgithub.com/hyperledger/fabric/orderer/common/cluster\t24.053s`\n@yacovm  any ideas?","username":"tock","ts":"2019-02-13T20:50:32.880Z"}
{"msg":"Here is a UT failure I haven't seen before: https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/8887/console\n`15:12:07 FAIL\tgithub.com/hyperledger/fabric/orderer/common/cluster\t24.053s`\n@yacovm   any ideas?","username":"tock","ts":"2019-02-13T20:50:32.880Z"}
{"msg":"Here is a UT failure I haven't seen before: https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/8887/console\n`15:12:07 FAIL\tgithub.com/hyperledger/fabric/orderer/common/cluster\t24.053s`\n\n@yacovm ","username":"tock","ts":"2019-02-13T20:50:32.880Z"}
{"msg":"Here is a UT failure I haven't seen before: https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/8887/console\n`15:12:07 FAIL\tgithub.com/hyperledger/fabric/orderer/common/cluster\t24.053s`","username":"tock","ts":"2019-02-13T20:50:32.880Z"}
{"msg":"@yacovm any ideas?","username":"tock","ts":"2019-02-13T20:51:44.863Z"}
{"msg":"there is a JIRA for that","username":"yacovm","ts":"2019-02-13T21:05:32.628Z"}
{"msg":"I am aware...","username":"yacovm","ts":"2019-02-13T21:05:40.019Z"}
{"msg":"sleepless in Haifa","username":"tock","ts":"2019-02-13T21:25:17.481Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=hEPjLw2Bah4kqziQp) @guoger that's interesting! thanks :)","username":"adarshsaraf123","ts":"2019-02-14T06:34:16.923Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=hEPjLw2Bah4kqziQp","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=hEPjLw2Bah4kqziQp","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Has joined the channel.","username":"dexhunter","ts":"2019-02-14T07:57:32.762Z","type":"uj"}
{"msg":"@yacovm did you say that there's chance of OS thread leak? but doesn't `GOMAXPROCS` guards against it?","username":"guoger","ts":"2019-02-14T13:35:16.538Z"}
{"msg":"I think it's `-1` by default","username":"yacovm","ts":"2019-02-14T13:35:41.013Z"}
{"msg":"then it's the number of processors","username":"guoger","ts":"2019-02-14T13:36:07.257Z"}
{"msg":"~then it's the number of processors~","username":"guoger","ts":"2019-02-14T13:36:07.257Z"}
{"msg":"wait. it's number of processors be default. i don't know if it's possible to set it to -1...","username":"guoger","ts":"2019-02-14T13:37:29.947Z"}
{"msg":"@yacovm @C0rWin @kostas when you guys have some cycles, pls take a look at https://gerrit.hyperledger.org/r/c/29236/3. We need to get it merged so that svt team can run all other tests with this change. If FAB-14129 happens again, we'll have more info. thx","username":"guoger","ts":"2019-02-14T14:02:04.664Z"}
{"msg":"@yacovm @C0rWin @kostas when you guys have some cycles, pls take a look at https://gerrit.hyperledger.org/r/c/29236/3. We need to get it merged so that svt team can run all other tests with this change. then If FAB-14129 happens again, we'll have more info. thx","username":"guoger","ts":"2019-02-14T14:02:04.664Z"}
{"msg":"it's a small CR that adds some more debug logs","username":"guoger","ts":"2019-02-14T14:02:47.627Z"}
{"msg":"why can't you just do `block.Header.Number` instead?","username":"yacovm","ts":"2019-02-14T14:02:52.645Z"}
{"msg":"when you print `bc.logger.Debugf(\"Created block %d\", bc.number)`","username":"yacovm","ts":"2019-02-14T14:03:09.115Z"}
{"msg":"aren't they the same?","username":"guoger","ts":"2019-02-14T14:04:07.090Z"}
{"msg":"i guess ","username":"yacovm","ts":"2019-02-14T14:04:36.191Z"}
{"msg":"ok +2ed ","username":"yacovm","ts":"2019-02-14T14:05:03.231Z"}
{"msg":"any breaking news from Matt w.r.t. mem leak? :P","username":"guoger","ts":"2019-02-14T14:08:04.167Z"}
{"msg":"@yacovm @kostas  is it ok to leave debug turned on in etcdraf UT? so that if CI captures a flaky test, we can have more info, instead of trying to reproduce it locally with debug on? (i don't think this will pollute CI logs if test doesn't fail)","username":"guoger","ts":"2019-02-15T05:58:23.976Z"}
{"msg":"dont see why not","username":"yacovm","ts":"2019-02-15T07:51:56.428Z"}
{"msg":"Same. I think that's fine.","username":"kostas","ts":"2019-02-15T13:21:37.685Z"}
{"msg":"@C0rWin @guoger @kostas @yacovm Have pushed an update on the metrics CR: https://gerrit.hyperledger.org/r/#/c/29153/","username":"adarshsaraf123","ts":"2019-02-16T04:44:16.303Z"}
{"msg":"It will be good to have it merged before the month long tests for raft-svt begins. ","username":"adarshsaraf123","ts":"2019-02-16T04:44:47.024Z"}
{"msg":"+1'ed","username":"guoger","ts":"2019-02-16T09:23:33.978Z"}
{"msg":"Thanks for the review!","username":"adarshsaraf123","ts":"2019-02-16T09:37:17.282Z"}
{"msg":"Looks great, I just reviewed it as well.","username":"kostas","ts":"2019-02-16T16:24:53.817Z"}
{"msg":"CI is killing us though.","username":"kostas","ts":"2019-02-16T16:24:59.704Z"}
{"msg":"CI and our tests are a bad combo though.","username":"kostas","ts":"2019-02-16T16:24:59.704Z"}
{"msg":"Test failures in CI are killing us though.","username":"kostas","ts":"2019-02-16T16:24:59.704Z"}
{"msg":"> EndToEnd reconfiguration and onboarding when the orderer certificates are all rotated [It] is still possible to onboard new orderers","username":"kostas","ts":"2019-02-16T16:25:20.872Z"}
{"msg":"In Adarsh's CR https://gerrit.hyperledger.org/r/#/c/29153/\n> EndToEnd reconfiguration and onboarding when the orderer certificates are all rotated [It] is still possible to onboard new orderers","username":"kostas","ts":"2019-02-16T16:25:20.872Z"}
{"msg":"In Matt's CR, 3 consecutive failures https://gerrit.hyperledger.org/r/c/29054/#message-67296a40_0a896dac","username":"kostas","ts":"2019-02-16T16:26:36.520Z"}
{"msg":"In Matt's CR, 3 consecutive failures: https://gerrit.hyperledger.org/r/c/29054/#message-67296a40_0a896dac","username":"kostas","ts":"2019-02-16T16:26:36.520Z"}
{"msg":"Thanks for the reviews @kostas and @yacovm !","username":"adarshsaraf123","ts":"2019-02-16T16:36:23.054Z"}
{"msg":" [Fail] Chain Multiple Raft nodes when 3/3 nodes are running when Snapshotting is enabled [It] lagged node can catch up using snapshot \nhttps://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/9039/console\nFYI @guoger @yacovm ","username":"tock","ts":"2019-02-17T13:52:09.277Z"}
{"msg":" [Fail] Chain Multiple Raft nodes when 3/3 nodes are running when Snapshotting is enabled [It] lagged node can catch up using snapshot \nhttps://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/9039/console\nUnitTest failure in CI, FYI @guoger @yacovm ","username":"tock","ts":"2019-02-17T13:52:09.277Z"}
{"msg":"as I mentioned during scrum, we cannot rely on `support.Height()` to get the last block number while chain is running, because commit of block is done [async](https://github.com/hyperledger/fabric/blob/d3318c21dbaaa086c9836b331f6101a0ea2228ce/orderer/common/multichannel/blockwriter.go#L152-L155). More specifically, if we make a decision based on `support.Height()`, i.e. check if last block is config block, we may be actually checking the second last block. Instead, we should initialize a var `nextBlock` with `support.Height` (or something equivalent) when chain is started, and keep track of block height independently onwards. (this is what https://gerrit.hyperledger.org/r/c/29363/ does).\nHowever, we are exposed to another risk, where `support.Block(nextBlock-1)` may return nil because that block is still being committed...\n\nUltimately it would be nice to solve this internally within `support`, i.e. guarantee that *if* `Height()` and `WriteBlock` are called from same go routine, `Height` reliably returns correct last block number. Although i think it requires significant rework of implementation of ledger reader/writer.\n\nWhat we need to solve now, is how to handle `nil` returned by `support.Block(nextBlock-1)`. (retry? wait?) ideas? cc @yacovm @kostas @jyellick ","username":"guoger","ts":"2019-02-18T15:15:38.170Z"}
{"msg":"as I mentioned during scrum, we cannot rely on `support.Height()` to get the last block number while chain is running, because commit of block is done [async](https://github.com/hyperledger/fabric/blob/d3318c21dbaaa086c9836b331f6101a0ea2228ce/orderer/common/multichannel/blockwriter.go#L152-L155). More specifically, if we make a decision based on `support.Height()`, i.e. check if last block is config block, we may be actually checking the second last block. Instead, we should initialize a var `nextBlock` with `support.Height()` (or something equivalent) when chain is started, and keep track of block height independently onwards. (this is what https://gerrit.hyperledger.org/r/c/29363/ does).\nHowever, we are exposed to another risk, where `support.Block(nextBlock-1)` may return nil because that block is still being committed...\n\nUltimately it would be nice to solve this internally within `support`, i.e. guarantee that *if* `Height()` and `WriteBlock` are called from same go routine, `Height` reliably returns correct last block number. Although i think it requires significant rework of implementation of ledger reader/writer.\n\nWhat we need to solve now, is how to handle `nil` returned by `support.Block(nextBlock-1)`. (retry? wait?) ideas? cc @yacovm @kostas @jyellick ","username":"guoger","ts":"2019-02-18T15:15:38.170Z"}
{"msg":"as I mentioned during scrum, we cannot rely on `support.Height()` to get the last block number while chain is running, because commit of block is done [async](https://github.com/hyperledger/fabric/blob/d3318c21dbaaa086c9836b331f6101a0ea2228ce/orderer/common/multichannel/blockwriter.go#L152-L155). More specifically, if we make a decision based on `support.Height()`, i.e. check if last block is config block, we may be actually checking the second last block. Instead, we should initialize a var `nextBlock` with `support.Height()` (or something equivalent) when chain is started, and keep track of block height independently onwards. (this is what https://gerrit.hyperledger.org/r/c/29363/ does).\n\nHowever, we are exposed to another risk, where `support.Block(nextBlock-1)` may return nil because that block is still being committed...\n\nUltimately it would be nice to solve this internally within `support`, i.e. guarantee that *if* `Height()` and `WriteBlock` are called from same go routine, `Height` reliably returns correct last block number. Although i think it requires significant rework of implementation of ledger reader/writer.\n\nWhat we need to solve now, is how to handle `nil` returned by `support.Block(nextBlock-1)`. (retry? wait?) ideas? cc @yacovm @kostas @jyellick ","username":"guoger","ts":"2019-02-18T15:15:38.170Z"}
{"msg":"I dont understand what exactly is the risk with the nextblock-1?","username":"yacovm","ts":"2019-02-18T16:24:19.243Z"}
{"msg":"basically you are writing block i while reading it, which is racy @yacovm [ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=260b8e65-ea7c-47f9-950a-8930467ebade)","username":"guoger","ts":"2019-02-18T23:20:03.480Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=260b8e65-ea7c-47f9-950a-8930467ebade","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=260b8e65-ea7c-47f9-950a-8930467ebade","remote":true,"fileId":null,"fileName":null}]}
{"msg":"so just poll until it's not nil","username":"yacovm","ts":"2019-02-18T23:36:27.817Z"}
{"msg":"Yeah, not the prettiest solution but it'll do the trick.","username":"kostas","ts":"2019-02-19T01:10:29.783Z"}
{"msg":"thinking a bit more, and i'd propose to keep a reference to `lastBlock` in chain, and use that whenever we do `support.Block(support.Height()-1)`, (except for chain.Start, where we still need to initialize `lastBlock` from support).\n\nbtw, I think FAB-14129 *is* also caused by this - after leader failover, new leader initializes a new `BlockCreator` with `support.Height()`, *which is 1 block behind*. Therefore, this new leader would end up proposing a block with the same number again.","username":"guoger","ts":"2019-02-19T07:40:04.660Z"}
{"msg":"thinking a bit more, and i'd propose to keep a reference to `lastBlock` in chain, and use that whenever we do `support.Block(support.Height()-1)`, (except for chain.Start, where we still need to initialize `lastBlock` from support).\n\nBut for the time being, we can simply add retry, which is not pretty but simple enough\n\nbtw, I think FAB-14129 *is* also caused by this - after leader failover, new leader initializes a new `BlockCreator` with `support.Height()`, *which is 1 block behind*. Therefore, this new leader would end up proposing a block with the same number again.","username":"guoger","ts":"2019-02-19T07:40:04.660Z"}
{"msg":"unfortunately we don't know this for sure because log was not full, and we don't if there was actually a leader failover before panic","username":"guoger","ts":"2019-02-19T07:40:34.856Z"}
{"msg":"but this seems to be the most reasonable explanation to me","username":"guoger","ts":"2019-02-19T07:40:53.698Z"}
{"msg":"as stated by svt team:\n> The original problem was twice seen in a lab with slower disk read/writes (2 IOPS per GB),\nso block commit was actually slow, and the chance of this is higher","username":"guoger","ts":"2019-02-19T07:43:55.172Z"}
{"msg":"I see","username":"yacovm","ts":"2019-02-19T08:26:11.192Z"}
{"msg":"so the leader, gets two blocks from the Ready()","username":"yacovm","ts":"2019-02-19T08:26:20.899Z"}
{"msg":"the real block, and the one it proposed","username":"yacovm","ts":"2019-02-19T08:26:27.681Z"}
{"msg":"@guoger - that sounds to me, like we need to ensure the leader \"saw\" the tip of the replicated log, *before* it initialzied the block creator","username":"yacovm","ts":"2019-02-19T08:27:03.670Z"}
{"msg":"*OR* what we could do, is just have all OSNs:\n1) Poll the block height after commit to ensure it has been committed\n2) When receiving a block from the Ready() channel and its number has been seen before - grab all transactions from it, and schedule them to be cut once again into some next block","username":"yacovm","ts":"2019-02-19T08:28:49.177Z"}
{"msg":"@guoger what do you say?","username":"yacovm","ts":"2019-02-19T08:28:56.689Z"}
{"msg":"solution is actually simple - don't do `support.Block(support.Height()-1)`","username":"guoger","ts":"2019-02-19T08:30:08.467Z"}
{"msg":"instead, keep a reference to the last block","username":"guoger","ts":"2019-02-19T08:30:44.889Z"}
{"msg":"(we have all the knowledge in chain, and we don't need to read them from ledger)","username":"guoger","ts":"2019-02-19T08:31:20.441Z"}
{"msg":"@yacovm ","username":"guoger","ts":"2019-02-19T08:31:54.495Z"}
{"msg":"but what if you are a fresh new leader, and you still haven't seen the last block proposed by the previous leader from the `Ready` channel, and you cut a new block now with the same sequence?","username":"yacovm","ts":"2019-02-19T08:34:26.055Z"}
{"msg":"we already have the logic to wait for block inflight before start accepting new tx (and only create BlockCreator by then)","username":"guoger","ts":"2019-02-19T08:36:19.644Z"}
{"msg":"when a node is elected as new leader","username":"guoger","ts":"2019-02-19T08:36:30.975Z"}
{"msg":"it's not the race there. it's the race between `blockwriter.commitBlock` and `support.Height`","username":"guoger","ts":"2019-02-19T08:37:08.026Z"}
{"msg":"hmmm ok","username":"yacovm","ts":"2019-02-19T08:37:23.699Z"}
{"msg":"if you say so","username":"yacovm","ts":"2019-02-19T08:37:26.073Z"}
{"msg":"@tock https://gerrit.hyperledger.org/r/c/28439/25/integration/nwo/configtx_template.go#88","username":"jyellick","ts":"2019-02-19T14:37:35.683Z"}
{"msg":"Why do we not want to enable the V2_0 orderer capability in all tests? We expect for standard deployments to do this.","username":"jyellick","ts":"2019-02-19T14:38:12.337Z"}
{"msg":"I think we need it to be configurable. We will probably want to write tests that verify what happens when this capability is off. Regardless, when I started migration, I did not want to alter the setup of any other test but mine, and this is the original reason I did it this way. Every test that wants to enable this can do something like this:\n```\nconf := nwo.BasicKafka()\n\t\t\tconf.OrdererCap.V2_0 = true\n\t\t\tnetwork = nwo.New(conf, testDir, client, BasePort(), components)\n```\n(In light of our discussion here https://jira.hyperledger.org/browse/FAB-14180, I'll have to change this to V1_4_1, and add the same support for channel capabilities)).","username":"tock","ts":"2019-02-19T15:14:10.164Z"}
{"msg":"I think we need it to be configurable. We will probably want to write tests that verify what happens when this capability is off. Regardless, when I started migration, I did not want to alter the setup of any other test but mine, and this is the original reason I did it this way. Every test that wants to enable this can do something like this:\n```\n                        conf := nwo.BasicKafka()\n\t\t\tconf.OrdererCap.V2_0 = true\n\t\t\tnetwork = nwo.New(conf, testDir, client, BasePort(), components)\n```\n(In light of our discussion here https://jira.hyperledger.org/browse/FAB-14180, I'll have to change this to V1_4_1, and add the same support for channel capabilities)).","username":"tock","ts":"2019-02-19T15:14:10.164Z"}
{"msg":"I think we need to be a wary of trying to make our integration test suite do all things.  And, as a rule we should default to using the latest capabilities.  You'll notice there is no control for any of the other capabilities in tests, and if there's no need to disable the V2_0 capability for any of the tests to work, I'd just as soon not have the option.","username":"jyellick","ts":"2019-02-19T15:16:25.665Z"}
{"msg":"I think we need to be a wary of trying to make our integration test suite do all things.  And, as a rule we should default to using the latest capabilities.  You'll notice there is no control for any of the other capabilities in tests, and as there's no need to disable the V2_0 capability for any of the tests to work, I'd just as soon not have the option.","username":"jyellick","ts":"2019-02-19T15:16:25.665Z"}
{"msg":"If we _really_ think we need be able to control which capabilities are enabled in the integration tests (which, I am not convinced of), we should default to the newest set of capabilities, not require them to be explicitly enabled for all tests.","username":"jyellick","ts":"2019-02-19T15:17:07.873Z"}
{"msg":"There's the larger test suite around things like upgrade, which makes sense to live outside of the mainline integration tests.","username":"jyellick","ts":"2019-02-19T15:18:04.975Z"}
{"msg":"(FYI, the reason I ran up against this is because I had updated the configtx yaml generation to include the new v20 capability and encountered a merge conflict, and couldn't figure out why there was the 'if' switch around it)","username":"jyellick","ts":"2019-02-19T15:20:05.036Z"}
{"msg":"I am fine with policy. As I said, when I started I wanted to play safe, not knowing if this would break other tests. You convinced me ;-) ","username":"tock","ts":"2019-02-19T15:23:13.219Z"}
{"msg":"I am fine with this policy. As I said, when I started I wanted to play safe, not knowing if this would break other tests. You convinced me ;-) ","username":"tock","ts":"2019-02-19T15:23:13.219Z"}
{"msg":"Looking for another review and +2 on this one: https://gerrit.hyperledger.org/r/c/29323/","username":"kostas","ts":"2019-02-20T14:21:12.590Z"}
{"msg":"Has joined the channel.","username":"Pradeep_Pentakota","ts":"2019-02-21T04:01:25.654Z","type":"uj"}
{"msg":"@yacovm @kostas i'm going to bump etcd/raft lib to include `23731bf`, in order to fix https://jira.hyperledger.org/browse/FAB-13920","username":"guoger","ts":"2019-02-21T06:51:25.746Z"}
{"msg":"@yacovm @kostas i'm going to bump etcd/raft lib version to include `23731bf`, in order to fix https://jira.hyperledger.org/browse/FAB-13920","username":"guoger","ts":"2019-02-21T06:51:25.746Z"}
{"msg":"@yacovm @kostas i'm going to bump etcd/raft lib version to include [23731bf](https://github.com/etcd-io/etcd/commit/23731bf9ba556867089a9cc8db5e492ca6035fe8), in order to fix https://jira.hyperledger.org/browse/FAB-13920","username":"guoger","ts":"2019-02-21T06:51:25.746Z"}
{"msg":"@yacovm @kostas i'm going to bump etcd/raft lib version to include [23731bf](https://github.com/etcd-io/etcd/commit/23731bf9ba556867089a9cc8db5e492ca6035fe8), in order to fix https://jira.hyperledger.org/browse/FAB-13920. I've confirmed that etcd is affected by the same issue w/o this commit (long leader failover when `PreVote` and `CheckQuorum` are both true). Also, we get to pass logger to wal & snap pkg with version being bumped","username":"guoger","ts":"2019-02-21T06:51:25.746Z"}
{"msg":"@yacovm can we maybe reduce the rate of printing this log (if we need to print it at all):\n```\n[e][OrdererOrg.orderer1] 2019-02-21 17:46:04.202 CST [orderer.consensus.etcdraft] consensusSent -> DEBU 1ca1 Sending msg of 29 bytes to 2 on channel systemchannel took 1.535µs\n```","username":"guoger","ts":"2019-02-21T09:48:16.855Z"}
{"msg":"Before Monday's scrum, can you have a look at the placeholder story for backlogged items and see if there is anything that _should_ make the cut for 1.4.1? I am basically looking for items that are backlogged when though they shouldn't be.","username":"kostas","ts":"2019-02-22T14:48:42.226Z"}
{"msg":"Before Monday's scrum, can you have a look at the placeholder story for backlogged items and see if there is anything that _should_ make the cut for 1.4.1? I am basically looking for items that are backlogged when they shouldn't be.","username":"kostas","ts":"2019-02-22T14:48:42.226Z"}
{"msg":"Hey guys ( @kostas @guoger @yacovm @tock ).  I've been having some discussions with @braduf who is working with a group of banks, building a consortium around HLF.  He and some of his colleagues are familiar with golang and would like to get involved in consensus development starting with Raft.  For now, while they're getting up to speed, he's interested in contributing to documentation and possibly test. ","username":"jyellick","ts":"2019-02-22T15:56:17.419Z"}
{"msg":"Has joined the channel.","username":"braduf","ts":"2019-02-22T15:56:17.594Z","type":"uj"}
{"msg":"sure... the more people testing, the better","username":"yacovm","ts":"2019-02-22T15:57:46.810Z"}
{"msg":"as for documentation I am not sure what exactly he has in mind?","username":"yacovm","ts":"2019-02-22T15:58:09.264Z"}
{"msg":"Hi all, thank you @jyellick for the introduction! Well, since we first should get familliar with the work you guys already did, we thought we could write some documentation in our learning process and when we have a better understanding help with coding and testing tasks that are pending. But of course, it's up to you to tell us what needs to be done","username":"braduf","ts":"2019-02-22T16:02:52.684Z"}
{"msg":"@braduf: I think documentation as you pick things up is a great entry point. See: https://jira.hyperledger.org/browse/FAB-12892","username":"kostas","ts":"2019-02-22T16:04:02.894Z"}
{"msg":"just running it in your environment would help a ton","username":"yacovm","ts":"2019-02-22T16:04:07.804Z"}
{"msg":"and yes like Kostas said - deployment guides are very much welcome. If you can deploy it, and then write a guide on how to deploy it in *some environment* - we can review it and add it to the official documentation. ","username":"yacovm","ts":"2019-02-22T16:05:49.343Z"}
{"msg":"@braduf what environment do you guys have, how do you plan to run Fabric? ","username":"yacovm","ts":"2019-02-22T16:06:22.791Z"}
{"msg":"Kubernetes? Bare metal? docker containers without orchestration? OpenStack? private cloud, etc? ","username":"yacovm","ts":"2019-02-22T16:06:55.805Z"}
{"msg":"we are planning to run it with Kubernetes and in AWS","username":"braduf","ts":"2019-02-22T16:07:21.412Z"}
{"msg":"awesome","username":"yacovm","ts":"2019-02-22T16:07:34.984Z"}
{"msg":"from our side, the other entities will all have the cloud provider of their choice, but we will start in AWS with kubernetes","username":"braduf","ts":"2019-02-22T16:08:08.697Z"}
{"msg":"ok, so from what i understood is that what is on the master branch is what we should build?","username":"braduf","ts":"2019-02-22T16:12:02.781Z"}
{"msg":"yes... ","username":"yacovm","ts":"2019-02-22T16:13:32.952Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=yXzesS2wnHcAYJTf6) @kostas as i'm going through them, should their fix version be marked to v1.4.1?","username":"guoger","ts":"2019-02-22T16:35:02.975Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=yXzesS2wnHcAYJTf6","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=yXzesS2wnHcAYJTf6","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Sure.","username":"kostas","ts":"2019-02-22T16:35:17.519Z"}
{"msg":"marked 5 tasks (out of open & not assigned): FAB-13655 FAB-14075 FAB-13654 FAB-13722 ","username":"guoger","ts":"2019-02-22T16:47:51.621Z"}
{"msg":"they are not critical, but something _nice to have_","username":"guoger","ts":"2019-02-22T16:48:31.660Z"}
{"msg":"also, if there's a raft-related integration test failure, i'd appreciate to be alerted (either pinged in jira with link to build log or here) if that's not too much to ask, thx!","username":"guoger","ts":"2019-02-22T16:50:10.756Z"}
{"msg":"Hey guys,\n\nConsidering porting staff into 1.4.0, I've create a JIRA to keep track and pulled all Raft related changes from master since cut of 1.4.0.\nPlease see updated list in https://jira.hyperledger.org/browse/FAB-14321 and comment in case I've missed something.\n\nTo create the list I've used following set of commands:\n\n```\nalias gr='ssh -p 29418 PUT_HERE_YOUR_USERNAME@gerrit.hyperledger.org gerrit'\n```\n\nthen you should be able to run queries like this:\n\n```\ngr query 'status:merged (owner:\"Jay Guo <guojiannan1101@gmail.com>\"  OR owner:\"Yacov Manevich <yacovm@il.ibm.com>\"  OR owner:\"Adarsh Saraf <adarshsaraf123@gmail.com>\"  OR owner:\"Yoav Tock <tock@il.ibm.com>\") AND status:merged AND since:\"2018-12-12\"'\n```\n\n@kostas @yacovm @tock @guoger @adarshsaraf123 ","username":"C0rWin","ts":"2019-02-24T12:21:45.820Z"}
{"msg":"Hey guys,\n\nConsidering porting staff into 1.4.0, I've create a JIRA to keep track and pulled all Raft related changes from master since cut of 1.4.0.\nPlease see updated list in https://jira.hyperledger.org/browse/FAB-14321 and comment in case I've missed something.\n\nTo create the list I've used following set of commands:\n\n```\nalias gr='ssh -p 29418 PUT_HERE_YOUR_USERNAME@gerrit.hyperledger.org gerrit'\n```\n\nthen you should be able to run queries like this:\n\n```\ngr query 'status:merged (owner:\"Jay Guo <guojiannan1101@gmail.com>\"  OR owner:\"Yacov Manevich <yacovm@il.ibm.com>\"  OR owner:\"Adarsh Saraf <adarshsaraf123@gmail.com>\"  OR owner:\"Yoav Tock <tock@il.ibm.com>\") AND status:merged AND since:\"2018-12-12\"'\n```\n\n. @kostas @yacovm @tock @guoger @adarshsaraf123 ","username":"C0rWin","ts":"2019-02-24T12:21:45.820Z"}
{"msg":"and query could be pipelined actually to extract only relevant information like this:\n\n```\ngr query 'status:merged (owner:\"Jay Guo <guojiannan1101@gmail.com>\"  OR owner:\"Yacov Manevich <yacovm@il.ibm.com>\"  OR owner:\"Adarsh Saraf <adarshsaraf123@gmail.com>\"  OR owner:\"Yacov Manevich <yacovm@il.ibm.com>\") AND status:merged AND since:\"2018-12-12\"' | egrep \"subject|url\" | sed 'N;s/\\n/ /' > backport_list.txt\n```","username":"C0rWin","ts":"2019-02-24T12:41:22.905Z"}
{"msg":"and query could be pipelined actually to extract only relevant information like this:\n\n```\ngr query 'status:merged (owner:\"Jay Guo <guojiannan1101@gmail.com>\"  OR owner:\"Yacov Manevich <yacovm@il.ibm.com>\"  OR owner:\"Adarsh Saraf <adarshsaraf123@gmail.com>\") AND status:merged AND since:\"2018-12-12\"' | egrep \"subject|url\" | sed 'N;s/\\n/ /' > backport_list.txt\n```","username":"C0rWin","ts":"2019-02-24T12:41:22.905Z"}
{"msg":"and query could be pipelined actually to extract only relevant information like this:\n\n```\ngr query 'status:merged (owner:\"Jay Guo <guojiannan1101@gmail.com>\"  OR owner:\"Yacov Manevich <yacovm@il.ibm.com>\"  OR owner:\"Adarsh Saraf <adarshsaraf123@gmail.com>\"  OR owner:\"Yoav Tock <tock@il.ibm.com>\") AND status:merged AND since:\"2018-12-12\"' | egrep \"subject|url\" | sed 'N;s/\\n/ /' > backport_list.txt\n```","username":"C0rWin","ts":"2019-02-24T12:41:22.905Z"}
{"msg":"items in JIRA listed from earliest to latest so it will be easier to keep track","username":"C0rWin","ts":"2019-02-24T12:49:55.623Z"}
{"msg":"it seems that there are non raft changes in there","username":"yacovm","ts":"2019-02-24T17:19:51.085Z"}
{"msg":"such as https://gerrit.hyperledger.org/r/#/c/28305/ ","username":"yacovm","ts":"2019-02-24T17:20:28.197Z"}
{"msg":"and https://gerrit.hyperledger.org/r/#/c/29068/ ","username":"yacovm","ts":"2019-02-24T17:21:31.207Z"}
{"msg":"or https://gerrit.hyperledger.org/r/#/c/29087/ . Is there a way to pass to the gerrit query a file path of changes? :thinking: ","username":"yacovm","ts":"2019-02-24T17:22:34.174Z"}
{"msg":"i.e - change set contains a file in `./orderer`","username":"yacovm","ts":"2019-02-24T17:23:01.945Z"}
{"msg":"@C0rWin: Thanks for the first pass! I'm interested in whether what Yacov is saying is feasible. Failing that, I think we'll need to do a second pass manually grepping the commits since 1.4 was cut and figuring out if anything is missing from your list.","username":"kostas","ts":"2019-02-24T18:06:16.057Z"}
{"msg":"For instance, Jason's configxten changes (stack starting from: https://gerrit.hyperledger.org/r/c/29143/) plus his fix on the orderer protos (https://gerrit.hyperledger.org/r/c/29384/).","username":"kostas","ts":"2019-02-24T18:06:49.945Z"}
{"msg":"@kostas Well, manual pass over list is something we cannot escape, I will take a look on Jason stack","username":"C0rWin","ts":"2019-02-24T21:20:04.496Z"}
{"msg":"> or https://gerrit.hyperledger.org/r/#/c/29087/ . Is there a way to pass to the gerrit query a file path of changes? 🤔\nyes, gerrit supports such queries","username":"C0rWin","ts":"2019-02-24T21:21:26.363Z"}
{"msg":"I've took out the list 3 items you mentioned, overlooked them while was inspecting resulted set, thanks for pointing out @yacovm ","username":"C0rWin","ts":"2019-02-24T21:24:21.540Z"}
{"msg":"@C0rWin thanks for putting this together! i actually don't know you can run query against gerrit. I see you've tagged us for some reviews, although I don't know what to do with it exactly?","username":"guoger","ts":"2019-02-25T03:46:34.750Z"}
{"msg":"@guoger those items is to backport Raft from master into v1.4.1 branch ","username":"C0rWin","ts":"2019-02-25T08:23:04.761Z"}
{"msg":"@C0rWin  I know but I'm not familiar with backporting process :( i suppose they are just waiting for 2 +2 to be merged, right?","username":"guoger","ts":"2019-02-25T08:24:42.504Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Qui3DR4XkNqKct4a8) @guoger basically, yes, but the key here is to go over the list of CRs from master I've posted above and see whenever I've overlooked something or there is something we can skip","username":"C0rWin","ts":"2019-02-25T08:32:32.067Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Qui3DR4XkNqKct4a8","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=Qui3DR4XkNqKct4a8","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I mean, I'm only cherry-picking CRs + resolving conflicts ","username":"C0rWin","ts":"2019-02-25T08:32:57.414Z"}
{"msg":"no code change done (or at least not suppose to be done)","username":"C0rWin","ts":"2019-02-25T08:33:16.667Z"}
{"msg":"ah, got it. thx!","username":"guoger","ts":"2019-02-25T08:34:08.314Z"}
{"msg":"The fix for https://jira.hyperledger.org/browse/FAB-14327 is in: https://gerrit.hyperledger.org/r/#/c/29535/\nI think this is important for 1.4.1, please take a look @kostas @C0rWin @yacovm ","username":"tock","ts":"2019-02-26T08:52:02.780Z"}
{"msg":"The fix for https://jira.hyperledger.org/browse/FAB-14327 is in: https://gerrit.hyperledger.org/r/#/c/29535/\nI think this is important for 1.4.1, please take a look @kostas @C0rWin @yacovm @jyellick ","username":"tock","ts":"2019-02-26T08:52:02.780Z"}
{"msg":"The BYFN sample with a 3-node etcd/raft cluster is also pending review: https://gerrit.hyperledger.org/r/#/c/29506/","username":"tock","ts":"2019-02-26T08:53:47.224Z"}
{"msg":"I think the bug fix should be cherry picked all the way to v1.1","username":"yacovm","ts":"2019-02-26T08:56:14.191Z"}
{"msg":"or to all releases which have been introduced with the optimization of synchronicity is  ","username":"yacovm","ts":"2019-02-26T09:25:32.005Z"}
{"msg":"or to all releases which have been introduced with the optimization of synchronicity ","username":"yacovm","ts":"2019-02-26T09:25:32.005Z"}
{"msg":"> or to all releases which have been introduced with the optimization of synchronicity\n\nIMO it was there since v1.1","username":"C0rWin","ts":"2019-02-26T10:58:02.414Z"}
{"msg":"These two CRs add channel capability V1_4_1, gate migration with it in the Bundle, and clean the Bundle from processing related to migration. I think they should make it to v1.4.1, so that we won't have to update the peers beyond 1.4.1 when we introduce and enable migration in the orderers. Please take a look @kostas @C0rWin @yacovm @jyellick \nhttps://gerrit.hyperledger.org/r/#/c/29585/\nhttps://gerrit.hyperledger.org/r/#/c/29586/","username":"tock","ts":"2019-02-26T14:21:00.847Z"}
{"msg":"Hi guys","username":"C0rWin","ts":"2019-02-28T08:57:58.762Z"}
{"msg":"the work of porting Raft into v1.4.1 finished you can find CRs cherry picked here: https://gerrit.hyperledger.org/r/#/q/owner:bartem%2540il.ibm.com+status:open","username":"C0rWin","ts":"2019-02-28T08:58:26.567Z"}
{"msg":"test flakiness a bit killing us ","username":"C0rWin","ts":"2019-02-28T08:58:44.448Z"}
{"msg":"however I'd like to encourage you to review the list and verify nothing is missing","username":"C0rWin","ts":"2019-02-28T08:59:16.664Z"}
{"msg":"I admit that I might have missed a few items from past couple of days","username":"C0rWin","ts":"2019-02-28T08:59:36.151Z"}
{"msg":"@kostas @yacovm @guoger @tock @adarshsaraf123 ^^^^","username":"C0rWin","ts":"2019-02-28T08:59:57.661Z"}
{"msg":"This is the JIRA to track status of items being merged: https://jira.hyperledger.org/browse/FAB-14321","username":"C0rWin","ts":"2019-02-28T09:00:22.488Z"}
{"msg":"thanks for all the effort! this is an exhausting work....","username":"guoger","ts":"2019-02-28T09:17:44.749Z"}
{"msg":"@guoger tell me :joy: still fighting flaky tests","username":"C0rWin","ts":"2019-02-28T09:22:20.902Z"}
{"msg":"looks good to me, as far as the migration commits go... \nhowever see https://gerrit.hyperledger.org/r/#/c/29535/ for the blockwriter issue","username":"tock","ts":"2019-02-28T10:59:09.603Z"}
{"msg":"not strictly raft...","username":"tock","ts":"2019-02-28T10:59:23.129Z"}
{"msg":"https://jira.hyperledger.org/browse/FAB-14380 racy back-to-back configs\nhttps://jira.hyperledger.org/browse/FAB-14413 newly onboarded node is leader, lagged node is not able to catch up","username":"guoger","ts":"2019-02-28T13:44:54.773Z"}
{"msg":"@yacovm saw [your comment](https://jira.hyperledger.org/browse/FAB-14413?focusedCommentId=57722&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-57722) there, willing to hear your solution :)","username":"guoger","ts":"2019-02-28T13:46:28.295Z"}
{"msg":"so let's before that just consider something else","username":"yacovm","ts":"2019-02-28T13:46:38.700Z"}
{"msg":"at least - talk about it","username":"yacovm","ts":"2019-02-28T13:46:47.477Z"}
{"msg":"if we have such a situation, we have a node that is behind, and at least a quorum of nodes alive, right?","username":"yacovm","ts":"2019-02-28T13:47:06.232Z"}
{"msg":"Correct.","username":"kostas","ts":"2019-02-28T13:47:57.076Z"}
{"msg":"in theory - if we have an operations team and they forcefully kill the leader - then there is a takeover :joy: ","username":"yacovm","ts":"2019-02-28T13:48:01.855Z"}
{"msg":"but I don't think this is a very.... elegant solution","username":"yacovm","ts":"2019-02-28T13:48:12.055Z"}
{"msg":"Also correct.","username":"kostas","ts":"2019-02-28T13:48:17.441Z"}
{"msg":"but i am just saying - it's a last resort, in a sense","username":"yacovm","ts":"2019-02-28T13:48:23.763Z"}
{"msg":"So as we noted in the call earlier, this happens because o4 is supposed to reach to the leader for the Raft snapshot? @guoger ","username":"kostas","ts":"2019-02-28T13:49:16.034Z"}
{"msg":"as for my solution, I can just extend my logic to make blocks being pulled if there is no leader for a long time regardless of the node is evicted or not","username":"yacovm","ts":"2019-02-28T13:49:23.123Z"}
{"msg":"Right! That's what I'm building towards, I think.","username":"kostas","ts":"2019-02-28T13:50:53.636Z"}
{"msg":"Jay is right that if there is a leader change in the meantime then we need to worry about double commit","username":"yacovm","ts":"2019-02-28T13:51:38.794Z"}
{"msg":"i think that's what i was suggesting in that jira as well? and i was saying that we should update the chain with the block number, so that it does not replay the same block","username":"guoger","ts":"2019-02-28T13:51:41.402Z"}
{"msg":"@yacovm Can you go over how exactly your logic reacts _now_, i.e. given the current code","username":"kostas","ts":"2019-02-28T13:51:41.687Z"}
{"msg":"right now - if it detects its eviction, it just first halts the chain and then pulls blocks until the last block","username":"yacovm","ts":"2019-02-28T13:52:12.408Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=L2RFt7y2aqDCs5Jbq) @yacovm i actually thought about the same thing lol","username":"guoger","ts":"2019-02-28T13:52:14.241Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=L2RFt7y2aqDCs5Jbq","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=L2RFt7y2aqDCs5Jbq","remote":true,"fileId":null,"fileName":null}]}
{"msg":"we need some mechanism to suspend its commit while this is done","username":"yacovm","ts":"2019-02-28T13:52:42.582Z"}
{"msg":"> i think that's what i was suggesting in that jira as well? and i was saying that we should update the chain with the block number, so that it does not replay the same block\nSorry I missed the most recent comments there.","username":"kostas","ts":"2019-02-28T13:52:54.372Z"}
{"msg":"> i think that's what i was suggesting in that jira as well? and i was saying that we should update the chain with the block number, so that it does not replay the same block\nSorry ab out that -- I missed the most recent comments there. I see it now.","username":"kostas","ts":"2019-02-28T13:52:54.372Z"}
{"msg":"no, it won't be enough","username":"yacovm","ts":"2019-02-28T13:53:17.785Z"}
{"msg":"we have 2 goroutines that might commit","username":"yacovm","ts":"2019-02-28T13:53:26.867Z"}
{"msg":"Again: can we go over how the block pulling logic works now?","username":"kostas","ts":"2019-02-28T13:54:09.025Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=FhLCAnzxDQB32FZGB) @yacovm exactly, that's why i think we should have only one go routine doing commits, to avoid race","username":"guoger","ts":"2019-02-28T13:54:49.099Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=FhLCAnzxDQB32FZGB","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=FhLCAnzxDQB32FZGB","remote":true,"fileId":null,"fileName":null}]}
{"msg":"In this particular case, what prevents us from pulling blocks from other nodes in the consenter set is the fact that the channel is leaderless?","username":"kostas","ts":"2019-02-28T13:55:05.940Z"}
{"msg":"(According to o4's view as least.)","username":"kostas","ts":"2019-02-28T13:55:18.849Z"}
{"msg":"the leader is the only one sending you snapshots :( ","username":"yacovm","ts":"2019-02-28T13:55:30.973Z"}
{"msg":"block pulling is always pulling committed blocks, so it's orthogonal to leader state","username":"guoger","ts":"2019-02-28T13:55:43.535Z"}
{"msg":"","username":"yacovm","ts":"2019-02-28T13:56:04.069Z","attachments":[{"type":"file","title":"Clipboard - February 28, 2019 3:56 PM","title_link":"/file-upload/iGXPRPRutQCxw9C6u/Clipboard%20-%20February%2028,%202019%203:56%20PM","image_url":"/file-upload/iGXPRPRutQCxw9C6u/Clipboard%20-%20February%2028,%202019%203:56%20PM","image_type":"image/png","image_size":37149,"url":"/file-upload/iGXPRPRutQCxw9C6u/Clipboard%20-%20February%2028,%202019%203:56%20PM","remote":false,"fileId":"iGXPRPRutQCxw9C6u","fileName":"Clipboard - February 28, 2019 3:56 PM"}]}
{"msg":"http://blog.carlosgaldino.com/a-brief-overview-of-the-raft-algorithm.html","username":"yacovm","ts":"2019-02-28T13:56:16.481Z"}
{"msg":"(and to be accurate, it's not really about snapshots. this situation is general enough w/o snapshotting)","username":"guoger","ts":"2019-02-28T13:56:16.612Z"}
{"msg":"(and to be accurate, it's not really about snapshots. this situation is general enough w/o snapshotting. This problem can happen even if snapshotting is disabled)","username":"guoger","ts":"2019-02-28T13:56:16.612Z"}
{"msg":"Ah, so based on the snippet above, an attempt to send a snapshot happens automatically.","username":"kostas","ts":"2019-02-28T13:56:52.544Z"}
{"msg":"Whether the follower node is fairly caught up or not.","username":"kostas","ts":"2019-02-28T13:57:03.160Z"}
{"msg":"That actually answers my question then -- I was wondering if there was something in the block pulling logic that makes o4 stop early. (And if that is the case, we fix that so that o4 is fairly caught up and we avoid the need for snapshotting.) But if I'm reading the snippet above correctly, this is useless.","username":"kostas","ts":"2019-02-28T13:58:11.268Z"}
{"msg":"i think solution is actually straightforward, we just send an artificial signal to `snapC` to trigger a catchup","username":"guoger","ts":"2019-02-28T13:58:20.037Z"}
{"msg":"if there is no leader for a long time?","username":"yacovm","ts":"2019-02-28T13:58:54.884Z"}
{"msg":"Before we go over that:","username":"kostas","ts":"2019-02-28T13:59:06.635Z"}
{"msg":"yep","username":"guoger","ts":"2019-02-28T13:59:07.354Z"}
{"msg":"I like it @guoger ","username":"yacovm","ts":"2019-02-28T13:59:29.405Z"}
{"msg":"I'm not sure I follow the double-commit comment.","username":"kostas","ts":"2019-02-28T13:59:34.337Z"}
{"msg":"so the double commit...","username":"yacovm","ts":"2019-02-28T13:59:40.105Z"}
{"msg":"imagine we have the goroutine that performs `chain.apply()` because there was a leader change","username":"yacovm","ts":"2019-02-28T14:00:14.069Z"}
{"msg":"but at the same time - we pull blocks and commit them from the other goroutine ","username":"yacovm","ts":"2019-02-28T14:00:23.222Z"}
{"msg":"Understood.","username":"kostas","ts":"2019-02-28T14:01:15.200Z"}
{"msg":"What is the condition under which you'll send the artifical signal to `snapC` @guoger?","username":"kostas","ts":"2019-02-28T14:01:51.528Z"}
{"msg":"What is the condition under which you'll send the artificial signal to `snapC` @guoger?","username":"kostas","ts":"2019-02-28T14:01:51.528Z"}
{"msg":"how often is EvictionSuspicion performed?","username":"guoger","ts":"2019-02-28T14:02:21.314Z"}
{"msg":"Yacov was supposed to push a CR that bumps the timing from every second to 10 seconds or so?","username":"kostas","ts":"2019-02-28T14:02:48.588Z"}
{"msg":"@guoger in `evictionSuspector.confirmSuspicion` in `chain.go` we can just add a dirty bit toggle to the `chain.go` and it can then check for it, and then artificially trigger a snapshot on itself","username":"yacovm","ts":"2019-02-28T14:03:04.707Z"}
{"msg":"I can push it now, Kostas (the 10 seconds)","username":"yacovm","ts":"2019-02-28T14:03:12.178Z"}
{"msg":"want me to ?","username":"yacovm","ts":"2019-02-28T14:03:18.890Z"}
{"msg":"why not passing `snapC` to suspector?","username":"guoger","ts":"2019-02-28T14:04:00.986Z"}
{"msg":"There is no rush. Just letting Jay now that the answer today won't be the same as the answer tomorrow, or in a few days from now.","username":"kostas","ts":"2019-02-28T14:04:14.230Z"}
{"msg":"> Just letting Jay now that the answer today won't be the same as the answer tomorrow, or in a few days from now.\nnot following this...","username":"guoger","ts":"2019-02-28T14:04:59.094Z"}
{"msg":"Eviction suspicion is performed every second now.","username":"kostas","ts":"2019-02-28T14:05:17.062Z"}
{"msg":"But we'll adjust that frequency.","username":"kostas","ts":"2019-02-28T14:05:29.493Z"}
{"msg":"my suggestion:\n- pass `snapC` to `suspector`\n- `suspector` knows latest config block, and knows it contains its own cert in consenter set\n- `suspector` triggers an artificial snap signal","username":"guoger","ts":"2019-02-28T14:06:46.706Z"}
{"msg":"my suggestion:\n- pass `snapC` to `suspector`\n- `suspector` knows latest config block, and knows it contains its own cert in consenter set\n- `suspector` triggers an artificial snap signal at certain frequency","username":"guoger","ts":"2019-02-28T14:06:46.706Z"}
{"msg":"I am following this.","username":"kostas","ts":"2019-02-28T14:07:29.449Z"}
{"msg":">  why not passing `snapC` to suspector? \nWe can do that... sure","username":"yacovm","ts":"2019-02-28T14:07:31.446Z"}
{"msg":"let me push a draft @kostas  @guoger  ok?","username":"yacovm","ts":"2019-02-28T14:07:51.677Z"}
{"msg":"sure","username":"guoger","ts":"2019-02-28T14:07:58.423Z"}
{"msg":"Perfect, thanks.","username":"kostas","ts":"2019-02-28T14:08:00.559Z"}
{"msg":"This is actually a great find. Thanks J.","username":"kostas","ts":"2019-02-28T14:08:51.361Z"}
{"msg":"@C0rWin wanna have a quick chat on \nhttps://jira.hyperledger.org/browse/FAB-14380 racy back-to-back configs ?","username":"guoger","ts":"2019-02-28T14:08:56.847Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=HsqzXttAJLxAA7o57) @kostas haha, i'd like to thank @yacovm 's great integration test","username":"guoger","ts":"2019-02-28T14:09:18.008Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=HsqzXttAJLxAA7o57","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=HsqzXttAJLxAA7o57","remote":true,"fileId":null,"fileName":null}]}
{"msg":"the integration test actually doesn't make sense","username":"yacovm","ts":"2019-02-28T14:09:38.755Z"}
{"msg":"but i still added it","username":"yacovm","ts":"2019-02-28T14:09:43.174Z"}
{"msg":"otherwise i wouldn't be able to find it","username":"guoger","ts":"2019-02-28T14:09:45.470Z"}
{"msg":"out of paranoid because that use case wasn't covered","username":"yacovm","ts":"2019-02-28T14:09:49.782Z"}
{"msg":"great gut feeling","username":"guoger","ts":"2019-02-28T14:09:49.893Z"}
{"msg":"no, it's parania ","username":"yacovm","ts":"2019-02-28T14:09:58.872Z"}
{"msg":"no, it's paranoia ","username":"yacovm","ts":"2019-02-28T14:09:58.872Z"}
{"msg":"not gut feeling","username":"yacovm","ts":"2019-02-28T14:10:02.508Z"}
{"msg":"lol","username":"guoger","ts":"2019-02-28T14:10:18.798Z"}
{"msg":"but great find because everyone else ignored the occasional failure","username":"yacovm","ts":"2019-02-28T14:10:43.861Z"}
{"msg":"if an integration test fails in the forest and someone re-verifies, did it really fail? :thinking: ","username":"yacovm","ts":"2019-02-28T14:11:22.551Z"}
{"msg":"just updated the description there","username":"guoger","ts":"2019-02-28T14:14:52.695Z"}
{"msg":"since i've dealing with test flakes for a while, got this habit to skim through failure logs already :joy: ","username":"guoger","ts":"2019-02-28T14:15:43.028Z"}
{"msg":"since i've been dealing with test flakes for a while, got this habit to skim through failure logs already :joy: ","username":"guoger","ts":"2019-02-28T14:15:43.028Z"}
{"msg":"@guoger - how do i explicitly ask for a snapshot without knowing the `raftpb.Snapshot` ? ","username":"yacovm","ts":"2019-02-28T14:18:02.380Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=C8MjeiEFgJKspCXGn) @yacovm what you could do is to manually assemble one, and leave the `Metadata` in it unset. and in `serveReq` where it's handled, you can differentiate _actual snapshot_ and _artificial snapshot_ by inspecting `Metadata.Index`. If it's non-zero, it's actual one, otherwise it's artificial","username":"guoger","ts":"2019-02-28T14:23:09.428Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=C8MjeiEFgJKspCXGn","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=C8MjeiEFgJKspCXGn","remote":true,"fileId":null,"fileName":null}]}
{"msg":"and make sure to add a explicit check [here](https://github.com/hyperledger/fabric/blob/f97797659fe0f7c11ec53ac7af40ad3c29898430/orderer/consensus/etcdraft/chain.go#L934)\n```\n\t\t\tif block.Header.Number != c.lastBlock.Header.Number+1 {\n\t\t\t\tbreak\n\t\t\t}\n```","username":"guoger","ts":"2019-02-28T14:27:58.522Z"}
{"msg":"because raft has *no* knowledge about this block pulling in the background, and will still continue from where it's left, once communication is \"repaired\". And all missing entries are still sent via normal raft protocal","username":"guoger","ts":"2019-02-28T14:29:49.986Z"}
{"msg":"and i suppose you'll need to call `configureComm` once that last config block is committed","username":"guoger","ts":"2019-02-28T14:29:50.020Z"}
{"msg":"hmmm","username":"yacovm","ts":"2019-02-28T14:30:49.946Z"}
{"msg":"you raise a point here - do we call configureComm in `catchUp` ? ","username":"yacovm","ts":"2019-02-28T14:31:04.064Z"}
{"msg":"@guoger ","username":"yacovm","ts":"2019-02-28T14:32:20.705Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=fePiaRYQTsBEXpYC2) @guoger sorry, I'm on call... can we chat a bit later?","username":"C0rWin","ts":"2019-02-28T14:33:49.955Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=fePiaRYQTsBEXpYC2","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=fePiaRYQTsBEXpYC2","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=DykbKMGPsL3AbRZsQ) @yacovm and i think we always had this problem :joy: if it's not expensive, we could call it in `catchUp` when we write a config block (it's idempotent, right?)","username":"guoger","ts":"2019-02-28T14:36:58.529Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=DykbKMGPsL3AbRZsQ","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=DykbKMGPsL3AbRZsQ","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=DykbKMGPsL3AbRZsQ) @yacovm and i think this is another problem we always had :joy: if it's not expensive, we could call it in `catchUp` when we write a config block (it's idempotent, right?)","username":"guoger","ts":"2019-02-28T14:36:58.529Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=DykbKMGPsL3AbRZsQ","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=DykbKMGPsL3AbRZsQ","remote":true,"fileId":null,"fileName":null}]}
{"msg":"oh god","username":"yacovm","ts":"2019-02-28T14:37:35.889Z"}
{"msg":"I added a few comments to FAB-14380. I do not _think_ the last proposal is correct.","username":"kostas","ts":"2019-02-28T14:38:43.724Z"}
{"msg":"@kostas replied. I didn't mean to change `ProcessConfigMsg`, but just to perform additional check after we've done with `ProcessConfigMsg`, in chain.go","username":"guoger","ts":"2019-02-28T14:41:50.891Z"}
{"msg":"> if it's not expensive, we could call it in `catchUp` when we write a config block\nIs there a problem with this proposal? This sounds right to me.","username":"kostas","ts":"2019-02-28T14:42:39.654Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=gFuDiABbexS7S2edd) @kostas it just surfaces another problem buried in my code :( if a node is added/removed, and the block that adds/removes it is pulled via puller, then it's not able to communicate","username":"guoger","ts":"2019-02-28T14:46:41.604Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=gFuDiABbexS7S2edd","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=gFuDiABbexS7S2edd","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=gFuDiABbexS7S2edd) @kostas it just surfaces another problem buried in my code :( if a node is added/removed, and the block that adds/removes it is pulled via puller because of snapshotting, then it's not able to communicate","username":"guoger","ts":"2019-02-28T14:46:41.604Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=gFuDiABbexS7S2edd","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=gFuDiABbexS7S2edd","remote":true,"fileId":null,"fileName":null}]}
{"msg":"will solve this altogether","username":"guoger","ts":"2019-02-28T14:48:17.238Z"}
{"msg":"we are checking the codebase for proto maps since they don't get serialized deterministically... just wanted to be sure this one is ok: https://github.com/hyperledger/fabric/blob/master/protos/orderer/etcdraft/configuration.pb.go#L219","username":"dave.enyeart","ts":"2019-02-28T15:08:17.865Z"}
{"msg":"another one here @jyellick : https://github.com/hyperledger/fabric/blob/master/protos/common/configuration.pb.go#L214","username":"dave.enyeart","ts":"2019-02-28T15:10:13.107Z"}
{"msg":"just checking...","username":"dave.enyeart","ts":"2019-02-28T15:10:23.379Z"}
{"msg":"in raft, the leader cuts the blocks - so there should be only a single instance of that ","username":"yacovm","ts":"2019-02-28T15:13:28.817Z"}
{"msg":"Yeah, that map in etcdraft/configuration.proto shouldn't be a problem.","username":"kostas","ts":"2019-02-28T15:50:07.994Z"}
{"msg":"@dave.enyeart Yes, the config proto stuff is deliberately only marshaled in one place.  Everyone unmarshals and checks the updates for correctness, but they use the original marshaled form to commit, they do not remarshal it.","username":"jyellick","ts":"2019-02-28T17:29:42.425Z"}
{"msg":"Please have a look at @J's stack starting from: https://gerrit.hyperledger.org/r/c/29693/","username":"kostas","ts":"2019-03-01T18:06:47.357Z"}
{"msg":"Please have a look at @guoger's stack starting from https://gerrit.hyperledger.org/r/c/29693/ and if it looks good to you too, we can get it in.","username":"kostas","ts":"2019-03-01T18:06:47.357Z"}
{"msg":"```14:05:17 • Failure [11.203 seconds]\n14:05:17 Chain\n14:05:17 /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/orderer/consensus/etcdraft/chain_test.go:65\n14:05:17   Multiple Raft nodes\n14:05:17   /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/orderer/consensus/etcdraft/chain_test.go:1143\n14:05:17     when reconfiguring raft cluster\n14:05:17     /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/orderer/consensus/etcdraft/chain_test.go:1274\n14:05:17       reconfiguration\n14:05:17       /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/orderer/consensus/etcdraft/chain_test.go:1344\n14:05:17         stop cluster quorum and continue reconfiguration after the restart [It]\n14:05:17         /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/orderer/consensus/etcdraft/chain_test.go:1585\n14:05:17 \n14:05:17         Timed out after 10.000s.\n14:05:17         Expected\n14:05:17             <raft.SoftState>: {Lead: 0, RaftState: 0}\n14:05:17         to equal\n14:05:17             <raft.SoftState>: {Lead: 2, RaftState: 2}\n14:05:17 \n14:05:17         /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/orderer/consensus/etcdraft/chain_test.go:2889\n14:05:17 ------------------------------\n14:05:17 ••••••••••••••••••••2019-03-03 14:04:52.599041 W | wal: sync duration of 3.288099196s, expected less than 1s\n14:05:17 ••\n14:05:17 \n14:05:17 Summarizing 1 Failure:\n14:05:17 \n14:05:17 [Fail] Chain Multiple Raft nodes when reconfiguring raft cluster reconfiguration [It] stop cluster quorum and continue reconfiguration after the restart \n14:05:17 /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/orderer/consensus/etcdraft/chain_test.go:2889\n14:05:17 \n14:05:17 Ran 73 of 73 Specs in 28.201 seconds\n14:05:17 FAIL! -- 72 Passed | 1 Failed | 0 Pending | 0 Skipped\n14:05:17 --- FAIL: TestEtcdraft (28.20s)```","username":"C0rWin","ts":"2019-03-03T15:09:53.543Z"}
{"msg":"is someone aware of the failure above? is it a flake or a bug?","username":"C0rWin","ts":"2019-03-03T15:10:17.499Z"}
{"msg":"found here: https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/9828/console","username":"C0rWin","ts":"2019-03-03T15:10:24.991Z"}
{"msg":"related to https://gerrit.hyperledger.org/r/#/c/29645/","username":"C0rWin","ts":"2019-03-03T15:10:33.615Z"}
{"msg":"Artem has seen [this failure](https://jenkins.hyperledger.org/job/fabric-verify-integration-tests-x86_64/6641/consoleFull) consistently. I _think_ the fix is simple - we should put `network.EventuallyTimeout` in\n```\n\t\t\tlaunch := func(o *nwo.Orderer) {\n\t\t\t\torderers = append(orderers, o)\n\t\t\t\trunner := network.OrdererRunner(o)\n\t\t\t\tordererRunners = append(ordererRunners, runner)\n\n\t\t\t\tprocess := ifrit.Invoke(grouper.Member{Name: o.ID(), Runner: runner})\n\t\t\t\tEventually(process.Ready()).Should(BeClosed()) // This should use network.EventuallyTimeout\n\t\t\t\tordererProcesses = append(ordererProcesses, process)\n\t\t\t}\n```\nHowever, I don't know why master is not affected by this? (or i'm completely missing the point here?) @yacovm ","username":"guoger","ts":"2019-03-04T12:27:56.921Z"}
{"msg":"I don't think so. It is how it is used in like 10 places in the code","username":"yacovm","ts":"2019-03-04T12:35:01.434Z"}
{"msg":"in that test","username":"yacovm","ts":"2019-03-04T12:35:04.473Z"}
{"msg":"if it is problematic then the test would've failed in like ~ 10 places","username":"yacovm","ts":"2019-03-04T12:35:24.426Z"}
{"msg":"it shouldn't take more than a second to start an orderer process","username":"yacovm","ts":"2019-03-04T12:36:09.586Z"}
{"msg":"the default timeout is a second","username":"yacovm","ts":"2019-03-04T12:36:23.430Z"}
{"msg":"hmmm..  there's ~7 sec delay...\n```\n19:37:21 [e][OrdererOrg.orderer1new] 2019-03-04 11:37:05.255 UTC [orderer.common.cluster.replication] fetchLastBlockSeq -> INFO 013 127.0.0.1:31006 is at block sequence of 1\n\n19:37:21 [e][OrdererOrg.orderer1new] 2019-03-04 11:37:12.248 UTC [orderer.common.cluster.replication] probeEndpoint -> WARN 014 Failed connecting to 127.0.0.1:31009: failed to create new connection: context deadline exceeded\n```","username":"guoger","ts":"2019-03-04T13:06:11.852Z"}
{"msg":"by comparing it to the log of successful run, i'm expecting\n```\nFailed connecting to 127.0.0.1:36009: failed to create new connection: connection error: desc = \"transport: error while dialing: dial tcp 127.0.0.1:36009: connect: connection refused\"\n```\nit should be `connection refused`, but not `context deadline exceeded`, which is configured to 7 sec IIRC.","username":"guoger","ts":"2019-03-04T13:22:30.181Z"}
{"msg":"what's your take on this @yacovm ?","username":"guoger","ts":"2019-03-04T13:23:00.430Z"}
{"msg":"i don't understand ","username":"yacovm","ts":"2019-03-04T13:24:13.399Z"}
{"msg":"to summarize so that others can have context, what that integration test does is:\n1. create a cluster with <1, 2, 3, 4>\n2. start <1, 2, 3> only\n3. add a new node <5>\n4. start <5>\n5. wait for it to sync with network\n6. kill <1, 2, 3>\n7. start <4>\n8. waiting for <4> to start suspecting eviction\n9. resurrect <1, 2, 3>\n10. everything should keep working properly, eventually\n\nSo at step 4, when <5> is started, it probes other nodes in the channel, <1, 2, 3, 4>.  Connections to <1, 2, 3> are fine, although <4> is not started, hence should *refuse* connection. However, in the failed integration test, I see `context deadline exceeded`","username":"guoger","ts":"2019-03-04T13:49:37.747Z"}
{"msg":"to summarize so that others can have context, what that integration test does is:\n1. create a cluster with <1, 2, 3, 4>\n2. start <1, 2, 3> only\n3. add a new node <5>\n4. start <5>\n5. wait for it to sync with network\n6. kill <1, 2, 3>\n7. start <4>\n8. waiting for <4> to start suspecting eviction\n9. resurrect <1, 2, 3>\n10. everything should keep working properly, eventually\n\nSo at step 4, when <5> is started, it probes other nodes in the channel, <1, 2, 3, 4>.  Connections to <1, 2, 3> are fine, although <4> is not started, hence should *refuse* connection. However, in the failed integration test, I see `context deadline exceeded`, which is 7 sec delay and causes test to fail","username":"guoger","ts":"2019-03-04T13:49:37.747Z"}
{"msg":"@yacovm ","username":"guoger","ts":"2019-03-04T13:49:56.572Z"}
{"msg":"ah you're saying that the 7 seconds delay at onboarding causes the test to fail?","username":"yacovm","ts":"2019-03-04T13:53:58.363Z"}
{"msg":"i don't think there's anything wrong with onboarding though... why doesn't <4>, a never started process, refuses connection? that's my question...","username":"guoger","ts":"2019-03-04T13:55:52.484Z"}
{"msg":"i don't know... can you link me to a CI log?","username":"yacovm","ts":"2019-03-04T13:56:17.357Z"}
{"msg":"a console output in CI","username":"yacovm","ts":"2019-03-04T13:56:21.707Z"}
{"msg":"https://jenkins.hyperledger.org/job/fabric-verify-integration-tests-x86_64/6641/consoleFull","username":"guoger","ts":"2019-03-04T13:56:36.724Z"}
{"msg":"this is part of backporting work","username":"guoger","ts":"2019-03-04T13:56:59.682Z"}
{"msg":"maybe some CR is missing, which prevents probe from failing fast?","username":"guoger","ts":"2019-03-04T13:57:29.317Z"}
{"msg":"I don't understand why you think the 7 seconds is bad.","username":"yacovm","ts":"2019-03-04T14:11:19.383Z"}
{"msg":"OK there is a 7 seconds delay, but why is that a problem?","username":"yacovm","ts":"2019-03-04T14:11:29.329Z"}
{"msg":"the failure is not due to this","username":"yacovm","ts":"2019-03-04T14:11:36.755Z"}
{"msg":"it's due to the process not starting fast enough:\n```\n\n13:40:47   Timed out after 1.000s.\n13:40:47   Expected\n13:40:47       <<-chan struct {} | len:0, cap:0>: 0xc0017b5920\n```","username":"yacovm","ts":"2019-03-04T14:12:07.411Z"}
{"msg":"i'm not saying 7 sec timeout is bad.... trying to figure why that test fails","username":"guoger","ts":"2019-03-04T14:12:33.037Z"}
{"msg":"ah ok","username":"yacovm","ts":"2019-03-04T14:12:43.124Z"}
{"msg":"so i think the test fails because the OSN hasn't started in time","username":"yacovm","ts":"2019-03-04T14:12:52.805Z"}
{"msg":"the process, that is","username":"yacovm","ts":"2019-03-04T14:12:57.880Z"}
{"msg":"and the process does not start fast enough because it got `context deadline exceeded` while probing <4>","username":"guoger","ts":"2019-03-04T14:13:03.920Z"}
{"msg":"even though <4> is not started. and i expect it to be `connection refused` though","username":"guoger","ts":"2019-03-04T14:13:23.040Z"}
{"msg":"i don't think that's it... why do you think it's related?","username":"yacovm","ts":"2019-03-04T14:13:23.110Z"}
{"msg":"because logs suggests 7 sec delay in starting orderer, which is apparently greater than 1 sec","username":"guoger","ts":"2019-03-04T14:14:02.952Z"}
{"msg":"but the 1 second is for the process to start, no?","username":"yacovm","ts":"2019-03-04T14:14:23.576Z"}
{"msg":"it's not like the `Ifrit` understands onboarding","username":"yacovm","ts":"2019-03-04T14:14:52.720Z"}
{"msg":":thinking_face: ","username":"yacovm","ts":"2019-03-04T14:15:20.403Z"}
{"msg":"process fulfills `StartCheck` when it says `Beginning to serve requests`","username":"guoger","ts":"2019-03-04T14:15:44.520Z"}
{"msg":"which is after the probing, no>?","username":"guoger","ts":"2019-03-04T14:15:54.669Z"}
{"msg":"oh i didn't know that","username":"yacovm","ts":"2019-03-04T14:16:06.815Z"}
{"msg":"```\n\tconfig := ginkgomon.Config{\n\t\tAnsiColorCode:     n.nextColor(),\n\t\tName:              o.ID(),\n\t\tCommand:           cmd,\n\t\tStartCheck:        \"Beginning to serve requests\",\n\t\tStartCheckTimeout: 15 * time.Second,\n\t}\n```","username":"guoger","ts":"2019-03-04T14:16:25.996Z"}
{"msg":"ok then that's the problem....","username":"yacovm","ts":"2019-03-04T14:16:45.236Z"}
{"msg":"we shouldn't have this at all","username":"yacovm","ts":"2019-03-04T14:16:52.975Z"}
{"msg":"it should be something else","username":"yacovm","ts":"2019-03-04T14:17:03.811Z"}
{"msg":"but how does it not fail in master?","username":"yacovm","ts":"2019-03-04T14:17:07.916Z"}
{"msg":"exactly","username":"guoger","ts":"2019-03-04T14:17:12.039Z"}
{"msg":"was there a CR that does something like `skip retry if connection is refused`?","username":"guoger","ts":"2019-03-04T14:17:50.881Z"}
{"msg":"there is, not not at startup ;) ","username":"yacovm","ts":"2019-03-04T14:18:21.434Z"}
{"msg":"only in dynamic onboarding","username":"yacovm","ts":"2019-03-04T14:18:26.749Z"}
{"msg":"and the problem here is that you connect to 4 OSNs","username":"yacovm","ts":"2019-03-04T14:18:56.176Z"}
{"msg":"but 1 of them is offline","username":"yacovm","ts":"2019-03-04T14:19:00.844Z"}
{"msg":"so you can only return when the timeout expires","username":"yacovm","ts":"2019-03-04T14:19:07.294Z"}
{"msg":"it's a scatter-gather pattern ","username":"yacovm","ts":"2019-03-04T14:19:16.768Z"}
{"msg":"but in any case we should not use `Beginning to serve requests` for that","username":"yacovm","ts":"2019-03-04T14:19:36.179Z"}
{"msg":"i think we are talking past each other... on `master`, `probe` to <4> fails and returns instantly with `connection refused`, however on 1.4.1 backporting, it waits for 7 sec timeout..","username":"guoger","ts":"2019-03-04T14:22:39.626Z"}
{"msg":"oh, i see.... this is odd. very odd","username":"yacovm","ts":"2019-03-04T14:32:09.613Z"}
{"msg":"the failure seems pretty consistent ","username":"C0rWin","ts":"2019-03-04T14:53:42.795Z"}
{"msg":"`14:40:45 [Fail] EndToEnd reconfiguration and onboarding when an orderer node is joined [It] isn't influenced by outdated orderers `","username":"C0rWin","ts":"2019-03-04T14:53:45.841Z"}
{"msg":"https://jenkins.hyperledger.org/job/fabric-verify-integration-tests-x86_64/6678/console","username":"C0rWin","ts":"2019-03-04T14:53:52.561Z"}
{"msg":"@yacovm @guoger can you take a look the commits stack to see if something if missing or committed out of natural order?","username":"C0rWin","ts":"2019-03-04T14:54:21.775Z"}
{"msg":"i will try","username":"yacovm","ts":"2019-03-04T14:54:49.923Z"}
{"msg":"i'll look into this tomorrow morning as well, in case yacov's schedule is packed. @C0rWin ","username":"guoger","ts":"2019-03-04T15:17:19.285Z"}
{"msg":"I looked and seems like my CRs are all in master :/ ","username":"yacovm","ts":"2019-03-04T16:00:26.392Z"}
{"msg":"I looked and seems like my CRs are all in v.1.4.1 :/ ","username":"yacovm","ts":"2019-03-04T16:00:26.392Z"}
{"msg":"https://gerrit.hyperledger.org/r/#/q/owner:bartem%2540il.ibm.com+status:open two last remaining CRs seems both of them hitting problem of integration tests described above","username":"C0rWin","ts":"2019-03-04T22:19:21.619Z"}
{"msg":" this is interesting... on both 1.4 and master branches, the OS returns that the port of the OSN is not listening. However - on v1.4, the gRPC client keeps retrying to dial until the timeout expires. On master- it fails fast. I ran wireshark, and on 1.4 there are 20 packets of SYN sent to the localhost, and on master there are only 7.... @mastersingh24 any idea why gRPC acts differently on v1.4 ?\nI also printed the dial timeout and it is 7 seconds in both master and v1.4 ","username":"yacovm","ts":"2019-03-04T23:46:42.792Z"}
{"msg":"specifically, like @guoger said:\non master we get the error: \n```\n[e][OrdererOrg.orderer1new] 2019-03-05 01:34:27.823 IST [orderer.common.cluster.replication] probeEndpoint -> WARN 026 Failed connecting to 127.0.0.1:36009: failed to create new connection: connection error: desc = \"transport: error while dialing: dial tcp 127.0.0.1:36009: connect: connection refused\"\n```\nwhile on v1.4 we get `probeEndpoint -> WARN 022 Failed connecting to 127.0.0.1:31009: failed to create new connection: context deadline exceeded`","username":"yacovm","ts":"2019-03-04T23:47:57.426Z"}
{"msg":"@C0rWin me and @mastersingh24 solved it :grin: ","username":"yacovm","ts":"2019-03-05T00:08:42.224Z"}
{"msg":"there is a change set https://gerrit.hyperledger.org/r/#/c/29808/ that changes gRPC behavior slightly ","username":"yacovm","ts":"2019-03-05T00:09:42.898Z"}
{"msg":"and the integration test passes now for me on v1.4","username":"yacovm","ts":"2019-03-05T00:09:56.160Z"}
{"msg":"","username":"yacovm","ts":"2019-03-05T00:11:58.160Z","attachments":[{"type":"file","title":"Clipboard - March 5, 2019 2:11 AM","title_link":"/file-upload/pshhLfrPm2SvzASYt/Clipboard%20-%20March%205,%202019%202:11%20AM","image_url":"/file-upload/pshhLfrPm2SvzASYt/Clipboard%20-%20March%205,%202019%202:11%20AM","image_type":"image/png","image_size":90858,"url":"/file-upload/pshhLfrPm2SvzASYt/Clipboard%20-%20March%205,%202019%202:11%20AM","remote":false,"fileId":"pshhLfrPm2SvzASYt","fileName":"Clipboard - March 5, 2019 2:11 AM"}]}
{"msg":"I placed the cherry picked CR beneath the rest of the stack and recursively rebased up to the top","username":"yacovm","ts":"2019-03-05T00:14:06.912Z"}
{"msg":"yayy","username":"guoger","ts":"2019-03-05T01:23:25.528Z"}
{"msg":"How does an outdated orderer get to know the certs and endpoints of newly added nodes? i.e.\nInitial state: <1, 2, 3, 4>\n- start <1, 2, 3> *only*\n- add <5>, start <5>\n- add <6>, start <6>\n- add <7>, start <7>\n- kill <1, 2, 3>\n- start <4>\nNow we have 4/7 nodes running however the cluster is out of service. The best we can do here, is to start at least one of <1, 2, 3>","username":"guoger","ts":"2019-03-05T01:57:01.923Z"}
{"msg":"@yacovm @kostas ","username":"guoger","ts":"2019-03-05T01:57:09.420Z"}
{"msg":"@guoger Could we treat this as a late join and simply start him using the latest config block from the system channel?","username":"jyellick","ts":"2019-03-05T02:31:10.460Z"}
{"msg":"@jyellick I think it should work.. will try to write an integration test to confirm","username":"guoger","ts":"2019-03-05T02:44:58.613Z"}
{"msg":"@guoger @yacovm I've heard a few different places that \"collocating peers and orderers is really bad\", which, I understand that if you have two processes involved in a loop of work, that it's generally a bad idea to stick them together if you're at all interested in scale.  But, is there some more severe reason why this is bad? Maybe something to do with fsync and block writes or something? Or am I just reading too much into this?","username":"jyellick","ts":"2019-03-05T03:32:52.805Z"}
{"msg":"@guoger @yacovm I've heard a few different places that \"collocating peers and orderers is really bad\", which, I understand that if you have two processes involved in a loop of work, that it's generally a bad idea to stick them together if you're at all interested in scale.  But, is there some more specifc reason why this is bad? Maybe something to do with fsync and block writes or something? Or am I just reading too much into this?","username":"jyellick","ts":"2019-03-05T03:32:52.805Z"}
{"msg":"Any reference? logically peer and orderer shouldn't interfere with each other when collocated. As for `fsync` in etcd/wal, there are some odd behavior on OSX, where kernel performs pretty bad at handling multiple `fsync` syscalls in parallel. Although I don't think fileledger actually uses the same syscall as etcd/wal (which may be a problem because bytes are not flushed, I've talked to Manish before and he perhaps will take a look there). But again, this is all on OSX","username":"guoger","ts":"2019-03-05T03:42:49.408Z"}
{"msg":"Any reference? logically peer and orderer shouldn't interfere with each other when collocated IMO. As for `fsync` in etcd/wal, there are some odd behavior on OSX, where kernel performs pretty bad at handling multiple `fsync` syscalls in parallel. Although I don't think fileledger actually uses the same syscall as etcd/wal (which may be a problem because bytes are not flushed, I've talked to Manish before and he perhaps will take a look there). But again, this is all on OSX","username":"guoger","ts":"2019-03-05T03:42:49.408Z"}
{"msg":"It stuck out to me as Yacov's suspicion for why SVT has been seeing problems in their environment, then it was highlighted again at the beginning of Joe's draft document.  Sounds like I am indeed reading more into this than there is.","username":"jyellick","ts":"2019-03-05T03:44:14.061Z"}
{"msg":"hmmm...\n```\nFor Raft, peers and orderers should not be co-located in the same virtual machine.\n```\nI don't know how this conclusion is reached actually","username":"guoger","ts":"2019-03-05T03:48:31.263Z"}
{"msg":"It did seem like it was trying to call out some very particular issue to me.","username":"jyellick","ts":"2019-03-05T03:49:08.481Z"}
{"msg":"It did seem like it was trying to call out some very particular issue to me. (Though ~For Raft~, peers and orderer should not be co-located in the same virtual machine reads reasonably to me)","username":"jyellick","ts":"2019-03-05T03:49:08.481Z"}
{"msg":"It did seem like it was trying to call out some very particular issue to me. (Though \"~For Raft~, peers and orderer should not be co-located in the same virtual machine reads reasonably to me\")","username":"jyellick","ts":"2019-03-05T03:49:08.481Z"}
{"msg":"It did seem like it was trying to call out some very particular issue to me. (Though:\n\n~For Raft~, peers and orderer should not be co-located in the same virtual machine\n\nreads reasonably to me)","username":"jyellick","ts":"2019-03-05T03:49:08.481Z"}
{"msg":"As far as raft is concerned, the performance bottleneck should be disk I/O (and that's by definition, because data must be persisted _before_ committed to state machine). therefore, all it matters is how fast can process write data entries to disk sequentially. However, I don't think this can cause contention between peer and orderer?","username":"guoger","ts":"2019-03-05T03:54:53.541Z"}
{"msg":"As far as raft is concerned, the performance bottleneck should be disk I/O (and that's by definition, because data must be persisted _before_ committed to state machine). therefore, all it matters is how fast can a process write data entries to disk sequentially. However, I don't think this can cause contention between peer and orderer?","username":"guoger","ts":"2019-03-05T03:54:53.541Z"}
{"msg":"Makes sense. Okay, great, thanks for the insight @guoger !","username":"jyellick","ts":"2019-03-05T04:01:30.335Z"}
{"msg":"@guoger look at the certificate rotation integration test.... It is what you describe","username":"yacovm","ts":"2019-03-05T06:30:44.341Z"}
{"msg":"@guoger look at the certificate rotation integration test.... It is what you describe","username":"yacovm","ts":"2019-03-05T06:30:45.341Z"}
{"msg":"@jyellick dont colocate because peers committing blocks to different channels in parallel and in independant times to the disk, will kill the WAL I/O ","username":"yacovm","ts":"2019-03-05T06:44:57.249Z"}
{"msg":"What's the procedure now for new CRs? Do we implement on master and also cherry-pick to v1.4?","username":"adarshsaraf123","ts":"2019-03-05T07:08:20.132Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=6855f791-4ada-4aff-b3b2-21ab079ef4d7) @yacovm this?\n```\n\tWhen(\"the orderer certificates are all rotated\", func() {\n\t\tIt(\"is still possible to onboard new orderers\", func() {\n```","username":"guoger","ts":"2019-03-05T07:12:57.336Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=6855f791-4ada-4aff-b3b2-21ab079ef4d7","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=6855f791-4ada-4aff-b3b2-21ab079ef4d7","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@yacovm The test you referred to is not what i described. could you take a look here https://gerrit.hyperledger.org/r/c/29812/ ? I expect that integration test to pass, but it doesn't :( ","username":"guoger","ts":"2019-03-05T08:02:33.100Z"}
{"msg":"Has left the channel.","username":"sergefdrv","ts":"2019-03-05T09:44:32.520Z","type":"ul"}
{"msg":"no... it's nto that","username":"yacovm","ts":"2019-03-05T10:19:47.361Z"}
{"msg":"```\n\n\tWhen(\"the orderer certificates are all rotated\", func() {\nIt(\"is still possible to onboard new orderers\", func() {\n```","username":"yacovm","ts":"2019-03-05T10:20:20.400Z"}
{"msg":"@guoger ","username":"yacovm","ts":"2019-03-05T10:20:21.736Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=AhDKeabn9Ceev7hQu) @adarshsaraf123 yes","username":"C0rWin","ts":"2019-03-05T11:18:20.806Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=AhDKeabn9Ceev7hQu","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=AhDKeabn9Ceev7hQu","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@guoger I noticed some of your recently merged CRs are not in release-1.4... please cherry pick all your CRs to release-1.4. ","username":"dave.enyeart","ts":"2019-03-05T14:50:15.370Z"}
{"msg":"@guoger I noticed some of your recently merged CRs are not in release-1.4... please cherry pick all your Raft CRs to release-1.4. ","username":"dave.enyeart","ts":"2019-03-05T14:50:15.370Z"}
{"msg":"@dave.enyeart gotcha, doing it now. btw, i suppose we should wait for CRs on master to be merged before cherry-picking, is it correct?","username":"guoger","ts":"2019-03-05T14:51:16.660Z"}
{"msg":"doesn't necessarily have to be merged yet... but yes it is better to wait until a CR goes through review cycles, otherwise you create more work for yourself and cause some confusion about which CR people should review","username":"dave.enyeart","ts":"2019-03-05T14:53:07.380Z"}
{"msg":"typically we push initial CR to master, then cherry pick to release-1.4.","username":"dave.enyeart","ts":"2019-03-05T14:53:37.738Z"}
{"msg":"however with the time pressure with raft on release v1.4.1, we may soon flip that approach - create CRs in release-1.4 then cherry pick to master. wait for an announcement from Jason on that...","username":"dave.enyeart","ts":"2019-03-05T14:54:32.169Z"}
{"msg":"if you haven't cherry picked many... know that for most you can simply click Cherry Pick button in gerrit...that's the easiest way","username":"dave.enyeart","ts":"2019-03-05T14:55:00.385Z"}
{"msg":"wait wait hold on please... if we merge change sets into v1.4 in a different order than master, it will cause problems ","username":"yacovm","ts":"2019-03-05T14:55:21.630Z"}
{"msg":"many times there are no dependencies right... in those cases order doesn't matter right","username":"dave.enyeart","ts":"2019-03-05T14:56:16.908Z"}
{"msg":"I think all changes these days are in the `chain.go` :) ","username":"yacovm","ts":"2019-03-05T14:57:19.353Z"}
{"msg":"Okay, so the procedure as I understand would be to work for the CR on master (until Jason announces otherwise) and once it gets merged cherry-pick it to v1.4.1","username":"adarshsaraf123","ts":"2019-03-05T15:12:10.371Z"}
{"msg":"Yep.  Let's go ahead and submit to master for now, and cherry-pick to release-1.4 on merge.","username":"jyellick","ts":"2019-03-05T15:21:01.842Z"}
{"msg":"@guoger https://gerrit.hyperledger.org/r/c/29735/ looks ready to merge and cherry-pick to release-1.4?","username":"jyellick","ts":"2019-03-05T15:30:14.079Z"}
{"msg":"@jyellick yep","username":"guoger","ts":"2019-03-05T15:31:03.989Z"}
{"msg":"Would you prefer to cherry-pick or would you rather I track these -- I'm fine either way","username":"jyellick","ts":"2019-03-05T15:33:18.278Z"}
{"msg":"Would you prefer to cherry-pick or would you rather I track these? -- I'm fine either way","username":"jyellick","ts":"2019-03-05T15:33:18.278Z"}
{"msg":"@jyellick although shouldn't we first cherry-pick CRs merged recently prior to this? I'm going through gerrit to click the button now","username":"guoger","ts":"2019-03-05T15:33:24.900Z"}
{"msg":"i can track it","username":"guoger","ts":"2019-03-05T15:33:27.141Z"}
{"msg":"Perfect","username":"jyellick","ts":"2019-03-05T15:33:38.487Z"}
{"msg":"but probably need some help at beginning... not familiar with cherry-picking process","username":"guoger","ts":"2019-03-05T15:34:22.220Z"}
{"msg":"Sure.  You may either use the the gerrit UI, or, you may use git on the CLI.  Personally I usually prefer to just use git, especially with stacked cherry-picks, but either should be fine","username":"jyellick","ts":"2019-03-05T15:35:32.357Z"}
{"msg":"If you want to use the UI, you can simply click 'more' -> 'cherry-pick' and specify 'release-1.4' as the destination branch","username":"jyellick","ts":"2019-03-05T15:36:14.172Z"}
{"msg":"If you'd rather use the more traditional git workflow, simply do a:\n\n```git fetch origin && git checkout origin/release-1.4\ngit cherry-pick <commit-id> # or use the download->cherry-pick link from gerrit\ngit push origin HEAD:refs/for/release-1.4\n```","username":"jyellick","ts":"2019-03-05T15:37:09.249Z"}
{"msg":"If you'd rather use the more traditional git workflow, simply do a:\n\n```git fetch origin && git checkout origin/release-1.4\ngit cherry-pick <commit-id> # or use the download->cherry-pick link from gerrit\n# repeat cherry-picks as desired\ngit push origin HEAD:refs/for/release-1.4\n```","username":"jyellick","ts":"2019-03-05T15:37:09.249Z"}
{"msg":"If you use the gerrit UI, in order to achieve the stacking, we'll either need to cherry-pick and merge one at a time, or use the UI to rebase into the desired order. (Or someone can correct me if there's a better way through the UI)","username":"jyellick","ts":"2019-03-05T15:38:19.930Z"}
{"msg":"Either way, let's coordinate here to try to get anything that's been merged into master and cherry-picked onto release-1.4 merged there asap","username":"jyellick","ts":"2019-03-05T15:42:31.229Z"}
{"msg":"question: should I cherry-pick Matt's protoutils changes, or revert my CRs to use old pkg on release-1.4?","username":"guoger","ts":"2019-03-05T15:54:05.962Z"}
{"msg":"i say - just change the v1.4 cherry pick to use the old sane utility code","username":"yacovm","ts":"2019-03-05T15:59:04.030Z"}
{"msg":"before the protobuf move","username":"yacovm","ts":"2019-03-05T15:59:23.931Z"}
{"msg":"+1 It seems simpler to use the old path than to attempt the move","username":"jyellick","ts":"2019-03-05T15:59:42.441Z"}
{"msg":"it is also safer","username":"yacovm","ts":"2019-03-05T16:00:02.824Z"}
{"msg":"now when i think about it.. who reviewed all these protobuf changes?","username":"yacovm","ts":"2019-03-05T16:00:22.306Z"}
{"msg":"Gari/Matt were the 2+2 on most of them","username":"jyellick","ts":"2019-03-05T16:01:20.427Z"}
{"msg":"yeah, we decided not to backport the proto changes to limit the number of file changes in release-1.4... so the cherry picks that depend on the new proto package may need some manual updates","username":"dave.enyeart","ts":"2019-03-05T16:22:34.630Z"}
{"msg":"I've gone ahead and +2-ed what's passed CI in @guoger's cherry-pick stack as well as the ones in the stack leading up to 'repair corrupted WAL'.  Obviously I'm still getting up to speed in this section of the code, so please do continue to review with rigor - I won't be at all offended to hear that I've +2-ed something dumb :slight_smile:","username":"jyellick","ts":"2019-03-06T05:29:09.655Z"}
{"msg":"Thanks!","username":"guoger","ts":"2019-03-06T05:43:40.239Z"}
{"msg":"@C0rWin @jyellick Another bookkeeping question: are we to create separate JIRAs for master and v1.4 or do we just comment the gerrit urls for the CRs related to both on the same JIRA?","username":"adarshsaraf123","ts":"2019-03-06T06:41:03.771Z"}
{"msg":"https://jira.hyperledger.org/browse/FAB-14499 @guoger @yacovm could one (or both) of you take a look at this one?","username":"jyellick","ts":"2019-03-07T04:48:42.476Z"}
{"msg":"It might be helpful too for both our SVT and for someone like me trying to come up to speed to document the sorts of things we'd look for for underlying cause.  I imagine overflowing queues for sends would be one.  What about WAL writes, do we log or otherwise profile how long these are taking? Any other serviceability stuff we should be adding to assist in debug?","username":"jyellick","ts":"2019-03-07T04:50:30.536Z"}
{"msg":"@jyellick To partly answer your question on serviceability, I am currently working on adding two additional metrics: (link to JIRA: https://jira.hyperledger.org/browse/FAB-14473)\n1. data_persist_duration: time taken for the etcdraft data to be persisted to storage (including the WAL writes)\n2. # proposals received\nI am almost done with the CR and am adding further tests before pushing the CR. ","username":"adarshsaraf123","ts":"2019-03-07T05:00:17.226Z"}
{"msg":"@jyellick To partly answer your question on serviceability, I am currently working on adding two new etcdraft metrics: (link to JIRA: https://jira.hyperledger.org/browse/FAB-14473)\n1. data_persist_duration: time taken for the etcdraft data to be persisted to storage (including the WAL writes)\n2. # proposals received\nI am almost done with the CR and am adding further tests before pushing the CR. ","username":"adarshsaraf123","ts":"2019-03-07T05:00:17.226Z"}
{"msg":"Ah, great! Thanks @adarshsaraf123 I imagine this would be very helpful in analyzing tests as we try to scale","username":"jyellick","ts":"2019-03-07T05:10:27.251Z"}
{"msg":"@jyellick also, as the code currently stands, if WAL sync takes more than 1 second, a warning is logged:\n```\nplog.Warningf(\"sync duration of %v, expected less than %v\", took, warnSyncDuration)\n```\nThis is from etcd/wal pkg and `warnSyncDuration` is hardcoded to 1 second","username":"guoger","ts":"2019-03-07T06:07:45.879Z"}
{"msg":"we can sometimes observe this warning within SVT. But i think it doesn't occur that often after they switch to faster disk in IKS.","username":"guoger","ts":"2019-03-07T06:08:45.848Z"}
{"msg":"@jyellick i took a look at the logs with DongMing from svt at FAB-14499 yesterday. Looks like OSN1 sends out heartbeat regularly, but those messages","username":"guoger","ts":"2019-03-07T06:10:21.959Z"}
{"msg":"@jyellick i took a look at the logs with DongMing from svt at FAB-14499 yesterday. Looks like OSN1 sends out heartbeat regularly, but those messages do not reach receiver sometimes","username":"guoger","ts":"2019-03-07T06:10:21.959Z"}
{"msg":"is it possible that this log doesn't necessarily indicate message being put on wire? @yacovm \n```\norderer3rd-ordererorg 2019-02-28 03:21:46.215 UTC [orderer.common.cluster.step] sendMessage -> DEBU 3a4d89f Send of ConsensusRequest for channel testorgschannel139 with payload of size 28 to orderer2nd-ordererorg.ordererorg(orderer2nd-ordererorg:7050) took 10.316µs \n```\nOtherwise, either the message is super delayed, or receiver receives it but somehow failed to log it timely? I'm referring to this:\n```\norderer3rd-ordererorg 2019-02-28 03:21:46.214 UTC [orderer.common.cluster.step] handleMessage -> DEBU 3a4d86f Received message from orderer2nd-ordererorg.ordererorg(172.30.181.167:43456): ConsensusRequest for channel testorgschannel139 with payload of size 28\n```","username":"guoger","ts":"2019-03-07T06:16:05.141Z"}
{"msg":"(ignore the timestamp. these two logs are just example)","username":"guoger","ts":"2019-03-07T06:16:29.861Z"}
{"msg":"Is that the 500 channels test Jay?","username":"yacovm","ts":"2019-03-07T07:13:57.025Z"}
{"msg":"@yacovm yes! the log is available in logDNA, which you should have access as well","username":"guoger","ts":"2019-03-07T08:33:48.425Z"}
{"msg":"then why do we even have debug logs? I said clearly we shouldn't have debug logs with 500 channels. it will kill the orderer's disk :( ","username":"yacovm","ts":"2019-03-07T08:44:02.167Z"}
{"msg":"https://github.com/hyperledger/fabric/blob/master/orderer/common/cluster/comm.go#L503-L524","username":"yacovm","ts":"2019-03-07T08:46:22.509Z"}
{"msg":"> s it possible that this log doesn't necessarily indicate message being put on wire?\nit indicates the message has been passed to the stream ","username":"yacovm","ts":"2019-03-07T08:46:42.516Z"}
{"msg":"> Otherwise, either the message is super delayed, or receiver receives it but somehow failed to log it timely? I'm referring to this:\nLook for WARNings of the stream being aborted. it can happen ","username":"yacovm","ts":"2019-03-07T08:47:17.942Z"}
{"msg":"> Otherwise, either the message is super delayed, or receiver receives it but somehow failed to log it timely? I'm referring to this:\nLook for WARNings of the stream being aborted. it can happen it sending a message takes more than 7 seconds. Then the stream is aborted","username":"yacovm","ts":"2019-03-07T08:47:17.942Z"}
{"msg":"@yacovm https://gerrit.hyperledger.org/r/c/29921/ here's the benchmark test that can be ran locally. Some parameters can be tuned\n```\n\t\tnumOfOrd = 5\n\t\tnumOfChannels = 10\n\t\ttxPerChannelPerOrd = 200\n\t\ttxSize = 1000 // bytes\n\t\tmaxMessageCount = 1\n```\n(haven't tried more than 10 channels yet, worried about my laptop :P )","username":"guoger","ts":"2019-03-07T09:23:37.303Z"}
{"msg":"But I do see leader failover sometimes","username":"guoger","ts":"2019-03-07T09:23:55.714Z"}
{"msg":"@guoger what is the throughput of the transactions?","username":"yacovm","ts":"2019-03-07T09:25:28.336Z"}
{"msg":"still wip, not measuring at the moment","username":"guoger","ts":"2019-03-07T09:27:36.987Z"}
{"msg":"to create 500 channels though, i need to use another way other than `nwo.CreateChannel`, so they it doesn't wait for a channel to boot and can submit next config tx to sys channel.","username":"guoger","ts":"2019-03-07T09:30:57.241Z"}
{"msg":"but for 10 channels, bootstrap time is still bearable","username":"guoger","ts":"2019-03-07T09:31:19.858Z"}
{"msg":"@guoger can you try your integration test with only 3 nodes?","username":"yacovm","ts":"2019-03-07T09:31:27.538Z"}
{"msg":"wondering if there will be a failover then","username":"yacovm","ts":"2019-03-07T09:31:37.649Z"}
{"msg":"sure. I'm trying various combinations of parameters now. Looking at the params mentioned above, let me know if any particular combination you are interested in","username":"guoger","ts":"2019-03-07T09:33:35.245Z"}
{"msg":"(also, when you have some cycles, you may also pull the CR and give it a try)","username":"guoger","ts":"2019-03-07T09:34:12.973Z"}
{"msg":"i will do it now","username":"yacovm","ts":"2019-03-07T09:35:08.989Z"}
{"msg":"updated it slightly to remove some noisy logs","username":"guoger","ts":"2019-03-07T09:51:28.304Z"}
{"msg":"i created ~50G garbage on disk already... not sure why `AfterEach` is not ran sometimes...","username":"guoger","ts":"2019-03-07T09:52:09.355Z"}
{"msg":"","username":"yacovm","ts":"2019-03-07T10:52:13.830Z","attachments":[{"type":"file","title":"Clipboard - March 7, 2019 12:52 PM","title_link":"/file-upload/WRZWAPqZt94r3Pt9w/Clipboard%20-%20March%207,%202019%2012:52%20PM","image_url":"/file-upload/WRZWAPqZt94r3Pt9w/Clipboard%20-%20March%207,%202019%2012:52%20PM","image_type":"image/png","image_size":43443,"url":"/file-upload/WRZWAPqZt94r3Pt9w/Clipboard%20-%20March%207,%202019%2012:52%20PM","remote":false,"fileId":"WRZWAPqZt94r3Pt9w","fileName":"Clipboard - March 7, 2019 12:52 PM"}]}
{"msg":"how am i supposed to run this, @guoger ?","username":"yacovm","ts":"2019-03-07T10:52:22.378Z"}
{"msg":"and seems like the test only takes 14 seconds....","username":"yacovm","ts":"2019-03-07T10:52:32.630Z"}
{"msg":"I do ginkgo in perf dir, and you can increase those params. Default values are fairly small","username":"guoger","ts":"2019-03-07T11:32:22.249Z"}
{"msg":"oh i see","username":"yacovm","ts":"2019-03-07T12:03:38.866Z"}
{"msg":"@yacovm we cannot allow adding *and* removing node at the same time, simply because etcd/raft doesn't support it. (This is also suggested by raft thesis, even though altering 1+ nodes is feasible, but not recommended due to complexity added). IMO we could document the restriction right now, and support this later by allow in-place rotating -- if you had <A, B, C> before, and want <B, C, D>, then it's a rotate request and we swap in the new cert and reconfigure comm. Is this possible from comm point of view?","username":"guoger","ts":"2019-03-07T13:51:43.550Z"}
{"msg":"this has nothing to do with the communication layer :joy:  ","username":"yacovm","ts":"2019-03-07T13:53:15.062Z"}
{"msg":"a single node cluster","username":"yacovm","ts":"2019-03-07T13:53:26.624Z"}
{"msg":"has nothing in the communication layer,","username":"yacovm","ts":"2019-03-07T13:53:32.523Z"}
{"msg":"i am pretty sure that Artem's code skips yourself when you configure comm","username":"yacovm","ts":"2019-03-07T13:53:45.169Z"}
{"msg":"if we allow in-place cert swapping, it also applies to multi-node, no?","username":"guoger","ts":"2019-03-07T13:53:53.039Z"}
{"msg":"Another thought, which I'm not necessarily advocating, but in general, to rotate the TLS cert, I expect the node will need to be restarted.  In a single node cluster, we could simply write a new config block to the chain before starting and the problem goes away.","username":"jyellick","ts":"2019-03-07T13:54:00.056Z"}
{"msg":"are you saying to write a config block without going through consensus ?","username":"yacovm","ts":"2019-03-07T13:54:23.669Z"}
{"msg":"In a single node network, it's arguable whether it's going through consensus or not","username":"jyellick","ts":"2019-03-07T13:54:50.746Z"}
{"msg":"but what about the replicated log?","username":"yacovm","ts":"2019-03-07T13:55:05.067Z"}
{"msg":"I guess it's not a problem though","username":"yacovm","ts":"2019-03-07T13:55:33.450Z"}
{"msg":"I know less there, but on a single node it seems fixable","username":"jyellick","ts":"2019-03-07T13:55:38.019Z"}
{"msg":"because the new node will onboard","username":"yacovm","ts":"2019-03-07T13:55:38.450Z"}
{"msg":"hence pull all the chains ","username":"yacovm","ts":"2019-03-07T13:55:43.351Z"}
{"msg":"I like your idea, Jason. ","username":"yacovm","ts":"2019-03-07T13:56:08.689Z"}
{"msg":"Thanks, again to be clear, I'm not necessarily advocating this approach, but thought it might be worth considering.","username":"jyellick","ts":"2019-03-07T13:56:29.870Z"}
{"msg":"@C0rWin what do you think?","username":"yacovm","ts":"2019-03-07T13:56:40.609Z"}
{"msg":"if we do in-place swap, we also make cert rotation simpler for multi-node, no?","username":"guoger","ts":"2019-03-07T13:58:15.878Z"}
{"msg":"what do you mean by in-place swap?","username":"yacovm","ts":"2019-03-07T13:59:29.038Z"}
{"msg":"all we want to do is to change a node to use cert_new, instead of cert_old, right? and this is stored in config block. (I may get this wrong and proposing a completely incorrect solution here)","username":"guoger","ts":"2019-03-07T14:00:38.855Z"}
{"msg":"currently, diff <A, B, C> vs <B, C, D> gives us [add 1, remove 1]","username":"guoger","ts":"2019-03-07T14:01:16.493Z"}
{"msg":"i'm proposing to change this to [swap 1]","username":"guoger","ts":"2019-03-07T14:01:26.520Z"}
{"msg":"but you said we don't allow it in etcdraft","username":"yacovm","ts":"2019-03-07T14:02:04.724Z"}
{"msg":"it's agnostic to raft in this case","username":"guoger","ts":"2019-03-07T14:02:15.766Z"}
{"msg":"we just reconfigure communication (for one node, it's no-op)","username":"guoger","ts":"2019-03-07T14:02:25.868Z"}
{"msg":"but we map IDs to certs using the metadata dont' we?","username":"yacovm","ts":"2019-03-07T14:02:30.610Z"}
{"msg":"yes, but why is that a problem?","username":"guoger","ts":"2019-03-07T14:03:14.252Z"}
{"msg":"so you are saying to just swap the metadata too","username":"yacovm","ts":"2019-03-07T14:03:56.741Z"}
{"msg":"swap the pointer in the metadata that points C to 3 with a pointer that maps D to 3","username":"yacovm","ts":"2019-03-07T14:04:13.744Z"}
{"msg":"yes","username":"guoger","ts":"2019-03-07T14:04:30.321Z"}
{"msg":"the comm configuration is not the problem here, as it configures itself from scratch every time","username":"yacovm","ts":"2019-03-07T14:04:43.982Z"}
{"msg":"in the new config block. (it's consented anyway)","username":"guoger","ts":"2019-03-07T14:04:52.245Z"}
{"msg":"you can pass the same IDs, random IDs, it doesn't care","username":"yacovm","ts":"2019-03-07T14:04:54.544Z"}
{"msg":"Seems like if we do not do 'swaps' we have another problem.  In a 3 node network, in order to add from 3->4 we now need 3/4 nodes available for consensus.  Which means that when we shut the 'doubled' node down, we lose consensus until he comes back up with the new cert.  Hopefully a small window, maybe it's fine.","username":"jyellick","ts":"2019-03-07T14:04:58.566Z"}
{"msg":"the problem here is the persistance in the metadata","username":"yacovm","ts":"2019-03-07T14:05:00.613Z"}
{"msg":"@jyellick yes that is known - if you lose a node forever during reconfiguration.... this is a problem. But I guess you can always recover it by running 2 nodes - 1 with the old cert and 1 with the new.","username":"yacovm","ts":"2019-03-07T14:06:34.815Z"}
{"msg":"when we submit a config tx with <B, C, D> (used to be <A, B, C>), we cut it into block with metadata [1:D, 2:B, 3:C]","username":"guoger","ts":"2019-03-07T14:07:20.322Z"}
{"msg":"if we create a an artificial config block and reboot chain with it, i suppose wal does not have knowledge of this \"special\" block?","username":"guoger","ts":"2019-03-07T14:08:44.097Z"}
{"msg":"if we have several nodes then how can you send a block without it being in the WAL?","username":"yacovm","ts":"2019-03-07T14:09:33.193Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=u27DkggybJ7LDcurN) @yacovm that's me question","username":"guoger","ts":"2019-03-07T14:10:47.632Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=u27DkggybJ7LDcurN","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=u27DkggybJ7LDcurN","remote":true,"fileId":null,"fileName":null}]}
{"msg":"why didn't we do swaps in the first place, does anyone remember? @kostas @guoger @C0rWin ","username":"yacovm","ts":"2019-03-07T14:12:15.955Z"}
{"msg":"swapping the config block file?","username":"guoger","ts":"2019-03-07T14:12:59.794Z"}
{"msg":"no, swapping the references in the metadata","username":"yacovm","ts":"2019-03-07T14:13:14.118Z"}
{"msg":"i.e - making the ID point to a different certificate","username":"yacovm","ts":"2019-03-07T14:13:26.868Z"}
{"msg":"and preserving the ID ","username":"yacovm","ts":"2019-03-07T14:13:29.983Z"}
{"msg":"i personally don't think it's a problem...","username":"guoger","ts":"2019-03-07T14:13:30.956Z"}
{"msg":"I am asking why we didn't do that in the first place","username":"yacovm","ts":"2019-03-07T14:13:41.989Z"}
{"msg":"cert rotating didn't occur to me until a later point (when you add that integration test)","username":"guoger","ts":"2019-03-07T14:13:51.137Z"}
{"msg":"I think we should consider supporting the swap ","username":"yacovm","ts":"2019-03-07T14:16:01.141Z"}
{"msg":"are we endangering v1.4.1 due to implementing it?","username":"yacovm","ts":"2019-03-07T14:16:36.936Z"}
{"msg":"no, it should be fairly simple","username":"guoger","ts":"2019-03-07T14:16:46.274Z"}
{"msg":"rebooting with an artificial config block is a bit more complicated I _think_, we need to insert that block into WAL, otherwise, if another late node started (or we add a new node), when it replicates wal data from leader, it'll miss this block","username":"guoger","ts":"2019-03-07T14:18:22.603Z"}
{"msg":"It will not miss the block","username":"yacovm","ts":"2019-03-07T14:18:59.537Z"}
{"msg":"It will onboard","username":"yacovm","ts":"2019-03-07T14:19:05.897Z"}
{"msg":"it may onboard with deliver","username":"guoger","ts":"2019-03-07T14:19:05.989Z"}
{"msg":"It has to","username":"yacovm","ts":"2019-03-07T14:19:55.124Z"}
{"msg":"@jyellick what do you say about we implement the swaps?","username":"yacovm","ts":"2019-03-07T14:20:14.055Z"}
{"msg":"but the problem is you cannot reliably relay wal to recover ledger","username":"guoger","ts":"2019-03-07T14:20:53.058Z"}
{"msg":"(which may not be a valid need, but i think we need to think about edge cases)","username":"guoger","ts":"2019-03-07T14:21:33.699Z"}
{"msg":"anyway, just throwing out ideas","username":"guoger","ts":"2019-03-07T14:22:17.117Z"}
{"msg":"> are we endangering v1.4.1 due to implementing it?\n@yacovm Though I agree this is a real operational problem, the inability to rotate certs on a single node cluster is not a stop-ship to me.  This is something we can address in v1.4.1 or v1.4.2","username":"jyellick","ts":"2019-03-07T14:37:03.004Z"}
{"msg":"I am more concerned about the temporary failure that locks your cluster","username":"yacovm","ts":"2019-03-07T14:37:26.663Z"}
{"msg":"which you pointed out and we knew it was an issue but said it's somehow tolerable","username":"yacovm","ts":"2019-03-07T14:37:44.349Z"}
{"msg":"why not we just say that if we have a config update that doesn't change the number of total consenters, *and* you have a change in a single certificate","username":"yacovm","ts":"2019-03-07T14:38:07.632Z"}
{"msg":"then you just re-map the IDs","username":"yacovm","ts":"2019-03-07T14:38:11.658Z"}
{"msg":"CRs merged on master are cherry-picked to 1.4 and ready for review @yacovm @jyellick @C0rWin ","username":"guoger","ts":"2019-03-07T14:38:29.391Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=JjcDyf2GqNR7Y78SF) @yacovm i think this is swapping? what's the diff?","username":"guoger","ts":"2019-03-07T14:39:00.776Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=JjcDyf2GqNR7Y78SF","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=JjcDyf2GqNR7Y78SF","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@guoger there is no diff","username":"yacovm","ts":"2019-03-07T14:39:50.068Z"}
{"msg":"i am re-stating the idea","username":"yacovm","ts":"2019-03-07T14:39:54.791Z"}
{"msg":"i could take on this if we decide to roll with it","username":"guoger","ts":"2019-03-07T14:40:42.507Z"}
{"msg":"I suggest we implement this now while we have time.... ","username":"yacovm","ts":"2019-03-07T14:41:35.177Z"}
{"msg":"@jyellick  @C0rWin ","username":"yacovm","ts":"2019-03-07T14:41:44.754Z"}
{"msg":"wdys?","username":"yacovm","ts":"2019-03-07T14:41:48.046Z"}
{"msg":"@guoger If we have time... great, are there any other known bugs/issues we are considering for v1.4?","username":"jyellick","ts":"2019-03-07T14:42:10.461Z"}
{"msg":"we can always revert","username":"yacovm","ts":"2019-03-07T14:42:15.410Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=XeFgAny5zTM7rnNEC) @yacovm are you referring to Jason's previous message?: `In a 3 node network, in order to add from 3->4 we now need 3/4 nodes available for consensus.`","username":"guoger","ts":"2019-03-07T14:42:28.493Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=XeFgAny5zTM7rnNEC","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=XeFgAny5zTM7rnNEC","remote":true,"fileId":null,"fileName":null}]}
{"msg":"yes","username":"yacovm","ts":"2019-03-07T14:42:33.246Z"}
{"msg":"Do we have a rough size on the amount of work required for 'swapping' certs?","username":"jyellick","ts":"2019-03-07T14:45:11.862Z"}
{"msg":"I think an upper bound is like 20 LOC in prod","username":"yacovm","ts":"2019-03-07T14:45:23.839Z"}
{"msg":"and an integration test in test ","username":"yacovm","ts":"2019-03-07T14:45:29.760Z"}
{"msg":"Sounds reasonable to me.  I'd agree, let's do our best to get this into v1.4","username":"jyellick","ts":"2019-03-07T14:46:00.565Z"}
{"msg":"Sounds reasonable to me.  I'd agree, let's do our best to get this into v1.4.0","username":"jyellick","ts":"2019-03-07T14:46:00.565Z"}
{"msg":"working on it now","username":"guoger","ts":"2019-03-07T14:46:08.031Z"}
{"msg":">  removing node at the same time, simply because etcd/raft doesn't support it.\nif we going to support the swap or single node certificate rotation there will be no need to reconfigure Raft FSM","username":"C0rWin","ts":"2019-03-07T15:06:01.892Z"}
{"msg":"wait I have a question - @jyellick @guoger ","username":"yacovm","ts":"2019-03-07T15:21:51.424Z"}
{"msg":"lets say we have a 3 node cluster with nodes `a`, `b`, `c` and we have 100 channels. We update the TLS certificate in 50 channels to swap `c` with `d` and suddenly, `a` crashes. ","username":"yacovm","ts":"2019-03-07T15:22:43.372Z"}
{"msg":"now in the first 50 channels we have only `b` and `d` in the config","username":"yacovm","ts":"2019-03-07T15:22:59.051Z"}
{"msg":"it means that we have to complete the process with the remaining 50 channels... right?","username":"yacovm","ts":"2019-03-07T15:23:45.301Z"}
{"msg":"there is no turning back now for `d` ","username":"yacovm","ts":"2019-03-07T15:23:54.275Z"}
{"msg":"I guess I need to document this thoroughly. ","username":"yacovm","ts":"2019-03-07T15:24:05.383Z"}
{"msg":"but - what happens if from some reason we cannot do the config update in the remaining  50 channels?","username":"yacovm","ts":"2019-03-07T15:25:06.839Z"}
{"msg":"this can happen, right? ","username":"yacovm","ts":"2019-03-07T15:25:39.907Z"}
{"msg":"if it happens then we cannot change our minds for the first 50 channels","username":"yacovm","ts":"2019-03-07T15:25:54.441Z"}
{"msg":"as we already changed ourselves to be a different certificate ","username":"yacovm","ts":"2019-03-07T15:26:21.597Z"}
{"msg":"I think that was the key concern behind doing it gradually and making only one step at a time","username":"C0rWin","ts":"2019-03-07T15:26:35.741Z"}
{"msg":"> this can happen, right?\n\neverything can happen, especially something which leads to existantial failures :)","username":"C0rWin","ts":"2019-03-07T15:27:51.354Z"}
{"msg":"> now in the first 50 channels we have only `b` and `d` in the config\nyou have one faulty node, and it's not really a `d` it's `c'` as you only replaced the certificate","username":"C0rWin","ts":"2019-03-07T15:30:08.432Z"}
{"msg":"> it means that we have to complete the process with the remaining 50 channels... right?\n\nbut that's you were doing at any rate, no? I mean you started it to replace the certificate at first place","username":"C0rWin","ts":"2019-03-07T15:30:48.888Z"}
{"msg":"what I'm not sure is how proposed swap operation should look like?","username":"C0rWin","ts":"2019-03-07T15:31:34.234Z"}
{"msg":"@guoger @yacovm @jyellick ?","username":"C0rWin","ts":"2019-03-07T15:31:45.700Z"}
{"msg":"suppose we going to replaced certificate for node `c`","username":"C0rWin","ts":"2019-03-07T15:32:24.619Z"}
{"msg":"the config update proposed where for `c` there is a new certificate","username":"C0rWin","ts":"2019-03-07T15:32:55.823Z"}
{"msg":"we can detect it and to the swap, update the metadata, reconfigure comm layer got `a` and `b`","username":"C0rWin","ts":"2019-03-07T15:33:45.235Z"}
{"msg":"this is accurate:\n> if we going to support the swap or single node certificate rotation there will be no need to reconfigure Raft FSM","username":"guoger","ts":"2019-03-07T15:34:01.932Z"}
{"msg":"I guess we need to restart `c` next?","username":"C0rWin","ts":"2019-03-07T15:34:02.759Z"}
{"msg":"but back to @yacovm example","username":"C0rWin","ts":"2019-03-07T15:34:23.291Z"}
{"msg":"if a goes out of service","username":"C0rWin","ts":"2019-03-07T15:34:33.985Z"}
{"msg":"if `a` goes out of service","username":"C0rWin","ts":"2019-03-07T15:34:33.985Z"}
{"msg":"the first batch of 50 channel have lost the quorum, no?","username":"C0rWin","ts":"2019-03-07T15:34:46.762Z"}
{"msg":":/","username":"C0rWin","ts":"2019-03-07T15:34:48.299Z"}
{"msg":"I added this to the administration doc: ","username":"yacovm","ts":"2019-03-07T15:36:12.921Z"}
{"msg":"","username":"yacovm","ts":"2019-03-07T15:36:17.239Z","attachments":[{"type":"file","title":"Clipboard - March 7, 2019 5:36 PM","title_link":"/file-upload/MokaxBtoQwuaTfwoe/Clipboard%20-%20March%207,%202019%205:36%20PM","image_url":"/file-upload/MokaxBtoQwuaTfwoe/Clipboard%20-%20March%207,%202019%205:36%20PM","image_type":"image/png","image_size":28519,"url":"/file-upload/MokaxBtoQwuaTfwoe/Clipboard%20-%20March%207,%202019%205:36%20PM","remote":false,"fileId":"MokaxBtoQwuaTfwoe","fileName":"Clipboard - March 7, 2019 5:36 PM"}]}
{"msg":"`as fast as possible` :joy: ","username":"C0rWin","ts":"2019-03-07T15:36:41.360Z"}
{"msg":"I can implement multiple TLS certificate support though... ","username":"yacovm","ts":"2019-03-07T15:36:50.395Z"}
{"msg":"that you also use certificate `c` and `c'`","username":"yacovm","ts":"2019-03-07T15:37:02.351Z"}
{"msg":"> I can implement multiple TLS certificate support though...\n\none node will have several connections per certificate?","username":"C0rWin","ts":"2019-03-07T15:37:16.731Z"}
{"msg":"but it is not clear how to integrate it with the same 7050 listener ","username":"yacovm","ts":"2019-03-07T15:37:23.222Z"}
{"msg":"yeah","username":"C0rWin","ts":"2019-03-07T15:37:30.847Z"}
{"msg":"> one node will have several connections per certificate? \nno. when you get a TLS client hello, you respond with a TLS server hello with the specified cert","username":"yacovm","ts":"2019-03-07T15:37:40.120Z"}
{"msg":"it's supported in recent versions of golang TLS","username":"yacovm","ts":"2019-03-07T15:37:49.470Z"}
{"msg":"(god bless, no bugs\n)","username":"yacovm","ts":"2019-03-07T15:37:54.814Z"}
{"msg":"(god bless, no bugs)","username":"yacovm","ts":"2019-03-07T15:37:54.814Z"}
{"msg":"I think we need to have it","username":"C0rWin","ts":"2019-03-07T15:38:18.358Z"}
{"msg":"we can only have it for the separate listener ","username":"yacovm","ts":"2019-03-07T15:38:29.584Z"}
{"msg":"since otherwise in your scenrario it's not clear how to finish certificate update in presence of single failure ","username":"C0rWin","ts":"2019-03-07T15:38:46.897Z"}
{"msg":"I think we have bigger problems now at the moment, though you obviously agree ","username":"yacovm","ts":"2019-03-07T15:38:59.434Z"}
{"msg":"> we can only have it for the separate listener\n\n \n:(","username":"C0rWin","ts":"2019-03-07T15:39:01.683Z"}
{"msg":"Just to make sure i understand you correctly, the scenario you described is:\n- we have node 1, 2, 3 with certs <A, B, C>\n- we want to swap C with D\n- node 1 and 2 commit the change and reconfigure the comm, although 3 hasn't yet\n- node 1 crashes\n- now we have 2 with <A, B, D> and 3 with <A, B, C>, and basically 2 and 3 are not able to communicate with each other?","username":"guoger","ts":"2019-03-07T15:41:41.729Z"}
{"msg":"no no","username":"yacovm","ts":"2019-03-07T15:42:02.829Z"}
{"msg":"the problem is the channels","username":"yacovm","ts":"2019-03-07T15:42:06.762Z"}
{"msg":"you might get stuck at channel config update because some admin is, say - not cooperating, or jut went to lunch and never came back","username":"yacovm","ts":"2019-03-07T15:42:27.716Z"}
{"msg":"you rotated 50 channels","username":"yacovm","ts":"2019-03-07T15:42:39.413Z"}
{"msg":"but the remaining 50 - you need that admin","username":"yacovm","ts":"2019-03-07T15:42:46.377Z"}
{"msg":"now node 1 crashes. you have to bring node 3 to a consistent state in all channels - either have it have C, or D in all channels","username":"yacovm","ts":"2019-03-07T15:43:17.696Z"}
{"msg":"but you can't change it back in the remaining 50 even if the admin of these 50 is there, because you just rotated yourself in these 50 channels. \nif you restart, you lose the upper half of the 50 channels","username":"yacovm","ts":"2019-03-07T15:44:23.963Z"}
{"msg":"but you can't change it back in the remaining 50 even if the admin of these 50 is there, because you just rotated yourself in these 50 channels. \nif you restart as D, you lose the upper half of the 50 channels","username":"yacovm","ts":"2019-03-07T15:44:23.963Z"}
{"msg":"because you're still C in them","username":"yacovm","ts":"2019-03-07T15:44:40.511Z"}
{"msg":"and 1 is gone now","username":"yacovm","ts":"2019-03-07T15:44:44.247Z"}
{"msg":"i guess you can restart as D","username":"yacovm","ts":"2019-03-07T15:45:13.241Z"}
{"msg":"migrate back to C","username":"yacovm","ts":"2019-03-07T15:45:16.573Z"}
{"msg":"in the first 50 channels","username":"yacovm","ts":"2019-03-07T15:45:20.392Z"}
{"msg":"and then wait for the admin to come back from lunch?","username":"yacovm","ts":"2019-03-07T15:45:29.956Z"}
{"msg":"added: ","username":"yacovm","ts":"2019-03-07T15:48:14.589Z"}
{"msg":"","username":"yacovm","ts":"2019-03-07T15:48:18.935Z","attachments":[{"type":"file","title":"Clipboard - March 7, 2019 5:48 PM","title_link":"/file-upload/8QKkssmN4AFyMnRm9/Clipboard%20-%20March%207,%202019%205:48%20PM","image_url":"/file-upload/8QKkssmN4AFyMnRm9/Clipboard%20-%20March%207,%202019%205:48%20PM","image_type":"image/png","image_size":17355,"url":"/file-upload/8QKkssmN4AFyMnRm9/Clipboard%20-%20March%207,%202019%205:48%20PM","remote":false,"fileId":"8QKkssmN4AFyMnRm9","fileName":"Clipboard - March 7, 2019 5:48 PM"}]}
{"msg":"So, for prod networks, seems like we should suggest 5+ nodes? That solves most of these problems, no?","username":"jyellick","ts":"2019-03-07T15:49:47.600Z"}
{"msg":"If your FT=1, then any maintenance takes your FT to 0.  So, it's not exactly a serviceable setup.","username":"jyellick","ts":"2019-03-07T15:50:31.908Z"}
{"msg":"yes but it costs $$","username":"yacovm","ts":"2019-03-07T15:50:34.174Z"}
{"msg":"Sure.... we should do our best to address it.","username":"jyellick","ts":"2019-03-07T15:50:42.193Z"}
{"msg":"I'm not sure","username":"yacovm","ts":"2019-03-07T15:51:08.898Z"}
{"msg":"Just saying, we cannot solve the fact that if F=1, and you take a  node down for maintenance, bad things can happen in the event of an additional failure.","username":"jyellick","ts":"2019-03-07T15:51:09.638Z"}
{"msg":"It's also perhaps not ideal, but we could also suggest that you simply provision a new OSN and sunset the old in order to do cert rotation.","username":"jyellick","ts":"2019-03-07T15:52:22.359Z"}
{"msg":"IE, do not do it in place, add and remove.","username":"jyellick","ts":"2019-03-07T15:52:28.530Z"}
{"msg":"you can't provision the new OSN if you lost a quorum ","username":"yacovm","ts":"2019-03-07T15:52:47.030Z"}
{"msg":"Right... I'm suggesting you actually expand the network to n+1 first.","username":"jyellick","ts":"2019-03-07T15:53:06.805Z"}
{"msg":"oh","username":"yacovm","ts":"2019-03-07T15:53:12.071Z"}
{"msg":"that is terribly expensive","username":"yacovm","ts":"2019-03-07T15:53:20.060Z"}
{"msg":"The whole point of these k8s services is supposed to be elasticity.","username":"jyellick","ts":"2019-03-07T15:53:20.819Z"}
{"msg":"it means you need to pull gigabytes of data","username":"yacovm","ts":"2019-03-07T15:53:29.049Z"}
{"msg":"just to do that","username":"yacovm","ts":"2019-03-07T15:53:32.593Z"}
{"msg":"hey look at the bright side.... at least you don't have kafka and zookeeper anymore right?","username":"yacovm","ts":"2019-03-07T15:54:13.490Z"}
{"msg":"I guess I don't know what the exact costs are here... maybe I could take this to the platform guys and get their take.","username":"jyellick","ts":"2019-03-07T15:54:31.081Z"}
{"msg":"We're not the first CFT service to have to deal with rolling upgrades, I'm sure there are best practices.","username":"jyellick","ts":"2019-03-07T15:55:06.694Z"}
{"msg":"putting a blockchain and security always complicates things","username":"yacovm","ts":"2019-03-07T15:55:25.925Z"}
{"msg":"Sure... but we're still only CFT, I'd say it's worth checking.","username":"jyellick","ts":"2019-03-07T15:55:52.403Z"}
{"msg":"@yacovm so.. what i was describing was another actual problem i guess? (which also can be mitigated by having 5 nodes)","username":"guoger","ts":"2019-03-07T15:57:19.840Z"}
{"msg":"@guoger no, it will be solved magically","username":"yacovm","ts":"2019-03-07T15:58:21.896Z"}
{"msg":"if the block has been cut","username":"yacovm","ts":"2019-03-07T15:58:43.143Z"}
{"msg":"then it means that it was consented on","username":"yacovm","ts":"2019-03-07T15:58:52.031Z"}
{"msg":"if node 1 crashes","username":"yacovm","ts":"2019-03-07T15:59:11.782Z"}
{"msg":"then it means node 3 cannot crash","username":"yacovm","ts":"2019-03-07T15:59:17.722Z"}
{"msg":"right?","username":"yacovm","ts":"2019-03-07T15:59:21.638Z"}
{"msg":"so it must have received the block, no?","username":"yacovm","ts":"2019-03-07T15:59:38.059Z"}
{"msg":"it does not crash, but may not get the config block that rotates cert","username":"guoger","ts":"2019-03-07T15:59:38.078Z"}
{"msg":"you're saying that the leader (node 2) stops speaking to it?","username":"yacovm","ts":"2019-03-07T15:59:51.146Z"}
{"msg":"this is when 1 was leader","username":"guoger","ts":"2019-03-07T16:00:04.176Z"}
{"msg":"hmmm i see what you mean. ","username":"yacovm","ts":"2019-03-07T16:00:26.553Z"}
{"msg":"and since 2 and 3 cannot talk to each other after `configureComm`, no leader can be elected","username":"guoger","ts":"2019-03-07T16:00:28.879Z"}
{"msg":"yeah, it's another problem","username":"yacovm","ts":"2019-03-07T16:00:50.680Z"}
{"msg":"but anyway, we know there are problems with rotating certs while node is crashed, but I tend to agree with Jason that\n- there probably is best practice to solve this\n- having more nodes mitigate risks at higher cost, which is a tradeoff\n- we can say: \"admins, do your job while reconfiguring it!\"\n- and we try to solve this after 1.4.1","username":"guoger","ts":"2019-03-07T16:02:49.384Z"}
{"msg":"but anyway, we know there are problems with rotating certs while node is crashed, but I tend to agree with Jason that\n- there probably is best practice to solve this (or even rolling upgrade 101 :P\n- having more nodes mitigate risks at higher cost, which is a tradeoff\n- we can say: \"admins, do your job while reconfiguring it!\"\n- and we try to solve this after 1.4.1","username":"guoger","ts":"2019-03-07T16:02:49.384Z"}
{"msg":"I say we document this and just say they should really run 5 nodes to be bulletproof ","username":"yacovm","ts":"2019-03-07T16:03:30.944Z"}
{"msg":"","username":"adarshsaraf123","ts":"2019-03-07T16:14:51.446Z","attachments":[{"type":"file","title":"Screenshot 2019-03-07 at 9.43.58 PM.png","title_link":"/file-upload/LwJqZgf7eYGjmPuHv/Screenshot%202019-03-07%20at%209.43.58%20PM.png","image_url":"/file-upload/LwJqZgf7eYGjmPuHv/Screenshot%202019-03-07%20at%209.43.58%20PM.png","image_type":"image/png","image_size":133335,"url":"/file-upload/LwJqZgf7eYGjmPuHv/Screenshot%202019-03-07%20at%209.43.58%20PM.png","remote":false,"fileId":"LwJqZgf7eYGjmPuHv","fileName":"Screenshot 2019-03-07 at 9.43.58 PM.png"}]}
{"msg":"Is this a known intergration test flake?","username":"adarshsaraf123","ts":"2019-03-07T16:15:12.095Z"}
{"msg":"@guoger is it possible to Yield() the leadership in Raft ? ","username":"yacovm","ts":"2019-03-07T16:22:29.653Z"}
{"msg":"i mean, in the Raft node API","username":"yacovm","ts":"2019-03-07T16:22:35.877Z"}
{"msg":"I recall that yes?","username":"yacovm","ts":"2019-03-07T16:22:42.320Z"}
{"msg":"Transfer leadership? Yes","username":"guoger","ts":"2019-03-07T16:22:48.627Z"}
{"msg":"`TransferLeadership`","username":"yacovm","ts":"2019-03-07T16:23:10.133Z"}
{"msg":"yeah","username":"yacovm","ts":"2019-03-07T16:23:11.786Z"}
{"msg":"when we rotate the TLS cert of the leader it will make the nodes lose leadership","username":"yacovm","ts":"2019-03-07T16:23:28.437Z"}
{"msg":"I guess i can document it too","username":"yacovm","ts":"2019-03-07T16:23:33.091Z"}
{"msg":"but wondering if it is possible to solve it somehow. say the node that is the leader understands its cert is rotated","username":"yacovm","ts":"2019-03-07T16:24:17.957Z"}
{"msg":"so it can transfer leadership and reject the change","username":"yacovm","ts":"2019-03-07T16:24:28.639Z"}
{"msg":"this way you never rotate a leader's TLS cert","username":"yacovm","ts":"2019-03-07T16:24:43.732Z"}
{"msg":"right, and others should wait for leader change before reconfiguring comm, if they see that leader's cert is being rotated","username":"guoger","ts":"2019-03-07T16:36:37.909Z"}
{"msg":"right, and ~others~ all should wait for leader change before reconfiguring comm, if they see that leader's cert is being rotated","username":"guoger","ts":"2019-03-07T16:36:37.909Z"}
{"msg":"this is doable, but let's do incremental changes.","username":"guoger","ts":"2019-03-07T16:37:13.961Z"}
{"msg":"about to push the CR. have you created a JIRA for this already? @yacovm ","username":"guoger","ts":"2019-03-07T16:37:25.939Z"}
{"msg":"created one here https://jira.hyperledger.org/browse/FAB-14539, let me know if it's duplicate","username":"guoger","ts":"2019-03-07T16:41:36.625Z"}
{"msg":"and created https://jira.hyperledger.org/browse/FAB-14540 to track leader transfer","username":"guoger","ts":"2019-03-07T16:47:21.412Z"}
{"msg":"I’ll do that tomorrow though... should also be simple enough since we have the mechanism to block request and wait for a change","username":"guoger","ts":"2019-03-07T16:55:30.174Z"}
{"msg":" @C0rWin @guoger @jyellick @yacovm CR to add additional metrics for etcdraft: https://gerrit.hyperledger.org/r/#/c/29926/\nWould be good if we can have this merged soon so that it can also be cherry-picked to v1.4.1","username":"adarshsaraf123","ts":"2019-03-07T17:15:28.778Z"}
{"msg":" @C0rWin @guoger @jyellick @yacovm CR to add additional metrics for etcdraft: https://gerrit.hyperledger.org/r/#/c/29926/\nWould be good if we can have this reviewed soon so that it can also be cherry-picked to v1.4.1","username":"adarshsaraf123","ts":"2019-03-07T17:15:28.778Z"}
{"msg":"Has joined the channel.","username":"mauricio","ts":"2019-03-07T21:04:30.403Z","type":"uj"}
{"msg":"@yacovm is it possible to get _the node with longest connected time_ from communication? it is useful to decide whom to transfer leadership to. It's not urgent though, since this can be indirectly got from raft FSM using `RecentActive bool`. However, it's more accurate and appropriate to acquire such knowledge from communication layer IMO. If you think it's doable and adds value, i could create a JIRA in our backlog.","username":"guoger","ts":"2019-03-08T06:13:38.968Z"}
{"msg":"No it is not","username":"yacovm","ts":"2019-03-08T07:18:22.776Z"}
{"msg":"RecentActive sounds better to me","username":"yacovm","ts":"2019-03-08T07:20:12.769Z"}
{"msg":"@adarshsaraf123 if unit is second, it would still show float number, right? like 0.02sec, but not rounded to 0","username":"guoger","ts":"2019-03-08T10:11:10.779Z"}
{"msg":"true. ","username":"adarshsaraf123","ts":"2019-03-08T10:41:36.442Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=LxZ9uS54Xxnt96ZpG) @guoger Yes that's right. I am making the change to seconds/ ","username":"adarshsaraf123","ts":"2019-03-08T10:41:36.442Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=LxZ9uS54Xxnt96ZpG","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=LxZ9uS54Xxnt96ZpG","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Yes that's right. I am making the change to seconds.","username":"adarshsaraf123","ts":"2019-03-08T10:41:36.442Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=LxZ9uS54Xxnt96ZpG","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=LxZ9uS54Xxnt96ZpG","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wxxjpprzQ7ZsPWuRY) @yacovm or add a node before maintenance... it must be cheaper to add a node for a couple of days every few months then run 5 all year...","username":"tock","ts":"2019-03-08T12:43:27.391Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wxxjpprzQ7ZsPWuRY","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=wxxjpprzQ7ZsPWuRY","remote":true,"fileId":null,"fileName":null}]}
{"msg":"> it must be cheaper to add a node for a couple of days every few months then run 5 all year... \nI know ;) ","username":"yacovm","ts":"2019-03-08T13:54:30.811Z"}
{"msg":"i've seen this UT flake more frequently on 1.4 branch, is there a CR on master that should be cherry-picked for this? https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/10227/console","username":"guoger","ts":"2019-03-08T17:28:42.324Z"}
{"msg":"no","username":"yacovm","ts":"2019-03-08T17:32:20.131Z"}
{"msg":"A reminder to all for tomorrow morning's scrum, the US transitioned to daylight saving time over the weekend, so please confirm that your calendars match up with 8:15 EDT for the scrum.","username":"jyellick","ts":"2019-03-11T01:04:55.203Z"}
{"msg":"It looks to me like we are persisting the RaftMetadata in the block metadata with each block, am I reading this incorrectly? Won't this mean that we're storing a copy of all of the TLS certs in every block? Who would be the right person to talk to about our crash/stop recovery path?","username":"jyellick","ts":"2019-03-11T04:03:54.006Z"}
{"msg":"@jyellick yes we are persisting TLS certs in every block as part of block metadata","username":"guoger","ts":"2019-03-11T04:15:36.760Z"}
{"msg":"we can chat here so others can chime in. I'm also open to a call though, if you prefer","username":"guoger","ts":"2019-03-11T04:16:46.972Z"}
{"msg":"@guoger Chat works for me.  What is the rationale for putting the TLS certs into every block.  They can only change at the config block, no?","username":"jyellick","ts":"2019-03-11T04:28:18.016Z"}
{"msg":"yes they are *only* changed at config block. However, when a chainsupport is created, meta data is grabbed from *last block*, instead of *last config block*, [here](https://github.com/hyperledger/fabric/blob/70957926de5dbf1cae57747ae54161c693d95caa/orderer/common/multichannel/chainsupport.go#L45)","username":"guoger","ts":"2019-03-11T04:31:50.514Z"}
{"msg":"Correct, but there is also the `OrdererConfig` which gives the `ConsensusMetadata`","username":"jyellick","ts":"2019-03-11T04:32:24.938Z"}
{"msg":"(Which is from the last config block)","username":"jyellick","ts":"2019-03-11T04:32:45.366Z"}
{"msg":"In fact the code gets this value already, but prefers the metadata encoded in the block for some reason:\n\nhttps://github.com/hyperledger/fabric/blob/3c8160648875665d1a13e1309c201de6b2e5ead5/orderer/consensus/etcdraft/consenter.go#L133-L136\nhttps://github.com/hyperledger/fabric/blob/3c8160648875665d1a13e1309c201de6b2e5ead5/orderer/consensus/etcdraft/consenter.go#L154\nhttps://github.com/hyperledger/fabric/blob/3c8160648875665d1a13e1309c201de6b2e5ead5/orderer/consensus/etcdraft/consenter.go#L224-L243","username":"jyellick","ts":"2019-03-11T04:36:20.221Z"}
{"msg":"In fact the code gets this value already, but prefers the metadata encoded in the latest block for some reason:\n\nhttps://github.com/hyperledger/fabric/blob/3c8160648875665d1a13e1309c201de6b2e5ead5/orderer/consensus/etcdraft/consenter.go#L133-L136\nhttps://github.com/hyperledger/fabric/blob/3c8160648875665d1a13e1309c201de6b2e5ead5/orderer/consensus/etcdraft/consenter.go#L154\nhttps://github.com/hyperledger/fabric/blob/3c8160648875665d1a13e1309c201de6b2e5ead5/orderer/consensus/etcdraft/consenter.go#L224-L243","username":"jyellick","ts":"2019-03-11T04:36:20.221Z"}
{"msg":"I would expect that it's impossible for these two values to differ, am I missing something?","username":"jyellick","ts":"2019-03-11T04:37:42.564Z"}
{"msg":":thinking: that's looks correct to me. I think it's safe not to persist certs in normal blocks... @C0rWin am I missing anyting?","username":"guoger","ts":"2019-03-11T04:39:25.263Z"}
{"msg":":thinking: that's looks correct to me. I think it's safe not to persist certs in normal blocks... @C0rWin am I missing anything?","username":"guoger","ts":"2019-03-11T04:39:25.263Z"}
{"msg":"I would have expected perhaps the index and or term to be persisted in the block metadata.  I realize we have the WAL though, so perhaps that is unnecessary.","username":"jyellick","ts":"2019-03-11T04:41:15.592Z"}
{"msg":"we are persisting Raft index to avoid replay of blocks","username":"guoger","ts":"2019-03-11T04:41:56.917Z"}
{"msg":"Ah, that's right, I did see that being updated just before writing the block.","username":"jyellick","ts":"2019-03-11T04:42:43.300Z"}
{"msg":"I think persisting certs is not necessary. Is it performance you were concerned about? we could get @C0rWin to confirm and remove it","username":"guoger","ts":"2019-03-11T04:44:11.115Z"}
{"msg":"Partially performance, but actually the long term storage penalty worries me most.","username":"jyellick","ts":"2019-03-11T04:44:45.231Z"}
{"msg":"@jyellick `ConsensusMetadata` actually returns [user-defined metadata](https://github.com/hyperledger/fabric/blob/3c8160648875665d1a13e1309c201de6b2e5ead5/protos/orderer/etcdraft/configuration.proto#L14-L19), but we are persisting [RaftMetadata](https://github.com/hyperledger/fabric/blob/3c8160648875665d1a13e1309c201de6b2e5ead5/protos/orderer/etcdraft/configuration.proto#L41-L55) that helps us track the status of chain","username":"guoger","ts":"2019-03-11T05:14:08.580Z"}
{"msg":"we can still skip persisting certs to normal blocks. but we need to read RaftMetadata, instead of config metadata, from last config block. (and of course get the raft index from latest block)","username":"guoger","ts":"2019-03-11T05:15:37.015Z"}
{"msg":"we can still skip persisting certs to normal blocks. but we need to read RaftMetadata, instead of config metadata, from *last config block*. (and of course get the raft index from *last block*)","username":"guoger","ts":"2019-03-11T05:15:37.015Z"}
{"msg":"the main difference there is *config metadata* stores a list of certs w/o raft ID mapping, but *RaftMetadata* does","username":"guoger","ts":"2019-03-11T05:16:41.867Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=vKa25ifKMbLcP9kLn) @jyellick that was call made by @kostas at design time, obviously we should have store this only per config block only","username":"C0rWin","ts":"2019-03-11T08:28:49.856Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=vKa25ifKMbLcP9kLn","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=vKa25ifKMbLcP9kLn","remote":true,"fileId":null,"fileName":null}]}
{"msg":"btw why is\n```\n\n\n# Max Message Count: The maximum number of messages to permit in a\n# batch.  No block will contain more than this number of messages.\nMaxMessageCount: 10\n```\n\nset to 10? I think it should be a high value by default, like 500.","username":"yacovm","ts":"2019-03-11T08:29:53.261Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=nvaPBtmTZKeQcKnkj) @guoger we should be safe, but I'm sure there was some rational thinking behind the design, not sure if we can ask @kostas at this point in time, but I remember he gave me arguments why he decided this","username":"C0rWin","ts":"2019-03-11T08:30:54.942Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=nvaPBtmTZKeQcKnkj","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=nvaPBtmTZKeQcKnkj","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I think the reason was that we don't store the id mapping in the config, but we implicitly calculate them  ","username":"yacovm","ts":"2019-03-11T08:31:33.642Z"}
{"msg":"but we should've just stored hashes ","username":"yacovm","ts":"2019-03-11T08:31:39.588Z"}
{"msg":"if you have the last config block, you have the latest certs. ","username":"yacovm","ts":"2019-03-11T08:31:53.176Z"}
{"msg":"and if you just store hashes of the certs in the mapping, it reduces the size from 700 bytes to 32 bytes","username":"yacovm","ts":"2019-03-11T08:32:12.107Z"}
{"msg":"no-no, I remember the was something else behind it, let try to digg in the chat history ","username":"C0rWin","ts":"2019-03-11T08:32:22.189Z"}
{"msg":"no-no, I remember it was something else behind it, let try to digg in the chat history ","username":"C0rWin","ts":"2019-03-11T08:32:22.189Z"}
{"msg":"no-no, I remember it was something else behind it, let me try to digg in the chat history ","username":"C0rWin","ts":"2019-03-11T08:32:22.189Z"}
{"msg":"and btw, I think we need to refactor and re-name `ConsensusMetadata` and `RaftMetadata` as it raise a lot of confusion ","username":"C0rWin","ts":"2019-03-11T08:33:46.322Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=CqBnZZ7WQuWfC6DZP) @yacovm I agree. A quick fix to the storage issue would be to store the SHA256 of the certificate together with the node ID.","username":"tock","ts":"2019-03-11T10:59:11.514Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=CqBnZZ7WQuWfC6DZP","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=CqBnZZ7WQuWfC6DZP","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@yacovm are you familiar with this UT failure in cluster? https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/10280/console","username":"tock","ts":"2019-03-11T11:00:34.473Z"}
{"msg":"and another one: https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/10279/console","username":"tock","ts":"2019-03-11T11:02:14.334Z"}
{"msg":"I don’t get the idea of storing hash though. Why is it needed?","username":"guoger","ts":"2019-03-11T11:04:14.637Z"}
{"msg":"yes","username":"yacovm","ts":"2019-03-11T11:05:13.853Z"}
{"msg":"@tock ","username":"yacovm","ts":"2019-03-11T11:05:17.183Z"}
{"msg":"@guoger the hash is to store only 32 bytes instead of 700, per consenter node","username":"yacovm","ts":"2019-03-11T11:05:28.555Z"}
{"msg":"I mean why do we need to store something at all? If we can get consented mapping and certs from last config block","username":"guoger","ts":"2019-03-11T11:06:50.635Z"}
{"msg":"Consenter mapping","username":"guoger","ts":"2019-03-11T11:07:02.054Z"}
{"msg":"you don't get the IDs from the last block","username":"yacovm","ts":"2019-03-11T11:07:10.244Z"}
{"msg":"to compute the IDs you need all config blocks since ever","username":"yacovm","ts":"2019-03-11T11:07:21.353Z"}
{"msg":"Why not, it’s persisted in every block currently, no?","username":"guoger","ts":"2019-03-11T11:08:04.544Z"}
{"msg":"we are talking past each other","username":"yacovm","ts":"2019-03-11T11:09:01.709Z"}
{"msg":"you are saying we can get consenter mapping and certs from last config block","username":"yacovm","ts":"2019-03-11T11:09:36.041Z"}
{"msg":"but it is not what we do","username":"yacovm","ts":"2019-03-11T11:09:39.650Z"}
{"msg":"we don't store the IDs in the config","username":"yacovm","ts":"2019-03-11T11:09:44.080Z"}
{"msg":"Really? Isn’t it part of ordered metadata, where we have a map of ID to certs?","username":"guoger","ts":"2019-03-11T11:17:27.312Z"}
{"msg":"In config, we only have a slice","username":"guoger","ts":"2019-03-11T11:17:40.612Z"}
{"msg":"basically [this proto](https://github.com/hyperledger/fabric/blob/3c8160648875665d1a13e1309c201de6b2e5ead5/protos/orderer/etcdraft/configuration.proto#L44) is persisted in every block currently, and it does not change in normal blocks. so we should be able to get this just from last config block. unless @C0rWin can trace back to the reason behind this decision. what am i missing?","username":"guoger","ts":"2019-03-11T11:27:34.551Z"}
{"msg":"that's what I am saying... we are storing in the config block, the slices and not the mapping","username":"yacovm","ts":"2019-03-11T11:39:45.580Z"}
{"msg":"@guoger so basically the reason behind this decision is within `chainsupport.go` and the way we call `HandleChain` API","username":"C0rWin","ts":"2019-03-11T11:44:18.621Z"}
{"msg":"chainsupport is not consensus type aware","username":"C0rWin","ts":"2019-03-11T11:44:40.762Z"}
{"msg":"hence extracts metadata information to pass it to the `HandleChain` both for Kafka and Raft","username":"C0rWin","ts":"2019-03-11T11:45:10.909Z"}
{"msg":"in kafka it makes sense since in each block you keep offsets","username":"C0rWin","ts":"2019-03-11T11:45:28.983Z"}
{"msg":"while for Raft this could be optimized, but that mean we need to refactor chainsupport and extract metadata based on consensus type","username":"C0rWin","ts":"2019-03-11T11:46:09.169Z"}
{"msg":"or even better","username":"C0rWin","ts":"2019-03-11T11:46:12.992Z"}
{"msg":"each consenter should be able to retreive metadata itself w/o chainsupport doing job for them","username":"C0rWin","ts":"2019-03-11T11:46:38.806Z"}
{"msg":"since this line required some substential amount of refactoring, it was decided to continue with approach as proposed by @kostas in his design doc ","username":"C0rWin","ts":"2019-03-11T11:47:25.630Z"}
{"msg":"we can do this optimization, though I think it's a bit risky at this point in time","username":"C0rWin","ts":"2019-03-11T11:47:44.741Z"}
{"msg":"probably won't be able to make this improvement for v1.4.1 while we can do it for v2.0 and make a drop for v1.4.2 later","username":"C0rWin","ts":"2019-03-11T11:48:14.300Z"}
{"msg":"basically we can discuss it during the scrum today and decide whenever to contain and make this fix now","username":"C0rWin","ts":"2019-03-11T11:49:09.282Z"}
{"msg":"@jyellick @yacovm ^^^^","username":"C0rWin","ts":"2019-03-11T11:49:18.040Z"}
{"msg":"> that's what I am saying... we are storing in the config block, the slices and not the mapping\n\n@yacovm,  while this is true, we do store in block's metadata the mapping as well (same as we do for all blocks we are processing) ","username":"C0rWin","ts":"2019-03-11T11:52:32.250Z"}
{"msg":"yes, I am not saying we are not\n","username":"yacovm","ts":"2019-03-11T11:59:03.750Z"}
{"msg":"@guoger I have question on:\n```\n// Validate the config update for being of Type A or Type B as described in the design doc.\nfunc (c *Chain) checkConfigUpdateValidity(ctx *common.Envelope) error {\n...\t\t// Check that only the ConsensusType is updated in the write-set\n\t\tif ordererConfigGroup, ok := configUpdate.WriteSet.Groups[\"Orderer\"]; ok {\n\t\t\tif val, ok := ordererConfigGroup.Values[\"ConsensusType\"]; ok {\n\t\t\t\treturn c.checkConsentersSet(val)\n\t\t\t}\n\t\t}\n\t\treturn nil\n\n\tdefault:\n\t\treturn errors.Errorf(\"config transaction has unknown header type\")\n\t}\n}\n```","username":"tock","ts":"2019-03-11T13:20:36.851Z"}
{"msg":"@guoger I have question on:\n```\n// Validate the config update for being of Type A or Type B as described in the design doc.\nfunc (c *Chain) checkConfigUpdateValidity(ctx *common.Envelope) error {\n...\t\t// Check that only the ConsensusType is updated in the write-set\n\t\tif ordererConfigGroup, ok := configUpdate.WriteSet.Groups[\"Orderer\"]; ok {\n\t\t\tif val, ok := ordererConfigGroup.Values[\"ConsensusType\"]; ok {\n\t\t\t\treturn c.checkConsentersSet(val)\n\t\t\t}\n\t\t}\n\t\treturn nil\n...\n\t}\n}\n```\nThe check in there is not really doing what the comment is saying, right?","username":"tock","ts":"2019-03-11T13:20:36.851Z"}
{"msg":"@guoger I have a question on:\n```\n// Validate the config update for being of Type A or Type B as described in the design doc.\nfunc (c *Chain) checkConfigUpdateValidity(ctx *common.Envelope) error {\n...\t\t// Check that only the ConsensusType is updated in the write-set\n\t\tif ordererConfigGroup, ok := configUpdate.WriteSet.Groups[\"Orderer\"]; ok {\n\t\t\tif val, ok := ordererConfigGroup.Values[\"ConsensusType\"]; ok {\n\t\t\t\treturn c.checkConsentersSet(val)\n\t\t\t}\n\t\t}\n\t\treturn nil\n...\n\t}\n}\n```\nThe check in there is not really doing what the comment is saying, right?","username":"tock","ts":"2019-03-11T13:20:36.851Z"}
{"msg":"It is allowed to do additional config changes as well, correct? It just checking the `\"ConsensusType\"` portion of the config, right?","username":"tock","ts":"2019-03-11T13:22:57.331Z"}
{"msg":"It is allowed to do additional config changes as well, correct? It is just checking the `\"ConsensusType\"` portion of the config, right?","username":"tock","ts":"2019-03-11T13:22:57.331Z"}
{"msg":"right. ultimately this just checks the validity of type b config","username":"guoger","ts":"2019-03-11T13:25:25.465Z"}
{"msg":"so a better comment would probably say `Check only the ConsensusType update in the write-set` ","username":"tock","ts":"2019-03-11T13:26:23.017Z"}
{"msg":"(In addition Type A and Type B is a bit cryptic, I would change that to a clearer description...)","username":"tock","ts":"2019-03-11T13:27:26.104Z"}
{"msg":"I am looking at this part of the code because I am working on https://jira.hyperledger.org/browse/FAB-14052","username":"tock","ts":"2019-03-11T13:28:39.652Z"}
{"msg":"I've been looking more at this consensus metadata stuff.  Why don't we simply modify `etcdraft.RaftMetadata` to instead of contain a `map[raftID]TLSCert` to be a `[]raftIDs`.  We have a slice of consenters in the channel config which has an order which is preserved and modified only at config updates.  We also have a 1-1 correspondance between consenter and raftID, which also only changes on config update.  Seems simple to persist the raft ID for each consenter, by slice position.  It would be a very small code change and reduce the size of the mapping from n*(varint IDs  + TLSCerts) to n*(var-int encoded IDs.)","username":"jyellick","ts":"2019-03-11T13:58:51.856Z"}
{"msg":"you mean `[]uint64` right?","username":"yacovm","ts":"2019-03-11T14:00:13.920Z"}
{"msg":"Right","username":"jyellick","ts":"2019-03-11T14:00:21.483Z"}
{"msg":"it's possible","username":"yacovm","ts":"2019-03-11T14:00:26.577Z"}
{"msg":"we can also use gamma coding ","username":"yacovm","ts":"2019-03-11T14:01:31.772Z"}
{"msg":"it's more efficient ","username":"yacovm","ts":"2019-03-11T14:01:34.417Z"}
{"msg":"(just kidding)","username":"yacovm","ts":"2019-03-11T14:01:38.908Z"}
{"msg":"But I think this would be a pretty minimal change, and even more space efficient than hashes.  Probably sufficiently so that it wouldn't be worth changing the ChainSupport interface and we could contain this for v1.4.1.  In fact, I'll volunteer to do the work if we can agree on this approach.","username":"jyellick","ts":"2019-03-11T14:02:47.096Z"}
{"msg":"you mean that the index `i` in the metadata denotes the ID of the consenter in the `i`'th index in the consenter slice in the config, right?","username":"yacovm","ts":"2019-03-11T14:03:03.187Z"}
{"msg":"Yes","username":"jyellick","ts":"2019-03-11T14:03:08.457Z"}
{"msg":"I'm for it","username":"yacovm","ts":"2019-03-11T14:05:52.349Z"}
{"msg":"sounds reasonable ","username":"C0rWin","ts":"2019-03-11T14:06:00.405Z"}
{"msg":"do we still need other fields in this case?\n```\n    // Carries the Raft ID value that will be assigned\n    // to the next OSN that will join this cluster.\n    uint64 next_consenter_id = 2;\n    // Raft cluster configurations count\n    uint64 conf_change_counts = 3;\n```","username":"guoger","ts":"2019-03-11T14:21:47.456Z"}
{"msg":"i guess yes, right? (just to confirm here)","username":"guoger","ts":"2019-03-11T14:22:42.063Z"}
{"msg":"I think you definitely need the first","username":"tock","ts":"2019-03-11T14:23:15.477Z"}
{"msg":"I think you definitely need the `next_consenter_id`","username":"tock","ts":"2019-03-11T14:23:15.477Z"}
{"msg":"actually.. what's the purpose of `conf_change_counts`? i see it's being used as raft id? @C0rWin ","username":"guoger","ts":"2019-03-11T14:26:08.065Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=FJo972dAzbua2NiDo) @guoger it used for Raft config proposal ","username":"C0rWin","ts":"2019-03-11T14:27:17.466Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=FJo972dAzbua2NiDo","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=FJo972dAzbua2NiDo","remote":true,"fileId":null,"fileName":null}]}
{"msg":"To elaborate on `conf_change_counts` (and @C0rWin please correct me if I am wrong), i believe etcdraft requires every conf change proposal to have an id which we assign as `conf_change_counts`. ","username":"adarshsaraf123","ts":"2019-03-11T14:30:17.211Z"}
{"msg":"To elaborate on `conf_change_counts` (and @C0rWin please correct me if I am wrong), i believe etcdraft requires every conf change proposal to have an id which we assign as `conf_change_counts` (and it is not being used as raft id). ","username":"adarshsaraf123","ts":"2019-03-11T14:30:17.211Z"}
{"msg":"got it. we actually don't need it...","username":"guoger","ts":"2019-03-11T14:35:31.985Z"}
{"msg":"it's basically a unique ID generated so that etcd can keep track of a request","username":"guoger","ts":"2019-03-11T14:35:59.475Z"}
{"msg":"etcd does this:\n```\n\t// Register waits returns a chan that waits on the given ID.\n\t// The chan will be triggered when Trigger is called with\n\t// the same ID.\n```","username":"guoger","ts":"2019-03-11T14:36:25.179Z"}
{"msg":"we block incoming requests till this confchange is applied with our own mechanism (and we also make sure it is applied upon failover)","username":"guoger","ts":"2019-03-11T14:37:48.650Z"}
{"msg":"etcd/raft doesn't use this field","username":"guoger","ts":"2019-03-11T14:38:19.437Z"}
{"msg":"so are you saying we can get rid of this?","username":"C0rWin","ts":"2019-03-11T14:38:22.915Z"}
{"msg":"yep","username":"guoger","ts":"2019-03-11T14:38:28.666Z"}
{"msg":"@guoger do you mind to open a JIRA and I will take care of it?","username":"C0rWin","ts":"2019-03-11T14:41:21.198Z"}
{"msg":"sure","username":"guoger","ts":"2019-03-11T14:45:48.051Z"}
{"msg":"i delete references of this and UT passed at least","username":"guoger","ts":"2019-03-11T14:46:08.710Z"}
{"msg":"just completed the same, but making changes to the protos ","username":"C0rWin","ts":"2019-03-11T14:46:45.407Z"}
{"msg":"https://gerrit.hyperledger.org/r/#/c/29996/\nhttps://gerrit.hyperledger.org/r/#/c/29997/\n @jyellick @C0rWin ^ ","username":"yacovm","ts":"2019-03-11T16:00:24.222Z"}
{"msg":"```            MaxInflightMsgs: 5```","username":"jyellick","ts":"2019-03-11T16:12:01.839Z"}
{"msg":"@yacovm @guoger @C0rWin I thought we had discussed '10' here? I'm fine with 5... just want to make sure this was intentional.","username":"jyellick","ts":"2019-03-11T16:12:26.011Z"}
{"msg":"ah, so - the default egress queue size in the communication is 10 messages","username":"yacovm","ts":"2019-03-11T16:13:30.162Z"}
{"msg":"so i made it 5 to make it lower","username":"yacovm","ts":"2019-03-11T16:13:35.532Z"}
{"msg":"if it is 10 and we have 10 outgoing messages circulating","username":"yacovm","ts":"2019-03-11T16:13:50.069Z"}
{"msg":"they may all end up in our buffers right?","username":"yacovm","ts":"2019-03-11T16:13:58.996Z"}
{"msg":"Ah, makes sense","username":"jyellick","ts":"2019-03-11T16:14:27.987Z"}
{"msg":"@guoger (or anyone) I'm trying understand https://github.com/hyperledger/fabric/blob/3c8160648875665d1a13e1309c201de6b2e5ead5/orderer/consensus/etcdraft/chain.go#L966-L975 a little better","username":"jyellick","ts":"2019-03-11T18:26:04.667Z"}
{"msg":"We have a config block, we try to get the raft metadata out of it... but then sometimes the raft metadata can be nil?","username":"jyellick","ts":"2019-03-11T18:26:29.502Z"}
{"msg":"We have a config block, we try to get the metadata out of it... but then sometimes the metadata can be nil? But this is non-fatal and we keep going","username":"jyellick","ts":"2019-03-11T18:26:29.502Z"}
{"msg":"If so... then it looks like `changes` is nil, and then we dereference it","username":"jyellick","ts":"2019-03-11T18:27:38.596Z"}
{"msg":"If so... then it looks like `changes` is nil, and then we dereference it -- which I see is actually okay, we check and if so, do nothing","username":"jyellick","ts":"2019-03-11T18:27:38.596Z"}
{"msg":"@jyellick \n> We have a config block, we try to get the metadata out of it... but then sometimes the metadata can be nil?\nThe `metadata` can be `nil` since a config change may not update the consensus metadata. \nEven if the `metadata` is not `nil`, `changes` could still be `nil` since we may have updated the various `options` and not the `consenters`. \nThis block of code ensures that a node that is catching up reconfigures the communication layer if there have been any changes to the consenter set among the blocks it is catching up with. ","username":"adarshsaraf123","ts":"2019-03-11T19:05:01.928Z"}
{"msg":"@jyellick \n> We have a config block, we try to get the metadata out of it... but then sometimes the metadata can be nil?\nThe `metadata` can be `nil` since a config change may not update the consensus metadata. \nEven if the `metadata` is not `nil`, `changes` could still be `nil` since we may have updated the various `options` and not the `consenters`. \nThis block of code ensures that a node that is catching up figures out the need to reconfigure the communication layer owing to changes to the consenter set among the blocks it is catching up with. ","username":"adarshsaraf123","ts":"2019-03-11T19:05:01.928Z"}
{"msg":"Hope this helps. ","username":"adarshsaraf123","ts":"2019-03-11T19:06:50.391Z"}
{"msg":"I think it is the structure that is confusing to me.  I understand that not all config blocks affect the consensus details.","username":"jyellick","ts":"2019-03-11T19:10:45.838Z"}
{"msg":"However, I would expect that we would detect this early, and exit.","username":"jyellick","ts":"2019-03-11T19:11:03.985Z"}
{"msg":"I'm trying to understand why we would proceed through these other checks if for instance the metadata is nil.","username":"jyellick","ts":"2019-03-11T19:11:20.949Z"}
{"msg":"Ah okay. Agree with you :+1_tone4:  ","username":"adarshsaraf123","ts":"2019-03-11T19:15:06.900Z"}
{"msg":"```# MaxInflightMsgs limits the max number of in-flight append messages during optimistic replication phase.```\n\nIsn't this a bit disingenuous? Naively, I assumed heartbeat messages would count against this limit, as per spec, the are a type of 'append'.  It doesn't make sense to 'optimistically replicate' heartbeats though, so I understand why they would not count.  Still, if this number corresponds directly to the number of in flight blocks, wouldn't it be better to simply call it such?","username":"jyellick","ts":"2019-03-11T20:06:42.609Z"}
{"msg":"@jyellick this doesn't affect heartbeats ","username":"yacovm","ts":"2019-03-11T21:04:31.171Z"}
{"msg":"only blocks","username":"yacovm","ts":"2019-03-11T21:04:33.690Z"}
{"msg":"> if this number corresponds directly to the number of in flight blocks, wouldn't it be better to simply call it such? \nI really have no idea why it was called this way","username":"yacovm","ts":"2019-03-11T21:05:08.446Z"}
{"msg":"nor I knew what *disingenuous* meant ","username":"yacovm","ts":"2019-03-11T22:19:49.935Z"}
{"msg":"This is simply how etcdraft pkg calls it. We could certainly expose it with a different name. Raft Config messages are counted in this as well but that’s only one message at a time.","username":"guoger","ts":"2019-03-11T23:24:31.793Z"}
{"msg":"As well as other message types used internally by raft. So it only affects inflight blocks in most cases, but sometimes others as well","username":"guoger","ts":"2019-03-11T23:26:26.403Z"}
{"msg":"I do agree with renaming user facing option though ","username":"guoger","ts":"2019-03-11T23:27:19.606Z"}
{"msg":"Do you want me to make the change?","username":"guoger","ts":"2019-03-11T23:33:17.353Z"}
{"msg":"I'd think so, but open to other opinions ","username":"jyellick","ts":"2019-03-12T02:17:14.832Z"}
{"msg":"Has joined the channel.","username":"KyunghoKim","ts":"2019-03-12T03:10:06.596Z","type":"uj"}
{"msg":"yeah i say we can change \"messages\" to \"blocks\"","username":"yacovm","ts":"2019-03-12T08:30:13.834Z"}
{"msg":"https://jira.hyperledger.org/browse/FAB-14593","username":"guoger","ts":"2019-03-12T08:42:54.165Z"}
{"msg":"@yacovm what's the diff between _inactive chain_ and _disabled chain_?","username":"guoger","ts":"2019-03-13T02:48:49.410Z"}
{"msg":"@guoger Especially, but others too, could you please take a look at https://gerrit.hyperledger.org/r/c/30051/","username":"jyellick","ts":"2019-03-13T05:25:14.975Z"}
{"msg":"It is the end CR in a series of 3 which:\n1. Renames the metadata protos to be a bit more intuitive as to their use\n2. Refactors the detectConfChange code a bit to make it easier to modify the contents of the protos\n3. Changes the slice mapping nodeID->consenter with a simple slide of nodeID, and then builds the map from a combination of the config metadata slice of consenters and the block metadata slice.","username":"jyellick","ts":"2019-03-13T05:26:56.859Z"}
{"msg":"The changes ended up being a little more invasive than I was hoping for, but I think/hope they are still fairly straightforward.  In addition to any comments on correctness, I'd like opinions from everyone on how good we feel about this going into test now, and whether we feel that it invalidates any of our testing (especially our failure and recovery paths).  Obviously it's much easier to change these message before we have them on chains we will have to support indefinitely, but I also don't want us to rush this through simply because we are afraid of future work.  So, please, review and consider whether we would like to integrate.","username":"jyellick","ts":"2019-03-13T05:29:20.715Z"}
{"msg":"@yacovm @C0rWin @tock @adarshsaraf123 ^","username":"jyellick","ts":"2019-03-13T05:29:48.181Z"}
{"msg":"@guoger same thing","username":"yacovm","ts":"2019-03-13T08:06:18.746Z"}
{"msg":"@jyellick I am pretty confident in our integration tests, and we can always just ask SVT to retest everything, as they are doing anyway for v1.4.1","username":"yacovm","ts":"2019-03-13T10:32:17.632Z"}
{"msg":"we need to look at the disk space saved a year from now which is substantial. ","username":"yacovm","ts":"2019-03-13T10:33:22.286Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=vyYwgDkMhwtPknkZF) 100 Tx/sec * 5 nodes * 700B * 3600*24*365 ~ 11TB","username":"tock","ts":"2019-03-13T16:02:22.105Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=vyYwgDkMhwtPknkZF","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=vyYwgDkMhwtPknkZF","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=vyYwgDkMhwtPknkZF) 100 Tx/sec x 5 nodes x 700B x 3600 x 24 x 365 ~ 11TB","username":"tock","ts":"2019-03-13T16:02:22.105Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=vyYwgDkMhwtPknkZF","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=vyYwgDkMhwtPknkZF","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@jyellick overall, i think your approach looks good! (and the refactoring streamlines the code quite a bit!) Although there's a problem w.r.t the integration test failure: https://jenkins.hyperledger.org/job/fabric-verify-integration-tests-x86_64/7084/console\nI _think_ the problem is, when a node detects its own eviction, it pulls blocks up to a config block, writes them to ledger and exits. It [writes block with](https://github.com/hyperledger/fabric/blob/dbb4451c44095af27c27fbe34aad1d028a982d67/orderer/consensus/etcdraft/util.go#L586) `support.WriteBlock` for both normal blocks and config blocks, which is good because we don't want to actually update configs. However, config sequence is *not* updated, and the `LastConfig` in those blocks do *not* refer to correct config block, instead, an older config block was referred.","username":"guoger","ts":"2019-03-13T17:00:51.894Z"}
{"msg":"@jyellick overall, i think your approach looks good! (and the refactoring streamlines the code quite a bit!) Although there's a problem w.r.t the integration test failure: https://jenkins.hyperledger.org/job/fabric-verify-integration-tests-x86_64/7084/console\nI _think_ the problem is, when a node detects its own eviction, it pulls blocks up to a config block, writes them to ledger and exits. It [writes block with](https://github.com/hyperledger/fabric/blob/dbb4451c44095af27c27fbe34aad1d028a982d67/orderer/consensus/etcdraft/util.go#L586) `support.WriteBlock` for both normal blocks and config blocks, which ~is good because we don't want to actually update configs~ I'm not sure if it's good. However, config sequence is *not* updated, and the `LastConfig` in those blocks do *not* refer to correct config block, instead, an older config block was referred.","username":"guoger","ts":"2019-03-13T17:00:51.894Z"}
{"msg":"Ah, I see, so it should only be the last config block that's written with `WriteBlock`?","username":"jyellick","ts":"2019-03-13T17:03:37.783Z"}
{"msg":"(The others would be written normally because we do want those configs to be updated in that case)","username":"jyellick","ts":"2019-03-13T17:03:52.014Z"}
{"msg":"In the case of that integration test, when this node is restarted, it loads\n- `consenters []*etcdraft.Consenter` from older config block: {o1, o2, o3}\n- `ConsenterIds []uint64` from last block, [2, 3]\nand crashes","username":"guoger","ts":"2019-03-13T17:03:57.856Z"}
{"msg":"Ah, so actually we had this bug before (wrong last config block in the metadata)","username":"jyellick","ts":"2019-03-13T17:04:32.609Z"}
{"msg":"right","username":"guoger","ts":"2019-03-13T17:04:38.794Z"}
{"msg":"And what would be wrong with updating the config via `WriteConfigBlock` and updating the configs?","username":"jyellick","ts":"2019-03-13T17:05:28.146Z"}
{"msg":"And what would be wrong with writing the block via `WriteConfigBlock` and updating the configs?","username":"jyellick","ts":"2019-03-13T17:05:28.146Z"}
{"msg":"just updated my post while you ask this :joy: ","username":"guoger","ts":"2019-03-13T17:05:56.976Z"}
{"msg":"@yacovm any reason why we weren't actually updating configs while pulling blocks during eviction?","username":"guoger","ts":"2019-03-13T17:07:30.603Z"}
{"msg":"(if this node is evicted from systemchannel, i think those channel creation config should be no-op?)","username":"guoger","ts":"2019-03-13T17:07:30.633Z"}
{"msg":"Other than this, I'd +1 the CR and I think we should integrate :)","username":"guoger","ts":"2019-03-13T17:10:26.641Z"}
{"msg":"why do you need to use the chain method?","username":"yacovm","ts":"2019-03-13T17:54:13.397Z"}
{"msg":"the chain is dead once you halt. it is never used again","username":"yacovm","ts":"2019-03-13T17:54:27.756Z"}
{"msg":"all you care is pulling the blocks and committing them.","username":"yacovm","ts":"2019-03-13T17:54:40.824Z"}
{"msg":"oh","username":"yacovm","ts":"2019-03-13T17:56:25.210Z"}
{"msg":"i guess we need to use `chain.writeBlock` instead of `support.WriteBlock`","username":"yacovm","ts":"2019-03-13T17:56:51.254Z"}
{"msg":"wait actually","username":"yacovm","ts":"2019-03-13T17:57:40.472Z"}
{"msg":"i don't understand","username":"yacovm","ts":"2019-03-13T17:57:42.664Z"}
{"msg":"you pull blocks from a consenter","username":"yacovm","ts":"2019-03-13T17:57:48.665Z"}
{"msg":"so the metadata and last config block should be correct","username":"yacovm","ts":"2019-03-13T17:57:55.319Z"}
{"msg":"because that consenter committed that block correctly","username":"yacovm","ts":"2019-03-13T17:58:03.083Z"}
{"msg":"and the chain is halted","username":"yacovm","ts":"2019-03-13T18:00:31.869Z"}
{"msg":"so you are not supposed to use it","username":"yacovm","ts":"2019-03-13T18:00:36.610Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=czewvLvva8FhyzD4n) @yacovm it's actually overwritten here: BlockMetadataIndex_LAST_CONFIG","username":"guoger","ts":"2019-03-13T18:08:32.150Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=czewvLvva8FhyzD4n","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=czewvLvva8FhyzD4n","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=czewvLvva8FhyzD4n) @yacovm it's actually overwritten here: https://github.com/hyperledger/fabric/blob/dbb4451c44095af27c27fbe34aad1d028a982d67/orderer/common/multichannel/blockwriter.go#L216-L221","username":"guoger","ts":"2019-03-13T18:08:32.150Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=czewvLvva8FhyzD4n","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=czewvLvva8FhyzD4n","remote":true,"fileId":null,"fileName":null}]}
{"msg":"damn. I somehow thought this writeBlock passes through directly to the ledger","username":"yacovm","ts":"2019-03-13T18:10:12.699Z"}
{"msg":"so i need to use the chain's write block no?","username":"yacovm","ts":"2019-03-13T18:10:29.338Z"}
{"msg":"@guoger  @jyellick ","username":"yacovm","ts":"2019-03-13T18:10:33.562Z"}
{"msg":"https://github.com/hyperledger/fabric/blob/master/orderer/common/multichannel/blockwriter.go#L153-L178","username":"jyellick","ts":"2019-03-13T18:11:31.608Z"}
{"msg":"It looks like we get lucky, in that if you supply `nil` as the metadata, then we do _not_ override the metadata which is passed in","username":"jyellick","ts":"2019-03-13T18:11:52.105Z"}
{"msg":"However, the last config block metadata (stored in a different part of the block metadata) is always computed by the block writing.","username":"jyellick","ts":"2019-03-13T18:12:15.570Z"}
{"msg":"Actually, I think we have bigger problems here","username":"jyellick","ts":"2019-03-13T18:13:14.143Z"}
{"msg":"not `chain` method, but just `support.WriteConfigBlock` i think?","username":"guoger","ts":"2019-03-13T18:13:20.755Z"}
{"msg":"It looks to me like this would cause the receiving node to re-sign the block, no?","username":"jyellick","ts":"2019-03-13T18:13:26.865Z"}
{"msg":"it will","username":"yacovm","ts":"2019-03-13T18:13:36.089Z"}
{"msg":"Which seems like a pretty significant problem?","username":"jyellick","ts":"2019-03-13T18:13:42.758Z"}
{"msg":"How can you ever onboard an orderer from a new org.","username":"jyellick","ts":"2019-03-13T18:13:50.432Z"}
{"msg":"oh yeah","username":"yacovm","ts":"2019-03-13T18:13:51.491Z"}
{"msg":"the problem is only at the tip","username":"yacovm","ts":"2019-03-13T18:14:04.346Z"}
{"msg":"or actually","username":"yacovm","ts":"2019-03-13T18:14:09.855Z"}
{"msg":"the entire interval","username":"yacovm","ts":"2019-03-13T18:14:15.023Z"}
{"msg":"from the eviction block","username":"yacovm","ts":"2019-03-13T18:14:17.957Z"}
{"msg":"to the last config block","username":"yacovm","ts":"2019-03-13T18:14:22.402Z"}
{"msg":"The leader should generate the block metadata, include it in the block he disseminates, and all followers should blindly write it (I would think)","username":"jyellick","ts":"2019-03-13T18:14:29.589Z"}
{"msg":"we need to just commit the block to the ledger without touching it, like the onboarding code","username":"yacovm","ts":"2019-03-13T18:14:46.129Z"}
{"msg":"Yes","username":"jyellick","ts":"2019-03-13T18:14:59.421Z"}
{"msg":"But I would argue this should be the case for non-catchup cases as well.  We need to apply the config updates as we commit them, but all of the metadata manipulation should not be done by the follower.","username":"jyellick","ts":"2019-03-13T18:15:38.150Z"}
{"msg":"what are non catchup cases?","username":"yacovm","ts":"2019-03-13T18:16:29.343Z"}
{"msg":"regular commit of the block while you are in the channel?","username":"yacovm","ts":"2019-03-13T18:16:48.526Z"}
{"msg":"Yes","username":"jyellick","ts":"2019-03-13T18:16:51.222Z"}
{"msg":"I don't follow now.... ","username":"yacovm","ts":"2019-03-13T18:17:06.340Z"}
{"msg":"> We need to apply the config updates as we commit them, but all of the metadata manipulation should not be done by the follower. \nI thought we use `WriteConfigBlock` ","username":"yacovm","ts":"2019-03-13T18:17:25.981Z"}
{"msg":"which does the book-keeping?","username":"yacovm","ts":"2019-03-13T18:17:30.030Z"}
{"msg":"Okay, so... let me simply describe how I think the flow should work:\n\n1) Leader cuts a block.\n2) Leader constructs the block metadata, including the consenter metadata, and the last config block index, and signs both of them, attaching them to the block.\n3) Follower gets fully constructed block, including metadata.  It blindly writes this block to its ledger.\n4) If the block was  a config block, it applies the embedded config immediately before the write to disk.","username":"jyellick","ts":"2019-03-13T18:19:03.010Z"}
{"msg":"Today, my understanding is that we:\n\n1) Leader cuts the block.\n2) Follower/leader gets the block with only data.\n3) Follower/leader constructs the block metadata, each signing the block.\n4) Follower/leader signs the metadata and commits the config update just before committing it to disk.","username":"jyellick","ts":"2019-03-13T18:20:03.348Z"}
{"msg":"but why do you think there is deviation in the metadata, @jyellick ?","username":"yacovm","ts":"2019-03-13T18:25:11.477Z"}
{"msg":"What do you mean?","username":"jyellick","ts":"2019-03-13T18:25:31.221Z"}
{"msg":"There is a deviation, unquestionably.  The metadata signer and signature is different on each orderer.","username":"jyellick","ts":"2019-03-13T18:25:58.474Z"}
{"msg":"the signature is different because of the randomness","username":"yacovm","ts":"2019-03-13T18:26:20.644Z"}
{"msg":"but what aside of it is different?","username":"yacovm","ts":"2019-03-13T18:26:25.592Z"}
{"msg":"The signer","username":"jyellick","ts":"2019-03-13T18:26:28.600Z"}
{"msg":"ok, the identity","username":"yacovm","ts":"2019-03-13T18:26:34.017Z"}
{"msg":"what else?","username":"yacovm","ts":"2019-03-13T18:26:37.697Z"}
{"msg":"The identity is not necessarily authorized to sign that block","username":"jyellick","ts":"2019-03-13T18:26:38.635Z"}
{"msg":"how come?","username":"yacovm","ts":"2019-03-13T18:26:43.367Z"}
{"msg":"Especially in the case of a late org join/add","username":"jyellick","ts":"2019-03-13T18:26:46.109Z"}
{"msg":"that's what I am missing","username":"yacovm","ts":"2019-03-13T18:26:51.522Z"}
{"msg":"in a normal non eviction scenario","username":"yacovm","ts":"2019-03-13T18:26:57.685Z"}
{"msg":"how come you're not authorized?","username":"yacovm","ts":"2019-03-13T18:27:01.494Z"}
{"msg":"We start an ordering network with Jay, Yacov, and Jason.  We process a few thousand blocks.","username":"jyellick","ts":"2019-03-13T18:27:21.635Z"}
{"msg":"At block 10k, we add Artem.","username":"jyellick","ts":"2019-03-13T18:27:29.874Z"}
{"msg":"For blocks 0-10k, Artem is _not_ an authorized signer for those blocks.","username":"jyellick","ts":"2019-03-13T18:27:40.165Z"}
{"msg":"but Artem doesn't sign the blocks himself","username":"yacovm","ts":"2019-03-13T18:27:41.437Z"}
{"msg":"obviously...","username":"yacovm","ts":"2019-03-13T18:27:45.545Z"}
{"msg":"he pulls them and commits them into the ledger","username":"yacovm","ts":"2019-03-13T18:27:54.467Z"}
{"msg":"that's what onboarding is doing","username":"yacovm","ts":"2019-03-13T18:28:04.657Z"}
{"msg":"But if Artem writes those blocks to disk using `WriteBlock` or` WriteConfigBlock`, he re-signs those blocks as him.","username":"jyellick","ts":"2019-03-13T18:28:09.129Z"}
{"msg":"but he does not","username":"yacovm","ts":"2019-03-13T18:28:13.984Z"}
{"msg":"Okay, so that's good.","username":"jyellick","ts":"2019-03-13T18:28:31.621Z"}
{"msg":"I'm still not sure we have all of the corner cases covered","username":"jyellick","ts":"2019-03-13T18:29:02.548Z"}
{"msg":"```\n// Replicator replicates chains\ntype Replicator struct {\n\tDoNotPanicIfClusterNotReachable bool\n\tFilter                          ChannelPredicate\n\tSystemChannel                   string\n\tChannelLister                   ChannelLister\n\tLogger                          *flogging.FabricLogger\n\tPuller                          *BlockPuller\n\tBootBlock                       *common.Block\n\tAmIPartOfChannel                SelfMembershipPredicate\n\tLedgerFactory                   LedgerFactory\n}\n```","username":"yacovm","ts":"2019-03-13T18:29:20.763Z"}
{"msg":"this is the struct that replicates blocks","username":"yacovm","ts":"2019-03-13T18:29:29.669Z"}
{"msg":"it uses a ledger... ","username":"yacovm","ts":"2019-03-13T18:29:35.230Z"}
{"msg":"https://github.com/hyperledger/fabric/blob/master/orderer/consensus/etcdraft/chain.go#L912-L964","username":"jyellick","ts":"2019-03-13T18:30:14.625Z"}
{"msg":">  I'm still not sure we have all of the corner cases covered \nok, can you give an example? you had me worried there for a bit ","username":"yacovm","ts":"2019-03-13T18:30:15.660Z"}
{"msg":"this catchup is once you're in the channel","username":"yacovm","ts":"2019-03-13T18:30:26.654Z"}
{"msg":"So these blocks you are getting","username":"jyellick","ts":"2019-03-13T18:30:57.400Z"}
{"msg":"Do they have metadata populated?","username":"jyellick","ts":"2019-03-13T18:31:01.284Z"}
{"msg":"yeah","username":"yacovm","ts":"2019-03-13T18:31:13.300Z"}
{"msg":"the etcdraft catchup is via Deliver API","username":"yacovm","ts":"2019-03-13T18:31:20.763Z"}
{"msg":"so it is the same block from the disk","username":"yacovm","ts":"2019-03-13T18:31:31.011Z"}
{"msg":"Okay, cool.  Why do we not use `WriteConfigBlock` on config block here?","username":"jyellick","ts":"2019-03-13T18:31:39.498Z"}
{"msg":"we do not? :thinking_face: ","username":"yacovm","ts":"2019-03-13T18:31:48.867Z"}
{"msg":"Oh... I see we do","username":"jyellick","ts":"2019-03-13T18:32:02.263Z"}
{"msg":"we do... i think","username":"yacovm","ts":"2019-03-13T18:32:02.812Z"}
{"msg":"I thought Jay had said we do not","username":"jyellick","ts":"2019-03-13T18:32:08.662Z"}
{"msg":"we do not at replicating the blocks once you are out of the channel","username":"yacovm","ts":"2019-03-13T18:32:25.972Z"}
{"msg":"i will fix it... shortly ","username":"yacovm","ts":"2019-03-13T18:32:32.734Z"}
{"msg":"Okay, so this is truly only an eviction case.","username":"jyellick","ts":"2019-03-13T18:32:40.971Z"}
{"msg":"i guess i need to add an `AppendBlock` method to support, right?","username":"yacovm","ts":"2019-03-13T18:32:47.060Z"}
{"msg":"So as not to corrupt the existing metadata.  Yes, I think this makes senes.","username":"jyellick","ts":"2019-03-13T18:34:03.168Z"}
{"msg":"So as not to corrupt the existing metadata.  Yes, I think this makes sense.","username":"jyellick","ts":"2019-03-13T18:34:03.168Z"}
{"msg":"I am really wondering why we didn't just have the leader sign the block before it proposed to to Raft","username":"yacovm","ts":"2019-03-13T18:34:39.863Z"}
{"msg":"It sounds like it is not critical for v1.4.1, but I would still like for us to go back and clean things up such that metadata is not computed per consenter, but is pre-computed and signed by the leader only.","username":"jyellick","ts":"2019-03-13T18:34:42.664Z"}
{"msg":"it needs to sign anyway","username":"yacovm","ts":"2019-03-13T18:34:44.882Z"}
{"msg":"and this way you can reduce CPU load on followers","username":"yacovm","ts":"2019-03-13T18:34:53.516Z"}
{"msg":"by having them not need to sign anything","username":"yacovm","ts":"2019-03-13T18:34:58.638Z"}
{"msg":"Yes, this seems like the obvious choice to me","username":"jyellick","ts":"2019-03-13T18:35:01.826Z"}
{"msg":"And you do not risk divergence in metadata in case of non-deterministic bug.","username":"jyellick","ts":"2019-03-13T18:35:20.271Z"}
{"msg":"yeah","username":"yacovm","ts":"2019-03-13T18:35:26.988Z"}
{"msg":"Okay... but this sounds too invasive for v1.4.1 unless there is a legitimate bug/hole we have not covered.","username":"jyellick","ts":"2019-03-13T18:36:26.486Z"}
{"msg":"it's too invasive because of the UTs ","username":"yacovm","ts":"2019-03-13T18:36:42.433Z"}
{"msg":"https://github.com/hyperledger/fabric/blob/release-1.4/sampleconfig/configtx.yaml#L341","username":"yacovm","ts":"2019-03-13T19:16:32.294Z"}
{"msg":"we are keeping 100MB per channel in memory right @guoger ?","username":"yacovm","ts":"2019-03-13T19:16:43.132Z"}
{"msg":"if we have lots of channels, this might become a problem and the orderers can run out of memory and then there is no way of backing off from this without doing a config transaction. I guess if the orderes are restarted then this isn't filled, and we can then do a config transaction before this gets filled up to 100MB again, right?","username":"yacovm","ts":"2019-03-13T21:44:18.604Z"}
{"msg":"When node starts, it loads all data since last snapshot, which could be 0-100 MB. We can surely reduce this number as part of my CR that tunes parameters ","username":"guoger","ts":"2019-03-13T23:32:52.411Z"}
{"msg":"Signing blocks at leader before consenting is not hard, although we need to infer Raft Index and put it into metadata in this case","username":"guoger","ts":"2019-03-13T23:35:21.133Z"}
{"msg":"@guoger it's not only the signing, it's also the last config block","username":"yacovm","ts":"2019-03-13T23:41:50.107Z"}
{"msg":"@guoger it's not only the signing, it's also the last config block index","username":"yacovm","ts":"2019-03-13T23:41:50.107Z"}
{"msg":"i don't think this can be contained in v1.4.1 :( ","username":"yacovm","ts":"2019-03-13T23:42:05.623Z"}
{"msg":"i don't think this can be contained in v1.4.1 ","username":"yacovm","ts":"2019-03-13T23:42:05.623Z"}
{"msg":"but in 2.0 it's possible.... ","username":"yacovm","ts":"2019-03-13T23:42:20.701Z"}
{"msg":"maybe it's hard to be contained in 1.4.1, but i'm trying to find difficulties here. basically with blockcreator being separated from blockwriter, we are not really dependent on the update of block info in blockwriter, e.g. prev_hash, block number, last config block number, etc, instead they are simply stored in blockcreator. Those info are actually loaded from ledger only when a node is just elected to be leader.","username":"guoger","ts":"2019-03-14T01:20:44.740Z"}
{"msg":"does `counterfeiter` have official release yet?","username":"guoger","ts":"2019-03-14T04:28:15.058Z"}
{"msg":"Not that I'm aware of","username":"jyellick","ts":"2019-03-14T04:29:13.296Z"}
{"msg":"just checked... it's already v6.0.1 ... although the cli doesn't give any version info.. odd","username":"guoger","ts":"2019-03-14T04:30:17.635Z"}
{"msg":"The github page also explicitly mentions not wanting to 'complicate the CLI interface\"","username":"jyellick","ts":"2019-03-14T04:52:59.538Z"}
{"msg":"But it is crazy to me that there is not a version number","username":"jyellick","ts":"2019-03-14T04:53:11.537Z"}
{"msg":"(Though dealing with fakes, and counterfeiter version weirdness, beats dealing with mocks most times)","username":"jyellick","ts":"2019-03-14T04:53:38.629Z"}
{"msg":"haha ya.. and we should transform other pkgs to start using fakes, e.g. blockwriter","username":"guoger","ts":"2019-03-14T04:58:29.656Z"}
{"msg":"also, @jyellick do you mind rebasing your CR on top of @yacovm 's fix, so we can assert if it actually fixes the problem","username":"guoger","ts":"2019-03-14T05:01:12.445Z"}
{"msg":"Did I not merge his fix and rebase onto release-1.4 or am I missing one?","username":"jyellick","ts":"2019-03-14T05:01:36.430Z"}
{"msg":"ah, i have outdated information","username":"guoger","ts":"2019-03-14T05:02:24.719Z"}
{"msg":"just noticed it's merged","username":"guoger","ts":"2019-03-14T05:02:39.070Z"}
{"msg":"The top of my stack passed CI so I thought the middle CI failure was likely a flake","username":"jyellick","ts":"2019-03-14T05:02:58.277Z"}
{"msg":"(Hence re-running integration)","username":"jyellick","ts":"2019-03-14T05:03:05.340Z"}
{"msg":"@guoger Looks like the fix from @yacovm doesn't solve my integration test problems entirely.  I haven't really had a chance to analyze, if someone else has the opportunity great, otherwise I'll pick it up in the morning (but it is getting late EDT so I need to stop for the night)","username":"jyellick","ts":"2019-03-14T06:27:16.660Z"}
{"msg":"it's indeed very late... i've just opened that failure log","username":"guoger","ts":"2019-03-14T06:27:45.198Z"}
{"msg":"however, CI is green for https://gerrit.hyperledger.org/r/c/30051/4","username":"guoger","ts":"2019-03-14T06:28:10.176Z"}
{"msg":"@jyellick ","username":"guoger","ts":"2019-03-14T06:28:12.463Z"}
{"msg":"Yes, I thought that was odd.  Perhaps it is some logic bug I introduced and then fixed","username":"jyellick","ts":"2019-03-14T06:28:26.130Z"}
{"msg":"i'll take a look","username":"guoger","ts":"2019-03-14T06:29:28.853Z"}
{"msg":"Great, thanks, if you do not have time, no worries, but I will definitely appreciate it if you figure it out","username":"jyellick","ts":"2019-03-14T06:32:32.416Z"}
{"msg":"commented on the CR. just one line missing :P @jyellick ","username":"guoger","ts":"2019-03-14T07:08:09.782Z"}
{"msg":"question\n- does orderer actually sign block metadata?\n- why is metadata nested in another metadata in block proto?","username":"guoger","ts":"2019-03-14T07:17:55.753Z"}
{"msg":"Of course it signs it","username":"yacovm","ts":"2019-03-14T08:40:43.613Z"}
{"msg":"Otherwise a peer can change it","username":"yacovm","ts":"2019-03-14T08:41:10.323Z"}
{"msg":"could you point me to the code? thx!","username":"guoger","ts":"2019-03-14T08:44:10.578Z"}
{"msg":"could you point me to the code? thx! @yacovm ","username":"guoger","ts":"2019-03-14T08:44:10.578Z"}
{"msg":"the code that does what? the signinig? @guoger ","username":"yacovm","ts":"2019-03-14T09:04:51.120Z"}
{"msg":"yes","username":"guoger","ts":"2019-03-14T09:05:29.699Z"}
{"msg":"where is block metadata signed","username":"guoger","ts":"2019-03-14T09:05:50.489Z"}
{"msg":"```\n// commitBlock should only ever be invoked with the bw.committingBlock held\n// this ensures that the encoded config sequence numbers stay in sync\nfunc (bw *BlockWriter) commitBlock(encodedMetadataValue []byte) {\n\t// Set the orderer-related metadata field\n\tif encodedMetadataValue != nil {\n\t\tbw.lastBlock.Metadata.Metadata[cb.BlockMetadataIndex_ORDERER] = protoutil.MarshalOrPanic(&cb.Metadata{Value: encodedMetadataValue})\n\t}\n\tbw.addBlockSignature(bw.lastBlock)\n\tbw.addLastConfigSignature(bw.lastBlock)\n\n\terr := bw.support.Append(bw.lastBlock)\n\tif err != nil {\n\t\tlogger.Panicf(\"[channel: %s] Could not append block: %s\", bw.support.ChainID(), err)\n\t}\n\tlogger.Debugf(\"[channel: %s] Wrote block %d\", bw.support.ChainID(), bw.lastBlock.GetHeader().Number)\n}\n\nfunc (bw *BlockWriter) addBlockSignature(block *cb.Block) {\n\tblockSignature := &cb.MetadataSignature{\n\t\tSignatureHeader: protoutil.MarshalOrPanic(protoutil.NewSignatureHeaderOrPanic(bw.support)),\n\t}\n\n\t// Note, this value is intentionally nil, as this metadata is only about the signature, there is no additional metadata\n\t// information required beyond the fact that the metadata item is signed.\n\tblockSignatureValue := []byte(nil)\n\n\tblockSignature.Signature = protoutil.SignOrPanic(\n\t\tbw.support,\n\t\tutil.ConcatenateBytes(blockSignatureValue, blockSignature.SignatureHeader, protoutil.BlockHeaderBytes(block.Header)),\n\t)\n\n\tblock.Metadata.Metadata[cb.BlockMetadataIndex_SIGNATURES] = protoutil.MarshalOrPanic(&cb.Metadata{\n\t\tValue: blockSignatureValue,\n\t\tSignatures: []*cb.MetadataSignature{\n\t\t\tblockSignature,\n\t\t},\n\t})\n}\n```","username":"yacovm","ts":"2019-03-14T09:06:49.554Z"}
{"msg":"i only see these two\n```\n\tbw.addBlockSignature(bw.lastBlock)\n\tbw.addLastConfigSignature(bw.lastBlock)\n```","username":"guoger","ts":"2019-03-14T09:06:58.917Z"}
{"msg":"I think the metadata of the raft is not signed","username":"yacovm","ts":"2019-03-14T09:07:25.898Z"}
{"msg":"i guess maybe it's ok for CFT because we use TLS ?","username":"yacovm","ts":"2019-03-14T09:08:04.349Z"}
{"msg":"The stack ending in https://gerrit.hyperledger.org/r/c/30051/  has passed CI and should be ready for review","username":"jyellick","ts":"2019-03-14T14:58:46.893Z"}
{"msg":"re FAB-14648: yeah i think we should definitely validate consenter data when config tx comes in. I'll take on this. However, I'm curious why you also proposed to halt the chain as an alternative? After validation is added, we should still panic on `configureComm`, because that error, in theory, should never happen, right? @yacovm ","username":"guoger","ts":"2019-03-15T01:29:44.026Z"}
{"msg":"re FAB-14648: yeah i think we should definitely validate consenter data when config tx comes in. I'll take on this. However, I'm curious why you also proposed to halt the chain as an alternative? *After validation is added*, we should still panic on `configureComm`, because that error, in theory, should never happen, right? @yacovm ","username":"guoger","ts":"2019-03-15T01:29:44.026Z"}
{"msg":"+1 if we validate inputs, we shouldn't be able to have a committed block with bad config.  We panic in other parts of the code over such a situation.","username":"jyellick","ts":"2019-03-15T01:30:53.486Z"}
{"msg":"+1. If we validate inputs, we shouldn't be able to have a committed block with bad config.  We panic in other parts of the code over such a situation.","username":"jyellick","ts":"2019-03-15T01:30:53.486Z"}
{"msg":"isn't it a problem where wrong update config tx cause to entire cluster of OSNs to panic?","username":"C0rWin","ts":"2019-03-15T01:35:54.058Z"}
{"msg":"I can understand why there is a need to panic to prevent fork in the state or divergence, but in that case Halting misconfigured chain would be just fine, no? I mean OSN serving several chains, hence misconfiguration of one should not prevent those OSNs from serving the rest.","username":"C0rWin","ts":"2019-03-15T01:39:23.288Z"}
{"msg":"Well, we would panic on situations we should not encounter.  For instance, non-validly encoded X.509 certs.","username":"jyellick","ts":"2019-03-15T01:40:17.086Z"}
{"msg":"This would indicate that this block was committed erroneously, and all bets are off.  Safer to panic and identify the underlying cause.","username":"jyellick","ts":"2019-03-15T01:40:35.661Z"}
{"msg":"(Assuming we valid the inputs before commit, we should not encounter invalid data reading committed data)","username":"jyellick","ts":"2019-03-15T01:41:16.113Z"}
{"msg":"(Assuming we valid the inputs before commit, we should not encounter invalid data reading committed state)","username":"jyellick","ts":"2019-03-15T01:41:16.113Z"}
{"msg":"so if I'd like to take OSNs cluster down, assuming malicious admin all I need is to musconfigure X.509 for one chain ","username":"C0rWin","ts":"2019-03-15T01:41:36.012Z"}
{"msg":"I can just create a new one organization channel w/ wrong cert and cause panic on all OSNs","username":"C0rWin","ts":"2019-03-15T01:42:54.974Z"}
{"msg":"sounds a bit risky to me, unless I'm missing something ","username":"C0rWin","ts":"2019-03-15T01:43:16.569Z"}
{"msg":"IMO we need to add sanity check for config transaction to check for certs validity and reject config updates where we have a problem w/ cert","username":"C0rWin","ts":"2019-03-15T01:47:01.662Z"}
{"msg":"If you are a malicious admin","username":"jyellick","ts":"2019-03-15T01:47:02.455Z"}
{"msg":"And you control a Raft node","username":"jyellick","ts":"2019-03-15T01:47:11.500Z"}
{"msg":"You may force that node to be leader, and you may commit blocks with say, a capability that does not exist.","username":"jyellick","ts":"2019-03-15T01:47:37.312Z"}
{"msg":"You will cause all nodes in the network to panic.","username":"jyellick","ts":"2019-03-15T01:47:49.149Z"}
{"msg":"If a block is committed with a signature satisfying the block validation policy.  Then that block is assumed to be valid.  If that's not true, then a myriad of attacks become possible.","username":"jyellick","ts":"2019-03-15T01:48:46.864Z"}
{"msg":"k, yes you are right... got it. but isn't simplier then just not to accept transaction with misconfigured X.509 cert?","username":"C0rWin","ts":"2019-03-15T01:49:18.098Z"}
{"msg":"then it make sense to panic ","username":"C0rWin","ts":"2019-03-15T01:49:40.412Z"}
{"msg":"Ah yes, 100% we need to do that.  That is Jay's suggestion above.","username":"jyellick","ts":"2019-03-15T01:49:42.270Z"}
{"msg":"If we validate the update to contain a valid consenter set, then no need to worry about halting vs. panic-ing.  Because we cannot encounter a committed config with bad consenterss","username":"jyellick","ts":"2019-03-15T01:50:32.712Z"}
{"msg":"If we validate the update to contain a valid consenter set, then no need to worry about halting vs. panic-ing.  Because we cannot encounter a committed config with bad consenter set.","username":"jyellick","ts":"2019-03-15T01:50:32.712Z"}
{"msg":"having validation in place, makes more sense to have panic in that code path ","username":"C0rWin","ts":"2019-03-15T01:50:42.261Z"}
{"msg":"I just misread the part where Jay proposed to add validation ","username":"C0rWin","ts":"2019-03-15T01:51:20.566Z"}
{"msg":"late to the party... re-edit my message to mark that part bold","username":"guoger","ts":"2019-03-15T02:30:34.857Z"}
{"msg":"late to the party... re-edited my message to mark that part bold","username":"guoger","ts":"2019-03-15T02:30:34.857Z"}
{"msg":"btw, why do we call it `ConfigMetadata` instead of just `Config`? @jyellick ","username":"guoger","ts":"2019-03-15T02:44:37.789Z"}
{"msg":"@guoger It's stored in the `metadata` field of the channel config's `ConsensusType` value","username":"jyellick","ts":"2019-03-15T02:45:36.518Z"}
{"msg":"Most appropriately it is the \"Channel config consensus type metadata\", but that seemed a bit long","username":"jyellick","ts":"2019-03-15T02:46:07.540Z"}
{"msg":"I can see how `ConfigMetadata` would read as \"Metadata about the config\", but I meant it to be \"metadata from the config\"","username":"jyellick","ts":"2019-03-15T02:46:42.357Z"}
{"msg":"i think it's more of \"config from the metadata\" though?","username":"guoger","ts":"2019-03-15T02:47:13.921Z"}
{"msg":"i would expect the statement to be \"consensustype metadata stores etcdraft configurations\"","username":"guoger","ts":"2019-03-15T02:47:35.293Z"}
{"msg":"the additional \"metadata\" sounds a bit repetitive","username":"guoger","ts":"2019-03-15T02:48:11.496Z"}
{"msg":"Do you not think calling it plain `Config` would be a bit misleading, as it is only a part of the configuration?","username":"jyellick","ts":"2019-03-15T02:50:21.334Z"}
{"msg":"i don't have strong opinions on this, but i feel metadata is still somewhat more confusing because \"metadata\" doesn't really convey the message \"this field contains a subset of configurations for etcdraft consensus\"","username":"guoger","ts":"2019-03-15T02:54:10.873Z"}
{"msg":"i certainly could live with it as i've been reading it for a while :)","username":"guoger","ts":"2019-03-15T02:55:19.335Z"}
{"msg":"I don't love the name, and if we have a great replacement for it I'm all ears.  I thought `Metadata` and `RaftMetadata` were quite confusing, which is why I moved them to `ConfigMetadata` and `BlockMetadata`, but.... I won't claim they're perfect, just better.","username":"jyellick","ts":"2019-03-15T02:57:17.620Z"}
{"msg":"sure. I was trying to explore if this can be more clear, since we are editing it anyway.","username":"guoger","ts":"2019-03-15T03:16:13.488Z"}
{"msg":"I prefer `ConfigMetadata` over `Config` personally, I just think we've overloaded that word too much.  But maybe there's some other better option out there.","username":"jyellick","ts":"2019-03-15T03:16:52.792Z"}
{"msg":"I prefer `ConfigMetadata` over `Config` personally, I just think we've overloaded that word (Config) too much not to have some other descriptor attached.  But maybe there's some other better option out there.","username":"jyellick","ts":"2019-03-15T03:16:52.792Z"}
{"msg":"@yacovm @C0rWin https://gerrit.hyperledger.org/r/c/30051/ and Jay's CRs above could use some attention as fixes for the v1.4 stream","username":"jyellick","ts":"2019-03-15T15:56:28.686Z"}
{"msg":"what attack scenario is it protecting against by hardening tls? @yacovm ","username":"guoger","ts":"2019-03-18T13:32:24.182Z"}
{"msg":"so, let's say we have an orderer org and somehow i get a certificate of an orderer node that has the same host","username":"yacovm","ts":"2019-03-18T13:34:18.731Z"}
{"msg":"then i can do a network spoofing and send you bad blocks ","username":"yacovm","ts":"2019-03-18T13:34:42.113Z"}
{"msg":"and fork the network","username":"yacovm","ts":"2019-03-18T13:34:45.724Z"}
{"msg":"however if we use TLS pinning, then I actually have to steal the private key of the orderer node","username":"yacovm","ts":"2019-03-18T13:34:57.343Z"}
{"msg":"which means i need to actually hack inside a real orderer","username":"yacovm","ts":"2019-03-18T13:35:10.178Z"}
{"msg":"so it's harder","username":"yacovm","ts":"2019-03-18T13:35:13.424Z"}
{"msg":"ah, so you were saying we should enforce tls pinning for replicator?","username":"guoger","ts":"2019-03-18T13:49:24.604Z"}
{"msg":"that's what i was proposing","username":"yacovm","ts":"2019-03-18T14:07:04.427Z"}
{"msg":"but Jason was right in the point of the different listener","username":"yacovm","ts":"2019-03-18T14:07:11.312Z"}
{"msg":"I forgot that part","username":"yacovm","ts":"2019-03-18T14:07:13.601Z"}
{"msg":"even though I implemented it :joy: ","username":"yacovm","ts":"2019-03-18T14:07:19.621Z"}
{"msg":"So what do we propose as a solution? Certainly we can enforce that the TLS cert is from an orderer, but it's not a particularly strong guarantee.  To be fair though, our default is that the block is signed by 'some ordering org identity', so I'm not sure it is much weaker.","username":"jyellick","ts":"2019-03-18T17:59:14.462Z"}
{"msg":"(We should perhaps look into changing this block validation policy to be more specific as well)","username":"jyellick","ts":"2019-03-18T17:59:37.999Z"}
{"msg":"so @jyellick can you perhaps explain more thoroughly what you had in mind with the signature check? you said we can extend a protobuf field, which is it?","username":"yacovm","ts":"2019-03-18T18:11:18.006Z"}
{"msg":"```\nfunc (bw *BlockWriter) addBlockSignature(block *cb.Block) {\n\tblockSignature := &cb.MetadataSignature{\n\t\tSignatureHeader: protoutil.MarshalOrPanic(protoutil.NewSignatureHeaderOrPanic(bw.support)),\n\t}\n\n\t// Note, this value is intentionally nil, as this metadata is only about the signature, there is no additional metadata\n\t// information required beyond the fact that the metadata item is signed.\n\tblockSignatureValue := []byte(nil)\n\n\tblockSignature.Signature = protoutil.SignOrPanic(\n\t\tbw.support,\n\t\tutil.ConcatenateBytes(blockSignatureValue, blockSignature.SignatureHeader, protoutil.BlockHeaderBytes(block.Header)),\n\t)\n\n\tblock.Metadata.Metadata[cb.BlockMetadataIndex_SIGNATURES] = protoutil.MarshalOrPanic(&cb.Metadata{\n\t\tValue: blockSignatureValue,\n\t\tSignatures: []*cb.MetadataSignature{\n\t\t\tblockSignature,\n\t\t},\n\t})\n}\n```","username":"yacovm","ts":"2019-03-18T18:11:30.789Z"}
{"msg":"the signature is over the the `SignatureHeader` bytes which is \"common\" and I guess we don't want to change that, and also over the `BlockHeader` which is.... also common ","username":"yacovm","ts":"2019-03-18T18:12:22.710Z"}
{"msg":"what can we do?","username":"yacovm","ts":"2019-03-18T18:12:26.760Z"}
{"msg":"`blockSignatureValue` is always empty today... we could shove the metadata in there","username":"jyellick","ts":"2019-03-18T18:15:51.463Z"}
{"msg":"The downstream code does not check that it is empty","username":"jyellick","ts":"2019-03-18T18:15:59.249Z"}
{"msg":"The downstream code does not check that it is empty / use that value at all","username":"jyellick","ts":"2019-03-18T18:15:59.249Z"}
{"msg":"so we make a protobuf message for the metadata value.... and we put inside it, the metadata? ","username":"yacovm","ts":"2019-03-18T18:25:10.257Z"}
{"msg":"why not put the entire block metadata in it?","username":"yacovm","ts":"2019-03-18T18:25:18.017Z"}
{"msg":"well, the hash of it","username":"yacovm","ts":"2019-03-18T18:25:21.739Z"}
{"msg":"this way we also can verify the last config block","username":"yacovm","ts":"2019-03-18T18:25:39.790Z"}
{"msg":"ah wait the metadata is a protobuf","username":"yacovm","ts":"2019-03-18T18:25:46.493Z"}
{"msg":"not bytes","username":"yacovm","ts":"2019-03-18T18:25:48.132Z"}
{"msg":"The metadata proto is just a simple wrapper","username":"jyellick","ts":"2019-03-18T18:26:08.797Z"}
{"msg":"It allows you to sign over aribtrary bytes","username":"jyellick","ts":"2019-03-18T18:26:20.156Z"}
{"msg":"```\ntype BlockMetadata struct {\n\tMetadata             [][]byte \n```","username":"yacovm","ts":"2019-03-18T18:26:20.802Z"}
{"msg":"we can put the hash of this byte slice slice","username":"yacovm","ts":"2019-03-18T18:26:34.085Z"}
{"msg":"in the blockSignatureValue","username":"yacovm","ts":"2019-03-18T18:26:43.106Z"}
{"msg":"no?","username":"yacovm","ts":"2019-03-18T18:26:43.974Z"}
{"msg":"No","username":"jyellick","ts":"2019-03-18T18:26:48.872Z"}
{"msg":"Because the peer later mutates this slice","username":"jyellick","ts":"2019-03-18T18:26:59.076Z"}
{"msg":"ah right the invalid Txns","username":"yacovm","ts":"2019-03-18T18:27:20.441Z"}
{"msg":"ok so just the ones that it doesn't mutate then","username":"yacovm","ts":"2019-03-18T18:27:28.316Z"}
{"msg":"I don't see why we should worry about hashes","username":"jyellick","ts":"2019-03-18T18:27:57.273Z"}
{"msg":"Why not simply put the metadata directly into the first nil bytes which is already signed over.","username":"jyellick","ts":"2019-03-18T18:28:12.377Z"}
{"msg":"```\nmessage BlockSignatureDigests {\nrepeated bytes metadatas\n}\n```\nsomething like this?","username":"yacovm","ts":"2019-03-18T18:28:17.185Z"}
{"msg":"One minute while I type it up...","username":"jyellick","ts":"2019-03-18T18:28:31.466Z"}
{"msg":"I think whatever replaces the `nil` should be a marshaled protobuf message for extendability ","username":"yacovm","ts":"2019-03-18T18:29:12.875Z"}
{"msg":"What we have today:\n\n```&common.BlockMetadata{\n    utils.MarshalOrPanic(&common.BlockMetadata{\n        Value: nil,\n        Signatures: ...,\n    }),\n    utils.MarshalOrPanic(&common.BlockMetadata{\n        Value: utils.MarshalOrPanic(&cb.LastConfig{Index: bw.lastConfigBlockNum}),\n        Signatures: ...,\n    }),\n    nil,\n    opaqueConsenterMetadata,\n}\n```\n\nThis could/should become:\n\n```&common.BlockMetadata{\n    utils.MarshalOrPanic(&common.BlockMetadata{\n        Value: utils.MarshalOrPanic(&cb.OrdererBlockMetadata{\n             LastConfigIndex:  bw.lastConfigBlockNum,\n             OpaqueConsenterMetadata: opaqueConsenterMetadata,\n        }),\n        Signatures: ...,\n    }),\n    copy(index at 0), -- long term plan to nil this once clients are updated.\n    nil,\n    nil,\n}\n```","username":"jyellick","ts":"2019-03-18T18:34:18.496Z"}
{"msg":"What we have today:\n\n```&common.BlockMetadata{\n    Metadata: [][]byte{\n        utils.MarshalOrPanic(&common.BlockMetadata{\n            Value: nil,\n            Signatures: ...,\n        }),\n        utils.MarshalOrPanic(&common.BlockMetadata{\n            Value: utils.MarshalOrPanic(&cb.LastConfig{Index: bw.lastConfigBlockNum}),\n            Signatures: ...,\n        }),\n        nil,\n        opaqueConsenterMetadata,\n    },\n}\n```\n\nThis could/should become:\n\n```&common.BlockMetadata{\n    Metadata: [][]byte{\n     utils.MarshalOrPanic(&common.BlockMetadata{\n            Value: utils.MarshalOrPanic(&cb.OrdererBlockMetadata{\n                 LastConfigIndex:  bw.lastConfigBlockNum,\n                 OpaqueConsenterMetadata: opaqueConsenterMetadata,\n            }),\n            Signatures: ...,\n        }),\n        copy(index at 0), -- long term plan to nil this once clients are updated.\n        nil,\n        nil,\n    },\n}\n```","username":"jyellick","ts":"2019-03-18T18:34:18.496Z"}
{"msg":"What we have today:\n\n```&common.BlockMetadata{\n    Metadata: [][]byte{\n        utils.MarshalOrPanic(&common.Metadata{\n            Value: nil,\n            Signatures: ...,\n        }),\n        utils.MarshalOrPanic(&common.Metadata{\n            Value: utils.MarshalOrPanic(&cb.LastConfig{Index: bw.lastConfigBlockNum}),\n            Signatures: ...,\n        }),\n        nil,\n        opaqueConsenterMetadata,\n    },\n}\n```\n\nThis could/should become:\n\n```&common.BlockMetadata{\n    Metadata: [][]byte{\n     utils.MarshalOrPanic(&common.Metadata{\n            Value: utils.MarshalOrPanic(&cb.OrdererBlockMetadata{\n                 LastConfigIndex:  bw.lastConfigBlockNum,\n                 OpaqueConsenterMetadata: opaqueConsenterMetadata,\n            }),\n            Signatures: ...,\n        }),\n        copy(index at 0), -- long term plan to nil this once clients are updated.\n        nil,\n        nil,\n    },\n}\n```","username":"jyellick","ts":"2019-03-18T18:34:18.496Z"}
{"msg":"In the event that an orderer starts up, it would first check to see if metadata[0].Value is non-nil.  If so, then take the consenter metadata from there.  Otherwise, fall back to index 3.","username":"jyellick","ts":"2019-03-18T18:35:13.627Z"}
{"msg":"If we did the proto fields right, we could simply duplicate that first metadata for the second, and eliminate that second signature.","username":"jyellick","ts":"2019-03-18T18:36:06.722Z"}
{"msg":"@jyellick I think you're not accurate... the `BlockMetadata` is a struct with a `Metadata` field which is just a byte slice slice and each byte slice is its own protobuf, not another `BlockMetadata`","username":"yacovm","ts":"2019-03-18T18:39:25.996Z"}
{"msg":"@jyellick I think you're not being accurate... the `BlockMetadata` is a struct with a `Metadata` field which is just a byte slice slice and each byte slice is its own protobuf, not another `BlockMetadata`","username":"yacovm","ts":"2019-03-18T18:39:25.996Z"}
{"msg":"Sorry... I was a bit sloppy","username":"jyellick","ts":"2019-03-18T18:41:10.740Z"}
{"msg":"Let me fix...","username":"jyellick","ts":"2019-03-18T18:41:17.297Z"}
{"msg":"Fixed","username":"jyellick","ts":"2019-03-18T18:42:29.430Z"}
{"msg":"I still don't think we have a double nesting of `BlockMetadata` ","username":"yacovm","ts":"2019-03-18T18:43:09.220Z"}
{"msg":"```\n\tmetadata.Metadata[common.BlockMetadataIndex_LAST_CONFIG] = protoutil.MarshalOrPanic(&common.LastConfig{\n\t\tIndex: 0,\n\t})\n```","username":"yacovm","ts":"2019-03-18T18:43:18.932Z"}
{"msg":"this is an example ","username":"yacovm","ts":"2019-03-18T18:43:41.779Z"}
{"msg":"```        block.Metadata.Metadata[cb.BlockMetadataIndex_LAST_CONFIG] = protoutil.MarshalOrPanic(&cb.Metadata{\n                Value: lastConfigValue,\n                Signatures: []*cb.MetadataSignature{\n                        lastConfigSignature,\n                },\n        })\n```","username":"jyellick","ts":"2019-03-18T18:43:43.953Z"}
{"msg":"oh.... then I think we have a bug","username":"yacovm","ts":"2019-03-18T18:44:30.356Z"}
{"msg":":joy: ","username":"yacovm","ts":"2019-03-18T18:44:38.729Z"}
{"msg":"https://github.com/hyperledger/fabric/blob/master/orderer/common/cluster/replication.go#L622","username":"yacovm","ts":"2019-03-18T18:45:19.153Z"}
{"msg":"https://github.com/hyperledger/fabric/blob/release-1.4/orderer/common/multichannel/blockwriter.go#L216-L221","username":"jyellick","ts":"2019-03-18T18:45:34.532Z"}
{"msg":"A bug indeed!","username":"jyellick","ts":"2019-03-18T18:45:48.438Z"}
{"msg":"but all our tests work.","username":"yacovm","ts":"2019-03-18T18:46:37.765Z"}
{"msg":"i guess no one validates that","username":"yacovm","ts":"2019-03-18T18:46:41.489Z"}
{"msg":"I would think marshaling would have problems","username":"jyellick","ts":"2019-03-18T18:46:51.560Z"}
{"msg":"I would think un-marshaling would have problems","username":"jyellick","ts":"2019-03-18T18:46:51.560Z"}
{"msg":"right, no one tries","username":"yacovm","ts":"2019-03-18T18:47:02.485Z"}
{"msg":"no one, as in - no code","username":"yacovm","ts":"2019-03-18T18:47:08.169Z"}
{"msg":"Ah","username":"jyellick","ts":"2019-03-18T18:47:10.294Z"}
{"msg":"sigh, I'll open a JIRA and fix now","username":"yacovm","ts":"2019-03-18T18:47:21.132Z"}
{"msg":"This would only be for the genesis block no?","username":"jyellick","ts":"2019-03-18T18:48:01.380Z"}
{"msg":"I suspect that because peers are joined with this block, it bypasses many of the normal checks.  For instance, it does not check the 'block signature' because there is no config to validate it against.  There would similarly be no reason for it to check the last config block, as it must be this block.","username":"jyellick","ts":"2019-03-18T18:49:06.155Z"}
{"msg":"(Just trying to account for why we wouldn't have noticed this in tests)","username":"jyellick","ts":"2019-03-18T18:49:16.798Z"}
{"msg":"> In the event that an orderer starts up, it would first check to see if metadata[0].Value is non-nil. If so, then take the consenter metadata from there.\nok I understand now. ","username":"yacovm","ts":"2019-03-18T18:49:19.775Z"}
{"msg":"and this is backward compatible for peers too even if they don't check it","username":"yacovm","ts":"2019-03-18T18:49:35.647Z"}
{"msg":"Exactly","username":"jyellick","ts":"2019-03-18T18:49:41.364Z"}
{"msg":"why didn't we do it, in the 1st place?","username":"yacovm","ts":"2019-03-18T18:49:50.938Z"}
{"msg":"when we added the additional last config ","username":"yacovm","ts":"2019-03-18T18:50:08.571Z"}
{"msg":">  This would only be for the genesis block no? \nprecisely. and the hash of the blocks onward isn't effected since the hash doesn't depend on the metadata ","username":"yacovm","ts":"2019-03-18T18:50:51.521Z"}
{"msg":"Right, so, basically, we didn't want to require the same 'validation policy' for 'last config' and for 'block validity'","username":"jyellick","ts":"2019-03-18T18:50:58.402Z"}
{"msg":"and why is that?","username":"yacovm","ts":"2019-03-18T18:51:08.656Z"}
{"msg":"In retrospect it was a mistake.","username":"jyellick","ts":"2019-03-18T18:51:17.033Z"}
{"msg":"you thought peers might set it?","username":"yacovm","ts":"2019-03-18T18:51:27.024Z"}
{"msg":"or any orderer on its own?","username":"yacovm","ts":"2019-03-18T18:51:43.163Z"}
{"msg":"No, we thought that in the BFT case we might not want to require f+1 signatures on last config index","username":"jyellick","ts":"2019-03-18T18:51:43.233Z"}
{"msg":"But would want it for block validity","username":"jyellick","ts":"2019-03-18T18:51:50.531Z"}
{"msg":"This was during the time when gossip was going to speculatively share uncommitted blocks.","username":"jyellick","ts":"2019-03-18T18:52:00.539Z"}
{"msg":"but then we went on and used the last config for other stuff in the peer, but not for gossip","username":"yacovm","ts":"2019-03-18T18:52:23.589Z"}
{"msg":"Right... in all, I think we screwed up the metadata stuff pretty thoroughly.","username":"jyellick","ts":"2019-03-18T18:52:42.984Z"}
{"msg":"But, we can consolidate the orderer stuff under this first field, and hopefully fix much of it.","username":"jyellick","ts":"2019-03-18T18:52:58.580Z"}
{"msg":"@yacovm Are you planning to tackle this metadata consolidation thing, or would you like me to?","username":"jyellick","ts":"2019-03-18T20:52:51.387Z"}
{"msg":"I can do it, sure","username":"yacovm","ts":"2019-03-18T21:00:48.345Z"}
{"msg":"put it on my tab","username":"yacovm","ts":"2019-03-18T21:01:03.207Z"}
{"msg":"https://jira.hyperledger.org/browse/FAB-14697","username":"yacovm","ts":"2019-03-18T21:02:41.040Z"}
{"msg":"(will fill the description after I do it)","username":"yacovm","ts":"2019-03-18T21:03:00.726Z"}
{"msg":"@jyellick raised a concern:\n> For reconfiguration, is it possible to go from 2 nodes to 1? I assume so... but I'm concerned about the TLS cert being evicted before we can get consensus on the reconfiguration.\nand I think it's valid, and something i overlooked :( . raft protocol requires removed leader to continue coordinating the follower in this case. etcd itself (not raft lib) provides a config option `--strict-reconfig-check` to \"Reject reconfiguration requests that would cause quorum loss\" and i think we should do the same.","username":"guoger","ts":"2019-03-19T05:21:10.081Z"}
{"msg":"@jyellick raised a concern:\n> For reconfiguration, is it possible to go from 2 nodes to 1? I assume so... but I'm concerned about the TLS cert being evicted before we can get consensus on the reconfiguration.\nand I think it's valid, and something i overlooked :( . raft protocol requires removed leader to continue coordinating the follower in this case.\n(etcd itself (not raft lib) provides a config option `--strict-reconfig-check` to \"Reject reconfiguration requests that would cause quorum loss\")","username":"guoger","ts":"2019-03-19T05:21:10.081Z"}
{"msg":"config is rejected if removal would cause quorum loss *and* removed node is currently leader","username":"guoger","ts":"2019-03-19T05:53:32.400Z"}
{"msg":"config is rejected if removal would cause quorum loss *and* removed node is currently leader. Although I'm still seeing one caveat: we are doing two rounds of consensus for membership change, and if there's a failover in the middle, we fall back to the original problem.","username":"guoger","ts":"2019-03-19T05:53:32.400Z"}
{"msg":"the problem is essentially when the removal affects quorum, the actual quorum size is *not* changed until this config change is applied on quorum, and communication should be maintained","username":"guoger","ts":"2019-03-19T05:53:32.400Z"}
{"msg":"the problem is essentially when the removal affects quorum, the actual quorum size is *not* changed until this config change is applied on quorum, and communication should be maintained (this affects rotation as well)","username":"guoger","ts":"2019-03-19T05:53:32.400Z"}
{"msg":"a short term solution would be to do something similar to cert rotation -- transfer leadership and delay `configureComm`. This does not entirely solve the problem though, in case of node crash and restarts at this point of time. A long term solution would be to alter communication, so that if a node finds itself *not* among consenter set, it still connects to other nodes, and the chain can be halted only if it finds any other node has higher height than itself. obviously other nodes would drop the connection to it once it's removed from their consenter set, and this is fine because cluster is ready to move on.","username":"guoger","ts":"2019-03-19T09:22:21.199Z"}
{"msg":"Short term solution would be to do something similar to cert rotation -- transfer leadership and delay `configureComm`. This does not entirely solve the problem though, in case of node crash and restarts at this point of time.\nLong term solution would be to alter communication, so that if a node finds itself *not* among consenter set, it still connects to other nodes, and the chain can be halted only if it finds any other node has higher height than itself. obviously other nodes would drop the connection to it once it's removed from their consenter set, and this is fine because cluster is ready to move on.","username":"guoger","ts":"2019-03-19T09:22:21.199Z"}
{"msg":"wdyt @yacovm ","username":"guoger","ts":"2019-03-19T09:24:11.229Z"}
{"msg":"I don't understand @guoger ","username":"yacovm","ts":"2019-03-19T09:55:27.096Z"}
{"msg":"> Long term solution would be to alter communication, so that if a node finds itself *not* among consenter set, it still connects to other nodes\nwhat do you mean here","username":"yacovm","ts":"2019-03-19T09:55:32.722Z"}
{"msg":"in the communication you are never aware of yourself","username":"yacovm","ts":"2019-03-19T09:55:41.275Z"}
{"msg":"only of your other nodes","username":"yacovm","ts":"2019-03-19T09:55:44.825Z"}
{"msg":"Ah, so that part is no-op then. We just need to transfer leadership. Also chain should be started if last block evicts itself and it’s required to form quorum, in case other nodes haven’t picked this conf change","username":"guoger","ts":"2019-03-19T10:29:03.615Z"}
{"msg":"@jyellick @yacovm  I divide the bi CR for abort & recovery (Which you both reviewed) into 3 smaller CRs. \n- The first is just renaming structs/vars, with no functional change: https://gerrit.hyperledger.org/r/#/c/30213/\n- The second adds the validation of config updates in the broadcast phase (with the tests that I promised to add later) https://gerrit.hyperledger.org/r/#/c/30216/\n- The third contains the actual abort & recovery logic: https://gerrit.hyperledger.org/r/#/c/29710/\n","username":"tock","ts":"2019-03-19T12:19:33.386Z"}
{"msg":"@jyellick @yacovm  I divide the big CR for abort & recovery (Which you both reviewed) into 3 smaller CRs. \n- The first is just renaming structs/vars, with no functional change: https://gerrit.hyperledger.org/r/#/c/30213/\n- The second adds the validation of config updates in the broadcast phase (with the tests that I promised to add later) https://gerrit.hyperledger.org/r/#/c/30216/\n- The third contains the actual abort & recovery logic: https://gerrit.hyperledger.org/r/#/c/29710/\n","username":"tock","ts":"2019-03-19T12:19:33.386Z"}
{"msg":"@jyellick @yacovm  I divide the big CR for abort & recovery (Which you both reviewed) into 3 smaller CRs. \n- The first is just renaming structs/vars, with no functional change: https://gerrit.hyperledger.org/r/#/c/30213/\n- The second adds the validation of config updates in the broadcast phase (with the tests that I promised to add later) https://gerrit.hyperledger.org/r/#/c/30216/\n- The third contains the actual abort & recovery logic: https://gerrit.hyperledger.org/r/#/c/29710/\nThe third carries all comments and patched so far, the first two are new.\n","username":"tock","ts":"2019-03-19T12:19:33.386Z"}
{"msg":"To all reviewers out there, @yacovm needs a helping hand in reviewing the 5-node BYFN sample: https://gerrit.hyperledger.org/r/#/c/29927/","username":"tock","ts":"2019-03-19T12:22:46.865Z"}
{"msg":"I dontneed a hand, i +2ed","username":"yacovm","ts":"2019-03-19T13:18:57.277Z"}
{"msg":"we need another +2 and merge it.","username":"tock","ts":"2019-03-19T13:32:37.888Z"}
{"msg":"@yacovm Gossip is misbehaving in CI: https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/10666/console","username":"tock","ts":"2019-03-19T13:33:59.496Z"}
{"msg":"Data Race in \n16:05:08 FAIL\tgithub.com/hyperledger/fabric/orderer/common/cluster \nhttps://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/10667/console","username":"tock","ts":"2019-03-19T14:53:15.896Z"}
{"msg":"@C0rWin or @yacovm could you please take a look at  https://gerrit.hyperledger.org/r/c/29954/ and https://gerrit.hyperledger.org/r/c/30114/ to get reviewed and hopefully merged, they have been hanging out for a while and are holding up test.","username":"jyellick","ts":"2019-03-20T19:01:31.455Z"}
{"msg":"I don't understand what's going on in the 2nd one :/ ","username":"yacovm","ts":"2019-03-20T21:30:00.573Z"}
{"msg":"And for @yacovm or @C0rWin again https://gerrit.hyperledger.org/r/c/30177/ and below are all cherry-picks which have been merged on release-1.4, so should be an easy +2 and a merge.","username":"jyellick","ts":"2019-03-21T03:52:25.311Z"}
{"msg":"@yacovm when a node is *removed* from cluster, is it ok *not to* configure communication on remaining nodes? I'm asking because if leader configures communication too fast, the removed node might not be able to pick up this removal quick enough. Even though this node will be eventually suspected and evicted, but i'd like this to be more deterministic.","username":"guoger","ts":"2019-03-21T07:21:27.724Z"}
{"msg":"in particular, if a node does not reconfigure communication to accommodate to removed node, would it cause any unexpected problems?","username":"guoger","ts":"2019-03-21T07:22:31.268Z"}
{"msg":"that's a question you need to ask yourself since communication simply provides you with support of tagging a message with the ID based on the certificate, but I can't think of any attack vector given we never reuse the same ID for different certificates @guoger .","username":"yacovm","ts":"2019-03-21T07:55:11.250Z"}
{"msg":"I see. I was simply concerned if it tries to establish connection in the background and falls into retry loop, since the remote might already exit","username":"guoger","ts":"2019-03-21T08:17:03.601Z"}
{"msg":"@tock I merged byfn update to 5 raft orderers","username":"dave.enyeart","ts":"2019-03-22T00:55:57.577Z"}
{"msg":"could you cherry pick each of the byfn raft updates to release-1.4 fabric-samples?","username":"dave.enyeart","ts":"2019-03-22T00:56:21.894Z"}
{"msg":"BTW, why do we call it RAFT2 in byfn?  https://github.com/hyperledger/fabric-samples/blob/master/first-network/byfn.sh#L504","username":"dave.enyeart","ts":"2019-03-22T01:02:18.035Z"}
{"msg":"Is that something you want to change before initial release?","username":"dave.enyeart","ts":"2019-03-22T01:03:17.498Z"}
{"msg":"just to summarize the discussion in slack a bit: we are solving two problems here:\n- if leader is evicted, transfer leadership then halt\n- if follower is evicted, at least leader should delay reconfiguring communication so that follower can have time to pick up conf change.\nI agree we can defer #1 to v2.0 to avoid \"invasive\" change (it's not invasive in my opinion but i do empathize the paranoia).\nbut i think we should just add a delay, which is simpler than configuring on next block. basically what we would do is:\n- if leader is evicted, leader halts *after* `ElectionTimeout` (it does *not* accept new tx). followers reconfigure communication immediately.\n- if follower is evicted, leader reconfigures comm *after* `ElectionTimeout` (async). remaining followers reconfigure communication immediately, evicted follower halts immediately\n\ni see two problems of reconfiguring on next block:\n- we are relying on evicted leader to coordinate consensus\n- there may not be next block soon in idle network\n\nwdyt @yacovm @jyellick ","username":"guoger","ts":"2019-03-22T01:34:02.343Z"}
{"msg":"just to summarize the discussion in slack a bit: we are solving two problems here:\n- if leader is evicted, transfer leadership then halt\n- if follower is evicted, at least leader should delay reconfiguring communication so that follower can have time to pick up conf change.\nI agree we can defer #1 to v2.0 to avoid \"invasive\" change (it's not invasive in my opinion but i do empathize the paranoia).\nbut i think we should just add a delay, which is simpler than configuring on next block. the minimal change i could think of is:\n- if leader is evicted, leader halts *after* `ElectionTimeout` (it does *not* accept new tx). followers reconfigure communication immediately.\n- if follower is evicted, no change needed\n\ni see two problems of reconfiguring on next block:\n- we are relying on evicted leader to coordinate consensus\n- there may not be next block soon in idle network\n\nwdyt @yacovm @jyellick ","username":"guoger","ts":"2019-03-22T01:34:02.343Z"}
{"msg":"just to summarize the discussion in slack a bit: we are solving two problems here:\n- if leader is evicted, transfer leadership then halt\n- if follower is evicted, at least leader should delay reconfiguring communication so that follower can have time to pick up conf change.\nI agree we can defer #1 to v2.0 to avoid \"invasive\" change (it's not invasive in my opinion but i do empathize the paranoia).\nbut i think we should just add a delay, which is simpler than configuring on next block. the minimal change i could think of is:\n- if leader is evicted, leader halts *after* `ElectionTimeout` (it does *not* accept new tx). no change needed for followers (they still reconfigure immediately).\n- if follower is evicted, no change needed\n\ni see two problems of reconfiguring on next block:\n- we are relying on evicted leader to coordinate consensus\n- there may not be next block soon in idle network\n\nwdyt @yacovm @jyellick ","username":"guoger","ts":"2019-03-22T01:34:02.343Z"}
{"msg":"just to summarize the discussion in slack a bit: we are solving two problems here:\n- if leader is evicted, transfer leadership then halt\n- if follower is evicted, at least leader should delay reconfiguring communication so that follower can have time to pick up conf change.\nI agree we can defer #1 to v2.0 to avoid \"invasive\" change (it's not invasive in my opinion but i do empathize the paranoia).\nbut i think we should just add a delay, which is simpler than configuring on next block. the minimal change i could think of is:\n- if leader is evicted, leader halts *after* `ElectionTimeout` (this is async, and leader does *not* accept new tx in the mean time). no change needed for followers (they still reconfigure immediately).\n- if follower is evicted, no change needed\n\ni see two problems of reconfiguring on next block:\n- we are relying on evicted leader to coordinate consensus\n- there may not be next block soon in idle network\n\nwdyt @yacovm @jyellick ","username":"guoger","ts":"2019-03-22T01:34:02.343Z"}
{"msg":"@jyellick @yacovm this should look less scary: https://gerrit.hyperledger.org/r/c/30297","username":"guoger","ts":"2019-03-22T03:59:44.749Z"}
{"msg":"@dave.enyeart thanks for merging this. I will cherry pick that, sure. the raft2 file is from the previous commit when there were 2 additional raft nodes... now there are 4... I can change that, no problem, ","username":"tock","ts":"2019-03-22T08:22:13.894Z"}
{"msg":"@guoger the code looks fine, and indeed less scary, but - do you remember if we have an integration test that evicts the leader? ;) ","username":"yacovm","ts":"2019-03-22T09:02:25.024Z"}
{"msg":"yes we do. but it's pretty hard to reproduce this problem with integration test actually","username":"guoger","ts":"2019-03-22T09:03:18.902Z"}
{"msg":"on UT, we can filter the messages, and simulate network partition, etc. but not IT :( @yacovm ","username":"guoger","ts":"2019-03-22T09:04:05.968Z"}
{"msg":"why it's hard? find the leader and evict him","username":"yacovm","ts":"2019-03-22T09:04:25.996Z"}
{"msg":"we do have IT","username":"guoger","ts":"2019-03-22T09:04:38.848Z"}
{"msg":"i'm just saying that IT doesn't actually reproduce the problem","username":"guoger","ts":"2019-03-22T09:04:51.764Z"}
{"msg":"it sometimes does no?","username":"yacovm","ts":"2019-03-22T09:04:59.831Z"}
{"msg":"i've never seen one... have you?","username":"guoger","ts":"2019-03-22T09:05:24.112Z"}
{"msg":"plenty of time, that's why I made the evicted node be the leader + 1 mod n","username":"yacovm","ts":"2019-03-22T09:05:58.541Z"}
{"msg":"hmmm, have you by any chance collected log URL or logs?","username":"guoger","ts":"2019-03-22T09:06:47.097Z"}
{"msg":"https://github.com/hyperledger/fabric/blob/release-1.4/integration/e2e/etcdraft_reconfig_test.go#L681-L706","username":"yacovm","ts":"2019-03-22T09:07:08.396Z"}
{"msg":">  hmmm, have you by any chance collected log URL or logs? \nlol, no","username":"yacovm","ts":"2019-03-22T09:07:50.443Z"}
{"msg":"```\n\t\t\tBy(\"Removing the leader from both system channel and application channel\")\n\t\t\tnwo.RemoveConsenter(network, peer, network.Orderers[(evictedNode+1)%3], \"systemchannel\", serverCertBytes)\n```\nare you referring to this?","username":"guoger","ts":"2019-03-22T09:08:03.139Z"}
{"msg":"so the removed node is actually the leader - 1 mod n","username":"yacovm","ts":"2019-03-22T09:08:45.136Z"}
{"msg":"not + 1, i was confused. but same idea","username":"yacovm","ts":"2019-03-22T09:08:55.121Z"}
{"msg":"i am saying that i changed it because evicting the leader broke the test 1 out of 3 times","username":"yacovm","ts":"2019-03-22T09:09:18.342Z"}
{"msg":"ah, so the `By` is not actually accurate. I'll change it back to evict leader","username":"guoger","ts":"2019-03-22T09:09:33.465Z"}
{"msg":"in the past i picked always the first node arbitrary","username":"yacovm","ts":"2019-03-22T09:09:39.212Z"}
{"msg":">  ah, so the `By` is not actually accurate. I'll change it back to evict leader \ncorrect...","username":"yacovm","ts":"2019-03-22T09:09:50.622Z"}
{"msg":"@yacovm wait... the server cert you prepared is still leader\n```\n\t\t\tBy(\"Waiting for them to elect a leader\")\n\t\t\tevictedNode := findLeader(ordererRunners) - 1\n\n\t\t\tBy(\"Removing the leader from system channel\")\n\t\t\tserverCertBytes, err := ioutil.ReadFile(filepath.Join(network.OrdererLocalTLSDir(network.Orderers[evictedNode]), \"server.crt\"))\n\t\t\tExpect(err).To(Not(HaveOccurred()))\n\n\t\t\tBy(\"Removing the leader from both system channel and application channel\")\n\t\t\tnwo.RemoveConsenter(network, peer, network.Orderers[(evictedNode+1)%3], \"systemchannel\", serverCertBytes)\n\t\t\tfmt.Fprintln(GinkgoWriter, \"Ensuring the other orderers detect the eviction of the node on channel\", \"systemchannel\")\n\t\t\tEventually(ordererRunners[(evictedNode+1)%3].Err(), network.EventuallyTimeout, time.Second).Should(gbytes.Say(\"Deactivated node\"))\n\t\t\tEventually(ordererRunners[(evictedNode+2)%3].Err(), network.EventuallyTimeout, time.Second).Should(gbytes.Say(\"Deactivated node\"))\n```\nseems that it still evicts leader, no?","username":"guoger","ts":"2019-03-22T09:20:45.676Z"}
{"msg":"@yacovm wait... the server cert you prepared is still leader\n```\nBy(\"Waiting for them to elect a leader\")\nevictedNode := findLeader(ordererRunners) - 1\n\nBy(\"Removing the leader from system channel\")\nserverCertBytes, err := ioutil.ReadFile(filepath.Join(network.OrdererLocalTLSDir(network.Orderers[evictedNode]), \"server.crt\"))\nExpect(err).To(Not(HaveOccurred()))\n\nBy(\"Removing the leader from both system channel and application channel\")\nnwo.RemoveConsenter(network, peer, network.Orderers[(evictedNode+1)%3], \"systemchannel\", serverCertBytes)\nfmt.Fprintln(GinkgoWriter, \"Ensuring the other orderers detect the eviction of the node on channel\", \"systemchannel\")\nEventually(ordererRunners[(evictedNode+1)%3].Err(), network.EventuallyTimeout, time.Second).Should(gbytes.Say(\"Deactivated node\"))\nEventually(ordererRunners[(evictedNode+2)%3].Err(), network.EventuallyTimeout, time.Second).Should(gbytes.Say(\"Deactivated node\"))\n```\nseems that it still evicts leader, no? @yacovm ","username":"guoger","ts":"2019-03-22T09:20:45.676Z"}
{"msg":"no","username":"yacovm","ts":"2019-03-22T09:26:33.697Z"}
{"msg":"it evicts `leader-1`","username":"yacovm","ts":"2019-03-22T09:26:42.533Z"}
{"msg":"and sends the config update to `leader+1`","username":"yacovm","ts":"2019-03-22T09:26:49.702Z"}
{"msg":"`evictedNode := findLeader(ordererRunners) - 1` is the *index* of leader, and the cert is read from `network.OrdererLocalTLSDir(network.Orderers[evictedNode]`, which is also the leader","username":"guoger","ts":"2019-03-22T09:28:50.097Z"}
{"msg":"and if you inspect the log of that test, it *does* evicts leader. @yacovm ","username":"guoger","ts":"2019-03-22T09:29:14.131Z"}
{"msg":"and if you inspect the log of that test, it *does* evict leader. @yacovm ","username":"guoger","ts":"2019-03-22T09:29:14.131Z"}
{"msg":"`findLeader(ordererRunners)` returns the raft node id, which is index+1","username":"guoger","ts":"2019-03-22T09:29:56.082Z"}
{"msg":"but the cert it removes is `leader -1` no?","username":"yacovm","ts":"2019-03-22T09:30:22.020Z"}
{"msg":"`nwo.RemoveConsenter` basically compare certs in the list and cert provided, and removes it. so it's really removing `filepath.Join(network.OrdererLocalTLSDir(network.Orderers[evictedNode]`, which is leader","username":"guoger","ts":"2019-03-22T09:31:53.294Z"}
{"msg":"`nwo.RemoveConsenter` basically compares certs in the list and cert provided, and removes it. so it's really removing `filepath.Join(network.OrdererLocalTLSDir(network.Orderers[evictedNode]`, which is leader","username":"guoger","ts":"2019-03-22T09:31:53.294Z"}
{"msg":"but `evictedNode := findLeader(ordererRunners) - 1`","username":"yacovm","ts":"2019-03-22T09:32:45.925Z"}
{"msg":"so it's not the leader.. what am i missing?","username":"yacovm","ts":"2019-03-22T09:32:57.616Z"}
{"msg":"`findLeader(ordererRunners)` returns the *raft node ID*, which starts from 1 (not 0)","username":"guoger","ts":"2019-03-22T09:34:45.292Z"}
{"msg":"oh... right","username":"yacovm","ts":"2019-03-22T09:34:55.195Z"}
{"msg":"ok so it means it always works then, no?","username":"yacovm","ts":"2019-03-22T09:35:42.446Z"}
{"msg":"in the tests","username":"yacovm","ts":"2019-03-22T09:35:49.449Z"}
{"msg":"what is the scenario you had in mind?","username":"yacovm","ts":"2019-03-22T09:35:54.037Z"}
{"msg":"yep, it always worked, because the corner case we are solving here is pretty hard to reproduce: \n> evicted leader halts too fast, and hasn't had chance to instruct followers to commit the raft config change (which removes leader)","username":"guoger","ts":"2019-03-22T09:38:04.797Z"}
{"msg":"if, in this case, remaining nodes can still form a quorum, we are fine because they eventually figures this out.","username":"guoger","ts":"2019-03-22T09:38:49.826Z"}
{"msg":"however, if we are going from 2 -> 1, or 3/4 -> 2/3 (where 3/4 denotes 3 active nodes out of 4 in total), then we have a problem in this case","username":"guoger","ts":"2019-03-22T09:40:22.018Z"}
{"msg":"so the leader should transfer the leader ship before halt (the \"scary\" CR). But we could halt with delay for the sake of simplicity (current CR) @yacovm ","username":"guoger","ts":"2019-03-22T09:42:31.535Z"}
{"msg":"by figuring out eventually you mean that even if a node is too slow and is behind, the leader is evicted and there will be a new leader election where the leader would update the slow node, right? @guoger ","username":"yacovm","ts":"2019-03-22T09:52:10.172Z"}
{"msg":"and now when i think about what i said earlier - maybe it was the opposite actually, i think i made it explicit to remove the leader because sometimes removing a follower made it that the follower didn't get the update in time and the rest black-listed it.","username":"yacovm","ts":"2019-03-22T09:52:54.119Z"}
{"msg":"but i still don't understand why we can't have an integration test that moves from 2 to 1","username":"yacovm","ts":"2019-03-22T09:53:26.650Z"}
{"msg":"just to see that it works.... ","username":"yacovm","ts":"2019-03-22T09:53:30.807Z"}
{"msg":"what do you thikn?","username":"yacovm","ts":"2019-03-22T09:53:32.968Z"}
{"msg":"what do you think?","username":"yacovm","ts":"2019-03-22T09:53:32.968Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=xQ5y6zHhwHgtAxG4m) @yacovm To be more accurate, even if slow nodes haven't applied conf change, at least 1 of 2 nodes has that conf change in storage, it just hasn't been instructed to commit it yet. So when leader halts, it ceases to send out heartbeats, and eventually a new leader gets elected, and continues the effort to commit the config change, and everything is ok","username":"guoger","ts":"2019-03-22T09:56:35.567Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=xQ5y6zHhwHgtAxG4m","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=xQ5y6zHhwHgtAxG4m","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=H4ng9GecwhZubFK9N) @yacovm I did and it works, again, because evicted leader never halts that fast","username":"guoger","ts":"2019-03-22T09:56:56.727Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=H4ng9GecwhZubFK9N","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=H4ng9GecwhZubFK9N","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@yacovm if a chain is halted, there's no `inactiveChain` created for it, correct?","username":"guoger","ts":"2019-03-22T10:34:57.358Z"}
{"msg":"also, what's the default interval of checking if an inactive chain is part of channel?","username":"guoger","ts":"2019-03-22T10:47:54.869Z"}
{"msg":"also, what's the default interval of checking if an inactive node is part of channel?","username":"guoger","ts":"2019-03-22T10:47:54.869Z"}
{"msg":"~also, what's the default interval of checking if an inactive node is part of channel?~ got it, hardcode to 10 sec and exponentially increase up to 5 min","username":"guoger","ts":"2019-03-22T10:47:54.869Z"}
{"msg":"it's created at startup","username":"yacovm","ts":"2019-03-22T10:54:52.851Z"}
{"msg":"@guoger @yacovm Trying to catch up here, but to summarize, it sounds like we're going to go with the simple 'delay' for now.  Obviously we can test this in UT.  If we added a 2->1 test in IT, would that cover us?","username":"jyellick","ts":"2019-03-22T13:57:58.268Z"}
{"msg":"yes i believe so","username":"yacovm","ts":"2019-03-22T15:39:41.619Z"}
{"msg":"sure, I'll add an IT as well (or maybe just piggyback an existing one)","username":"guoger","ts":"2019-03-22T17:48:55.387Z"}
{"msg":"+1, let's please try to extend existing e2e tests instead of creating entirely new ones where possible.","username":"jyellick","ts":"2019-03-22T18:05:09.249Z"}
{"msg":"Once release-1.4 is done, I'd actually like for us to look at consolidating as many of these Raft e2es into a single instance as is reasonable.","username":"jyellick","ts":"2019-03-22T18:05:53.680Z"}
{"msg":"Once release-1.4 is done, I'd actually like for us to look at consolidating as many of these Raft e2es into as few networks as is reasonable.","username":"jyellick","ts":"2019-03-22T18:05:53.680Z"}
{"msg":"Once v1.4.1 done, I'd actually like for us to look at consolidating as many of these Raft e2es into as few networks as is reasonable.","username":"jyellick","ts":"2019-03-22T18:05:53.680Z"}
{"msg":"Once v1.4.1 is out, I'd actually like for us to look at consolidating as many of these Raft e2es into as few networks as is reasonable.","username":"jyellick","ts":"2019-03-22T18:05:53.680Z"}
{"msg":">  +1, let's please try to extend existing e2e tests instead of creating entirely new ones where possible. \n@jyellick this should be a test that runs 15 seconds tops...","username":"yacovm","ts":"2019-03-22T18:35:09.767Z"}
{"msg":">  +1, let's please try to extend existing e2e tests instead of creating entirely new ones where possible. \n @jyellick this should be a test that runs 15 seconds tops... ","username":"yacovm","ts":"2019-03-22T18:35:09.767Z"}
{"msg":">  +1, let's please try to extend existing e2e tests instead of creating entirely new ones where possible. \n   @jyellick  this should be a test that runs 15 seconds tops... ","username":"yacovm","ts":"2019-03-22T18:35:09.767Z"}
{"msg":">  +1, let's please try to extend existing e2e tests instead of creating entirely new ones where possible. \n\n this should be a test that runs 15 seconds tops... @jyellick ","username":"yacovm","ts":"2019-03-22T18:35:09.767Z"}
{"msg":"in the tests we usually test with 3 nodes... any test that we change would make us run with 2, no?","username":"yacovm","ts":"2019-03-22T18:37:16.335Z"}
{"msg":"@guoger  maybe you can extend https://github.com/hyperledger/fabric/blob/master/integration/e2e/etcdraft_reconfig_test.go#L683 ","username":"yacovm","ts":"2019-03-22T18:37:33.677Z"}
{"msg":"and remove the 2nd node?","username":"yacovm","ts":"2019-03-22T18:37:52.112Z"}
{"msg":"(the leader)","username":"yacovm","ts":"2019-03-22T18:37:56.961Z"}
{"msg":"it should only add like a few seconds to total runtime","username":"yacovm","ts":"2019-03-22T18:38:10.447Z"}
{"msg":"Exactly, @yacovm the heavyweight process of the integration tests is generating all the artifacts, starting all the processes, etc.  Once the network is up, we should be able to reconfigure it to 2 nodes, then to 1 in a fairly trivial amount of time","username":"jyellick","ts":"2019-03-22T19:24:00.373Z"}
{"msg":"but isn't the generation done once for the entire suite @jyellick ?","username":"yacovm","ts":"2019-03-22T19:24:25.587Z"}
{"msg":"of the binaries","username":"yacovm","ts":"2019-03-22T19:24:45.135Z"}
{"msg":"i think that generating the artifcats is not much time","username":"yacovm","ts":"2019-03-22T19:24:55.374Z"}
{"msg":"most time is compilation of our binaries i think","username":"yacovm","ts":"2019-03-22T19:25:01.981Z"}
{"msg":"The binary compilation happens once per suite","username":"jyellick","ts":"2019-03-22T19:25:21.415Z"}
{"msg":"The binary compilation happens once for the whole suite","username":"jyellick","ts":"2019-03-22T19:25:21.415Z"}
{"msg":"I am more thinking the generation of the config blocks, the generation of channel creation transactions, of crypto materials, starting the processes up, waiting for them to synchronize and begin accepting requests etc.","username":"jyellick","ts":"2019-03-22T19:26:07.213Z"}
{"msg":"ok","username":"yacovm","ts":"2019-03-22T19:26:21.130Z"}
{"msg":"Has joined the channel.","username":"yanli133","ts":"2019-03-25T06:55:16.218Z","type":"uj"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=LMtnyLgYMHrFRxDpj) @dave.enyeart @dave.enyeart @jyellick @yacovm  I cherry-picked the BYFN Raft sample to release-1.4, please review. \nhttps://gerrit.hyperledger.org/r/#/c/30347/  &  https://gerrit.hyperledger.org/r/#/c/30348/\n","username":"tock","ts":"2019-03-25T07:39:54.342Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=LMtnyLgYMHrFRxDpj","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=LMtnyLgYMHrFRxDpj","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=LMtnyLgYMHrFRxDpj) @dave.enyeart @jyellick @yacovm  I cherry-picked the BYFN Raft sample to release-1.4, please review. \nhttps://gerrit.hyperledger.org/r/#/c/30347/  &  https://gerrit.hyperledger.org/r/#/c/30348/\n","username":"tock","ts":"2019-03-25T07:39:54.342Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=LMtnyLgYMHrFRxDpj","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=LMtnyLgYMHrFRxDpj","remote":true,"fileId":null,"fileName":null}]}
{"msg":"when an inactive chain is added to a channel, users might want it to participate in consensus more quickly, and might want to tune `ReplicationBackgroundRefreshInterval`. Should we expose this config as well? @yacovm ","username":"guoger","ts":"2019-03-25T07:44:57.694Z"}
{"msg":"@yacovm any reason why don't we want to expose this? and i've left a comment on Joe's configuration doc, thinking we should at least note this down, so that impatient user can restart node to force catch up","username":"guoger","ts":"2019-03-25T14:00:06.563Z"}
{"msg":"also, i think we still have one thing to decide on: `Raft` vs `EtcdRaft`, which to use in our codebase/comments/logs/docs","username":"guoger","ts":"2019-03-25T14:00:35.860Z"}
{"msg":"also, i think we still have one thing to decide on: `Raft` vs `EtcdRaft`, which to use in our codebase/comments/logs/docs, cc @jyellick @yacovm @C0rWin and other folks in this channel","username":"guoger","ts":"2019-03-25T14:00:35.860Z"}
{"msg":"I don't want to expose this because it's a tradeoff between how frequent you poll and waste resources vs. how fast you are added to the channel","username":"yacovm","ts":"2019-03-25T14:35:09.972Z"}
{"msg":"you only add new OSNs very very rarely","username":"yacovm","ts":"2019-03-25T14:35:34.884Z"}
{"msg":"and you anyway do this with coordination and out of band discussions","username":"yacovm","ts":"2019-03-25T14:35:50.588Z"}
{"msg":"so 5 minutes is a small price to pay","username":"yacovm","ts":"2019-03-25T14:35:55.740Z"}
{"msg":"where do we guard against invalid raft options in channel creation tx? @jyellick ","username":"guoger","ts":"2019-03-26T04:05:12.206Z"}
{"msg":"@guoger Channel creation is the same path as a channel config update, from a config processing point of view.  However, I know some of the validation for the Raft options is done in the Raft package rather than in the mainline config path, so this bears some investigation.","username":"jyellick","ts":"2019-03-26T04:20:54.002Z"}
{"msg":"i'm investigating and i fear it's not validated :(","username":"guoger","ts":"2019-03-26T04:21:30.251Z"}
{"msg":"if user submits a malformed channel creation tx, i.e. invalid consenter set, orderer panics while trying to create new chain","username":"guoger","ts":"2019-03-26T04:22:16.558Z"}
{"msg":"Obviously we cannot address a larger refactor for v1.4.1, but this is (yet another) good argument for why we should not be half-implementing configtx processing in the Raft package.","username":"jyellick","ts":"2019-03-26T04:23:24.482Z"}
{"msg":"Obviously we cannot contain a larger refactor for v1.4.1, but this is (yet another) good argument for why we should not be half-implementing configtx processing in the Raft package.","username":"jyellick","ts":"2019-03-26T04:23:24.482Z"}
{"msg":"Can you take it as a task to also validate the channel create tx consenter sets?","username":"jyellick","ts":"2019-03-26T04:23:58.398Z"}
{"msg":"working on it","username":"guoger","ts":"2019-03-26T04:24:15.000Z"}
{"msg":"yeah.. we should've injected a validator to configtx processor","username":"guoger","ts":"2019-03-26T04:24:45.057Z"}
{"msg":"sometimes, we may need some knowledge of current cluster status to validate configtx, i.e. don't allow node addition/removal if cluster quorum is lost, but this should be in another category","username":"guoger","ts":"2019-03-26T04:25:38.943Z"}
{"msg":"I still think this could easily be done in a plugin structure.  We have the `ValidateNew` concept which takes as input the old and new configurations","username":"jyellick","ts":"2019-03-26T04:26:12.204Z"}
{"msg":"oh, so we feed `ValidateNew` with current status?","username":"guoger","ts":"2019-03-26T04:26:56.795Z"}
{"msg":"`ValidateNew` is an operation on the current config with the parameter being the new config, as things are structured today.","username":"jyellick","ts":"2019-03-26T04:27:46.923Z"}
{"msg":"This is the plug point for instance where we disallow change of consensus type","username":"jyellick","ts":"2019-03-26T04:28:15.397Z"}
{"msg":"oh, what i meant was more of _\"dynamic config\"_, where *both* last configs *and* current runtime status are needed to validate new config","username":"guoger","ts":"2019-03-26T04:29:48.475Z"}
{"msg":"Oh, you need the status beyond what is in the current configuration?","username":"jyellick","ts":"2019-03-26T04:30:17.789Z"}
{"msg":"not in current code, but for example, we can disallow addition/removal/rotation if cluster is at minimal quorum","username":"guoger","ts":"2019-03-26T04:30:59.547Z"}
{"msg":"I'm sure we could figure out a scheme to address this, though probably not worth focusing too much on for the moment.","username":"jyellick","ts":"2019-03-26T04:31:39.435Z"}
{"msg":"@jyellick @guoger While Jay works on a quick fix for v1.4.1 on guarding against invalid raft options in channel creation tx, I can volunteer to look at the config refactoring to move validation of the Raft options out of the Raft package to the mainline config path. ","username":"adarshsaraf123","ts":"2019-03-26T06:21:36.706Z"}
{"msg":"@jyellick @guoger While Jay works on a fix for v1.4.1 on guarding against invalid raft options in channel creation tx, I can volunteer to look at the config refactoring to move validation of the Raft options out of the Raft package to the mainline config path. ","username":"adarshsaraf123","ts":"2019-03-26T06:21:36.706Z"}
{"msg":"@guoger @C0rWin @yacovm @tock @adarshsaraf123 We are trying to (hopefully) close down a v1.4.1-rc here in the next 24 hours or so, so we need to make sure we get through these reviews.  Below is the list of outstanding CRs.  If I've missed something of yours, please speak up.\n\nJay:\nhttps://gerrit.hyperledger.org/r/c/30297/ -- FAB-14764 halt with delay if it's removed as leader\nhttps://gerrit.hyperledger.org/r/c/30270/ -- FAB-14745 more harsh snapshot integration test (Has 2+2)\nhttps://gerrit.hyperledger.org/r/c/30299/ -- FAB-14766 improve logs text for serviceability\nhttps://gerrit.hyperledger.org/r/c/30423/ -- FAB-14822 change func signature of CreateChannelFail\nhttps://gerrit.hyperledger.org/r/c/30424/ -- FAB-14821 validate Raft config metadata\nhttps://gerrit.hyperledger.org/r/c/30455/ -- FAB-14840 check Raft config for HeaderType_CONFIG\nhttps://gerrit.hyperledger.org/r/c/30425/ -- FAB-14824 add integration test\n\nYacov:\nhttps://gerrit.hyperledger.org/r/c/30372/ -- [FAB-14796] Warn about cert expiration - Part I\nhttps://gerrit.hyperledger.org/r/c/30441/ -- [FAB-14802] Warn about cert expiration - Part II\n\nJoe:\nhttps://gerrit.hyperledger.org/r/c/30426/ -- [FAB-14404] Add Raft command to BYFN","username":"jyellick","ts":"2019-03-27T14:50:52.417Z"}
{"msg":"@guoger @C0rWin @yacovm @tock @adarshsaraf123 @joe-alewine We are trying to (hopefully) close down a v1.4.1-rc here in the next 24 hours or so, so we need to make sure we get through these reviews.  Below is the list of outstanding CRs.  If I've missed something of yours, please speak up.\n\nJay:\nhttps://gerrit.hyperledger.org/r/c/30297/ -- FAB-14764 halt with delay if it's removed as leader\nhttps://gerrit.hyperledger.org/r/c/30270/ -- FAB-14745 more harsh snapshot integration test (Has 2+2)\nhttps://gerrit.hyperledger.org/r/c/30299/ -- FAB-14766 improve logs text for serviceability\nhttps://gerrit.hyperledger.org/r/c/30423/ -- FAB-14822 change func signature of CreateChannelFail\nhttps://gerrit.hyperledger.org/r/c/30424/ -- FAB-14821 validate Raft config metadata\nhttps://gerrit.hyperledger.org/r/c/30455/ -- FAB-14840 check Raft config for HeaderType_CONFIG\nhttps://gerrit.hyperledger.org/r/c/30425/ -- FAB-14824 add integration test\n\nYacov:\nhttps://gerrit.hyperledger.org/r/c/30372/ -- [FAB-14796] Warn about cert expiration - Part I\nhttps://gerrit.hyperledger.org/r/c/30441/ -- [FAB-14802] Warn about cert expiration - Part II\n\nJoe:\nhttps://gerrit.hyperledger.org/r/c/30426/ -- [FAB-14404] Add Raft command to BYFN","username":"jyellick","ts":"2019-03-27T14:50:52.417Z"}
{"msg":"@guoger @C0rWin @yacovm @tock @adarshsaraf123 @joe-alewine We are trying to (hopefully) close down a v1.4.1-rc here in the next 24 hours or so, so we need to make sure we get through these reviews.  Below is the list of outstanding CRs.  If I've missed something of yours, please speak up.\n\nJay:\nhttps://gerrit.hyperledger.org/r/c/30297/ -- FAB-14764 halt with delay if it's removed as leader\nhttps://gerrit.hyperledger.org/r/c/30270/ -- FAB-14745 more harsh snapshot integration test (Has 2+2)\nhttps://gerrit.hyperledger.org/r/c/30299/ -- FAB-14766 improve logs text for serviceability\nhttps://gerrit.hyperledger.org/r/c/30423/ -- FAB-14822 change func signature of CreateChannelFail\nhttps://gerrit.hyperledger.org/r/c/30424/ -- FAB-14821 validate Raft config metadata\nhttps://gerrit.hyperledger.org/r/c/30455/ -- FAB-14840 check Raft config for HeaderType_CONFIG\nhttps://gerrit.hyperledger.org/r/c/30425/ -- FAB-14824 add integration test\n\nYacov:\nhttps://gerrit.hyperledger.org/r/c/30372/ -- [FAB-14796] Warn about cert expiration - Part I\nhttps://gerrit.hyperledger.org/r/c/30441/ -- [FAB-14802] Warn about cert expiration - Part II\n\nJoe:\nhttps://gerrit.hyperledger.org/r/c/30426/ -- [FAB-14404] Add Raft command to BYFN\nhttps://gerrit.hyperledger.org/r/c/29449/ -- Orderer concept (needs to be cherry-picked to release-1.4)\nhttps://gerrit.hyperledger.org/r/c/30010/ -- Configure Raft (needs to be cherry-picked to release-1.4)\nhttps://gerrit.hyperledger.org/r/c/30242/ -- Stand up orderer node (implementation agnostic) (needs to be cherry-picked to release-1.4)","username":"jyellick","ts":"2019-03-27T14:50:52.417Z"}
{"msg":"@guoger @C0rWin @yacovm @tock @adarshsaraf123 @joe-alewine We are trying to (hopefully) close down a v1.4.1-rc here in the next 24 hours or so, so we need to make sure we get through these reviews.  Below is the list of outstanding CRs.  If I've missed something of yours, please speak up.\n\nJay:\nhttps://gerrit.hyperledger.org/r/c/30297/ -- FAB-14764 halt with delay if it's removed as leader\nhttps://gerrit.hyperledger.org/r/c/30270/ -- FAB-14745 more harsh snapshot integration test (Has 2+2)\nhttps://gerrit.hyperledger.org/r/c/30299/ -- FAB-14766 improve logs text for serviceability\nhttps://gerrit.hyperledger.org/r/c/30423/ -- FAB-14822 change func signature of CreateChannelFail\nhttps://gerrit.hyperledger.org/r/c/30424/ -- FAB-14821 validate Raft config metadata\nhttps://gerrit.hyperledger.org/r/c/30455/ -- FAB-14840 check Raft config for HeaderType_CONFIG\nhttps://gerrit.hyperledger.org/r/c/30425/ -- FAB-14824 add integration test\n\nYacov:\nhttps://gerrit.hyperledger.org/r/c/30372/ -- [FAB-14796] Warn about cert expiration - Part I\nhttps://gerrit.hyperledger.org/r/c/30441/ -- [FAB-14802] Warn about cert expiration - Part II\n\nJoe:\nhttps://gerrit.hyperledger.org/r/c/30426/ -- [FAB-14404] Add Raft command to BYFN\n~https://gerrit.hyperledger.org/r/c/29449/ -- Orderer concept~ (needs to be cherry-picked to release-1.4)\nhttps://gerrit.hyperledger.org/r/c/30010/ -- Configure Raft (needs to be cherry-picked to release-1.4)\nhttps://gerrit.hyperledger.org/r/c/30242/ -- Stand up orderer node (implementation agnostic) (needs to be cherry-picked to release-1.4)","username":"jyellick","ts":"2019-03-27T14:50:52.417Z"}
{"msg":"@guoger @C0rWin @yacovm @tock @adarshsaraf123 @joe-alewine We are trying to (hopefully) close down a v1.4.1-rc here in the next 24 hours or so, so we need to make sure we get through these reviews.  Below is the list of outstanding CRs.  If I've missed something of yours, please speak up.\n\nJay:\nhttps://gerrit.hyperledger.org/r/c/30297/ -- FAB-14764 halt with delay if it's removed as leader\nhttps://gerrit.hyperledger.org/r/c/30270/ -- FAB-14745 more harsh snapshot integration test (Has 2+2)\nhttps://gerrit.hyperledger.org/r/c/30299/ -- FAB-14766 improve logs text for serviceability\nhttps://gerrit.hyperledger.org/r/c/30423/ -- FAB-14822 change func signature of CreateChannelFail\nhttps://gerrit.hyperledger.org/r/c/30424/ -- FAB-14821 validate Raft config metadata\nhttps://gerrit.hyperledger.org/r/c/30455/ -- FAB-14840 check Raft config for HeaderType_CONFIG\nhttps://gerrit.hyperledger.org/r/c/30425/ -- FAB-14824 add integration test\n\nYacov:\nhttps://gerrit.hyperledger.org/r/c/30372/ -- [FAB-14796] Warn about cert expiration - Part I\nhttps://gerrit.hyperledger.org/r/c/30441/ -- [FAB-14802] Warn about cert expiration - Part II\n\nJoe:\nhttps://gerrit.hyperledger.org/r/c/30426/ -- [FAB-14404] Add Raft command to BYFN\n~https://gerrit.hyperledger.org/r/c/29449/ -- Orderer concept~ (needs to be cherry-picked to release-1.4)\n~https://gerrit.hyperledger.org/r/c/30010/ -- Configure Raft~ (needs to be cherry-picked to release-1.4)\nhttps://gerrit.hyperledger.org/r/c/30242/ -- Stand up orderer node (implementation agnostic) (needs to be cherry-picked to release-1.4)","username":"jyellick","ts":"2019-03-27T14:50:52.417Z"}
{"msg":"@guoger @C0rWin @yacovm @tock @adarshsaraf123 @joe-alewine We are trying to (hopefully) close down a v1.4.1-rc here in the next 24 hours or so, so we need to make sure we get through these reviews.  Below is the list of outstanding CRs.  If I've missed something of yours, please speak up.\n\nJay:\n~https://gerrit.hyperledger.org/r/c/30297/ -- FAB-14764 halt with delay if it's removed as leader~\n~https://gerrit.hyperledger.org/r/c/30270/ -- FAB-14745 more harsh snapshot integration test (Has 2+2)~\n~https://gerrit.hyperledger.org/r/c/30299/ -- FAB-14766 improve logs text for serviceability~\nhttps://gerrit.hyperledger.org/r/c/30423/ -- FAB-14822 change func signature of CreateChannelFail\nhttps://gerrit.hyperledger.org/r/c/30424/ -- FAB-14821 validate Raft config metadata\nhttps://gerrit.hyperledger.org/r/c/30455/ -- FAB-14840 check Raft config for HeaderType_CONFIG\nhttps://gerrit.hyperledger.org/r/c/30425/ -- FAB-14824 add integration test\n\nYacov:\nhttps://gerrit.hyperledger.org/r/c/30372/ -- [FAB-14796] Warn about cert expiration - Part I\nhttps://gerrit.hyperledger.org/r/c/30441/ -- [FAB-14802] Warn about cert expiration - Part II\n\nJoe:\nhttps://gerrit.hyperledger.org/r/c/30426/ -- [FAB-14404] Add Raft command to BYFN\n~https://gerrit.hyperledger.org/r/c/29449/ -- Orderer concept~ (needs to be cherry-picked to release-1.4)\n~https://gerrit.hyperledger.org/r/c/30010/ -- Configure Raft~ (needs to be cherry-picked to release-1.4)\nhttps://gerrit.hyperledger.org/r/c/30242/ -- Stand up orderer node (implementation agnostic) (needs to be cherry-picked to release-1.4)","username":"jyellick","ts":"2019-03-27T14:50:52.417Z"}
{"msg":"@guoger @C0rWin @yacovm @tock @adarshsaraf123 @joe-alewine We are trying to (hopefully) close down a v1.4.1-rc here in the next 24 hours or so, so we need to make sure we get through these reviews.  Below is the list of outstanding CRs.  If I've missed something of yours, please speak up.\n\nJay:\n~https://gerrit.hyperledger.org/r/c/30297/ -- FAB-14764 halt with delay if it's removed as leader~\n~https://gerrit.hyperledger.org/r/c/30270/ -- FAB-14745 more harsh snapshot integration test (Has 2+2)~\n~https://gerrit.hyperledger.org/r/c/30299/ -- FAB-14766 improve logs text for serviceability~\nhttps://gerrit.hyperledger.org/r/c/30423/ -- FAB-14822 change func signature of CreateChannelFail\nhttps://gerrit.hyperledger.org/r/c/30424/ -- FAB-14821 validate Raft config metadata\nhttps://gerrit.hyperledger.org/r/c/30455/ -- FAB-14840 check Raft config for HeaderType_CONFIG\nhttps://gerrit.hyperledger.org/r/c/30425/ -- FAB-14824 add integration test\n\nYacov:\n~https://gerrit.hyperledger.org/r/c/30372/ -- [FAB-14796] Warn about cert expiration - Part I~\n~https://gerrit.hyperledger.org/r/c/30441/ -- [FAB-14802] Warn about cert expiration - Part II~\n\nJoe:\nhttps://gerrit.hyperledger.org/r/c/30426/ -- [FAB-14404] Add Raft command to BYFN\n~https://gerrit.hyperledger.org/r/c/29449/ -- Orderer concept~ (needs to be cherry-picked to release-1.4)\n~https://gerrit.hyperledger.org/r/c/30010/ -- Configure Raft~ (needs to be cherry-picked to release-1.4)\nhttps://gerrit.hyperledger.org/r/c/30242/ -- Stand up orderer node (implementation agnostic) (needs to be cherry-picked to release-1.4)","username":"jyellick","ts":"2019-03-27T14:50:52.417Z"}
{"msg":"@guoger @C0rWin @yacovm @tock @adarshsaraf123 @joe-alewine We are trying to (hopefully) close down a v1.4.1-rc here in the next 24 hours or so, so we need to make sure we get through these reviews.  Below is the list of outstanding CRs.  If I've missed something of yours, please speak up.\n\nJay:\n~https://gerrit.hyperledger.org/r/c/30297/ -- FAB-14764 halt with delay if it's removed as leader~\n~https://gerrit.hyperledger.org/r/c/30270/ -- FAB-14745 more harsh snapshot integration test (Has 2+2)~\n~https://gerrit.hyperledger.org/r/c/30299/ -- FAB-14766 improve logs text for serviceability~\n~https://gerrit.hyperledger.org/r/c/30423/ -- FAB-14822 change func signature of CreateChannelFail~\n~https://gerrit.hyperledger.org/r/c/30424/ -- FAB-14821 validate Raft config metadata~\n~https://gerrit.hyperledger.org/r/c/30455/ -- FAB-14840 check Raft config for HeaderType_CONFIG~\nhttps://gerrit.hyperledger.org/r/c/30425/ -- FAB-14824 add integration test\n\nYacov:\n~https://gerrit.hyperledger.org/r/c/30372/ -- [FAB-14796] Warn about cert expiration - Part I~\n~https://gerrit.hyperledger.org/r/c/30441/ -- [FAB-14802] Warn about cert expiration - Part II~\n\nJoe:\nhttps://gerrit.hyperledger.org/r/c/30426/ -- [FAB-14404] Add Raft command to BYFN\n~https://gerrit.hyperledger.org/r/c/29449/ -- Orderer concept~ (needs to be cherry-picked to release-1.4)\n~https://gerrit.hyperledger.org/r/c/30010/ -- Configure Raft~ (needs to be cherry-picked to release-1.4)\nhttps://gerrit.hyperledger.org/r/c/30242/ -- Stand up orderer node (implementation agnostic) (needs to be cherry-picked to release-1.4)","username":"jyellick","ts":"2019-03-27T14:50:52.417Z"}
{"msg":"@guoger @C0rWin @yacovm @tock @adarshsaraf123 @joe-alewine We are trying to (hopefully) close down a v1.4.1-rc here in the next 24 hours or so, so we need to make sure we get through these reviews.  Below is the list of outstanding CRs.  If I've missed something of yours, please speak up.\n\nJay:\n~https://gerrit.hyperledger.org/r/c/30297/ -- FAB-14764 halt with delay if it's removed as leader~\n~https://gerrit.hyperledger.org/r/c/30270/ -- FAB-14745 more harsh snapshot integration test (Has 2+2)~\n~https://gerrit.hyperledger.org/r/c/30299/ -- FAB-14766 improve logs text for serviceability~\n~https://gerrit.hyperledger.org/r/c/30423/ -- FAB-14822 change func signature of CreateChannelFail~\n~https://gerrit.hyperledger.org/r/c/30424/ -- FAB-14821 validate Raft config metadata~\n~https://gerrit.hyperledger.org/r/c/30455/ -- FAB-14840 check Raft config for HeaderType_CONFIG~\nhttps://gerrit.hyperledger.org/r/c/30425/ -- FAB-14824 add integration test\n\nYacov:\n~https://gerrit.hyperledger.org/r/c/30372/ -- [FAB-14796] Warn about cert expiration - Part I~\n~https://gerrit.hyperledger.org/r/c/30441/ -- [FAB-14802] Warn about cert expiration - Part II~\nhttps://gerrit.hyperledger.org/r/c/30486/\n\nJoe:\nhttps://gerrit.hyperledger.org/r/c/30426/ -- [FAB-14404] Add Raft command to BYFN\n~https://gerrit.hyperledger.org/r/c/29449/ -- Orderer concept~ (needs to be cherry-picked to release-1.4)\n~https://gerrit.hyperledger.org/r/c/30010/ -- Configure Raft~ (needs to be cherry-picked to release-1.4)\nhttps://gerrit.hyperledger.org/r/c/30242/ -- Stand up orderer node (implementation agnostic) (needs to be cherry-picked to release-1.4)","username":"jyellick","ts":"2019-03-27T14:50:52.417Z"}
{"msg":"@guoger @C0rWin @yacovm @tock @adarshsaraf123 @joe-alewine We are trying to (hopefully) close down a v1.4.1-rc here in the next 24 hours or so, so we need to make sure we get through these reviews.  Below is the list of outstanding CRs.  If I've missed something of yours, please speak up.\n\nJay:\n~https://gerrit.hyperledger.org/r/c/30297/ -- FAB-14764 halt with delay if it's removed as leader~\n~https://gerrit.hyperledger.org/r/c/30270/ -- FAB-14745 more harsh snapshot integration test (Has 2+2)~\n~https://gerrit.hyperledger.org/r/c/30299/ -- FAB-14766 improve logs text for serviceability~\n~https://gerrit.hyperledger.org/r/c/30423/ -- FAB-14822 change func signature of CreateChannelFail~\n~https://gerrit.hyperledger.org/r/c/30424/ -- FAB-14821 validate Raft config metadata~\n~https://gerrit.hyperledger.org/r/c/30455/ -- FAB-14840 check Raft config for HeaderType_CONFIG~\nhttps://gerrit.hyperledger.org/r/c/30425/ -- FAB-14824 add integration test\n\nYacov:\n~https://gerrit.hyperledger.org/r/c/30372/ -- [FAB-14796] Warn about cert expiration - Part I~\n~https://gerrit.hyperledger.org/r/c/30441/ -- [FAB-14802] Warn about cert expiration - Part II~\nhttps://gerrit.hyperledger.org/r/c/30486/ -- [FAB-14852] Validate TLS certs are x509 encoded\n\nJoe:\nhttps://gerrit.hyperledger.org/r/c/30426/ -- [FAB-14404] Add Raft command to BYFN\n~https://gerrit.hyperledger.org/r/c/29449/ -- Orderer concept~ (needs to be cherry-picked to release-1.4)\n~https://gerrit.hyperledger.org/r/c/30010/ -- Configure Raft~ (needs to be cherry-picked to release-1.4)\nhttps://gerrit.hyperledger.org/r/c/30242/ -- Stand up orderer node (implementation agnostic) (needs to be cherry-picked to release-1.4)","username":"jyellick","ts":"2019-03-27T14:50:52.417Z"}
{"msg":"mine is all captured","username":"guoger","ts":"2019-03-27T15:37:15.573Z"}
{"msg":"mine is all captured in this list","username":"guoger","ts":"2019-03-27T15:37:15.573Z"}
{"msg":"maybe orderer name should explicitly start from 1 in byfn? otherwise we have:\n```\norderer.example.com\norderer2.example.com\norderer3.example.com\n...\n```\nwhich is not super elegant IMO. (we could rename orderer to orderer1 in solo to avoid complicating scripts). Anyway this is just a nit. @tock ","username":"guoger","ts":"2019-03-28T09:14:01.342Z"}
{"msg":"@jyellick I added https://gerrit.hyperledger.org/r/#/c/30486/ to the list","username":"yacovm","ts":"2019-03-28T13:06:04.921Z"}
{"msg":"@guoger it does not start from 1 because solo and kafka use that name `orderer.example.com`. In an effort to keep the changes to a minimum and not change how solo and kafka behave, elegance was sacrificed.  ","username":"tock","ts":"2019-03-28T16:46:23.397Z"}
{"msg":"@tock yeah, that's why i thought we could alter that to be `orderer1.example.com` for solo/kafka. but i guess not worth doing this time","username":"guoger","ts":"2019-03-29T01:34:43.101Z"}
{"msg":"I have two CRs out there for review, should be fairly easy, one adds an integration test and another one just addresses code hygiene from previous review comments. @jyellick @C0rWin @yacovm maybe someone can take a look?","username":"guoger","ts":"2019-03-29T12:41:52.558Z"}
{"msg":"But I guess it’s fine if they are not included into rc ","username":"guoger","ts":"2019-03-29T12:58:10.195Z"}
{"msg":"Has joined the channel.","username":"ronenschafferibm","ts":"2019-04-02T12:02:10.899Z","type":"uj"}
{"msg":"Has joined the channel.","username":"corpix","ts":"2019-04-02T12:44:50.808Z","type":"uj"}
{"msg":"Has joined the channel.","username":"klkumar369","ts":"2019-04-02T18:40:25.181Z","type":"uj"}
{"msg":"two cherry-picks https://gerrit.hyperledger.org/r/c/30515/2 and https://gerrit.hyperledger.org/r/c/30425/9 need another +2. They were merged on master already. @yacovm could you take a look?","username":"guoger","ts":"2019-04-03T08:41:54.410Z"}
{"msg":"two cherry-picks https://gerrit.hyperledger.org/r/c/30515/2 and https://gerrit.hyperledger.org/r/c/30425/9 need another +2. They were merged on master already. @yacovm @jyellick  could you take a look?","username":"guoger","ts":"2019-04-03T08:41:54.410Z"}
{"msg":"Has joined the channel.","username":"gen_el","ts":"2019-04-03T11:24:37.981Z","type":"uj"}
{"msg":"@guoger @yacovm  here is a fresh unit test flake in etcdraft: https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/11346/console is that something you are familiar with?","username":"tock","ts":"2019-04-04T10:29:24.589Z"}
{"msg":"@tock could you create a JIRA? i'll submit a fix for it. thx!","username":"guoger","ts":"2019-04-04T10:35:50.069Z"}
{"msg":"@tock ~could you create a JIRA? i'll submit a fix for it. thx!~ I'm creating one","username":"guoger","ts":"2019-04-04T10:35:50.069Z"}
{"msg":"@tock , I don't write ginkgo unit tests, against my beliefs. ","username":"yacovm","ts":"2019-04-04T10:43:56.931Z"}
{"msg":"If we add nodes w/o updating endpoints, a newly started node might got stuck at bootstrap trying to pull blocks, if all of existing endpoints are unreachable, right? i.e.\n- O1, O2, O3 in a channel\n- only O1 and O2 are started\n- add and start O4, O5\n- kill O1 and O2\n- start O3 with latest config block\nO3, in theory, knows O4 and O5 from config block, and together they should be able to form a quorum. However, O3 would stuck at trying to pull blocks from O1 and O2. Am I missing anything? @yacovm ","username":"guoger","ts":"2019-04-04T13:11:54.547Z"}
{"msg":"no, but i don't see why that is a problem?","username":"yacovm","ts":"2019-04-04T13:14:58.984Z"}
{"msg":"I specified clearly in the document","username":"yacovm","ts":"2019-04-04T13:15:03.978Z"}
{"msg":"that you should add the endpoints to the config","username":"yacovm","ts":"2019-04-04T13:15:10.264Z"}
{"msg":"if you fail to do that.... well, too bad","username":"yacovm","ts":"2019-04-04T13:15:18.081Z"}
{"msg":"Good to know it's documented, i overlooked that","username":"guoger","ts":"2019-04-04T13:37:23.602Z"}
{"msg":"i hope it is, unless someone removed it","username":"yacovm","ts":"2019-04-04T13:38:41.336Z"}
{"msg":"just went check and it is :)","username":"guoger","ts":"2019-04-04T13:39:18.913Z"}
{"msg":"just went check and it is there :)","username":"guoger","ts":"2019-04-04T13:39:18.913Z"}
{"msg":"I wanted to follow-up on the topic of future-proofing the Raft implementation. Sounds like we need an audit of the future-proofness before we do our initial release. That is must-do before release in my opinion.","username":"dave.enyeart","ts":"2019-04-04T13:47:10.176Z"}
{"msg":"I wanted to follow-up on the topic of future-proofing the Raft implementation. Sounds like we need an audit of the future-proofness before we do our initial release. Not just for the Jira in discussion, but overall. That is must-do before release in my opinion.","username":"dave.enyeart","ts":"2019-04-04T13:47:10.176Z"}
{"msg":"so the jira we talked about is https://jira.hyperledger.org/browse/FAB-14799, and we need to decide on whether we want to augment current `ConsensusRequest` to have an extra field `Metadata`(tentative name), so it can be extended in the future. What we have now is:\n```\n// ConsensusRequest is a consensus specific message sent to a cluster member.\nmessage ConsensusRequest {\n    string channel = 1;\n    bytes payload = 2;\n}\n```","username":"guoger","ts":"2019-04-04T13:48:12.561Z"}
{"msg":"and what we do is:\n```\n// Consensus passes the given ConsensusRequest message to the raft.Node instance\nfunc (c *Chain) Consensus(req *orderer.ConsensusRequest, sender uint64) error {\n\tif err := c.isRunning(); err != nil {\n\t\treturn err\n\t}\n\n\tstepMsg := &raftpb.Message{}\n\tif err := proto.Unmarshal(req.Payload, stepMsg); err != nil {\n\t\treturn fmt.Errorf(\"failed to unmarshal StepRequest payload to Raft Message: %s\", err)\n\t}\n\n\tif err := c.Node.Step(context.TODO(), *stepMsg); err != nil {\n\t\treturn fmt.Errorf(\"failed to process Raft Step message: %s\", err)\n\t}\n\n\treturn nil\n}\n```","username":"guoger","ts":"2019-04-04T13:48:41.861Z"}
{"msg":"We do have a field`Context []byte` within `raftpb.Message`, where we could squeeze in some data, but that's hacky IMO","username":"guoger","ts":"2019-04-04T13:51:36.729Z"}
{"msg":"I don't know how much performance impact it would have w/ extra unmarshalling tho, but I think disk IO is still the bottleneck","username":"guoger","ts":"2019-04-04T13:53:24.501Z"}
{"msg":"even if we are not disseminating the metrics within this field, i feel it's still worth to add it, for extensibility.","username":"guoger","ts":"2019-04-04T13:54:00.051Z"}
{"msg":"back to the metrics, IMO it's still useful to have `ActiveNodes` metrics on *both* follower and leader. And this can be done by a simply pingpong service (no info needs to be piggybacked to HB), which is orthogonal to Raft","username":"guoger","ts":"2019-04-04T13:55:17.579Z"}
{"msg":"Because currently, there's no way to tell whether my node is partitioned away from quorum based on metrics. We only have `IsLeader`, which is 0 (false) if it's actually follower, or partitioned (constantly starting campaign)","username":"guoger","ts":"2019-04-04T13:57:38.920Z"}
{"msg":"(obviously one could try to submit a tx and see it fails with \"no Raft leader\"","username":"guoger","ts":"2019-04-04T13:58:10.207Z"}
{"msg":"(we used to have `LeaderID` in initial metrics CR, but it was altered because it was thought to be less useful if ID cannot be related to Orderer canonical name)","username":"guoger","ts":"2019-04-04T13:59:25.292Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zLYWryRfjkZX6Dr7f) Question - do we need to include a version number if the Raft messages to help with future-proofing?","username":"dave.enyeart","ts":"2019-04-04T14:08:13.741Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zLYWryRfjkZX6Dr7f","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zLYWryRfjkZX6Dr7f","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zLYWryRfjkZX6Dr7f) Question - do we need to include a version number in the Raft messages to help with future-proofing?","username":"dave.enyeart","ts":"2019-04-04T14:08:13.741Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zLYWryRfjkZX6Dr7f","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zLYWryRfjkZX6Dr7f","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zLYWryRfjkZX6Dr7f) Question - do we need to include a version number in the Raft messages to help with future-proofing and rolling upgrades?","username":"dave.enyeart","ts":"2019-04-04T14:08:13.741Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zLYWryRfjkZX6Dr7f","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=zLYWryRfjkZX6Dr7f","remote":true,"fileId":null,"fileName":null}]}
{"msg":"No... if the etcd implementation of Raft supports mixed versions then it should do the versioning on its own. If it doesn't there is nothing we can do anyway","username":"yacovm","ts":"2019-04-04T14:12:57.918Z"}
{"msg":"we don't put anything in the raft messages apart from the raft message itself","username":"yacovm","ts":"2019-04-04T14:13:12.796Z"}
{"msg":"@guoger wrt adding an opaque `Metadata` field to the `ConsensusRequest` message, isn't it unnecessary given that protobuf supports addition of fields such that the resulting proto would be backward-compatible? We can always add new fields (or even removing existing fields with slightly more effort) without having to worry about marshalling/unmarshalling errors.","username":"adarshsaraf123","ts":"2019-04-04T15:30:03.805Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=ucfFDLpCyNcNkdF2S) @adarshsaraf123 i think that's correct! the question remains whether we want to tackle it within 1.4.1 or later.","username":"guoger","ts":"2019-04-07T10:45:23.069Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=ucfFDLpCyNcNkdF2S","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=ucfFDLpCyNcNkdF2S","remote":true,"fileId":null,"fileName":null}]}
{"msg":"appreciate a round of review on:\nhttps://gerrit.hyperledger.org/r/c/30621/6 enforce ElectionTimeout to be 10x greater than HeartbeatTimeout\nhttps://gerrit.hyperledger.org/r/c/30622/7 increase interval of proactive campaign\n(they are currently on master branch, and I think they should be included in 1.4.1 release as well. I'll cherry-pick once approved)\n\nFix flaky Raft UT:\nhttps://gerrit.hyperledger.org/r/c/30722/ master\nhttps://gerrit.hyperledger.org/r/c/30724/ release-1.4\n\nFix flaky Raft IT:\nhttps://gerrit.hyperledger.org/r/c/30724/ already merged in master and need another +2 to get into 1.4\n\ncc @jyellick @C0rWin @yacovm ","username":"guoger","ts":"2019-04-10T03:35:49.990Z"}
{"msg":"appreciate a round of review on:\nhttps://gerrit.hyperledger.org/r/c/30621/6 enforce ElectionTimeout to be 10x greater than HeartbeatTimeout\nhttps://gerrit.hyperledger.org/r/c/30622/7 increase interval of proactive campaign\n(they are currently on master branch, and I think they should be included in 1.4.1 release as well. I'll cherry-pick once approved)\n\nFix flaky Raft UT:\nhttps://gerrit.hyperledger.org/r/c/30722/ master\nhttps://gerrit.hyperledger.org/r/c/30724/ release-1.4\n\nFix flaky Raft IT:\nhttps://gerrit.hyperledger.org/r/c/30669/ already merged in master and need another +2 to get into 1.4\n\ncc @jyellick @C0rWin @yacovm ","username":"guoger","ts":"2019-04-10T03:35:49.990Z"}
{"msg":"@guoger I was looking at 30722, it's still not entirely clearly to me how this resolves flakiness (though I don't doubt that it does), could you explain a bit more what the flake was?","username":"jyellick","ts":"2019-04-10T03:59:49.960Z"}
{"msg":"@guoger I was looking at 30722, it's still not entirely clearly to me how this resolves flakiness (though I don't doubt that it does), could you explain a bit more what the flake was and how this change addresses it?","username":"jyellick","ts":"2019-04-10T03:59:49.960Z"}
{"msg":"(And the IT link you posted is a dup of the UT flake, probably unintentional?)","username":"jyellick","ts":"2019-04-10T04:00:54.399Z"}
{"msg":"just updated the link. and let me type the explanation up","username":"guoger","ts":"2019-04-10T04:01:43.039Z"}
{"msg":"this is how communication works: let's say we remove A from <A, B>, when A reconfigures communication, it is still able to receive msg from B, since B is still in A's trusted list. When B reconfigures communication, it rejects msg from A because it is removed from B's trusted list. In another word, actual communication impl is finer grained than mock configurator, which used to block msg on both direction once reconfigured. That caused flakes if leader configures comm too fast before instructing follower to commit config change","username":"guoger","ts":"2019-04-10T04:05:40.158Z"}
{"msg":"this is how communication works: let's say we remove A from <A, B>, when A reconfigures communication, it is still able to receive msg from B, since B is still in A's trusted list. When B reconfigures communication, it rejects msg from A because it is removed from B's trusted list. In another word, actual communication impl is finer grained than mock configurator, which used to block msg on both direction once reconfigured. That caused flakes if leader configures comm too fast before instructing follower to commit config change. @jyellick ","username":"guoger","ts":"2019-04-10T04:05:40.158Z"}
{"msg":"the CR changes mock configurator to reflect communication more accurately","username":"guoger","ts":"2019-04-10T04:06:49.457Z"}
{"msg":"So to summarize, the 'real' comm layer does not use bidirectional links, so, reconfiguration communication to evict a node will only terminate connections from the evicted node, but not connections to that evicted node?","username":"jyellick","ts":"2019-04-10T04:15:02.371Z"}
{"msg":"So to summarize, the 'real' comm layer does not use bidirectional links, so, reconfiguring communication to evict a node will only terminate connections from the evicted node, but not connections to that evicted node?","username":"jyellick","ts":"2019-04-10T04:15:02.371Z"}
{"msg":"That's correct from caller point of view (Raft). Although I'm not too sure whether it actually terminates the underlying connection (other channels might still be using it)","username":"guoger","ts":"2019-04-10T04:16:44.141Z"}
{"msg":"and just to elaborate a bit. We once had a CR to introduce delay before reconfiguring comm when a node finds itself being evicted. So we don't depend on this comm behavior. However that CR was thought to be scary to be shipped with 1.4.1","username":"guoger","ts":"2019-04-10T04:18:51.150Z"}
{"msg":"Right, I do recall that one","username":"jyellick","ts":"2019-04-10T04:19:09.709Z"}
{"msg":"As for https://gerrit.hyperledger.org/r/c/30621/ (election timeout >= 10 * heartbeat), it's optional (nice to have). We could simply document this in ops guide","username":"guoger","ts":"2019-04-10T04:23:20.696Z"}
{"msg":"@guoger @jyellick you also terminate streams *to* the evicted node.... ","username":"yacovm","ts":"2019-04-10T07:28:56.922Z"}
{"msg":"@yacovm i don't think so... `remotePeers` in chain.go does not return differently if node itself is removed","username":"guoger","ts":"2019-04-10T07:33:45.785Z"}
{"msg":"when you reconfigure and remove a node's ID - you can't send anymore to that ID","username":"yacovm","ts":"2019-04-10T08:32:27.220Z"}
{"msg":"@guoger ","username":"yacovm","ts":"2019-04-10T08:32:34.212Z"}
{"msg":"when the reconfiguration takes place - all streams of evicted IDs are closed","username":"yacovm","ts":"2019-04-10T08:33:06.735Z"}
{"msg":"https://github.com/hyperledger/fabric/blob/master/orderer/common/cluster/comm_test.go#L541","username":"yacovm","ts":"2019-04-10T08:34:55.284Z"}
{"msg":"yes, but i was talking about the comm configuration on the exact node that's being evicted","username":"guoger","ts":"2019-04-10T08:38:56.499Z"}
{"msg":"from that node's point of view, it's basically no-op when reconfigure, right? @yacovm ","username":"guoger","ts":"2019-04-10T08:39:46.245Z"}
{"msg":"yes since you never pass your own node's info to the comm layer","username":"yacovm","ts":"2019-04-10T08:48:23.980Z"}
{"msg":"so if it is removed, it cannot tell","username":"yacovm","ts":"2019-04-10T08:48:28.589Z"}
{"msg":"exactly","username":"guoger","ts":"2019-04-10T08:49:15.487Z"}
{"msg":"thx for confirming","username":"guoger","ts":"2019-04-10T08:49:23.942Z"}
{"msg":"as i'm looking at our code w.r.t future proofing, i don't see any obvious limitation. Although i'm a little uneasy about `StepResponse`, since it's not currently being used. IIUC, it can only be of type `SubmitResponse` for now, and it is not actually used. Would appreciate another pair of eyes to see if fields defined in it are appropriate to be used in the future. (It looks good to me though) @jyellick \n```\n// StepResponse is a message received from a cluster member.\nmessage StepResponse {\n    oneof payload {\n        SubmitResponse submit_res = 1;\n    }\n}\n```\n```\n// SubmitResponse returns a success\n// or failure status to the sender.\nmessage SubmitResponse {\n    string channel = 1;\n    // Status code, which may be used to programatically respond to success/failure.\n    common.Status status = 2;\n    // Info string which may contain additional information about the returned status.\n    string info = 3;\n}\n```","username":"guoger","ts":"2019-04-11T03:13:48.460Z"}
{"msg":"Thanks for looking at that @guoger I've also taken a look and things look appropriately extensible to me","username":"jyellick","ts":"2019-04-11T03:28:12.270Z"}
{"msg":"should we be more explicit about `!TLSEnabled && isClusterType`? current panic is stack is not very friendly:\n```\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0xacb884]\n\ngoroutine 1 [running]:\ngithub.com/hyperledger/fabric/core/comm.(*GRPCServer).SetClientRootCAs(0xc00017c000, 0xc000498240, 0x4, 0x6, 0x0, 0x0)\n\t/opt/gopath/src/github.com/hyperledger/fabric/core/comm/server.go:326 +0x1b4\ngithub.com/hyperledger/fabric/orderer/common/server.updateTrustedRoots(0xc000430c00, 0x11563a0, 0xc000132700, 0xc00000e320, 0x1, 0x1)\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/server/main.go:752 +0x159a\ngithub.com/hyperledger/fabric/orderer/common/server.Start.func1(0xc000132700)\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/server/main.go:151 +0xf4\ngithub.com/hyperledger/fabric/common/channelconfig.(*BundleSource).Update(0xc0009c0210, 0xc000132700)\n\t/opt/gopath/src/github.com/hyperledger/fabric/common/channelconfig/bundlesource.go:46 +0x7c\ngithub.com/hyperledger/fabric/common/channelconfig.NewBundleSource(0xc000132700, 0xc00000e328, 0x1, 0x1, 0xc00035f020)\n\t/opt/gopath/src/github.com/hyperledger/fabric/common/channelconfig/bundlesource.go:38 +0x72\ngithub.com/hyperledger/fabric/orderer/common/multichannel.(*Registrar).newLedgerResources(0xc000498480, 0xc000350b90, 0xc000350b90)\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/multichannel/registrar.go:354 +0x379\ngithub.com/hyperledger/fabric/orderer/common/multichannel.(*Registrar).Initialize(0xc000498480, 0xc00032d230)\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/multichannel/registrar.go:158 +0x242\ngithub.com/hyperledger/fabric/orderer/common/server.initializeMultichannelRegistrar(0xc00003fe00, 0xc000430300, 0xc00042c1d0, 0x0, 0xc0004982d0, 0x1b25180, 0xc00042c320, 0x2, 0x2, 0xc00042c330, ...)\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/server/main.go:585 +0x315\ngithub.com/hyperledger/fabric/orderer/common/server.Start(0x1013e09, 0x5, 0xc000540900)\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/server/main.go:158 +0x7a3\ngithub.com/hyperledger/fabric/orderer/common/server.Main()\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/server/main.go:91 +0x1ce\nmain.main()\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/main.go:15 +0x20\n```\nhttps://jira.hyperledger.org/browse/FAB-15157\n@yacovm ","username":"guoger","ts":"2019-04-12T07:14:46.115Z"}
{"msg":"should we be more explicit about `!TLSEnabled && isClusterType`? current panic is stack is not very friendly:\n```\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0xacb884]\n\ngoroutine 1 [running]:\ngithub.com/hyperledger/fabric/core/comm.(*GRPCServer).SetClientRootCAs(0xc00017c000, 0xc000498240, 0x4, 0x6, 0x0, 0x0)\n\t/opt/gopath/src/github.com/hyperledger/fabric/core/comm/server.go:326 +0x1b4\ngithub.com/hyperledger/fabric/orderer/common/server.updateTrustedRoots(0xc000430c00, 0x11563a0, 0xc000132700, 0xc00000e320, 0x1, 0x1)\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/server/main.go:752 +0x159a\ngithub.com/hyperledger/fabric/orderer/common/server.Start.func1(0xc000132700)\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/server/main.go:151 +0xf4\ngithub.com/hyperledger/fabric/common/channelconfig.(*BundleSource).Update(0xc0009c0210, 0xc000132700)\n\t/opt/gopath/src/github.com/hyperledger/fabric/common/channelconfig/bundlesource.go:46 +0x7c\ngithub.com/hyperledger/fabric/common/channelconfig.NewBundleSource(0xc000132700, 0xc00000e328, 0x1, 0x1, 0xc00035f020)\n\t/opt/gopath/src/github.com/hyperledger/fabric/common/channelconfig/bundlesource.go:38 +0x72\ngithub.com/hyperledger/fabric/orderer/common/multichannel.(*Registrar).newLedgerResources(0xc000498480, 0xc000350b90, 0xc000350b90)\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/multichannel/registrar.go:354 +0x379\ngithub.com/hyperledger/fabric/orderer/common/multichannel.(*Registrar).Initialize(0xc000498480, 0xc00032d230)\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/multichannel/registrar.go:158 +0x242\ngithub.com/hyperledger/fabric/orderer/common/server.initializeMultichannelRegistrar(0xc00003fe00, 0xc000430300, 0xc00042c1d0, 0x0, 0xc0004982d0, 0x1b25180, 0xc00042c320, 0x2, 0x2, 0xc00042c330, ...)\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/server/main.go:585 +0x315\ngithub.com/hyperledger/fabric/orderer/common/server.Start(0x1013e09, 0x5, 0xc000540900)\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/server/main.go:158 +0x7a3\ngithub.com/hyperledger/fabric/orderer/common/server.Main()\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/server/main.go:91 +0x1ce\nmain.main()\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/main.go:15 +0x20\n```\nhttps://jira.hyperledger.org/browse/FAB-15157\n\n@yacovm ","username":"guoger","ts":"2019-04-12T07:14:46.115Z"}
{"msg":"should we be more explicit about `!TLSEnabled && isClusterType`? current panic is stack is not very friendly:\n```\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0xacb884]\n\ngoroutine 1 [running]:\ngithub.com/hyperledger/fabric/core/comm.(*GRPCServer).SetClientRootCAs(0xc00017c000, 0xc000498240, 0x4, 0x6, 0x0, 0x0)\n\t/opt/gopath/src/github.com/hyperledger/fabric/core/comm/server.go:326 +0x1b4\ngithub.com/hyperledger/fabric/orderer/common/server.updateTrustedRoots(0xc000430c00, 0x11563a0, 0xc000132700, 0xc00000e320, 0x1, 0x1)\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/server/main.go:752 +0x159a\ngithub.com/hyperledger/fabric/orderer/common/server.Start.func1(0xc000132700)\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/server/main.go:151 +0xf4\ngithub.com/hyperledger/fabric/common/channelconfig.(*BundleSource).Update(0xc0009c0210, 0xc000132700)\n\t/opt/gopath/src/github.com/hyperledger/fabric/common/channelconfig/bundlesource.go:46 +0x7c\ngithub.com/hyperledger/fabric/common/channelconfig.NewBundleSource(0xc000132700, 0xc00000e328, 0x1, 0x1, 0xc00035f020)\n\t/opt/gopath/src/github.com/hyperledger/fabric/common/channelconfig/bundlesource.go:38 +0x72\ngithub.com/hyperledger/fabric/orderer/common/multichannel.(*Registrar).newLedgerResources(0xc000498480, 0xc000350b90, 0xc000350b90)\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/multichannel/registrar.go:354 +0x379\ngithub.com/hyperledger/fabric/orderer/common/multichannel.(*Registrar).Initialize(0xc000498480, 0xc00032d230)\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/multichannel/registrar.go:158 +0x242\ngithub.com/hyperledger/fabric/orderer/common/server.initializeMultichannelRegistrar(0xc00003fe00, 0xc000430300, 0xc00042c1d0, 0x0, 0xc0004982d0, 0x1b25180, 0xc00042c320, 0x2, 0x2, 0xc00042c330, ...)\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/server/main.go:585 +0x315\ngithub.com/hyperledger/fabric/orderer/common/server.Start(0x1013e09, 0x5, 0xc000540900)\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/server/main.go:158 +0x7a3\ngithub.com/hyperledger/fabric/orderer/common/server.Main()\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/common/server/main.go:91 +0x1ce\nmain.main()\n\t/opt/gopath/src/github.com/hyperledger/fabric/orderer/main.go:15 +0x20\n```\nhttps://jira.hyperledger.org/browse/FAB-15157","username":"guoger","ts":"2019-04-12T07:14:46.115Z"}
{"msg":"@yacovm ^^","username":"guoger","ts":"2019-04-12T07:15:25.026Z"}
{"msg":"yeah yeah.... i know","username":"yacovm","ts":"2019-04-12T10:13:13.551Z"}
{"msg":"I will take care of it :) ","username":"yacovm","ts":"2019-04-12T10:13:21.519Z"}
{"msg":"https://gerrit.hyperledger.org/r/#/c/30918/","username":"yacovm","ts":"2019-04-12T11:50:21.523Z"}
{"msg":"https://github.com/hyperledger/fabric/blob/6c005dd53448d0a3f70a816b79749e5d9ea433ae/orderer/consensus/etcdraft/consenter.go#L264-L267\n\n^ Why does this exist? We should never be calling viper outside of the main config parsing package, and I'm unsure why we would have introduce this here?","username":"jyellick","ts":"2019-04-12T13:33:27.158Z"}
{"msg":"@jyellick we have a field `Consensus` in `orderer.yaml`, which is consensus-specific. That code snippet is to decode the opaque data. It's calling a handy viper util, which doesn't actually require knowledge of viper instance from main.","username":"guoger","ts":"2019-04-12T13:59:15.850Z"}
{"msg":"@jyellick we have a field `Consensus` in `orderer.yaml`, which is consensus-specific. That code snippet is to decode this opaque data. It's calling a handy viper util, which doesn't actually require knowledge of viper instance from main.","username":"guoger","ts":"2019-04-12T13:59:15.850Z"}
{"msg":"I will unfortunately be missing today's scrum too due to another conflict. I have been working (at a really slow pace) on the refactoring of the config validation. The work is on track and I only have to add tests to the implementations which should be done latest by day after tomorrow.  ","username":"adarshsaraf123","ts":"2019-04-15T11:48:57.522Z"}
{"msg":"The WIPs are available at this stack: https://gerrit.hyperledger.org/r/#/c/30811/","username":"adarshsaraf123","ts":"2019-04-15T11:53:21.093Z"}
{"msg":"i want to revive two threads of conversation here:\n1) if we can agree on the [approach proposed](https://jira.hyperledger.org/browse/FAB-14799?focusedCommentId=58872&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-58872) in the JIRA, I could start adding `ActiveNodes` metrics\n2) I still think heavy load integration test is valuable and should be upstreamed. It performs certain operations - add node/kill node/restart node, etc - under heavy traffic (more than 1 blocks in flight). could someone reach out to Matt to see whether we want this differently? Also, i've written in-proc orderer clients as part of that work, which can be reused as well, if we want to move raft integration test to its own pkg to be self-contained, similar to gossip.\n\nthoughts? @jyellick @yacovm ","username":"guoger","ts":"2019-04-15T13:46:08.780Z"}
{"msg":"we should def. move the Raft integration tests to its own package","username":"yacovm","ts":"2019-04-15T14:23:03.475Z"}
{"msg":"there is no question in that","username":"yacovm","ts":"2019-04-15T14:23:07.902Z"}
{"msg":"as for the active nodes - I said my opinion in the JIRA.... ","username":"yacovm","ts":"2019-04-15T14:23:34.570Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=959RZ8rao4djHoAkj) @yacovm how about the integration test with heavy traffic?","username":"guoger","ts":"2019-04-15T14:32:09.335Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=959RZ8rao4djHoAkj","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=959RZ8rao4djHoAkj","remote":true,"fileId":null,"fileName":null}]}
{"msg":"i think heavy ITs have a very good potential for flakes no? @guoger ","username":"yacovm","ts":"2019-04-15T15:16:37.860Z"}
{"msg":"We definitely should move 90% of the etcdraft integration tests to their own folder.  We should ensure that there are no peer processes brought up, and for many of them, I expect we could operate purely on the system channel.  We should then be able to interact with the orderers directly through the Broadcast/Deliver APIs, and, we can probably re-use the same network for many of the tests.","username":"jyellick","ts":"2019-04-15T16:24:09.500Z"}
{"msg":"ok, i'll take on it","username":"guoger","ts":"2019-04-16T02:33:47.364Z"}
{"msg":"FWIW, I'm also of the opinion that ITs that do heavy traffic testing should not be part of the test suite. We mostly want to focus on the green path and make sure that things click together w/o issues. ","username":"kostas","ts":"2019-04-16T03:40:50.291Z"}
{"msg":"Someone might suggest that we still add them under a feature flag, but I think the chances of them not being actively maintained when this happens are non-significant.","username":"kostas","ts":"2019-04-16T03:41:44.069Z"}
{"msg":"I guess my point is, we need to do this, _either at IT level, or lower_ (We do have UT that does reconfig while blocks are inflight, but that's just UT for chain.go), because IMO this *is* the green path - people reconfig channel while system is serving requests - and PTE/OTE doesn't really produce enough pressure on orderers: we barely have inflight blocks, and the chance of config *and* inflight blocks happen at the same time is even smaller.\nAlso, i've been using this test as gatekeeper for a while during development, and it makes lazy assertions, which fail much less often than other ITs.\n\nAt any rate, we don't need to prioritize this (i could just rebase it once in a while). Thanks for chiming in @kostas , glad to see you're surviving Cal :P","username":"guoger","ts":"2019-04-16T04:02:30.019Z"}
{"msg":"btw, seeing this UT failure while running `orderer/common/cluster` pkg:\n```\n    --- FAIL: TestSend/Send_step_succeed (0.06s)\n        <autogenerated>:1:\n            \tError Trace:\trpc_test.go:249\n            \tError:      \tNot equal:\n            \t            \texpected: 1\n            \t            \tactual  : 2\n            \tTest:       \tTestSend/Send_step_succeed\n```\n","username":"guoger","ts":"2019-04-16T04:05:42.107Z"}
{"msg":"Damn","username":"yacovm","ts":"2019-04-16T05:56:35.049Z"}
{"msg":"ok i can reproduce that in once in 10,000 tests","username":"yacovm","ts":"2019-04-16T07:27:23.698Z"}
{"msg":"i guess i was \"lucky\" this morning and hit this within 100 runs","username":"guoger","ts":"2019-04-16T07:28:41.386Z"}
{"msg":"it either this or your computer 100 slower than Yacov's ","username":"C0rWin","ts":"2019-04-16T07:30:32.151Z"}
{"msg":"it either this or your computer 100 times slower than Yacov's ","username":"C0rWin","ts":"2019-04-16T07:30:32.151Z"}
{"msg":"i didn't run with data race enabled","username":"yacovm","ts":"2019-04-16T07:31:00.622Z"}
{"msg":"oh, now it's fair","username":"C0rWin","ts":"2019-04-16T07:31:23.446Z"}
{"msg":"oh found the problem","username":"yacovm","ts":"2019-04-16T07:32:43.579Z"}
{"msg":"```\n               sent <- struct{}{}\t\t\n               atomic.AddUint32(&sendCalls, 1)\n\t\t\n```\n\nneeded to be\n```\n\t\tatomic.AddUint32(&sendCalls, 1)\n\t\tsent <- struct{}{}\n```","username":"yacovm","ts":"2019-04-16T07:33:15.758Z"}
{"msg":"ok 100,000 runs and didn't fail","username":"yacovm","ts":"2019-04-16T07:36:12.458Z"}
{"msg":"how did you complete 100,000 runs within 1 minute?","username":"guoger","ts":"2019-04-16T07:37:04.138Z"}
{"msg":"151 seconds ","username":"yacovm","ts":"2019-04-16T07:38:34.817Z"}
{"msg":"","username":"yacovm","ts":"2019-04-16T07:38:54.846Z","attachments":[{"type":"file","title":"Clipboard - April 16, 2019 10:38 AM","title_link":"/file-upload/73jMZhPW528Rukzmy/Clipboard%20-%20April%2016,%202019%2010:38%20AM","image_url":"/file-upload/73jMZhPW528Rukzmy/Clipboard%20-%20April%2016,%202019%2010:38%20AM","image_type":"image/png","image_size":16399,"url":"/file-upload/73jMZhPW528Rukzmy/Clipboard%20-%20April%2016,%202019%2010:38%20AM","remote":false,"fileId":"73jMZhPW528Rukzmy","fileName":"Clipboard - April 16, 2019 10:38 AM"}]}
{"msg":"https://jira.hyperledger.org/browse/FAB-15201","username":"yacovm","ts":"2019-04-16T07:40:03.301Z"}
{"msg":"@yacovm what's `// expected 2, actual 1` supposed to mean?","username":"guoger","ts":"2019-04-16T07:42:57.380Z"}
{"msg":"two calls result in one stream?","username":"guoger","ts":"2019-04-16T07:43:13.850Z"}
{"msg":"the test has 2 calls","username":"yacovm","ts":"2019-04-16T08:11:18.089Z"}
{"msg":"2 sends","username":"yacovm","ts":"2019-04-16T08:11:26.306Z"}
{"msg":"it ensures only 1 stream is actually created","username":"yacovm","ts":"2019-04-16T08:11:39.692Z"}
{"msg":"despite you calling send twice","username":"yacovm","ts":"2019-04-16T08:11:44.998Z"}
{"msg":"```{\"level\":\"info\",\"msg\":\"Periodic check is stopping.\",\"channel\":\"multi-node-channel\",\"node\":3}\n\\u2022\\u2022\\u2022\\u2022\\u2022\\u20222019-04-16 14:20:34.965 UTC [test] ReceiverByChain -> WARN 020 Chain notraftchain is of type *multichannel.ChainSupport and not etcdraft.Chain\n\\u20222019-04-16 14:20:34.968 UTC [test] ReceiverByChain -> PANI 021 Programming error - Chain badChainObject is nil although it exists in the mapping\n\\u20222019-04-16 14:20:34.970 UTC [test] HandleChain -> INFO 022 EvictionSuspicion not set, defaulting to 10m0s\n2019-04-16 14:20:34.971 UTC [test] createOrReadWAL -> INFO 023 No WAL data found, creating new WAL at path '/tmp/snap-597125359/wal-' channel= node=1\n2019-04-16 14:20:34.979 UTC [test] Start -> INFO 024 Starting Raft node channel= node=1\n2019-04-16 14:20:34.980 UTC [test] start -> INFO 025 Starting raft node as part of a new channel channel= node=1\n2019-04-16 14:20:34.980 UTC [test] becomeFollower -> INFO 026 1 became follower at term 0 channel= node=1\n2019-04-16 14:20:34.981 UTC [test] newRaft -> INFO 027 newRaft 1 [peers: [], term: 0, commit: 0, applied: 0, lastindex: 0, lastterm: 0] channel= node=1\n2019-04-16 14:20:34.981 UTC [test] becomeFollower -> INFO 028 1 became follower at term 1 channel= node=1\n\\u20222019-04-16 14:20:34.984 UTC [test] detectSelfID -> WARN 029 Could not find cert.orderer0.org0 among [cert.orderer1.org1]\n\\u20222019-04-16 14:20:34.985 UTC [test] run -> INFO 02a This node is picked to start campaign channel= node=1\n2019-04-16 14:20:34.987 UTC [test] apply -> INFO 02b Applied config change to add node 1, current nodes in channel: [1] channel= node=1\n\\u20222019-04-16 14:20:34.990 UTC [test] HandleChain -> INFO 02c EvictionSuspicion not set, defaulting to 10m0s\n\\u2022\n\nSummarizing 1 Failure:\n\n[Fail] Chain 3-node Raft cluster when reconfiguring raft cluster reconfiguration when two type B config are sent back-to-back [It] discards the second \n/home/tock/go/src/github.com/hyperledger/fabric/orderer/consensus/etcdraft/chain_test.go:2074\n\nRan 101 of 101 Specs in 21.322 seconds\nFAIL! -- 100 Passed | 1 Failed | 0 Pending | 0 Skipped\n--- FAIL: TestEtcdraft (21.33s)\n2019-04-16 14:20:35.486 UTC [test] Step -> INFO 02d 1 is starting a new election at term 1 channel= node=1\n2019-04-16 14:20:35.486 UTC [test] becomePreCandidate -> INFO 02e 1 became pre-candidate at term 1 channel= node=1\n2019-04-16 14:20:35.486 UTC [test] poll -> INFO 02f 1 received MsgPreVoteResp from 1 at term 1 channel= node=1\n2019-04-16 14:20:35.487 UTC [test] becomeCandidate -> INFO 030 1 became candidate at term 2 channel= node=1\n2019-04-16 14:20:35.487 UTC [test] poll -> INFO 031 1 received MsgVoteResp from 1 at term 2 channel= node=1\n2019-04-16 14:20:35.487 UTC [test] becomeLeader -> INFO 032 1 became leader at term 2 channel= node=1\n2019-04-16 14:20:35.487 UTC [test] run -> INFO 033 raft.node: 1 elected leader 1 at term 2 channel= node=1\n2019-04-16 14:20:35.488 UTC [test] run -> INFO 034 Leader 1 is present, quit campaign channel= node=1\n2019-04-16 14:20:35.488 UTC [test] serveRequest -> INFO 035 Raft leader changed: 0 -> 1 channel= node=1\n2019-04-16 14:20:35.488 UTC [test] serveRequest -> INFO 036 Start accepting requests as Raft leader at block [1] channel= node=1\n2019-04-16 14:20:38.406 UTC [test] Stop -> INFO 037 Periodic check is stopping.\nFAIL\ncoverage: 85.6% of statements\nFAIL\tgithub.com/hyperledger/fabric/orderer/consensus/etcdraft\t30.818s\n?   \tgithub.com/hyperledger/fabric/orderer/consensus/etcdraft/mocks\t[no test files]\nok  \tgithub.com/hyperledger/fabric/orderer/consensus/inactive\t(cached)\tcoverage: 100.0% of statements\n```\nUnit test flake on etcdraft... is it familiar? @guoger ","username":"tock","ts":"2019-04-16T14:39:01.205Z"}
{"msg":"@tock thx for reporting. do you have the link? log pasted here does not reflect actual failure","username":"guoger","ts":"2019-04-16T15:21:07.265Z"}
{"msg":"and I got:\n```\n\n21:22:30 Summarizing 1 Failure:\n21:22:30 \n21:22:30 [Fail] Chain 3-node Raft cluster when reconfiguring raft cluster reconfiguration [It] stop cluster quorum and continue reconfiguration after the restart \n21:22:30 /w/workspace/fabric-verify-unit-tests-x86_64/gopath/src/github.com/hyperledger/fabric/orderer/consensus/etcdraft/chain_test.go:3905\n21:22:30 \n21:22:30 Ran 101 of 101 Specs in 37.217 seconds\n21:22:30 FAIL! -- 100 Passed | 1 Failed | 0 Pending | 0 Skipped\n21:22:30 --- FAIL: TestEtcdraft (37.22s)\n```\n\nin https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/11552/console","username":"yacovm","ts":"2019-04-16T19:26:40.585Z"}
{"msg":"@guoger ","username":"yacovm","ts":"2019-04-16T19:26:56.562Z"}
{"msg":"thx, will post a fix","username":"guoger","ts":"2019-04-17T02:40:24.868Z"}
{"msg":"@guoger that was in my local `build all`, not CI, so I do not have a link","username":"tock","ts":"2019-04-17T06:16:20.036Z"}
{"msg":"@tock sure np, i have a fix and about to push. thx","username":"guoger","ts":"2019-04-17T06:25:54.914Z"}
{"msg":"@tock ~sure np, i have a fix and about to push. thx~ actually, the fix i was talking about was for the bug reported by yacov... ","username":"guoger","ts":"2019-04-17T06:25:54.914Z"}
{"msg":"@tock ~sure np, i have a fix and about to push. thx~ actually, the fix i was talking about was for the bug reported by yacov... i'll try to reproduce the one you posted. thx","username":"guoger","ts":"2019-04-17T06:25:54.914Z"}
{"msg":"Folks, I’m gonna miss the scrum today, sorry. I just have couple CR for flakes for review and working on moving raft IT out ","username":"guoger","ts":"2019-04-18T13:09:43.774Z"}
{"msg":"@guoger @tock @yacovm @C0rWin @adarshsaraf123 You likely all already saw my cancellation notice for the Raft scrum, but I wanted to share that my wife ended up going into labor a couple weeks ahead of schedule, and our new baby has arrived.  Everyone involved is happy and healthy, but, my availability, especially over the next few weeks, will be very limited. ","username":"jyellick","ts":"2019-04-21T18:04:16.325Z"}
{"msg":"Congratulations! ","username":"tock","ts":"2019-04-21T18:10:33.747Z"}
{"msg":"@jyellick congrats :) ","username":"yacovm","ts":"2019-04-21T18:15:01.350Z"}
{"msg":"@jyellick Congratulations! :smiley: ","username":"adarshsaraf123","ts":"2019-04-21T18:39:26.709Z"}
{"msg":"@jyellick congrats!","username":"C0rWin","ts":"2019-04-21T19:56:56.383Z"}
{"msg":"Thanks all!","username":"jyellick","ts":"2019-04-21T21:27:19.349Z"}
{"msg":"congrats!","username":"guoger","ts":"2019-04-22T01:11:16.562Z"}
{"msg":"@guoger @yacovm Is this a flake or is it something that I did? https://jenkins.hyperledger.org/job/fabric-verify-integration-tests-x86_64/8405/console","username":"tock","ts":"2019-04-29T14:55:41.944Z"}
{"msg":"```\ntext canceled\" grpc.code=Unknown grpc.call_duration=31.803193ms\n15:21:54 [e][OrdererOrg.orderer5] panic: failed to initialize operations subsystem: listen tcp 127.0.0.1:36034: bind: address already in use\n15:21:54 [e][OrdererOrg.orderer5] \n```","username":"yacovm","ts":"2019-04-29T14:56:09.997Z"}
{"msg":"something you did","username":"yacovm","ts":"2019-04-29T14:56:12.481Z"}
{"msg":"by selecting the last config over the bootstrap file?","username":"tock","ts":"2019-04-29T15:00:44.150Z"}
{"msg":"```\nopsSystem := newOperationsSystem(conf.Operations, conf.Metrics)\n\terr := opsSystem.Start()\n\tif err != nil {\n\t\tlogger.Panicf(\"failed to initialize operations subsystem: %s\", err)\n\t}\n```","username":"tock","ts":"2019-04-29T15:01:44.434Z"}
{"msg":"```\n        opsSystem := newOperationsSystem(conf.Operations, conf.Metrics)\n\terr := opsSystem.Start()\n\tif err != nil {\n\t\tlogger.Panicf(\"failed to initialize operations subsystem: %s\", err)\n\t}\n```","username":"tock","ts":"2019-04-29T15:01:44.434Z"}
{"msg":"how is that possible?","username":"tock","ts":"2019-04-29T15:04:32.987Z"}
{"msg":"@yacovm @guoger  Unit test flake in etcdraft: https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/11755/console\n","username":"tock","ts":"2019-04-30T10:21:28.080Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=aWZo8CnJPqvbijnbp) @tock i'll look into it, thx!","username":"guoger","ts":"2019-04-30T10:22:42.879Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=aWZo8CnJPqvbijnbp","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=aWZo8CnJPqvbijnbp","remote":true,"fileId":null,"fileName":null}]}
{"msg":"anyone experiencing problems with gerrit?","username":"tock","ts":"2019-05-08T11:57:52.237Z"}
{"msg":"Has left the channel.","username":"mauricio","ts":"2019-05-12T03:51:20.037Z","type":"ul"}
{"msg":"@guoger Is this a well known flaky test? https://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/12112/console","username":"tock","ts":"2019-05-14T13:22:30.732Z"}
{"msg":"does anyone know if this is flaky? \n16:46:56 FAIL\tgithub.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/validator/statebasedval\t32.301s\nhttps://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/12116/console","username":"tock","ts":"2019-05-14T14:02:55.427Z"}
{"msg":"@sykesm does anyone know if this is flaky? \n16:46:56 FAIL\tgithub.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/validator/statebasedval\t32.301s\nhttps://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/12116/console","username":"tock","ts":"2019-05-14T14:02:55.427Z"}
{"msg":"should be new... i'll put it to my tabs","username":"guoger","ts":"2019-05-14T15:38:02.165Z"}
{"msg":"created FAB-15448","username":"guoger","ts":"2019-05-14T15:58:48.018Z"}
{"msg":":thumbsup: ","username":"tock","ts":"2019-05-15T06:11:06.982Z"}
{"msg":"@jyellick @sykesm @yacovm @C0rWin Can you please take a look at these two?\nhttps://gerrit.hyperledger.org/r/#/c/31335/\nhttps://gerrit.hyperledger.org/r/#/c/31196/\n","username":"tock","ts":"2019-05-16T08:37:17.775Z"}
{"msg":"@jyellick @sykesm @yacovm @C0rWin Can you please take a look at these two? \nhttps://gerrit.hyperledger.org/r/#/c/31335/\nhttps://gerrit.hyperledger.org/r/#/c/31196/\n","username":"tock","ts":"2019-05-16T08:37:17.775Z"}
{"msg":"@jyellick @sykesm @yacovm @C0rWin Can you please take a look at these two CRs on migration? \nhttps://gerrit.hyperledger.org/r/#/c/31335/\nhttps://gerrit.hyperledger.org/r/#/c/31196/\n","username":"tock","ts":"2019-05-16T08:37:17.775Z"}
{"msg":"sure","username":"C0rWin","ts":"2019-05-16T08:38:32.437Z"}
{"msg":"Has joined the channel.","username":"shrivastava.amit","ts":"2019-05-16T12:37:24.404Z","type":"uj"}
{"msg":"Has joined the channel.","username":"circlespainter","ts":"2019-05-18T07:38:45.376Z","type":"uj"}
{"msg":"@yacovm @ronenschafferibm `11:11:28 FAIL\tgithub.com/hyperledger/fabric/orderer/common/cluster\t11.284s` a flake in cluster?\nhttps://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/12274/console","username":"tock","ts":"2019-05-22T08:37:14.282Z"}
{"msg":"@yacovm @ronenschafferibm `11:11:28 FAIL\tgithub.com/hyperledger/fabric/orderer/common/cluster\t11.284s` a flake in cluster unit-test?\nhttps://jenkins.hyperledger.org/job/fabric-verify-unit-tests-x86_64/12274/console","username":"tock","ts":"2019-05-22T08:37:14.282Z"}
{"msg":"yes","username":"yacovm","ts":"2019-05-22T09:15:24.307Z"}
{"msg":"looks like the test sometimes gets out of sync:\n```\n\n11:11:28 2019-05-22 08:10:22.715 UTC [test] pullBlocks -> ERRO 0c3 Received a bad block from 127.0.0.1:33318: response is of type <nil>, but expected a block\n11:11:28 2019-05-22 08:10:22.715 UTC [test] tryFetchBlock -> ERRO 0c4 Failed pulling blocks: response is of type <nil>, but expected a block\n11:11:28 2019-05-22 08:10:32.729 UTC [test] fetchLastBlockSeq -> ERRO 0c5 Failed receiving the latest block from 127.0.0.1:33318: didn't receive a response within 10s\n11:11:28 2019-05-22 08:10:32.729 UTC [test] func1 -> WARN 0c6 Received error of type 'didn't receive a response within 10s' from {127.0.0.1:33318 []}\n```","username":"yacovm","ts":"2019-05-22T09:15:34.786Z"}
{"msg":"do you have a Jira for fixing it?","username":"tock","ts":"2019-05-22T13:37:38.634Z"}
{"msg":"i had... i thought i fixed it ","username":"yacovm","ts":"2019-05-22T15:48:43.652Z"}
{"msg":"@yacovm what do you think of removing `orderer/common/server/etcdraft_test.go`? it should be sufficiently covered by current IT (or, if anything is missing there, should be added)","username":"guoger","ts":"2019-05-27T07:44:35.277Z"}
{"msg":"why? it's a UT","username":"yacovm","ts":"2019-05-27T07:45:08.508Z"}
{"msg":"it's a UT that builds and starts OSN bin","username":"guoger","ts":"2019-05-27T07:45:29.597Z"}
{"msg":"i know that","username":"yacovm","ts":"2019-05-27T07:45:34.158Z"}
{"msg":"but integration tests are super slow","username":"yacovm","ts":"2019-05-27T07:45:38.483Z"}
{"msg":"and that test tests stuff that we don't test in IT","username":"yacovm","ts":"2019-05-27T07:45:46.296Z"}
{"msg":"don't we already have tests for sanity check of block?","username":"guoger","ts":"2019-05-27T07:48:10.326Z"}
{"msg":"huh?","username":"yacovm","ts":"2019-05-27T07:48:51.237Z"}
{"msg":"i see 3 things being tested there:\n- invalid gensis block\n- tls is not enabled\n- raft OSN is lauchable\nfirst two should already be covered by UT. as for the third, i think it's in the scope of IT","username":"guoger","ts":"2019-05-27T07:50:35.081Z"}
{"msg":"our UT testing capability in that package isn't good","username":"yacovm","ts":"2019-05-27T07:51:52.539Z"}
{"msg":"so i think launching a binary and testing it can not hurt","username":"yacovm","ts":"2019-05-27T07:52:03.793Z"}
{"msg":"as for the third - we're launching it with a separate listener. we don't do that in ITs","username":"yacovm","ts":"2019-05-27T07:52:21.760Z"}
{"msg":"you mean cluster listener and ab listener? I feel if we really want to test this, it should be done in IT, so we not only check it can launch, but also work properly in a multi-node set up. I'm allured to remove this test is because it's a slippery slope to add slower-than-UT-faster-than-IT tests into packages.","username":"guoger","ts":"2019-05-27T08:00:47.865Z"}
{"msg":"> it's a slippery slope to add slower-than-UT-faster-than-IT tests into packages. \nright, that's exactly why it's there. It saves time overall because it's faster than ITs which run serially. ","username":"yacovm","ts":"2019-05-27T08:02:39.512Z"}
{"msg":"sure... just for the sake of argument, it is not significantly faster than IT (once we don't launch chaincode or ordering specific tests), and tests a lot less than IT.","username":"guoger","ts":"2019-05-27T08:12:07.302Z"}
{"msg":"sure... just for the sake of argument, it is not significantly faster than IT (once we don't launch chaincode in ordering specific tests), and tests a lot less than IT.","username":"guoger","ts":"2019-05-27T08:12:07.302Z"}
{"msg":"It is. ","username":"yacovm","ts":"2019-05-27T08:12:52.010Z"}
{"msg":"it runs in parallel to other tests","username":"yacovm","ts":"2019-05-27T08:13:12.973Z"}
{"msg":"well, if you are talking about time-to-finish in CI, it doesn't matter since we wait for IT anyway. If you are talking about local development, i don't think it increases the confidence... but not worth much debating i guess","username":"guoger","ts":"2019-05-27T08:16:58.964Z"}
{"msg":"That's exactly the problem. By converting it to IT you're only prolonging the total build time","username":"yacovm","ts":"2019-05-27T08:17:39.781Z"}
{"msg":"no i'm not saying coverting it to IT","username":"guoger","ts":"2019-05-27T08:17:56.620Z"}
{"msg":"well i don't want to remove it as it tests important stuff","username":"yacovm","ts":"2019-05-27T08:18:12.626Z"}
{"msg":"ok","username":"guoger","ts":"2019-05-27T08:18:43.313Z"}
{"msg":"let's hear more opinions... @jyellick what do you think? ","username":"yacovm","ts":"2019-05-27T08:19:07.119Z"}
{"msg":"should we remove the said UT ? ","username":"yacovm","ts":"2019-05-27T08:19:17.337Z"}
{"msg":"My take would be leave it in UT. If the IT tests become sufficiently fast and we cover all of the UT stuff in IT (which sounds like it is not currently the case), then we can reexamine. Nothing wrong with IT style tests in unit test paths if they make sense there. ","username":"jyellick","ts":"2019-05-27T19:17:31.816Z"}
{"msg":"@jyellick @sykesm @yacovm There are 5 CRs waiting for review, some are +2 by one reviewer:\nhttps://gerrit.hyperledger.org/r/#/c/fabric/+/31196/  integration tests; +2 by Yacov, Matt, can you renew your +2? it was overridden by the last patch.\nhttps://gerrit.hyperledger.org/r/c/fabric/+/31440 maintenance-filter; Jason, please take a look...\nhttps://gerrit.hyperledger.org/r/c/fabric/+/31670 added a test case to integration to test the maintenance-filter\nhttps://gerrit.hyperledger.org/r/c/fabric/+/31671 sizefilter bug fix, easy\nThese four are stacked. This one is unrelated, based on master:\nhttps://gerrit.hyperledger.org/r/c/fabric/+/31672\nThanks!\n","username":"tock","ts":"2019-06-03T15:10:31.143Z"}
{"msg":"@jyellick @guoger @sykesm @tock With Jason resurfacing the daily Matt/Jason scrum will be the primary place for ordering work coordination. Please try to attend!","username":"dave.enyeart","ts":"2019-06-03T19:56:13.580Z"}
{"msg":"Obviously the top focus for v1.4.2 is the kafka to raft migration, including system test @suryalanka and doc","username":"dave.enyeart","ts":"2019-06-03T19:56:56.241Z"}
{"msg":"Has joined the channel.","username":"suryalanka","ts":"2019-06-03T19:56:56.633Z","type":"uj"}
{"msg":"Also the fabric-orderer bugs need to be triaged, Jay could you help with these?","username":"dave.enyeart","ts":"2019-06-03T19:57:33.696Z"}
{"msg":"Also the fabric-orderer bugs need to be triaged, Jay could you help with these (unless Jason peeks first)","username":"dave.enyeart","ts":"2019-06-03T19:57:33.696Z"}
{"msg":"- FAB-15200: orderer discards the config message - Jay\n- FAB-15558: Consenter for channel exiting - Jay","username":"dave.enyeart","ts":"2019-06-03T19:57:35.431Z"}
{"msg":"FAB-15200: user would need to copy ledger data to new orderer to avoid bootstrapping from genesis. It is not a bug.\nFAB-15558: waiting for more info to reproduce. Most likely it's a problem in Kafka (either bug or misconfiguration)","username":"guoger","ts":"2019-06-04T03:36:54.572Z"}
{"msg":"I'll start back-porting kafka-raft migration to 1.4.2 right away. The last two of the CRs are in review on master, so there is a decent amount of CRs merged already to start this task.","username":"tock","ts":"2019-06-04T06:06:46.416Z"}
{"msg":"Right, we need all the functional items in both master and release-1.4. For refactoring of tests and code, it's a case by case decision by the squad team on how much to keep the release branches in sync vs invest in master only.","username":"dave.enyeart","ts":"2019-06-04T13:15:01.674Z"}
{"msg":"@tock has only a single change set left to be merged to master and I +2d it, we need 1 more volunteer ;) ","username":"yacovm","ts":"2019-06-04T14:55:49.213Z"}
{"msg":"@tock What is the rationale behind not allowing config changes other than consensus type changes in maintenance mode?  It seems generally useful that the network operator might want to for instance modify batch parameters before switching over consensus type, to add new certificate authorities, etc. Did you see some problem scenario?","username":"jyellick","ts":"2019-06-04T20:03:52.624Z"}
{"msg":"+1, I think this would be useful","username":"guoger","ts":"2019-06-05T03:16:08.896Z"}
{"msg":"https://gerrit.hyperledger.org/r/c/fabric/+/31715 fixes an Raft IT flake, which happens fairly often after recent change. The change is simply (1 line). Appreciate if someone could take a look @jyellick @yacovm @C0rWin ","username":"guoger","ts":"2019-06-05T04:31:08.602Z"}
{"msg":"I was thinking that all those changes could be done on-line either before or after migration, as is supported today. consensus-type migration is the only config change so far that requires maintenance mode, and my approach was restrictive: in order to maximize the probability of success, change one thing at a time.\nHowever, if you guys think it is useful to permit all Orderer group changes in maintenance mode, that is an easy fix. \n@yacovm what do you think?","username":"tock","ts":"2019-06-05T06:49:20.176Z"}
{"msg":"I was thinking that all those changes could be done on-line either before or after migration, as is supported today. consensus-type migration is the only config change so far that requires maintenance mode, and my approach was restrictive: in order to maximize the probability of success, change one thing at a time.\nHowever, if you guys think it is useful to permit all Orderer group changes in maintenance mode, that is an easy fix. \n@yacovm what do you think?","username":"tock","ts":"2019-06-05T06:49:20.176Z"}
{"msg":"I was thinking that all those changes could be done on-line either before or after migration, as is supported today. consensus-type migration is the only config change so far that requires maintenance mode, and my approach was restrictive: in order to maximize the probability of success, change one thing at a time.\nHowever, if you guys think it is useful to permit all Orderer group changes in maintenance mode, that is easy to change. \n@yacovm what do you think?","username":"tock","ts":"2019-06-05T06:49:20.176Z"}
{"msg":"?","username":"tock","ts":"2019-06-05T06:49:20.176Z"}
{"msg":"@adarshsaraf123 are you going to be able to finish up the raft config processing cleanup soon? If you can't get to it in the next week or so, I think we might need to hand it off to someone with cycles to complete it.","username":"jyellick","ts":"2019-06-05T14:33:34.133Z"}
{"msg":"Yes Jason. I am currently working on the reviews from Matt and Jay. ","username":"adarshsaraf123","ts":"2019-06-05T14:34:11.162Z"}
{"msg":"Ah great, thanks!","username":"jyellick","ts":"2019-06-05T14:34:33.096Z"}
{"msg":"So i was occupied till the end of May with a conference deadline and therefore I couldn't get to it so far. ","username":"adarshsaraf123","ts":"2019-06-05T14:35:58.273Z"}
{"msg":"No problem, I understand","username":"jyellick","ts":"2019-06-05T15:20:25.451Z"}
{"msg":"The idea is that changing every other parameter is possible on-line, either before or after migration. Since establishing a new cluster is a sensitive operation, I was thinking of making it conservative and allowing one change at a time; first establish a raft cluster, then make changes. \nHowever, if you guys think it is useful to allow other Orderer group config changes in maintenance mode, then the restriction can be easily removed. @yacovm  what do you think?","username":"tock","ts":"2019-06-05T18:14:18.259Z"}
{"msg":"I would even go so far as to allow arbitrary config changes.  I would of doc that during consensus migration that we recommend one step at a time, but unless we have a concrete scenario where something destructive can happen, I'm not sure it's worth explicitly checking -- it is after all code we have to maintain and if we find a case in the future where maintenance mode for other config changes are useful, then we have to do yet another capability around the config processing.","username":"jyellick","ts":"2019-06-05T18:21:48.512Z"}
{"msg":"I would even go so far as to allow arbitrary config changes.  I would doc that during consensus migration that we recommend one step at a time, but unless we have a concrete scenario where something destructive can happen, I'm not sure it's worth explicitly checking -- it is after all code we have to maintain and if we find a case in the future where maintenance mode for other config changes are useful, then we have to do yet another capability around the config processing.","username":"jyellick","ts":"2019-06-05T18:21:48.512Z"}
{"msg":"OK, sounds good. What I think should be kept is the following: 1) entry and exit to/from maintenance mode are not accompanied by a change; 2) ConsensusType.Type can only change in maintenance-mode. How does that sound?","username":"tock","ts":"2019-06-05T18:30:53.191Z"}
{"msg":"Works for me, thanks Yoav!","username":"jyellick","ts":"2019-06-05T18:31:37.157Z"}
{"msg":"I pushed a CR that implements this.","username":"tock","ts":"2019-06-06T19:47:31.533Z"}
{"msg":"I pushed a CR that implements this. @jyellick ","username":"tock","ts":"2019-06-06T19:47:31.533Z"}
{"msg":"https://gerrit.hyperledger.org/r/c/fabric/+/31749","username":"tock","ts":"2019-06-06T19:47:34.554Z"}
{"msg":"Great, I'll take a look","username":"jyellick","ts":"2019-06-06T19:50:01.163Z"}
{"msg":"Great, I'll take a look","username":"jyellick","ts":"2019-06-06T19:50:14.629Z"}
{"msg":"@tock https://gerrit.hyperledger.org/r/c/fabric/+/31750 is a simple cherry-pick of the code used to explicitly set capabilities that @sykesm was asking for in your series.","username":"jyellick","ts":"2019-06-06T20:08:07.564Z"}
{"msg":"Looks good, I'll start using that in my integration test. V2_0 on master and V1_4_2 on release-v1.4. Thanks!","username":"tock","ts":"2019-06-07T05:18:43.956Z"}
{"msg":"@tock Can you explain to me why this check is needed? https://github.com/hyperledger/fabric/blob/228387d00f18791b74f50fbb68f1bbd5c5730137/orderer/consensus/etcdraft/chain.go#L323 Could we not simply check to see if the consensus metadata field is nil in the block (as the block writer nils this field on migration), indicating that the chain must have been migrated?","username":"jyellick","ts":"2019-06-07T18:45:36.404Z"}
{"msg":"@tock Can you explain to me why this check is needed? https://github.com/hyperledger/fabric/blob/228387d00f18791b74f50fbb68f1bbd5c5730137/orderer/consensus/etcdraft/chain.go#L323 Could we not simply check to see if the consensus metadata field is nil in the block (as the block writer nils this field on migration), indicating that the chain must have been migrated?\n\nParticularly, if we can get away without having the `DetectConsensusMigration` method added to the consenter API, it would be nice.","username":"jyellick","ts":"2019-06-07T18:45:36.404Z"}
{"msg":"what consensus metadata do you have when you have the genesis block?","username":"yacovm","ts":"2019-06-07T18:47:18.961Z"}
{"msg":"Should be `nil` as well","username":"jyellick","ts":"2019-06-07T18:47:41.080Z"}
{"msg":"well then how do you distinguish?","username":"yacovm","ts":"2019-06-07T18:48:03.571Z"}
{"msg":"Block number? Also... it's fine not to? Both mean we need to initialize a new Raft WAL","username":"jyellick","ts":"2019-06-07T18:48:18.923Z"}
{"msg":"oh you're saying that if our chain is non empty and we have a nil metadata then it means we have migrated ? ","username":"yacovm","ts":"2019-06-07T18:50:30.200Z"}
{"msg":"Right","username":"jyellick","ts":"2019-06-07T18:50:35.304Z"}
{"msg":"Metadata should only ever be nil if 1) It's a new chain, 2) It's a migrated chain.  And both are treated the same unless I'm missing something.","username":"jyellick","ts":"2019-06-07T18:51:26.161Z"}
{"msg":"(And we can of course differentiate 1 and 2 by block number/height)","username":"jyellick","ts":"2019-06-07T18:52:51.725Z"}
{"msg":"(And we can of course differentiate 1 and 2 by block number/height, though the only reason I might is for logging)","username":"jyellick","ts":"2019-06-07T18:52:51.725Z"}
{"msg":"makes sense I think.... let's hear what @tock thinks","username":"yacovm","ts":"2019-06-07T18:53:36.513Z"}
{"msg":"Checking that the block metadata is nil inside the chain.go seems like dark pattern that nobody but us will get, unless we disclose that secret... and it does not carry over to other consensus types. Hence the decision to implement it outside in method that is accessible to all `DetectConsensusMigration`. I think that is the right thing to do in the long term. Whether it is in the consenter API or soem other API that is a different issue, We can certainly move that (maybe when we dismantle the \"Support\" pattern?).","username":"tock","ts":"2019-06-11T06:51:25.588Z"}
{"msg":"Checking that the block metadata is nil inside the chain.go seems like dark pattern that nobody but us will get, unless we disclose that secret... and it does not carry over to other consensus types. Hence the decision to implement it outside in a method that is accessible to all `DetectConsensusMigration`. I think that is the right thing to do in the long term. Whether it is in the consenter API or soem other API that is a different issue, We can certainly move that (maybe when we dismantle the \"Support\" pattern?).","username":"tock","ts":"2019-06-11T06:51:25.588Z"}
{"msg":"Checking that the block metadata is nil inside the chain.go seems like dark pattern that nobody but us will get, unless we disclose that secret... and it does not carry over to other consensus types. Hence the decision to implement it outside in a method that is accessible to all `DetectConsensusMigration`. I think that is the right thing to do in the long term. Whether it is in the consenter API or some other API - that is a different issue, We can certainly move that (maybe when we dismantle the \"Support\" pattern?).","username":"tock","ts":"2019-06-11T06:51:25.588Z"}
{"msg":"As to what is checked in `DetectConsensusMigration` , I strongly think that checking just metadata==nil is fragile... I rather be declarative and explicit about what is going on, I think although this may seem redundant now, it may prove easier to maintain and extend.","username":"tock","ts":"2019-06-11T06:53:42.884Z"}
{"msg":"As to what is checked in `DetectConsensusMigration` , I strongly think that checking just metadata==nil is fragile... I rather be declarative and explicit about what is going on, I think although this may seem redundant now, it may prove easier to maintain and extend. That is why Detect is comparing the consensus-type values in to consecutive config blocks.","username":"tock","ts":"2019-06-11T06:53:42.884Z"}
{"msg":"As to what is checked in `DetectConsensusMigration` , I strongly think that checking just metadata==nil is fragile... I rather be declarative and explicit about what is going on, I think although this may seem redundant now, it may prove easier to maintain and extend. That is why Detect is comparing the consensus-type values in two consecutive config blocks.","username":"tock","ts":"2019-06-11T06:53:42.884Z"}
{"msg":"The way chain.go was written is mainly because I did not want to change the node.go API at that point in time. But that can also be refactored easily.","username":"tock","ts":"2019-06-11T06:56:43.474Z"}
{"msg":"The way chain.go was written is mainly because I did not want to change the node.go start()  at that point in time. But that can also be refactored easily.","username":"tock","ts":"2019-06-11T06:56:43.474Z"}
{"msg":"> unless we disclose that secret... and it does not carry over to other consensus types.\nWe explicitly nil the consensus metadata when consensus type changes, how would other types be different?","username":"jyellick","ts":"2019-06-11T14:13:11.566Z"}
{"msg":"But I'm not sure why this is such a dark pattern.  Seems like we can explicitly state: \"If the consensus implementation maintains state which must persist between reboots, then it should be stored in the consensus metadata of the block.  If the consensus metadata is nil, then the consensus implementation must initialize this state and persist it in the next block.  This typically occurs at channel creation time, or consensus type migration\".  That coalesces two distinct paths (bootstrap, and migration) into one code path, and removes a dependency from the API.","username":"jyellick","ts":"2019-06-11T14:24:11.962Z"}
{"msg":"But I'm not sure why this is such a dark pattern.  Seems like we can explicitly state: \"If the consensus implementation maintains state which must persist between process restarts, then it should be stored in the consensus metadata of the block.  If the consensus metadata is nil, then the consensus implementation must initialize this state and persist it in the next block.  This typically occurs at channel creation time, or consensus type migration\".  That coalesces two distinct paths (bootstrap, and migration) into one code path, and removes a dependency from the API.","username":"jyellick","ts":"2019-06-11T14:24:11.962Z"}
{"msg":"But I'm not sure why this is such a dark pattern.  Seems like we can explicitly state: \"If the consensus implementation maintains state which must persist between process restarts, then it should be stored in the consensus metadata of the block.  If the consensus metadata is nil, then the consensus implementation must initialize this state and persist it in the next block.  This typically occurs at channel creation time, or consensus type migration\".  That coalesces two distinct paths (bootstrap, and migration) into one code path, and removes a dependency from the API.  It also seems quite natural and a standard pattern \"If a thing is uninitialized, initialize it\"","username":"jyellick","ts":"2019-06-11T14:24:11.962Z"}
{"msg":"FWIW I also think having the more general ability to reset consenter state by nil-ing metadata would be useful.  If a Raft cluster has permanently lost quorum, then simply build a ledger which is the union of all chains, zero the metadata, and start the cluster.","username":"jyellick","ts":"2019-06-11T14:28:05.055Z"}
{"msg":"FWIW I also think having the more general ability to reset consenter state by nil-ing metadata would be useful.  If a Raft cluster has permanently lost quorum, then simply build a ledger which is the union of all chains, nil the metadata, and start the cluster.","username":"jyellick","ts":"2019-06-11T14:28:05.055Z"}
{"msg":"What do you think @tock ?","username":"jyellick","ts":"2019-06-11T14:28:29.354Z"}
{"msg":"Has joined the channel.","username":"Swhit210","ts":"2019-06-11T17:06:18.233Z","type":"uj"}
{"msg":"I am not sure how resetting the metadata would help in this scenario... the orderer will get the last config block and there it will find the same set of nodes out of which there is no quorum... the metadata just provides indexes, no? In addition, the metadata is signed, so unless I am mistaken there is no easy way to change it \"from the outside\", no?","username":"tock","ts":"2019-06-12T14:07:35.393Z"}
{"msg":"I was thinking of a scenario with a corrupted WAL","username":"jyellick","ts":"2019-06-12T14:13:51.995Z"}
{"msg":"So, simply bootstrap the same set of Raft nodes, all with the same ledger info, all with nil-ed metadata, and they will restart the cluster successfully.","username":"jyellick","ts":"2019-06-12T14:15:01.931Z"}
{"msg":"We could similarly do offline ledger modifications to add a config block with an updated consenter set.  But we need some way to signal etcdraft that we are bootstrapping -- nil metadata would be an obvious mechanism.","username":"jyellick","ts":"2019-06-12T14:16:28.027Z"}
{"msg":"Regardless of how useful nil metadata for bootstrapping is in other scenarios, let's return to the 'dark pattern' bit.  Keying off nil-metadata would remove a hundred or so lines of code and test, plus a consenter interface dependency.  What is the problem scenario you see? If there's no explicit problem (regardless of any other benefits), it seems like a win.","username":"jyellick","ts":"2019-06-12T14:20:13.137Z"}
{"msg":"( @tock )","username":"jyellick","ts":"2019-06-12T14:20:23.399Z"}
{"msg":"@jyellick I see that as a form of defensive programming. On one end of we insert a nil metadata only if: it is a consensus-type change, it is in maintenance, on two consecutive config blocks. On the other end, after restart, we check that if it is a nil, said conditions still hold. Why check? because there are so many ways things can go wrong, but only one way to be correct and consistent. Now, looking at the code, I see now that the checks I did are not good enough... they should probably panic when the metadata is nil and the above conditions do not hold; instead, they return false. That would probably make the node crash later on, but I don't know that for sure.","username":"tock","ts":"2019-06-12T18:48:17.106Z"}
{"msg":"@tock Can you enumerate some situation where the metadata is nil that is not a) bootstrap, b) migration, or c) manual user intervention.  Are any of these recoverable?","username":"jyellick","ts":"2019-06-12T18:50:20.539Z"}
{"msg":"Well, here is one: after you and I have transitioned to another project, someone decides to insert nil metadata somewhere. Then, migration_test.go would blow up in his face and he would be informed that he needs to take care of these restrictions. I don't see how (c) is possible, as the metadata needs to be signed by an orderer...","username":"tock","ts":"2019-06-12T18:54:08.699Z"}
{"msg":"I don't follow your example.  How does someone decide to simply set nil metadata? If they need persistent state in the metadata, this would break them in all sorts of other ways?","username":"jyellick","ts":"2019-06-12T18:56:01.304Z"}
{"msg":"Also, `migration_test.go` doesn't execute against the various consensus plugins anyway, so I'm not sure how this would be caught.","username":"jyellick","ts":"2019-06-12T18:56:37.004Z"}
{"msg":"I meant programmatically, by implementing a code change to fabric... ","username":"tock","ts":"2019-06-12T19:00:44.259Z"}
{"msg":"Can you give a more concrete example?  We have an API contract for consensus plugins which says they give us consensus metadata, and, on startup, we pass them the most recent copy of said metadata.","username":"jyellick","ts":"2019-06-12T19:01:47.957Z"}
{"msg":"Can you give a more concrete example?  We have an API contract for consensus plugins which says they give us consensus metadata for each block, and, on startup, we pass them the most recent copy of said metadata.","username":"jyellick","ts":"2019-06-12T19:01:47.957Z"}
{"msg":"We nil the metadata whe we switch from one type to the other. what if someone changes blockwriter to nil the metadata on some other criteria? then, if he does not take care of the \"Detect\" check, his code will fail.","username":"tock","ts":"2019-06-12T19:06:50.934Z"}
{"msg":"If someone changes blockwriter to nil the metadata... then consensus plugins will break, because it breaks the contract that we return the most recent metadata for that plugin on startup","username":"jyellick","ts":"2019-06-12T19:07:40.530Z"}
{"msg":"well, maybe - I am not sure how it will break exactly, but it better break early, with a clear message, no?","username":"tock","ts":"2019-06-12T19:09:40.012Z"}
{"msg":"kind of like \"fail fast, fail safe\"","username":"tock","ts":"2019-06-12T19:10:45.673Z"}
{"msg":"It just doesn't seem like a particularly reasonable thing to defend against to me.  If someone starts nil-ing data structures given to it for storage by a consensus plugin, what other result can they expect beyond failure?  There are a multitude of ways that a bad programmer could corrupt the data given to blockwriter, but we don't defend against those.","username":"jyellick","ts":"2019-06-12T19:10:46.157Z"}
{"msg":"What would the clear message be though?","username":"jyellick","ts":"2019-06-12T19:11:07.650Z"}
{"msg":"\"unexpected nil metadata, not during migration\" ?","username":"tock","ts":"2019-06-12T19:11:59.014Z"}
{"msg":"But some consensus plugins don't require metadata, and nil is perfectly acceptable (e.g. solo)","username":"jyellick","ts":"2019-06-12T19:12:37.825Z"}
{"msg":"And solo doesn't care whether you're migrating from Kafka, or Raft, or anything.  As there's no special init it needs to do on migration.","username":"jyellick","ts":"2019-06-12T19:13:05.559Z"}
{"msg":"I mean, it is similar to when one component checks the validity of inputs given to it by a different component. In reality, even \"good\" programmers don't always know all the conditions the other component is expecting; but a robust system will reject those fast, when he breaks them.","username":"tock","ts":"2019-06-12T19:16:33.265Z"}
{"msg":"we never migrate from anything to solo... I made sure of that ;-)","username":"tock","ts":"2019-06-12T19:17:46.402Z"}
{"msg":"Which, if you saw my comment on your WIP CR I'd really like to change :slight_smile: ","username":"jyellick","ts":"2019-06-12T19:18:11.850Z"}
{"msg":"yep, i saw that and responded too... my approach is, if it is not tested, it is not working, so kafak->solo can be added with one line, but only with a corresponding integration test ;-)","username":"tock","ts":"2019-06-12T19:20:53.844Z"}
{"msg":"I am still extremely unconvinced that this check is worth performing, but let me go ahead and proceed under the assumption that it's the right thing to do.  I still don't think we're approaching it the right way.  We've added a new function to the consenter plugin API, which we expect the consensus plugin to invoke during the chain startup, to see if there's extra work it needs to do.  This seems like a case where a programmer very likely will forget to do this.  Instead, it makes much more sense to me that we should simply detect the migration at startup, and pass in a field to the HandleChain function for the implementer to deal with.","username":"jyellick","ts":"2019-06-12T19:21:54.762Z"}
{"msg":"> yep, i saw that and responded too... my approach is, if it is not tested, it is not working, so kafak->solo can be added with one line, but only with a corresponding integration test ;-)\nWe don't have to claim support for it.","username":"jyellick","ts":"2019-06-12T19:22:50.177Z"}
{"msg":"> yep, i saw that and responded too... my approach is, if it is not tested, it is not working, so kafak->solo can be added with one line, but only with a corresponding integration test ;-)\nWe don't have to claim support for it.  But we also don't need to maintain code which explicitly prevents it.","username":"jyellick","ts":"2019-06-12T19:22:50.177Z"}
{"msg":"I didn't see an integration test which proves it can't be done either :slight_smile: ","username":"jyellick","ts":"2019-06-12T19:23:45.733Z"}
{"msg":"I didn't see an integration test which proves it can't be done either :slight_smile:  (And let's be clear, we don't need to test red paths in integration tests, or even all paths)","username":"jyellick","ts":"2019-06-12T19:23:45.733Z"}
{"msg":"ok, ","username":"tock","ts":"2019-06-12T19:25:34.426Z"}
{"msg":"```//=== Step 7: ===\n\t\t\tBy(\"7) Config update on system channel, change ConsensusType.Type to unsupported type, forbidden\")\n\t\t\tassertTransitionFailed(network, peer, orderer, syschannel,\n\t\t\t\t\"kafka\", protosorderer.ConsensusType_STATE_MAINTENANCE,\n\t\t\t\t\"solo\", nil, protosorderer.ConsensusType_STATE_MAINTENANCE)\n\n\t\t\t//=== Step 8: ===\n\t\t\tBy(\"8) Config update on standard channel, change ConsensusType.Type to unsupported type, forbidden\")\n\t\t\tassertTransitionFailed(network, peer, orderer, channel1,\n\t\t\t\t\"kafka\", protosorderer.ConsensusType_STATE_MAINTENANCE,\n\t\t\t\t\"hesse\", nil, protosorderer.ConsensusType_STATE_MAINTENANCE)```","username":"tock","ts":"2019-06-12T19:25:52.765Z"}
{"msg":"My mistake, I guess there is an integration test, but that's really tangential.","username":"jyellick","ts":"2019-06-12T19:26:55.436Z"}
{"msg":"anyway, lets strive towards a solution...","username":"tock","ts":"2019-06-12T19:27:14.036Z"}
{"msg":"I understand you concern. can you elaborate more about the alternative?","username":"tock","ts":"2019-06-12T19:27:50.258Z"}
{"msg":"I understand your concern. can you elaborate more about the alternative?","username":"tock","ts":"2019-06-12T19:27:50.258Z"}
{"msg":"Sure.  Today, we have:\n\n```// Consenter defines the backing ordering mechanism.\ntype Consenter interface {\n        // HandleChain should create and return a reference to a Chain for the given set of resources.\n        // It will only be invoked for a given chain once per process.  In general, errors will be treated\n        // as irrecoverable and cause system shutdown.  See the description of Chain for more details\n        // The second argument to HandleChain is a pointer to the metadata stored on the `ORDERER` slot of\n        // the last block committed to the ledger of this Chain.  For a new chain, this metadata will be\n        // nil, as this field is not set on the genesis block\n        HandleChain(support ConsenterSupport, metadata *cb.Metadata) (Chain, error)\n}\n```\n\nMy proposed solution would be to simply do this:\n\n```\n// Consenter defines the backing ordering mechanism.\ntype Consenter interface {\n        // HandleChain should create and return a reference to a Chain for the given set of resources.\n        // It will only be invoked for a given chain once per process.  In general, errors will be treated\n        // as irrecoverable and cause system shutdown.  See the description of Chain for more details\n        // The second argument to HandleChain is a pointer to the metadata stored on the `ORDERER` slot of\n        // the last block committed to the ledger of this Chain.  For a new chain, or one which is migrated,\n        // this metadata will be nil, as there is no prior metadata to report.\n        HandleChain(support ConsenterSupport, metadata *cb.Metadata) (Chain, error)\n}\n```\n\nHowever, if we think we need to explicitly check whether a consensus migration occurred, I would do the following:\n\n```\n// Consenter defines the backing ordering mechanism.\ntype Consenter interface {\n        // HandleChain should create and return a reference to a Chain for the given set of resources.\n        // It will only be invoked for a given chain once per process.  In general, errors will be treated\n        // as irrecoverable and cause system shutdown.  See the description of Chain for more details\n        // The second argument to HandleChain is a pointer to the metadata stored on the `ORDERER` slot of\n        // the last block committed to the ledger of this Chain.  For a new chain, this metadata will be\n        // nil, as this field is not set on the genesis block.  For new chains, and for migrated chains, initialize\n        // will be set to true, indicating that the consenter should perform whatever one time initialization\n        // is required for its operation.\n        HandleChain(support ConsenterSupport, metadata *cb.Metadata, initialize bool) (Chain, error)\n}\n```","username":"jyellick","ts":"2019-06-12T19:31:33.779Z"}
{"msg":"Then, the caller of `HandleChain` (chainsupport.go) would perform the detection checks and set the `initialize` var as appropriate.","username":"jyellick","ts":"2019-06-12T19:33:28.384Z"}
{"msg":"ok, I understand. That sounds good. ","username":"tock","ts":"2019-06-12T19:34:23.076Z"}
{"msg":"Let me sleep on it (literally, it is getting late here ;-) ) and I'll take care of that first thing tomorrow morning.","username":"tock","ts":"2019-06-12T19:36:56.651Z"}
{"msg":"Sounds good, thanks for staying up to discuss.","username":"jyellick","ts":"2019-06-12T19:37:36.485Z"}
{"msg":"Sure, no problem.","username":"tock","ts":"2019-06-12T19:39:04.240Z"}
{"msg":"Has joined the channel.","username":"ArtemFrantsiian","ts":"2019-06-14T08:27:58.848Z","type":"uj"}
{"msg":"@jyellick  These two CRs address the issues discussed above:\nhttps://gerrit.hyperledger.org/r/c/fabric/+/31932\nhttps://gerrit.hyperledger.org/r/c/fabric/+/31856","username":"tock","ts":"2019-06-17T12:23:02.956Z"}
{"msg":"@tock i'll get to your CR stack tomorrow (i don't have +2 permission yet...)","username":"guoger","ts":"2019-06-19T13:54:36.397Z"}
{"msg":"@guoger Congratulations! I left you a basket of cherries as a welcome present ;-)","username":"tock","ts":"2019-06-20T06:05:56.132Z"}
{"msg":"@guoger Congratulations! I left you a basket of cherries as a promotion present ;-)","username":"tock","ts":"2019-06-20T06:05:56.132Z"}
{"msg":"really appreciated!! i just need to find my way to Haifa now :thinking: ","username":"guoger","ts":"2019-06-20T06:09:09.145Z"}
{"msg":"I think he meant cherry picks, but not sure","username":"yacovm","ts":"2019-06-20T06:23:22.071Z"}
{"msg":"I picked them myself","username":"tock","ts":"2019-06-20T08:47:12.735Z"}
{"msg":"@adarshsaraf123 Thanks for getting those CRs for the config processing consolidation put together, but it looks like they're now in conflict ( https://gerrit.hyperledger.org/r/c/fabric/+/30811 ).  @guoger mentioned that you were planning to rebase them, but just wanted to confirm.","username":"jyellick","ts":"2019-06-26T04:37:36.556Z"}
{"msg":"@tock Were you planning to cherry-pick https://gerrit.hyperledger.org/r/c/fabric/+/31856 and https://gerrit.hyperledger.org/r/c/fabric/+/31932 or would you like me to?","username":"jyellick","ts":"2019-06-26T04:38:54.888Z"}
{"msg":"Yes @jyellick. I will do the rebasing. ","username":"adarshsaraf123","ts":"2019-06-26T04:42:52.076Z"}
{"msg":"Yes @jyellick I will do the rebasing.","username":"adarshsaraf123","ts":"2019-06-26T04:42:52.076Z"}
{"msg":"@jyellick I will cherry-pick them.","username":"tock","ts":"2019-06-26T06:19:49.019Z"}
{"msg":"@jyellick @guoger and others, The rebasing of the Consensus MetadataValidator CRs is done. Please review and hopefully we can get it merged soon. ","username":"adarshsaraf123","ts":"2019-06-26T11:12:07.222Z"}
{"msg":"@yacovm looking at your [comment](https://gerrit.hyperledger.org/r/c/fabric/+/32206/2/orderer/consensus/etcdraft/chain.go#355)\n> why can't we just piggyback on the messages sent from the leader? then we don't need this whole periodic sending because we can just grab the latest metadata and send it.\nwhich metadata are you referring to?","username":"guoger","ts":"2019-07-08T11:13:54.738Z"}
{"msg":"@yacovm, @dave.enyeart Is there any activity going on about https://jira.hyperledger.org/browse/FAB-5288? Is it actually being rolled out in 2.0? What about backporting it to 1.4.x LTS as well?","username":"minollo","ts":"2019-07-08T11:17:09.105Z"}
{"msg":"what do you mean what metadata? you literally added some new metadata, no? ","username":"yacovm","ts":"2019-07-08T19:59:03.736Z"}
{"msg":"pls see comment in that CR","username":"guoger","ts":"2019-07-09T01:59:17.218Z"}
{"msg":"@yacovm @jyellick let’s chat here. it’s all about what we want to show while no leader is elected. I think this metrics will be more useful if it shows how many nodes can be reached in this situation. ","username":"guoger","ts":"2019-07-12T09:13:02.354Z"}
{"msg":"If that’s not the case, then you guys are definitely right, we could grab the progress from leader and disseminate","username":"guoger","ts":"2019-07-12T09:14:02.090Z"}
{"msg":"i thought you did that thing to know when you have enough standby nodes? @guoger ","username":"yacovm","ts":"2019-07-12T09:55:56.726Z"}
{"msg":"not to know the status when you have no leader","username":"yacovm","ts":"2019-07-12T09:56:04.256Z"}
{"msg":"that's what you said back then","username":"yacovm","ts":"2019-07-12T09:56:09.806Z"}
{"msg":"What’s your definition of standby?","username":"guoger","ts":"2019-07-12T09:57:44.774Z"}
{"msg":"It’s likely that my words there were not precise enough ","username":"guoger","ts":"2019-07-12T09:58:41.461Z"}
{"msg":"follower","username":"yacovm","ts":"2019-07-12T09:59:31.057Z"}
{"msg":"It’s not about knowing *enough* nodes. It’s about knowing exactly how many nodes, even when there’s not quorum","username":"guoger","ts":"2019-07-12T10:06:30.335Z"}
{"msg":"@guoger I'm really quite confused by this.  My understanding was that our primary motivator for this CR was to be able to tell admins whether or not a config update would break cluster quorum.  So, necessarily, a quorum does exist, else, the config update would be rejected as no leader is available anyway.","username":"jyellick","ts":"2019-07-12T13:42:29.814Z"}
{"msg":"^ that's what I also inferred last time","username":"yacovm","ts":"2019-07-12T13:44:50.280Z"}
{"msg":"but instead config update - a maintenance period ","username":"yacovm","ts":"2019-07-12T13:45:04.129Z"}
{"msg":"but that raises the question - if multiple people wanna do a config update / maintenance, at the same time, without synchronizing - it can be problematic","username":"yacovm","ts":"2019-07-12T13:45:43.895Z"}
{"msg":"so they might as well just always be forced to synchronize ","username":"yacovm","ts":"2019-07-12T13:45:51.209Z"}
{"msg":"So, i think there are 2 motivators:\n1) display alive nodes in cluster\n2) and as what you said there, reject dangerous reconfig (quorum loss)\n\nand i think the main confusion is around 1).","username":"guoger","ts":"2019-07-12T13:48:57.199Z"}
{"msg":"and i'm lost when you say maintenance... could you elaborate?","username":"guoger","ts":"2019-07-12T13:50:30.959Z"}
{"msg":"like changing a router/switch ","username":"yacovm","ts":"2019-07-12T13:50:52.048Z"}
{"msg":"oh, i thought you were talking about maintenance mode for migration... ","username":"guoger","ts":"2019-07-12T13:51:42.124Z"}
{"msg":"basically i think they should synchronize on when to do config update and maintenance. But, that's orthogonal to this specific task, no?","username":"guoger","ts":"2019-07-12T13:53:50.439Z"}
{"msg":"My concern with (1) is that we can't really do it reliably.  We're having to implement it on our own, and, unless there's a quorum, we can't say with any certainty whether that number has any bearing on the reality of the network.","username":"jyellick","ts":"2019-07-12T14:01:59.986Z"}
{"msg":"Knowing the number of 'alive nodes' doesn't seem very useful by itself.  As having 100% alive nodes doesn't mean that the network can form quorum","username":"jyellick","ts":"2019-07-12T14:03:35.710Z"}
{"msg":"(if you allow one-way network partitioning, for instance)","username":"jyellick","ts":"2019-07-12T14:03:51.573Z"}
{"msg":"my general argument against doing it back then, is that we don't gain much from the ability of letting all administrators see the communication between the leader and the nodes of the cluster","username":"yacovm","ts":"2019-07-12T14:04:39.774Z"}
{"msg":"but we pay a lot in complexity ","username":"yacovm","ts":"2019-07-12T14:04:54.068Z"}
{"msg":"let me ask you this","username":"yacovm","ts":"2019-07-12T14:07:11.008Z"}
{"msg":"we log the connection errors anyway, right?","username":"yacovm","ts":"2019-07-12T14:07:31.453Z"}
{"msg":"First of all, let me make sure we are on the same page: @yacovm is against the story (adding \"alive node\" metrics), and @jyellick is arguing about what this metrics should actually mean, correct?","username":"guoger","ts":"2019-07-12T14:08:20.113Z"}
{"msg":"i just don't know what an administrator of org A is going to do with information that org B cannot connect to the leader node","username":"yacovm","ts":"2019-07-12T14:09:28.121Z"}
{"msg":"since the leader node sends hearbeats anyway to everyone","username":"yacovm","ts":"2019-07-12T14:09:38.831Z"}
{"msg":"My initial goal/understanding, was that we were simply going to take the active node information, maintained by etcd, at the leader, and disseminate it to the followers.  In this way, we could make smart decisions about config updates that break quorum, and, be able to uniformly report via metrics the cluster health (in terms of nodes in quorum) through every orderer's metrics.","username":"jyellick","ts":"2019-07-12T14:10:42.225Z"}
{"msg":"I think that if we do that, we should just send that `Status()` result from the leader to the nodes, and not collect the information ourselves based on the last received timestamp","username":"yacovm","ts":"2019-07-12T14:12:55.436Z"}
{"msg":"(that's what I said in the CR)","username":"yacovm","ts":"2019-07-12T14:13:01.328Z"}
{"msg":"@yacovm what is this question about?\n> we log the connection errors anyway, right?","username":"guoger","ts":"2019-07-12T14:14:39.320Z"}
{"msg":"so what i mean is - I don't think this is very useful, but if we do it, we should do it with as less code as possibl","username":"yacovm","ts":"2019-07-12T14:15:27.090Z"}
{"msg":"so what i mean is - I don't think this is very useful, but if we do it, we should do it with as less code as possible and just take what the leader knows anyway","username":"yacovm","ts":"2019-07-12T14:15:27.090Z"}
{"msg":"i'm saying that if people monitor logs, then they should see something is wrong","username":"yacovm","ts":"2019-07-12T14:16:10.204Z"}
{"msg":"OK, we can probably talk about `I don't think this is very useful` later, since you seem to be ok with `if we do it`","username":"guoger","ts":"2019-07-12T14:16:51.909Z"}
{"msg":"I don't mean to belittle or anything, I'm just saying this isn't essential ","username":"yacovm","ts":"2019-07-12T14:18:48.132Z"}
{"msg":"If we can accomplish this without injecting a lot of new code and complexity, the value seems there to me.","username":"jyellick","ts":"2019-07-12T14:19:53.584Z"}
{"msg":"But as mentioned, I had assumed we'd simply be disseminating the active node info etcd collects from the leader to the followers. (Which is hopefully low complexity)","username":"jyellick","ts":"2019-07-12T14:20:27.142Z"}
{"msg":"my argument is simply: suppose we have an outage of nodes, only 2/5 are alive. I think this metrics is more helpful if it shows 2. Otherwise, there's really not much info with `activeNodes = 0`","username":"guoger","ts":"2019-07-12T14:21:53.181Z"}
{"msg":"hmmm, i wonder what stats are really collected from the leader when the quorum is lost?","username":"yacovm","ts":"2019-07-12T14:22:33.571Z"}
{"msg":"have you checked?","username":"yacovm","ts":"2019-07-12T14:22:36.616Z"}
{"msg":"there's no leader when quorum is lost","username":"guoger","ts":"2019-07-12T14:23:02.719Z"}
{"msg":"right","username":"yacovm","ts":"2019-07-12T14:23:10.753Z"}
{"msg":"so what does the previous leader print?","username":"yacovm","ts":"2019-07-12T14:23:16.062Z"}
{"msg":"print? do you mean repeated campaign?","username":"guoger","ts":"2019-07-12T14:23:34.345Z"}
{"msg":"no i mean from that API call that Jason recommended","username":"yacovm","ts":"2019-07-12T14:23:55.198Z"}
{"msg":"if it's not leader, it only returns the info about logs","username":"guoger","ts":"2019-07-12T14:25:00.168Z"}
{"msg":"index etc","username":"guoger","ts":"2019-07-12T14:25:08.135Z"}
{"msg":"If there are only 2/5 nodes alive, then we return that we have no quorum, so we can't give network state.  This seems fine to me.","username":"jyellick","ts":"2019-07-12T14:25:20.564Z"}
{"msg":"As I said before, for instance, if network latencies suddenly climb to be huge, all nodes might be 'active', but quorum would still be incapable of forming.  There are a lot of edge cases and nuances that etcdraft handles and tracks for us, that we don't want to handle.","username":"jyellick","ts":"2019-07-12T14:26:46.034Z"}
{"msg":"we have `msg_send_time` in the cluster metrics btw ;) ","username":"yacovm","ts":"2019-07-12T14:27:31.170Z"}
{"msg":"if network is getting clogged this would go up","username":"yacovm","ts":"2019-07-12T14:27:43.091Z"}
{"msg":"> If there are only 2/5 nodes alive, then we return that we have no quorum, so we can't give network state. This seems fine to me.\nok, i think we can actually provide admin with more info, but since we clearly have a vote 2 vs 1, i'll make the change.\n\nFWIW,  i think `msg_send_time >= election timeout` and `active node >= quorum`, admin should have a better chance to diagnose problem :P","username":"guoger","ts":"2019-07-12T14:30:42.993Z"}
{"msg":"@guoger @yacovm could you re-+2 this one? https://gerrit.hyperledger.org/r/c/fabric/+/32278 I quick added a way to override for the peer too","username":"jyellick","ts":"2019-07-12T14:31:18.650Z"}
{"msg":"@guoger I don't disagree that there's some value, tracking the other replicas that a node has seen, and presenting this value to the user.  But given the amount of additional code required, especially adding yet another tick based tracker, the value doesn't seem there for me.","username":"jyellick","ts":"2019-07-12T14:32:38.636Z"}
{"msg":"@guoger I don't disagree that there's some value, tracking the other replicas that a node has seen, and presenting this value to the user.  But given the amount of additional code required, especially adding yet another tick based tracker, the value to complexity doesn't seem there for me.","username":"jyellick","ts":"2019-07-12T14:32:38.636Z"}
{"msg":"> ok, i think we can actually provide admin with more info, but since we clearly have a vote 2 vs 1, i'll make the change.\nI'm not voting against, I'm voting abstain ! :) ","username":"yacovm","ts":"2019-07-12T14:32:51.253Z"}
{"msg":"hmm, i fear we still need a ticker to periodically get this info. If we send Status along with every msg, there might be a performance penalty","username":"guoger","ts":"2019-07-12T14:35:09.358Z"}
{"msg":"(`Status()` makes a copy of map","username":"guoger","ts":"2019-07-12T14:35:22.173Z"}
{"msg":"Could we only send status when it changes?","username":"jyellick","ts":"2019-07-12T14:36:23.929Z"}
{"msg":"I suppose for new nodes that would be a problem","username":"jyellick","ts":"2019-07-12T14:36:35.316Z"}
{"msg":"right, or if some msg got lost","username":"guoger","ts":"2019-07-12T14:36:45.955Z"}
{"msg":"some nodes may never have up-to-date info, if status doesn't change","username":"guoger","ts":"2019-07-12T14:37:01.313Z"}
{"msg":"I suppose a ticker may be unavoidable then, but still, not tracking it ourselves I would expect simplifies things","username":"jyellick","ts":"2019-07-12T14:39:10.870Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=nJZxNiBinuhdskN44) lol, you are making this decision harder :P","username":"guoger","ts":"2019-07-12T14:40:06.422Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=nJZxNiBinuhdskN44","url":"https://chat.hyperledger.org/channel/fabric-orderer-dev?msg=nJZxNiBinuhdskN44","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@jyellick  i have another topic to discuss: where do we check quorum loss against reconfig, as you commented in https://gerrit.hyperledger.org/r/c/fabric/+/32221","username":"guoger","ts":"2019-07-12T14:40:55.394Z"}
{"msg":"i think if we move `ValidateMetadata` from `Consenter` to `Chain`, it would simplifies things a lot. I uploaded a draft patch for this: https://gerrit.hyperledger.org/r/c/fabric/+/32284","username":"guoger","ts":"2019-07-12T14:41:37.575Z"}
{"msg":"basically moving from current _stateless_ validation to be _stateful_","username":"guoger","ts":"2019-07-12T14:42:09.624Z"}
{"msg":"all metadata parsing will still be done at one place","username":"guoger","ts":"2019-07-12T14:42:51.479Z"}
{"msg":"Let me take a look","username":"jyellick","ts":"2019-07-12T14:48:18.779Z"}
{"msg":"thx","username":"guoger","ts":"2019-07-12T14:48:54.368Z"}
{"msg":"I think the approach generally makes sense.  If it's not too challenging, I'd split it into two CRs though, one moving it from consenter to chain, and the other adding the additional checks.","username":"jyellick","ts":"2019-07-12T14:53:06.145Z"}
{"msg":"absolutely, that CR was just intended to show the approach (that's why i -1'ed it)","username":"guoger","ts":"2019-07-12T14:58:22.128Z"}
{"msg":"OK, i'll update the CR. thx for your time :)","username":"guoger","ts":"2019-07-12T14:59:03.484Z"}
{"msg":"we don't really need a ticker. we can track the last time we sent a message to each node without a ticker, and send the message every 10 seconds.","username":"yacovm","ts":"2019-07-12T19:19:42.101Z"}
{"msg":"this way we can piggyback on existing messages from the leader","username":"yacovm","ts":"2019-07-12T19:20:10.207Z"}
{"msg":"That seems reasonable to me, what do you think @guoger ?","username":"jyellick","ts":"2019-07-12T19:23:55.879Z"}
{"msg":"What do you mean by every 10 seconds without a ticker?","username":"guoger","ts":"2019-07-13T00:27:13.335Z"}
{"msg":"What do you mean by every 10 seconds without a ticker? could you elaborate? @jyellick @yacovm ","username":"guoger","ts":"2019-07-13T00:27:13.335Z"}
{"msg":"The leader necessarily sends a message at least every heartbeat interval. So, if the last metadata message was sent more than 10s ago, piggy back it ","username":"jyellick","ts":"2019-07-13T01:00:55.855Z"}
{"msg":"Oh, then we need to have a tracker to record last time a metadata is sent, furthermore we still need to periodically invoke Status to get latest info. And we still need to toggle it when leadership is changed. I’m not sure this is actually simpler... wdyt ","username":"guoger","ts":"2019-07-13T01:08:49.277Z"}
{"msg":"Oh, then we need to have a tracker to record last time a metadata is sent, furthermore we still need to invoke Status to get latest info, and try to avoid duplicate here when multiple expires happen. And we still need to toggle it when leadership is changed. I’m not sure this is actually simpler... wdyt ","username":"guoger","ts":"2019-07-13T01:08:49.277Z"}
{"msg":"I don’t think piggyback buys us a lot, we don’t have much message overhead for metadata anyway - once per election timeout, which is 10s by default.","username":"guoger","ts":"2019-07-13T01:10:17.173Z"}
{"msg":"Btw, I think we should have a metrics Has_Leader, or Leader_ID.","username":"guoger","ts":"2019-07-13T01:15:47.815Z"}
{"msg":"I'd lean towards whatever is simpler to implement.  I would hope either of them would be fairly straightforward.  In the case of piggy-backing it seems as easy as \"If the status hasn't been refreshed in the last 10 seconds, refresh it.  If the node I'm sending the message to hasn't gotten the status in the last 10 seconds, piggy-back it.\", which I would think would just be a couple instance vars and a few lines of code, but maybe I'm underestimating it.","username":"jyellick","ts":"2019-07-15T03:01:11.339Z"}
{"msg":"yet another factor is, \"if i'm leader, disseminate status/if i'm follower, waiting for status/if i'm leaderless, reset metrics\", which is less straightforward if we go down this path.","username":"guoger","ts":"2019-07-15T05:25:28.849Z"}
{"msg":"which is also less testable - essentially we have extra N+1 fake clock to advance","username":"guoger","ts":"2019-07-15T05:30:52.217Z"}
{"msg":"which is also less testable - essentially we have extra N+1 fake clock to advance. cc @jyellick ","username":"guoger","ts":"2019-07-15T05:30:52.217Z"}
{"msg":"@dave.enyeart , anyone else?","username":"minollo","ts":"2019-07-15T12:32:19.784Z"}
{"msg":"Has joined the channel.","username":"PulkitSarraf","ts":"2019-07-16T09:56:02.263Z","type":"uj"}
{"msg":"Anyone added an orderer using etcdraft protocol in a running network\ni am getting an error when i modify the config.json file and update the channel with new orderer address and its tls certs\n083 Deactivating node 6 in channel firstchannel with endpoint of orderer6.example.com:7050 due to TLS certificate change","username":"PulkitSarraf","ts":"2019-07-16T09:56:03.422Z"}
{"msg":"it's not necessarily a bad thing","username":"yacovm","ts":"2019-07-16T10:01:17.121Z"}
{"msg":"@PulkitSarraf also, pls do not cross-post question. this channel is used for development related discussion.","username":"guoger","ts":"2019-07-16T10:31:49.646Z"}
{"msg":"I am sorry for that","username":"PulkitSarraf","ts":"2019-07-16T10:32:34.000Z"}
{"msg":"Has joined the channel.","username":"Utsav_Solanki","ts":"2019-07-19T04:27:18.867Z","type":"uj"}
{"msg":"i am getting in docker logs of orderer as --> orderer.AtomicBroadcast grpc.method=Deliver grpc.peer_address= ipxx x x x :port x error=\"context finished before block retrieved: context canceled\" grpc.code=Unknown grpc.call_duration=5h48m38.655538305s\nis it error or normal behavior?\n","username":"Utsav_Solanki","ts":"2019-07-19T04:27:20.420Z"}
{"msg":"Re your comment in JIRA (hard to access it at the moment): we are doing post-consensus transfer, because it’s more complicated to do pre-consensus transfer - in which case we need to block incoming normal tx, wait for the success of leader transfer and proceed. With post-consensus, we simply make an attempt, if it fails, that’s fine since eventually a new node can start campaign anyway, so we don’t really care about the success of transfer. @yacovm ","username":"guoger","ts":"2019-07-26T11:04:44.567Z"}
{"msg":"@guoger so you're saying, the leader simply gives up its leadership and some node picks it up?","username":"yacovm","ts":"2019-07-26T11:21:42.217Z"}
{"msg":"Yes.","username":"guoger","ts":"2019-07-26T11:22:39.985Z"}
{"msg":"and the config change happens *before* or *after* ? ","username":"yacovm","ts":"2019-07-26T11:22:51.544Z"}
{"msg":"the config change that removes the leader","username":"yacovm","ts":"2019-07-26T11:22:57.675Z"}
{"msg":"Before","username":"guoger","ts":"2019-07-26T11:23:08.324Z"}
{"msg":"why?","username":"yacovm","ts":"2019-07-26T11:23:15.672Z"}
{"msg":"For the reason i mentioned above: mostly for the sake of simplicity","username":"guoger","ts":"2019-07-26T11:24:19.631Z"}
{"msg":"i don't understand the point of doing a post consensus transfer ","username":"yacovm","ts":"2019-07-26T11:26:05.235Z"}
{"msg":"since we do it in 2 steps always","username":"yacovm","ts":"2019-07-26T11:26:32.837Z"}
{"msg":"if you remove the leader in any sized cluster, isn't that problematic?","username":"yacovm","ts":"2019-07-26T11:27:04.217Z"}
{"msg":"do you remember which config change we do first? the fabric or the raft one? I think it's the fabric one, no?","username":"yacovm","ts":"2019-07-26T11:28:25.313Z"}
{"msg":"Yes, the fabric one. Removing leader is not a problem in cluster larger than 2 nodes, since there always will be a new leader being elected if transfer fails.","username":"guoger","ts":"2019-07-26T11:40:19.392Z"}
{"msg":"Other than the reason above, even if we do pre-consensus transfer, this node might still be elected as leader after a network crash, and we end up with the same situation ","username":"guoger","ts":"2019-07-26T11:43:57.435Z"}
{"msg":"oh i actually remember now that we had this mechanism where the new leader can detect the fabric config change and then propose only the raft config change, right?","username":"yacovm","ts":"2019-07-26T12:15:39.306Z"}
{"msg":"That’s right","username":"guoger","ts":"2019-07-26T12:26:33.055Z"}
{"msg":"Has joined the channel.","username":"huxd","ts":"2019-08-02T01:33:34.201Z","type":"uj"}
{"msg":"Has joined the channel.","username":"SatheeshNehru","ts":"2019-08-12T05:21:18.612Z","type":"uj"}
{"msg":"As I'm getting back into a semi-regular schedule, feel free to tag me on any orderer-related PRs, if there are any. (I understand development on that front has quieted down quite a bit.)","username":"kostas","ts":"2019-08-12T21:23:55.189Z"}
{"msg":"There's a request to extend Raft documentation: https://jira.hyperledger.org/browse/FAB-16306 FYI @pandrejko @joe-alewine ","username":"dave.enyeart","ts":"2019-08-14T11:06:54.671Z"}
{"msg":"Has joined the channel.","username":"pandrejko","ts":"2019-08-14T11:06:54.703Z","type":"uj"}
{"msg":"@dave.enyeart If the process is known (I assume it's written down in a design doc somewhere) and can be tested, I'm all for creating a tutorial (preferably not one based on BYFN, given recent discussions) describing how to do it","username":"joe-alewine","ts":"2019-08-14T13:50:09.457Z"}
{"msg":"Has joined the channel.","username":"conanoc","ts":"2019-08-21T09:04:31.079Z","type":"uj"}
{"msg":"has anyone seen the error in FAB-16373 ?\n```\n2019-08-21 09:17:28.019 UTC [orderer.consensus.kafka] processTimeToCut -> DEBU 989 [channel: fatico-dedicated] It's a time-to-cut message for block [15]\n2019-08-21 09:17:28.019 UTC [orderer.consensus.kafka] processTimeToCut -> DEBU 98a [channel: fatico-dedicated] Ignoring stale time-to-cut-message for block [15]\n2019-08-21 09:17:28.019 UTC [orderer.consensus.kafka] processMessagesToBlocks -> DEBU 98b [channel: fatico-dedicated] Successfully unmarshalled consumed message, offset is 64. Inspecting type...\n2019-08-21 09:17:28.019 UTC [orderer.consensus.kafka] processTimeToCut -> DEBU 98c [channel: fatico-dedicated] It's a time-to-cut message for block [18]\n2019-08-21 09:17:28.019 UTC [orderer.consensus.kafka] processMessagesToBlocks -> WARN 98d [channel: fatico-dedicated] got larger time-to-cut message (18) than allowed/expected (16) - this might indicate a bug\n2019-08-21 09:17:28.019 UTC [orderer.consensus.kafka] processMessagesToBlocks -> ERRO 98e [channel: fatico-dedicated] Consenter for channel exiting\n```\nit looks very strange to me...\n\nalso, I think we should panic there, instead of exiting chain (we have a TODO in the code for this)","username":"guoger","ts":"2019-08-22T07:16:46.049Z"}
{"msg":"and a side question: how much energy do we want to spend in maintaining kafka? are we planning to sunset it in 2.1?","username":"guoger","ts":"2019-08-22T07:17:16.406Z"}
{"msg":"Has joined the channel.","username":"shitaibin","ts":"2019-08-22T12:17:09.913Z","type":"uj"}
{"msg":"@guoger I've seen this error generally when the Kafka logs are corrupted.","username":"jyellick","ts":"2019-08-22T16:04:39.338Z"}
{"msg":"Usually this is because everything's on one machine, and they kill everything at once.","username":"jyellick","ts":"2019-08-22T16:04:53.984Z"}
{"msg":"The orderers use fsync, the brokers do not, so they end up ahead of the brokers.","username":"jyellick","ts":"2019-08-22T16:05:08.243Z"}
{"msg":"If one orderer is further ahead than the others, then its block height will be higher, and it will send time to cut messages exhibiting this pattern.","username":"jyellick","ts":"2019-08-22T16:06:09.624Z"}
{"msg":"You'll see this especially if you re-bootstrap an orderer.","username":"jyellick","ts":"2019-08-22T16:09:22.623Z"}
{"msg":"@jyellick ah, good to know... thx, could you kindly post in FAB-16373 and close it?","username":"guoger","ts":"2019-08-22T16:31:32.458Z"}
{"msg":"Sure","username":"jyellick","ts":"2019-08-22T16:31:52.561Z"}
{"msg":"Great. I was wondering how this could have happened in a normal environment.","username":"kostas","ts":"2019-08-22T17:09:07.898Z"}
{"msg":"RE: maintaining Kafka — my take is that it should be sunsetted as fast as possible. 2.0 would be a natural cutoff point for this, but perhaps this is a bit too aggressive.","username":"kostas","ts":"2019-08-22T17:10:19.503Z"}
{"msg":"Has IBP switched to Raft? If they don, I'm curious to see what the feedback on that front is.","username":"kostas","ts":"2019-08-22T17:11:20.459Z"}
{"msg":"Has IBP switched to Raft? If they have, I'm curious to see what the feedback on that front is.","username":"kostas","ts":"2019-08-22T17:11:20.459Z"}
{"msg":"in my orderer2  i am getting this error logs","username":"Utsav_Solanki","ts":"2019-09-17T07:45:21.210Z"}
{"msg":"2019-09-13 16:26:17.503 UTC [orderer.consensus.kafka] processMessagesToBlocks -> ERRO 08c [channel: mychannel] Error during consumption: kafka: error while consuming channel/0: dial tcp: lookup kafka0 on 127.0.0.11:53: no such host\n2019-09-13 16:26:17.503 UTC [orderer.consensus.kafka] processMessagesToBlocks -> WARN 08d [channel: mychannel] Deliver sessions will be dropped if consumption errors continue.\n2019-09-13 16:26:17.504 UTC [orderer.consensus.kafka] processMessagesToBlocks -> ERRO 08e [channel: testchainid] Error during consumption: kafka: error while consuming testchainid/0: dial tcp: lookup kafka0 on 127.0.0.11:53: no such host\n2019-09-13 16:26:17.504 UTC [orderer.consensus.kafka] processMessagesToBlocks -> WARN 08f [channel: testchainid] Deliver sessions will be dropped if consumption errors continue.\n2019-09-13 16:26:19.506 UTC [orderer.consensus.kafka] processMessagesToBlocks -> WARN 090 [channel: testchainid] Consumption will resume.\n","username":"Utsav_Solanki","ts":"2019-09-17T07:45:56.157Z"}
{"msg":"pls ask question in #fabric-orderer , this channel is for dev only. as for your error, depends on how you provision the network, you'll need to configure the system to be able to resolve `kafka0` to correct ip (docker-compose does this automatically)","username":"guoger","ts":"2019-09-17T11:18:32.024Z"}
{"msg":"ok","username":"Utsav_Solanki","ts":"2019-09-17T11:38:02.156Z"}
{"msg":"@guoger @yacovm This may be well understood behavior, but it is already causing us problems.  When a node is removed from a raft consenter set, it will not rejoin if re-added, because `TrackChain` is never invoked for that chain, because the node is in the consenter set at startup.","username":"jyellick","ts":"2019-09-24T19:38:42.396Z"}
{"msg":"I would propose, that when we detect we are being removed, and initiate shutdown of the consenter, that we invoke the `TrackChain` API so that we are put into the same state as if we had just been started, but were not in the consenter set.","username":"jyellick","ts":"2019-09-24T19:40:25.608Z"}
{"msg":"Are there any objections or concerns to this?","username":"jyellick","ts":"2019-09-24T19:40:39.422Z"}
{"msg":"(FWIW, as tooling emerges to automate the addition and removal of nodes from the consenter sets, it's fairly inevitable that someone will be playing with a set of consenters, and remove and re-add the same consenter without restarting it.  This seems like a perfectly common usage pattern, so it seems like something we should support).","username":"jyellick","ts":"2019-09-24T19:41:44.375Z"}
{"msg":">  it's fairly inevitable that someone will be playing with a set of consenters, and remove and re-add the same consenter without restarting it\nVery mature... it's essentially like playing with your new phone, right? \n > but it is already causing us problems.\nCan you point me to a case where it caused a problem? When we were designing this I was sure that we removed consenters only if you have a full membership and want to scale down for good, or if you just want to evict an OSN from a channel. \n\n>  Are there any objections or concerns to this? \nThe code assumes it's a genesis block, so it won't work.... you are free to try and see for yourself or prove me wrong","username":"yacovm","ts":"2019-09-24T20:38:39.697Z"}
{"msg":">  it's fairly inevitable that someone will be playing with a set of consenters, and remove and re-add the same consenter without restarting it\nVery mature... it's essentially like playing with your new phone, right? \n\n > but it is already causing us problems.\nCan you point me to a case where it caused a problem? When we were designing this I was sure that we removed consenters only if you have a full membership and want to scale down for good, or if you just want to evict an OSN from a channel. \n\n>  Are there any objections or concerns to this? \nThe code assumes it's a genesis block, so it won't work.... you are free to try and see for yourself or prove me wrong","username":"yacovm","ts":"2019-09-24T20:38:39.697Z"}
{"msg":">  it's fairly inevitable that someone will be playing with a set of consenters, and remove and re-add the same consenter without restarting it\nVery mature... it's essentially like playing with your new phone, right? \n\n > but it is already causing us problems.\n\nCan you point me to a case where it caused a problem? When we were designing this I was sure that we removed consenters only if you have a full membership and want to scale down for good, or if you just want to evict an OSN from a channel. \n\n>  Are there any objections or concerns to this? \nThe code assumes it's a genesis block, so it won't work.... you are free to try and see for yourself or prove me wrong","username":"yacovm","ts":"2019-09-24T20:38:39.697Z"}
{"msg":">  it's fairly inevitable that someone will be playing with a set of consenters, and remove and re-add the same consenter without restarting it\nVery mature... it's essentially like playing with your new phone, right? \n\n> but it is already causing us problems.\n\nCan you point me to a case where it caused a problem? When we were designing this I was sure that we removed consenters only if you have a full membership and want to scale down for good, or if you just want to evict an OSN from a channel. \n\n>  Are there any objections or concerns to this? \nThe code assumes it's a genesis block, so it won't work.... you are free to try and see for yourself or prove me wrong","username":"yacovm","ts":"2019-09-24T20:38:39.697Z"}
{"msg":"@jyellick ^ ","username":"yacovm","ts":"2019-09-24T20:38:43.768Z"}
{"msg":"Of course, I'm not saying we can't massage the code to make it work, it's just that i think it involves more than that. ","username":"yacovm","ts":"2019-09-24T20:39:31.487Z"}
{"msg":"> Can you point me to a case where it caused a problem? \n\nAlready gotten bug reports from two different users.","username":"jyellick","ts":"2019-09-24T20:49:25.444Z"}
{"msg":"ugh, pesky users ","username":"yacovm","ts":"2019-09-24T20:50:25.491Z"}
{"msg":"> The code assumes it's a genesis block, so it won't work.... you are free to try and see for yourself or prove me wrong\n\nI noticed it seemed to expect a genesis block, I was hoping it was as generic as a 'config block', but perhaps not.","username":"jyellick","ts":"2019-09-24T20:52:10.292Z"}
{"msg":"What happens if it dies mid-replication?","username":"jyellick","ts":"2019-09-24T20:52:15.590Z"}
{"msg":"what dies?","username":"yacovm","ts":"2019-09-24T20:52:54.762Z"}
{"msg":"If the orderer starts up, is not in a channel, and then the TrackChain recognizes that the orderer has been added, but crashes before the blockchain has been replicated up to the point where the orderer is added?","username":"jyellick","ts":"2019-09-24T20:54:11.050Z"}
{"msg":"I would assume that the orderer would start, the length of the chain would be non-zero, the orderer would still not be a consenter for that chain, and, it would somehow resume.","username":"jyellick","ts":"2019-09-24T20:54:52.936Z"}
{"msg":"FAB-13552","username":"yacovm","ts":"2019-09-24T20:55:40.207Z"}
{"msg":"check it out @jyellick ^ ","username":"yacovm","ts":"2019-09-24T20:55:44.959Z"}
{"msg":"Thanks, got to run, but will look at it later tonight","username":"jyellick","ts":"2019-09-24T20:56:00.577Z"}
{"msg":">  I would assume that the orderer would start, the length of the chain would be non-zero, the orderer would still not be a consenter for that chain, and, it would somehow resume. \nyeah, we can handle crashes in the middle obviously. Even crashes during initial onboarding.","username":"yacovm","ts":"2019-09-24T20:56:55.933Z"}
{"msg":"@yacovm I've been walking that code, and I'm really not seeing why using any config block would not work.","username":"jyellick","ts":"2019-09-25T14:27:46.590Z"}
{"msg":"It seems very similar to the path of crashing during onboarding.","username":"jyellick","ts":"2019-09-25T14:28:02.542Z"}
{"msg":"The replicator starts up, tries to append the block, but realizes the ledger height is further, so skips it.  Then it probes the channels to see if it should replicate, and if so, does.","username":"jyellick","ts":"2019-09-25T14:28:50.816Z"}
{"msg":"`ChannelCreationBlockToGenesisBlock` ","username":"yacovm","ts":"2019-09-25T14:41:04.512Z"}
{"msg":"I don't see that it would return an error?","username":"jyellick","ts":"2019-09-25T14:42:25.098Z"}
{"msg":"ah so @jyellick I think that `TrackChain` is always called with GB right?","username":"yacovm","ts":"2019-09-25T14:47:15.852Z"}
{"msg":"currently, that is?","username":"yacovm","ts":"2019-09-25T14:47:19.560Z"}
{"msg":"even if the height is bigger?","username":"yacovm","ts":"2019-09-25T14:47:26.315Z"}
{"msg":"I think we should call it with the GB as well and not with a higher block ","username":"yacovm","ts":"2019-09-25T14:48:44.445Z"}
{"msg":"As best as I can tell... if the block number is already committed, whether it's GB, or any other block, it's essentially ignored?","username":"jyellick","ts":"2019-09-25T14:49:27.025Z"}
{"msg":"Otherwise I think there would be a real bug","username":"jyellick","ts":"2019-09-25T14:49:39.812Z"}
{"msg":"The `ChannelCreationBlockToGenesisBlock` expects a block from the system channel, which embeds the contents for the genesis block of the channel.","username":"jyellick","ts":"2019-09-25T14:49:57.656Z"}
{"msg":"We're passing in the genesis block for the channel, and attempting to extract its own block from there.","username":"jyellick","ts":"2019-09-25T14:50:18.908Z"}
{"msg":"Fortunately `appendBlock` is always a no-op, because the block is already committed.","username":"jyellick","ts":"2019-09-25T14:50:30.702Z"}
{"msg":"I would think the right way to do it, would be to pass in a nil block, and if it's nil, then say the chain already exists.","username":"jyellick","ts":"2019-09-25T14:51:03.447Z"}
{"msg":"I would think the right way to do it, would be to pass in a nil block, and if it's nil, then say the chain already exists, skip trying to append the genesis block.","username":"jyellick","ts":"2019-09-25T14:51:03.447Z"}
{"msg":"As best as I can tell, appending the genesis block is the only thing that block i used for? (And, again, in the 'inactive chain' case, it's always ignored)","username":"jyellick","ts":"2019-09-25T14:51:38.935Z"}
{"msg":"ah so i missed this: `block.Header.Number = 0`","username":"yacovm","ts":"2019-09-25T14:52:57.031Z"}
{"msg":"This is why it always works, heh ","username":"yacovm","ts":"2019-09-25T14:53:13.047Z"}
{"msg":"so you can try it and see if it works.... ","username":"yacovm","ts":"2019-09-25T14:53:43.229Z"}
{"msg":"Yes, I expect that I will.  I also think I might make the change to allow the nil block.  Passing in the genesis block is very misleading, as it really must be the channel creation block in order to work as intended.","username":"jyellick","ts":"2019-09-25T14:55:50.459Z"}
{"msg":"@jyellick just one rule.... no Ginkgo.... ;) ","username":"yacovm","ts":"2019-09-25T15:06:11.864Z"}
{"msg":"But I was really looking forward to spending a week rewriting the whole test suite :slight_smile: ","username":"jyellick","ts":"2019-09-25T15:07:12.723Z"}
{"msg":"@kostas @guoger We've been observing an issue when producing large transactions to Kafka, that we're seeing those messages get duplicated.  As best as I can tell, when retries are enabled, message duplication is an expected behavior of Kafka.  However, introduced in v0.11 they allow \"exactly once\" semantics.  I _think_, turning it on would be as easy as flipping https://github.com/Shopify/sarama/blob/master/config.go#L165-L167 to true.  I was wondering if you guys ever looked at this setting, and if there's a reason why we left it false?","username":"jyellick","ts":"2019-10-04T15:46:20.669Z"}
{"msg":"@guoger @kostas ^ ping?","username":"jyellick","ts":"2019-10-07T14:43:28.480Z"}
{"msg":"sorry for late response, was out of office for holiday here... i'm afraid that code was written before i joined project but AFAICT flipping `idempotent` along with some [other configs](https://github.com/Shopify/sarama/commit/8e2b04b363c226275dbf10d771fb044e387bbd75#diff-b4bda758a2aef091432646c354b4dc59R517-R531) could solve the problem.","username":"guoger","ts":"2019-10-08T06:32:48.454Z"}
{"msg":"although, ultimately we still cannot provide end-to-end guarantee to fabric clients that a tx is failed to commit, right?","username":"guoger","ts":"2019-10-08T06:34:36.052Z"}
{"msg":"if a msg is *seemingly* failed to be committed, and the error is returned to fabric clients, there's no way to prevent clients from resubmitting that tx, which results in duplicate. (basically we need to introduce our own seq no to ensure exactly-once semantics on fabric side, similar to kafka)","username":"guoger","ts":"2019-10-08T06:37:48.716Z"}
{"msg":"@guoger - Fabric already has exactly once semantics for transactions. The issue Jason is complaining about is that for big transactions - I guess the Kafka client re-submits the transaction which results in the transaction going twice into a block or twice in different blocks, and that's just a waste of space. ","username":"yacovm","ts":"2019-10-08T09:25:10.384Z"}
{"msg":"In any case, any client can always record a transaction and spam it to the orderer, even if that transaction isn't made by him. \nTo prevent that, we need to have epochs but it's not implemented currently, I guess because it makes the SDK's life more difficult. ","username":"yacovm","ts":"2019-10-08T09:26:29.625Z"}
{"msg":"we do have an epoch field in the transaction as you know, but it's always 0 ;) ","username":"yacovm","ts":"2019-10-08T09:26:42.566Z"}
{"msg":"i think fabric has `most-once` instead of `exactly-once` - if client submits same tx several times to orderer, it only applies one","username":"guoger","ts":"2019-10-08T09:29:50.667Z"}
{"msg":"and we need the `epoch` you mentioned here to provide an end-to-end `exactly-once` semantics, no?","username":"guoger","ts":"2019-10-08T09:30:49.114Z"}
{"msg":"By Fabric I meant the validation logic ;) ","username":"yacovm","ts":"2019-10-08T09:31:38.430Z"}
{"msg":"so yeah - exactly once, most once - depends on where in the flow you look","username":"yacovm","ts":"2019-10-08T09:31:56.135Z"}
{"msg":"> and we need the epoch you mentioned here to provide an end-to-end exactly-once semantics, no? \n\nNo...","username":"yacovm","ts":"2019-10-08T09:32:04.817Z"}
{"msg":"that's not what I meant","username":"yacovm","ts":"2019-10-08T09:32:10.548Z"}
{"msg":"let me elaborate","username":"yacovm","ts":"2019-10-08T09:32:13.851Z"}
{"msg":"when you send a transaction with an ID that was committed before, it is ignored","username":"yacovm","ts":"2019-10-08T09:32:36.604Z"}
{"msg":"however the transaction will still get into the raw ledger","username":"yacovm","ts":"2019-10-08T09:32:44.238Z"}
{"msg":"so in a sense, this is pollution","username":"yacovm","ts":"2019-10-08T09:32:49.733Z"}
{"msg":"a malicious client can take a transaction of any client it wishes and spam orderers ","username":"yacovm","ts":"2019-10-08T09:33:09.345Z"}
{"msg":"even if that client is revoked","username":"yacovm","ts":"2019-10-08T09:33:36.677Z"}
{"msg":"the way to prevent it, is to use the epoch field in the transaction","username":"yacovm","ts":"2019-10-08T09:33:54.566Z"}
{"msg":"and make the orderers reject transactions with epoch which is too far in the past, and increment the epoch once in a while","username":"yacovm","ts":"2019-10-08T09:34:17.794Z"}
{"msg":"however it would also mean the SDK would need to see what is the current epoch.","username":"yacovm","ts":"2019-10-08T09:35:10.490Z"}
{"msg":"another way, is to use timestamps of course","username":"yacovm","ts":"2019-10-08T09:35:48.351Z"}
{"msg":"I think for a permissioned network, this isn't a big issue since it's only a denial of service, and every client that will do that - will also harm its own organization too","username":"yacovm","ts":"2019-10-08T09:37:13.916Z"}
{"msg":"In our BFT implementation, you get a resistance against this kind of attack in the same block (you can't put 2 transactions that are the same, in the same block), but not across different blocks.","username":"yacovm","ts":"2019-10-08T09:38:31.576Z"}
{"msg":"The trivial way to prevent replay is by epochs or timestamps","username":"yacovm","ts":"2019-10-08T09:38:44.765Z"}
{"msg":"Thanks for the details! What i was trying to say was, i agree with Jason's statement and we should flip that config, although it doesn't instantly give us `exactly once` semantics from *fabric client's` point of view.","username":"guoger","ts":"2019-10-08T09:44:09.745Z"}
{"msg":"and i'd actually like to hear more on epochs in main channel, just not to digress this thread","username":"guoger","ts":"2019-10-08T09:44:27.037Z"}
{"msg":"why not?","username":"yacovm","ts":"2019-10-08T09:44:31.733Z"}
{"msg":"how does orderer know if a client is resending a tx?","username":"guoger","ts":"2019-10-08T09:47:00.509Z"}
{"msg":"it doesn't need to. ","username":"yacovm","ts":"2019-10-08T09:47:22.520Z"}
{"msg":"the client doesn't care if the transaction gets 10 times into the ledger","username":"yacovm","ts":"2019-10-08T09:47:36.902Z"}
{"msg":"fabric ensures it only treats the first one","username":"yacovm","ts":"2019-10-08T09:47:49.284Z"}
{"msg":"i think we are talking past each other - basically it does not need, nor provide `exactly once`","username":"guoger","ts":"2019-10-08T09:49:14.127Z"}
{"msg":"well this is semantics... to me, if you as a client send a transaction that transfers your funds to Jason, and you do a re-transmission and both transactions end up in the ledger, but the final result is that you only send money once, then it is exactly once","username":"yacovm","ts":"2019-10-08T09:50:22.087Z"}
{"msg":"haha, to me that's `most once`, but this is just wording :P","username":"guoger","ts":"2019-10-08T09:52:28.598Z"}
{"msg":"i know what you meant","username":"guoger","ts":"2019-10-08T09:52:50.480Z"}
{"msg":"ah, I assumed that we are discussing everything with the assumption that the client got at least one transaction in the orderer","username":"yacovm","ts":"2019-10-08T09:53:23.099Z"}
{"msg":"@yacovm epochs are signed, right?","username":"guoger","ts":"2019-10-08T09:55:25.074Z"}
{"msg":"everything in the transaction is signed","username":"yacovm","ts":"2019-10-08T09:55:45.067Z"}
{"msg":"what's the advantage of epoch over seq no? infrequently updated?","username":"guoger","ts":"2019-10-08T09:58:51.993Z"}
{"msg":"nvm, there's no way that client can get an up-to-date seq","username":"guoger","ts":"2019-10-08T09:59:30.366Z"}
{"msg":"he can ask a peer...","username":"yacovm","ts":"2019-10-08T10:09:42.009Z"}
{"msg":"and that can be outdated quickly... ","username":"guoger","ts":"2019-10-08T10:16:11.558Z"}
{"msg":"unless that seq is not global, but pinned to a session","username":"guoger","ts":"2019-10-08T10:17:13.309Z"}
{"msg":"(i'm not talking about fabric config seq, but more of an offset, as in kafka)","username":"guoger","ts":"2019-10-08T10:17:53.529Z"}
{"msg":"We certainly can't eliminate duplicated transactions which a client submits multiple times. But, yes, in this particular instance, I'm just thinking that if we can prevent Kafka duplicating the transactions because of producer timeouts, that would be an improvement.  I don't see any obvious downside.","username":"jyellick","ts":"2019-10-08T18:56:57.478Z"}
{"msg":"We certainly can't eliminate (with a Kafka setting) duplicated transactions which a client submits multiple times. But, yes, in this particular instance, I'm just thinking that if we can prevent Kafka duplicating the transactions because of producer timeouts, that would be an improvement.  I don't see any obvious downside.","username":"jyellick","ts":"2019-10-08T18:56:57.478Z"}
{"msg":"It just seemed like an 'obvious setting', that I thought perhaps there was a reason we had opted not to enable it.","username":"jyellick","ts":"2019-10-08T19:00:25.404Z"}
{"msg":"It just seemed like such an 'obvious setting', that I thought perhaps there was a reason we had opted not to enable it.","username":"jyellick","ts":"2019-10-08T19:00:25.404Z"}
{"msg":"Hi everyone, so sorry for the late response. Been a bit busy here. Let me catch up on the thread.","username":"kostas","ts":"2019-10-08T22:40:13.020Z"}
{"msg":"Hi everyone, sorry for the late response. Been a bit busy here. Let me catch up on the thread.","username":"kostas","ts":"2019-10-08T22:40:13.020Z"}
{"msg":"@yacovm: Do you ever sleep?","username":"kostas","ts":"2019-10-08T22:42:47.154Z"}
{"msg":"Yeah, it's just that my clock has shifted slightly... ","username":"yacovm","ts":"2019-10-08T22:44:26.859Z"}
{"msg":"@jyellick Sorry for the late response.","username":"kostas","ts":"2019-10-08T22:44:34.792Z"}
{"msg":"@jyellick Sorry for the late response.","username":"kostas","ts":"2019-10-08T22:44:41.855Z"}
{"msg":"> As best as I can tell, when retries are enabled, message duplication is an expected behavior of Kafka.","username":"kostas","ts":"2019-10-08T22:44:52.191Z"}
{"msg":"Correct.","username":"kostas","ts":"2019-10-08T22:44:53.978Z"}
{"msg":"> However, introduced in v0.11 they allow \"exactly once\" semantics. I think, turning it on would be as easy as flipping https://github.com/Shopify/sarama/blob/master/config.go#L165-L167 to true.","username":"kostas","ts":"2019-10-08T22:45:10.966Z"}
{"msg":"Correct.","username":"kostas","ts":"2019-10-08T22:45:16.418Z"}
{"msg":"> I was wondering if you guys ever looked at this setting, and if there's a reason why we left it false?","username":"kostas","ts":"2019-10-08T22:45:24.872Z"}
{"msg":"Right. The only reason why we left it to false is because Kafka did not support exactly-once semantics when we started using it.","username":"kostas","ts":"2019-10-08T22:46:37.503Z"}
{"msg":"I remember reading the news of them adding exactly-once support back when it happened, but I never got to play around with it. That, and the fact that at the end of the day overproducing won't hurt made me leave that setting as is.","username":"kostas","ts":"2019-10-08T22:48:12.433Z"}
{"msg":"I see the argument about retries potentially resulting in a waste space.","username":"kostas","ts":"2019-10-08T22:48:35.375Z"}
{"msg":"Before you flip that switch, give me a day or two to check with some folks here at work. We've been bitten by a couple of edge cases with exactly-once turned on for Kafka, and I want to make sure these don't apply for us.","username":"kostas","ts":"2019-10-08T22:49:21.403Z"}
{"msg":"I would have caught all of these notifications but apparently RC on my phone logged me out. Argh.","username":"kostas","ts":"2019-10-08T22:50:01.062Z"}
{"msg":"> Before you flip that switch, give me a day or two to check with some folks here at work.","username":"kostas","ts":"2019-10-08T23:06:39.795Z"}
{"msg":"I haven't parsed it, but apparently it's all covered here: https://kafka-summit.org/sessions/hardening-kafka-replication/","username":"kostas","ts":"2019-10-08T23:07:06.547Z"}
{"msg":"IIUC, the fundamental problem in those edge cases presented in the link is that, kafka seems to allow partition with *lagged high watermark* to be elected as leader, even without a quorum...","username":"guoger","ts":"2019-10-09T07:53:57.955Z"}
{"msg":"and KAFKA-7128 (as mentioned in video) fixes it by not allowing the partition to join ISR, therefore cannot be elected","username":"guoger","ts":"2019-10-09T08:09:56.754Z"}
{"msg":"KIP-320 essentially does the same thing by not allowing partition with lagged epoch to join ISR","username":"guoger","ts":"2019-10-09T08:12:29.740Z"}
{"msg":"so i think at least based on the content presented in video, the problem is not tied to `exactly once` semantic. and unfortunately the fixes are released in post-v2 of kafka","username":"guoger","ts":"2019-10-09T08:16:31.456Z"}
{"msg":"basically even without flipping the switch, we still suffer from those edge cases... (i'd very like to be wrong)","username":"guoger","ts":"2019-10-09T08:18:39.966Z"}
{"msg":"thank @kostas for sharing the video!","username":"guoger","ts":"2019-10-09T08:18:53.407Z"}
{"msg":"(i'm actually surprised that kafka has fundamental problem in protocol...)","username":"guoger","ts":"2019-10-09T08:21:24.983Z"}
{"msg":"@guoger: Got it - thanks for going through the video and sharing the notes! I plan to do the same during lunch today. Will compare notes, and we can decide on a common course.","username":"kostas","ts":"2019-10-09T13:33:20.882Z"}
{"msg":"Confluent requires my email to let me see the video. Alright.","username":"kostas","ts":"2019-10-09T16:03:43.285Z"}
{"msg":"","username":"kostas","ts":"2019-10-09T16:03:57.852Z","attachments":[{"type":"file","title":"Screenshot 2019-10-09 at 08.59.48.png","title_link":"/file-upload/zeFJguBxou4zmfem3/Screenshot%202019-10-09%20at%2008.59.48.png","image_url":"/file-upload/zeFJguBxou4zmfem3/Screenshot%202019-10-09%20at%2008.59.48.png","image_type":"image/png","image_size":17796,"url":"/file-upload/zeFJguBxou4zmfem3/Screenshot%202019-10-09%20at%2008.59.48.png","remote":false,"fileId":"zeFJguBxou4zmfem3","fileName":"Screenshot 2019-10-09 at 08.59.48.png"}]}
{"msg":"fwiw, here's what's required to flip idempotent switch: https://gerrit.hyperledger.org/r/c/fabric/+/33896","username":"guoger","ts":"2019-10-10T04:45:57.475Z"}
{"msg":"cc @jyellick @kostas ","username":"guoger","ts":"2019-10-10T04:46:04.738Z"}
{"msg":"Went over the video earlier today and you’re right, the issue is not tied to their exactly-once option. So we should be good to go for it.","username":"kostas","ts":"2019-10-10T06:41:18.031Z"}
{"msg":"replied in gerrit :)\n> Thanks for review. I'd like to see if there's a way to verify this actually solves problem. @jyellick , as this originated from the test around large blocks, are they reproducible?","username":"guoger","ts":"2019-10-10T11:59:47.271Z"}
{"msg":"I'm sure we can just make an integration test with Kafka container that sends big transactions. \nIt will especially manifest in CI, which is known to run on Raspberry Pie  / Arduino ","username":"yacovm","ts":"2019-10-10T12:42:41.750Z"}
{"msg":"https://go-review.googlesource.com/c/go/+/202482","username":"kostas","ts":"2019-10-21T21:46:42.089Z"}
{"msg":"looks like the best solution in that context but still looks weird to me :joy: ","username":"guoger","ts":"2019-10-22T02:07:26.002Z"}
{"msg":"Yeah, I didn't even know you could do that.","username":"kostas","ts":"2019-10-22T03:16:17.973Z"}
{"msg":"me neither.. thx for sharing :)","username":"guoger","ts":"2019-10-22T03:50:47.928Z"}
{"msg":"looking at https://jira.hyperledger.org/browse/FAB-16887, i'm still seeing `ramledger`, is there an ongoing CR to remove it?\n> The orderer used to have the ramledger, the jsonledger, and the fileledger.  Both of the former types have been removed, so requiring a type to be specified is confusing and unnecessary.","username":"guoger","ts":"2019-10-22T05:29:47.424Z"}
{"msg":"Has joined the channel.","username":"hawkinggg","ts":"2019-11-04T07:16:28.042Z","type":"uj"}
{"msg":"@yacovm  just wanna confirm with you, we panic on invalid blocks [here](https://github.com/hyperledger/fabric/blob/a5bd17f9ec21241c324f453f0ded3d045bd28ff3/orderer/common/cluster/replication.go#L547-L571). Wouldn't a malicious orderer be able to crash others by sending invalid blocks then? I know it's fine for now since we assume CFT, but I guess this would be revisited later on? thx","username":"guoger","ts":"2019-11-06T04:23:15.029Z"}
{"msg":"@guoger Pretty sure the blocks puller validates the block signature according to the block validation policy prior to returning","username":"jyellick","ts":"2019-11-06T04:25:44.735Z"}
{"msg":"(And in a BFT environment, you'd require minimally f+1, if not 2f+1 signatures to be valid)","username":"jyellick","ts":"2019-11-06T04:26:33.280Z"}
{"msg":"ah, i see `BlockVerifier` now","username":"guoger","ts":"2019-11-06T04:29:53.313Z"}
{"msg":"thx","username":"guoger","ts":"2019-11-06T04:29:54.313Z"}
{"msg":"@guoger @jyellick i think https://gerrit.hyperledger.org/r/#/c/fabric/+/34324/ can be merged now for v1.4.4","username":"dave.enyeart","ts":"2019-11-14T04:29:10.371Z"}
{"msg":"Has joined the channel.","username":"jyxie2007","ts":"2019-11-18T04:00:12.453Z","type":"uj"}
{"msg":"Has joined the channel.","username":"tengc","ts":"2019-12-05T19:47:48.547Z","type":"uj"}
{"msg":"do we want to rename etcdraft to raft for 2.0? we now have a mix of them in docs/code. IIUC, the name `etcdraft` was chosen because there might be another impl of Raft in the future. However, i think that's not very likely and other impl could always be named to be different from raft... wdyt @jyellick @kostas ","username":"guoger","ts":"2019-12-06T05:24:59.198Z"}
{"msg":"I don't really see it as that confusing, personally, and renaming it would seem to simply add to the confusion.","username":"jyellick","ts":"2019-12-06T05:57:06.850Z"}
{"msg":"Same thoughts here on keeping things as is, but this is not a strong vote.","username":"kostas","ts":"2019-12-06T07:50:27.139Z"}
{"msg":"I'm seeing this flake constantly in azp:\n```\n------------------------------\n• Failure [152.936 seconds]\nEndToEnd reconfiguration and onboarding when the orderer certificates are all rotated [It] is still possible to onboard new orderers \n/home/vsts/work/1/go/src/github.com/hyperledger/fabric/integration/e2e/etcdraft_reconfig_test.go:310\n\n  Timed out after 60.000s.\n  Expected process to exit.  It did not.\n\n  /home/vsts/work/1/go/src/github.com/hyperledger/fabric/integration/nwo/deploy.go:111\n------------------------------\n```\nhowever, that specific test has been completed, that the line that failed is around chaincode instantiation:\n```\nfunc InstantiateChaincode(n *Network, channel string, orderer *Orderer, chaincode Chaincode, peer *Peer, checkPeers ...*Peer) {\n\tsess, err := n.PeerAdminSession(peer, commands.ChaincodeInstantiate{\n\t\tChannelID:         channel,\n\t\tOrderer:           n.OrdererAddress(orderer, ListenPort),\n\t\tName:              chaincode.Name,\n\t\tVersion:           chaincode.Version,\n\t\tCtor:              chaincode.Ctor,\n\t\tPolicy:            chaincode.Policy,\n\t\tLang:              chaincode.Lang,\n\t\tCollectionsConfig: chaincode.CollectionsConfig,\n\t})\n\tExpect(err).NotTo(HaveOccurred())\n\tEventually(sess, n.EventuallyTimeout).Should(gexec.Exit(0))\n\n\tEnsureInstantiated(n, channel, chaincode.Name, chaincode.Version, checkPeers...)\n}\n```\nnot quite sure what's going on...","username":"guoger","ts":"2019-12-17T02:21:01.440Z"}
{"msg":"I'm seeing this flake constantly in azp:\n```\n------------------------------\n• Failure [152.936 seconds]\nEndToEnd reconfiguration and onboarding when the orderer certificates are all rotated [It] is still possible to onboard new orderers \n/home/vsts/work/1/go/src/github.com/hyperledger/fabric/integration/e2e/etcdraft_reconfig_test.go:310\n\n  Timed out after 60.000s.\n  Expected process to exit.  It did not.\n\n  /home/vsts/work/1/go/src/github.com/hyperledger/fabric/integration/nwo/deploy.go:111\n------------------------------\n```\nhowever, that specific test has been completed, that the line that failed is around chaincode instantiation:\n```\nfunc InstantiateChaincode(n *Network, channel string, orderer *Orderer, chaincode Chaincode, peer *Peer, checkPeers ...*Peer) {\n\tsess, err := n.PeerAdminSession(peer, commands.ChaincodeInstantiate{\n\t\tChannelID:         channel,\n\t\tOrderer:           n.OrdererAddress(orderer, ListenPort),\n\t\tName:              chaincode.Name,\n\t\tVersion:           chaincode.Version,\n\t\tCtor:              chaincode.Ctor,\n\t\tPolicy:            chaincode.Policy,\n\t\tLang:              chaincode.Lang,\n\t\tCollectionsConfig: chaincode.CollectionsConfig,\n\t})\n\tExpect(err).NotTo(HaveOccurred())\n\tEventually(sess, n.EventuallyTimeout).Should(gexec.Exit(0))  <------ failure line\n\n\tEnsureInstantiated(n, channel, chaincode.Name, chaincode.Version, checkPeers...)\n}\n```\nnot quite sure what's going on...","username":"guoger","ts":"2019-12-17T02:21:01.440Z"}
{"msg":"I'm seeing this flake constantly in azp:\n```\n------------------------------\n• Failure [152.936 seconds]\nEndToEnd reconfiguration and onboarding when the orderer certificates are all rotated [It] is still possible to onboard new orderers \n/home/vsts/work/1/go/src/github.com/hyperledger/fabric/integration/e2e/etcdraft_reconfig_test.go:310\n\n  Timed out after 60.000s.\n  Expected process to exit.  It did not.\n\n  /home/vsts/work/1/go/src/github.com/hyperledger/fabric/integration/nwo/deploy.go:111\n------------------------------\n```\nhowever, that specific test has been completed actually, that the line that failed is around chaincode instantiation:\n```\nfunc InstantiateChaincode(n *Network, channel string, orderer *Orderer, chaincode Chaincode, peer *Peer, checkPeers ...*Peer) {\n\tsess, err := n.PeerAdminSession(peer, commands.ChaincodeInstantiate{\n\t\tChannelID:         channel,\n\t\tOrderer:           n.OrdererAddress(orderer, ListenPort),\n\t\tName:              chaincode.Name,\n\t\tVersion:           chaincode.Version,\n\t\tCtor:              chaincode.Ctor,\n\t\tPolicy:            chaincode.Policy,\n\t\tLang:              chaincode.Lang,\n\t\tCollectionsConfig: chaincode.CollectionsConfig,\n\t})\n\tExpect(err).NotTo(HaveOccurred())\n\tEventually(sess, n.EventuallyTimeout).Should(gexec.Exit(0))  <------ failure line\n\n\tEnsureInstantiated(n, channel, chaincode.Name, chaincode.Version, checkPeers...)\n}\n```\nnot quite sure what's going on...","username":"guoger","ts":"2019-12-17T02:21:01.440Z"}
{"msg":"I'm seeing this flake constantly in azp:\n```\n------------------------------\n• Failure [152.936 seconds]\nEndToEnd reconfiguration and onboarding when the orderer certificates are all rotated [It] is still possible to onboard new orderers \n/home/vsts/work/1/go/src/github.com/hyperledger/fabric/integration/e2e/etcdraft_reconfig_test.go:310\n\n  Timed out after 60.000s.\n  Expected process to exit.  It did not.\n\n  /home/vsts/work/1/go/src/github.com/hyperledger/fabric/integration/nwo/deploy.go:111\n------------------------------\n```\nhowever, that specific test has been completed actually, the line that failed is around chaincode instantiation:\n```\nfunc InstantiateChaincode(n *Network, channel string, orderer *Orderer, chaincode Chaincode, peer *Peer, checkPeers ...*Peer) {\n\tsess, err := n.PeerAdminSession(peer, commands.ChaincodeInstantiate{\n\t\tChannelID:         channel,\n\t\tOrderer:           n.OrdererAddress(orderer, ListenPort),\n\t\tName:              chaincode.Name,\n\t\tVersion:           chaincode.Version,\n\t\tCtor:              chaincode.Ctor,\n\t\tPolicy:            chaincode.Policy,\n\t\tLang:              chaincode.Lang,\n\t\tCollectionsConfig: chaincode.CollectionsConfig,\n\t})\n\tExpect(err).NotTo(HaveOccurred())\n\tEventually(sess, n.EventuallyTimeout).Should(gexec.Exit(0))  <------ failure line\n\n\tEnsureInstantiated(n, channel, chaincode.Name, chaincode.Version, checkPeers...)\n}\n```\nnot quite sure what's going on...","username":"guoger","ts":"2019-12-17T02:21:01.440Z"}
{"msg":"Has joined the channel.","username":"BrettLogan","ts":"2019-12-17T06:31:03.517Z","type":"uj"}
{"msg":"^^^ Posted a potential fix in fabric-maintainers","username":"BrettLogan","ts":"2019-12-17T06:31:04.259Z"}
{"msg":"@jyellick do you know if anyone has done some memory leak test around 1.4.3 orderer?","username":"guoger","ts":"2020-02-14T09:39:37.711Z"}
{"msg":"i recall that our testers once suspected memory leak some time ago?","username":"guoger","ts":"2020-02-14T09:40:19.454Z"}
{"msg":"@guoger Not that I'm aware of, though the 'memory leak' as suspected was definitely a false positive","username":"jyellick","ts":"2020-02-14T18:41:29.119Z"}
{"msg":"Has joined the channel.","username":"Abhishekkishor","ts":"2020-03-12T19:47:50.859Z","type":"uj"}
{"msg":"Has left the channel.","username":"conanoc","ts":"2020-05-19T10:04:03.976Z","type":"ul"}
{"msg":"Has joined the channel.","username":"dtomczyk","ts":"2020-06-11T15:49:13.512Z","type":"uj"}
{"msg":"Has joined the channel.","username":"ShuoWang","ts":"2020-07-13T06:31:47.925Z","type":"uj"}
{"msg":"Has left the channel.","username":"yuki-kon","ts":"2020-08-14T06:35:42.061Z","type":"ul"}
{"msg":"Has left the channel.","username":"troyronda","ts":"2020-10-28T17:44:26.769Z","type":"ul"}
{"msg":"Has joined the channel.","username":"husnain","ts":"2020-11-03T11:44:47.264Z","type":"uj"}
{"msg":"Has joined the channel.","username":"cynicalsnail","ts":"2020-11-18T07:01:56.857Z","type":"uj"}
{"msg":"Has joined the channel.","username":"Param-S","ts":"2021-06-10T18:15:26.935Z","type":"uj"}
{"msg":"Has joined the channel.","username":"jmaric","ts":"2021-07-12T16:38:39.641Z","type":"uj"}
{"msg":"Has joined the channel.","username":"s.vahidi","ts":"2022-01-23T12:05:08.223Z","type":"uj"}
{"msg":"","username":"rjones","ts":"2022-03-23T17:35:23.802Z","type":"room_changed_topic"}
{"msg":"","username":"rjones","ts":"2022-03-23T17:35:23.921Z","type":"room_changed_description"}
{"msg":"","username":"rjones","ts":"2022-03-23T17:35:23.925Z","type":"room_changed_announcement"}
