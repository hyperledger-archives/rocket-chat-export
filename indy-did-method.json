{"msg":"swcurran","username":"rjones","ts":"2020-09-04T20:57:40.520Z","type":"subscription-role-added"}
{"msg":"User <em>User_1</em> added by <em>rjones</em>.","username":"rjones","ts":"2020-09-04T20:58:02.465Z","type":"au"}
{"msg":"Welcome üôè","username":"rjones","ts":"2020-09-04T21:04:33.853Z"}
{"msg":"Thanks! :thanks:","username":"swcurran","ts":"2020-09-04T21:15:17.615Z"}
{"msg":"https://github.com/hyperledger/indy-did-method all yours!","username":"rjones","ts":"2020-09-04T22:12:52.943Z"}
{"msg":"Has left the channel.","username":"rjones","ts":"2020-09-05T02:26:14.133Z","type":"ul"}
{"msg":"Has joined the channel.","username":"Xand","ts":"2020-09-15T15:32:54.544Z","type":"uj"}
{"msg":"Has joined the channel.","username":"ajayjadhav","ts":"2020-09-15T15:44:26.391Z","type":"uj"}
{"msg":"Has joined the channel.","username":"SuperSeiyan","ts":"2020-09-17T14:08:02.166Z","type":"uj"}
{"msg":"Has joined the channel.","username":"GianlucaPinto","ts":"2020-09-24T13:41:31.703Z","type":"uj"}
{"msg":"hi all, how can i do for get the timestamp of a credentials ? thanks","username":"GianlucaPinto","ts":"2020-09-24T13:41:32.144Z"}
{"msg":"Has joined the channel.","username":"sheru","ts":"2020-09-24T15:24:09.213Z","type":"uj"}
{"msg":"I'd suggest moving that question to #indy-sdk which is the designated channel for questions like this.","username":"kdenhartog","ts":"2020-10-04T21:31:48.212Z"}
{"msg":"Has joined the channel.","username":"braduf","ts":"2020-10-15T22:43:46.257Z","type":"uj"}
{"msg":"Has joined the channel.","username":"gnarula","ts":"2020-10-20T08:54:10.679Z","type":"uj"}
{"msg":"can someone share the link to the indy did method documentation draft please?","username":"gnarula","ts":"2020-10-21T14:09:23.062Z"}
{"msg":"I think it's in the confluence project somewhere; did you set up a login? It's free","username":"Xand","ts":"2020-10-21T14:19:45.838Z"}
{"msg":"The current doc is here: https://hackmd.io/@icZC4epNSnqBbYE0hJYseA/S1eUS2BQw\n\nI'm hoping to have a session at the IIW Conference tomorrow on this so I'm hoping it will evolve a bit this week.","username":"swcurran","ts":"2020-10-21T15:38:42.525Z"}
{"msg":"+1, an IIW session about did:indy would be great","username":"peacekeeper","ts":"2020-10-21T15:48:28.268Z"}
{"msg":"Thanks! Sorry I couldn't make it to IIW but I'm interested in discussions around this, specially about the versioning bit. Is there a call/meeting with the indy method on the agenda? I'd love to participate!","username":"gnarula","ts":"2020-10-22T12:56:31.881Z"}
{"msg":"Re: the DID-URL method, I've suggested that a few times for resolving existing ledger objects (schemas, cred defs, revocation entries) but always received push back. I think it's the logical method for those transactions, but I also am leaning toward supporting any future ledger objects as DID documents","username":"andrew.whitehead","ts":"2020-10-22T20:03:29.037Z"}
{"msg":"Has joined the channel.","username":"mickra","ts":"2020-10-22T21:26:01.207Z","type":"uj"}
{"msg":"FYI - We plan on having weekly `did:indy` Method Specification Drafting meetings on a weekly basis.  I propose that the meetings be held at 7AM Pacific Time on Tuesdays, which is the hour before the bi-weekly Indy Contributors call.\n\nRequest: Please let me know in replies if you plan on participating, and if so, if the time is OK with you, or what times would you prefer?\n\nThanks!","username":"swcurran","ts":"2020-10-27T17:45:09.680Z"}
{"msg":"","username":"swcurran","ts":"2020-10-27T17:46:18.641Z","attachments":[{"type":"file","title":"DIDIndySpecathonNotes - IIWXXXI.pdf","title_link":"/file-upload/eJq6AjD3gvMTuMZ9m/DIDIndySpecathonNotes%20-%20IIWXXXI.pdf","url":"/file-upload/eJq6AjD3gvMTuMZ9m/DIDIndySpecathonNotes%20-%20IIWXXXI.pdf","remote":false,"fileId":"eJq6AjD3gvMTuMZ9m","fileName":"DIDIndySpecathonNotes - IIWXXXI.pdf"}]}
{"msg":"Works for me, happy to coordinate or moderate when/if needed","username":"Xand","ts":"2020-10-27T18:07:59.394Z"}
{"msg":"Has joined the channel.","username":"paul.bastian","ts":"2020-10-28T13:14:20.292Z","type":"uj"}
{"msg":"hey this is Paul and Micha, we tried to participate this time but the europe time in the confluence page didn't account fo europe wintertime shifting, so we missed it by an hour, planning to attend next week then..","username":"paul.bastian","ts":"2020-10-28T13:16:32.606Z"}
{"msg":"Awesome -- thanks.  Sorry for the calendar mixup.  Calendars are really hard...  :-)","username":"swcurran","ts":"2020-10-28T13:30:23.518Z"}
{"msg":"FYI - the first of a (hopefully short-lived) series of meetings about defining the *Indy DID Method Spec* has been scheduled for this coming Tuesday at 7AM Pacific / 15:00 UTC.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2020-11-03\n\nInformation about this meeting series is here:  https://wiki.hyperledger.org/display/indy/Drafting+the+Indy+DID+Method+Specification\n\nOn the agenda this week is getting started and a discussion on the contents of the <network> component of the DID.\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2020-10-29T22:02:58.227Z"}
{"msg":"FYI - the first of a (hopefully short-lived) series of meetings about defining the *Indy DID Method Spec* has been scheduled for this coming Tuesday November 3 at 7AM Pacific / 15:00 UTC.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2020-11-03\n\nInformation about this meeting series is here:  https://wiki.hyperledger.org/display/indy/Drafting+the+Indy+DID+Method+Specification\n\nOn the agenda this week is getting started and a discussion on the contents of the <network> component of the DID.\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2020-10-29T22:02:58.227Z"}
{"msg":"Has joined the channel.","username":"robdaa","ts":"2020-10-31T18:10:46.796Z","type":"uj"}
{"msg":"All, I'm sorry I missed the call today, I was planning to join but was occupied with preparations for the ongoing W3C DID WG F2F meeting this week..","username":"peacekeeper","ts":"2020-11-03T19:31:34.420Z"}
{"msg":"We had a good first meeting today looking at what to put into the `network` segment of the did:indy identifier.  We did not settle on a last one, but came up with 5 ideas, and the attributes enabled b each -- discoverability, human-friendly, conciseness, verifiability, dependencies.","username":"swcurran","ts":"2020-11-03T21:29:23.588Z"}
{"msg":"","username":"swcurran","ts":"2020-11-03T21:29:26.313Z","attachments":[{"type":"file","title":"Clipboard - November 3, 2020 1:29 PM","title_link":"/file-upload/APk96tkRvM7SxidQK/Clipboard%20-%20November%203,%202020%201:29%20PM","image_url":"/file-upload/APk96tkRvM7SxidQK/Clipboard%20-%20November%203,%202020%201:29%20PM","image_type":"image/png","image_size":23666,"url":"/file-upload/APk96tkRvM7SxidQK/Clipboard%20-%20November%203,%202020%201:29%20PM","remote":false,"fileId":"APk96tkRvM7SxidQK","fileName":"Clipboard - November 3, 2020 1:29 PM"}]}
{"msg":"The approaches:\n\n- Hash (543F4) ‚Äì unrecognizable, verifiable with the ledger, short,¬†non-discoverable/requires a registry\n- Domain Name (example.com) ‚Äì recognizable, discoverable, not tied to the ledger, dependent on DNS\n- Arbitrary Name (SovrinStaging) - recognizable, non-discoverable/requires a registry, not tied to the ledger\n- Combination of hash and domain name (this is what TrustBloc does)¬†\n- Combination of arbitrary name and hash <arbname>:<hash>¬† e.g. did:indy:sovrin:<hash>:<id>","username":"swcurran","ts":"2020-11-03T21:30:09.085Z"}
{"msg":"My addition to the question _\"What advantages (in terms of security) do we get when adding a truncated hash of the genesis file to the did?\"_\n\nFirst of all, we have to define the attack model.\nOne possible attack is the impersonation of a DID controller. This could be achieved by fooling the DID resolver to process a faked DID Document which includes keys under the attacker's control.\n\nSo let's look at the proposal to bind a DID to a specific ledger by adding a truncated hash (5 characters) of the genesis file to it. Does this proposal prevents the attack? I don't think so.\n\nA five character base58 encoded string has an entropy of log2(58^5)=29.28 bits what is not sufficient for resistance to second preimages. An attacker could easily create his own ledger instance containing a faked DID document with a genesis file that leads to the same truncated hash (see example below).\nSo in my opinion, the hash approach has no advantage over an arbitrary network identifier because we have to trust the source of the genesis file anyway.\n\nI think to counteract the impersonation attack, it is much more important to *require the DID to be self-certifying* (see swcurran's comment in the draft).\n\nLink to example attack: https://hackmd.io/@jVpySwTeR5KNaa4M-h9bdg/BykGlUktP","username":"mickra","ts":"2020-11-03T22:02:35.294Z"}
{"msg":"I'm not an expert on this but...\n\nThe hash is the first five characters of a SHA256 hash of the file. As well, the file is contains the first n transactions on the Domain Ledger. \n\nThey could fork the ledger, but I don't think that is easily done. From my assessment, a fork of an Indy network can only be done with the cooperation of the base ledger nodes -- e.g. a \"friendly fork\".\n\nThe hash doesn't give you the location of the pool genesis file, and so there still has to be a separate mechanism for that. The attacker has to have a way to get you to use their version of that file.","username":"swcurran","ts":"2020-11-03T22:23:17.188Z"}
{"msg":"@kdenhartog -- what was the motivation in using the hash prefix initially?  Was it just a way to have a unique ID per network, or was it to add an integrity check on the network being pointed to, or both?  I'm guessing both, but wanted to be sure.","username":"swcurran","ts":"2020-11-03T22:24:58.700Z"}
{"msg":"@swcurran In my opinion you don't have to make a friendly fork. You could just make your own ledger with the same truncated hash (what is very easy).\n\nAs you mentioned, the tricky part is to make the resolver to use your version of that file. However, this is also true when we use an arbitrary name instead of the hash.\n\n@kdenhartog So why use the hash at all? I asked the same question at the call? In my opinion it strongly depends on the expected number of future indy networks. I just wanted to make clear here that with this truncated hash we have no strong integrity check.","username":"mickra","ts":"2020-11-03T23:15:11.551Z"}
{"msg":"The reason for using the hash is so that clients can check it.  Against the ledger. Assuming that is common practice, getting a 5-character hash prefix that matches a series of transactions with signatures is (I think) effectively impossible.","username":"swcurran","ts":"2020-11-03T23:18:15.308Z"}
{"msg":"The reason for using the hash is so that clients can check it, e.g. against the transaction on the ledger. Assuming that is common practice, getting a 5-character hash prefix that matches a series of transactions with signatures is (I think) effectively impossible.","username":"swcurran","ts":"2020-11-03T23:18:15.308Z"}
{"msg":"The reason for using the hash is so that clients can check it, e.g. against the transaction on the ledger. Assuming that is common practice to verify the ledger, getting a 5-character hash prefix that matches a series of transactions with signatures is (I think) effectively impossible.","username":"swcurran","ts":"2020-11-03T23:18:15.308Z"}
{"msg":"The reason for using the hash is so that clients can check it, e.g. against the transaction on the ledger. Assuming that is common practice to verify the ledger, getting a 5-character hash prefix that matches a series of valid ledger transactions with signatures is (I think) effectively impossible.","username":"swcurran","ts":"2020-11-03T23:18:15.308Z"}
{"msg":"It is not impossible if the attacker controls all keys of his fake ledger. Btw genesis transactions do not have any signatures..","username":"mickra","ts":"2020-11-04T07:36:08.518Z"}
{"msg":"I try to explain it again, otherwise we need to postpone this discussion to next week's call.\nImagine you are connecting to a DID on a new ledger that you havent been to, then on some other way thats offtopic to the hash discussion you need to enable discovery and therefore you can resolve a did. imagine I can fool you to connect to my hidden fake indy pool then your 5 character hash will not save you at all, because i will make up a genesis file easily that will also match this 5 character hash. that means the hash doesnt serve any cryptographically secure integrity check. If you want the integrity then you need to use all 32bytes of the SHA256","username":"paul.bastian","ts":"2020-11-04T10:11:41.961Z"}
{"msg":"However all of this neglects the most import topic - discoverability","username":"paul.bastian","ts":"2020-11-04T10:12:18.925Z"}
{"msg":"this is what we should focus on","username":"paul.bastian","ts":"2020-11-04T10:12:34.808Z"}
{"msg":"Could there be a fusion between the domain and arbitrary approaches wherein the names that do resolve through DNS are as such reserved, and then the other not-yet-discovered names are found by gossip from the discovered ones?","username":"Xand","ts":"2020-11-04T12:11:26.228Z"}
{"msg":"A key part that I don't see mentioned in there is the namespace governance. With something like a hash which is randomly generated in a way that allows for enough entropy to support many networks we don't need to consider how to govern the sub network namespace such that indy DIDs remain globally resolvable and sufficiently decentralized. However, if we opt to rely on a registry or DNS then we're effectively creating a hierarchical namespace that needs to be appropriately governed and can handle instances such as who decides which network is did:indy:sovrin","username":"kdenhartog","ts":"2020-11-06T00:11:34.020Z"}
{"msg":"A key part that I don't see mentioned in there is the namespace governance. With something like a hash which is randomly generated in a way that allows for enough entropy to support many networks we don't need to consider how to govern the sub network namespace such that indy DIDs remain globally resolvable and sufficiently decentralized. However, if we opt to rely on a registry or DNS then we're effectively creating a hierarchical namespace that needs to be appropriately governed and can handle instances such as who decides which network is `did:indy:sovrin`","username":"kdenhartog","ts":"2020-11-06T00:11:34.020Z"}
{"msg":"The reason for supporting the hash was in-order to handle globally decentralized namespace in a way that doesn't need to be governed. Essentially I'm trying to not go the path of creating an ICANN for Indy ledgers.","username":"kdenhartog","ts":"2020-11-06T00:14:36.566Z"}
{"msg":"The goal wasn't really focused on pre-image integrity resistance because I recognized that if we do end up close to 2^29.28 (536870912) networks that we can extend the name space with more characters. If we're concerned about that then we can also enlarge the number of characters now.","username":"kdenhartog","ts":"2020-11-06T00:17:28.180Z"}
{"msg":"I think you raise a good point though that if we make the network genesis txn file (or some other pre image to the hash) cross anchored to many networks than this pre-image attack could potentially cause non-determinism during DID resolution.\n\nE.g. if resolver 1 finds network 1 (\"aaaaa\") on network 2 and resolver 2 finds network 3 (also \"aaaaa\") on network 4, then resolving did:indy:aaaaa:123 could end up returning different did documents depending on if resolver 1 or resolver 2 is used.","username":"kdenhartog","ts":"2020-11-06T00:22:38.703Z"}
{"msg":"Has joined the channel.","username":"domwoe","ts":"2020-11-06T09:57:04.093Z","type":"uj"}
{"msg":"Many thanks for clarifying the motivation. During the discussion, I just always had the feeling that the hash approach always implies: \"It brings security/verifiability to the ledger/DID resolution, since it uses a cryptographic hash\". So I wanted to make you aware that this is not automatically the case.","username":"mickra","ts":"2020-11-06T10:05:00.938Z"}
{"msg":"Sorry -- my fault as I really hadn't dug into the issue of why.  \n:disappointed:","username":"swcurran","ts":"2020-11-06T15:59:04.103Z"}
{"msg":"ok I get the point now. The core question is: how many networks do we expect? The hash still doesn't give discoverability and therefore resolvability. The more I think about it, i like the gossip/crossref idea..","username":"paul.bastian","ts":"2020-11-06T16:04:21.640Z"}
{"msg":"The use cases for networks are around national infrastructure and global organizations.  So if we assume a maximum case of every nation and a handful of global networks, we're talking in the hundreds.  So I'd say the max we should assume is 1000 (on order of magnitude higher than expected).","username":"swcurran","ts":"2020-11-06T16:23:41.054Z"}
{"msg":"The consensus at the Indy Interop-athon was that we should go with configuration for now for discoverability, and don't do anything to prevent a gossip approach later.","username":"swcurran","ts":"2020-11-06T16:25:12.045Z"}
{"msg":"Has joined the channel.","username":"ultimo2020","ts":"2020-11-07T20:32:27.224Z","type":"uj"}
{"msg":"Greetings everyone. I am catching up. Great discussions by the way. ","username":"ultimo2020","ts":"2020-11-07T20:50:52.383Z"}
{"msg":"Was there maybe any discussion or work on KERI and offloading some key rotates and state management from the ledger? ","username":"ultimo2020","ts":"2020-11-07T20:51:43.742Z"}
{"msg":"Sorry guys if I have missed the meeting.\nI have a small question. Has there been any test-athlon in resolution of other networks, for an example ETH ssi ecosystem or other? As I understood the one of the goals (which is great) is the interoperability between ssi networks and ecosystems? ","username":"ultimo2020","ts":"2020-11-07T21:10:10.637Z"}
{"msg":"There is a suggestion of making the DID method \"KERI-friendly\" as a future placeholder, but there have not been any discussions about how that capability would be used.  Basically, allow in the ledger specific ID portion to have a prefix that in future could be used for a KERI identifier. E.g. \"did:indy:<network>:keri:<keriID>\".\n\nWe think with the direction we are going -- an all DIDs Indy implementation, it will be easier to make a resolver that works across ecosystems.  However, for now, the focus is on interop across Indy networks.","username":"swcurran","ts":"2020-11-08T19:30:56.251Z"}
{"msg":"There is a suggestion of making the DID method \"KERI-friendly\" as a future placeholder, but there have not been any discussions about how that capability would be used.  Basically, allow in the ledger specific ID portion to have a prefix that in future could be used for a KERI identifier. E.g. \"`did:indy:<network>:keri:<keriID>`\".\n\nWe think with the direction we are going -- an all DIDs Indy implementation, it will be easier to make a resolver that works across ecosystems.  However, for now, the focus is on interop across Indy networks.","username":"swcurran","ts":"2020-11-08T19:30:56.251Z"}
{"msg":"Next meeting: scheduled for this coming Tuesday November 3 at 7AM Pacific / 15:00 UTC.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2020-11-10\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Drafting+the+Indy+DID+Method+Specification\n\nOn the agenda this week is continuing the discussion on the <network> component of the DID and how we will find a network given that component.\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2020-11-08T19:32:53.019Z"}
{"msg":"Next meeting: scheduled for this coming Tuesday November 10 at 7AM Pacific / 15:00 UTC.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2020-11-10\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Drafting+the+Indy+DID+Method+Specification\n\nOn the agenda this week is continuing the discussion on the <network> component of the DID and how we will find a network given that component.\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2020-11-08T19:32:53.019Z"}
{"msg":"Next meeting: scheduled for this coming Tuesday November 10 at 7AM Pacific / 15:00 UTC.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2020-11-10\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week is continuing the discussion on the <network> component of the DID and how we will find a network given that component.\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2020-11-08T19:32:53.019Z"}
{"msg":"Nov 3?","username":"andrew.whitehead","ts":"2020-11-08T20:17:05.694Z"}
{"msg":"11/10*","username":"Xand","ts":"2020-11-08T22:17:22.856Z"}
{"msg":"All good, I'm glad I caught this discussion on going and was able to provide my motivations for it. I still think there's good questions to consider about pre-image collisions, but so far my thinking is that's solved by resolver implementers while we're still doing the config approach and if we start working on cross referencing we'll consider the impact of a pre-image attack then. In my mind, there's nothing that prevents us from having a variable length network string so we can extend it later to increase entropy.","username":"kdenhartog","ts":"2020-11-08T23:07:16.561Z"}
{"msg":"**Editted to say Nov. 10.","username":"swcurran","ts":"2020-11-09T15:01:34.573Z"}
{"msg":"**Edited to say Nov. 10.","username":"swcurran","ts":"2020-11-09T15:01:34.573Z"}
{"msg":"Thanks @swcurran for the Infos, I seem that I cannot open the agenda link ","username":"ultimo2020","ts":"2020-11-09T17:22:22.847Z"}
{"msg":"Thanks @swcurran. Do you mean by Interop, like between Indy like Sovrin, BCgov and many other to come? Or also interoperability between other ecosystems like Bitcoin and ETH ","username":"ultimo2020","ts":"2020-11-09T17:24:18.015Z"}
{"msg":"The proper page for the DID Indy Meetings is: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nCorrected above.  Never change the name of a web page :-)","username":"swcurran","ts":"2020-11-09T18:47:01.567Z"}
{"msg":"Here is the right one: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification","username":"swcurran","ts":"2020-11-09T18:47:21.011Z"}
{"msg":"Starting with Interop between Indy instances -- Sovrin, Sovrin Staging, BCovrin Test, FIndy, IDUnion and so on.\n\nThat should also lead to resolution interop as well.","username":"swcurran","ts":"2020-11-09T18:48:28.473Z"}
{"msg":"Starting with Interop between Indy instances -- Sovrin, Sovrin Staging, BCovrin Test, FIndy, IDUnion and so on.\n\nThat should also lead to resolution interop as well, beyond Indy.\n\nBut initial focus is Indy.","username":"swcurran","ts":"2020-11-09T18:48:28.473Z"}
{"msg":"Thanks a lot, will take a look into it","username":"ultimo2020","ts":"2020-11-09T18:53:26.410Z"}
{"msg":"The results of today's `did:indy` specification meeting and the recording are posted.  The main result is that we will use \"arbitrary names\" for the <network> component, with each being able to propose and use the name of their choice.  Up next:\n\n- Do we propose to use third level names for subsidiary ledgers ‚Äì e.g. Sovrin Staging and Sovrin Builder net (`did:indy:sovrin:staging:12345`)?\n- How to find the nodes of the network once the ledger is known?  Config files, registries, gossiping, oh my!","username":"swcurran","ts":"2020-11-10T21:43:41.051Z"}
{"msg":"@kdenhartog ^^  FYI about the hash vs. arbitrary name.","username":"swcurran","ts":"2020-11-10T23:24:22.725Z"}
{"msg":"Looking at the DID core spec, the network identifier can include these characters: `ALPHA / DIGIT / \".\" / \"-\" / \"_\"`. I don't mind the look of `did:indy:sovrin.staging:12345`","username":"andrew.whitehead","ts":"2020-11-10T23:51:46.803Z"}
{"msg":"(or `staging.sovrin` if you want to use DNS ordering)","username":"andrew.whitehead","ts":"2020-11-10T23:52:31.457Z"}
{"msg":"If you define the subnets as part of the method-specific-id then the format above is legit though","username":"paul.bastian","ts":"2020-11-11T09:13:38.406Z"}
{"msg":"It's an allowed format. I'm not sure if the 'subsidiary ledger ID' is required though and it would be good to have a consistent number of components","username":"andrew.whitehead","ts":"2020-11-11T16:49:31.689Z"}
{"msg":"Has joined the channel.","username":"kei32bit","ts":"2020-11-13T01:13:40.726Z","type":"uj"}
{"msg":"What‚Äôs the plan to govern the namespace then? From the sounds of it this is effectively recreating DNS.","username":"kdenhartog","ts":"2020-11-16T01:55:18.667Z"}
{"msg":"Also this won‚Äôt scale to a cross network gossiping type system because you‚Äôll need a global namespace in order to support that. This solution opts to forgo the ‚Äúdecentralized‚Äù property needed to make that happen instead preferring the human friendliness property as described in Zooko‚Äôs triangle.","username":"kdenhartog","ts":"2020-11-16T02:00:30.893Z"}
{"msg":"Also this won‚Äôt scale to a cross network gossiping type system because you‚Äôll need a decentralized, global namespace in order to support that. This solution opts to forgo the ‚Äúdecentralized‚Äù property needed to make that happen instead preferring the human friendliness property as described in Zooko‚Äôs triangle.","username":"kdenhartog","ts":"2020-11-16T02:00:30.893Z"}
{"msg":"At this point, there is no plan to govern the namespace.  Don't pick the same name as others :-),  don't accept duplicate names. Same as don't generate a hash prefix same as others, don't accept the same hash as has already been seen.\n\nI don't understand the gossip comment as that is about discovery, which is a separate issue from namespacing.","username":"swcurran","ts":"2020-11-16T02:43:46.203Z"}
{"msg":"Note that the \"person friendly\" name was deemed acceptable given the expected number of networks -- in the low 100s, max 1000.","username":"swcurran","ts":"2020-11-16T02:44:53.225Z"}
{"msg":"They'll have an impact on each other eventually when you're trying to cross anchor networks for discovery later if the namespaces have a collision. This will lead to not deterministic resolution, but from the sounds of it people are alright with that and willing to solve that problem a different day.","username":"kdenhartog","ts":"2020-11-16T10:13:21.036Z"}
{"msg":"reasons in my opinion:\n1. motivation to pick namespace collisions are not high, 2. chances for namespace collisions are not to be expected due to the expected numbers, 3. we should forbid selfdeclared DID ids and only allow selfcertyfing, generated DID ids that form a cryptographic barrier in case of an attacker collision, 4. hash solution does not solve the this either, 5. nobody wants DNS","username":"paul.bastian","ts":"2020-11-16T22:05:12.099Z"}
{"msg":"Great summation, Paul.  Thanks.","username":"swcurran","ts":"2020-11-16T23:33:34.925Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for this coming Tuesday November 17 at 7AM Pacific / 15:00 UTC.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2020-11-17\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week is naming for related ledgers (e.g. dev/test/staging), finding the ledger given a DID, and (if there is time) the ramifications to Indy of version-id and version-time resolution query parameters.\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2020-11-17T01:05:33.577Z"}
{"msg":"1 if an attacker squats on a name space then that won‚Äôt remain true. That‚Äôs premised on the assumption that all actors are benevolent within the space.\n\n2 again has nothing to do with honest actors. They‚Äôll easily work out how to avoid name space collision through implicit governance of the Indy sub namespace. It‚Äôs malicious actors who will cause the problems.\n\n3 agree but this doesn‚Äôt have anything to do with network identification and resolution\n\n4 if a cryptographic hash is used and not overly truncated it would. This is what pre-image resistance is about\n\n5 Then it would be wise of us to not create a human friendly network identifier because DNS has the architectural constraints on it due to their namespace also opting to use human friendly identifiers and being globally unique.\n\nFrom the sounds of it though, people are convinced this is what they want so that‚Äôs the direction the method will go. I‚Äôm just trying to do my due diligence by calling out the tradeoffs that I‚Äôm seeing that don‚Äôt seem like they‚Äôre being considered from the discussions in seeing. If people are aware and still willing to accept the tradeoffs that‚Äôs fine because I raised the concern at least.","username":"kdenhartog","ts":"2020-11-17T10:00:29.146Z"}
{"msg":"1 if an attacker squats on a name space then that won‚Äôt remain true. That‚Äôs premised on the assumption that all actors are benevolent within the space.\n\n2 again has nothing to do with honest actors. They‚Äôll easily work out how to avoid name space collision through implicit governance of the Indy sub namespace. It‚Äôs malicious actors who will cause the problems.\n\n3 agree but this doesn‚Äôt have anything to do with network identification and resolution\n\n4 if a cryptographic hash is used and not overly truncated it would. This is what pre-image resistance is about\n\n5 Then it would be wise of us to not create a human friendly network identifier because DNS has the architectural constraints on it due to their namespace also opting to use human friendly identifiers and being globally unique.\n\nFrom the sounds of it though, people are convinced this is what they want so that‚Äôs the direction the method will go. I‚Äôm just trying to do my due diligence by calling out the tradeoffs that I‚Äôm seeing that don‚Äôt seem like they‚Äôre being considered from the discussions I‚Äôm seeing. If people are aware and still willing to accept the tradeoffs that‚Äôs fine because I raised the concern at least.","username":"kdenhartog","ts":"2020-11-17T10:00:29.146Z"}
{"msg":"We could shift every 2nd week for a later time to enable Kyle to participate? 7:00am Auckland is 6:00pm Berlin?","username":"paul.bastian","ts":"2020-11-17T16:12:32.616Z"}
{"msg":"Good discussions today -- thanks all!  We reviewed last week's decisions (and kept them), talked about subnamespacing (added them), reserving a space for KERI (added that too) and talked about how to find the ledger of a DID, and made progress.  Next week, we'll start with a summary from Daniel about how a gossiped \"my networks knows about your network\" scheme might work practically, so we can decide to include it as a formal capability, or whether it will remain as an informal future direction.","username":"swcurran","ts":"2020-11-17T16:22:31.858Z"}
{"msg":"The recording has been posted to the agenda page: https://wiki.hyperledger.org/display/indy/2020-11-17+Indy+DID+Method+Specification+Call","username":"swcurran","ts":"2020-11-17T16:24:42.066Z"}
{"msg":"Has joined the channel.","username":"danielhardman","ts":"2020-11-17T18:56:06.861Z","type":"uj"}
{"msg":"Here are slides for the cross-registration idea, to be discussed at the next meeting: https://j.mp/36Zi7ij","username":"danielhardman","ts":"2020-11-17T18:56:07.119Z"}
{"msg":"Regarding this discussion, @swcurran and I messaged back and forth and confirmed that everyone is aware of the tradeoffs and is willing to accept them. In this case, I'm good to move forward with the arbitrary names approach and am not here to stand in the way, but rather just provide advice and options now that we've decided to go this route.","username":"kdenhartog","ts":"2020-11-19T01:21:44.766Z"}
{"msg":"@danielhardman I just gave a loook through your slides and looks good. Something that I didn't see mentioned on there yet was what happens if a network name identifier is already registered to a network. In the Config files this is going to be a bit easier because I'd expect the config will just not merge a PR that has this issue. For the Manual Cross-Registration this seems like it will hold in the majority of cases, but the one edge case I'd expect would be if lets say I'm did:indy:sov and I cross register to did:indy:findy and it accepts the registration, but then also try to cross register to did:indy:xyz and did:indy:sov has already been registered that points to a separate network. In this case should we allow the removal of did:indy:sov from did:indy:findy such that we can create a new namespace that won't conflict?","username":"kdenhartog","ts":"2020-11-19T01:28:31.829Z"}
{"msg":"@danielhardman I just gave a loook through your slides and looks good. Something that I didn't see mentioned on there yet was what happens if a network name identifier is already registered to a network. In the Config files this is going to be a bit easier because I'd expect the config will just not merge a PR that has this issue. For the Manual Cross-Registration this seems like it will hold in the majority of cases, but the one edge case I'd expect would be if lets say I'm `did:indy:sov` and I cross register to `did:indy:findy` and it accepts the registration, but then also try to cross register to `did:indy:xyz` and `did:indy:sov` has already been registered that points to a separate network so it rejects the Manual Cross Registration. In this case should we allow the removal of `did:indy:sov` from `did:indy:findy` such that we can create a new namespace that won't conflict?","username":"kdenhartog","ts":"2020-11-19T01:28:31.829Z"}
{"msg":"@kdenhartog AFAIK, the plan is that a adding a \"network\" entry to a ledger (containing pointers to other networks) is done by a trusted DID of the ledger.  So `did:indy:findy` does not register on `did:indy:sov`, but rather `did:indy:findy` is added as a network by (likely) a Trustee on `did:indy:sov` based on a human request, according to the governance framework of `did:indy:sov`.\n\nThat will work for the next several years and other mechanisms may be added in the future that enable scaling.  But because we are talking a small number of networks (100s), we don't need the scaling -- at least not yet.","username":"swcurran","ts":"2020-11-19T15:00:38.975Z"}
{"msg":"its more of a human-like trust network. trustees know each other and mutually cross-register their networks","username":"paul.bastian","ts":"2020-11-19T16:12:00.299Z"}
{"msg":"additionally this can be published at DIF/ToIP/Github","username":"paul.bastian","ts":"2020-11-19T16:12:49.513Z"}
{"msg":"software implementers gonna pick their favorite combination and use static and/or dynamic approaches individually","username":"paul.bastian","ts":"2020-11-19T16:14:04.855Z"}
{"msg":"we offer a suite of possibilities as a non-normative section in the DID method","username":"paul.bastian","ts":"2020-11-19T16:14:29.498Z"}
{"msg":"One question is what will the \"DID on network A that identifies network B\" will look like... Hash of the genesis file of network B?","username":"peacekeeper","ts":"2020-11-19T23:41:30.797Z"}
{"msg":"Also note this paper by @drummondreed about DID Namespace Records: https://github.com/WebOfTrustInfo/rwot8-barcelona/blob/master/topics-and-advance-readings/did-namespace-records.md","username":"peacekeeper","ts":"2020-11-19T23:42:34.614Z"}
{"msg":"Has joined the channel.","username":"drummondreed","ts":"2020-11-19T23:42:34.678Z","type":"uj"}
{"msg":"Interesting.  @drummondreed -- glad to have you join us.","username":"swcurran","ts":"2020-11-20T00:36:00.606Z"}
{"msg":"As presented, that tells us about other networks, but doesn't provide discovery information -- how you actually connect with the other network.","username":"swcurran","ts":"2020-11-20T00:36:39.257Z"}
{"msg":"The idea is that the DID document representing the other network either directly contains that connection info or points to it via a service endpoint type that we define in the Indy DID method.","username":"drummondreed","ts":"2020-11-20T00:37:57.350Z"}
{"msg":"In the paper those DID documents are called \"DID namespace documents\".","username":"drummondreed","ts":"2020-11-20T00:38:20.229Z"}
{"msg":"They are just standard DID documents with additional properties defined for discovery, description, and cross-verification of DID networks.","username":"drummondreed","ts":"2020-11-20T00:38:55.815Z"}
{"msg":"Not quite sure what the levels of indirection are.  Do the examples show what is in the \"namespace documents\" or are they DIDs that resolve to DIDDocs that contain the discovery info?\n\nHow many turtles?","username":"swcurran","ts":"2020-11-20T00:43:53.626Z"}
{"msg":"You got it. The DIDs resolve to DID documents that contain the discovery info.","username":"drummondreed","ts":"2020-11-20T00:47:10.958Z"}
{"msg":"OK...but how do you resolve those DIDs...?  Anyway -- Daniel has a presentation that can facilitate the discussion next week.","username":"swcurran","ts":"2020-11-20T00:49:26.042Z"}
{"msg":"Good slides so far, I would put in a success/fail endstate for the flow chart","username":"paul.bastian","ts":"2020-11-20T14:30:58.216Z"}
{"msg":"for failed resolution/and successfully resolved DID doc","username":"paul.bastian","ts":"2020-11-20T14:32:56.003Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for this coming Tuesday November 24 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2020-11-24\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week is finding a ledger given it's name. A config file is needed to find one network, but can we use that network to find others, and others, and others, and others...\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2020-11-24T00:53:36.308Z"}
{"msg":"Has joined the channel.","username":"kukgini","ts":"2020-11-24T10:13:21.030Z","type":"uj"}
{"msg":"Hi all -- I've written what I think is a summary of the discussion about cross-registering networks on ledgers -- it's at the bottom of the page linked below.  Please review before the next meeting so that we can (relatively) quickly review the summary and address the noted decisions to be made:\n\nhttps://wiki.hyperledger.org/display/indy/2020-11-24+Indy+DID+Method+Specification+Call\n\nComments and ideas are welcome here in this channel.","username":"swcurran","ts":"2020-11-26T01:06:29.610Z"}
{"msg":"I'm not convinced it's a good idea that DID creation always requires TWO operations (NYM and \"diddoc\" ATTRIB). I feel like it should still be possible to create a DID with a NYM only (and optional \"diddoc\" ATTRIB).","username":"peacekeeper","ts":"2020-11-30T22:40:40.742Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for this coming Tuesday December 1 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2020-12-01\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week is a review of last week's discussion aiming towards some decisions, and we'll get started on DIDs / DIDDocs and NYMs / ATTRIBs\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2020-11-30T23:39:13.295Z"}
{"msg":"Has joined the channel.","username":"dishan","ts":"2020-12-02T01:14:15.609Z","type":"uj"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for this coming Tuesday December 8 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2020-12-08\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n* Review: Discovery of networks - Given a DID, how to find it's network via gossiped ledger data\n* Second pass: Handling DIDs / DIDDocs using NYMs / ATTRIBs\n* Getting updates made to the hackmd.io document.\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2020-12-07T19:11:54.395Z"}
{"msg":"Has joined the channel.","username":"brian.richter","ts":"2020-12-07T23:23:29.185Z","type":"uj"}
{"msg":"I'm sorry I won't be able to join today - it's a public holiday here and also my nephew's birthday.. ","username":"peacekeeper","ts":"2020-12-08T08:59:50.281Z"}
{"msg":"Just want to say again that I believe a NYM alone without an ATTRIB should also be considered a complete DID that can be resolved to a DID document which simply has the NYM's verkey in it. ATTRIB with a DID document can optionally be done too. I think that was the direction we were heading in anyway on the last call...","username":"peacekeeper","ts":"2020-12-08T09:02:08.587Z"}
{"msg":"NP -- enjoy the day (and evening!). Yes, that's a must!","username":"swcurran","ts":"2020-12-08T14:54:20.766Z"}
{"msg":"Has joined the channel.","username":"BrianRichter","ts":"2020-12-08T15:06:31.076Z","type":"uj"}
{"msg":"Hi All -- good discussion today on the DID Indy Method Specification call.  We talked over an approach from Drummond on how to use some special DIDs (\"DID Namespace Directory\" and \"DID Namespace Registration\" DIDs) to register and discover cross-registered Indy networks.  Very cool!\n\nHighly recommend checking out the notes here: https://wiki.hyperledger.org/display/indy/2020-12-08+Indy+DID+Method+Specification+Call","username":"swcurran","ts":"2020-12-08T21:07:03.094Z"}
{"msg":"Has joined the channel.","username":"ArturPhilipp","ts":"2020-12-10T12:15:11.865Z","type":"uj"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for this coming Tuesday December 8 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2020-12-08\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n* NYMs/ATTRIBs and DIDs/DIDDocs\n* Unresolved question about Indy Network Discovery","username":"swcurran","ts":"2020-12-14T21:07:24.091Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for this coming Tuesday December 8 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2020-12-08\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n* NYMs/ATTRIBs and DIDs/DIDDocs\n* Unresolved question about Indy Network Discovery\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2020-12-14T21:07:24.091Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for this coming Tuesday December 15 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2020-12-15\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n* NYMs/ATTRIBs and DIDs/DIDDocs\n* Unresolved question about Indy Network Discovery\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2020-12-14T21:07:24.091Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for this coming Tuesday December 15 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2020-12-15\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n* NYMs/ATTRIBs and DIDs/DIDDocs\n* Unresolved question about Indy Network Discovery\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2020-12-14T21:08:12.949Z"}
{"msg":"Hey I experimented a bit with version-time and version-id using a concrete example DID on Sovrin MainNet: https://docs.google.com/presentation/d/1GeNGueKuhGKXP4T7fGIxOENnZvfEsQywISlgTAgs1vA/","username":"peacekeeper","ts":"2020-12-15T13:41:25.929Z"}
{"msg":"If you like I can quickly present this today","username":"peacekeeper","ts":"2020-12-15T13:41:33.729Z"}
{"msg":"That would be great -- thanks.  Added to the agenda.","username":"swcurran","ts":"2020-12-15T14:24:26.966Z"}
{"msg":"Excellent meeting today that covered off a few issues.  The notes for the meeting have noted what we agreed upon:\n\n- a Hyperledger repo that network operators can use to post config files for their network\n- The need to continue to resolve NYMs with no ATTRIBs and NYMs with just endpoint ATTRIBs -- thanks for @peacekeeper for the demo!\n- That we will have a transformation from NYMs+ATTRIBs to produce a DIDDoc for resolution\n- That we will favour a did:key style DIDDoc from NYMs with no ATTRIBs and NYMs with just endpoint ATTRIBs\n\nNext meeting, Paul will facilitate a discussion about extending that last point to more than just \"endpoint ATTRIBs\" that moves away from the original idea in the hackmd.io document about the ATTRIB containing (more or less) the entire DIDDoc.\n\nMeetings are cancelled the next two weeks -- Dec. 22 and Dec. 29.\n\nNext meeting will be Jan. 5 at the regular time.\n\nIf you are looking for things to do, updating the hackmd.io document to reflect what we have agreed up on (documented in the the meeting agenda from today) would be a lot of fun to do!\n\nThanks!","username":"swcurran","ts":"2020-12-15T20:16:49.179Z"}
{"msg":"Hey folks -- a reminder that there is no meeting tomorrow, Dec. 22, 2020.  Have a great holiday break!","username":"swcurran","ts":"2020-12-22T05:25:00.863Z"}
{"msg":"Stephen, thanks for the reminder!!! You just saved me an hours sleep! And coming into Christmas, that's a huge present indeed!!","username":"drummondreed","ts":"2020-12-22T05:25:54.866Z"}
{"msg":"I am working on the DND/DNR spec draft, BTW. When will be the next meeting. Jan 5?","username":"drummondreed","ts":"2020-12-22T05:26:30.359Z"}
{"msg":"Thanks for the reminder, I would have joined :) Have a nice break, and I look forward to the next meeting.","username":"peacekeeper","ts":"2020-12-22T14:40:36.503Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for this coming Tuesday January 5 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-01-05\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n* Discussion (led by Paul Bastian) about transforming NYM and ATTRIB data into a DIDDoc. What goes into the ATTRIB and how does it manifest in the DIDDoc?\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2021-01-04T16:12:15.651Z"}
{"msg":"Hey folks -- I took a pass at updating the HackMD document to reflect what we have discussed to this point.  If you have a chance, please go in and clean it up.  Feel free to simply fix things that need fixing, and add questions/comments if relevant.  It includes all except the discovery approaches we've talked about.","username":"swcurran","ts":"2021-01-09T00:15:07.617Z"}
{"msg":"Also, there are a full set of appendices that need to be added -- each ATTRIB type and it's corresponding transformation.  Assuming we want to include that in the specification :-)","username":"swcurran","ts":"2021-01-09T00:15:59.765Z"}
{"msg":"I have generally been in favor of Paul's approach where we compose a DID doc from multiple attribs. However, I want to mention a concern that I have, which is that it could be possible to get in an invalid state (e.g., remove a key, then try to add a key, but now there are no keys that can authorize the add). This is because we can't atomically make multiple changes. The right way to solve this would be to submit multiple ATTRIB transactions at the same time. That would be an Indy Node change. Should we pursue that?","username":"danielhardman","ts":"2021-01-10T02:13:11.744Z"}
{"msg":"General answer -- I think that what we change in Indy Node will depend on what effort the community is willing to put into it.  Features such as what you reference are desirable but not required, and so whether it is implemented or not is up to the community.","username":"swcurran","ts":"2021-01-11T15:24:49.707Z"}
{"msg":"Specific answer -- I think we should consider the scope of ATTRIBs. For example, if you publish an \"authorization_key\" entry, does that add to the existing ones or replace the existing ones?  If the latter, then the problem that you reference doesn't come up.  Same for \"service_endpoint\".  Do we collect all the service_endpoint ATTRIBs and put them in an array, or get only the last one and require it have all the array entries that are current?","username":"swcurran","ts":"2021-01-11T15:27:33.947Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for NOW Tuesday January 12 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-01-12\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n* Details on ATTRIB transformations to DIDDocs\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2021-01-12T14:59:49.346Z"}
{"msg":"@all A small crowd but a very good discussion on the meeting about how to manage NYMs and ATTRIBs and a possible path for managing the two together in a powerful way.  Please review the notes here: https://wiki.hyperledger.org/display/indy/2021-01-12+Indy+DID+Method+Specification+Call\n\n@peacekeeper -- there is a request that I put in for you about how the concept of a controller (the entity/entities that can update a DID/DIDDoc) in the DID Core spec. works.  If we were to expand the concepts in the Indy NYM to (for example) include multiple verkeys and perhaps an \"N of M\" requirement, what would we do to align with the core DID spec?","username":"swcurran","ts":"2021-01-12T17:13:16.335Z"}
{"msg":"@all A small crowd but a very good discussion at today's meeting about how to manage NYMs and ATTRIBs and a possible path for managing the two together in a powerful way.  Please review the notes here: https://wiki.hyperledger.org/display/indy/2021-01-12+Indy+DID+Method+Specification+Call\n\n@peacekeeper -- there is a request that I put in for you about how the concept of a controller (the entity/entities that can update a DID/DIDDoc) in the DID Core spec. works.  If we were to expand the concepts in the Indy NYM to (for example) include multiple verkeys and perhaps an \"N of M\" requirement, what would we do to align with the core DID spec?","username":"swcurran","ts":"2021-01-12T17:13:16.335Z"}
{"msg":"@swcurran Thanks, I saw this mention. Sorry I wasn't able to join yesterday :( My quick reaction is:\n- I don't think the Indy rules should change to use the contents of the DID document, this feels like a big change, and there would be a some strange circular dependency. The DID document is constructed from NYM+ATTRIB, and at the same time the DID document is used for authorizing those writes.\n- But this doesn't mean that we can't change the rules e.g. to extend NYM to allow more complex controller concepts. E.g. I could absolutely imagine expanding NYM to specify multiple verification keys, and for authorizating writes you would need a N of M signature. These rules would be added to the Indy code, and they can also be \"rendered\" in the resolved DID document that is constructed from the NYM. It would be interesting to try to model that on an upcoming call.\n- @drummondreed has an open PR on DID Core that will add an appendix about \"Multiple DID Controllers\": https://github.com/w3c/did-core/pull/460","username":"peacekeeper","ts":"2021-01-13T12:03:19.755Z"}
{"msg":"@swcurran Thanks, I saw this mention. Sorry I wasn't able to join yesterday :( My quick reaction is:\n- I don't think the Indy rules should change to use the contents of the DID document, this feels like a big change, and there would be a some strange circular dependency. The DID document is constructed from NYM+ATTRIB, and at the same time the DID document is used for authorizing those writes.\n- But this doesn't mean that we can't change the rules e.g. to extend NYM to allow more complex controller concepts. E.g. I could absolutely imagine expanding NYM to specify multiple verification keys, and for authorizing writes you would need a N of M signature. These rules would be added to the Indy code, and they can also be \"rendered\" in the resolved DID document that is constructed from the NYM. It would be interesting to try to model that on an upcoming call.\n- @drummondreed has an open PR on DID Core that will add an appendix about \"Multiple DID Controllers\": https://github.com/w3c/did-core/pull/460","username":"peacekeeper","ts":"2021-01-13T12:03:19.755Z"}
{"msg":"@swcurran Thanks, I saw this mention. Sorry I wasn't able to join yesterday :( My quick reaction is:\n- I don't think the Indy rules should change to use the contents of the DID document, this feels like a big change, and there would be a strange circular dependency. The DID document is constructed from NYM+ATTRIB, and at the same time the DID document is used for authorizing those writes.\n- But this doesn't mean that we can't change the rules e.g. to extend NYM to allow more complex controller concepts. E.g. I could absolutely imagine expanding NYM to specify multiple verification keys, and for authorizing writes you would need a N of M signature. These rules would be added to the Indy code, and they can also be \"rendered\" in the resolved DID document that is constructed from the NYM. It would be interesting to try to model that on an upcoming call.\n- @drummondreed has an open PR on DID Core that will add an appendix about \"Multiple DID Controllers\": https://github.com/w3c/did-core/pull/460","username":"peacekeeper","ts":"2021-01-13T12:03:19.755Z"}
{"msg":"@swcurran Thanks, I saw this mention. Sorry I wasn't able to join yesterday :( My quick reaction is:\n- I don't think the Indy rules should change to use the contents of the DID document, this feels like a big change, and there would be a strange circular dependency. The DID document is constructed from NYM+ATTRIB, and at the same time the DID document would be used for authorizing those writes.\n- But this doesn't mean that we can't change the rules e.g. to extend NYM to allow more complex controller concepts. E.g. I could absolutely imagine expanding NYM to specify multiple verification keys, and for authorizing writes you would need a N of M signature. These rules would be added to the Indy code, and they can also be \"rendered\" in the resolved DID document that is constructed from the NYM. It would be interesting to try to model that on an upcoming call.\n- @drummondreed has an open PR on DID Core that will add an appendix about \"Multiple DID Controllers\": https://github.com/w3c/did-core/pull/460","username":"peacekeeper","ts":"2021-01-13T12:03:19.755Z"}
{"msg":"Just a note, based on how the controller property is defined, _The value of the controller property MUST be a string or an ordered set of strings that conform to the rules in Section ¬ß 3.1 DID Syntax._ We wouldn't be able to specify in the DID Document the threshold of number of signatures needed by the controller I believe if we go with a programatic multisig solution. We would need to modify the normative statement to allow the controller property to be an INFRA MAP (JSON object) to do this, but I can't think of a reason where a DID Document would need to include this info. (It only needs to be included in the underlying txn data that Indy stores and uses to verify updates later on). Additionally, we could easily solve this as well using an extension property that would just need to be defined and registered.\n\nTl;DR I think there may be a data representation problem if we want to use the DID Document to express the N of M threshold using only core properties. However, I'm not certain we need that and if it so happens that it is needed this can be solved with a DID Spec Registries extension property.","username":"kdenhartog","ts":"2021-01-14T04:46:57.404Z"}
{"msg":"Just a note, based on how the controller property is defined, _The value of the controller property MUST be a string or an ordered set of strings that conform to the rules in Section ¬ß 3.1 DID Syntax._ We wouldn't be able to specify in the DID Document the threshold of number of signatures needed by the controller I believe if we go with a programatic multisig solution. I can't think of a reason where a DID Document would need to include this info. (It only needs to be included in the underlying txn data that Indy stores and uses to verify updates later on). Also this assumes that we want to levarage the controller property to handle this. Even so, we could easily solve this (it's probably the better path to handle this at this point in the spec process) as well using an extension property that would just need to be defined and registered.\n\nTl;DR I think there may be a data representation problem if we want to use the DID Document to express the N of M threshold using only core properties. However, I'm not certain we need that and if it so happens that it is needed this can be solved with a DID Spec Registries extension property.","username":"kdenhartog","ts":"2021-01-14T04:46:57.404Z"}
{"msg":"@kdenhartog : You are not wrong about the verbiage, but I think you are drawing a conclusion that is unnecessary. Section 5.2 of the spec says what a DID controller is. It then says that a DID doc MAY have a `controller` property; if it does, the property must conform to the rules you articulated.\n\nThe escape hatch here is that we don't have to use the `controller` property to express control of the DID document. If control is not expressible using a simple construct, we can invent a fancy one. That is allowed by the spec.","username":"danielhardman","ts":"2021-01-14T17:26:41.493Z"}
{"msg":"Yup agree with that assessment, rereading my original post, it sounds a bit more dire than I actually intended.","username":"kdenhartog","ts":"2021-01-14T22:09:00.044Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for Tuesday January 19 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-01-19\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n* Details on ATTRIB transformations to DIDDocs\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2021-01-19T03:17:19.377Z"}
{"msg":"I think I might need to skip todays meeting :/","username":"paul.bastian","ts":"2021-01-19T11:39:06.942Z"}
{"msg":"Hmmm...Drummond as well.","username":"swcurran","ts":"2021-01-19T14:39:25.289Z"}
{"msg":"Three thoughts for today:\n\n1. No one showed up for the meeting last week.  What do we want to do -- keep going as is, change the meeting time, stop the effort?\n2. I think we should consider defining the DIDDoc going forward as a full, single ATTRIB that has the NYM information injected in a standard way. Handling of a \"no ATTRIB NYM\" is still required, as is an \"endpoint only ATTRIB\" for backwards compatibility.  We can leave open in the future extending NYM handling.\n3. We should start to talk about other Indy objects (Schema, Claim Def) as DIDs, where the object is the subject and resource.  What does that look like as a standard DID?  Can we put these objects on non-Indy ledgers?\n\nLet me know what you want to do about the meeting tomorrow.  @paul.bastian @danielhardman @peacekeeper @drummondreed @ArturPhilipp \n\nThe first item isn't for you @kdenhartog , since the meeting time is no fun for you, but interested in any thoughts you have on the 2 and 3 items.","username":"swcurran","ts":"2021-01-25T16:23:02.124Z"}
{"msg":"@swcurran Unfortunately the huge rush to digital vaccination credentials has forced me to attend another meeting in that time slot, and that meeting is likely to last at least another month. However since I don't think the DND/DNR cross-registration work is part of a V1 release (we've agreed it would be a separate spec anyway), I'm not essential to getting the V1 spec done. I am still willing to contribute to the spec as that's helpful, but I think it's the rest of the names in your group that need to be driving it.","username":"drummondreed","ts":"2021-01-25T16:47:50.056Z"}
{"msg":"> I think we should consider defining the DIDDoc going forward as a full, single ATTRIB that has the NYM information injected in a standard way.\nThis remains my preference as well in order to reduce number of transactions and keep a single instance of an indy ledger more scalable. I agree that keeping backwards compatibility should remain required as well.\n\n> What does that look like as a standard DID?\nWe'd want to register all of the properties in the did spec registry and then the DID Document would effectively be the object with an additional id property that is a DID.\n\n>Can we put these objects on non-Indy ledgers?\nTheoretically yes, but it will be up to the other methods/implementations to actually support this. As an example, you could use did:schema / did:web as is to do this, but getting sidetree to support it would be far more difficult because of the expectation that the DID Document data is strongly typed and you'd have to work with the sidetree group to support the new properties. Some implementations would likely be easier to use than others. E.g. Orie's implementation does a good job of making the data model extensible. The ION reference implementation wanted to strongly type and put limitations on the properties in order to keep storage limits within reason at scale, so it may be more difficult for that.","username":"kdenhartog","ts":"2021-01-25T22:35:06.514Z"}
{"msg":"> I think we should consider defining the DIDDoc going forward as a full, single ATTRIB that has the NYM information injected in a standard way.\nThis remains my preference as well in order to reduce number of transactions and keep a single instance of an indy ledger more scalable. We can obviously still horizontally scale as needed, but thinking vertical scaling will remain important in the future and keeping the number of transactions down is beneficial. Going back to one of the original points @tomislav brought up in the google doc as well, we'll want to consider how the integration will occur between the nym key and references to it in the attrib txn. With that in mind I agree that keeping backwards compatibility should remain required still. \n\n> What does that look like as a standard DID?\nWe'd want to register all of the properties in the did spec registry and then the DID Document would effectively be the object with an additional id property that is a DID.\n\n>Can we put these objects on non-Indy ledgers?\nTheoretically yes, but it will be up to the other methods/implementations to actually support this. As an example, you could use did:schema / did:web as is to do this, but getting sidetree to support it would be far more difficult because of the expectation that the DID Document data is strongly typed and you'd have to work with the sidetree group to support the new properties. Some implementations would likely be easier to use than others. E.g. Orie's implementation does a good job of making the data model extensible. The ION reference implementation wanted to strongly type and put limitations on the properties in order to keep storage limits within reason at scale, so it may be more difficult for that.","username":"kdenhartog","ts":"2021-01-25T22:35:06.514Z"}
{"msg":"@kdenhartog -- your statement appears to be different from what (I/we understood) you proposed earlier.  AFAIK, the original proposal was that the ATTRIB would contain the entire DIDDoc.  What we are proposing is that the NYM be injected into the DIDDoc. That way there is never an inconsistency between the NYM/ATTRIB combination and the DIDDoc.  Either the NYM or the ATTRIB can be updated and the resulting DIDDoc is valid.\n\nWe're proposing a ledger component that assembles the DIDDoc from the NYM and ATTRIB components -- e.g. a new \"getDIDDoc\" endpoint/transaction.\n\nIn recent discussions, we've talked about having multiple ATTRIBs combine (if present) with the NYM to produce the DIDDoc, and what I'm suggesting above is that just the NYM and one ATTRIB combine to create the DIDDoc at any point in (ledger) time.","username":"swcurran","ts":"2021-01-26T00:36:56.713Z"}
{"msg":"I'm partiocipating again today","username":"paul.bastian","ts":"2021-01-26T14:32:13.583Z"}
{"msg":"I'm partiocipating again today, last weeks cancellation was an exception","username":"paul.bastian","ts":"2021-01-26T14:32:13.583Z"}
{"msg":"I don't think that my proposal is actually completely contrary. If you want to put in eveything in one ATTRIB you can still use the \"proprietary\" ATTRIB and not use the specified ATTRIBs. that might be easier but might be worse later on. still everyone has a decision","username":"paul.bastian","ts":"2021-01-26T14:52:16.386Z"}
{"msg":"Ahh I didn't understand you guys were proposing that again. I don't want to go that direction for the reason we discussed originally here unless it's addressed with the assembling aspects handle by the nodes. https://docs.google.com/document/d/1PE1KQHf41zlHbLm27UbgzJ7t7m2xr09JnjZWFT2ApwE/edit?disco=AAAAGtMcf_0\n\n>We're proposing a ledger component that assembles the DIDDoc from the NYM and ATTRIB components\nI'd prefer not handling it this way given it changes the read/write dynamics of the network which will impact vertical scaling of the ledger. I recognise that's not been a shared opinion with most others opting to prefer horizontal scaling (more networks). With this in mind, I think that if we can address the concerns in the google doc by handling this in the ledger component then I'd be alright with handling it this way.\n\n>In recent discussions, we've talked about having multiple ATTRIBs combine (if present) with the NYM to produce the DIDDoc, and what I'm suggesting above is that just the NYM and one ATTRIB combine to create the DIDDoc at any point in (ledger) time.\nThis makes sense as a good in between to me. Would you mind if we setup a special time for me to join the topic call for this sometime in the next week? Getting on a call to sort this all out would probably be the easiest way to handle it. I'd be fine just jumping on a call with you @swcurran to explain where I'm at and leave it to you to continue it going forward as well.","username":"kdenhartog","ts":"2021-01-26T23:36:55.994Z"}
{"msg":"@kdenhartog -- we think the issue you reference in the Google Doc is addressed because the ledger will construct and return the DIDDoc in a single transaction, and the NYM information will always be injected into the ATTRIB information to derive the controller of the DIDDoc.  The ATTRIB must not supply the information that will come from the NYM.\n\nRegards scaling -- today, the \"Get Revocation Interval\" transaction assembles data from a (possibly large) set of ledger entries, so it's not without precedent. \n\nThe question we raised at the call is whether the impact on the ledger would be larger if the DIDDoc was produced from the NYM plus 0 or 1 ATTRIB, where the ATTRIB is the full DIDDoc (minus the NYM component, of course) which would be quite large, or the NYM+0 to N ATTRIBS each containing minimal data that all combine to produce the DIDDoc.","username":"swcurran","ts":"2021-01-27T15:21:04.001Z"}
{"msg":"Has joined the channel.","username":"dbluhm","ts":"2021-01-29T17:44:11.680Z","type":"uj"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for Tuesday February 2 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-02-02\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n* More discussion on ATTRIB vs. ATTRIBs\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2021-02-01T16:56:10.878Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for Tuesday February 2 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-02-02\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n* More discussion on ATTRIB vs. ATTRIBs\n* keyAgreement\n* Recommendations in spec. for future work\n* Ledger objects as DIDs -- schema, claim_def, etc.\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2021-02-01T16:56:10.878Z"}
{"msg":"I propose for next meeting we write down an comparison between ATTRIB vs ATTRIBs to formalize discussion and clarify things. list of things to compare could start with: principles and design goals for Indy, architecture goals, impact on overall transactions, impact on average read transactions, impact on average write transactions, code complexity, code effort, impact on ledger size, future compatiblity, benefits and assumptions like expected variety of used diddoc features in the future","username":"paul.bastian","ts":"2021-02-01T21:38:58.005Z"}
{"msg":"anyone has some thoughts on what to compare, please add it here and we can have a discussion","username":"paul.bastian","ts":"2021-02-01T21:39:22.957Z"}
{"msg":"My opinion is that one ATTRIB is better than N because:\n\n- simpler design, and simpler for DID writers to understand e.g.  \"A NYM will generate this <show DIDDoc> -- your ATTRIB will be inserted here <show where ATTRIB goes> and must produce properly formatted JSON and a properly formatted DIDDoc\"\n- lower Indy Node code complexity (easy to assemble DIDDoc, fewer templates to manage, less maintenance for Indy Node)\n- fewer writes to the ledger (minor)\n- faster to read as their are fewer objects to read (minor)\n- Future compatibility is not a big issue for Indy Node as for the DID Spec and evolving it\n\nExpected use cases for the DIDs on Indy -- DIDComm endpoints, AnonCreds Objects, JSON-LD contexts (replacing Schema), Revocation Registries, possibly overlays.","username":"swcurran","ts":"2021-02-01T22:08:56.799Z"}
{"msg":"My opinion is that one ATTRIB is better than N because:\n\n- simpler design, and simpler for DID writers to understand e.g.  \"A NYM will generate this <show DIDDoc> -- your ATTRIB will be inserted here <show where ATTRIB goes> and must produce properly formatted JSON and a properly formatted DIDDoc\"\n- lower Indy Node code complexity (easy to assemble DIDDoc, fewer templates to manage, less maintenance for Indy Node)\n- fewer writes to the ledger (minor)\n- faster to read as their are fewer objects to read (minor)\n- Future compatibility is not as big an issue for Indy Node as it is for the DID Spec and evolving it\n\nExpected use cases for the DIDs on Indy -- DIDComm endpoints, AnonCreds Objects, JSON-LD contexts (replacing Schema), Revocation Registries, possibly overlays.","username":"swcurran","ts":"2021-02-01T22:08:56.799Z"}
{"msg":"I have a conflicting meeting so I won't be able to attend the meeting today but I wanted to say that we're paying attention to these efforts and we appreciate the time and thought that's already gone into this discussion. We've been asking ourselves a lot of the same questions that you've already addressed.","username":"dbluhm","ts":"2021-02-02T14:31:14.590Z"}
{"msg":"So we had a good meeting and settled the issue, this is the wrapup from hyperledger confluence:\n1. Agree on the NYM + 1 ATTRIB solution due to given motivation:\n- NYM shall comprise of all security-relevant data, ATTRIB is for user ‚Üí therefore ATTRIB can contain all the diddoc information that is not relevant to the security of the DID, the ledger must not need care too much\n- Indy resources\n- DIDdoc content might change too often in the near future and changing the Indy DID Method often might be too much trouble\n- It needs to be communicated that the DIDdoc is the users responsilbity and the ledger only gives limited guarantees!\n2. draft ideas:\n- in the first version: verkey is the only verificationMethod, therefore ATTRIB shall not use verificationMethod (for simplicity)\n- NYM generates context, id, verificationMethod\n- ATTRIB shall not have id or verificationMethod\n- contexts are merged with ATTRIB\n- everything else from ATTRIB should be merged\n\n3. ability to update the DID should be taken ONLY from NYM, not the DIDdoc\n- verkey as mandatory in NYM\n- more verkeys and/or n of m scheme could be added to NYM as optional in the future\n- controller inside NYM that references another Indy DID\n    https://docs.google.com/presentation/d/1v9lnozcngR8xFGsVYd2qtrPvNdA1LLEw2XZObnAUhzU\n\n4. in the future we will need other signature schemes\n- NIST curves are not preferred\n-post-quantum security will get relevant therefore this needs to be done anyway\n\n5. in the future our verificationMethod might define a \"type\" referenced in the DID registries and we would include a context, this might become necessary when more complicated rules get put into NYM","username":"paul.bastian","ts":"2021-02-02T16:05:53.589Z"}
{"msg":"@paul.bastian -- regards the W3C CCG Mailing list (here: https://lists.w3.org/Archives/Public/public-credentials/) and the specific discussion about Claim Defs (starts here: https://lists.w3.org/Archives/Public/public-credentials/2021Feb/0010.html).","username":"swcurran","ts":"2021-02-02T18:37:05.294Z"}
{"msg":"Has joined the channel.","username":"RazaDen","ts":"2021-02-03T19:55:55.174Z","type":"uj"}
{"msg":"Has joined the channel.","username":"shaangill025","ts":"2021-02-03T20:00:45.188Z","type":"uj"}
{"msg":"Has joined the channel.","username":"shaanjot.gill","ts":"2021-02-03T20:12:08.216Z","type":"uj"}
{"msg":"Has joined the channel.","username":"etaleo","ts":"2021-02-08T09:03:59.070Z","type":"uj"}
{"msg":"Has joined the channel.","username":"enroll7","ts":"2021-02-08T09:04:47.627Z","type":"uj"}
{"msg":"There is a universal resolver interface for DIDs - is there an equivalent universal interface for resolving Verifiable Credential Schemas / Cred Defs?","username":"etaleo","ts":"2021-02-08T09:33:54.214Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for Tuesday February 2 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-02-02\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n* Proposal in hackmd doc on the format for DIDDoc ATTRIB and processing\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2021-02-09T02:52:28.316Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for Tuesday February 9 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-02-09\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n* Proposal in hackmd doc on the format for DIDDoc ATTRIB and processing\n* Starting discussion about other ledger objects as DIDs.\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2021-02-09T02:53:26.157Z"}
{"msg":"This weeks discussion got a little stuck on two topics:\nSee hackmd document: https://hackmd.io/2IKUPROnRXW57Lmal_SGaQ?both\n\n    Format of the ATTRIB document (`@context`, nymKeyAgreement, content)\n    Process for adding ATTRIB\n    Handling of existing \"endpoint\" ATTRIB\n\nis boolean variable a slippery slope?\nshall the diddoc ATTRIB only include raw DID json that is to be merged?\ndisussion on nymKeyAgreement\n\n    pro: you can rotate verkey and automatically rotate the X25519 key without touching the ATTRIB, rotating takes 1 less write transaction, saves some bytes on the ledger\n    contra: less generic solution, special case for special signature mechanism, unlikely design to use same privatekey for NYM protection and KeyAgreement,\n\nGET_DIDDOC request might be too troublesome as we cannot provide the indy state proof for client validation right now\n\n    rebuilding indy to include assembled diddoc might take some time\n    easier solution right now is the universal resolver driver concept ‚Üí client requests NYM + ATTRIB and uses reference implementation to assemble the DID doc\n\nPlease provide thoughts on these topics","username":"paul.bastian","ts":"2021-02-09T16:14:57.780Z"}
{"msg":"Question for @peacekeeper @danielhardman @brentzundel @drummondreed and others interested.\n\n@paul.bastian references (above) the question about having in the DIDDoc ATTRIB an optional flag \"nymKeyAgreement\".  Here is the rational for it and against it, in a little more detail than above:\n\nIf that flag is set in the DIDDoc ATTRIB, the NYM ED25519 verkey would be used to derive an X25519 key and a key agreement item would be added into the returned DIDDoc.  That gives us three options:\n\n- For those that don't need a key agreement key -- don't set the flag, don't include it in the \"content\" for the DIDDoc..\n- For those that want single purpose keys -- don't set the flag and explicitly put a key agreement section into the DIDDoc with a different key.\n- For those that want a key agreement key and are OK with using the verkey, set the flag. An added benefit is that when they update the NYM to rotate the verkey, the DIDDoc key agreement key would automagically also be updated.\n\nThe question is whether we want to make it easy to use the derived NYM verkey as the key agreement key or not?\n\n- Is it a bad practice such that we want to discourage that, and push the user to have a separate key agreement key?\n- Is it a sufficiently common practice that we want to provide an optional mechanism to enable that?\n\nOpinions?  It's not that big an issue, but we just wanted to get some others weighing in on the issue.","username":"swcurran","ts":"2021-02-09T21:54:30.691Z"}
{"msg":"Has joined the channel.","username":"brentzundel","ts":"2021-02-09T21:54:30.792Z","type":"uj"}
{"msg":"For next week, Sergey is going to talk about how state proofs are created in responding to ledger reads.  If we have a \"GET_DIDDOC\" transaction, is there a way to get a state proof against some or all of the returned results?  Related questions:\n\n- would it be good to have the ledger return the two needed ledger objects, with state proofs, and leave it to the client to assemble the DIDDoc?\n- Should the client do the querying to guarantee getting the right two objects and do the assembly? How would it trust the ledger to find the right version of the object?\n- How does the existing \"revocation interval\" transaction work?  It collects multiple ledger objects and returns a consolidated result.  \n\nInteresting stuff.  See you next week...","username":"swcurran","ts":"2021-02-09T22:02:43.679Z"}
{"msg":"If I may add an additional comment here. Sergey mentioned that in the Sovrin mainnet, new transactions are posted every 30 minutes or so (by stewards? don't remember exactly) so that when a client does a read on the ledger, he can query a single peer and get a state proof response that is \"recent\". I don't know for other people in the group, but to me the semantics and docs I have read are not clear on this. Couple of questions from the top of my head:\n- This periodic process of stewards posting transactions on the ledger needs to be somehow \"programmed\" by people who deploy their own indy ledger instance (?). I assume that to be the case.\n- In which of the available indy ledgers do we need to do this? I am pretty sure in Sovrin they do it in the Config ledger. Does that cover the reads on the other ledgers as well? Not sure if Merkle Patricia proofs of all ledgers converge to the same root.\n- Does the indy sdk actually make this \"freshness\" check? Is this configurable? For instance, if a state proof is older than 2, 10 or how many minutes, what happens?","username":"RazaDen","ts":"2021-02-09T22:43:48.983Z"}
{"msg":"@swcurran and @paul.bastian I continue to have my conflict on this time slot on Tuesdays and it continues to bum me to miss these meetings. I will try to catch up soon. I do need to get a simple Hyperledger Indy HIPE posted soon for the DID `resource` parameter that we want to add to the DID Spec Registries.","username":"drummondreed","ts":"2021-02-10T08:17:16.840Z"}
{"msg":"I don't have a strong opinion about the nymKeyAgreement flag; I can see both the pros and the cons, and I think the summary I heard sounds fair; whichever way that goes seems fine to me.","username":"danielhardman","ts":"2021-02-10T15:49:40.694Z"}
{"msg":"The question about state proofs is intriguing; I'm curious to hear where an expert like Sergey ends up.","username":"danielhardman","ts":"2021-02-10T15:50:17.607Z"}
{"msg":"@danielhardman we had Sergey on the call last time and he brought up the topic","username":"paul.bastian","ts":"2021-02-11T13:30:14.986Z"}
{"msg":"@swcurran I'm ok to switch the timeslot if that serves moire people. however please not too late for european times","username":"paul.bastian","ts":"2021-02-11T13:31:34.948Z"}
{"msg":"you have two options for verify your read transaction: \nA-query F+1 nodes, therefore you can be sure but it requires a lot of traffic.\nB-query 1 node and rely mon the BLS-multisignature that signs the root hash of the particia merkle tree aka state proof, this state proof covers every transaction on the ledger and is multisinged by all nodes with a timestamp in regular intervals, therefore you also have freshness. this stateproof however only affects NYMs and ATTRIBs and not an newly assembled DIDdoc by the ledger. therefore you would need to regularly assemble all the DIDdocs and include them in the state proof","username":"paul.bastian","ts":"2021-02-11T13:37:26.395Z"}
{"msg":"So a state proof is a point in time proof about the transactions on the ledger.\n\nHow does that translate into saying the data that I received for a transaction is valid?  Is it that there is a proof with the result of calling the read that the returned result is a transaction that is part of the tree?","username":"swcurran","ts":"2021-02-11T20:46:30.244Z"}
{"msg":"the (hash of) transaction is a leaf in the tree, the ledger can provide all the other hashes that let you go the path to the root, the root hash is multisigned by all the nodes with a fresh timestamp. that way you can can proof the validity of that transaction. how I understood sergey, the cumulative state of NYM and ATTRIB can be proven by this mechanism as is, but the assembled DIDdoc is something new that would need to be included in (a seperate?) patricia merkle tree","username":"paul.bastian","ts":"2021-02-12T08:50:37.324Z"}
{"msg":"If we assemble the DIDDoc on the client side by composing NYM and ATTRIB, then we don't need a new type of ledger transaction. The benefits of introducing a new type of ledger transaction are not so clear to me, quite frankly I see more issues than benefits. The semantics regarding the freshness if state proofs are a very crucial topic and further clarifications are warranted. First you need an external stimulus to frequently (how much?) update the state of the ledger so that state proofs are \"fresh\". This is what Stewards do in the Sovrin mainnet to my understanding every 30 minutes. Next, how does the indy-sdk currently handle this issue of \"freshness\" of state proofs? Is this 30 minute interval hardcoded in? Is it configurable? State proofs are secure in practice if all these details are fleshed out and specified in detail, otherwise the safest approach is to go with f+1 matching replies to a query.","username":"RazaDen","ts":"2021-02-12T11:04:50.084Z"}
{"msg":"If we assemble the DIDDoc on the client side by composing NYM and ATTRIB, then we don't need a new type of ledger transaction. The benefits of introducing a new type of ledger transaction are not so clear to me, quite frankly I see more issues than benefits. The semantics regarding the freshness of state proofs are a very crucial topic and further clarifications are warranted. First you need an external stimulus to frequently (how much?) update the state of the ledger so that state proofs are \"fresh\". This is what Stewards do in the Sovrin mainnet to my understanding every 30 minutes. Next, how does the indy-sdk currently handle this issue of \"freshness\" of state proofs? Is this 30 minute interval hardcoded in? Is it configurable? State proofs are secure in practice if all these details are fleshed out and specified in detail, otherwise the safest approach is to go with f+1 matching replies to a query.","username":"RazaDen","ts":"2021-02-12T11:04:50.084Z"}
{"msg":"If we assemble the DIDDoc on the client side by composing NYM and ATTRIB, then we don't need a new type of ledger transaction. The benefits of introducing a new type of ledger transaction are not so clear to me, quite frankly I see more issues than benefits. The semantics regarding the freshness of state proofs are a very crucial topic and further clarifications are warranted. First you need an external stimulus to frequently (how often?) update the state of the ledger so that state proofs are \"fresh\". This is what Stewards do in the Sovrin mainnet to my understanding every 30 minutes. Next, how does the indy-sdk currently handle this issue of \"freshness\" of state proofs? Is this 30 minute interval hardcoded in? Is it configurable? State proofs are secure in practice if all these details are fleshed out and specified in detail, otherwise the safest approach is to go with f+1 matching replies to a query.","username":"RazaDen","ts":"2021-02-12T11:04:50.084Z"}
{"msg":"So when you do a read transactions and get the state proof back, you get the multi-signed root hash and the path the transaction of interest, so you can validate the leaf's contribution to the root hash.\n\nSo to get the same validity for  \"GET_DIDDOC\", we would have have the data for both contributor leaves.  Is that right?","username":"swcurran","ts":"2021-02-12T17:56:11.053Z"}
{"msg":"On your first point, yes roughly that's how state proofs work. Of course, the nitty gritty details depend on how you organize the storage of peers or the ledger as a whole. To give you an example, Ethereum has multiple Merkle-Patricia tries: 1) the transaction/blockchain trie, 2) the \"state\" trie, which contains the key-value stores of all deployed smart contracts and can be used for appropriate \"smart contract state proofs\" and, 3) the \"receipt\" trie, which is basically where they store the result of transaction executions. I believe that Indy has only one Merkle Patricia trie per sub-ledger, however this is not really clear.\n\nTo your second point, the most straightforward way to currently implement the \"GET_DIDDOC\" operation would be to construct a state proof that contains the most fresh \"NYM\" and \"ATTRIB\" of a specific DID, so pretty much what you mentioned yes. Whether we have one path in the tree for the NYM and a separate path for the ATTRIB, or if we unify them in a single sub-tree proof, that's just a minor detail, as long as they both refer to the *same* and *most fresh* root hash.\n\nThe discussion about the semantics of *freshness* and how they are enforced/configured (if at all) has to be clearly fleshed out.","username":"RazaDen","ts":"2021-02-13T09:39:09.651Z"}
{"msg":"Has joined the channel.","username":"JamesEbert","ts":"2021-02-15T19:41:46.217Z","type":"uj"}
{"msg":"@sergey.khoroshavin -- are you able to make the Indy DID Method call tomorrow/Tuesday @ 7AM Pacific / 15:00 UTC / 16:00 CET.  Per our call last week, hoping you can go over the state proofs on Indy, and the best approach to a client getting the DIDDoc, the pair of transactions or both, and how that relates to the state proof.\n\nI notice the reference here (https://github.com/hyperledger/indy-node/blob/master/docs/source/requests.md#get_revoc_reg_delta) to state proofs and the responsibility of the client for a similar \"multi-ledger objects\" consolidation transaction on Indy.  Basically, it says \"the client is responsible for checking the returned consolidated returned\", which is completely impractical for the use case.","username":"swcurran","ts":"2021-02-15T20:05:54.831Z"}
{"msg":"Has joined the channel.","username":"sergey.khoroshavin","ts":"2021-02-15T20:05:54.940Z","type":"uj"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for Tuesday February 16 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-02-16\nZoom Info: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n* Proposal in hackmd doc on the format for DIDDoc ATTRIB and processing\n* Starting discussion about other ledger objects as DIDs.\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2021-02-15T20:20:02.067Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for Tuesday February 16 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-02-16\nZoom Info: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n* Can we do the GET_DIDDOC transaction?\n* ATTRIB DIDDoc raw data format\n* How to represent Indy Ledger Objects as DIDs?\n\nPlease join in and help with this collaborative effort.","username":"swcurran","ts":"2021-02-15T20:20:56.003Z"}
{"msg":"@swcurran I am able to come to tomorrow's meeting! My conflicting meeting is cancelled for tomorrow. And it looks like good timing as I can address your third agenda item (\"How to represent Indy Ledger Objects as DIDs?\"). We need an Indy HIPE created quickly in order to get the \"resource\" parameter listed in the DID Spec Registries. I will strive to have the necessary content ready.","username":"drummondreed","ts":"2021-02-15T20:24:36.302Z"}
{"msg":"@swcurran Good news! I am able to come to tomorrow's meeting. My other conflicting meeting is cancelled for tomorrow. And it looks like good timing as I can address your third agenda item (\"How to represent Indy Ledger Objects as DIDs?\"). We need an Indy HIPE created quickly in order to get the \"resource\" parameter listed in the DID Spec Registries. I will strive to have the necessary content ready.","username":"drummondreed","ts":"2021-02-15T20:24:36.302Z"}
{"msg":"Awesome -- that would be great.  Thanks, Drummond.","username":"swcurran","ts":"2021-02-15T20:25:21.252Z"}
{"msg":"I can probably come to part of tomorrow's meeting. It looks like I have a meeting right before (that sometimes bleeds over a bit), and a meeting at the 30-min mark as well (that sometimes gets cancelled). So I'll try to come for what I can. Looking forward to reading Drummond's HIPE content.","username":"danielhardman","ts":"2021-02-15T22:29:04.523Z"}
{"msg":"@danielhardman et al: even though we didn't get to it on today's call, please do review this very short spec for the DID \"resource\" parameter. It's very simple and straightforward because it only defines the parameter to add to a DID to request that it return a digital resource directly from a verifiable data registry. The harder part (though hopefully also relatively straightforward) is how the DID method specification will specify that an Indy ledger returns the requested digital resource‚Äîwhich can be absolutely any file that the VDR can return (schema, cred def, revocation registry, etc.)","username":"drummondreed","ts":"2021-02-17T03:47:41.315Z"}
{"msg":"Here's the link to the Google doc: https://docs.google.com/document/d/1f99z4Bf8F-DA8EbkNjInVQv2ncJGPwF_Dp7I7Mfyhqs/edit?usp=sharing","username":"drummondreed","ts":"2021-02-17T03:48:02.221Z"}
{"msg":"Left some comments/suggestions. Looks good.","username":"danielhardman","ts":"2021-02-17T21:14:41.169Z"}
{"msg":"Has joined the channel.","username":"Tanvi","ts":"2021-02-20T14:34:39.445Z","type":"uj"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for Tuesday February 23 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-02-23\nZoom Info: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n- Revisiting/Finalizing points from last two meetings (state proofs, agreement keys, DIDDoc content)\n- Resolving ledger objects as DIDs?","username":"swcurran","ts":"2021-02-22T15:18:09.229Z"}
{"msg":"Hey Folks,  I'm writing up in the hackmd document what we discussed last week, and I really wonder if it would not be easier to add a new item to the NYM data structure that is the planned ATTRIB, so that we can eliminate the work in both finding the right combination of transactions, trusting the ledger to return the right combination, and handling multiple state proofs.  If we add an optional data item to the NYM transaction, all the DIDDoc data is in one place.  There is still an assembly task, but the effort is lighter:  For example:\n\ne.g we add `diddocContent` to the `data` structure:\n\n``` json\n        \"data\": {\n            \"ver\": 1,\n            \"dest\":\"GEzcdDLhCpGCYRHW82kjHd\",\n            \"verkey\":\"~HmUWn928bnFT6Ephf65YXv\",\n            \"role\":101,\n             \"diddocContent\" : { ... }\n        },\n```","username":"swcurran","ts":"2021-02-22T16:33:51.389Z"}
{"msg":"Hey Folks,  I'm writing up in the hackmd document what we discussed last week, and I really wonder if it would not be easier to add a new item to the NYM data structure that is the planned ATTRIB, so that we can eliminate the work in both finding the right combination of transactions, trusting the ledger to return the right combination, and handling multiple state proofs.  If we add an optional data item to the NYM transaction, all the DIDDoc data is in one place.  There is still an assembly task, but the effort is lighter:  For example:\n\ne.g we add `diddocContent` to the `data` structure:\n\n``` json\n        \"data\": {\n            \"ver\": 1,\n            \"dest\":\"GEzcdDLhCpGCYRHW82kjHd\",\n            \"verkey\":\"~HmUWn928bnFT6Ephf65YXv\",\n            \"role\":101,\n            \"diddocContent\" : { ... }\n        },\n```","username":"swcurran","ts":"2021-02-22T16:33:51.389Z"}
{"msg":"With that, there is just one transaction returned to get a DIDDoc and we're only extending existing functionality.\n\nThe only caveat I see is that we might would have to handle the existing \"endpoint\" handling that is in common use.","username":"swcurran","ts":"2021-02-22T16:36:17.375Z"}
{"msg":"@sergey.khoroshavin --- when you are back, love to hear your thoughts on this idea ^^^.  How does this compare in effort to, for example, a new read transaction (GET_DIDDOC) that finds and returns two related documents with two state proofs?\n\nThanks","username":"swcurran","ts":"2021-02-23T16:28:55.856Z"}
{"msg":"FYI -- Andrew did some code checking.  The state proof signature on a NYM is the id+role+verkey vs. on the whole transaction so it wouldn't work out of the box.  This would have to change to include the additional field, which in turn would probably introduce some canonicalization issues (or not....).","username":"swcurran","ts":"2021-02-23T18:40:39.652Z"}
{"msg":"Has joined the channel.","username":"thomas_kim","ts":"2021-02-24T05:01:17.326Z","type":"uj"}
{"msg":"one question came to my mind reading the DID-Core spec. Shall we limit the serialisiation formats in the DID Indy method to JSON/JSON-LD to guarantee better interoperability?","username":"paul.bastian","ts":"2021-02-25T16:37:41.081Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for Tuesday February 23 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-02-23\nZoom Info: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n- NYM update\n- Serialization Formats\n- Other ledger objects as DIDs","username":"swcurran","ts":"2021-03-02T02:11:07.746Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for Tuesday March 2 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-02-23\nZoom Info: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n- NYM update\n- Serialization Formats\n- Other ledger objects as DIDs","username":"swcurran","ts":"2021-03-02T02:11:07.746Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for Tuesday March 2 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-03-03\nZoom Info: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n- NYM update\n- Serialization Formats\n- Other ledger objects as DIDs","username":"swcurran","ts":"2021-03-02T02:11:07.746Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for Tuesday March 2 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-03-02\nZoom Info: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n- NYM update\n- Serialization Formats\n- Other ledger objects as DIDs","username":"swcurran","ts":"2021-03-02T02:11:07.746Z"}
{"msg":"@drummondreed @brentzundel -- we'd like to understand more about your \"resource\" DID resolution query parameter and how it relates to the discussion about referencing non-DID/NYM ledger objects on Indy.  Do you have a time that we could meet on that?  We'd like to do it on a morning so that our European participants can make it.  Can you propose some times?","username":"swcurran","ts":"2021-03-03T00:17:29.239Z"}
{"msg":"All -- at our meeting today, the folks present were happy with approaches, but want to confirm a couple of decisions with others that couldn't make it -- @kdenhartog @peacekeeper @danielhardman @sergey.khoroshavin @esplinr  @andrew.whitehead \n\n- We suggest adding extra DIDDoc data in an optional field in the NYM (`\"diddocContent\"`) itself, and to not use ATTRIBs at all in the assembly of a DIDDoc associated with a NYM.\n- We think that DIDDoc assembly for reads should be done by the client, not by the ledger so as to not affect the handling of the state proof coming back for the NYM ledger object.\n- We think that the ledger should check for a valid DIDDoc on NYM write, which means the ledger will be doing some assembly and verification. \n    - This is a security tradeoff -- a risk of a vulnerability in the assembly code affecting the nodes of the ledger vs. not writing an invalid DIDDoc to the ledger.\n- Of the three DIDDoc representations in the DID Core spec, we plan to only support JSON-LD.  Does that make sense?\n- We suggest dropping the idea of a flag to include the derived key agreement key in the DIDDoc and instead requiring the writer derive and insert the key themselves if they want to.\n\nFeedback on these issues would be greatly appreciated.","username":"swcurran","ts":"2021-03-03T00:39:30.884Z"}
{"msg":"All -- at our meeting today, the folks present were happy with approaches, but want to confirm a couple of decisions with others that couldn't make it -- @kdenhartog @peacekeeper @danielhardman @sergey.khoroshavin @esplinr  @andrew.whitehead \n\n- We suggest adding extra DIDDoc data in an optional field in the NYM (`\"diddocContent\"`) itself, and to not use ATTRIBs at all in the assembly of a DIDDoc associated with a NYM.\n- We think that DIDDoc assembly for reads should be done by the client, not by the ledger so as to not affect the handling of the state proof coming back for the NYM ledger object.\n- We think that the ledger should check for a valid DIDDoc on NYM write, which means the ledger will be doing some assembly and verification. \n>    - This is a security tradeoff -- a risk of a vulnerability in the assembly code affecting the nodes of the ledger vs. not writing an invalid DIDDoc to the ledger.\n- Of the three DIDDoc representations in the DID Core spec, we plan to only support JSON-LD.  Does that make sense?\n- We suggest dropping the idea of a flag to include the derived key agreement key in the DIDDoc and instead requiring the writer derive and insert the key themselves if they want to.\n\nFeedback on these issues would be greatly appreciated.","username":"swcurran","ts":"2021-03-03T00:39:30.884Z"}
{"msg":"Has joined the channel.","username":"esplinr","ts":"2021-03-03T00:39:31.006Z","type":"uj"}
{"msg":"I'm going to go ahead and update the HackMD document to reflect those changes -- especially the eliminate of an talk of using ATTRIBs.  Obviously we can undo those changes if the feedback is that those are bad ideas.","username":"swcurran","ts":"2021-03-03T00:42:01.977Z"}
{"msg":">We suggest adding extra DIDDoc data in an optional field in the NYM (\"diddocContent\") itself, and to not use ATTRIBs at all in the assembly of a DIDDoc associated with a NYM.\n\nI'm good with this approach. Biggest reason I didn't consider this approach originally was because we couldn't commit to modifying Indy Ledger to make that work. If others are willing to do it, I'd be in favor of it.\n\n>We think that DIDDoc assembly for reads should be done by the client, not by the ledger so as to not affect the handling of the state proof coming back for the NYM ledger object.\n\nI'm also happy with this but for other reasons. It will help focus the validator processing time on writes rather than reads which will be beneficial for scale.\n\n>We think that the ledger should check for a valid DIDDoc on NYM write, which means the ledger will be doing some assembly and verification.\n\nThis would be wise to be compliant with resolution consumption (and ultimately production later when it's emitting it to the client). It's a good way to prevent random JSON from ending up on there as well. Are you thinking these will be JSON compliant data or JSON-LD compliant? I'm thinking it will be harder to support extensions with JSON (we'll have to make an update each time we want to allow a new extension property I think), but not unreasonable.\n\n> Of the three DIDDoc representations in the DID Core spec, we plan to only support JSON-LD. Does that make sense?\nThis answers my last question. I'm definitely in favor of this as it will help in processing extensions as well.\n\n> We suggest dropping the idea of a flag to include the derived key agreement key in the DIDDoc and instead requiring the writer derive and insert the key themselves if they want to.\n\nAgree with this as well. It will hopefully lead to better practices around separating keys as well and avoid security vulnerabilities (like with RSA reusing a private key with DH / old signature algorithm in a way that is known to reveal the private key)","username":"kdenhartog","ts":"2021-03-03T01:21:30.392Z"}
{"msg":"TL;DR I'm on board with it all","username":"kdenhartog","ts":"2021-03-03T01:21:40.778Z"}
{"msg":"I agree with all of that as well, barring implementation issues.\n> - We think that the ledger should check for a valid DIDDoc on NYM write, which means the ledger will be doing some assembly and verification.\nIs assembly actually necessary to check the schema of the submitted document?","username":"andrew.whitehead","ts":"2021-03-03T01:24:23.455Z"}
{"msg":"Shouldn't be if you're using JSON-LD properly","username":"kdenhartog","ts":"2021-03-03T01:25:09.590Z"}
{"msg":"You should be able to just feed it into a JSON-LD expand then store then recall compact and store the result of that","username":"kdenhartog","ts":"2021-03-03T01:27:44.325Z"}
{"msg":"This should drop all the unlisted properties and verify the jsonld is all properly formatted","username":"kdenhartog","ts":"2021-03-03T01:28:05.608Z"}
{"msg":"Considerations should be taken around documentLoaders though. They can use a remote resolution of unknown contexts but for security reasons I'd suggest disabling remote resolution and then updating a local context document loader to support the new contexts registered as extensions","username":"kdenhartog","ts":"2021-03-03T01:29:27.901Z"}
{"msg":"This prevents semantic term overriding if the terms aren't protected properly in the context","username":"kdenhartog","ts":"2021-03-03T01:30:06.932Z"}
{"msg":"Has joined the channel.","username":"george.aristy","ts":"2021-03-03T20:07:38.160Z","type":"uj"}
{"msg":"my little concern with checking snytax&semantic of the \"didDocContent\", that parsing  is difficult (even with JSON), error-prone and has often been a door for vulnerabilities. as the ledger is the source of trust, it is very vulnerable and if there is a bug, that leads to RCE, all nodes are affected, as everyone is running the same software. I know we are already parsing all the transactions, but parsing the known is safer than parsing arbitrary data. If there is any validation of the \"didDocContent\" it must be very careful are limited","username":"paul.bastian","ts":"2021-03-05T14:01:22.729Z"}
{"msg":"also I'm not able to attend next weeks meeting as I have conflict on that tuesday @swcurran","username":"paul.bastian","ts":"2021-03-05T14:02:15.338Z"}
{"msg":"I'm okay with most of this.\n\nI don't feel comfortable with JSON-LD DID docs only, though. The case for JSON-LD in credentials is a good one, but I think the case for JSON-LD in DID docs is NOT NEARLY as good. I would like to talk about that more. However, I can't show up to one of these meetings to talk about it; I have a conflict with this meeting block every single week. Any chance we could discuss in an Indy implementers call or something?","username":"danielhardman","ts":"2021-03-08T16:34:00.647Z"}
{"msg":"I assume you would propose JSON as the representation?","username":"swcurran","ts":"2021-03-08T16:37:53.728Z"}
{"msg":"yes","username":"danielhardman","ts":"2021-03-08T16:38:02.632Z"}
{"msg":"Didn't think CBOR :-).","username":"swcurran","ts":"2021-03-08T16:38:14.202Z"}
{"msg":"Interesting -- I thought that would be pretty uncontroversial.  We need to find a new time for the meeting.  I guess we'll try a doodle.  I haven't ever done that, but will try it.","username":"swcurran","ts":"2021-03-08T16:39:25.165Z"}
{"msg":"Plan tomorrow if for Dan G and I to work on getting the current doc into SpecUp in the did-indy-method repo, so we transition to github.","username":"swcurran","ts":"2021-03-08T16:41:01.265Z"}
{"msg":"I'm not dead set against JSON-LD. I could totally go that way, so this is not me putting up a stink about something I'm opposed to. But I would like to enumerate the pros and cons and make sure everybody buys off on the tradeoffs. I don't think it's obvious at all.","username":"danielhardman","ts":"2021-03-08T16:41:22.976Z"}
{"msg":"Then, hopefully we will have a new time next week.   I've also asked @drummondreed and @brentzundel to prepare a talk about resources and how we plan to access other Indy objects on the ledger at a time that they can make.","username":"swcurran","ts":"2021-03-08T16:41:56.986Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for Tuesday March 9 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-03-09\nZoom Info: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:","username":"swcurran","ts":"2021-03-09T02:09:59.299Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for Tuesday March 9 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-03-09\nZoom Info: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n* Working session to move the HackMD to SpecUp and into the https://github.com/hyperledger/indy-did-method repo","username":"swcurran","ts":"2021-03-09T02:09:59.299Z"}
{"msg":"At today's meeting, @sergey.khoroshavin was there and confirmed that the approach of adding an item (`diddocContent`) to the NYM is a reasonable approach.  So that's a lock, as are all but the JSON vs. JSON-LD representations of DIDDocs resolved from Indy.\n\nDan and I worked on the spec-up repo and are close to having a starting point.","username":"swcurran","ts":"2021-03-09T19:56:57.547Z"}
{"msg":"What would everyone think of having the meeting one hour earlier on Tuesday's -- 6AM Pacific instead of 7AM.  I know that would be rough on Drummond and I.  Anyone else on the west coast?  Would that work for others?\n\nWould that allow @drummondreed @danielhardman and others that can't make it now be able to attend.   I think we are almost done with the work, as there is not that much spec work to be done.","username":"swcurran","ts":"2021-03-09T19:59:06.486Z"}
{"msg":"I start work at 6 am Mountain time (5 am Pacific) each Tuesday and am consumed for several hours before I come up for air. So that time slot would not work for me. Maybe it would be simpler for me to try to write up my thoughts on this topic and share them in that form, instead of being hard to work with, schedule-wise.","username":"danielhardman","ts":"2021-03-10T07:32:21.194Z"}
{"msg":"Has joined the channel.","username":"HighBrow","ts":"2021-03-14T08:18:15.734Z","type":"uj"}
{"msg":"I took a pass at getting the HackMD document to included all that we've talked about so far.  Please take a look when you can.  We still don't have namespaced IDs for non-NYMs, and I think the DND/DNR parts may not be included.","username":"swcurran","ts":"2021-03-14T21:58:37.595Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for Tuesday March 16 at 7AM Pacific / 14:00 UTC / 15:00 CET.  *Note the time change in Europe!*\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-03-16\nZoom Info: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n* Accessing \"resources\" via DID resolution - Drummond\n* Serialization formats - use JSON?\n* A \"close to finished\" DID Method Specification?","username":"swcurran","ts":"2021-03-14T22:02:01.224Z"}
{"msg":"Note that @drummondreed will be able to make this meeting, so we will be talking about the plan to reference `resources` that are on the ledger.\n\nIf @danielhardman can make it, we'll also talk about his thought about using JSON, not JSON-LD representations of DIDDocs.","username":"swcurran","ts":"2021-03-14T22:03:21.656Z"}
{"msg":"@swcurran @brentzundel @paul.bastian @danielhardman et al: I finally finished a new rev on the DID Resource Parameter spec that now includes a lot more info from the email thread we had. It is still in the same Google doc: https://docs.google.com/document/d/1f99z4Bf8F-DA8EbkNjInVQv2ncJGPwF_Dp7I7Mfyhqs/edit?usp=sharing","username":"drummondreed","ts":"2021-03-15T07:20:19.161Z"}
{"msg":"Please do review/comment as you have time. I plan to attend tomorrow's meeting (provided it is still at 7AM Pacific DAYLIGHT Time, i.e., our new U.S. time setting) and look forward to reviewing it then.","username":"drummondreed","ts":"2021-03-15T07:21:22.888Z"}
{"msg":"All: I apologize for not being able to talk about my JSON-vs-JSON-LD concern in our meeting. I have a standing conflict that prevents my attendance. Here's a google doc that captures my thinking. I am not so emotionally or intellectually caught up in my own perspective here that I will balk if I am out-voted, but I would appreciate knowing that a thoughtful discussion about it occurred before a decision was made. https://docs.google.com/document/d/1Zcc3IluY23-cycamUQrBQbWN3FHEWOV5bVUdZn6a2zQ/edit?usp=sharing.\n\nI'll be curious to hear what you decide, and I promise I'll be cheerful either way.","username":"danielhardman","ts":"2021-03-17T00:50:52.643Z"}
{"msg":"Has joined the channel.","username":"rome-sandra","ts":"2021-03-17T10:15:03.233Z","type":"uj"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for Tuesday March 16 at 7AM Pacific / 14:00 UTC / 15:00 CET. Note the time change in Europe!\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-03-16\nZoom Info: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n- Identifiers with naming for non-NYM ledger objects - ideas for moving this forward\n- Serialization formats - use JSON?\n- If there is time: A \"close to finished\" DID Method Specification?","username":"swcurran","ts":"2021-03-22T18:53:44.497Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for Tuesday March 23 at 7AM Pacific / 14:00 UTC / 15:00 CET. Last week of the NA/Europe time change weirdness.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-03-23\nZoom Info: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n- Identifiers with naming for non-NYM ledger objects - ideas for moving this forward\n- Serialization formats - use JSON?\n- If there is time: A \"close to finished\" DID Method Specification?","username":"swcurran","ts":"2021-03-22T18:53:44.497Z"}
{"msg":"sry I forgot the damn time shift this week :(","username":"paul.bastian","ts":"2021-03-23T15:09:07.164Z"}
{"msg":"@danielhardman that's a pretty good argument for using JSON over JSON-LD in my opinion. I still lean towards using JSON LD because I've gotten used to using JSON-LD tooling now and like the extensiblity option it presents. With that in mind, I think there's strong merit to saying we're going to do things the JSON only way. The first one that I didn't see mentioned is the diversity of implementation. As Orie points out in the linked comment everyone is using JSON-LD and many of them are accidently being successful. I don't think that will always be the case as we extend did documents more though, so having the ability to extend using the registries and setting good patterns will be useful in my opinion. There was no reason to add all the abstraction gymnastics that we did with the ADM if no one actually uses it.\n\nSecond having a large community who is doing JSON only DIDs will be beneficial for catching interop issues early between the different data models.  If there's one thing I've learned over the time I've been involved it's that we all intend to get to an interoperable SSI world, but we often times get caught up on the details which make us take a bit longer. By having two camps that are doing things different ways, but still working towards interoperability sooner we'll end up with better more robust software faster in my opinion.\n\nThis is all to say, I tend to lean towards the JSON only route for the Indy DID method for the reasons above plus everything Daniel said and am happy to help navigate the hurdles we'll likely encounter along the way such as properly using the registry to handle extensibility in JSON. I'm sure the same can be said for others in the community as well.","username":"kdenhartog","ts":"2021-03-24T05:15:42.326Z"}
{"msg":"We had an interesting meeting talking through the ways to get namespacing into IDs for Schema and Claim Def.","username":"swcurran","ts":"2021-03-24T14:05:51.394Z"}
{"msg":"Write up coming soon.","username":"swcurran","ts":"2021-03-24T14:05:57.298Z"}
{"msg":"I would like to clarify something, just to test for a common mental model.\n\nI am NOT advocating that did:indy preclude JSON-LD DID documents. Rather, I am advocating that did:indy express no opinion whatsoever about JSON-LD. If someone wants to put a JSON-LD DID document into an indy ledger, they should be able to do so -- but the ledger should not be running JSON-LD validation logic to guarantee correctness. And if someone gets a DID document out of an Indy ledger and wants to interpet it as JSON-LD (e.g., because it contains a \"@context\" property at the root), that should be *totally fine*.\n\nThe opposite approach would be to announce that all DID docs on an Indy ledger MUST be JSON-LD, and to enforce that. This would mean that people attempting to use ordinary JSON would have to learn to comply, and that we'd have to have JSON-LD support in the ledger codebase.\n\nMy position is based on a desire to support a least common denominator approach that is more inclusive, NOT on a desire to make things harder for people wanting to use JSON-LD. And it is based on the observation that all JSON-LD is valid JSON, but not all valid JSON is JSON-LD. Therefore, having the ledger expect/enforce valid JSON is the most flexible (and the least work).","username":"danielhardman","ts":"2021-03-24T16:38:41.488Z"}
{"msg":"It might be reasonable to enforce that IF the DID document has a `@context` property, it references the `https://www.w3.org/ns/did/v1` context first (or only), so that the known properties have their expected meanings","username":"andrew.whitehead","ts":"2021-03-24T18:25:02.455Z"}
{"msg":"I‚Äôll give a read over the JSON-LD consumer rules to see if we can make that work. I like that idea, but I‚Äôm not sure how I‚Äôd expect edge cases to be handled for it. I‚Äôm curious how @peacekeeper would feel about that as well.","username":"kdenhartog","ts":"2021-03-29T07:35:10.193Z"}
{"msg":"Folks -- working through the references to SCHEMA and CLAIM_DEF objects.  I've confirmed that on the ledger and in an indy/aries client, the referenced objects are as I have documented in the hackmd document.  As such, applying the restrictions that I assumed, namespacing a SCHEMA is easy (change NYM-ID to DID) and a some of the CLAIM_DEF issue is the same. However, within a CLAIM_DEF ID is the SeqNo of the SCHEMA.  Since the SCHEMA may be on a different ledger, I propose that the CLAIM_DEF ID be changed from having a just the SeqNo to having either:\n\n- the SeqNo if the same ledger as the CLAIM_DEF\n- <DID Namespace>:SeqNo if on a different ledger.\n\nThat implies that a valid DID is \"did:indy:<namespace>:SeqNo\".  Is that a good idea?\n\nI would think the client would have to check if the <namespace-specific-identifier> was an integer, and if so, try to resolve it as a SeqNo, and if not an integer or resolution as a SeqNo failed, try it as a NYM.\n\nThoughts on this idea?   We can discuss in the morning if folks are available for the meeting.","username":"swcurran","ts":"2021-03-29T16:45:09.383Z"}
{"msg":"Folks -- working through the references to SCHEMA and CLAIM_DEF objects.  I've confirmed that on the ledger and in an indy/aries client, the referenced objects are as I have documented in the hackmd document.  As such, applying the restrictions that I assumed, namespacing a SCHEMA is easy (change NYM-ID to DID) and a some of the CLAIM_DEF issue is the same. However, within a CLAIM_DEF ID is the SeqNo of the SCHEMA.  Since the SCHEMA may be on a different ledger, I propose that the CLAIM_DEF ID be changed from having a just the SeqNo to having either:\n\n- the SeqNo if the same ledger as the CLAIM_DEF\n- <DID Namespace>:SeqNo if on a different ledger.\n\nThat implies that a valid DID is \"`did:indy:<namespace>:<SeqNo>`\".  Is that a good idea?\n\nI would think the client would have to check if the <namespace-specific-identifier> was an integer, and if so, try to resolve it as a SeqNo, and if not an integer or resolution as a SeqNo failed, try it as a NYM.\n\nThoughts on this idea?   We can discuss in the morning if folks are available for the meeting.","username":"swcurran","ts":"2021-03-29T16:45:09.383Z"}
{"msg":"Folks -- working through the references to SCHEMA and CLAIM_DEF objects.  I've confirmed that on the ledger and in an indy/aries client, the referenced objects are as I have documented in the hackmd document.  As such, applying the restrictions that I assumed, namespacing a SCHEMA is easy (change NYM-ID to DID). The same change to a CLAIM_DEF ID solves some of the issues. However, within a CLAIM_DEF ID is the SeqNo of the SCHEMA.  Since the SCHEMA may be on a different ledger, I propose that the CLAIM_DEF ID be changed from having a just the SeqNo to having either:\n\n- the SeqNo if the same ledger as the CLAIM_DEF, or\n- `<DID Namespace>:SeqNo` if on a different ledger.\n\nThat implies that a valid DID is \"`did:indy:<namespace>:<SeqNo>`\".  Is that a good idea?\n\nI would think a resolver with a DID would have to check if the <namespace-specific-identifier> was an integer, and if so, try to resolve it as a SeqNo, and if not an integer or resolution as a SeqNo failed, try it as a NYM. Alternatively, the ledger would take care of that.  Note that `did:indy:<namespace>:<SeqNo>?resource=true` would be a good way to get back a schema, claim_def, rev_reg_def and rev_reg_entry.\n\nThoughts on this idea?   We can discuss in the morning if folks are available for the meeting.","username":"swcurran","ts":"2021-03-29T16:45:09.383Z"}
{"msg":"Schemas are immutable, so they can be identified by a single sequence number, but a NYM can be updated. `did:indy:<namespace>:<SeqNo>` would be probably be a fixed-in-time version of the DID document, but `did:indy:{DID}?versionId=<SeqNo>` would be more standard for that","username":"andrew.whitehead","ts":"2021-03-29T17:05:07.785Z"}
{"msg":"Schemas are immutable, so they can be identified by a single sequence number, but a NYM can be updated. `did:indy:<namespace>:<SeqNo>` would be probably be a fixed-in-time version of the DID document, but `did:indy:{NS:ID}?versionId=<SeqNo>` would be more standard for that","username":"andrew.whitehead","ts":"2021-03-29T17:05:07.785Z"}
{"msg":"Schemas are immutable, so they can be identified by a single sequence number, but a NYM can be updated. `did:indy:<namespace>:<SeqNo>` would be probably be a fixed-in-time version of the DID document, but `did:indy:<NS>:<ID>?versionId=<SeqNo>` would be more standard for that","username":"andrew.whitehead","ts":"2021-03-29T17:05:07.785Z"}
{"msg":"I suppose `did:indy:<NS>:<ID>:<SeqNo>` could be supported as well","username":"andrew.whitehead","ts":"2021-03-29T17:09:30.178Z"}
{"msg":"Agreed on the sequence number approaches for NYMs.  My rational for general support is that if we have to embed the SCHEMA ID into the CLAIM_DEF ID, the easiest way is to use the a SeqNo form and to generally support it.","username":"swcurran","ts":"2021-03-29T17:52:45.510Z"}
{"msg":"Agreed on the sequence number approaches for NYMs.  My rational for general support is that if we have to embed the SCHEMA ID into the CLAIM_DEF ID, the easiest way is to use the a SeqNo form and if we are doing that, we might as well support it generally.","username":"swcurran","ts":"2021-03-29T17:52:45.510Z"}
{"msg":"Yes for sure, that's why I suggested the second format because `?versionId=` won't work in that context. Anything parsing the IDs will need updating anyway","username":"andrew.whitehead","ts":"2021-03-29T17:54:37.846Z"}
{"msg":"I'd much rather have both the seqno and the ID together than just the seqno","username":"andrew.whitehead","ts":"2021-03-29T17:55:36.898Z"}
{"msg":"It would make revocation registry IDs a bit ridiculously long","username":"andrew.whitehead","ts":"2021-03-29T17:57:23.860Z"}
{"msg":"We are assuming that a revocation registry MUST be on the same ledger as the CLAIM_DEF and hence, we don't plan on making any changes to those.\n\nThoughts about that?","username":"swcurran","ts":"2021-03-29T17:58:23.160Z"}
{"msg":"I think changes will be required anyway because the syntax currently supports a qualified DID there","username":"andrew.whitehead","ts":"2021-03-29T18:01:18.942Z"}
{"msg":"I'm okay with that restriction though","username":"andrew.whitehead","ts":"2021-03-29T18:02:01.008Z"}
{"msg":"did:indy Method Spec -- Next meeting: scheduled for Tuesday March 30 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-03-30\nZoom Info: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n- Identifiers with naming for non-NYM ledger objects\n- Serialization formats - use JSON?","username":"swcurran","ts":"2021-03-30T02:50:40.772Z"}
{"msg":"Last Minute Meeting Announcement:\n\ndid:indy Method Spec -- Next meeting: scheduled for Tuesday April 6 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-04-06\nZoom Info: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n- Identifiers with naming for non-NYM ledger objects\n- Serialization formats - use JSON?","username":"swcurran","ts":"2021-04-06T13:49:32.845Z"}
{"msg":"Has joined the channel.","username":"echsecutor","ts":"2021-04-07T12:05:46.354Z","type":"uj"}
{"msg":"To confirm is this only for the class of ledger object identifiers like the schema/claim def/rev objects?","username":"kdenhartog","ts":"2021-04-08T07:44:54.015Z"}
{"msg":"Also follow up does the sequence number get generated only by the node and after successful confirmation to the nodes?\n\nThis could make for some odd aspects around signing these objects.\n\nThe main one I'm thinking about is if the revocation object is structured as a VC like what RevocationList2020 does. In that case, if the ID property of the VC is generated only after successful addition of the id then I'm not sure how the signing of it would occur by the NYM who anchored it to the ledger because they can't sign over the ID until they know it, but they don't know it until it's successfully anchored.\n\nThis could be resolved by having the generation of the method specific identifier being generated by the submitter rather than by the node on successful submission. And of course there's the secondary discussion about changing the data model that would need to be considered.\n\nThe two alternatives I see are to \n\n1. not standardize the revocation object data model around a VC which is advantageous because then no code needs to change, but has the tradeoff of the data model being different for a variety of different ecosystems. This is how things are today.\n\n2. transform the revocation data model on indy today to a standard VC data model and build some sort of link data proof scheme that has standardized processing logic that a verifier can use to verify the revocation data matches the original signed object on the ledger which is provided in the proof object. This has the benefit of moving towards a common data model without needing changes to the ledger, but has the tradeoff in that it needs to basically include the entire signed ledger object in the proof of the VC.\n\nHave you thought anything about this part of the problem yet?","username":"kdenhartog","ts":"2021-04-08T07:58:10.699Z"}
{"msg":"We've not contemplated changing the revocation mechanism as yet.  The RL-2020 schema as is no good for a ZKP-based VC system, so it's not a target.  The idea of using a VC is a viable way to manage the revocation data. \n\nThe sequence number address is seen as an additional resolution mechanism to get at the raw transaction data vs. a DIDDoc.\n\nPer the latest meeting, we're thinking of altering the identifiers so as to not embed identifiers in identifiers.  Instead, we would use DID path-ing as an approach to identifying objects.","username":"swcurran","ts":"2021-04-08T14:52:25.331Z"}
{"msg":"Folks -- something to think about.  Talking to @andrew.whitehead and realized that a NYM controller adding the \"didDocContent\" element must be able to add new entries into the VerificationMethod array to do things like add a BLS can as an issuer of BBS+ VCs.  Thus, the bit we have about merging the `@context` entries from the `didDocContent` must also cover the other parts of the NYM-generated DIDDoc.\n>\nAndrew proposed an idea that instead of merging the `didDocContent` into the NYM-generated DIDDoc, that instead we require that the `didDocContent` must be a complete DIDDoc and that we check it for the inclusion of the NYM in the Verification Method.  So instead of\n\n- generate the template using the NYM data\n- add in the `didDocContent`\n- check for a valid JSON and DIDDoc\n\nWe instead:\n\n- use the `didDocContent` as the DIDDoc\n- check the NYM verification method is in the DIDDoc\n- check for valid JSON and DIDDoc. \n\nThoughts about that idea -- @paul.bastian @danielhardman @vinomaster @kdenhartog ?","username":"swcurran","ts":"2021-04-09T23:41:45.162Z"}
{"msg":"Folks -- something to think about.  Talking to @andrew.whitehead and realized that a NYM controller adding the \"didDocContent\" element must be able to add new entries into the VerificationMethod array to do things like add a BLS so the controller can be an issuer of BBS+ VCs.  Thus, the bit we have about merging the `@context` entries from the `didDocContent` must also cover the other parts of the NYM-generated DIDDoc.\n>\nAndrew proposed an idea that instead of merging the `didDocContent` into the NYM-generated DIDDoc, that instead we require that the `didDocContent` must be a complete DIDDoc and that we check it for the inclusion of the NYM in the Verification Method.  So instead of\n\n- generate the template using the NYM data\n- add in the `didDocContent`\n- check for a valid JSON and DIDDoc\n\nWe instead:\n\n- use the `didDocContent` as the DIDDoc\n- check the NYM verification method is in the DIDDoc\n- check for valid JSON and DIDDoc. \n\nThoughts about that idea -- @paul.bastian @danielhardman @vinomaster @kdenhartog ?","username":"swcurran","ts":"2021-04-09T23:41:45.162Z"}
{"msg":"Folks -- something to think about.  Talking to @andrew.whitehead and realized that a NYM controller adding the \"didDocContent\" element must be able to add new entries into the VerificationMethod array to do things like add a BLS so the controller can be an issuer of BBS+ VCs.  Thus, the bit we have about merging the `@context` entries from the `didDocContent` must also cover the other parts of the NYM-generated DIDDoc.\n>\nAndrew proposed an idea that instead of merging the `didDocContent` into the NYM-generated DIDDoc, that instead we require that the `didDocContent` must be a complete DIDDoc and that we check it for the inclusion of the NYM in the Verification Method.  So instead of\n\n- generate the template using the NYM data\n- add in the `didDocContent` if present\n- check for a valid JSON and DIDDoc\n\nWe instead:\n\n- use the `didDocContent` as the DIDDoc (if not present, use the NYM content and generate the minimal DIDDoc)\n- check the NYM verification method is in the DIDDoc\n- check for valid JSON and DIDDoc. \n\nThoughts about that idea -- @paul.bastian @danielhardman @vinomaster @kdenhartog ?","username":"swcurran","ts":"2021-04-09T23:41:45.162Z"}
{"msg":"Has joined the channel.","username":"vinomaster","ts":"2021-04-09T23:41:45.251Z","type":"uj"}
{"msg":"That makes sense to me.","username":"drummondreed","ts":"2021-04-11T00:02:23.239Z"}
{"msg":"I suppose the downside is more processing required by the ledger nodes. Also since DID docs are fairly free-form there should probably be a standard way for the network operators to 'evict' a NYM with PII or copyrighted data or whatever in it. Maybe that's already possible by just writing a new NYM transaction.","username":"andrew.whitehead","ts":"2021-04-11T00:11:12.710Z"}
{"msg":"Has joined the channel.","username":"hcsatish","ts":"2021-04-12T07:05:14.242Z","type":"uj"}
{"msg":"I think this is reasonable.","username":"danielhardman","ts":"2021-04-12T17:11:50.446Z"}
{"msg":"Last Minute Meeting Announcement:\n\ndid:indy Method Spec -- Next meeting: scheduled for Tuesday April 13 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-04-13\nZoom Info: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n- Merge DIDDoc from NYM+diddocContent or diddocContent only\n- Identifiers with naming for non-NYM ledger objects\n- Serialization formats - use JSON?\n- IIW Presentation","username":"swcurran","ts":"2021-04-13T02:06:45.879Z"}
{"msg":"Tomorrow Meeting:\n\ndid:indy Method Spec -- Next meeting: scheduled for Tuesday April 13 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-04-13\nZoom Info: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n- Merge DIDDoc from NYM+diddocContent or diddocContent only\n- Identifiers with naming for non-NYM ledger objects\n- Serialization formats - use JSON?\n- IIW Presentation","username":"swcurran","ts":"2021-04-13T02:06:45.879Z"}
{"msg":"Next Meeting:\n\ndid:indy Method Spec -- Next meeting: scheduled for Tuesday April 13 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-04-13\nZoom Info: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n- Merge DIDDoc from NYM+diddocContent or diddocContent only\n- Identifiers with naming for non-NYM ledger objects\n- Serialization formats - use JSON?\n- IIW Presentation","username":"swcurran","ts":"2021-04-13T02:06:45.879Z"}
{"msg":"Is there a draft Indy HIPE that explains the plan for the new Indy DID Method? That would help me understand the progress the group is making.","username":"esplinr","ts":"2021-04-15T21:02:31.421Z"}
{"msg":"No.  We have the new Indy DID method pretty much complete (combined hackmd document and the most recent meeting notes).  I'll be updating the hackmd document this weekend in prep for an IIW session on this.  In that I will try to summarize the list of things to be done in Indy\n\nFrom there, we'll be formalizing the spec in the indy-did-method repo and putting in a HIPE and GitHub issues as we try to round up some devs to work on this.","username":"swcurran","ts":"2021-04-15T22:28:23.811Z"}
{"msg":"Thanks. I'm really keen to see the HIPE so that I can figure out how best to help.","username":"esplinr","ts":"2021-04-15T22:35:21.714Z"}
{"msg":"Not sure what you expect would be different, but I'll let you know when it is there.","username":"swcurran","ts":"2021-04-15T22:42:53.597Z"}
{"msg":"I haven't been in the meetings, so I just want to confirm that my understanding matches the formal plan. Thank you.","username":"esplinr","ts":"2021-04-15T22:52:27.804Z"}
{"msg":"I think that makes sense but one to double check on one thing.\n\nFor these two,\n- check the NYM verification method is in the DIDDoc\n- check for valid JSON and DIDDoc.\n\nWhat happens if those checks fail?","username":"kdenhartog","ts":"2021-04-19T03:19:17.161Z"}
{"msg":"For check the NYM verification method is in the DID Document we could default back to minimal did document or we could drop the usage. I'm not sure which is better though.\n\nFor checking for valid JSON and DID Document are we thinking we'll do this up front (like we considered with json-ld)\n\nAlso since I mentioned JSON-LD, did we decide to go the route of JSON only/allowing `@context` but not being concerned with what to do if that value is invalid?","username":"kdenhartog","ts":"2021-04-19T03:21:24.347Z"}
{"msg":"The checks are made on write.  If the checks fail, the transaction is rejected.\n\nAt this point, we have not had the interested parties at the meetings to discuss the JSON vs. JSON-LD discussion.  My thought is that we can leave it to the NYM writer to decide, using the following process.  The base template generates a DIDDoc without the `@context`, which is the only bit of JSON-LD in the template.  If the `diddocContent` is present and has an `@context`, the DID Core context is added to the array.  If not, the format is left as JSON.   Would that be OK?","username":"swcurran","ts":"2021-04-19T14:42:55.248Z"}
{"msg":"Regards the checks for a valid DIDDoc.  My thought is to make that an \"implementation detail\" and have the developers that do the work propose the approach.","username":"swcurran","ts":"2021-04-19T14:43:48.329Z"}
{"msg":"I think that's alright, but we should get @peacekeeper opinion on how this aligns with production conformance rules. I think it's heading in the right direction, but we may want to make some slight modifications.","username":"kdenhartog","ts":"2021-04-20T17:11:23.321Z"}
{"msg":"For example what I'm thinking is it may make sense to say if and `@context` is included then the ledger will perform a check it's valid JSON-LD so that it can produce valid did documents. If not included it will be presumed the DID Document is JSON only.","username":"kdenhartog","ts":"2021-04-20T17:12:45.002Z"}
{"msg":"regarding registration of a genesis txn file to the indy-did-networks repo is we should make sure there's authorised updaters when a person files a registration for a new network and only those people can provide updates to that network. This is to make explicit who is responsible for the network. Often time we implicitly know someone is associated and allow them to update things related to what they work, but it's probably best to make them explicit for this type of thing.","username":"kdenhartog","ts":"2021-04-20T20:22:13.033Z"}
{"msg":"regarding registration of a genesis txn file to the indy-did-networks repo we should make sure there's authorised updaters when a person files a registration for a new network and only those people can provide updates to that network. This is to make explicit who is responsible for the network. Often time we implicitly know someone is associated with a project or network and allow them to update things related to what they work, but it's probably best to make them explicit for this type of thing even for the simplicity of knowing who to contact if something goes wrong. I'd think a github handle is good enough, but an optional email would be good as well.","username":"kdenhartog","ts":"2021-04-20T20:22:13.033Z"}
{"msg":"Related to indy-did-networks we may want to allow a resolver to be published rather than a genesis txn file and then other resolvers can proxy out to a different resolver which connects to the actual nodes. This would be useful when the network is private but there's a publicly available resolver.","username":"kdenhartog","ts":"2021-04-20T21:20:48.832Z"}
{"msg":"@danielhardman -- can you comment on the idea above about allowing the DID controller decide if the DIDDoc is JSON or JSON-LD?  Would that satisfy your concerns about what to use?","username":"swcurran","ts":"2021-04-26T17:51:26.379Z"}
{"msg":"It depends on whether the ledger enforces what the DID controller says. If the ledger has to enforce it, then the ledger gets a dependency on JSON-LD, and most of my concerns remain. If the ledger lets a DID controller assert whether the doc is JSON-LD or not, but makes no attempt to understand what that distinction means, then yes, most of my concerns are resolved.","username":"danielhardman","ts":"2021-04-26T17:55:03.764Z"}
{"msg":"I think we could leave that to the implementation. In the spec. we would like to indicate that some verification of the DIDDoc does is done prior to writing the NYM to the ledger. That it be valid JSON is relatively easy. That it is a valid DIDDoc is harder. I think it best to work with the devs to iteratively decide what could/should be done, including differences (if any) when the DIDDoc is JSON or JSON-LD.\n\nIs that reasonable, or should we be able to answer that now?","username":"swcurran","ts":"2021-04-26T18:07:35.548Z"}
{"msg":"Another community question for those that can't make the meetings (e.g. @danielhardman @drummondreed ) -- I'd like to remove any references to KERI and DND/DNR to a \"futures\" section and that we not address it in this first implementation of the Indy DID Method.  Any objections?","username":"swcurran","ts":"2021-04-26T18:14:36.723Z"}
{"msg":"The only thing we wanted to do with KERI was reserve a subset of the namespace for future work there (that is, a KERI DID that uses an Indy ledger as a witness lives at did:indy:keri...). As long as there's a statement somewhere that prevents people from making such future work impossible, I'm cheerful.","username":"danielhardman","ts":"2021-04-26T18:48:42.305Z"}
{"msg":"The only thing we wanted to do with KERI was reserve a subset of the namespace for future work there (that is, a KERI DID that uses an Indy ledger as a witness lives at did: indy: keri...). As long as there's a statement somewhere that prevents people from making such future work impossible, I'm cheerful.","username":"danielhardman","ts":"2021-04-26T18:48:42.305Z"}
{"msg":">I think we could leave that to the implementation. In the spec. we would like to indicate that some verification of the DIDDoc does is done prior to writing the NYM to the ledger. That it be valid JSON is relatively easy. That it is a valid DIDDoc is harder. I think it best to work with the devs to iteratively decide what could/should be done, including differences (if any) when the DIDDoc is JSON or JSON-LD. Is that reasonable, or should we be able to answer that now?\n\nAs long as the spec doesn't require a conformant impl of did:indy to validate JSON-LD, and as long as anyone can install a did:indy impl without incurring a dependency on JSON-LD libraries that have questionable security characteristics, I am cheerful. But if implementers decide that the ledger should be validating JSON-LD, I will express my strong dissatisfaction with the direction of the impl. I don't believe ledgers should be in the JSON-LD business, but that they SHOULD allow code above the ledger level to use JSON-LD without needing to know any of the details.","username":"danielhardman","ts":"2021-04-26T18:52:16.051Z"}
{"msg":"I agree. If we require full JSON-LD validation then either there would have to be a whitelist of supported contexts, which is probably unworkable, or the nodes would be required to fetch contexts on demand, which is bad for security and performance.","username":"andrew.whitehead","ts":"2021-04-26T18:55:37.968Z"}
{"msg":"@here -- I cannot make the meeting tomorrow morning.  @paul.bastian @vinomaster @sergey.khoroshavin @peacekeeper -- heads up.   I've doing some work on the hackmd document, but will not be able to attend the meeting.\n\nAFAIK -- of framing the spec is pretty much complete -- now it is down to formalizing the document and getting a backlog of development work to be done.  And getting that work done.","username":"swcurran","ts":"2021-04-26T18:59:19.970Z"}
{"msg":"So you are saying, no JSON-LD verification of the resulting DIDDoc, and I'm assuming that really also means no actual DIDDoc verification at all.\n> \nThat implies that the only content verification is that the basis of the document be a valid DIDDoc derived from the NYM values and that valid JSON be found in the `diddocContent` item. Other than that, anything goes, up to the controller, correct?","username":"swcurran","ts":"2021-04-26T21:18:55.339Z"}
{"msg":"I had thought that Indy NYMs were self-certifying, but I have recently heard that is a convention in the indy-sdk, but not required by the Indy ledger.  In the `did:indy` method, I had put in \"self-certifying\" and no one has objected.  Are we going to add self-certifying to the \"create\" operation for a NYM?","username":"swcurran","ts":"2021-04-26T21:20:49.225Z"}
{"msg":"Hmm, I suppose it's only self-certifying until you rotate the verkey. Even in indy-sdk you can override the DID at creation time","username":"andrew.whitehead","ts":"2021-04-26T21:44:12.384Z"}
{"msg":"It still self-certifying, because there is a chain of events back to creation.","username":"swcurran","ts":"2021-04-26T21:59:52.246Z"}
{"msg":"This would mean if you did rotate the key in the indy-sdk before creating it on the ledger, it would be rejected because there is no connection between the key and identifier.","username":"swcurran","ts":"2021-04-26T22:58:04.883Z"}
{"msg":"exactly my thoughts, you can trace back the self-certifyingness to the initial NYM transaction","username":"paul.bastian","ts":"2021-04-27T15:59:33.177Z"}
{"msg":"it general it feels way more comfortable and prevents DIDs with human-readable strings to a good amount, that beneficial from GDPR and phishing standpoint","username":"paul.bastian","ts":"2021-04-27T16:00:17.691Z"}
{"msg":"sry I couldn't make it either, I'm joining back in next week","username":"paul.bastian","ts":"2021-04-27T16:01:02.043Z"}
{"msg":"Strong +1 to requiring self-certifying. Doesn't prevent key rotation as long as there's an audit trail of evolution that maps back to a DID value derived from initial key.","username":"danielhardman","ts":"2021-04-30T17:00:42.284Z"}
{"msg":"Mime-type experts.  When an Indy object is returned, should there be a mime-type associated with it?  For example:  would this be appropriate? \n `application/json+indy+nym`?  Or perhaps just `application/json`?","username":"swcurran","ts":"2021-04-30T19:52:04.406Z"}
{"msg":"Mime-type experts.  When an Indy object is returned, should there be a mime-type associated with it?  For example:  would this be appropriate?   `application/json+indy+nym`?  Or perhaps just `application/json`?","username":"swcurran","ts":"2021-04-30T19:52:04.406Z"}
{"msg":"Next Meeting:\n\ndid:indy Method Spec -- Next meeting: scheduled for Tuesday May 4 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-05-04\nZoom Info: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n- Summary and review of close-to-done Spec.\n- Serialization formats - use JSON?\n- To Do's going forward","username":"swcurran","ts":"2021-05-03T18:44:58.510Z"}
{"msg":"Has joined the channel.","username":"dcspinho","ts":"2021-05-05T23:35:06.073Z","type":"uj"}
{"msg":"I've done another pass of the `did:indy` hackmd document -- \n\nAlso set up an agenda for another meeting this week to cover this questions and help wanted:\n\n- Help Wanted: Wording of the \"namespace\" section, with primary and secondary components.\n- Question: Current verkey change does NOT require signature of a new verkey. Should it?\n- Question: Will it be easy/possible to do \"versionTime\" query for a DID?\n- Question: Should a \"versionId\" query require the seqNo be for a NYM, or should it search back on ledger for value of NYM at that time¬†‚Äì same as \"versionTime\"?\n- Question: The new Claim Def DID URL does NOT include the ID of the Schema. That means that you can't have the same named Claim Def using two different Schema. Is that a problem?\n   - Nice to have: Analysis of Sovrin MainNet and Sovrin StagingNet to see how many instances of that exist.\n- Question: DID URL Handling for Rev Reg Entries\n   - Does not use a straight, request object/return object as with other objects. Instead, may use the RevRegDelta Txn.\n   - Good idea?\n- Help Wanted: Security Considerations sections\n- Help Wanted: Privacy Considerations sections\n\nHope folks can make it on Tuesday -- 7AM PT.","username":"swcurran","ts":"2021-05-09T20:50:45.229Z"}
{"msg":"I've done another pass of the `did:indy` hackmd document -- \n\nAlso set up an agenda for another meeting this week to cover this questions and help wanted:\n\n```\n- Help Wanted: Wording of the \"namespace\" section, with primary and secondary components.\n- Question: Current verkey change does NOT require signature of a new verkey. Should it?\n- Question: Will it be easy/possible to do \"versionTime\" query for a DID?\n- Question: Should a \"versionId\" query require the seqNo be for a NYM, or should it search back on ledger for value of NYM at that time¬†‚Äì same as \"versionTime\"?\n- Question: The new Claim Def DID URL does NOT include the ID of the Schema. That means that you can't have the same named Claim Def using two different Schema. Is that a problem?\n   - Nice to have: Analysis of Sovrin MainNet and Sovrin StagingNet to see how many instances of that exist.\n- Question: DID URL Handling for Rev Reg Entries\n   - Does not use a straight, request object/return object as with other objects. Instead, may use the RevRegDelta Txn.\n   - Good idea?\n- Help Wanted: Security Considerations sections\n- Help Wanted: Privacy Considerations sections\n```\nHope folks can make it on Tuesday -- 7AM PT.","username":"swcurran","ts":"2021-05-09T20:50:45.229Z"}
{"msg":"I've done another pass of the `did:indy` hackmd document -- https://hackmd.io/2IKUPROnRXW57Lmal_SGaQ?both\n\nAlso set up an agenda for another meeting this week to cover this questions and help wanted:\n\n```\n- Help Wanted: Wording of the \"namespace\" section, with primary and secondary components.\n- Question: Current verkey change does NOT require signature of a new verkey. Should it?\n- Question: Will it be easy/possible to do \"versionTime\" query for a DID?\n- Question: Should a \"versionId\" query require the seqNo be for a NYM, or should it search back on ledger for value of NYM at that time¬†‚Äì same as \"versionTime\"?\n- Question: The new Claim Def DID URL does NOT include the ID of the Schema. That means that you can't have the same named Claim Def using two different Schema. Is that a problem?\n   - Nice to have: Analysis of Sovrin MainNet and Sovrin StagingNet to see how many instances of that exist.\n- Question: DID URL Handling for Rev Reg Entries\n   - Does not use a straight, request object/return object as with other objects. Instead, may use the RevRegDelta Txn.\n   - Good idea?\n- Help Wanted: Security Considerations sections\n- Help Wanted: Privacy Considerations sections\n```\nHope folks can make it on Tuesday -- 7AM PT.","username":"swcurran","ts":"2021-05-09T20:50:45.229Z"}
{"msg":"Do we need the initial google document that we used to start the did:indy discussion? We're migrating from google docs to o365 and I don't want anyone to lose access to it if they still reference it. If you do still need access to it, ping me and I can share a link to the new verision.","username":"kdenhartog","ts":"2021-05-10T02:44:33.506Z"}
{"msg":"We're using a hackmd.io document.  We're not looking at any google doc, so we're fine.","username":"swcurran","ts":"2021-05-11T03:04:20.828Z"}
{"msg":"Next Meeting:\n\ndid:indy Method Spec -- Next meeting: scheduled for Tuesday May 4 at 7AM Pacific / 15:00 UTC / 16:00 CET.\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-05-11\nZoom Info: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09\n\nInformation about this meeting series is here: https://wiki.hyperledger.org/display/indy/Indy+DID+Method+Specification\n\nOn the agenda this week:\n\n* Questions from another pass through the spec.\n* Help wanted on the Security and Privacy consideration sections.","username":"swcurran","ts":"2021-05-11T03:05:35.673Z"}
{"msg":"Question for the from the DID Indy Method call today.  Current plan is to allow a Claim Def on one ledger to reference a Schema on another ledger.  That leaves open the possibility that credentials become unusable because the ledger on which the Schema resides \"disappears\".  We came up with some elaborate ways to handle this, but of course the easiest thing to do is as little as possible.  Here are the options that we see:\n\n1. Do not support the referencing of a schema on another ledger in a claim def, so the potential problem can not happen.\n2. Support the referencing of a schema on another ledger in a claim def, but warn implementers of the risk of doing that.\n3. Provide some sort of safety net by (for example) putting into the Claim Def a copy of the schema transaction and state proof from the other ledger, so that the client always has the schema if needed.\n\nObviously, the last approach requires extra work.\n\nOpinions welcome on what to do for this first instance of the DID Method specification.\n\n@danielhardman @vinomaster @paul.bastian @ArturPhilipp @sergey.khoroshavin @drummondreed @brentzundel","username":"swcurran","ts":"2021-05-11T23:47:56.536Z"}
{"msg":"Second question from today.  We want self-certifying DIDs, so will be adding the enforcement of the algorithm that the Indy SDK uses to derive the DID from the verkey by the ledger in creating a DID.  \n\nQuestion: When rotating the key for an existing DID, should the ledger require that the transaction be signed by the \"before\" key AND the \"after\" key, or just the \"before\" key?\n\nIs that necessary/helpful from a security perspective?","username":"swcurran","ts":"2021-05-11T23:58:21.099Z"}
{"msg":"Second question from today.  We want self-certifying DIDs, so will be adding the enforcement by the ledger of the algorithm that the Indy SDK uses to derive the DID from the verkey in writing a new DID.  \n\nQuestion: When rotating the key for an existing DID, should the ledger require that the transaction be signed by the \"before\" key AND the \"after\" key, or just the \"before\" key?\n\nIs that necessary/helpful from a security perspective?","username":"swcurran","ts":"2021-05-11T23:58:21.099Z"}
{"msg":"Second question from today.  We want self-certifying DIDs, so will be adding the enforcement by the ledger of the algorithm that the Indy SDK uses to derive the DID from the verkey in writing a new DID.  \n\nQuestion: When rotating the key for an existing DID, should the ledger require that the transaction be signed by the \"before\" key AND the \"after\" key, or just the \"before\" key?\n\nIs that necessary/helpful from a security perspective?  Currently, it is just the \"before\" key.","username":"swcurran","ts":"2021-05-11T23:58:21.099Z"}
{"msg":"Signing with the \"after\" key requires that the private key be \"taken out\" of its secure location and actually used. If it's stored in a secure element, maybe that's no big deal -- but if it's stored in software, this constitutes a change of location that may make it easier to observe in a side channel attack or similar. Thus, I think there's a case to be made for the assertion that NOT signing with the after key is actually more secure. However, I am not asserting this case strongly; I'm just parroting some theory that I heard Sam Smith talk about in his KERI design. Maybe we should ask Sam to articulate it; I'm sure he'd do better than I just did.\n\nMy own opinion is that it's probably secure enough with just one signature, but that if we do another, I won't protest.","username":"danielhardman","ts":"2021-05-14T16:35:00.329Z"}
{"msg":"Is the question whether it's still a 'certified' DID?","username":"andrew.whitehead","ts":"2021-05-14T16:39:57.910Z"}
{"msg":"Is the question whether it's still a 'certified' DID? I think we'd have to look at what exactly is proven in the initial transaction and in the key rotation","username":"andrew.whitehead","ts":"2021-05-14T16:39:57.910Z"}
{"msg":"For example the initial transaction is written by a steward, who doesn't submit proof that the DID owner possesses the verkey, but that party won't be able to use the DID for anything useful (presumably) if they don't. Although if the initial transaction contained a DID document with alternative key agreement keys, then they could still send authenticated messages","username":"andrew.whitehead","ts":"2021-05-14T16:42:15.424Z"}
{"msg":"For example the initial transaction is written by a steward, who doesn't submit proof that the DID owner possesses the signing key, but that party won't be able to use the DID for anything useful (presumably) if they don't. Although if the initial transaction contained a DID document with alternative key agreement keys, then they could still send authenticated messages","username":"andrew.whitehead","ts":"2021-05-14T16:42:15.424Z"}
{"msg":"I also wonder if there's a chance of impersonation given that there are plans to resolve things across multiple ledgers","username":"andrew.whitehead","ts":"2021-05-14T16:44:26.505Z"}
{"msg":">Is the question whether it's still a 'certified' DID?\n\nI don't think so. A self-certifying identifier means that it has an unbroken chain of custody, and we'd have that even if there's no signature from the 'after' key. It's the 'before' key that matters.","username":"danielhardman","ts":"2021-05-14T16:52:24.766Z"}
{"msg":"Options 1 and 2 both seem adequate for our purposes. If we later find we need option 3, we can address it in a future enchancement.","username":"esplinr","ts":"2021-05-14T22:28:04.394Z"}
{"msg":"Do you have a preference for 1 or 2?","username":"swcurran","ts":"2021-05-14T23:01:56.422Z"}
{"msg":"Hey folks -- I'm not able to make the meeting tomorrow, so I'm cancelling the meeting.  If anyone wants to host, please let me know and I'll give you the host key.\n\nGreat if you could spend the time on updating the Hack MD document -- especially the Security and Privacy Considerations -- nudge, nudge @paul.bastian :-)\n\nhttps://hackmd.io/@icZC4epNSnqBbYE0hJYseA/S1eUS2BQw","username":"swcurran","ts":"2021-05-17T15:02:19.973Z"}
{"msg":"Has left the channel.","username":"kukgini","ts":"2021-05-18T08:42:46.559Z","type":"ul"}
{"msg":"Has joined the channel.","username":"nserrao","ts":"2021-05-18T17:54:50.470Z","type":"uj"}
{"msg":"I prefer option 2. Let programmers do stuff rather than get in their way. However, this is only possible because I'm imagining the cross-ledger reference to be a DID. If the reference is some other type of URI, then I strongly prefer option 1, as I worry it wold introduce some complexities we don't want to deal with right now.","username":"danielhardman","ts":"2021-05-21T16:01:41.095Z"}
{"msg":"Daniel -- the only cross referencing that is possible in the Indy model is the Schema from Claim Def.\n\nA DID is on the ledger it is on. No contraversy there.\n\nAny other Indy ledger object MUST be on the ledger of the DID that creates it, as the Indy writing rules require that -- permissions to create objects. \n\nBy definition that means that the CLAIM_DEF, REV_REG objects MUST be on the ledger of the Issuer.\n\nThe only other case is can a CLAIM_DEF reference the SCHEMA on a different ledger.  So that's the only case we are worried about.","username":"swcurran","ts":"2021-05-21T16:05:38.154Z"}
{"msg":"Daniel -- the only cross referencing that is possible in the Indy model is the Schema from Claim Def.\n\nA DID is on the ledger it is on. No contraversy there.\n\nAny other Indy ledger object MUST be on the ledger of the DID that creates it, as the Indy writing rules require that -- permissions to create objects. \n\nBy definition that means that the CLAIM_DEF, REV_REG objects MUST be on the ledger of the Issuer.\n\nThe only other case is can a CLAIM_DEF reference the SCHEMA on a different ledger?  So that's the only case we are worried about.","username":"swcurran","ts":"2021-05-21T16:05:38.154Z"}
{"msg":"We'd like to support that, but we could preclude it to avoid the problem of credentials becoming useless because the ledger on which the schema resides goes away.","username":"swcurran","ts":"2021-05-21T16:07:06.809Z"}
{"msg":"Of course, if the ledger on which the Issuer DID and CLAIM_DEF go away, the credential is useless as well.","username":"swcurran","ts":"2021-05-21T16:07:32.222Z"}
{"msg":"Of course, if the ledger on which the Issuer DID and CLAIM_DEF go away, the credential is non-verifiable as well.","username":"swcurran","ts":"2021-05-21T16:07:32.222Z"}
{"msg":"Thanks for the background. I think option 2 is fine. The warning should contemplate not just a reference from something like Sovrin to something like Bedrock, but also references from mainnets to testnets (noting that resetting state on testnets is a real possibility). So it's not just the ledger vanishing that matters, but also the ledger being reset.","username":"danielhardman","ts":"2021-05-21T16:10:10.556Z"}
{"msg":"Has joined the channel.","username":"jkrstic","ts":"2021-05-22T18:10:45.478Z","type":"uj"}
{"msg":"I also agree with 2.","username":"esplinr","ts":"2021-05-25T02:04:22.447Z"}
{"msg":"FYI - the meeting tomorrow is cancelled -- no work has been done.  If you were planning on attending, great if you could move the spec forward -- review it, respond to the questions ^^ in this channel.  Thanks!","username":"swcurran","ts":"2021-05-25T02:06:17.509Z"}
{"msg":"Hi @swcurran , I added some rudimentary glossary for indy specific terms like (NYM (vs DID), SCHEMA, CLAIM_DEF) and so on. The Idea was to give a basic understanding to the reader of the spec at the very beginning but I struggle with the level of details we should provide. I would attend the meeting. If someone would like to review the new parts together with me, feel free. :)","username":"ArturPhilipp","ts":"2021-05-25T10:08:35.079Z"}
{"msg":"Hi Folks,  I've not made any progress on did:indy this past week, and will not be able to make the meeting tomorrow.  I will be up early for a meeting so will see messages on this if anyone wants to hold the meeting and grab the host key.\n\nWe're pushing to have wallets (holders) and verifier agents to implement a \"check multiple ledgers\" as a stop gap for network of networks.  Here is the ticket that is currently being worked for ACA-Py -- https://github.com/hyperledger/aries-cloudagent-python/issues/1189.   While that means we're OK for dealing with objects on multiple ledgers, it does nothing for the DIDDoc support that is needed.","username":"swcurran","ts":"2021-05-31T21:17:04.662Z"}
{"msg":"I was on holidays last week and couldn't do anything either, I'm up for cancelling as well","username":"paul.bastian","ts":"2021-06-01T13:33:08.829Z"}
{"msg":":thumbsup: I think I have ownership of that hackmd document as well. That will be unaffected. It's connected to my github account","username":"kdenhartog","ts":"2021-06-04T01:59:04.948Z"}
{"msg":"Tomorrow's Indy DID Method Specification Meeting has been cancelled for Hyperledger Global Forum.","username":"swcurran","ts":"2021-06-07T19:43:48.838Z"}
{"msg":"Hey folks -- I'll be there for the Indy DID Method call, if anyone else can make it.  We can talk about where we are, and see if we can find a way to make progress on the spec and implementation.  It's been awhile...\n\nCurrent Spec: https://hackmd.io/@icZC4epNSnqBbYE0hJYseA/S1eUS2BQw\n\nCalendar information for the event is here: https://lists.hyperledger.org/g/indy/viewevent?repeatid=32661&eventid=955634&calstart=2021-06-14\n\nZoom Info: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09","username":"swcurran","ts":"2021-06-14T23:27:15.558Z"}
{"msg":"I have a conflict today :/","username":"paul.bastian","ts":"2021-06-15T14:20:57.490Z"}
{"msg":"No worries...I showed up late and the room was empty.  Apologizes if anyone did show up...","username":"swcurran","ts":"2021-06-15T14:22:36.084Z"}
{"msg":"Anyone interested in meeting tomorrow morning? I had an interesting discussion with the KERI folks and have a proposal for what a KERI did:indy would look like.  I wouldn't mind discussing it.","username":"swcurran","ts":"2021-06-21T20:24:57.625Z"}
{"msg":"FYI - I'm going to be chatting with at least Phil Feairheller about how to use Indy for resolving DID that are based on KERI identifiers.  We've been chatting today and I wrote this up for those that are interested:\n\nhttps://docs.google.com/document/d/1GYQtjxnPDtkJ-U0TWHACZ_QVnrCEDvQirZRiPcEzMjc/edit?usp=sharing","username":"swcurran","ts":"2021-06-21T22:29:39.277Z"}
{"msg":"FYI - I'm going to be chatting with at least Phil Feairheller about how to use Indy for resolving DID that are based on KERI identifiers.  We've been chatting today and I wrote this up on the topic for those that are interested:\n\nhttps://docs.google.com/document/d/1GYQtjxnPDtkJ-U0TWHACZ_QVnrCEDvQirZRiPcEzMjc/edit?usp=sharing","username":"swcurran","ts":"2021-06-21T22:29:39.277Z"}
{"msg":"Has joined the channel.","username":"c2bo","ts":"2021-06-22T12:09:12.865Z","type":"uj"}
{"msg":"Has joined the channel.","username":"MichaelSchaefer","ts":"2021-06-22T12:09:14.198Z","type":"uj"}
{"msg":"FYI -- no meeting tomorrow unless I hear of some topics to cover.\n\nI've updated the KERI Identifiers document (link above ^^^) to cover the use of an Indy instance as a set of KERI Witnesses.  The idea is that a \"quick'n'dirty\" implementation can be done with just ATTRIB objects, and that a better implementation can be done by modifying the definition of a NYM object.  \n\nAlso propose that we added to Indy (generally, not just for KERI), the idea of a pre-rotation key, so that a DID can be recovered even if the current private key for the DID is compromised.","username":"swcurran","ts":"2021-06-28T17:16:41.339Z"}
{"msg":"Has joined the channel.","username":"gaberasturi","ts":"2021-07-02T11:20:36.202Z","type":"uj"}
{"msg":"No updates that I'm aware of this week, so cancelling the meeting, again.","username":"swcurran","ts":"2021-07-06T06:40:34.653Z"}
{"msg":"Can we help to move this forward?","username":"domwoe","ts":"2021-07-06T09:10:16.873Z"}
{"msg":"Definitely!  We got very close, but ran out of steam (and participation).  We'll be talking a bit about this on the Indy Contributors call if you can make it today -- 5PM Central Europe Time.","username":"swcurran","ts":"2021-07-06T10:01:31.500Z"}
{"msg":"I'm flying tomorrow and so will not be on this call -- assume it is cancelled.   We really need to get going on this...","username":"swcurran","ts":"2021-07-19T18:05:51.876Z"}
{"msg":"Has joined the channel.","username":"l-wegner","ts":"2021-08-04T15:28:55.264Z","type":"uj"}
{"msg":"Has joined the channel.","username":"etschelp","ts":"2021-08-09T07:29:37.768Z","type":"uj"}
{"msg":"Has joined the channel.","username":"genaris","ts":"2021-09-02T00:55:37.548Z","type":"uj"}
{"msg":"Has joined the channel.","username":"sunchiye","ts":"2021-09-03T02:21:38.391Z","type":"uj"}
{"msg":"Has joined the channel.","username":"timbl","ts":"2021-09-07T13:36:23.189Z","type":"uj"}
{"msg":"Hey Folks ‚Äî the DID Indy spec. has been moved from it‚Äôs HackMD home into a Hyperledger repo ‚Äî https://github.com/hyperledger/indy-did-method and is now being published here - https://hyperledger.github.io/indy-did-method/\n\nWe‚Äôre using SpecUp for managing the spec. and an updated ReadMe on how to contribute is coming Real Soon Now.  It appears we have some interest in getting going on implementing the spec.","username":"swcurran","ts":"2021-09-10T00:15:28.123Z"}
{"msg":"Hey folks --- the Indy Contributors call is - Tuesday Sept. 28 at 8AM Pacific, 5PM CET\n\nPlease join us on the call -- https://wiki.hyperledger.org/display/indy/2021-08-28+Indy+Contributors+Call\nZoom: https://zoom.us/my/hyperledger.community?pwd=STZQd0xMZU9xRVVOVnpQM3JNQ2dqZz09\n\nWe'll be talking about:\n\n- Status of indy-node CI/CD and the Ubuntu upgrade\n- Indy DID Method ‚Äì An overview of the spec, why it is important, and getting started on the work\n\nWe're seeing more interest in the Indy DID method,  which will make it much easier to access multiple Indy networks from an Aries Agent, and enable support for things like BBS+ Verifiable Credentials. Join us to see what's happening with this new DID Method.\n\nFor a preview of the Indy DID Method, check out: https://hyperledger.github.io/indy-did-method/","username":"swcurran","ts":"2021-09-24T17:39:34.036Z"}
{"msg":"BC Gov has posted a funded \"Code With Us\" Challenge for individuals/teams interested in updating Hyperledger Indy to support the new `did:indy` DID Method, specified [here](https://hyperledger.github.io/indy-did-method/). The opportunity and response guidelines are [posted here](https://digital.gov.bc.ca/marketplace/opportunities/code-with-us/e3dd1605-cc1d-4c30-a9ee-245940bccd0d). The total funding for the challenge is $70,000CDN and is divided into 4 phases. The first 3 phases require the use of Python working on the [Indy Node](https://github.com/hyperledger/indy-node) and [Indy Plenum](https://github.com/hyperledger/indy-plenum) repos, while the 4th phase requires Rust development in the [Indy VDR](https://github.com/hyperledger/indy-vdr) repo. Those responding may choose to apply for only the Python work, only the Rust work or both.\n\nQuestions can be asked here or on the website hosting the opportunity.\n\nApplications for the challenge will be accepted up to January 10, 2022. and the work is expected to begin shortly after that date, with completion expected by March 31, 2022.","username":"swcurran","ts":"2021-12-22T19:13:37.205Z"}
{"msg":"@swcurran I wrote the section on security consideration: https://github.com/hyperledger/indy-did-method/pull/28 .I Hope thats enough :P","username":"paul.bastian","ts":"2022-01-10T17:49:56.375Z"}
{"msg":"Awesome stuff -- thanks.  I'll take a look hopefully before end of day.  Thanks, Paul.","username":"swcurran","ts":"2022-01-10T18:09:13.842Z"}
{"msg":"@swcurran Does it make sense to reestablish the call at some point?","username":"paul.bastian","ts":"2022-01-19T16:05:03.099Z"}
{"msg":"I have build a did:indy resolver mvp that takes NYM and contructs the minimal did document: https://github.com/IDunion/indy-did-resolver","username":"paul.bastian","ts":"2022-01-19T16:07:20.293Z"}
{"msg":"Also the did:indy method is close to make it to W3C DID Registry","username":"paul.bastian","ts":"2022-01-19T16:18:06.975Z"}
{"msg":"https://github.com/w3c/did-spec-registries/pull/393","username":"paul.bastian","ts":"2022-01-19T16:18:09.556Z"}
{"msg":"I just read through the indy method yesterday and I'll say you all who helped to put this together into a full method document did a great job at it. Thanks for taking the time to bring that all the way to completion because it turned out a lot better than man of the other ones I'm seeing these days.","username":"kdenhartog","ts":"2022-01-21T22:10:39.179Z"}
{"msg":"I just read through the indy method yesterday and I'll say you all who helped to put this together into a full method document did a great job at it. Thanks for taking the time to bring that all the way to completion because it turned out a lot better than many of the other ones I'm seeing these days.","username":"kdenhartog","ts":"2022-01-21T22:10:39.179Z"}
{"msg":"Good stuff -- the folks at Bosch converted it into the spec.  The did-indy-method WG did the thinking.  I agree it's looking good.","username":"swcurran","ts":"2022-01-21T23:42:15.517Z"}
{"msg":"@paul.bastian -- agree that we should restart the meetings.","username":"swcurran","ts":"2022-01-21T23:42:33.818Z"}
{"msg":"Has joined the channel.","username":"CharHowland","ts":"2022-02-01T17:00:56.897Z","type":"uj"}
{"msg":"Has joined the channel.","username":"Rizary","ts":"2022-02-05T03:27:59.418Z","type":"uj"}
{"msg":"The indy:DID method meeting is ON for tomorrow / Tuesday Feb. 8, 2022 (despite the email message that I sent out accidentally...)\n\nStart time is Tuesday at 7:30 Pacific / 16:30 CET.\n\nZoom Room is: https://zoom.us/j/99220079317?pwd=OHk0U05ITnBkSmZ0aXlIQzFDYWg3UT09\nMeeting Link: https://wiki.hyperledger.org/display/indy/2022-02-08%3A+Indy+DID+Method+Specification+Call\nAgenda for tomorrow is:\n\n- Meeting Cadence ‚Äì weekly for 30 or 60 minutes\n- Open PRs and Issues\n- Update from the implementation team - FYI @TelegramSam @dbluhm \n- Interesting questions leftover from the last meeting we held, way, way back when...\n\nAll are welcome!","username":"swcurran","ts":"2022-02-07T20:34:36.822Z"}
{"msg":"Has joined the channel.","username":"TelegramSam","ts":"2022-02-07T20:34:36.945Z","type":"uj"}
{"msg":"Has joined the channel.","username":"rjones","ts":"2022-02-12T21:59:57.467Z","type":"uj"}
{"msg":"[Please move to Discord](https://discord.com/channels/905194001349627914/905205711850594336)","username":"rjones","ts":"2022-02-12T21:59:57.948Z"}
{"msg":"[Please get an account on the Hyperledger discord](https://discord.gg), then [join Indy](https://discord.com/channels/905194001349627914/905205711850594336)","username":"rjones","ts":"2022-02-12T21:59:57.948Z"}
{"msg":"Has left the channel.","username":"rjones","ts":"2022-02-13T01:34:58.719Z","type":"ul"}
{"msg":"","username":"rjones","ts":"2022-03-23T17:25:39.790Z","type":"room_changed_topic"}
{"msg":"","username":"rjones","ts":"2022-03-23T17:25:39.797Z","type":"room_changed_description"}
{"msg":"","username":"rjones","ts":"2022-03-23T17:25:39.800Z","type":"room_changed_announcement"}
