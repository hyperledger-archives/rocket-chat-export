{"msg":"User <em>User_1</em> added by <em>rjones</em>.","username":"rjones","ts":"2020-09-09T14:21:44.811Z","type":"au"}
{"msg":"choeppler","username":"rjones","ts":"2020-09-09T14:21:54.891Z","type":"subscription-role-added"}
{"msg":"tkuhrt","username":"rjones","ts":"2020-09-09T14:21:57.839Z","type":"subscription-role-added"}
{"msg":"Has left the channel.","username":"rjones","ts":"2020-09-09T14:22:07.766Z","type":"ul"}
{"msg":"Room name changed to: <em>perun</em> by <em>rjones</em>","username":"rjones","ts":"2020-09-09T15:13:20.243Z","type":"r"}
{"msg":"User <em>User_2</em> added by <em>choeppler</em>.","username":"choeppler","ts":"2020-09-09T16:25:29.123Z","type":"au"}
{"msg":"Discussion and information sharing about the labs project Perun","username":"choeppler","ts":"2020-09-09T19:22:10.858Z","type":"room_changed_description"}
{"msg":"Discussion and information sharing about the labs project Perun","username":"choeppler","ts":"2020-09-09T19:24:00.546Z","type":"room_changed_topic"}
{"msg":"","username":"choeppler","ts":"2020-09-09T19:24:00.720Z","type":"room_changed_description"}
{"msg":"Has joined the channel.","username":"tinnendo","ts":"2020-09-10T08:29:03.494Z","type":"uj"}
{"msg":"Test","username":"tinnendo","ts":"2020-09-10T08:29:03.797Z"}
{"msg":"Hi @tinnendo !","username":"choeppler","ts":"2020-09-10T08:29:18.992Z"}
{"msg":"Has joined the channel.","username":"sebstar","ts":"2020-09-10T08:30:00.695Z","type":"uj"}
{"msg":"Salut","username":"sebstar","ts":"2020-09-10T08:30:00.960Z"}
{"msg":"Has joined the channel.","username":"danielksan81","ts":"2020-09-10T10:11:40.608Z","type":"uj"}
{"msg":"Hi folks","username":"danielksan81","ts":"2020-09-10T10:12:41.326Z"}
{"msg":"Has joined the channel.","username":"frank-bee","ts":"2020-09-11T09:23:42.171Z","type":"uj"}
{"msg":"Hi , nice that you have a chat now! :-)","username":"frank-bee","ts":"2020-09-11T09:23:42.599Z"}
{"msg":"Has joined the channel.","username":"c2bo","ts":"2020-09-11T12:35:58.579Z","type":"uj"}
{"msg":"Hey","username":"c2bo","ts":"2020-09-11T12:42:11.476Z"}
{"msg":"Hi @c2bo ","username":"manoranjith","ts":"2020-09-11T12:45:47.510Z"}
{"msg":"@manoranjith, how come the tickets you've just added to [perun-node](https://github.com/hyperledger-labs/perun-node) don't show up in the [project board](https://github.com/orgs/hyperledger-labs/projects/1)?","username":"choeppler","ts":"2020-09-14T06:07:16.781Z"}
{"msg":"I am yet to set up the automation for  the project board to include the newly added issues. \n\nI have added them manually for now and you they should show up in the project board.","username":"manoranjith","ts":"2020-09-14T08:05:10.312Z"}
{"msg":"Okay, thanks.\nI was asking because I  thought at least the newly created ones would show up in the board that way it's configured at the moment...","username":"choeppler","ts":"2020-09-14T10:52:23.175Z"}
{"msg":"Okay, for some reason it didn't. Will have a look into it.","username":"manoranjith","ts":"2020-09-14T11:04:32.346Z"}
{"msg":"Hi, \n\nI was trying to update `perun-node` to use the shared nonce feature. But I am not able to figure out how to send the nonce share when accepting a channel proposal.\n1. I found the [`NewChannelProposalAcc`](https://github.com/hyperledger-labs/go-perun/blob/4bede739a3e4ce208390203ddd75aa3e2eb968b3/client/proposalmsgs.go#L265), to which I can pass `WithRandomNonce` as option and receive a `client.ChannelProposalAcc`.  \n2. But [`ProposalResponder.Accept`](https://github.com/hyperledger-labs/go-perun/blob/dev/client/proposal.go#L82) takes a only a `client.ProposalAcc` as a parameter.","username":"manoranjith","ts":"2020-09-14T12:20:23.857Z"}
{"msg":"Hi, \n\nI was trying to update `perun-node` to use the shared nonce feature. But I am not able to figure out how to send the nonce share when accepting a channel proposal.\n1. I found the [`NewChannelProposalAcc`](https://github.com/hyperledger-labs/go-perun/blob/4bede739a3e4ce208390203ddd75aa3e2eb968b3/client/proposalmsgs.go#L265), to which I can pass `WithRandomNonce` as option and receive a `client.ChannelProposalAcc`.  \n2. But [`ProposalResponder.Accept`](https://github.com/hyperledger-labs/go-perun/blob/dev/client/proposal.go#L82) takes a only a `client.ProposalAcc` as a parameter and not `client.ChannelProposalAcc`.","username":"manoranjith","ts":"2020-09-14T12:20:23.857Z"}
{"msg":"Has joined the channel.","username":"anagha-ks","ts":"2020-09-15T03:37:14.114Z","type":"uj"}
{"msg":"Hi, \nPreviously the [board](https://github.com/orgs/hyperledger-labs/projects/1) was configured using [Github Automation](https://docs.github.com/en/github/managing-your-work-on-github/configuring-automation-for-project-boards), but i found few limitations with it. \nNow i have set it up to use the [project bot](https://github.com/apps/project-bot) and it seems to work now.","username":"manoranjith","ts":"2020-09-16T11:37:12.969Z"}
{"msg":"On creating new issues, the project should be explicitly added to the issue. Then it will appear in the `To Do (Backlog)` column of the project board.","username":"manoranjith","ts":"2020-09-16T11:39:49.605Z"}
{"msg":"Hi, that was a mistake on our side when we recently changed the API of channel proposals on the `dev` branch. We just merged a fix where `ProposalResponder.Accept` now correctly receives a `client.ChannelProposalAcc` message, which must be created using method `NewChannelProposalAcc` on the proposal request. Note that we will probably change the API here once more before our next \"Europa\" release, where we implement full sub-channel support (not directly relevant to the node, but allows to \"run\" apps in channels).","username":"sebstar","ts":"2020-09-16T12:44:57.858Z"}
{"msg":"I see. So, in other words, regardless of the [board's](https://github.com/orgs/hyperledger-labs/projects/1) linked repositories, issues appear once their project property points to the board, don't they?","username":"choeppler","ts":"2020-09-16T13:19:55.698Z"}
{"msg":"As I noticed from the [github docs](https://docs.github.com/en/github/managing-your-work-on-github/linking-a-repository-to-a-project-board), issues & pull requests can be added the to project board whether it is linked or not.\n\nHowever, the automation will work only for the linked repositories: `perun node` and `perun doc`.","username":"manoranjith","ts":"2020-09-16T13:28:14.737Z"}
{"msg":"Okay, I will try using the updated version.","username":"manoranjith","ts":"2020-09-16T13:28:53.054Z"}
{"msg":"I was trying to use the persistence feature in go-perun and have one query: When a channel client is persisted and restored, what happens to the message bus ?\nShould the participants of the `to be restored channels` be registered in the message bus before restoring the channels ? If so, how to get the list of participants to be registered ?","username":"manoranjith","ts":"2020-09-23T07:36:23.879Z"}
{"msg":"@sebstar","username":"manoranjith","ts":"2020-09-23T07:39:20.819Z"}
{"msg":"@manoranjith I pushed an [intermediate release `v0.4.1`](https://github.com/hyperledger-labs/go-perun/releases/tag/v0.4.1) with the features included that we discussed last week.","username":"sebstar","ts":"2020-09-23T12:27:45.768Z"}
{"msg":"You mean their IP addresses registered in the dialer?","username":"sebstar","ts":"2020-09-23T12:38:56.584Z"}
{"msg":"Yes","username":"manoranjith","ts":"2020-09-23T14:15:01.606Z"}
{"msg":"Not necessarily before, I think. But the moment the first wire message is sent, the tcp/ip wire.Bus implementation will try to dial and fail if the peer is unknown.\nBut don't you load the list of known peers with their IP addresses at start anyways? I would configure the tcp/ip dialer before setting up any client.","username":"sebstar","ts":"2020-09-23T14:23:27.682Z"}
{"msg":"In case of outgoing connections,  the IP address is registered in the dialer when a user wants to open a channel with that peer. \n\nIn case of restore, the first possible instance to register a peer with dialer is within the `OnNewChannel` callback.\n\nHence wanted to clarify if the framework will try to use the message bus before a channel is processed in the `OnNewChannel` callback.","username":"manoranjith","ts":"2020-09-23T14:29:14.807Z"}
{"msg":"I think it's fine to do it there for now... why can't you just add the ip addresses of all known peers before restoring client?","username":"sebstar","ts":"2020-09-23T14:41:02.464Z"}
{"msg":"Okay, I think I will try doing it this way now.\n\nCurrently we use contacts from yaml file and hence it may not make much difference whether is is loaded on demand or all of them before restoring..\n\nBut when we might move to other contact sources, which might have large number of known peers, then loading on demand will be a better option.","username":"manoranjith","ts":"2020-09-24T07:38:05.433Z"}
{"msg":"I have a query regarding what happens when a channel is in Funding phase and the other party doesn't fund within expected time.\nLooking at [client/proposal.go:L335](https://github.com/hyperledger-labs/go-perun/blob/75f39a5cc4f456b8b8f30e640c1de2419c7e899d/client/proposal.go#L355), I understand that `ch.Settle`  is called and that the statemachine is in the `Funding` state.","username":"manoranjith","ts":"2020-09-24T20:08:09.516Z"}
{"msg":"I have a query regarding what happens when a channel is in Funding phase and the other party doesn't fund within expected time.\n\nLooking at [client/proposal.go:L335](https://github.com/hyperledger-labs/go-perun/blob/75f39a5cc4f456b8b8f30e640c1de2419c7e899d/client/proposal.go#L355), I understand that `ch.Settle`  is called and that the statemachine is in the `Funding` state.\n\nWithin `ch.Settle` the function calls sequence is: `channel.settleLocked` -> `channel.settle` -> `channel.register` (because machine is `Funding` phase and `Funding` < `Registered`) -> `machine.SetRegistering` -> `statemachine.SetRegistering`.\n\nWithin [statemachine.SetRegistering](https://github.com/hyperledger-labs/go-perun/blob/75f39a5cc4f456b8b8f30e640c1de2419c7e899d/channel/machine.go#L363), I found the condition check `m.Phase < Funding` which I expect to fail, because the current phase is `Funding`.\n\nAnd hence `ch.settle` will return an error, thereby  Is this an expected behavior ? Or should the condition check be `m.Phase <= Funding` ?","username":"manoranjith","ts":"2020-09-24T20:08:09.516Z"}
{"msg":"I have a query regarding what happens when a channel is in Funding phase and the other party doesn't fund within expected time.\n\nLooking at [client/proposal.go:L335](https://github.com/hyperledger-labs/go-perun/blob/75f39a5cc4f456b8b8f30e640c1de2419c7e899d/client/proposal.go#L355), I understand that `ch.Settle`  is called and that the statemachine is in the `Funding` state.\n\nWithin `ch.Settle` the function calls sequence is: `channel.settleLocked` -> `channel.settle` -> `channel.register` (because machine is `Funding` phase and `Funding` < `Registered`) -> `machine.SetRegistering` -> `statemachine.SetRegistering`.\n\nWithin [statemachine.SetRegistering](https://github.com/hyperledger-labs/go-perun/blob/75f39a5cc4f456b8b8f30e640c1de2419c7e899d/channel/machine.go#L363), I found the condition check `m.Phase < Funding` which I expect to fail, because the current phase is `Funding`. and `statemachine.SetRegistering` will return an error.\n\nAnd hence `ch.settle` will return an error, thereby  Is this an expected behavior ? Or should the condition check be `m.Phase <= Funding` ?","username":"manoranjith","ts":"2020-09-24T20:08:09.516Z"}
{"msg":"I have a query regarding what happens when a channel is in Funding phase and the other party doesn't fund within expected time.\n\nLooking at [client/proposal.go:L335](https://github.com/hyperledger-labs/go-perun/blob/75f39a5cc4f456b8b8f30e640c1de2419c7e899d/client/proposal.go#L355), I understand that `ch.Settle`  is called and that the statemachine is in the `Funding` state.\n\nWithin `ch.Settle` the function calls sequence is: `channel.settleLocked` -> `channel.settle` -> `channel.register` (because machine is `Funding` phase and `Funding` < `Registered`) -> `machine.SetRegistering` -> `statemachine.SetRegistering`.\n\nWithin [statemachine.SetRegistering](https://github.com/hyperledger-labs/go-perun/blob/75f39a5cc4f456b8b8f30e640c1de2419c7e899d/channel/machine.go#L363), I found the condition check `m.Phase < Funding` which I expect to fail, because the current phase is `Funding`. and `statemachine.SetRegistering` will return an error.\n\nThereby causing `ch.settle` to return an error. Is this an expected behavior ? Or should the condition check be `m.Phase <= Funding` ?","username":"manoranjith","ts":"2020-09-24T20:08:09.516Z"}
{"msg":"@sebstar ","username":"manoranjith","ts":"2020-09-25T07:47:08.260Z"}
{"msg":"Isn't it the other way around? The link you posted shows that it _fails_ if `m.Phase < Funding`, but, as you say, it is at `Funding`, it won't fail.","username":"sebstar","ts":"2020-09-25T08:53:41.486Z"}
{"msg":"Isn't it the other way around? The link you posted shows that it _fails_ if `m.Phase < Funding`, but, as you say, it is at `Funding`, so it _won't_ fail.","username":"sebstar","ts":"2020-09-25T08:53:41.486Z"}
{"msg":"Yeah, it is the other way around🤦‍♂️, if the condition check fails, the `statemachine.SetRegistering` executes the happy path. \n\nThanks for the clarification.","username":"manoranjith","ts":"2020-09-25T09:15:17.713Z"}
{"msg":"Hi @sebstar,\n\nI looking at the proposal validation logic [here](https://github.com/hyperledger-labs/go-perun/blob/ffba499fdb4e1bc6d954426d9346a5de5306060f/client/proposal.go#L246).\n\nIs the a specific reason why the indices should be fixed: Proposer at 0 and the Proposee at 1 ?","username":"manoranjith","ts":"2020-10-01T11:15:48.047Z"}
{"msg":"It was just much easier to implement the protocol when this was fixed. We're not aware of any application where this is a problem.","username":"sebstar","ts":"2020-10-01T13:09:33.658Z"}
{"msg":"Okay, I was getting an error when I was not putting the proposer address at index 0 and was just curious about the reason behind it. Wasn't a problem though.","username":"manoranjith","ts":"2020-10-01T13:14:16.720Z"}
{"msg":"Here's the link the /dev/weekly-Newsletter subscription page: https://www.hyperledger.org/developer-newsletter","username":"choeppler","ts":"2020-10-12T09:41:39.005Z"}
{"msg":"Hi @sebstar \n\nI have been trying to use nil app in channels and stuck at this point. \nI am using 75f39a5c (tagged v0.4.1}.\n\nScenario 1:\nI use 'NewLedgerChannelProposal' to create a channel proposal  `pclient.WithApp(nil,pchannel.NoData)` with this option. Then if I print the channel proposal, the App field is not nil, but initialized to zero value. \nSo when I consequently call `pclient.ProposeChannel`, the program panics as `App.Def()` is called at `backend/ethereum/channel/backend.go:L117`,  \n```\nif p.App != nil {\napp = ethwallet.AsEthAddr(p.Add.Def())\n}\n```\n\nThe same is the case, even if I don't use `WithApp`  option in `NewLedgerChannelProposal`. \n\nScenario 2:\n\nI explicitly set app to nil in the channel proposal returned by `NewLedgerChannelProposal`, before passing it to `ProposeChannel`. \n\n\nThe I get an error, because `ValidateProposalParameters` in `pchannel/params.go` checks that app should not be nil. \n\nNot: In pchannel, pclient etc., prefix p just refers that its a package in go-perun.","username":"manoranjith","ts":"2020-10-16T09:54:30.040Z"}
{"msg":"Hi @sebstar \n\nI have been trying to use nil app in channels and stuck at this point. \nI am using 75f39a5c (tagged v0.4.1}.\n\nScenario 1:\nI use 'NewLedgerChannelProposal' to create a channel proposal  `pclient.WithApp(nil,pchannel.NoData)` with this option. Then if I print the channel proposal, the App field is not nil, but initialized to zero value. \nSo when I consequently call `pclient.ProposeChannel`, the program panics as `App.Def()` is called at `backend/ethereum/channel/backend.go:L117`,  \n\n```\nif p.App != nil {\napp = ethwallet.AsEthAddr(p.Add.Def())\n}\n```\n\nThe same is the case, even if I don't use `WithApp`  option in `NewLedgerChannelProposal`. \n\nScenario 2:\n\nI explicitly set app to nil in the channel proposal returned by `NewLedgerChannelProposal`, before passing it to `ProposeChannel`. \n\n\nThe I get an error, because `ValidateProposalParameters` in `pchannel/params.go` checks that app should not be nil. \n\nNot: In pchannel, pclient etc., prefix p just refers that its a package in go-perun.","username":"manoranjith","ts":"2020-10-16T09:54:30.040Z"}
{"msg":"Hi @sebstar \n\nI have been trying to use nil app in channels and stuck at this point. \nI am using 75f39a5c (tagged v0.4.1}.\n\nScenario 1:\nI use 'NewLedgerChannelProposal' to create a channel proposal  `pclient.WithApp(nil,pchannel.NoData)` with this option. Then if I print the channel proposal, the App field is not nil, but initialized to zero value. \nSo when I consequently call `pclient.ProposeChannel`, the program panics as `App.Def()` is called at `backend/ethereum/channel/backend.go:L117`,  \n\n\n\nif p.App != nil {\napp = ethwallet.AsEthAddr(p.Add.Def())\n}\n\n\n\nThe same is the case, even if I don't use `WithApp`  option in `NewLedgerChannelProposal`. \n\nScenario 2:\n\nI explicitly set app to nil in the channel proposal returned by `NewLedgerChannelProposal`, before passing it to `ProposeChannel`. \n\n\nThe I get an error, because `ValidateProposalParameters` in `pchannel/params.go` checks that app should not be nil. \n\nNot: In pchannel, pclient etc., prefix p just refers that its a package in go-perun.","username":"manoranjith","ts":"2020-10-16T09:54:30.040Z"}
{"msg":"Hi @sebstar \n\nI have been trying to use nil app in channels and stuck at this point. \nI am using 75f39a5c (tagged v0.4.1}.\n\nScenario 1:\nI use 'NewLedgerChannelProposal' to create a channel proposal  `pclient.WithApp(nil,pchannel.NoData)` with this option. Then if I print the channel proposal, the App field is not nil, but initialized to zero value. \nSo when I consequently call `pclient.ProposeChannel`, the program panics as `App.Def()` is called at `backend/ethereum/channel/backend.go:L117`,  \n\n\n\nif p.App != nil {\napp = ethwallet.AsEthAddr(p.Add.Def())\n}\n\n\n\nThe same is the case, even if I don't use `WithApp`  option in `NewLedgerChannelProposal`. \n\nScenario 2:\n\nI explicitly set app to nil in the channel proposal returned by `NewLedgerChannelProposal`, before passing it to `ProposeChannel`. \n\n\nThe I get an error, because `ValidateProposalParameters` in `pchannel/params.go` checks that app should not be nil. \n\nNote: In pchannel, pclient etc., prefix p just refers that its a package in go-perun.\n\nI am not able to figure out how to correctly set a nil app in the channel.","username":"manoranjith","ts":"2020-10-16T09:54:30.040Z"}
{"msg":"`nil` is not a valid app, or appdef. If you just omit the `WithApp` option, it should create a proposal without an app, that is, with a `NoApp`.  You can also explicitly set `WithApp(channel.NoApp(), channel.NoData())`. The latest `dev` also contains an explicit option for that, `WithoutApp()`. We never use `nil` because this always leads to unforeseen problems in public APIs.","username":"sebstar","ts":"2020-10-16T13:00:47.746Z"}
{"msg":"I tried channel.NoApp option as you have described...  Program panics for the reason described in scenario 1 above. \n\nBecause channel.NoApp sets the app to zero value, but in snippet in (go-perun), Def is called on zero value app.... Which causes it to panic","username":"manoranjith","ts":"2020-10-16T15:40:19.745Z"}
{"msg":"@anagha-ks, I've seen you're working on docs in [perun-doc](https://github.com/hyperledger-labs/perun-doc). We still need to migrate the build scripts which date back to the pre-Hyperledger Labs days. I'm having a stab at that ATM and expect to be done later today. Maybe we could integrate that before merging your current PR...","username":"choeppler","ts":"2020-12-03T11:59:25.854Z"}
{"msg":"Done: https://github.com/hyperledger-labs/perun-doc/pull/27","username":"choeppler","ts":"2020-12-04T00:58:49.382Z"}
{"msg":"yes, I saw the changes you have made. We will integrate this configurations first.","username":"anagha-ks","ts":"2020-12-04T11:33:10.347Z"}
{"msg":"@rjones, could you please help with a configuration issue in the https://github.com/hyperledger-labs/perun-doc repo? I am trying to (automatically) deploy the generated docs in a branch gh-pages (to publish on https://hyperledger-labs.github.io/perun-doc), however the branch protection rules and DCO-check prevent that:\n```\nremote: error: GH006: Protected branch update failed for refs/heads/gh-pages.\nremote: error: Required status check \"DCO\" is expected. At least 1 approving review is required by reviewers with write access.\nTo https://github.com/hyperledger-labs/perun-doc\n ! [remote rejected] gh-pages -> gh-pages (protected branch hook declined)\nerror: failed to push some refs to 'https://choeppler@github.com/hyperledger-labs/perun-doc'\nmake: *** [Makefile:90: deploy] Error 1\n```","username":"choeppler","ts":"2020-12-04T15:27:34.814Z"}
{"msg":"Has joined the channel.","username":"rjones","ts":"2020-12-04T15:27:34.928Z","type":"uj"}
{"msg":"@choeppler try now","username":"rjones","ts":"2020-12-04T15:47:34.344Z"}
{"msg":":tada:","username":"choeppler","ts":"2020-12-04T16:00:01.078Z"}
{"msg":"Works like a charm now.","username":"choeppler","ts":"2020-12-04T16:00:28.303Z"}
{"msg":"Website's also up :) https://labs.hyperledger.org/perun-doc/","username":"choeppler","ts":"2020-12-04T16:01:10.349Z"}
{"msg":"Thank you, @rjones","username":"choeppler","ts":"2020-12-04T16:01:54.533Z"}
{"msg":"@manoranjith, since manual deployment of the perun-docs worked now. So I think everything is setup , that you can activate the circleci build with the default settings in the Makefile... :fingers_crossed:","username":"choeppler","ts":"2020-12-04T16:31:32.032Z"}
{"msg":"@manoranjith, manual deployment of the perun-docs worked now. So I think everything is setup , that you can activate the circleci build with the default settings in the Makefile...","username":"choeppler","ts":"2020-12-04T16:31:32.032Z"}
{"msg":"If I interpret the error in https://app.circleci.com/pipelines/github/hyperledger-labs/perun-doc/8/workflows/3390bc66-8e56-430f-95e5-681da1dea87b/jobs/9 correctly, a deploy key is missing?\n```\nWarning: Permanently added the RSA host key for IP address '140.82.114.4' to the list of known hosts.\nERROR: Permission to hyperledger-labs/perun-doc.git denied to deploy key\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\nmake: *** [Makefile:90: deploy] Error 128\n\nExited with code exit status 2\n\nCircleCI received exit code 2\n```","username":"choeppler","ts":"2020-12-04T16:56:54.079Z"}
{"msg":"A second issue: CircleCI should not try to build the `gh-pages`-branch. That's why the [other build](https://app.circleci.com/pipelines/github/hyperledger-labs/perun-doc/9/workflows/d1299f9c-7872-45f1-8d19-b6fd4146c316/jobs/10) failed...","username":"choeppler","ts":"2020-12-04T16:59:19.002Z"}
{"msg":"@manoranjith, I just created a PR in the perun-docs repo, https://github.com/hyperledger-labs/perun-doc/pull/35. CircleCI ran the deploy target (which it shouldn't for a pr) and that build failed due to the same reason detailed above. (Cf. https://app.circleci.com/pipelines/github/hyperledger-labs/perun-doc/14/workflows/0aed9019-f256-442a-8b3f-933f21177433/jobs/17)\nCould you have a look into this, please?","username":"choeppler","ts":"2020-12-08T09:11:44.193Z"}
{"msg":"fixed after rebasing to master where the CircleCI-config updates were just integrated.\nThanks, @manoranjith !","username":"choeppler","ts":"2020-12-08T09:27:19.589Z"}
{"msg":"Okay. There was an update need to circle ci config.... Hence it was failing before","username":"manoranjith","ts":"2020-12-08T09:34:20.798Z"}
{"msg":"I have updated the circle ci config to run jobs based on branches. You can find the details in this commit: https://github.com/hyperledger-labs/perun-doc/commit/4771373a9f01d25fdff3ab524ce93b6a8ada21a1","username":"manoranjith","ts":"2020-12-08T09:36:40.334Z"}
{"msg":"It also includes excluding gh-pages branch.","username":"manoranjith","ts":"2020-12-08T09:37:30.740Z"}
{"msg":"Hm. it seems we still have to include a config in the gh-pages branch to exclude building that branch???","username":"choeppler","ts":"2020-12-08T10:31:00.979Z"}
{"msg":"Cf. the error I'm still seeing here: https://app.circleci.com/pipelines/github/hyperledger-labs/perun-doc/21/workflows/f3ce4f73-5acd-4628-ab73-f29e4463b6c1/jobs/26","username":"choeppler","ts":"2020-12-08T10:32:08.198Z"}
{"msg":"Fixed by [#36](https://github.com/hyperledger-labs/perun-doc/pull/36) and [#37](https://github.com/hyperledger-labs/perun-doc/pull/37)","username":"choeppler","ts":"2020-12-08T11:58:29.299Z"}
{"msg":"Has joined the channel.","username":"OliverTY","ts":"2021-03-02T10:01:35.990Z","type":"uj"}
{"msg":"Has joined the channel.","username":"mano-ranjith","ts":"2021-03-04T08:24:37.016Z","type":"uj"}
{"msg":"Hi\n\nI was trying to simulate the case where I can get FundingTimeoutError with the following steps:\n1. Start ganache-cli node with insufficient funds for one of the channel participants\n2. Run `Test_Role_Integ` in `perun-node/session` package.\n\nI noticed that, in all three combinations (Y -> has sufficient funds, N -> does not)\nAlice: Y  |   N  |  N\nBob : N  |   Y  |  N\n\nI see to get the same error for both alice and bob: `funding ledger channel: error while funding channel: sending 0th funding TX for asset 0: sending transaction: context canceled`. \n\nShould i not receive a `FudingTimeoutError` in this case, as one of the channel participants was not able to send the funding tx in time ?","username":"mano-ranjith","ts":"2021-03-04T08:24:38.063Z"}
{"msg":"Hi\n\nAlso I am thinking on how to detect a `Transaction Timed Out` error in go-perun. One  possibility I was if `bind.WaitMined` call within `ConfirmTransaction` function [here](https://github.com/hyperledger-labs/go-perun/blob/37f6187c1df8d05409853c4eb7301a384f12923b/backend/ethereum/channel/contractbackend.go#L132) returns an error, can we consider that the transaction has not been received within the expected time ?","username":"mano-ranjith","ts":"2021-03-04T10:08:49.673Z"}
{"msg":"@OliverTY","username":"mano-ranjith","ts":"2021-03-04T10:09:38.865Z"}
{"msg":"I will take a look","username":"OliverTY","ts":"2021-03-04T12:26:20.234Z"}
{"msg":"Has joined the channel.","username":"matthiasgeihs","ts":"2021-03-04T13:29:15.507Z","type":"uj"}
{"msg":"thx oli","username":"matthiasgeihs","ts":"2021-03-04T13:50:14.690Z"}
{"msg":"I tried to reproduce this but because of several limitations in the simulated block chain it did not work. Which means that we can not test it :cry: \nWill try out your code next.","username":"OliverTY","ts":"2021-03-04T14:45:42.739Z"}
{"msg":"The go-ethereum documentation is not helpful on that, would need to look at the source.","username":"OliverTY","ts":"2021-03-04T14:48:28.460Z"}
{"msg":">Should i not receive a FudingTimeoutError in this case, as one of the channel participants was not able to send the funding tx in time ?\nyes, if someone else did not fund in time.\nI case youself could not fund, the error is different AFAIK.","username":"OliverTY","ts":"2021-03-04T14:49:13.209Z"}
{"msg":"To try out, you can\n1. Clone the repo with below commands.\n`git clone https://github.com/boschresearch/dst-go.git`\n`cd dst-go/session`\n\n2. Start the ganache-cli node using the below command.\n`ganache-cli -b 1 --account=\"0x1fedd636dbc7e8d41a0622a2040b86fea8842cef9d4aa4c582aad00465b7acff,100000000000000000000\" --account=\"0xb0309c60b4622d3071fad3e16c2ce4d0b1e7758316c187754f4dd0cfb44ceb33,100000000000000000000\"`\n\n3. Run the specific test. I have commented out a large part of this, so that it runs only until the point where channel is proposed and accepted.\n`go test -count=1 -tags=integration  -v -run Test_Integ_Role`\n\nIn the first run, the test will pass.\nThen you can try each of the three combinations by modifying the initial balance when starting ganache-cli node.\n\nAlice: Y | N | N\nBob : N | Y | N","username":"mano-ranjith","ts":"2021-03-04T15:08:40.103Z"}
{"msg":"To try out, you can\n1. Clone the repo with below commands.\n`git clone https://github.com/boschresearch/dst-go.git`\n`git checkout funding-timedout-error`\n`cd dst-go/session`\n\n2. Start the ganache-cli node using the below command.\n`ganache-cli -b 1 --account=\"0x1fedd636dbc7e8d41a0622a2040b86fea8842cef9d4aa4c582aad00465b7acff,100000000000000000000\" --account=\"0xb0309c60b4622d3071fad3e16c2ce4d0b1e7758316c187754f4dd0cfb44ceb33,100000000000000000000\"`\n\n3. Run the specific test. I have commented out a large part of this, so that it runs only until the point where channel is proposed and accepted.\n`go test -count=1 -tags=integration  -v -run Test_Integ_Role`\n\nIn the first run, the test will pass.\nThen you can try each of the three combinations by modifying the initial balance when starting ganache-cli node.\n\nAlice: Y | N | N\nBob : N | Y | N","username":"mano-ranjith","ts":"2021-03-04T15:08:40.103Z"}
{"msg":"In the command specified above, each of them get 100 ETH. Since the channel opening balance is 2,2 ETH; if you remove 2 zeros for any of the participant, that participant will have insufficient balance.\n\nNote that, since they still will have 1 ETH each, it was be sufficient to deploy contracts during test setup","username":"mano-ranjith","ts":"2021-03-04T15:10:19.480Z"}
{"msg":"@OliverTY","username":"mano-ranjith","ts":"2021-03-04T15:10:23.485Z"}
{"msg":"But in all cases (either I did not fund or the peer did not fund), I receive the same error that is mentioned above.","username":"mano-ranjith","ts":"2021-03-04T15:15:42.278Z"}
{"msg":"Hi @OliverTY \n\nI tried to investigate this error in more detail. It seems to be a problem in how transactions are handled by `ganache-cli`. \n\nIf we send both the funding transactions next to one another, both of them are not mined by ganache-cli\n\nBut, if we send one funding transaction, wait for it to be mined / fail and then send the second transaction, then it works as expected. We get funding transaction error for one alice and peers did not fund error for bob.","username":"mano-ranjith","ts":"2021-03-12T09:58:58.037Z"}
{"msg":"To achieve the second case, i added a 2 second sleep before calling fund in `go-perun/client/proposal.go:189`","username":"mano-ranjith","ts":"2021-03-12T10:00:14.171Z"}
{"msg":"In the same branch, I have mentioned above, i have committed these changes.\n\nFirst you can start ganache-cli node with the command mentioned above with 1ETH for alice, 10 ETH for bob.\n\nThen from session directory, if you run `go test -cover -p 1 -count=1 -tags=integration  -v -run Test_Integ_Role`\n\nOn commit f7a4e3 you will get funding error for both alice and bob.\n\nOn commit 2ec38b (where i had added a sleep), you will get funding error for alice and peer timed out funding error for bob.","username":"mano-ranjith","ts":"2021-03-12T10:05:30.093Z"}
{"msg":"After @matthiasgeihs merged https://github.com/hyperledger-labs/perun-doc/pull/58, CircleCI didn't build and deploy master. I didn't see an easy way to manually trigger a CircleCI-build. So, I rebuilt locally for the time being.","username":"choeppler","ts":"2021-04-19T19:04:55.096Z"}
{"msg":"After @matthiasgeihs merged https://github.com/hyperledger-labs/perun-doc/pull/58, CircleCI didn't build and deploy master. I didn't see an easy way to manually trigger CircleCI. So, I rebuilt locally for the time being.","username":"choeppler","ts":"2021-04-19T19:04:55.096Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/perun?msg=NjKAc3LzcB7txQiKe) Thank you. Do you know the reason why it did not trigger?","username":"matthiasgeihs","ts":"2021-04-19T20:50:03.806Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/perun?msg=NjKAc3LzcB7txQiKe","url":"https://chat.hyperledger.org/channel/perun?msg=NjKAc3LzcB7txQiKe","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Checked the settings for perun-doc repo. The `deploy` job seems to have been disabled. I have re-enabled it now.","username":"mano-ranjith","ts":"2021-04-22T07:08:22.553Z"}
{"msg":"The `deploy` job should now be triggered on any future commits in the master branch.","username":"mano-ranjith","ts":"2021-04-22T07:09:05.524Z"}
{"msg":"We have released `perun-node v0.6.0`. It includes support for using ERC20 tokens in payment channels, a new TUI (text based UI) client and much more.\nCheck out the [release notes](https://github.com/hyperledger-labs/perun-node/releases/tag/v0.6.0) for more details.","username":"mano-ranjith","ts":"2021-07-08T14:27:47.133Z"}
{"msg":"Has joined the channel.","username":"MatthiasGeihs.Perun","ts":"2021-07-19T15:09:00.544Z","type":"uj"}
{"msg":"We have also released `go-perun v0.7.0`. It features support for virtual channels, which allow to open channels without any on-chain costs. :rocket:","username":"MatthiasGeihs.Perun","ts":"2021-07-19T15:09:00.812Z"}
{"msg":"We have also released `go-perun v0.7.0`. It features support for virtual channels, which allow to open channels without any on-chain costs. :rocket:\nCheck out the [go-perun repository](https://github.com/hyperledger-labs/go-perun) for more details.","username":"MatthiasGeihs.Perun","ts":"2021-07-19T15:09:00.812Z"}
{"msg":"There was a note on the Hyperledger Labs mailing list, that lab repos should move from master to main for the default branch. (https://lists.hyperledger.org/g/labs/message/145)\nWe've got [five repos](https://github.com/search?q=org%3Ahyperledger-labs+perun) which are affected:\n- hyperledger-labs/go-perun\n- hyperledger-labs/perun-doc\n- hyperledger-labs/perun-eth-contracts\n- hyperledger-labs/perun-node\n- hyperledger-labs/perun-proposals\n\nI've already renamed `master` to `main` in the doc, node, and proposals repos via the web interface as described [here](https://github.com/github/renaming)\n\n@MatthiasGeihs.Perun, do you want me to do so for the remaining repos as well or are you going to take care of that?","username":"choeppler","ts":"2021-08-03T20:45:30.734Z"}
{"msg":"I came across [repolinter](https://github.com/todogroup/repolinter/) recently and used it to lint the [perun-node](https://github.com/hyperledger-labs/perun-node) repo using the configuration documented in the pull request https://github.com/hyperledger-labs/perun-node/pull/222. @rjones , could you have a quick look at the PR to check whether I picked up the right config and the proposed fix looks as expected?","username":"choeppler","ts":"2021-08-03T21:30:44.431Z"}
{"msg":"Hi @rjones , we just released a new blockchain backend for Perun, bringing Perun to the Cosmos Network. The backend is contained in two repositories:\n- The CosmWasm smart contract: https://github.com/perun-network/perun-cosmwasm-contract\n- The Perun Backend: https://github.com/perun-network/perun-cosmwasm-backend\n\n@choeppler proposed that we make these part of Hyperledger and mentioned that you, @rjones, could help us move the repositories to the Hyperledger Organization on GitHub. Could you give us some guidance on what needs to be done?","username":"MatthiasGeihs.Perun","ts":"2021-10-12T08:48:02.357Z"}
{"msg":"@MatthiasGeihs.Perun the easiest way is to transfer them to me on GitHub - `ryjones` - and then I'll transfer them. If you're uncomfortable with that, you can make me an owner of the repos, and I can try to transfer them directly from `perun-network`","username":"rjones","ts":"2021-10-12T15:45:34.594Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/perun?msg=SAgoiqYNfMH85vv7Y) Thanks for your help @rjones \n\nI have made you an Admin on both repositories. You should be able to transfer Ownership now.\n\nhttps://github.com/perun-network/perun-cosmwasm-backend\nhttps://github.com/perun-network/perun-cosmwasm-contract","username":"MatthiasGeihs.Perun","ts":"2021-10-13T11:47:36.502Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/perun?msg=SAgoiqYNfMH85vv7Y","url":"https://chat.hyperledger.org/channel/perun?msg=SAgoiqYNfMH85vv7Y","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@MatthiasGeihs.Perun done!","username":"rjones","ts":"2021-10-13T16:00:35.538Z"}
{"msg":"MatthiasGeihs.Perun","username":"choeppler","ts":"2021-10-13T18:53:53.583Z","type":"subscription-role-added"}
{"msg":"[ ](https://chat.hyperledger.org/channel/perun?msg=c5EQMaBQKF9kFxcK6) :thumbsup: :pray:","username":"MatthiasGeihs.Perun","ts":"2021-10-14T07:38:28.526Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/perun?msg=c5EQMaBQKF9kFxcK6","url":"https://chat.hyperledger.org/channel/perun?msg=c5EQMaBQKF9kFxcK6","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Hi @rjones , could you help us once more to move a project to HLL?\n\n@choeppler and I would like to move https://github.com/perun-network/perun-credential-payment.\n\nI assume we follow the same procedure as last time. I make you admin, you move the project. Correct?","username":"MatthiasGeihs.Perun","ts":"2022-01-10T11:45:00.149Z"}
{"msg":"@MatthiasGeihs.Perun done!","username":"rjones","ts":"2022-01-10T17:54:30.151Z"}
{"msg":"Hi @MatthiasGeihs.Perun how about announcing the latest release of go-Perun https://github.com/hyperledger-labs/go-perun/releases/tag/v0.9.0 also in the /dev/weekly newsletter ?","username":"choeppler","ts":"2022-03-09T23:12:41.432Z"}
{"msg":"Good point. Added an entry here: https://wiki.hyperledger.org/pages/viewpage.action?pageId=62242580\n\nThis is how to suggest additions to the newsletter, right?","username":"MatthiasGeihs.Perun","ts":"2022-03-10T08:50:53.507Z"}
{"msg":"","username":"rjones","ts":"2022-03-23T17:35:49.868Z","type":"room_changed_topic"}
{"msg":"","username":"rjones","ts":"2022-03-23T17:35:49.880Z","type":"room_changed_announcement"}
