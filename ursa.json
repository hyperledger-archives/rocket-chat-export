{"msg":"dhuseby","username":"rjones","ts":"2018-02-21T19:20:57.766Z","type":"subscription-role-added"}
{"msg":"hi","username":"dhuseby","ts":"2018-02-21T19:22:15.638Z"}
{"msg":"Has joined the channel.","username":"hartm","ts":"2018-02-21T19:22:18.431Z","type":"uj"}
{"msg":"@rjones will you set @hartm as the owner?","username":"dhuseby","ts":"2018-02-21T19:22:41.438Z"}
{"msg":"thanks","username":"dhuseby","ts":"2018-02-21T19:22:42.254Z"}
{"msg":"Has joined the channel.","username":"stanliberman","ts":"2018-02-21T19:22:44.038Z","type":"uj"}
{"msg":"Proposal DocumenT:","username":"hartm","ts":"2018-02-21T19:22:45.325Z"}
{"msg":"https://docs.google.com/document/d/1JtFT5L-82egj6shgGXzTsNAg6_UHuMheKfsst6NS_Xo/edit?usp=sharing","username":"hartm","ts":"2018-02-21T19:22:52.790Z"}
{"msg":"Has joined the channel.","username":"MicBowman","ts":"2018-02-21T19:22:55.323Z","type":"uj"}
{"msg":"tada...","username":"MicBowman","ts":"2018-02-21T19:22:58.885Z"}
{"msg":"hartm","username":"rjones","ts":"2018-02-21T19:23:01.496Z","type":"subscription-role-added"}
{"msg":"thanks","username":"dhuseby","ts":"2018-02-21T19:23:05.856Z"}
{"msg":"Thanks Ry!","username":"hartm","ts":"2018-02-21T19:23:11.291Z"}
{"msg":"Sure thing!","username":"rjones","ts":"2018-02-21T19:23:28.587Z"}
{"msg":"@me jumps into the dunk tank","username":"MicBowman","ts":"2018-02-21T19:23:35.158Z"}
{"msg":"_hi_","username":"dhuseby","ts":"2018-02-21T19:23:36.920Z"}
{"msg":"_jumps into the dunk tank_","username":"MicBowman","ts":"2018-02-21T19:23:40.882Z"}
{"msg":"\"; DROP TABLE; \"","username":"hartm","ts":"2018-02-21T19:24:03.407Z"}
{"msg":"Has joined the channel.","username":"amundson","ts":"2018-02-21T19:24:15.408Z","type":"uj"}
{"msg":"Has joined the channel.","username":"rjagadee","ts":"2018-02-21T19:24:54.458Z","type":"uj"}
{"msg":"February 21, 2018 meeting agenda","username":"dhuseby","ts":"2018-02-21T19:25:14.019Z"}
{"msg":"- identify initial contributions what and who","username":"dhuseby","ts":"2018-02-21T19:25:31.748Z"}
{"msg":"- finalize document structure and content","username":"dhuseby","ts":"2018-02-21T19:25:42.048Z"}
{"msg":"- set up meeting schedule","username":"dhuseby","ts":"2018-02-21T19:25:57.412Z"}
{"msg":"Has joined the channel.","username":"Dan","ts":"2018-02-21T19:38:44.678Z","type":"uj"}
{"msg":"Has joined the channel.","username":"nage","ts":"2018-02-21T20:24:24.809Z","type":"uj"}
{"msg":"https://github.com/hyperledger/indy-crypto/blob/master/README.md","username":"nage","ts":"2018-02-21T20:24:31.584Z"}
{"msg":"Initial meeting proposal:  Tuesday, March 6th, at 7:00 AM Pacific Time.  Please feel free to comment if this does or does not work for you.  Thanks!","username":"hartm","ts":"2018-02-21T20:24:37.290Z"}
{"msg":"User <em>User_1</em> added by <em>nage</em>.","username":"nage","ts":"2018-02-21T20:24:50.669Z","type":"au"}
{"msg":"User <em>User_2</em> added by <em>nage</em>.","username":"nage","ts":"2018-02-21T20:25:23.965Z","type":"au"}
{"msg":"User <em>User_3</em> added by <em>nage</em>.","username":"nage","ts":"2018-02-21T20:25:53.256Z","type":"au"}
{"msg":"User <em>User_4</em> added by <em>nage</em>.","username":"nage","ts":"2018-02-21T20:26:08.827Z","type":"au"}
{"msg":"User <em>User_5</em> added by <em>nage</em>.","username":"nage","ts":"2018-02-21T21:10:55.623Z","type":"au"}
{"msg":"Has joined the channel.","username":"Er1ck","ts":"2018-02-21T21:48:59.791Z","type":"uj"}
{"msg":"Has joined the channel.","username":"peter-choe","ts":"2018-02-22T18:16:21.423Z","type":"uj"}
{"msg":"Has joined the channel.","username":"austinwork","ts":"2018-02-22T18:18:04.553Z","type":"uj"}
{"msg":"TLDR from today's meeting:","username":"hartm","ts":"2018-02-22T19:04:21.471Z"}
{"msg":"1)  We should split off the tier 3 portion of the library.  It's probably a better fit for labs, and might hinder the current proposal.","username":"hartm","ts":"2018-02-22T19:04:58.492Z"}
{"msg":"2) Indy and Sawtooth are going to create a repository to begin looking at combining some signature functionality.  If there are some successes, this will be the initial codebase of the project proposal.","username":"hartm","ts":"2018-02-22T19:05:51.795Z"}
{"msg":"3) We need further discussion with Fabric crypto people to discuss their role in this effort.","username":"hartm","ts":"2018-02-22T19:06:18.621Z"}
{"msg":"@hartm does this mean you don't need our wrapper? perfectly fine with me... but we should update the proposal accordingly","username":"MicBowman","ts":"2018-02-22T21:29:39.227Z"}
{"msg":"Has joined the channel.","username":"jsmitchell","ts":"2018-02-22T22:55:04.151Z","type":"uj"}
{"msg":"I'm going to update the proposal.  The Indy/Sawtooth repository will utilize this wrapper functionality, so we will definitely need the Sawtooth wrapper.","username":"hartm","ts":"2018-02-22T23:25:07.390Z"}
{"msg":"Has joined the channel.","username":"kelly_","ts":"2018-02-22T23:48:00.453Z","type":"uj"}
{"msg":"@MicBowman can you push up your wrapper somewhere so we can see it? The pieces we were discussing for signing aren't necessarily the code Sawtooth is using for PoET currently; rather, the libsecp256k1 wrappers for the various languages.","username":"amundson","ts":"2018-02-23T20:29:20.877Z"}
{"msg":"https://github.com/hyperledger/sawtooth-core/tree/master/sdk/rust/src/signing","username":"amundson","ts":"2018-02-23T20:29:59.867Z"}
{"msg":"https://github.com/hyperledger/sawtooth-core/tree/master/signing","username":"amundson","ts":"2018-02-23T20:30:26.139Z"}
{"msg":"https://github.com/hyperledger/sawtooth-core/tree/master/sdk/go/src/sawtooth_sdk/signing","username":"amundson","ts":"2018-02-23T20:30:47.193Z"}
{"msg":"(the non-SDK one is the python package)","username":"amundson","ts":"2018-02-23T20:31:04.921Z"}
{"msg":"https://github.com/hyperledger/sawtooth-core/tree/master/sdk/javascript/signing","username":"amundson","ts":"2018-02-23T20:31:45.153Z"}
{"msg":"I'm not sure we have anything like that for C++ or Java yet","username":"amundson","ts":"2018-02-23T20:32:48.311Z"}
{"msg":"https://github.com/hyperledger/indy-crypto","username":"amundson","ts":"2018-02-23T20:36:14.656Z"}
{"msg":"is there more indy stuff we should be looking at?","username":"amundson","ts":"2018-02-23T20:40:42.559Z"}
{"msg":"Has joined the channel.","username":"smartheye","ts":"2018-02-26T15:06:12.551Z","type":"uj"}
{"msg":"Has joined the channel.","username":"koenbuyens","ts":"2018-02-27T18:14:52.818Z","type":"uj"}
{"msg":"Has joined the channel.","username":"chandrakanthm","ts":"2018-02-28T09:52:31.901Z","type":"uj"}
{"msg":"@amundson i can send it to you separately","username":"MicBowman","ts":"2018-02-28T17:04:36.628Z"}
{"msg":"Has joined the channel.","username":"binhn","ts":"2018-02-28T17:15:50.599Z","type":"uj"}
{"msg":"@here Are people still OK with a call tomorrow morning to discuss progress?  Thanks, and sorry for \"here\" spam.","username":"hartm","ts":"2018-03-05T21:37:24.960Z"}
{"msg":"I’m at Rebooting the Web of Trust, but perhaps someone else from Indy will be able to make it?","username":"nage","ts":"2018-03-05T22:20:48.222Z"}
{"msg":"Should we put it off until next week if you guys are going to be gone?","username":"hartm","ts":"2018-03-05T22:29:02.581Z"}
{"msg":"Has left the channel.","username":"rjones","ts":"2018-03-06T01:56:13.208Z","type":"ul"}
{"msg":"I'm going to be stuck on a plane tomorrow morning :(","username":"Dan","ts":"2018-03-06T02:16:07.873Z"}
{"msg":"@here OK then, let's put this off until next week.  Does Tuesday morning next week work for everyone?","username":"hartm","ts":"2018-03-06T02:34:30.628Z"}
{"msg":"how's about wed afternoon? otherwise, ok to miss me. can't always get everyone and I don't want to slow things down too much.","username":"Dan","ts":"2018-03-06T02:37:37.594Z"}
{"msg":"I think a lot of the Indy folks are going to be at rebooting web of trust.","username":"hartm","ts":"2018-03-06T04:56:03.648Z"}
{"msg":"i m planning to be out next week, but i probably can make the call ","username":"binhn","ts":"2018-03-06T14:43:57.484Z"}
{"msg":"There is a lot of interesting work at Rebooting the Web of Trust about extending TLS libraries to be able to leverage non-CA certificates anchored to blockchains.  It seems like an interesting case to support mutually authenticated connections and ledger membership use cases for our systems.  Im looking for opinions, would that be good work to take up in the shared crypto library, as a HL lab or something else?","username":"nage","ts":"2018-03-07T07:01:17.127Z"}
{"msg":"Has joined the channel.","username":"tobowers","ts":"2018-03-07T21:08:18.257Z","type":"uj"}
{"msg":"this the right place to talk about libindy-crypto?","username":"tobowers","ts":"2018-03-07T21:08:27.031Z"}
{"msg":"@tobowers Depends on the question. But indy-sdk is another appropriate channel since most devs of the library hang out there","username":"lovesh","ts":"2018-03-08T20:32:46.046Z"}
{"msg":"Thanks @lovesh - I sent my question to the hyperledger-indy mailing list. I figured out what I was doing wrong... but I'm still concerned that I passed in a bunch of bad bytes to the FFI verify function (single BLS signature) and the result was a success error code and a True for verified","username":"tobowers","ts":"2018-03-09T07:31:19.047Z"}
{"msg":"  @tobowers That seems like a bug.  If you can recreate it (it sounds like you have found a way to essentially forge a signature) it would definitely be something the indy devs should know about.","username":"hartm","ts":"2018-03-09T16:04:10.157Z"}
{"msg":"@hartm I can't see your email in mailing list. Could you provide more info here or just create a bug in Jira or Github. ","username":"gudkov","ts":"2018-03-09T20:48:41.640Z"}
{"msg":"@hartm , @gudkov https://jira.hyperledger.org/browse/IS-583","username":"tobowers","ts":"2018-03-10T08:23:23.947Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/crypto-lib?msg=GdsptKEAyWetxZ3ag) This result can be easily achieved if you used incorrect data for generator point and verkey/signkey pair. The math is valid only if you use correct (gp, verkey, signkey) tuple. At least i see that Generator Point contains garbage (zero points). If any of (gp, verkey, signkey) values contain garbade the result is unpredictable. If multiplies something by zero it will be always zero.","username":"gudkov","ts":"2018-03-12T16:43:29.854Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/crypto-lib?msg=GdsptKEAyWetxZ3ag","url":"https://chat.hyperledger.org/channel/crypto-lib?msg=GdsptKEAyWetxZ3ag","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/crypto-lib?msg=GdsptKEAyWetxZ3ag) This result can be easily achieved if you used incorrect data for generator point and verkey/signkey pair. The math is valid only if you use correct (gp, verkey, signkey) tuple. At least i see that Generator Point contains garbage (zero points). If any of (gp, verkey, signkey) values contain garbade the result is unpredictable. If multiply something by zero it will be always zero.","username":"gudkov","ts":"2018-03-12T16:43:29.854Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/crypto-lib?msg=GdsptKEAyWetxZ3ag","url":"https://chat.hyperledger.org/channel/crypto-lib?msg=GdsptKEAyWetxZ3ag","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@gudkov @tobowers Yeah, I just looked at your trace.  You're using zero for the generator element, which will give you all kinds of bad results.  Since it seems like you've already fixed this, I wouldn't worry too much about it.  However, note that an adversary can control the bytes for the (message, signature) pair, it cannot control the public or secret keys (or the group generator) and we can generally assume those will be correct (assuming no hardware attacks).","username":"hartm","ts":"2018-03-12T19:12:06.952Z"}
{"msg":"This isn't a bug in indy-crypt, but if it's easy to stop people from using clearly flawed choices (i.e. zero or the point at infinity) as parameters in a side-channel resilient manner (or warn them when they do), it might be worth the time to do it in the long run.","username":"hartm","ts":"2018-03-12T19:14:13.501Z"}
{"msg":"@here Are people still OK with a call tomorrow at 7:00 AM Pacific time (10:00 Eastern)?  There seem to be less scheduling conflicts this week.","username":"hartm","ts":"2018-03-12T22:47:07.396Z"}
{"msg":"@here OK, on second thought, we're not ready for a meeting tomorrow.  I'll try to put together a formal agenda, invite, and everything so that we can maximize participation.  Sorry for the delays.","username":"hartm","ts":"2018-03-13T07:37:20.374Z"}
{"msg":"Talk to everybody next week (or, more likely, in other meetings).","username":"hartm","ts":"2018-03-13T07:37:38.137Z"}
{"msg":"Has joined the channel.","username":"manu","ts":"2018-03-13T16:07:56.958Z","type":"uj"}
{"msg":"Has joined the channel.","username":"Maria","ts":"2018-03-13T16:08:01.120Z","type":"uj"}
{"msg":"@hartm so when is the proposed meeting time?  I'd like to get it in my calendar so that I don't miss it.","username":"dhuseby","ts":"2018-03-15T21:15:46.649Z"}
{"msg":"@dhuseby I'm fishing around with emails to find what works best for people.","username":"hartm","ts":"2018-03-15T22:20:48.109Z"}
{"msg":"Initial proposal is Tuesday at 7:00 AM pacific time, although that is highly subject to change.","username":"hartm","ts":"2018-03-15T22:21:08.464Z"}
{"msg":"That works for me","username":"dhuseby","ts":"2018-03-15T22:23:40.764Z"}
{"msg":"@here After polling everyone, it appears Wednesday at 7:00 AM pacific time is the best meeting time for everyone.  I look forward to speaking with everyone bright and early Wednesday!","username":"hartm","ts":"2018-03-20T01:16:01.971Z"}
{"msg":"Link: https://zoom.us/j/685604650 ","username":"hartm","ts":"2018-03-20T01:16:06.232Z"}
{"msg":"Thanks Hart","username":"dhuseby","ts":"2018-03-20T01:57:10.276Z"}
{"msg":"Has joined the channel.","username":"ShikarSharma","ts":"2018-03-20T22:36:21.033Z","type":"uj"}
{"msg":"@hart are we meeting this morning?","username":"Dan","ts":"2018-03-21T13:04:50.410Z"}
{"msg":"@hartm  are we meeting this morning?","username":"Dan","ts":"2018-03-21T13:04:50.410Z"}
{"msg":"ah n/m got my timezones messed up. talk to you in ~45min.","username":"Dan","ts":"2018-03-21T13:17:52.138Z"}
{"msg":"Relevant links:","username":"hartm","ts":"2018-03-21T14:00:51.411Z"}
{"msg":"https://docs.google.com/document/d/1Z_8o8k_PFRM4XfZyv9jH1_-IyN0CsCMI2JlrGsCX378/edit?usp=sharing","username":"hartm","ts":"2018-03-21T14:00:55.001Z"}
{"msg":"https://docs.google.com/document/d/1JtFT5L-82egj6shgGXzTsNAg6_UHuMheKfsst6NS_Xo/edit?usp=sharing","username":"hartm","ts":"2018-03-21T14:01:09.049Z"}
{"msg":"User <em>User_6</em> added by <em>manu</em>.","username":"manu","ts":"2018-03-21T14:03:02.270Z","type":"au"}
{"msg":"Has joined the channel.","username":"brian038","ts":"2018-03-21T14:03:29.915Z","type":"uj"}
{"msg":"Has joined the channel.","username":"eramitg","ts":"2018-03-21T14:17:18.176Z","type":"uj"}
{"msg":"Leaving this here in case someone has time to experiment: https://doc.rust-lang.org/1.16.0/book/no-stdlib.html","username":"nage","ts":"2018-03-21T14:42:33.782Z"}
{"msg":"and... https://github.com/baidu/rust-sgx-sdk","username":"MicBowman","ts":"2018-03-21T14:45:13.783Z"}
{"msg":"@hartm meeting today?","username":"binhn","ts":"2018-03-28T14:08:44.341Z"}
{"msg":"since there apparently isn't a call today, is there any progress on getting a labs project started?","username":"manu","ts":"2018-03-28T14:28:37.743Z"}
{"msg":"@binhn my understanding from the call last week is that we are alternating weeks","username":"MicBowman","ts":"2018-03-28T15:09:24.908Z"}
{"msg":"we should update the community calendar as it is showing meeting today https://calendar.google.com/calendar/embed?src=linuxfoundation.org_nf9u64g9k9rvd9f8vp4vur23b0%40group.calendar.google.com&ctz=UTC","username":"binhn","ts":"2018-03-28T15:27:37.920Z"}
{"msg":"agree, and @hartm please cancel the calendar invites for the dates where we don't meet","username":"manu","ts":"2018-03-28T15:32:16.741Z"}
{"msg":"@manu @binhn Sorry--I don't have control over the calendar invites, but it looks like this has been fixed.","username":"hartm","ts":"2018-03-28T16:13:37.855Z"}
{"msg":"I've talked to the labs stewards about the labs proposal.  I'll hopefully be able to get the proposal submitted today.","username":"hartm","ts":"2018-03-28T16:14:05.354Z"}
{"msg":"Has joined the channel.","username":"KOttoni","ts":"2018-03-28T16:52:07.611Z","type":"uj"}
{"msg":"Pull request for the labs proposal done:  https://github.com/hartm/hyperledger-labs.github.io/pull/1","username":"hartm","ts":"2018-03-28T22:58:34.371Z"}
{"msg":"Feel free to edit if any of you all like.","username":"hartm","ts":"2018-03-28T22:58:41.890Z"}
{"msg":"Hi Everyone, we now have a repo in Hyperledger Labs:","username":"hartm","ts":"2018-03-29T17:50:24.652Z"}
{"msg":"https://github.com/hyperledger-labs/crypto-lib","username":"hartm","ts":"2018-03-29T17:50:29.127Z"}
{"msg":"@here If you'd like to have write access to hyperledger-labs/crypto-lib so that you can start messing with code, please send me your github ID (hmontgomery@us.fujitsu.com) so that we can get the process started.  Thanks!","username":"hartm","ts":"2018-03-30T00:11:53.411Z"}
{"msg":"Has joined the channel.","username":"Pan0ptic","ts":"2018-03-30T16:28:23.638Z","type":"uj"}
{"msg":"@hartm - https://github.com/hyperledger-labs/crypto-lib/pull/2","username":"amundson","ts":"2018-03-31T04:17:39.845Z"}
{"msg":"Has joined the channel.","username":"thalisson","ts":"2018-04-01T02:41:13.748Z","type":"uj"}
{"msg":"Has joined the channel.","username":"Rumeel_Hussain","ts":"2018-04-03T15:00:13.810Z","type":"uj"}
{"msg":"@here Just a reminder that we WILL have a meeting tomorrow morning at 7:00 AM Pacific time (as per the calendar).  I look forward to speaking with everyone tomorrow!","username":"hartm","ts":"2018-04-03T21:31:42.217Z"}
{"msg":"The planned meeting topics will include 1) going over the new lab infrastructure (we have a lab repo now), 2) discussing how we want to start working, and 3) discussing any sort of governance/proposal suggestions that people may have.  Any other topics that people bring up during the course of the meeting will be fine as well.","username":"hartm","ts":"2018-04-03T21:32:52.780Z"}
{"msg":"I send my regrets.  Myself and a bunch of others are at the Internet Identity Workshop.  I’m really interested in how the build and packaging will shake out so we can transition Indy-crypto code over while we are still using it in our production system.","username":"nage","ts":"2018-04-03T21:42:55.911Z"}
{"msg":"Relevant links for today's meeting:","username":"hartm","ts":"2018-04-04T14:00:20.552Z"}
{"msg":"https://docs.google.com/document/d/1JtFT5L-82egj6shgGXzTsNAg6_UHuMheKfsst6NS_Xo/edit?usp=sharing","username":"hartm","ts":"2018-04-04T14:00:23.624Z"}
{"msg":"https://docs.google.com/document/d/1Z_8o8k_PFRM4XfZyv9jH1_-IyN0CsCMI2JlrGsCX378/edit?usp=sharing","username":"hartm","ts":"2018-04-04T14:00:43.202Z"}
{"msg":"@hartm ugh, I missed the meeting - any important decisions made?","username":"amundson","ts":"2018-04-04T15:46:23.561Z"}
{"msg":"@amundson No worries!  We didn't decide anything particularly important.  We heard a lot from the Fabric folks in attendance (Bin and Jan) about how they wanted to be involved with crypto-lib.  You can see a (very meager) outline of what went on in the discussion notes, which are in the second link above.","username":"hartm","ts":"2018-04-04T15:48:04.661Z"}
{"msg":"should I move forward with adding python and/or go signing SDK from Sawtooth to the crypto-lib labs repo?","username":"amundson","ts":"2018-04-04T15:49:38.079Z"}
{"msg":"@amundson  You're welcome to do so if you like.  It might be a good thing for comparison with Fabric and Indy.","username":"hartm","ts":"2018-04-04T16:00:42.306Z"}
{"msg":"ideally, we mash them all up and come up with the one-true-way","username":"amundson","ts":"2018-04-04T16:04:39.790Z"}
{"msg":"are we meeting now?","username":"Dan","ts":"2018-04-11T14:04:35.298Z"}
{"msg":"@Dan I think the idea is to have it every second week and since there was one last week there would be no meeting today","username":"manu","ts":"2018-04-11T14:06:03.650Z"}
{"msg":"thx @manu \n@hartm I have a recurring invite for every week on my calendar. Could you update that?","username":"Dan","ts":"2018-04-11T14:07:50.054Z"}
{"msg":"Hi Folks , I am an Phd Candidate in www.nitrr.ac.in my Linkedind Profile is https://www.linkedin.com/in/eramitg/ for sake of earning an Phd Degree i was proposed Blockchain Technology research work area to my guide so oom I request all of you gyus ,please guide me and assign me some research oriented task so that we mutullay benifited research related to Hyperledger Umbrella Project , All of you feel free to catch me on twitter or skype to https://twitter.com/eramitg1 or amitg.iitb skype id also in Zoom to in Zoom ID 3649222703 or whatsapp +917773011100 Regards","username":"eramitg","ts":"2018-04-11T15:40:48.539Z"}
{"msg":"@Dan Sorry, Tracy has control of the calendar, and I thought she updated it after this happened two weeks ago.  @tkuhrt, has the calendar been updated?  Thanks a lot.","username":"hartm","ts":"2018-04-11T18:54:38.303Z"}
{"msg":"Has joined the channel.","username":"tkuhrt","ts":"2018-04-11T18:54:38.469Z","type":"uj"}
{"msg":"I see. You forwarded the community calendar notice. I'll just delete that invite and get it directly.","username":"Dan","ts":"2018-04-11T19:37:20.107Z"}
{"msg":"Has joined the channel.","username":"yxnl","ts":"2018-04-12T15:05:49.962Z","type":"uj"}
{"msg":"Hey folks anyone would like to crypto-lib research issue for development with me ","username":"eramitg","ts":"2018-04-12T16:43:55.258Z"}
{"msg":"Has joined the channel.","username":"bdu 5","ts":"2018-04-14T09:55:51.894Z","type":"uj"}
{"msg":"Has joined the channel.","username":"robinrob","ts":"2018-04-16T21:37:10.319Z","type":"uj"}
{"msg":"@here Reminder:  we will be having a meeting tomorrow at the usual time (7:00 AM Pacific time--check the Hyperledger calendar for your time zone).  Thanks!","username":"hartm","ts":"2018-04-18T00:16:30.384Z"}
{"msg":"Meeting notes (and attendee list):  https://docs.google.com/document/d/1Z_8o8k_PFRM4XfZyv9jH1_-IyN0CsCMI2JlrGsCX378/edit?usp=sharing","username":"hartm","ts":"2018-04-18T13:59:34.819Z"}
{"msg":"Has joined the channel.","username":"Jan.Camenisch","ts":"2018-04-18T14:04:16.291Z","type":"uj"}
{"msg":"Paging @nage or others from Indy for crypto lib meeting","username":"Dan","ts":"2018-04-18T14:09:08.524Z"}
{"msg":"I have to send regrets.  I was double booked for the 8:00 hour","username":"nage","ts":"2018-04-18T14:09:41.742Z"}
{"msg":"@ashcherbakov or @gudkov or @danielhardman ?","username":"nage","ts":"2018-04-18T14:10:18.761Z"}
{"msg":"Has joined the channel.","username":"danielhardman","ts":"2018-04-18T14:10:18.905Z","type":"uj"}
{"msg":"do you have the link?","username":"gudkov","ts":"2018-04-18T14:11:51.957Z"}
{"msg":"https://zoom.us/j/685604650","username":"manu","ts":"2018-04-18T14:12:14.351Z"}
{"msg":"@nage Is this a bad time in general, or was this a one-time thing?  Thanks!","username":"hartm","ts":"2018-04-18T14:41:29.470Z"}
{"msg":"I’m hoping a one time thing","username":"nage","ts":"2018-04-18T14:41:45.103Z"}
{"msg":"Has joined the channel.","username":"sstercan","ts":"2018-04-22T09:35:37.854Z","type":"uj"}
{"msg":"Has joined the channel.","username":"trthhrtz","ts":"2018-04-25T07:21:07.210Z","type":"uj"}
{"msg":"Has joined the channel.","username":"IVictorFeng","ts":"2018-04-26T02:30:38.189Z","type":"uj"}
{"msg":"Has joined the channel.","username":"lvndry","ts":"2018-05-01T19:17:17.173Z","type":"uj"}
{"msg":"@here Hi everyone--just a reminder that we'll have a meeting tomorrow at the usual time.  Thanks!","username":"hartm","ts":"2018-05-02T01:59:54.780Z"}
{"msg":"Looks like main agenda will be sawtooth<-->indy signing. I plan to be on (only a few min away now). ","username":"Dan","ts":"2018-05-02T13:51:34.844Z"}
{"msg":"can't get in","username":"binhn","ts":"2018-05-02T14:03:19.978Z"}
{"msg":"My zoom link isn't working either.","username":"hartm","ts":"2018-05-02T14:03:29.663Z"}
{"msg":"Try zoom.us/my/hyperledger.community.backup","username":"hartm","ts":"2018-05-02T14:06:07.871Z"}
{"msg":"I'm in this one.","username":"hartm","ts":"2018-05-02T14:06:10.852Z"}
{"msg":"(The main one seems to be occupied).","username":"hartm","ts":"2018-05-02T14:06:22.650Z"}
{"msg":"@tkuhrt ^^","username":"binhn","ts":"2018-05-02T14:06:44.895Z"}
{"msg":"Just getting this message. Are you all good?","username":"tkuhrt","ts":"2018-05-02T14:07:37.737Z"}
{"msg":"you are probably on the old link","username":"Dan","ts":"2018-05-02T14:07:59.731Z"}
{"msg":"I took control of the hyperledger.community.backup","username":"hartm","ts":"2018-05-02T14:08:05.949Z"}
{"msg":"I can kick people out if necessary ","username":"tkuhrt","ts":"2018-05-02T14:08:07.709Z"}
{"msg":"The main one seems to be full.","username":"hartm","ts":"2018-05-02T14:08:14.526Z"}
{"msg":"https://zoom.us/j/685604650","username":"Dan","ts":"2018-05-02T14:08:28.408Z"}
{"msg":"There are about 6 of us on this one ^","username":"Dan","ts":"2018-05-02T14:09:08.686Z"}
{"msg":"OK.  We will join that one!","username":"hartm","ts":"2018-05-02T14:09:23.584Z"}
{"msg":"Thanks!","username":"hartm","ts":"2018-05-02T14:09:24.823Z"}
{"msg":"That is why the community one is locked","username":"tkuhrt","ts":"2018-05-02T14:09:47.265Z"}
{"msg":"We are almost done finalizing the new Caesar cipher spec. Going to be best confidential txns ever! ","username":"Dan","ts":"2018-05-02T14:09:52.303Z"}
{"msg":"The six of you joined the old meeting ID locking people out of joining the hyperledger.community meeting","username":"tkuhrt","ts":"2018-05-02T14:12:03.309Z"}
{"msg":":-O","username":"Dan","ts":"2018-05-02T14:14:48.656Z"}
{"msg":"Last week I deleted my old invite and grabbed the new invite out of the community calendar","username":"Dan","ts":"2018-05-02T14:15:23.769Z"}
{"msg":"When did you grab it? ","username":"tkuhrt","ts":"2018-05-02T14:16:24.141Z"}
{"msg":"It was updated on Monday","username":"tkuhrt","ts":"2018-05-02T14:16:33.188Z"}
{"msg":"Monday of this week?","username":"Dan","ts":"2018-05-02T14:16:40.343Z"}
{"msg":"Yep","username":"tkuhrt","ts":"2018-05-02T14:16:43.755Z"}
{"msg":"oh yeah I updated last week","username":"Dan","ts":"2018-05-02T14:16:53.303Z"}
{"msg":"Update again, please. :) I am going to delete old meeting IDs so that this won't happen again.","username":"tkuhrt","ts":"2018-05-02T14:17:24.707Z"}
{"msg":"https://github.com/hyperledger-labs/crypto-lib","username":"Dan","ts":"2018-05-02T14:19:37.429Z"}
{"msg":"Has joined the channel.","username":"eabiodun","ts":"2018-05-02T14:22:27.649Z","type":"uj"}
{"msg":"Has joined the channel.","username":"jlaw","ts":"2018-05-02T14:23:15.797Z","type":"uj"}
{"msg":"From Daniel Hardman to Everyone: (10:22 AM)\nindy-crypto bls signatures: https://github.com/hyperledger/indy-crypto/blob/master/libindy-crypto/src/ffi/bls.rs\nindy-crypto Pedersen commitments: https://github.com/hyperledger/indy-crypto/blob/master/libindy-crypto/src/utils/commitment.rs\nFrom Daniel Hardman to Everyone: (10:24 AM)\nindy_crypto_sign() prototype that’s not yet in indy-crypto repo (the one that has a dependency on the wallet construct and needs to be moved down): https://github.com/hyperledger/indy-sdk/blob/master/libindy/src/api/crypto.rs#L167","username":"binhn","ts":"2018-05-02T14:26:21.655Z"}
{"msg":"https://github.com/hyperledger-labs/crypto-lib/blob/master/rust/src/signing/mod.rs#L142","username":"Dan","ts":"2018-05-02T14:37:29.573Z"}
{"msg":"python implementation of the signing library https://github.com/hyperledger/sawtooth-core/tree/master/signing/sawtooth_signing","username":"Dan","ts":"2018-05-02T14:39:29.142Z"}
{"msg":"Open question from meeting: Should threshold signatures etc fit into a unified signing interface or should there be multiple APIs?","username":"Dan","ts":"2018-05-02T14:48:37.373Z"}
{"msg":"Ideally we’d design an API that is abstracted enough that we avoid having multiple. ","username":"dhuseby","ts":"2018-05-02T14:59:06.412Z"}
{"msg":"My action items from the meeting today:\n1. Study the code that the Sawtooth team committed to github.com/hyperledger-labs/crypto-lib; produce a mapping to indy constructs and post the mapping here and on indy and sawtooth mailing lists\n2. Per Hart's request, produce a clean summary of indy APIs that omits all the messy details, so pure API comparison is easy","username":"danielhardman","ts":"2018-05-02T15:21:06.655Z"}
{"msg":"@danielhardman there are examples of the Sawtooth signing code in other languages as well if that is helpful","username":"amundson","ts":"2018-05-02T15:27:26.513Z"}
{"msg":"Has joined the channel.","username":"MohitYadav2317","ts":"2018-05-04T19:46:14.598Z","type":"uj"}
{"msg":"Has joined the channel.","username":"JonGeater","ts":"2018-05-07T17:13:54.001Z","type":"uj"}
{"msg":"Hi All, sorry I’m late to the party.  Been locked out of chat for a while and hadn’t noticed...","username":"JonGeater","ts":"2018-05-07T17:14:24.118Z"}
{"msg":"I’ll review progress to date and join the call on 16th, time willing (I have customer meetings all day but will try to carve out the slot).  Hope I can be helpful to folks","username":"JonGeater","ts":"2018-05-07T17:15:16.068Z"}
{"msg":"Just jumping on in here, I have an implementation of threshold sig that fits behind both PKCS#11 and the eIDAS remote signing APIs just fine.  I don’t think it should matter how your key material is protected or processed for what signing API you call","username":"JonGeater","ts":"2018-05-07T17:16:56.274Z"}
{"msg":"(That’s @Dan )","username":"JonGeater","ts":"2018-05-07T17:17:50.294Z"}
{"msg":"Has joined the channel.","username":"LoveshHarchandani","ts":"2018-05-07T20:38:15.106Z","type":"uj"}
{"msg":"@JonGeater You may also want to talk to the Indy guys about that--they also need threshold signatures (linking @nage).","username":"hartm","ts":"2018-05-07T20:49:08.655Z"}
{"msg":"Cool will do. ","username":"JonGeater","ts":"2018-05-07T20:51:00.877Z"}
{"msg":"Popped an ask in #indy   ","username":"JonGeater","ts":"2018-05-07T20:56:28.741Z"}
{"msg":"Has joined the channel.","username":"Starseven","ts":"2018-05-08T11:56:03.543Z","type":"uj"}
{"msg":"@JonGeater that sounds cool. The question I think you were responding to was whether there should be one signing / verification API that would cover all sig types including ECDSA & Threshold. Or whether it would be better to have those APIs separate. ","username":"Dan","ts":"2018-05-08T13:05:55.327Z"}
{"msg":"@Dan yes exactly.  I agree with @dhuseby    that we should be able to abstract sufficiently to make it a single API.  ","username":"JonGeater","ts":"2018-05-08T13:42:55.316Z"}
{"msg":"The management piece (mainly just key generation in this case) is very different and will get complex, but you had that problem anyway","username":"JonGeater","ts":"2018-05-08T13:44:13.058Z"}
{"msg":"@JonGeater Sounds interesting, could you share a link to the implementation? Which scheme do you implement?","username":"manu","ts":"2018-05-08T13:46:39.170Z"}
{"msg":"(An assumption I’m making here, which is very important, is that the design of the API will delegate policy enforcement to inside the crypto module  and so you won’t have to express semantic details of things like shares and access control inline with the crypto calls themselves.  I hope this is the line we’re going down.  So either an authorised session model or an opaque authtoken model)","username":"JonGeater","ts":"2018-05-08T13:48:39.953Z"}
{"msg":"Hi @manu, yes a few people have asked, I’m looking how we can expose it - it’s currently in our internal gitlab but should be easy enough to port to an exposed server given a little time.  We’re going to put the paper out as a blog post very soon.","username":"JonGeater","ts":"2018-05-08T13:49:55.740Z"}
{"msg":"The scheme is a fairly vanilla Damgard.  We explicitly were not trying to improve the art in MPC signing itself, but rather prove out the other two ends: higher assurance key sharing at the management end, and simple abstract API integration at the client","username":"JonGeater","ts":"2018-05-08T13:51:26.458Z"}
{"msg":"Has joined the channel.","username":"adave","ts":"2018-05-09T06:34:06.795Z","type":"uj"}
{"msg":"Has joined the channel.","username":"nfarley","ts":"2018-05-10T10:45:19.310Z","type":"uj"}
{"msg":"Has joined the channel.","username":"mansoor","ts":"2018-05-10T10:58:44.909Z","type":"uj"}
{"msg":"Has joined the channel.","username":"rfitzpatrick","ts":"2018-05-10T11:47:39.558Z","type":"uj"}
{"msg":"Has joined the channel.","username":"sauravverma","ts":"2018-05-15T10:29:30.341Z","type":"uj"}
{"msg":"@here Cancelling tomorrow's meeting--I think too many people will be away for us to have a reasonable meeting.  Thanks, and talk to you all in two weeks!","username":"hartm","ts":"2018-05-16T02:04:36.168Z"}
{"msg":"@MALodder , are you in this channel?","username":"danielhardman","ts":"2018-05-16T03:58:31.297Z"}
{"msg":"Has joined the channel.","username":"mpiekarska","ts":"2018-05-18T22:23:17.328Z","type":"uj"}
{"msg":"Has joined the channel.","username":"robwahl","ts":"2018-05-19T16:09:23.095Z","type":"uj"}
{"msg":"Has joined the channel.","username":"cre8bidio","ts":"2018-05-22T05:33:11.070Z","type":"uj"}
{"msg":"Has joined the channel.","username":"username343","ts":"2018-05-23T11:59:05.429Z","type":"uj"}
{"msg":"Has joined the channel.","username":"acuestareig","ts":"2018-05-24T15:26:06.042Z","type":"uj"}
{"msg":"Has left the channel.","username":"acuestareig","ts":"2018-05-24T15:28:51.682Z","type":"ul"}
{"msg":"Has joined the channel.","username":"Gandalf","ts":"2018-05-27T04:11:56.307Z","type":"uj"}
{"msg":"Reminder we have a meeting Wed at 2-3pm GMT (8am PDT)\n```Agenda:\n1. Common signing API (discuss proposed code from Indy perspective. Discuss differences between txn signing and block signing)\n2. ZKLang next steps. (Please review slides from 4/18 meeting: http://researcher.watson.ibm.com/researcher/files/zurich-JCA/ZKLang%20-%20v4.pdf)\n```\nJoin from PC, Mac, Linux, iOS or Android: https://zoom.us/my/hyperledger.community\n\nOr iPhone one-tap :\n    US: +16465588656,,4034983298#  or +16699006833,,4034983298# \nOr Telephone:\n    Dial(for higher quality, dial a number based on your current location): \n        US: +1 646 558 8656  or +1 669 900 6833  or +1 855 880 1246 (Toll Free) or +1 877 369 0926 (Toll Free)\n    Meeting ID: 403 498 3298\n    International numbers available: https://zoom.us/u/bAaJoyznp","username":"Dan","ts":"2018-05-29T15:40:09.758Z"}
{"msg":"Reminder we have a meeting Wed at 2-3pm GMT (8am PDT)\nAgenda:\n1. Common signing API (discuss proposed code from Indy perspective. Discuss differences between txn signing and block signing)\n2. ZKLang next steps. (Please review slides from 4/18 meeting: http://researcher.watson.ibm.com/researcher/files/zurich-JCA/ZKLang%20-%20v4.pdf)\n\n_Join from PC, Mac, Linux, iOS or Android: https://zoom.us/my/hyperledger.community\n\nOr iPhone one-tap :\n    US: +16465588656,,4034983298#  or +16699006833,,4034983298# \nOr Telephone:\n    Dial(for higher quality, dial a number based on your current location): \n        US: +1 646 558 8656  or +1 669 900 6833  or +1 855 880 1246 (Toll Free) or +1 877 369 0926 (Toll Free)\n    Meeting ID: 403 498 3298\n    International numbers available: https://zoom.us/u/bAaJoyznp_","username":"Dan","ts":"2018-05-29T15:40:09.758Z"}
{"msg":"Has joined the channel.","username":"jwaup","ts":"2018-05-30T13:53:21.276Z","type":"uj"}
{"msg":"Has joined the channel.","username":"sheehan","ts":"2018-05-30T14:03:44.957Z","type":"uj"}
{"msg":"Has joined the channel.","username":"VipinB","ts":"2018-05-30T14:06:20.868Z","type":"uj"}
{"msg":"minutes https://docs.google.com/document/d/1Z_8o8k_PFRM4XfZyv9jH1_-IyN0CsCMI2JlrGsCX378/edit","username":"VipinB","ts":"2018-05-30T14:08:46.127Z"}
{"msg":"Has joined the channel.","username":"PoojaVarshneya","ts":"2018-05-30T16:06:18.816Z","type":"uj"}
{"msg":"Has joined the channel.","username":"rogerwilcos","ts":"2018-05-30T21:56:45.742Z","type":"uj"}
{"msg":"Has joined the channel.","username":"harika.n","ts":"2018-06-01T11:30:00.209Z","type":"uj"}
{"msg":"Has joined the channel.","username":"RyanWest","ts":"2018-06-07T21:07:29.163Z","type":"uj"}
{"msg":"Has joined the channel.","username":"abraham","ts":"2018-06-08T04:03:28.898Z","type":"uj"}
{"msg":"@here Just a reminder we have a meeting tomorrow at the usual time (7:00 AM bright and early Pacific time).  Hope to hear from many of you then!  Thanks!","username":"hartm","ts":"2018-06-13T01:38:03.176Z"}
{"msg":"Hi, i'm new here, the exact starting time is 8 am PDT?   ","username":"abraham","ts":"2018-06-13T09:17:54.929Z"}
{"msg":"Has joined the channel.","username":"haggs","ts":"2018-06-13T13:49:28.498Z","type":"uj"}
{"msg":"@abraham It's 7 am pacific time--so in about 10 minutes.","username":"hartm","ts":"2018-06-13T13:50:43.517Z"}
{"msg":"Here is link to a document of possible signature types\nhttps://docs.google.com/spreadsheets/d/1ms2q-oKkfIkoloz1SFq-_IAWdTHb7XzpUgaXdQsTPh0/edit?usp=sharing\n\nPlease feel free to add to it if you are using a signature type that is not there","username":"MALodder","ts":"2018-06-13T14:41:24.162Z"}
{"msg":"ECRYPT document mentioned in the call: http://www.ecrypt.eu.org/ecrypt2/documents/D.SPA.20.pdf","username":"manu","ts":"2018-06-13T14:55:12.451Z"}
{"msg":"@manu approved labs, I will ask for +1 from another steward to get this merged- the repo name and lab name has to be same","username":"VipinB","ts":"2018-06-13T15:22:03.590Z"}
{"msg":"thanks!","username":"manu","ts":"2018-06-13T15:31:05.183Z"}
{"msg":"Just ensure that you do -s option when you drop in code","username":"VipinB","ts":"2018-06-13T18:51:19.254Z"}
{"msg":"Has joined the channel.","username":"ryanwest6","ts":"2018-06-14T02:29:33.575Z","type":"uj"}
{"msg":"Has joined the channel.","username":"nhelmy","ts":"2018-06-18T21:08:17.166Z","type":"uj"}
{"msg":"Has joined the channel.","username":"nvxtien","ts":"2018-06-22T11:46:36.525Z","type":"uj"}
{"msg":"Is crypto-lib call on this week? @hartm ","username":"VipinB","ts":"2018-06-25T13:13:54.673Z"}
{"msg":"@VipinB Not sure--we will need to see the final hackfest schedule and phone availability.  If possible, I'll set up a call.","username":"hartm","ts":"2018-06-25T19:14:15.010Z"}
{"msg":"It may not be at the same time? anyway...","username":"VipinB","ts":"2018-06-25T20:15:47.177Z"}
{"msg":"Looks like it will be in the 6:00-8:00 range (AM, Pacific time) on Thursday, among other times, although the schedule is never firm on hackfests.  Not sure whether we'll be able to set up a call though.","username":"hartm","ts":"2018-06-27T07:58:05.501Z"}
{"msg":"Has joined the channel.","username":"alain2sf","ts":"2018-06-27T13:36:11.675Z","type":"uj"}
{"msg":"I'm sorry I couldn't make the call today","username":"dhuseby","ts":"2018-06-27T14:25:15.786Z"}
{"msg":"I'm literally on a plane to New Orleans","username":"dhuseby","ts":"2018-06-27T14:25:24.352Z"}
{"msg":"I tried to call in using Zoom and it seems to be working but I'm hearing no audio","username":"dhuseby","ts":"2018-06-27T14:25:36.135Z"}
{"msg":"have fun in amsterdam","username":"dhuseby","ts":"2018-06-27T14:25:53.535Z"}
{"msg":"I wish I was there","username":"dhuseby","ts":"2018-06-27T14:25:56.094Z"}
{"msg":"https://docs.google.com/document/d/1JtFT5L-82egj6shgGXzTsNAg6_UHuMheKfsst6NS_Xo/edit?usp=sharing","username":"hartm","ts":"2018-06-28T11:06:58.325Z"}
{"msg":"Above is the project proposal document.","username":"hartm","ts":"2018-06-28T11:07:09.268Z"}
{"msg":"Introduction deck we are shared at the Hackfest https://docs.google.com/presentation/d/1lz3AcHSoHR0xZ_fML--8I2lsUUO3L0WmXeZXqVNU27c","username":"nage","ts":"2018-06-28T11:13:56.930Z"}
{"msg":"If you would like edit rights for the doc PM your google account address and I will add you","username":"nage","ts":"2018-06-28T11:14:16.564Z"}
{"msg":"Has joined the channel.","username":"dimaxgl","ts":"2018-06-28T11:49:53.675Z","type":"uj"}
{"msg":"Has joined the channel.","username":"chilipepper","ts":"2018-06-28T12:03:23.060Z","type":"uj"}
{"msg":"Has joined the channel.","username":"sativ","ts":"2018-06-28T12:21:34.629Z","type":"uj"}
{"msg":"Has joined the channel.","username":"rjones","ts":"2018-06-28T12:25:15.262Z","type":"uj"}
{"msg":"https://lists.hyperledger.org/g/labs","username":"rjones","ts":"2018-06-28T12:25:20.611Z"}
{"msg":"Has joined the channel.","username":"iserikov","ts":"2018-06-28T12:26:31.136Z","type":"uj"}
{"msg":"Everyone, please join the labs list (listed above) if you're interested in following along until we have an email list.  Thanks!","username":"hartm","ts":"2018-06-28T12:28:51.353Z"}
{"msg":"Has joined the channel.","username":"neewy","ts":"2018-06-28T12:29:01.857Z","type":"uj"}
{"msg":"https://github.com/hyperledger/fabric-amcl go implementation","username":"rjones","ts":"2018-06-28T12:47:00.426Z"}
{"msg":"https://docs.google.com/document/d/1Z_8o8k_PFRM4XfZyv9jH1_-IyN0CsCMI2JlrGsCX378/edit?usp=sharing","username":"hartm","ts":"2018-06-28T13:11:05.854Z"}
{"msg":"Has joined the channel.","username":"RyanBennett","ts":"2018-06-28T13:11:56.069Z","type":"uj"}
{"msg":"Has joined the channel.","username":"alexeykoren","ts":"2018-06-28T13:17:30.794Z","type":"uj"}
{"msg":"Has joined the channel.","username":"alkopnin","ts":"2018-06-28T13:17:39.902Z","type":"uj"}
{"msg":"Has joined the channel.","username":"doom2doom","ts":"2018-06-28T13:27:57.607Z","type":"uj"}
{"msg":"I can't tell from the online notes.. does zmix = zklang?","username":"Dan","ts":"2018-06-28T16:42:03.382Z"}
{"msg":"Also notes imply indy is dropping BLS signatures in favor of something in zmix?","username":"Dan","ts":"2018-06-28T16:42:31.645Z"}
{"msg":"Has joined the channel.","username":"hvandurme","ts":"2018-06-29T07:54:06.618Z","type":"uj"}
{"msg":"no zmix is the CL signature implementation.  ZKLang will be part of the ZMix interface (eventually)","username":"nage","ts":"2018-06-29T08:27:48.163Z"}
{"msg":"we are keeping our BLS signature stuff in the ZMix repo for now","username":"nage","ts":"2018-06-29T08:27:56.836Z"}
{"msg":"I'm working on replacing \"indy crypto\" names in the indy-crypto repo with \"zmix\", but essentially the ZMix repo will start with the code in indy-crypto","username":"nage","ts":"2018-06-29T08:28:43.495Z"}
{"msg":"Here's the draft of the applications track document from the ZKProof.org conference: https://docs.google.com/document/d/1spgtYG8iXZ_NjUXdN8AEdKdGmaulE8r-mf7NsQ-_y4E","username":"jlaw","ts":"2018-06-29T08:55:02.327Z"}
{"msg":"Has joined the channel.","username":"AbidiBassem","ts":"2018-06-29T11:07:43.624Z","type":"uj"}
{"msg":"Has joined the channel.","username":"jaromil","ts":"2018-06-29T11:57:16.048Z","type":"uj"}
{"msg":"hi everyone from hyperledger hackfest in Amsterdam. I've been attending some talks and interactions, while I'm working on the integration of my VM (zenroom.dyne.org) into some projects. I've been told I should join this group too, since I have experience of using amcl (milagro) in C and succesfully build it to wasm too (that's one of the zenroom targets). I'm a sporadic and mostly docs related contributor to the C milagro implementation.","username":"jaromil","ts":"2018-06-29T11:59:36.126Z"}
{"msg":"I think it was @nage suggesting that. You got me sooo interested that I've even accepted to leave IRC for a web interface :^) I'd be happy to help with milagro if needed and to reply any question about zenroom. I'm hacking away on my laptop in the big room and will attend next sessions if you like to meet in person. @nage if you are still around today would like to have a brief talk before leaving!","username":"jaromil","ts":"2018-06-29T12:03:36.912Z"}
{"msg":"Please!","username":"nage","ts":"2018-06-29T12:04:12.753Z"}
{"msg":"I'd like to write an email so subscribed hyperledger-technical-discuss writing text in emacs <3 hope someone is attending the moderated queue","username":"jaromil","ts":"2018-06-29T22:13:49.177Z"}
{"msg":"chat is unwieldy. so sorry i missed the meeting in person about crypto-lib, was there one?. i'd like to shill langsec for a moment :^D","username":"jaromil","ts":"2018-06-29T22:14:31.578Z"}
{"msg":"Has joined the channel.","username":"bbehlendorf","ts":"2018-07-07T21:48:38.538Z","type":"uj"}
{"msg":"@manu Do you have any specific tests for z-mix that you have so far? It would be nice to build on your starting point if any","username":"MALodder","ts":"2018-07-09T16:57:39.725Z"}
{"msg":"Not yet, but i think the big picture should be fairly straightforward: we test parsing of valid JSON ZKL statements, test whether we can successfully create a proof with a valid corresponding witness, and check that the proof verifies. And the proof components should allow for individual unit tests","username":"manu","ts":"2018-07-09T17:24:16.477Z"}
{"msg":"okay I'm starting with some initial documentation for z-mix that I can have committed this week","username":"MALodder","ts":"2018-07-09T22:27:25.094Z"}
{"msg":"Hello, who has merge rights to https://github.com/hyperledger-labs/z-mix? Can someone give Mike Lodder the merge rights?  His github name is `mikelodder7`","username":"lovesh","ts":"2018-07-10T19:16:29.438Z"}
{"msg":"Hello, who has merge rights to https://github.com/hyperledger-labs/z-mix? Can someone give Mike Lodder the merge rights?  His github name is `mikelodder7`","username":"lovesh","ts":"2018-07-10T19:16:29.438Z"}
{"msg":"Hello, who has merge rights to https://github.com/hyperledger-labs/z-mix? Can someone give Mike Lodder the merge rights?  His github name is `mikelodder7`","username":"lovesh","ts":"2018-07-10T19:16:29.438Z"}
{"msg":"Hello, who has merge rights to https://github.com/hyperledger-labs/z-mix? Can someone give Mike Lodder the merge rights?  His github name is `mikelodder7`","username":"lovesh","ts":"2018-07-10T19:16:29.438Z"}
{"msg":"Lovesh and I have created some PR's for z-mix and need them reviewed. Who has write access to z-mix?","username":"MALodder","ts":"2018-07-10T20:26:52.931Z"}
{"msg":"I am assuming we will use Apache milagro crypto for our implementation. For that we need to build a rust crate from the amcl source which requires us to choose curves we want to work with. Which curves do we wanna support? I am assuming we can start with BLS12-381 (supports pairing).","username":"lovesh","ts":"2018-07-10T21:34:41.751Z"}
{"msg":"I am assuming we will use Apache milagro crypto for our implementation. For that we need to build a rust crate from the amcl source which requires us to choose curves we want to work with. Which curves do we wanna support? I am assuming we can start with BLS12-381 (supports type-3 pairing).","username":"lovesh","ts":"2018-07-10T21:34:41.751Z"}
{"msg":"I am assuming we will use Apache milagro crypto for our implementation. For that we need to build a rust crate from the amcl source which requires us to choose curves we want to work with. Which curves do we wanna support? I am assuming we can start with BLS12-381 (supports type-3 pairing). @manu Do you mind supporting Idemix over BLS12-381/383 rather than BN-254","username":"lovesh","ts":"2018-07-10T21:34:41.751Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/crypto-lib?msg=RNe58vhaAJgw6rM4y) @MALodder Both of us have access, thanks to Tracy","username":"lovesh","ts":"2018-07-10T22:00:19.594Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/crypto-lib?msg=RNe58vhaAJgw6rM4y","url":"https://chat.hyperledger.org/channel/crypto-lib?msg=RNe58vhaAJgw6rM4y","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Also, do we need a separate repository like hyperledger-labs/amcl or we are ok with amcl being a sub crate inside z-mix","username":"lovesh","ts":"2018-07-10T22:18:18.341Z"}
{"msg":"Also, do we need a separate repository like hyperledger-labs/amcl or are we ok with amcl being a sub crate inside z-mix","username":"lovesh","ts":"2018-07-10T22:18:18.341Z"}
{"msg":"@here Just a reminder--we have a meeting tomorrow at the usual time.  I've emailed the (rough) agenda to the labs email list--sign up for it if you haven't already.  Thanks!","username":"hartm","ts":"2018-07-11T02:40:12.462Z"}
{"msg":"Has joined the channel.","username":"n3m4nja","ts":"2018-07-11T06:54:42.321Z","type":"uj"}
{"msg":"Has joined the channel.","username":"n3m","ts":"2018-07-11T07:33:06.168Z","type":"uj"}
{"msg":"[ ](https://chat.hyperledger.org/channel/crypto-lib?msg=yo7Z3PZeFYXRb8Rjn) @lovesh Sure, but I think at some point we should have it configurable and at least support a couple of curves, what do you think?","username":"manu","ts":"2018-07-11T07:41:54.580Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/crypto-lib?msg=yo7Z3PZeFYXRb8Rjn","url":"https://chat.hyperledger.org/channel/crypto-lib?msg=yo7Z3PZeFYXRb8Rjn","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@lovesh @MALodder Didn't we say we won't do direct commits but do everything through PRs? Also, the license headers are missing on every file. ","username":"manu","ts":"2018-07-11T07:51:57.986Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/crypto-lib?msg=3cNKWRcDzRJiobcjj) @manu We already updated AMCL crate to support different curves through build configuration and PR was accepted to upstream, but it isn't possible to select different curves in runtime for now.","username":"gudkov","ts":"2018-07-11T09:19:23.067Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/crypto-lib?msg=3cNKWRcDzRJiobcjj","url":"https://chat.hyperledger.org/channel/crypto-lib?msg=3cNKWRcDzRJiobcjj","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Meeting notes:  https://docs.google.com/document/d/1Z_8o8k_PFRM4XfZyv9jH1_-IyN0CsCMI2JlrGsCX378/edit?usp=sharing","username":"hartm","ts":"2018-07-11T14:02:06.488Z"}
{"msg":"~~~~~~ Begin Meeting ~~~~~","username":"Dan","ts":"2018-07-11T14:04:04.359Z"}
{"msg":"https://docs.google.com/document/d/1JtFT5L-82egj6shgGXzTsNAg6_UHuMheKfsst6NS_Xo/edit?usp=sharing","username":"hartm","ts":"2018-07-11T14:36:11.051Z"}
{"msg":"(Above is the very tentative project proposal document).","username":"hartm","ts":"2018-07-11T14:36:29.140Z"}
{"msg":"zmix deck: https://docs.google.com/presentation/d/1lz3AcHSoHR0xZ_fML--8I2lsUUO3L0WmXeZXqVNU27c/edit","username":"manu","ts":"2018-07-11T14:38:33.139Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/crypto-lib?msg=mGrpJkBd3kqyJQoaK) @manu Yes Lovesh and I are doing everything through PR's","username":"MALodder","ts":"2018-07-11T14:39:26.477Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/crypto-lib?msg=mGrpJkBd3kqyJQoaK","url":"https://chat.hyperledger.org/channel/crypto-lib?msg=mGrpJkBd3kqyJQoaK","remote":true,"fileId":null,"fileName":null}]}
{"msg":"https://docs.google.com/presentation/d/1DbRUxM19vgL15_ivSuCFiq0t7UInv6NODVf0OMNAP5g/edit#slide=id.p6","username":"hartm","ts":"2018-07-11T14:40:39.099Z"}
{"msg":"@dhuseby can you please double check that the lab repo prevents direct pushing to master?","username":"Dan","ts":"2018-07-11T14:58:30.919Z"}
{"msg":"~~~~~~ End Meeting ~~~~","username":"Dan","ts":"2018-07-11T15:00:01.605Z"}
{"msg":"@Dan I just pinged Ry about the repo question, I'll let you know what he says.","username":"dhuseby","ts":"2018-07-11T15:48:29.836Z"}
{"msg":"@Dan @rjones said that we'll probably have to use the PR process.","username":"dhuseby","ts":"2018-07-11T18:06:21.427Z"}
{"msg":"he wasn't sure","username":"dhuseby","ts":"2018-07-11T18:06:24.433Z"}
{"msg":"I have updated the repo to include the initial interface for the parser. If anyone has any objections please post them here or create a an issue in github","username":"MALodder","ts":"2018-07-11T20:39:35.850Z"}
{"msg":"Has joined the channel.","username":"david.b.crypto","ts":"2018-07-12T01:42:11.415Z","type":"uj"}
{"msg":"Thanks @dhuseby. @rjones question was whether the repo allowed force pushes. Definitely don't want that.  Do want PR process and enforcement of DCO etc. ","username":"Dan","ts":"2018-07-12T13:04:10.123Z"}
{"msg":"it should not allow force pushes in the default config","username":"rjones","ts":"2018-07-12T14:25:51.435Z"}
{"msg":"hej, it seem my zoom link for the call today is outdated. Could anyone send the recent link","username":"Jan.Camenisch","ts":"2018-07-18T14:07:06.894Z"}
{"msg":"@Jan.Camenisch  Hi Jan, the meetings are every other week (and this week is the off week).  The Hyperledger calendar (https://wiki.hyperledger.org/community/calendar-public-meetings) has the schedule and all the meeting links.","username":"hartm","ts":"2018-07-19T01:01:06.733Z"}
{"msg":"Thanks Hart - I did eventually realize that I was a week off :-) In any case thanks for the link, that will help to realize that faster next time!","username":"Jan.Camenisch","ts":"2018-07-19T09:13:08.002Z"}
{"msg":"Has joined the channel.","username":"sm1972","ts":"2018-07-23T14:30:43.486Z","type":"uj"}
{"msg":"@here Just a reminder for tomorrow's meeting at the usual time (7:00 AM Pacific time).  Hope to talk to everyone tomorrow!  Thanks!","username":"hartm","ts":"2018-07-25T01:47:00.088Z"}
{"msg":"https://docs.google.com/document/d/1BvAXUGR6Gur12yEPbqCegiAuOChiZqEMp6CO3z8RxMk/edit?usp=sharing\n","username":"hartm","ts":"2018-07-25T14:03:58.589Z"}
{"msg":"Has joined the channel.","username":"thiyagucse01","ts":"2018-07-27T10:44:21.332Z","type":"uj"}
{"msg":"Does anyone have a preference for the crypto-lib namespace","username":"MALodder","ts":"2018-07-27T21:03:02.666Z"}
{"msg":"keep in mind that when it compiles, the library name will be prefixed with *lib* so libcrypto-lib would look weird to me","username":"MALodder","ts":"2018-07-27T21:03:48.026Z"}
{"msg":"hypercrypto? hcrypto?","username":"MALodder","ts":"2018-07-27T21:04:43.632Z"}
{"msg":"hyperledger-crypto?","username":"MALodder","ts":"2018-07-27T21:05:07.627Z"}
{"msg":"hl-crypto?","username":"MALodder","ts":"2018-07-27T21:05:11.239Z"}
{"msg":"I don't think hcl would work due to https://www.hcl.com","username":"MALodder","ts":"2018-07-27T21:05:58.536Z"}
{"msg":"plus crypto and acid?","username":"MALodder","ts":"2018-07-27T21:07:18.256Z"}
{"msg":"I'd like opinions before I give mine","username":"MALodder","ts":"2018-07-27T21:12:17.160Z"}
{"msg":"I have to attend the marketing committee meeting next week to discuss stuff around the publication of the whitepaper.  Should I ask them to try to come up with something good?","username":"hartm","ts":"2018-07-27T22:19:51.987Z"}
{"msg":"HCl would be funny given that NaCl is a well-known crypto library. But i agree that the -lib is no good, so hyperledger-crypto or hl-crypto make sense to me. Given that e.g. hyperledger fabric's repo is called 'fabric', that would mean our repo should be called 'crypto'. ","username":"manu","ts":"2018-07-30T13:41:13.681Z"}
{"msg":"I'm think hl-crypto","username":"MALodder","ts":"2018-07-30T19:49:34.661Z"}
{"msg":"@MALodder any thoughts on approach we should take to merging sawtooth and indy signing libraries?","username":"amundson","ts":"2018-07-31T00:55:36.068Z"}
{"msg":"I was thinking that’s what the common signing interface was for. See https://docs.google.com/document/d/1BvAXUGR6Gur12yEPbqCegiAuOChiZqEMp6CO3z8RxMk @amundson [ ](https://chat.hyperledger.org/channel/crypto-lib?msg=SquDHu6ZP4dfnuwNn)","username":"MALodder","ts":"2018-07-31T01:15:13.406Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/crypto-lib?msg=SquDHu6ZP4dfnuwNn","url":"https://chat.hyperledger.org/channel/crypto-lib?msg=SquDHu6ZP4dfnuwNn","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I’m going to be adding privacy preserving signatures to that as well","username":"MALodder","ts":"2018-07-31T01:15:34.423Z"}
{"msg":"Let me know if what’s there doesn’t work. Feel free to add comments","username":"MALodder","ts":"2018-07-31T01:15:54.077Z"}
{"msg":"I have submitted a PR to merge sawtooth and Indy into one repo. Then I’m going to take a try and merging the interface ","username":"MALodder","ts":"2018-07-31T01:16:36.845Z"}
{"msg":"@MALodder the doc doesn't say much :)","username":"amundson","ts":"2018-07-31T01:22:18.979Z"}
{"msg":"Indy uses Ed25519 signatures and BLS-254","username":"MALodder","ts":"2018-07-31T01:22:28.295Z"}
{"msg":"what I'm wondering is what we find lacking in the Sawtooth signing API, so we can discuss specifics on how we would integrate those things. or if we don't have consensus with Sawtooth's signing API as a starting point, I think then it would be great to know why so we can attempt to address that in the new design.","username":"amundson","ts":"2018-07-31T01:24:46.926Z"}
{"msg":"yeah open issue https://github.com/dear-github/dear-github/issues/157","username":"rjones","ts":"2018-07-31T01:25:31.954Z"}
{"msg":"If we end up with something backward-compatible or at least reasonably close to the current sawtooth signing api, that will greatly help us port to crypto-lib (and may give us a boost in creating the other language implementations, if we can take code from Sawtooth to get them started)","username":"amundson","ts":"2018-07-31T01:32:19.557Z"}
{"msg":"I think the Sawtooth signing interface is very close to what we had in mind in terms of an API.","username":"hartm","ts":"2018-07-31T13:07:04.430Z"}
{"msg":"It wasn't that the Sawtooth API is \"lacking\", just that we need more general rules for signature APIs if we want to extend an API to more signature protocols.","username":"hartm","ts":"2018-07-31T14:09:26.262Z"}
{"msg":"Probably the biggest change we need to make is right now with the sawtooth signing api is the notion for type objects. Currently its using a factory method to create a context. We are proposing that we use type objects that encapsulate the algorithms. Taking what's currently there, we can create the ECDSA_Secp256K1_SHA256 type object. It could still be created using the factory method.","username":"MALodder","ts":"2018-07-31T14:15:49.436Z"}
{"msg":"Maybe we could shorten the names to just SECP256K1_SHA256 but I like having the ECDSA prefix for crypto noobs","username":"MALodder","ts":"2018-07-31T14:17:08.905Z"}
{"msg":"maybe that's not a problem with Hyperledger projects. Thoughts?","username":"MALodder","ts":"2018-07-31T14:17:27.589Z"}
{"msg":"@MALodder we could do a before/after of the secp256k1 test code (which is essentially examples for our purpose), so that it's not abstract; the rust code is https://github.com/hyperledger/sawtooth-core/blob/master/sdk/rust/src/signing/secp256k1.rs and the python code is https://github.com/hyperledger/sawtooth-core/blob/master/signing/tests/test_secp256k1_signer.py","username":"amundson","ts":"2018-07-31T14:44:29.953Z"}
{"msg":"so, for example, we can take single_key_signing() which today looks like:","username":"amundson","ts":"2018-07-31T14:47:41.242Z"}
{"msg":"```let context = create_context(\"secp256k1\").unwrap();\nlet factory = CryptoFactory::new(&*context);\nlet priv_key = Secp256k1PrivateKey::from_hex(KEY1_PRIV_HEX).unwrap();\nlet signer = factory.new_signer(&priv_key);\nlet signature = signer.sign(&String::from(MSG1).into_bytes()).unwrap();\n```","username":"amundson","ts":"2018-07-31T14:47:45.838Z"}
{"msg":"and mock up what it would look like after","username":"amundson","ts":"2018-07-31T14:47:56.278Z"}
{"msg":"sure","username":"MALodder","ts":"2018-07-31T15:36:10.074Z"}
{"msg":"FWIW, one of the enhancements we are talking about is a function we can combine the first four lines for things like CLI commands - \"let signer = create_secp256k1_signer_from_hex(KEY1_PRIV_HEX)\" or something like that since those four lines, while useful for more complex apps, are boiler plate for the simple case.","username":"amundson","ts":"2018-07-31T16:32:42.297Z"}
{"msg":"I have added content for randomizable signatures https://docs.google.com/document/d/1BvAXUGR6Gur12yEPbqCegiAuOChiZqEMp6CO3z8RxMk/edit#bookmark=id.wfot47f66ki4","username":"MALodder","ts":"2018-08-01T14:30:41.708Z"}
{"msg":"Has joined the channel.","username":"manoj485","ts":"2018-08-06T09:52:17.529Z","type":"uj"}
{"msg":"Hi , I need to create publickey when user registered and need send it to user, then user needs create privatekey it is possible in hyperledger? if possible how?","username":"manoj485","ts":"2018-08-06T09:52:49.616Z"}
{"msg":"@here Just a reminder of tomorrow's meeting.  Looking forward to speaking with everyone.  Thanks!","username":"hartm","ts":"2018-08-08T01:44:06.166Z"}
{"msg":" Meeting Notes:  https://docs.google.com/document/d/1Z_8o8k_PFRM4XfZyv9jH1_-IyN0CsCMI2JlrGsCX378/edit?usp=sharing","username":"hartm","ts":"2018-08-08T14:05:41.429Z"}
{"msg":"(Ancient, needs edits) \"Proposal\" document: https://docs.google.com/document/d/1JtFT5L-82egj6shgGXzTsNAg6_UHuMheKfsst6NS_Xo/edit?usp=sharing","username":"hartm","ts":"2018-08-08T14:31:04.239Z"}
{"msg":"@dhuseby I think LGPL is a compatible license but can you double check that's copacetic? (Per discussion that libsnarks has a downstream link dependency on https://gmplib.org/)","username":"Dan","ts":"2018-08-08T14:59:59.149Z"}
{"msg":"So I wasn't clear what the next steps that are required to move crypto-lib from labs to incubator. Can someone put those details here?","username":"MALodder","ts":"2018-08-08T16:08:21.468Z"}
{"msg":"has anyone looked at Ring, and if so, any thoughts? https://briansmith.org/rustdoc/ring/signature/index.html","username":"amundson","ts":"2018-08-08T17:06:22.636Z"}
{"msg":"I've looked at it and played around with it. If 1 was super easy to use and 10 was the hardest I would peg it at a 5. They've simplified some things but expose some things like passing RNG to key creation and signing which I think could be abstracted. We could use it for some things but if you include openssl and lib sodium then you have everything ring exposes but faster in performance","username":"MALodder","ts":"2018-08-08T17:37:21.729Z"}
{"msg":"how can i get block hash from ledger","username":"manoj485","ts":"2018-08-09T06:46:42.613Z"}
{"msg":"Which ledger?","username":"MALodder","ts":"2018-08-09T18:45:30.348Z"}
{"msg":"@manoj485 this is probably not the best channel for this question- if it is a specific ledger then ask in the appropriate channel i.e. #fabric #sawtooth  #burrow etc. Or #hyperledger-explorer ","username":"VipinB","ts":"2018-08-10T13:42:34.184Z"}
{"msg":"@hartm \nHi there,\nZKLang regular meetings on Mondays are mentioned in the last minutes. \nWhat is the time and is it every Monday? Do you already have the calendar event?","username":"alkopnin","ts":"2018-08-10T15:25:54.571Z"}
{"msg":"8AM MDT every Monday","username":"MALodder","ts":"2018-08-10T15:42:01.080Z"}
{"msg":"@amundson do you have some time to discuss what you have in crypto-lib and consolidating that to the simple signature interface with me?","username":"MALodder","ts":"2018-08-10T15:58:49.842Z"}
{"msg":"@MALodder The ZKLang meeting doesn't appear to be in the Hyperledger calendar.  Do you guys think you could ask to have it added?  Thanks! ","username":"hartm","ts":"2018-08-10T16:42:58.476Z"}
{"msg":"Yes ","username":"MALodder","ts":"2018-08-10T16:43:24.914Z"}
{"msg":"Has joined the channel.","username":"ericmvaughn","ts":"2018-08-10T17:57:13.515Z","type":"uj"}
{"msg":"@MALodder yeah, I'll ping you via DM","username":"amundson","ts":"2018-08-10T18:34:39.625Z"}
{"msg":"One way function interface https://github.com/hyperledger-labs/z-mix/pull/9","username":"lovesh","ts":"2018-08-13T19:40:07.535Z"}
{"msg":"@MALodder I'm one of the people who adds it to the calendar - shoot me an email rjones@linuxfoundation.org","username":"rjones","ts":"2018-08-13T19:44:33.581Z"}
{"msg":"@MALodder I'm the person that adds it to the calendar - shoot me an email rjones@linuxfoundation.org","username":"rjones","ts":"2018-08-13T19:44:33.581Z"}
{"msg":"s/the/one of &/","username":"rjones","ts":"2018-08-13T19:44:44.613Z"}
{"msg":"Hash function interface https://github.com/hyperledger-labs/z-mix/pull/10","username":"lovesh","ts":"2018-08-13T19:51:48.765Z"}
{"msg":"This interface is sufficient for both fixed-length output hash functions and XOFs. Would it be preferable to have 2 interfaces? The difference appears in the signature of the `digest` method.","username":"lovesh","ts":"2018-08-13T20:05:32.423Z"}
{"msg":"Signature scheme interface https://github.com/hyperledger-labs/z-mix/pull/11","username":"lovesh","ts":"2018-08-14T08:45:54.030Z"}
{"msg":"BLS12-381 curve from amcl https://github.com/hyperledger-labs/z-mix/pull/12","username":"lovesh","ts":"2018-08-14T09:09:41.126Z"}
{"msg":"@lovesh Where are you using one-way functions in your protocols?  I'm not sure why you need that interface. ","username":"hartm","ts":"2018-08-14T15:39:01.092Z"}
{"msg":"@rjones here is info, every monday at 8AM MDT\nhttps://zoom.us/j/594175308\nAgenda: https://docs.google.com/document/d/1CwVljF8fS5NwF6NAppCvD4jLtH9t2m1rkut54hYGLm0","username":"MALodder","ts":"2018-08-14T16:30:35.114Z"}
{"msg":"@MALodder I can't access that agenda - it says access denied. Does it have public read access?","username":"rjones","ts":"2018-08-14T17:05:41.665Z"}
{"msg":"I’ll check","username":"MALodder","ts":"2018-08-14T17:05:55.892Z"}
{"msg":"But probably not","username":"MALodder","ts":"2018-08-14T17:06:00.637Z"}
{"msg":"what do you want the meeting named?","username":"rjones","ts":"2018-08-14T17:09:44.658Z"}
{"msg":"Zklang ","username":"MALodder","ts":"2018-08-14T17:21:02.495Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/crypto-lib?msg=j9RDF9Jjj54QN57Nj) @hartm When we need modular exponentiation or exponentiation of hash which is needed in creating domain pseudonyms in idemix","username":"lovesh","ts":"2018-08-15T15:37:57.043Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/crypto-lib?msg=j9RDF9Jjj54QN57Nj","url":"https://chat.hyperledger.org/channel/crypto-lib?msg=j9RDF9Jjj54QN57Nj","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@lovesh Are you using more than the explicit guarantees of a one-way function though (i.e., pseudorandomness of the output)?","username":"hartm","ts":"2018-08-16T07:56:51.868Z"}
{"msg":"we should maybe call it PRF instead","username":"manu","ts":"2018-08-16T07:59:40.759Z"}
{"msg":"@hartm Yes, we want the output to be pseudorandom.","username":"lovesh","ts":"2018-08-16T08:51:33.975Z"}
{"msg":"@lovesh Manu is right here.  The output of one-way functions doesn't have to be pseudorandom.  This primitive isn't named correctly.","username":"hartm","ts":"2018-08-16T13:57:25.566Z"}
{"msg":"@hartm @manu Alright, i will rename. Thanks","username":"lovesh","ts":"2018-08-16T14:07:57.156Z"}
{"msg":"@lovesh Are you using any properties besides pseudorandomness of the output?","username":"hartm","ts":"2018-08-16T14:09:34.813Z"}
{"msg":"@hartm No","username":"lovesh","ts":"2018-08-16T14:40:25.992Z"}
{"msg":"@lovesh OK, as Manu suggests, we should probably call it a PRF then.","username":"hartm","ts":"2018-08-16T14:43:23.739Z"}
{"msg":"Rename one way function to PRF https://github.com/hyperledger-labs/z-mix/pull/13","username":"lovesh","ts":"2018-08-16T15:00:07.480Z"}
{"msg":"@lovesh I just looked at your code again.  It doesn't look like you're computing a PRF since there's no secret key defined in your interface.  It looks like you're just computing g^x for some value x over a curve with a known generator g.  Can you explicitly define what you want to compute, and what properties you want the input and output to have?  Thanks!","username":"hartm","ts":"2018-08-16T18:13:01.292Z"}
{"msg":"Guys!   Please, Could you open https://docs.google.com/document/d/1CwVljF8fS5NwF6NAppCvD4jLtH9t2m1rkut54hYGLm0/edit for goriangray@gmail.com?  Thanks.","username":"iserikov","ts":"2018-08-17T12:31:49.572Z"}
{"msg":"Has joined the channel.","username":"larry618","ts":"2018-08-19T07:42:31.357Z","type":"uj"}
{"msg":"Has joined the channel.","username":"harish.drish","ts":"2018-08-21T11:28:48.391Z","type":"uj"}
{"msg":"hello all I am using hybride crypto js with webpack.....when I am running webpack it gibves me error:\nERROR in ../node_modules/hybrid-crypto-js/lib/keymanager.js\nModule not found: Error: Can't resolve 'react-native' in '/home/hyper1/Sawtooth-projects/webpkdemoo/node_modules/hybrid-crypto-js/lib'\n @ ../node_modules/hybrid-crypto-js/lib/keymanager.js 1:0-42 30:8-20 40:8-20\n @ ../node_modules/hybrid-crypto-js/lib/index.js\n @ ../app/module/createHost.js\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 2\nnpm ERR! webpk@1.0.0 start: `webpack ./app/module/createHost.js --output ./dist/bundle.js --mode development`\nnpm ERR! Exit status 2\nnpm ERR!\nnpm ERR! Failed at the webpk@1.0.0 start script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /home/hyper1/.npm/_logs/2018-08-21T11_12_22_353Z-debug.log","username":"harish.drish","ts":"2018-08-21T11:29:50.058Z"}
{"msg":"here is webpack config file:\nvar path = require(\"path\");\n\nvar DIST_DIR   = path.join(__dirname, \"dist\"),\nCLIENT_DIR = path.join(__dirname, \"src\");\n\nmodule.exports = {\n  context: CLIENT_DIR,\n  entry: \"./app/module/createHost.js\",//path relative to this file\n  mode: \"development\",\n  output: {\n\t path:     DIST_DIR,\n\t filename: \"bundle.js\"\n  },\n  resolve: {\n\t extensions: ['.js', '.json', '.node','.pem']\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.exec\\.js$/,\n        use: [ 'script-loader' ]\n      },\n      {\n        test: /\\.node$/, \n        use: 'node-loader' \n      },\n      {\n        test: /\\.(node)$/,\n        use: 'file-loader'\n      }\n    ]\n  },\n  node: {\n    fs: 'empty',\n    net: 'empty',\n    tls: 'empty',\n    AccessibilityInfo: 'empty'\n  }\n}","username":"harish.drish","ts":"2018-08-21T11:30:21.623Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/crypto-lib?msg=WBic5M7hnxP78XRrC) @hartm The PRF's `new` method takes `args` which can contain the key. The objective is to have a function which takes an input in a certain group and can produce any output with equal probability in a group, preimage resistance is not an objective of this function","username":"lovesh","ts":"2018-08-21T12:16:03.058Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/crypto-lib?msg=WBic5M7hnxP78XRrC","url":"https://chat.hyperledger.org/channel/crypto-lib?msg=WBic5M7hnxP78XRrC","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@lovesh  Is the input randomly chosen by an honest person or adversarially chosen by an attacker (or somewhere in between, i.e. the input is selected by an honest user but without full entropy)?  ","username":"hartm","ts":"2018-08-21T15:07:07.372Z"}
{"msg":"@hartm Input can be chosen by anyone including an adversary, the input has to respect some constraints like being in a field","username":"lovesh","ts":"2018-08-21T16:11:43.478Z"}
{"msg":"I have submitted a (PR)[https://github.com/hyperledger-labs/crypto-lib/pull/6] that I'm hoping Sawtooth folks with be okay with. Can Sawtooth folks look at that API and see if they are okay with it and put their comments in here either way","username":"MALodder","ts":"2018-08-21T18:28:13.940Z"}
{"msg":"@lovesh OK, it does look like you need (and are using) a random oracle model PRF.","username":"hartm","ts":"2018-08-21T22:07:37.012Z"}
{"msg":"@here Just a brief reminder for the upcoming meeting tomorrow (today, for many).  Thanks!","username":"hartm","ts":"2018-08-22T07:12:21.510Z"}
{"msg":"Please review \"Hashing on BLS-12-381 curve\" https://github.com/hyperledger-labs/z-mix/pull/15","username":"lovesh","ts":"2018-08-22T12:32:33.852Z"}
{"msg":"Question: There are methods to hash to groups G1 and G2, does it need domain separation between the byte representations of those 2 hashes","username":"lovesh","ts":"2018-08-22T12:37:23.760Z"}
{"msg":"Question: There are methods to hash to groups G1 and G2, does it need domain separation between the byte representations of those 2 hashes. Do we need (point) compressed representation too?","username":"lovesh","ts":"2018-08-22T12:37:23.760Z"}
{"msg":"@manu @hartm @MALodder ","username":"lovesh","ts":"2018-08-22T12:37:52.826Z"}
{"msg":"@manu @hartm @MALodder ^^^","username":"lovesh","ts":"2018-08-22T12:37:52.826Z"}
{"msg":"If you mean that the output of the hashes could contain some extra bits to flag their respective fields, I think that would be unconventional. If you mean that the wrapping functions would add bits to the respective group hashes to avoid collisions in the two groups, I also don't think I've seen that. Totally open to the idea that I'm just not familiar or that you are suggesting something else.\nI do see the use of domain separation within the keccak functions to avoid collisions between those hashes when the same inputs are used. e.g. sha3-384(1) != sha3-256(1)","username":"Dan","ts":"2018-08-22T13:49:31.429Z"}
{"msg":"I would do domain separation yes","username":"manu","ts":"2018-08-22T13:50:56.674Z"}
{"msg":"@Dan You understood it correct. I have heard that domain separation is needed for security proofs, it might not be useful in a particular scenario but as a general practice you should. Or use a different hash function like sha2 for G1 and sha3 for G2 ","username":"lovesh","ts":"2018-08-22T14:00:27.359Z"}
{"msg":"(example from Lovesh per meeting discussion: https://bitslog.wordpress.com/2018/06/09/leaf-node-weakness-in-bitcoin-merkle-tree-design) ","username":"Dan","ts":"2018-08-22T14:08:17.869Z"}
{"msg":"@MALodder our java sdk relies on bitcoinj for the language wrapping of the secp256k1 library. It appears they use JNI if I'm looking at their code right. https://github.com/bitcoinj/bitcoinj","username":"Dan","ts":"2018-08-22T14:54:15.305Z"}
{"msg":"thanks @Dan ","username":"MALodder","ts":"2018-08-22T15:25:43.417Z"}
{"msg":"Please review \"Pedersen commitments over BLS12-381\" https://github.com/hyperledger-labs/z-mix/pull/16","username":"lovesh","ts":"2018-08-23T11:12:10.405Z"}
{"msg":"I can request code review from specific people using the github interface, who would be interested? I selected @MALodder, @manu and @hartm for my recent PRs","username":"lovesh","ts":"2018-08-23T11:14:00.771Z"}
{"msg":"Hi","username":"david.b.crypto","ts":"2018-08-23T15:09:13.147Z"}
{"msg":"where would I look to get a view of which algorithms are targeted for the common hyperledger crypto in the short to medium term?","username":"david.b.crypto","ts":"2018-08-23T15:10:11.995Z"}
{"msg":"specifically i am interested in accumulators, group signatures and threshold encryption","username":"david.b.crypto","ts":"2018-08-23T15:10:50.367Z"}
{"msg":"@manu @Dan Domain separation has been added in the hash function PR","username":"lovesh","ts":"2018-08-23T16:42:21.390Z"}
{"msg":"@david.b.crypto we are working on that part still","username":"MALodder","ts":"2018-08-23T18:28:02.329Z"}
{"msg":"if you attend the bi-weekly calls then we would be happy to know what you are looking to add to it","username":"MALodder","ts":"2018-08-23T18:28:19.537Z"}
{"msg":"I finished the changes necessary to allow native and portable for crypto-lib for secp256k1","username":"MALodder","ts":"2018-08-23T18:30:31.198Z"}
{"msg":"@Dan @amundson can you please review the [PR](https://github.com/hyperledger-labs/crypto-lib/pull/6#pullrequestreview-147585598) and let me know if this still works for you","username":"MALodder","ts":"2018-08-23T18:31:06.803Z"}
{"msg":"@Dan @amundson can you please review the (PR)[https://github.com/hyperledger-labs/crypto-lib/pull/6#pullrequestreview-147585598] and let me know if this still works for you","username":"MALodder","ts":"2018-08-23T18:31:06.803Z"}
{"msg":"@MALodder is the plan to add another implementation here - https://github.com/hyperledger-labs/crypto-lib/tree/master/rust/src/signing , say sekp256k1_milagro.rs, that uses what you added to the libhl-crypto/ directory?","username":"amundson","ts":"2018-08-23T18:38:01.726Z"}
{"msg":"the plan is remove that folder and use https://github.com/mikelodder7/crypto-lib/tree/master/libhl-crypto/src/signatures","username":"MALodder","ts":"2018-08-23T18:39:44.693Z"}
{"msg":"ok, I thought we were going down a path of trying to keep the API sawtooth uses (with adjustments to make it better) so that it was fairly easy to adopt","username":"amundson","ts":"2018-08-23T18:48:31.352Z"}
{"msg":"the test code in libhl-crypto/src/signatures/secp256k1.rs looks very secp256k1 specific; do you have an algorithm agnostic API in mind that projects would use?","username":"amundson","ts":"2018-08-23T18:50:55.374Z"}
{"msg":"(just referencing the tests because I was looking for examples)","username":"amundson","ts":"2018-08-23T18:51:11.033Z"}
{"msg":"Like a context?","username":"MALodder","ts":"2018-08-23T18:51:31.180Z"}
{"msg":"like the sawtooth signing API","username":"amundson","ts":"2018-08-23T18:51:40.865Z"}
{"msg":"We could wrap any signature in a context like object","username":"MALodder","ts":"2018-08-23T18:52:01.252Z"}
{"msg":"the interface didn't change that much if you look at it","username":"MALodder","ts":"2018-08-23T18:52:11.162Z"}
{"msg":"Its like the simple signature interface that was signed off","username":"MALodder","ts":"2018-08-23T18:52:32.155Z"}
{"msg":"by the group","username":"MALodder","ts":"2018-08-23T18:52:42.640Z"}
{"msg":"it supports two versions, the native version and the portable version","username":"MALodder","ts":"2018-08-23T18:52:55.286Z"}
{"msg":"portable is milagro, native is libsecp256k1 version","username":"MALodder","ts":"2018-08-23T18:53:06.377Z"}
{"msg":"```let context = create_context(\"secp256k1\").unwrap();\nlet factory = CryptoFactory::new(&*context);\nlet priv_key = Secp256k1PrivateKey::from_hex(KEY1_PRIV_HEX).unwrap();\nlet signer = factory.new_signer(&priv_key);\nlet signature = signer.sign(&String::from(MSG1).into_bytes()).unwrap();```","username":"amundson","ts":"2018-08-23T18:56:31.996Z"}
{"msg":"so if we had that code today, what would that look like translated to this API?","username":"amundson","ts":"2018-08-23T18:57:06.661Z"}
{"msg":"```\nlet priv_key = secp256k1::Ecdsa256K1Sha256PrivateKey::from_hex(KEY1_PRIV_HEX).unwrap();\nlet signature = priv_key.sign(&String::from(MSG1).into_bytes()).unwrap()\n```","username":"MALodder","ts":"2018-08-23T19:01:39.305Z"}
{"msg":"I see yours expects a hexit signature so to add another line\n```\nlet final_sig = bin2hex(signature.as_slice());\n```","username":"MALodder","ts":"2018-08-23T19:03:15.719Z"}
{"msg":"how are you sharing libsecp256k1 context between keys? context creation is super expensive. global variables?","username":"amundson","ts":"2018-08-23T19:04:12.402Z"}
{"msg":"each key has their own context","username":"MALodder","ts":"2018-08-23T19:04:41.085Z"}
{"msg":"its not quite as expensive if you say signing only or verify only","username":"MALodder","ts":"2018-08-23T19:04:59.412Z"}
{"msg":"but, presumably in your API the priv_key signing and pub_key has to do verification since you don't have a separation between the data object (a private key or public key) and the algorithm code (signer, verifier); so if you have a lot of public keys, you are going to end up with a lot of contexts, and that is going to be slow. The app would have to do smart caching of public keys especially as recreating them would be very bad indeed.","username":"amundson","ts":"2018-08-23T19:09:41.490Z"}
{"msg":"so you're assuming only one context is created and passed around am I right","username":"MALodder","ts":"2018-08-23T19:11:28.816Z"}
{"msg":"so, say I'm getting a transaction off the network and it's associated public key. I create the public_key object and then verify that transaction. Today within sawtooth, we don't cache any public key objects, because that is all very efficient since there is only one verifier (and context). If public key and verifier are the same, then I need to either take the efficiency hit (because of the creation of a context), or I need to cache public key objects so I can avoid recreating it. (Because it is likely to see the same public keys come up over and over, the caching would work but not something we need to do today.)","username":"amundson","ts":"2018-08-23T19:12:57.877Z"}
{"msg":"the only other option would be to create a shared global variable","username":"MALodder","ts":"2018-08-23T19:13:02.473Z"}
{"msg":"I can do that","username":"MALodder","ts":"2018-08-23T19:15:12.749Z"}
{"msg":"which we rejected on principle (we would probably have to deal with side effects we can't describe easily before we run into them), which is why we create the context and derive a signer or verifier from it, and treat the key as just data until we need to use it. so we can pass the signer or verifier around when we startup the validator (once).","username":"amundson","ts":"2018-08-23T19:15:18.531Z"}
{"msg":"the problem is that is very secp256k1 specific","username":"MALodder","ts":"2018-08-23T19:15:43.196Z"}
{"msg":"specifically libsecp256k1 specific","username":"MALodder","ts":"2018-08-23T19:16:25.775Z"}
{"msg":"milagro secp256k1 or openssl do not have this","username":"MALodder","ts":"2018-08-23T19:16:36.801Z"}
{"msg":"libsodium or secp384r1 libraries I've used don't use context either","username":"MALodder","ts":"2018-08-23T19:16:56.972Z"}
{"msg":"that just makes context creation a no-op for those implementations","username":"amundson","ts":"2018-08-23T19:21:46.140Z"}
{"msg":"have you done any performance testing of milagro vs. libsecp256k1?","username":"amundson","ts":"2018-08-23T19:22:11.526Z"}
{"msg":"okay but now its complicating every other library","username":"MALodder","ts":"2018-08-23T19:22:14.742Z"}
{"msg":"yes","username":"MALodder","ts":"2018-08-23T19:22:15.699Z"}
{"msg":"libsecp256k1 is 4 times faster","username":"MALodder","ts":"2018-08-23T19:22:24.339Z"}
{"msg":"it's not complicating every other library. it is a slightly more complex API for the user of the API.","username":"amundson","ts":"2018-08-23T19:23:20.807Z"}
{"msg":"but even then, the lines above could be reduce to two with a convenience function for the users of the API that don't care about performance (or are only using algorithms where re-creating context is efficient)","username":"amundson","ts":"2018-08-23T19:25:28.220Z"}
{"msg":"it just doesn't make sense to me to have every other class use a no-op ","username":"MALodder","ts":"2018-08-23T19:33:05.658Z"}
{"msg":"what I'm saying is that its not necessary for those other libraries to do that. They don't require it. So to make every consumer of the crypto-lib create a context that does nothing for the 99% doesn't make sense to me so the 1% can be happy.","username":"MALodder","ts":"2018-08-23T19:39:30.820Z"}
{"msg":"I'd like to find another solution is what I'm saying","username":"MALodder","ts":"2018-08-23T19:41:07.413Z"}
{"msg":"Has joined the channel.","username":"DavorKljajic","ts":"2018-08-24T11:33:19.145Z","type":"uj"}
{"msg":"hello, I'm wondering if someone has worked custom implementation mps  with idemix, and where i can find the setup, on official site is not clear to much.","username":"DavorKljajic","ts":"2018-08-24T11:33:24.386Z"}
{"msg":"Has joined the channel.","username":"Bhanu","ts":"2018-08-24T16:53:07.283Z","type":"uj"}
{"msg":"@amundson Regarding the `context` object, the constructor of the signature interface in z-mix `SignatureScheme`'s `new` method, https://github.com/hyperledger-labs/z-mix/blob/master/src/signatures/mod.rs#L25 can be used to create the context and then subsequent calls to sign and verify can be used to with different keys without re-creating the context object. \nThere is sample code above in that file that should clarify my proposal","username":"lovesh","ts":"2018-08-27T06:42:04.643Z"}
{"msg":"@amundson Regarding the `context` object, the constructor of the signature interface in z-mix `SignatureScheme`'s `new` method, https://github.com/hyperledger-labs/z-mix/blob/master/src/signatures/mod.rs#L25 can be used to create the context and then subsequent calls to sign and verify can be used with different keys without re-creating the context object. \nThere is sample code above in that file that should clarify my proposal","username":"lovesh","ts":"2018-08-27T06:42:04.643Z"}
{"msg":"@amundson I have implemented *SignatureScheme* that should address the *context* object issue and doesn't complicate things. I believe you should be happy with it. I will be pushing as part of the open PR","username":"MALodder","ts":"2018-08-27T14:56:15.119Z"}
{"msg":"Look for it in about 2 hours","username":"MALodder","ts":"2018-08-27T14:56:24.532Z"}
{"msg":"I tried the zoom link for the zmix meeting but it's complaining the meeting is for 3/6","username":"Dan","ts":"2018-08-27T15:06:21.962Z"}
{"msg":"Maybe it's a ghost invite and there is no crypto-lib meeting this morning.","username":"Dan","ts":"2018-08-27T15:14:58.263Z"}
{"msg":"@MALodder I'm concerned about backward compatibility since Sawtooth has the SDKs at 1.0.x and we have committed to not breaking the API. We have a little flexibility with the Rust SDK, but we don't want it to substantially deviate from our other language SDKs too much, and we have quite a bit of code now that uses the Rust SDK so it is \"almost 1.0\".","username":"amundson","ts":"2018-08-27T16:12:40.654Z"}
{"msg":"I believe this won't change it too much","username":"MALodder","ts":"2018-08-27T16:38:29.756Z"}
{"msg":"pushed please look at the [PR #6](https://github.com/hyperledger-labs/crypto-lib/pull/6)","username":"MALodder","ts":"2018-08-27T20:52:17.366Z"}
{"msg":"@Dan The calendar invite (at least for me) is wrong for Zmix.  It's at 7:00 AM pacific time--for some reason my (personal) calendar did not get updated and says 8:00 AM.","username":"hartm","ts":"2018-08-27T21:36:18.741Z"}
{"msg":"oh, thanks I think I have the same relative skew despite being in a different timezone.","username":"Dan","ts":"2018-08-27T22:44:35.717Z"}
{"msg":"so we're going to meet mondays at 7am pacific? and then every-other week on Wednesdays?","username":"Dan","ts":"2018-08-27T22:45:10.005Z"}
{"msg":"Has joined the channel.","username":"silasdavis","ts":"2018-08-28T10:22:58.108Z","type":"uj"}
{"msg":"@MALodder what was it you wanted to draw attention to in # 6?","username":"Dan","ts":"2018-08-28T14:05:23.927Z"}
{"msg":"The signature scheme interface ","username":"MALodder","ts":"2018-08-28T14:06:04.166Z"}
{"msg":"Is Sawtooth okay with it","username":"MALodder","ts":"2018-08-28T14:08:18.540Z"}
{"msg":"I implemented the secp256k1 and ed25529 versions","username":"MALodder","ts":"2018-08-28T14:08:48.974Z"}
{"msg":"@Dan Yes Monday's for now for ZMix, once it finalizes then I think we will reduce the frequency","username":"MALodder","ts":"2018-08-28T14:52:27.127Z"}
{"msg":"@MALodder how would I generate these amcl/ files?","username":"amundson","ts":"2018-08-28T18:06:36.478Z"}
{"msg":"In the repo https://github.com/milagro-crypto/amcl/tree/master/version3/rust there is a python script config64.py. If you run that and select the same curves and rsa as I did you will get the same folder","username":"MALodder","ts":"2018-08-28T19:48:23.801Z"}
{"msg":"So I clone the project and run that file","username":"MALodder","ts":"2018-08-28T19:48:44.688Z"}
{"msg":"@MALodder cool. do you remember what you selected?","username":"amundson","ts":"2018-08-29T00:47:44.582Z"}
{"msg":"I selected secp256k1, nist256, secp384r1, secp521r1, bls12-381, BN-254, and all the RSA options","username":"MALodder","ts":"2018-08-29T00:49:55.309Z"}
{"msg":"@MALodder thanks for updating the interface to try to close/eliminate our backwards compatibility concern!! I will take a close look at it before our next meeting (hopefully well before). ","username":"Dan","ts":"2018-08-29T03:06:56.213Z"}
{"msg":"@Dan Please let me know when you have reviewed it and your thoughts","username":"MALodder","ts":"2018-08-29T16:28:17.174Z"}
{"msg":"Hello all... just began lurking - will try and get along to meetings","username":"silasdavis","ts":"2018-08-29T17:18:41.714Z"}
{"msg":"has there been any conversation about BLS signature schemes (https://en.wikipedia.org/wiki/Boneh%E2%80%93Lynn%E2%80%93Shacham) - they have some really useful properties for verifiable random functions and I would love to seem them in a solid library","username":"silasdavis","ts":"2018-08-29T17:23:32.204Z"}
{"msg":"@silasdavis Yes, and we will have implementations in crypto-lib.","username":"hartm","ts":"2018-08-29T17:24:44.102Z"}
{"msg":"Yes Indy uses them and I’ve added them to the crypto lib library ","username":"MALodder","ts":"2018-08-30T04:56:38.085Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/crypto-lib?msg=bqT2YWTRocTsYS4ri) @silasdavis Hyperledger Indy crypto has BLS signatures (and they have been added in shared crypto lib) that use the BN-254 curve. Some time ago i did a Rust implementation on BLS12-381 curve here https://github.com/lovesh/signature-schemes/tree/master/src/bls, it has 2 implementation, 1 which is a older, faster but vulnerable to certain attack implementation and the other is based on a new paper, it is not vulnerable to that attack but slower. Though the older implementation can be prevented from that attack and there is a fix (from the paper) there","username":"lovesh","ts":"2018-08-30T08:39:27.222Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/crypto-lib?msg=bqT2YWTRocTsYS4ri","url":"https://chat.hyperledger.org/channel/crypto-lib?msg=bqT2YWTRocTsYS4ri","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/crypto-lib?msg=bqT2YWTRocTsYS4ri) @silasdavis Hyperledger Indy crypto has BLS signatures (and they have been added in shared crypto lib) that use the BN-254 curve. Some time ago i did a Rust implementation on BLS12-381 curve here https://github.com/lovesh/signature-schemes/tree/master/src/bls, it has 2 implementation, 1 which is a older, faster but vulnerable to certain attack implementation and the other is based on a new paper, it is not vulnerable to that attack but slower. Though the older implementation can be prevented from that attack and there is a fix (from the paper) there. It can be used as Rust crate. ","username":"lovesh","ts":"2018-08-30T08:39:27.222Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/crypto-lib?msg=bqT2YWTRocTsYS4ri","url":"https://chat.hyperledger.org/channel/crypto-lib?msg=bqT2YWTRocTsYS4ri","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/crypto-lib?msg=bqT2YWTRocTsYS4ri) @silasdavis Hyperledger Indy crypto has BLS signatures (and they have been added in shared crypto lib) that use the BN-254 curve. Some time ago i did a Rust implementation on BLS12-381 curve here https://github.com/lovesh/signature-schemes/tree/master/src/bls, it has 2 implementation, 1 which is a older, faster but vulnerable to certain attack and the other is based on a new paper, it is not vulnerable to that attack but slower. Though the older implementation can be prevented from that attack and there is a fix (from the paper) there. It can be used as Rust crate. ","username":"lovesh","ts":"2018-08-30T08:39:27.222Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/crypto-lib?msg=bqT2YWTRocTsYS4ri","url":"https://chat.hyperledger.org/channel/crypto-lib?msg=bqT2YWTRocTsYS4ri","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@MALodder made some time to review today. It looks very close. I need to check whether we are using the existing (sawtooth) factory in a certain way, but even that might be irrelevant if its just wrapping this approach. And then I wasn't clear on how the secp256k1 context is managed. When we first adopted the bitcoin library we found that it didn't buy us nearly as much performance if we didn't hang onto the context and kept recreating it.\nI have some other rambling thoughts about when sawtooth would adopt this and whether that would buy us any more flexibility.. like if at a major release we could alter some things if that was valuable and also maybe a good point to pick up edwards so impact of the secp library weirdness less important .. so yeah rambling thoughts. :) ","username":"Dan","ts":"2018-08-31T01:50:41.079Z"}
{"msg":"We manage the context with the Signaturescheme so it’s only created once","username":"MALodder","ts":"2018-08-31T01:52:21.690Z"}
{"msg":"I did implement ed25519 to compare against secp256k1","username":"MALodder","ts":"2018-08-31T02:11:11.819Z"}
{"msg":"Yeah I saw that. Got me thinking about moving off of secp256k1 again.\nI don't have my data anymore but I did some lightweight benchmarking on those two last year and ed25519 was faster than secp - but not wildly faster. Given some other risks and sdk availability for other languages we decided not to make the switch back then.","username":"Dan","ts":"2018-08-31T14:09:12.673Z"}
{"msg":"Yeah I saw that. Got me thinking about moving off of secp256k1 again.\nI don't have my data anymore but I did some lightweight benchmarking on those two last year and ed25519 was faster than secp. Given some other risks and sdk availability for other languages we decided not to make the switch back then.","username":"Dan","ts":"2018-08-31T14:09:12.673Z"}
{"msg":"My benchmarks for this rust code for secp256k1 for signing and verifying 200 signatures is 40ms","username":"MALodder","ts":"2018-08-31T14:46:06.437Z"}
{"msg":"And ed25519 is 30ms","username":"MALodder","ts":"2018-08-31T14:46:20.551Z"}
{"msg":"Signatures are the same size ","username":"MALodder","ts":"2018-08-31T14:46:53.592Z"}
{"msg":"Has left the channel.","username":"RyanWest","ts":"2018-08-31T15:12:54.029Z","type":"ul"}
{"msg":"Are we having the Z-mix meeting tomorrow morning?  It seems like a lot of the US people might be off on labor day.","username":"hartm","ts":"2018-09-03T04:15:13.152Z"}
{"msg":"I’m not planning to attend due to the US holiday ","username":"MALodder","ts":"2018-09-03T13:53:06.488Z"}
{"msg":"So, as I see, I am celebrating US holiday in zoom chat alone)","username":"iserikov","ts":"2018-09-03T15:08:42.601Z"}
{"msg":"I hope it was fun :)","username":"Dan","ts":"2018-09-04T21:17:11.732Z"}
{"msg":"@here Hi Everyone--just a reminder of tomorrow's meeting.  I won't be able to make it, but Mike will be around to make sure things run smoothly. Thanks!","username":"hartm","ts":"2018-09-04T22:32:29.759Z"}
{"msg":"Hi all, I am on vacation this week, so wont be able to dial in as well.","username":"Maria","ts":"2018-09-05T11:59:10.506Z"}
{"msg":"Is meeting hapening? If so, is it on the hyperledger community site?","username":"VipinB","ts":"2018-09-05T13:03:20.288Z"}
{"msg":"zoom channel I mean","username":"VipinB","ts":"2018-09-05T13:03:33.282Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/crypto-lib?msg=rujw2ofHkgtwxguCX) @VipinB https://zoom.us/my/hyperledger.community","username":"lovesh","ts":"2018-09-05T14:07:33.324Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/crypto-lib?msg=rujw2ofHkgtwxguCX","url":"https://chat.hyperledger.org/channel/crypto-lib?msg=rujw2ofHkgtwxguCX","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@lovesh thanks!","username":"VipinB","ts":"2018-09-05T14:23:08.724Z"}
{"msg":"Can someone recommend a good reference for range proofs?","username":"Dan","ts":"2018-09-07T18:17:24.249Z"}
{"msg":"What application do you have in mind, and do you want something general or specific?","username":"hartm","ts":"2018-09-09T08:28:54.264Z"}
{"msg":"I think this is one of the features for z-mix? So anything directly related to that would be good. Especially anything foundational. \nBut in general it seems like checking in zero knowledge that a committed value is in range seems applicable all over blockchains. A trivial example .. we use a transaction family called intkey (integer key:value transactions) in a lot of our smoke tests. The main rule for those transactions is the resulting value has to be 0 <= n <= 2^32-1.","username":"Dan","ts":"2018-09-10T14:49:36.988Z"}
{"msg":"Oh and is there a zmix meeting in ~10 min. I recall the invite had been off before and I don't remember if I locally corrected it or not.","username":"Dan","ts":"2018-09-10T14:51:10.623Z"}
{"msg":"Oh and is there a zmix meeting in ~10 min? I recall the invite had been off before and I don't remember if I locally corrected it or not.","username":"Dan","ts":"2018-09-10T14:51:10.623Z"}
{"msg":"Ok, so zoom error implies my time is still off an hr. :-/","username":"Dan","ts":"2018-09-10T15:04:59.007Z"}
{"msg":"@Dan you just missed the meeting when you posted \"zoom error\"","username":"rjones","ts":"2018-09-10T15:53:30.073Z"}
{"msg":"@Dan you just missed the meeting.","username":"rjones","ts":"2018-09-10T15:53:30.073Z"}
{"msg":"but I am super interested in what the error was","username":"rjones","ts":"2018-09-10T15:54:02.793Z"}
{"msg":"it said something like `this meeting is scheduled for 2018/3/6`","username":"Dan","ts":"2018-09-10T16:26:37.610Z"}
{"msg":"you must have a super old invite or something","username":"rjones","ts":"2018-09-10T19:24:16.703Z"}
{"msg":"it's ok I'm used to it. That's how I got invites to parties in high school. ","username":"Dan","ts":"2018-09-10T21:37:13.009Z"}
{"msg":"@Dan RSA based range proofs have existed for awhile and Indy is using them for zero-knowledge proofs. There is some research into using elliptic curve based range proofs for bitcoin by [Dan Boneh et. al](https://crypto.stanford.edu/bulletproofs/)","username":"MALodder","ts":"2018-09-11T21:35:47.164Z"}
{"msg":"Z-Mix will implement range proofs","username":"MALodder","ts":"2018-09-11T21:36:11.906Z"}
{"msg":"more research needs to be done on elliptic curve based range proofs like cryptanalysis and time to bake but the initial results look good","username":"MALodder","ts":"2018-09-11T21:36:44.677Z"}
{"msg":"thanks @MALodder !","username":"Dan","ts":"2018-09-11T21:37:48.532Z"}
{"msg":"@dan have you read this - https://people.xiph.org/~greg/confidential_values.txt","username":"kelly_","ts":"2018-09-12T22:34:16.078Z"}
{"msg":"@Dan rather","username":"kelly_","ts":"2018-09-12T22:34:22.583Z"}
{"msg":"this was published afterwards by bunz and boneh - https://eprint.iacr.org/2017/1066.pdf","username":"kelly_","ts":"2018-09-12T22:35:07.510Z"}
{"msg":"last but not least, this by Chain - https://blog.chain.com/faster-bulletproofs-with-ristretto-avx2-29450b4490cd","username":"kelly_","ts":"2018-09-12T22:35:45.664Z"}
{"msg":"oh looks like @MALodder link provided a couple of those","username":"kelly_","ts":"2018-09-12T22:39:29.395Z"}
{"msg":"no I haven't read any of that .. thanks .. \nI think ;)","username":"Dan","ts":"2018-09-13T16:12:08.007Z"}
{"msg":"Has joined the channel.","username":"kdenhartog","ts":"2018-09-13T17:12:28.139Z","type":"uj"}
{"msg":"Those aren't necessarily good introductions to the topic, but they will give you some background.  I don't think there is a survey paper specifically on range proofs, so those may be your best bet.","username":"hartm","ts":"2018-09-13T17:25:07.164Z"}
{"msg":"If you are learning, I'd focus on the elliptic curve stuff rather than the RSA based stuff though.","username":"hartm","ts":"2018-09-13T17:25:44.219Z"}
{"msg":"NOTICE: instead of the zklang meeting on Mondays at 8AM MDT, we will now be holding a Sovrin crypto call meeting. Expected attendees include Jason Law, Brent Zundel, Lovesh Harchandani from Evernym, [Dmitry Khovratovich](https://www.linkedin.com/in/khovratovich/), and me but its open to anyone else who would like to come. We will be discussing various crypto topics like ZKPs, crypto currency optimizations, ZKSnarks, Hyperledger Indy, and more. @rjones ","username":"MALodder","ts":"2018-09-13T21:21:20.973Z"}
{"msg":"if you could update the calendar to reflect this change that would be great","username":"MALodder","ts":"2018-09-13T21:21:35.241Z"}
{"msg":"I will post the zoom id shortly","username":"MALodder","ts":"2018-09-13T21:21:42.799Z"}
{"msg":"https://zoom.us/j/3441735212","username":"MALodder","ts":"2018-09-13T21:25:10.127Z"}
{"msg":"sorry its this one https://zoom.us/j/567114224","username":"MALodder","ts":"2018-09-13T21:29:37.624Z"}
{"msg":"Here is the [calendar](https://calendar.google.com/event?action=TEMPLATE&tmeid=b3ZlMjNyM2ZxMXRpYTdtYzdvbGIzMGFqYWtfMjAxODA5MTdUMTQwMDAwWiBtaWtlQHNvdnJpbi5vcmc&tmsrc=mike%40sovrin.org&scp=ALL) if that helps","username":"MALodder","ts":"2018-09-13T22:04:23.359Z"}
{"msg":"is that because the zmix stuff requires less discussion now or because the newer meeting is just higher priority?","username":"Dan","ts":"2018-09-14T14:04:47.325Z"}
{"msg":"By the way, I've updated the proposal document.  ","username":"hartm","ts":"2018-09-14T17:06:42.668Z"}
{"msg":"https://docs.google.com/document/d/1JtFT5L-82egj6shgGXzTsNAg6_UHuMheKfsst6NS_Xo/edit?usp=sharing","username":"hartm","ts":"2018-09-14T17:06:46.002Z"}
{"msg":"Let me know what you think, and if you want an editable link, let me know.  Thanks!","username":"hartm","ts":"2018-09-14T17:06:56.316Z"}
{"msg":"@tkuhrt could I ask you to update the calendar per @MALodder since I'm not here until Wednesday?","username":"rjones","ts":"2018-09-14T21:25:59.515Z"}
{"msg":"Zmix stuff will be merged with the crypto lib meeting because there isn’t a lot more to add by having a separate meeting ","username":"MALodder","ts":"2018-09-14T22:01:53.214Z"}
{"msg":"@hartm after this doc is reviewed would it be ready for the TSC to vote?","username":"MALodder","ts":"2018-09-14T22:02:25.137Z"}
{"msg":"Has joined the channel.","username":"wip-abramson","ts":"2018-09-17T08:15:41.592Z","type":"uj"}
{"msg":"@here Just a reminder we have a meeting tomorrow.  I sent out the agenda to the labs email list.  Thanks everyone!","username":"hartm","ts":"2018-09-19T01:46:48.311Z"}
{"msg":"Has joined the channel.","username":"luckydogchina","ts":"2018-09-19T02:14:16.392Z","type":"uj"}
{"msg":"Has joined the channel.","username":"Ryan2","ts":"2018-09-19T02:34:48.320Z","type":"uj"}
{"msg":"links Maria posted in the meeting chat\nFrom Maria Dubovitskaya to Everyone: (10:36 AM)\n https://docs.google.com/document/d/1yodOwQw3ErYMmHSfLn7RyI_h84S7k3AINIXnaSNgUn8/edit https://docs.google.com/document/d/1Z_8o8k_PFRM4XfZyv9jH1_-IyN0CsCMI2JlrGsCX378/edit  https://docs.google.com/document/d/1CLdkd70Mfa-AhnrqwTMVwBdF-HdvVNBiOKcq13lPstY/edit ZKlang spec  https://docs.google.com/document/d/1HQ7c2PpwGXIxZZyPVoQDzi0rQjA_pk6Kc6bAWf7J8NM/edit?ouid=116858714271757981044&usp=docs_home&ths=true","username":"binhn","ts":"2018-09-19T14:43:51.151Z"}
{"msg":"From lovesh: Hello. Didn't get a chance on call but as part of hackfest, would we like to have basic Rust wrapper for libsnark in crypto-lib? I can contribute","username":"dhuseby","ts":"2018-09-19T15:07:58.151Z"}
{"msg":"@lovesh ^^^","username":"dhuseby","ts":"2018-09-19T15:08:10.353Z"}
{"msg":"davor","username":"DavorKljajic","ts":"2018-09-20T12:36:55.631Z"}
{"msg":"Has joined the channel.","username":"PrakharShukla","ts":"2018-09-24T19:19:48.416Z","type":"uj"}
{"msg":"I tried to join what I thought was the zmix/indy-crypto call on monday at 7am PT but there was only one chap on (who didn't seem to be listening... possibly he just wanted to ignore my poor russian.) :rocket: was down so there was no-one to ping here.\nLooking at the HL Community calendar I only see an indy maintainers meeting on Mondays at 8am PT. @MALodder can you clarify the schedule and then maybe @dhuseby can add it to the community calendar (assuming I'm not just looking past it).","username":"Dan","ts":"2018-09-25T13:13:48.616Z"}
{"msg":"@Dan I guess they used a different zoom than the Hyperledger community channel.  I was in the meeting--there were a bunch of people.","username":"hartm","ts":"2018-09-25T18:02:40.697Z"}
{"msg":"hmmm I must still have a bad invite then. My one-sided conversation in broken russian wasn't too interesting. well, I mean it was interesting to 100% of the participants but ..\nCould we get that on the regular community calendar with a hyperledger-friendly zoom link? @dhuseby ","username":"Dan","ts":"2018-09-25T18:04:22.883Z"}
{"msg":"@Dan let me see what I can do","username":"dhuseby","ts":"2018-09-25T18:46:41.402Z"}
{"msg":"I believe in you!","username":"Dan","ts":"2018-09-25T19:02:52.742Z"}
{"msg":"@Dan I can't add things to the Hyperledger Community Events calendar","username":"dhuseby","ts":"2018-09-25T20:54:19.360Z"}
{"msg":"You should ping Tracy and Ry","username":"dhuseby","ts":"2018-09-25T20:54:37.739Z"}
{"msg":"that's what I'd be doing if I handled it","username":"dhuseby","ts":"2018-09-25T20:54:42.161Z"}
{"msg":"Oh sorry, thought you all had the same keys.\nI still believe in you though. ;)","username":"Dan","ts":"2018-09-26T13:09:08.700Z"}
{"msg":"@MALodder can you coordinate your desired timeslot with @rjones and he can get you on the `official` calendar with an `official` _zoom_ link?","username":"Dan","ts":"2018-09-26T13:10:10.684Z"}
{"msg":"Has joined the channel.","username":"peter.li","ts":"2018-09-27T01:59:03.833Z","type":"uj"}
{"msg":"Has joined the channel.","username":"nnsgmsone","ts":"2018-09-27T02:08:36.426Z","type":"uj"}
{"msg":"hello ","username":"nnsgmsone","ts":"2018-09-27T02:09:20.509Z"}
{"msg":"Has joined the channel.","username":"guolidong","ts":"2018-09-27T02:16:38.721Z","type":"uj"}
{"msg":"aloha","username":"Dan","ts":"2018-09-27T02:57:33.831Z"}
{"msg":"Do you think gmsm meets the requirements for adding to fabric?","username":"nnsgmsone","ts":"2018-09-27T03:08:46.315Z"}
{"msg":"maybe try over in the #fabric channel","username":"Dan","ts":"2018-09-27T04:44:48.703Z"}
{"msg":"Has joined the channel.","username":"AltifBrown","ts":"2018-10-02T21:34:25.431Z","type":"uj"}
{"msg":"@here Hi everyone!  I'm going to cancel tomorrow's meeting due to the hackfest--I think many of our regular participants will be here in Montreal.  I'm hoping to come out of this with a proposal document that we can finally submit to the TSC.","username":"hartm","ts":"2018-10-03T00:38:50.881Z"}
{"msg":":ok_hand:","username":"AltifBrown","ts":"2018-10-03T00:45:44.167Z"}
{"msg":"Has joined the channel.","username":"szewong","ts":"2018-10-03T15:42:22.553Z","type":"uj"}
{"msg":"Has joined the channel.","username":"cloud1230","ts":"2018-10-03T15:42:24.603Z","type":"uj"}
{"msg":"https://github.com/hyperledger-labs/z-mix","username":"hartm","ts":"2018-10-03T15:43:05.884Z"}
{"msg":"https://github.com/hyperledger-labs/crypto-lib","username":"hartm","ts":"2018-10-03T15:43:41.499Z"}
{"msg":"welcome","username":"dhuseby","ts":"2018-10-03T15:43:45.250Z"}
{"msg":"Has joined the channel.","username":"GmoneyCoder","ts":"2018-10-03T15:52:48.732Z","type":"uj"}
{"msg":"`cargo build` succeeded for me on macos mojave with a `xcode-select --install` to fix some git issues and a `brew install libsodium`","username":"jsmitchell","ts":"2018-10-03T15:59:00.045Z"}
{"msg":"`cargo test` fails with:","username":"jsmitchell","ts":"2018-10-03T15:59:19.570Z"}
{"msg":"```\n   Compiling rustlibsecp256k1 v0.1.0 (file:///Users/mitchell/work/bitwiseio/crypto-lib/rustlibsecp256k1)\n   Compiling crypto_lib v0.1.0 (file:///Users/mitchell/work/bitwiseio/crypto-lib/libhl-crypto)\nerror[E0463]: can't find crate for `rcrypto`\n  --> src/lib.rs:21:1\n   |\n21 | extern crate crypto as rcrypto;\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't find crate\n\nerror: aborting due to previous error\n```","username":"jsmitchell","ts":"2018-10-03T15:59:22.594Z"}
{"msg":"I did xcode-select --install and cargo build is still failing on libsodium.","username":"szewong","ts":"2018-10-03T18:07:56.413Z"}
{"msg":"`brew install libsodium`","username":"jsmitchell","ts":"2018-10-03T18:08:22.805Z"}
{"msg":"Did that too","username":"szewong","ts":"2018-10-03T18:08:31.199Z"}
{"msg":"try a `cargo clean; cargo build`","username":"jsmitchell","ts":"2018-10-03T18:08:43.475Z"}
{"msg":"some folks in the room at the hackfest were saying they were having issues with `brew install libsodium` as well cc @dhuseby ","username":"jsmitchell","ts":"2018-10-03T18:09:31.482Z"}
{"msg":"I am one of those. ;)","username":"szewong","ts":"2018-10-03T18:09:58.332Z"}
{"msg":"Still failing on libsodium.","username":"szewong","ts":"2018-10-03T18:11:33.714Z"}
{"msg":"Yeah. `cargo build` and `cargo test` both passed!","username":"szewong","ts":"2018-10-04T04:03:59.321Z"}
{"msg":"Has joined the channel.","username":"snowy13","ts":"2018-10-04T12:31:19.861Z","type":"uj"}
{"msg":"Has joined the channel.","username":"greg2git","ts":"2018-10-04T13:26:53.697Z","type":"uj"}
{"msg":"https://crypto.stanford.edu/~dabo/papers/broadcast.pdf","username":"hartm","ts":"2018-10-04T13:26:54.612Z"}
{"msg":"Broadcast encryption with \\sqrt(n) ciphertexts","username":"hartm","ts":"2018-10-04T13:27:10.201Z"}
{"msg":"Private broadcast encryption:  https://crypto.stanford.edu/portia/papers/bb-bcc.pdf","username":"hartm","ts":"2018-10-04T13:32:53.234Z"}
{"msg":"https://cwtch.im/","username":"MALodder","ts":"2018-10-04T13:34:53.558Z"}
{"msg":"https://github.com/hyperledger/sawtooth-core/blob/master/sdk/rust/src/signing/secp256k1.rs","username":"jsmitchell","ts":"2018-10-04T14:16:40.258Z"}
{"msg":"https://github.com/hyperledger-labs/crypto-lib/blob/master/libhl-crypto/src/signatures/secp256k1.rs","username":"jsmitchell","ts":"2018-10-04T14:16:51.399Z"}
{"msg":"https://github.com/hyperledger-labs/crypto-lib/blob/master/libhl-crypto/src/signatures/secp256k1.rs#L417","username":"jsmitchell","ts":"2018-10-04T14:17:30.892Z"}
{"msg":"sign test ^","username":"jsmitchell","ts":"2018-10-04T14:17:35.458Z"}
{"msg":"Thanks @hartm for posting those broadcast encryption schemes","username":"kdenhartog","ts":"2018-10-04T16:24:24.003Z"}
{"msg":"In a discussion at the hackfest, it was proposed to change the name. One proposal that seemed generally liked was 'Ursa' with a bear logo.","username":"amundson","ts":"2018-10-04T17:58:10.540Z"}
{"msg":"https://aumasson.jp/data/talks/balccon18.pdf","username":"kelly_","ts":"2018-10-04T19:53:33.064Z"}
{"msg":"^ @hartm @Dan you guys may find that interesting. list of crypto bugs in blockchains","username":"kelly_","ts":"2018-10-04T19:53:48.527Z"}
{"msg":"Nice.. \"Don’t use any open-source utility in production!\"","username":"Dan","ts":"2018-10-05T13:33:45.781Z"}
{"msg":"Should be called Blockchain Insecurity?","username":"VipinB","ts":"2018-10-05T14:57:22.603Z"}
{"msg":"Has joined the channel.","username":"jlin","ts":"2018-10-05T15:08:41.001Z","type":"uj"}
{"msg":"@MALodder @jsmitchell people are still having trouble getting libsodium installed on their mac's to try the cryptolib","username":"dhuseby","ts":"2018-10-08T14:43:16.294Z"}
{"msg":"@jsmitchell there is a solution that @MALodder figured out to get libsodium installed on a mac","username":"dhuseby","ts":"2018-10-08T14:48:44.938Z"}
{"msg":"It worked for me first time with `brew install`. If there are alternate instructions for those running into trouble, it would be good to drop them here","username":"jsmitchell","ts":"2018-10-08T14:53:53.919Z"}
{"msg":"I put instructions in the README.md for both methods","username":"MALodder","ts":"2018-10-08T15:01:02.731Z"}
{"msg":"@dhuseby ^^","username":"MALodder","ts":"2018-10-08T15:01:17.383Z"}
{"msg":"great! thanks","username":"dhuseby","ts":"2018-10-08T15:09:07.040Z"}
{"msg":"@MALodder I think you meant to link a different link. That readme file goes to kitchenware","username":"kdenhartog","ts":"2018-10-08T16:48:03.981Z"}
{"msg":"@kdenhartog this link https://github.com/hyperledger-labs/crypto-lib/blob/master/README.md","username":"MALodder","ts":"2018-10-08T17:35:55.296Z"}
{"msg":"The links to the API Documentation seem to be broken in that document.","username":"hartm","ts":"2018-10-08T18:27:21.557Z"}
{"msg":"okay I","username":"MALodder","ts":"2018-10-09T17:37:51.859Z"}
{"msg":"okay I'll fix it","username":"MALodder","ts":"2018-10-09T17:37:51.859Z"}
{"msg":"Has joined the channel.","username":"raccoonrat","ts":"2018-10-10T02:50:30.833Z","type":"uj"}
{"msg":" Thanks Mike!","username":"hartm","ts":"2018-10-10T15:45:07.031Z"}
{"msg":"broken in the README too","username":"tobowers","ts":"2018-10-12T09:21:42.779Z"}
{"msg":"@towbowers that’s what hart is referring to ","username":"MALodder","ts":"2018-10-12T21:22:24.048Z"}
{"msg":"Hi, is the zk lang call on today? I have started to get my head around Rust and am hoping to get more involved with the crypto stuff.  Thanks","username":"wip-abramson","ts":"2018-10-15T11:07:20.834Z"}
{"msg":"Is there a call this morning?  I don't see anyone on the zoom meetings.","username":"hartm","ts":"2018-10-15T14:06:41.142Z"}
{"msg":"For the record, the meeting link is:  https://www.zoom.us/j/567114224","username":"hartm","ts":"2018-10-15T14:22:36.434Z"}
{"msg":"http://www.scs.stanford.edu/~dm/home/papers/corrigan-gibbs:riposte.pdf","username":"hartm","ts":"2018-10-15T14:43:21.278Z"}
{"msg":"@wip-abramson Sorry I didn't see this until now. Yes @hartm put the correct link","username":"MALodder","ts":"2018-10-15T15:25:42.313Z"}
{"msg":"@wip-abramson let me know how you would like to help and I'll try to point you in the right direction","username":"MALodder","ts":"2018-10-15T15:26:20.879Z"}
{"msg":"Well currently I am just getting up to speed with both Rust and the Crypto. But I want to get involved with development, I will work on setting up my environment and let you know if I run into any issues","username":"wip-abramson","ts":"2018-10-16T10:59:31.479Z"}
{"msg":"The zklang call is no longer in the calendar, what time is it usually at on Mondays?","username":"wip-abramson","ts":"2018-10-16T11:00:08.953Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/crypto-lib?msg=uPTZsPp2drEBmAWAw) ","username":"Dan","ts":"2018-10-16T12:57:09.604Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/crypto-lib?msg=uPTZsPp2drEBmAWAw","url":"https://chat.hyperledger.org/channel/crypto-lib?msg=uPTZsPp2drEBmAWAw","remote":true,"fileId":null,"fileName":null}]}
{"msg":"That probably flew by. If you get a chance to coordinate with Ry that would be good. Even better though might be seeing how well we can do over email or chat without meetings. ","username":"Dan","ts":"2018-10-16T12:59:08.743Z"}
{"msg":"@MALodder shoot me an email with the details rjones@linuxfoundation.org","username":"rjones","ts":"2018-10-16T16:05:54.731Z"}
{"msg":"There is no longer a zklang call. We now do a Sovrin crypto meeting at the same time. https://zoom.us/j/3441735212","username":"MALodder","ts":"2018-10-16T17:09:01.907Z"}
{"msg":"sorry wrong zoom number, the correct one is: https://zoom.us/j/567-114-224","username":"MALodder","ts":"2018-10-16T17:10:22.170Z"}
{"msg":"Here is the agenda https://docs.google.com/document/d/1M3zgsRoOxlkjNPbDp4_7YWxuqO2EyefOT3Bt7ZgGIDY/edit?usp=sharing","username":"MALodder","ts":"2018-10-16T17:12:56.134Z"}
{"msg":"@MALodder I don't see a zklang call. what time is your call? what time zone? how often does it repeat?","username":"rjones","ts":"2018-10-16T18:13:05.035Z"}
{"msg":"If it's a sovrin thing maybe that's out of scope for us. We could consider like a monthly call specifically for crypto-lib and really focus on trying to communicate asynch the rest of that time. See how that goes and if it isn't working then shoot for something higher frequency?","username":"Dan","ts":"2018-10-16T18:24:53.203Z"}
{"msg":"@hartm does run an every-two-weeks crypto-lib call","username":"rjones","ts":"2018-10-16T18:27:14.527Z"}
{"msg":"It’s a Sovrin thing but it is open to anyone. It runs every week at 8am MDT","username":"MALodder","ts":"2018-10-16T20:13:12.625Z"}
{"msg":"@here Just a reminder of tomorrow's meeting at 7:00 AM Pacific time (the usual time).  Hope to talk to many of you tomorrow!","username":"hartm","ts":"2018-10-17T01:39:30.783Z"}
{"msg":"I sent out an agenda to the labs list as well.","username":"hartm","ts":"2018-10-17T01:39:50.674Z"}
{"msg":"What is the link for the crypto-lib meeting? I would like to join","username":"wip-abramson","ts":"2018-10-17T13:02:43.052Z"}
{"msg":"@wip-abramson check out the community calendar ","username":"rjones","ts":"2018-10-17T13:38:44.004Z"}
{"msg":"@wip-abramson Join from PC, Mac, Linux, iOS or Android: https://zoom.us/my/hyperledger.community it starts in ~19 minutes","username":"rjones","ts":"2018-10-17T13:40:36.041Z"}
{"msg":"Ah thanks, I thought it was at 40 minutes ago","username":"wip-abramson","ts":"2018-10-17T13:50:02.276Z"}
{"msg":"pr comments https://github.com/hyperledger-labs/crypto-lib/pull/9","username":"Dan","ts":"2018-10-17T14:22:03.796Z"}
{"msg":"https://docs.google.com/document/d/1yodOwQw3ErYMmHSfLn7RyI_h84S7k3AINIXnaSNgUn8/edit# regarding threshold choices ","username":"Dan","ts":"2018-10-17T14:38:44.453Z"}
{"msg":"BLS for aggregation\nBBS for proof of sig\nPoincheval for proof of aggregated sig\nCL for proof of knowledge but over rsa.","username":"Dan","ts":"2018-10-17T14:42:22.460Z"}
{"msg":"https://docs.google.com/document/d/1HQ7c2PpwGXIxZZyPVoQDzi0rQjA_pk6Kc6bAWf7J8NM/edit","username":"Dan","ts":"2018-10-17T14:43:19.731Z"}
{"msg":"the above items moved to github issues","username":"Dan","ts":"2018-10-17T14:44:43.896Z"}
{"msg":"https://github.com/hyperledger-labs/z-mix/issues","username":"Dan","ts":"2018-10-17T14:45:24.603Z"}
{"msg":"https://docs.google.com/document/d/1Z_8o8k_PFRM4XfZyv9jH1_-IyN0CsCMI2JlrGsCX378/edit?usp=sharing","username":"hartm","ts":"2018-10-17T14:47:46.069Z"}
{"msg":"Minutes document above.","username":"hartm","ts":"2018-10-17T14:47:50.681Z"}
{"msg":"https://docs.google.com/document/d/1JtFT5L-82egj6shgGXzTsNAg6_UHuMheKfsst6NS_Xo/edit?usp=sharing","username":"hartm","ts":"2018-10-17T14:52:47.058Z"}
{"msg":"There is a CL sig that is ECC based but not as efficient as BBS+","username":"MALodder","ts":"2018-10-17T14:56:14.019Z"}
{"msg":"correct me if I'm wrong","username":"MALodder","ts":"2018-10-17T14:56:40.398Z"}
{"msg":"the name CL sig is a bit vague, as you could also call BBS+ a CL sig, so above I'd just say CL-RSA and then its clear","username":"manu","ts":"2018-10-17T14:57:07.730Z"}
{"msg":"EPID uses BN .. i guess it's a derivative of CL.","username":"Dan","ts":"2018-10-17T14:57:36.425Z"}
{"msg":"epid uses somewhat broken version of BBS+","username":"manu","ts":"2018-10-17T14:58:13.550Z"}
{"msg":"epid uses a somewhat broken version of BBS+","username":"manu","ts":"2018-10-17T14:58:13.550Z"}
{"msg":"Did I immediately just go to thesaurus.com after the meeting ended?  Yes, yes I did.","username":"hartm","ts":"2018-10-17T14:58:22.399Z"}
{"msg":"haha","username":"MALodder","ts":"2018-10-17T14:59:13.491Z"}
{"msg":"oh interesting @manu .. what aspect is broken?","username":"Dan","ts":"2018-10-17T14:59:49.325Z"}
{"msg":"See https://eprint.iacr.org/2016/663.pdf section 2.2. In short, what EPID uses is a shortened BBS+ sig where one element is dropped which was introduced with an invalid security proof","username":"manu","ts":"2018-10-17T15:08:39.316Z"}
{"msg":"@Dan See https://eprint.iacr.org/2016/663.pdf section 2.2. In short, what EPID uses is a shortened BBS+ sig where one element is dropped which was introduced with an invalid security proof","username":"manu","ts":"2018-10-17T15:08:39.316Z"}
{"msg":"thanks!","username":"Dan","ts":"2018-10-17T15:10:02.930Z"}
{"msg":"Did dropping the element make it slightly broken?","username":"MALodder","ts":"2018-10-17T19:50:46.075Z"}
{"msg":"And they said it was okay with a security proof that actually doesn’t work?","username":"MALodder","ts":"2018-10-17T19:51:27.256Z"}
{"msg":"That’s what I gather from your comments and the paper","username":"MALodder","ts":"2018-10-17T19:53:05.282Z"}
{"msg":"Right, they removed a part of the signature and presented that with a security proof that is incorrect. So there is no reason to believe that the EPID signature is unforgeable, but I also don't immediately know how to forge them. ","username":"manu","ts":"2018-10-18T13:52:34.099Z"}
{"msg":"Just sent out the proposal to the TSC list.  Hopefully we will get some good feedback.","username":"hartm","ts":"2018-10-18T18:25:11.052Z"}
{"msg":"I'm going to immediately claim it's out of scope ;)","username":"Dan","ts":"2018-10-18T18:25:57.641Z"}
{"msg":"If this image was ccby we'd have a logo: http://www.naturallynorthidaho.com/wp-content/uploads/2013/11/Nocturnal-animals-21.jpg\nFrom (http://www.naturallynorthidaho.com/2013/11/nocturnal-animals-specially-adapted-to.htm)","username":"Dan","ts":"2018-10-18T18:53:25.300Z"}
{"msg":"Nice!","username":"hartm","ts":"2018-10-18T20:13:50.181Z"}
{"msg":"yep, add some glowing bear teeth to make it obvious what it is","username":"jsmitchell","ts":"2018-10-18T20:22:59.165Z"}
{"msg":"the nightmares I've had since you told me that tale have involved glowing teeth, anyway","username":"jsmitchell","ts":"2018-10-18T20:25:41.678Z"}
{"msg":"Has joined the channel.","username":"kh.nguyen","ts":"2018-10-19T00:18:20.472Z","type":"uj"}
{"msg":"Teeth and claws","username":"MALodder","ts":"2018-10-19T03:22:35.440Z"}
{"msg":"FYI there will be no Sovrin Crypto call the Monday as I will be out of town and half of those who normally attend will be in other conferences.","username":"MALodder","ts":"2018-10-19T21:42:02.735Z"}
{"msg":"It will resume the following week on Oct 29th","username":"MALodder","ts":"2018-10-19T21:42:30.637Z"}
{"msg":"Thanks for letting us know!","username":"hartm","ts":"2018-10-19T22:10:07.190Z"}
{"msg":"I was trying to review @MALodder 's PR and got sidetracked into the bowels of Milagro. Can someone remind me what our goal with that codebase is? Is it solely to provide a 0 dependency build option?\nAnd looking at the milagro project itself I'm trying to discern the structure.. There's an amcl repo that seems to have all the languages and then there's a few peer level repos that are language specific. I'm guessing they are generated from the amcl repo and then have ... other stuff? ","username":"Dan","ts":"2018-10-23T18:42:19.281Z"}
{"msg":"@Dan I assume you are talking about https://github.com/hyperledger-labs/crypto-lib/pull/13?  The goal is to modularize out the hash functions (and, in general, the symmetric key cryptography) since we have some potential users who have region-specific requirements for these.","username":"hartm","ts":"2018-10-23T19:31:49.758Z"}
{"msg":"Mike is taking his kids to Disney World this week so I'd suggest we can talk about this more next week (including at the crypto-lib meeting).","username":"hartm","ts":"2018-10-23T19:32:47.705Z"}
{"msg":"Well that's the PR I started at but it had a milagro patch in it, which led me back to why we have milagro in there to begin with. So that's really more my question. Is milagro there purely for a no-dependency build? I think that's the reason but I want to make sure. \nFollowing from that I'm trying to assess the relative risk of the milagro project. I started poking around in there but wouldn't mind a map from someone who's been there before  - especially around the repo structure I mention above.  ","username":"Dan","ts":"2018-10-23T20:47:06.543Z"}
{"msg":"Also I would like some Tonga Toast :bread:  so I can go into a carb coma. ","username":"Dan","ts":"2018-10-23T20:48:50.399Z"}
{"msg":"We need Milagro in order to build things for which there aren't standard libraries (i.e. threshold signatures).  It is also useful for no-dependency builds, but I think the primary reason is building functionalities for which there aren't implementations we can shim.","username":"hartm","ts":"2018-10-24T00:08:39.304Z"}
{"msg":"If you're ever in the bay area, I can point you to a place with great french toast!","username":"hartm","ts":"2018-10-24T00:08:52.288Z"}
{"msg":"@MALodder @hartm @Dan FYI - some work being done on the sawtooth java sdk signing library currently to bring it to the same level as the rust/python sdks - https://github.com/hyperledger/sawtooth-sdk-java/pull/5","username":"amundson","ts":"2018-10-24T14:58:00.442Z"}
{"msg":"re:milagro, I think we should move to a model were we don't check in generated code, but rather generate it as part of the project's build. otherwise, doing the code generation becomes a specialized non-repeatable task (except by specific people obviously)","username":"amundson","ts":"2018-10-24T15:03:14.119Z"}
{"msg":"@MALodder did you previously mention some existing java JNA signing example code to look at?","username":"amundson","ts":"2018-10-24T15:05:08.280Z"}
{"msg":"Has joined the channel.","username":"boydjohnson","ts":"2018-10-25T17:42:05.296Z","type":"uj"}
{"msg":"Is there a sovrin crypto call now?","username":"Dan","ts":"2018-10-29T14:03:41.761Z"}
{"msg":"yes https://zoom.us/j/567114224","username":"brentzundel","ts":"2018-10-29T14:07:51.858Z"}
{"msg":"thx","username":"Dan","ts":"2018-10-29T14:11:23.277Z"}
{"msg":"are you working from an agenda posted somewhere?","username":"Dan","ts":"2018-10-29T14:25:16.684Z"}
{"msg":" Yes:","username":"hartm","ts":"2018-10-29T14:26:28.177Z"}
{"msg":"https://docs.google.com/document/d/1M3zgsRoOxlkjNPbDp4_7YWxuqO2EyefOT3Bt7ZgGIDY/edit?usp=sharing","username":"hartm","ts":"2018-10-29T14:26:31.672Z"}
{"msg":"gracias","username":"Dan","ts":"2018-10-29T14:26:36.399Z"}
{"msg":"Hi, can anyone recommend a good attribute based encryption library in Rust? thanks","username":"wip-abramson","ts":"2018-10-29T20:30:09.964Z"}
{"msg":"is this crypto-lib going to be one actually?","username":"wip-abramson","ts":"2018-10-29T20:33:05.488Z"}
{"msg":"@wip-abramson What kind of attribute-based encryption do you need?  I don't know of any existing libraries.","username":"hartm","ts":"2018-10-29T20:59:30.389Z"}
{"msg":"I am just looking to play around with it, my professor mentioned it.  I looked at charm crypto but it doesnt seem to work and would prefer something in Rust. Just wanting to try something like this https://jhuisi.github.io/charm/charm/schemes/abenc/abenc_bsw07.html. I am still pretty new to all this so just trying to figure things out. ","username":"wip-abramson","ts":"2018-10-30T12:15:14.272Z"}
{"msg":"https://github.com/Fraunhofer-AISEC/rabe this could be okay","username":"wip-abramson","ts":"2018-10-30T12:15:24.528Z"}
{"msg":"In terms of using or working with the crypto-lib as a dependency are there any examples of this? How would it be used? I would love to understand the code base better, is there a best way for me to do this? Struggling to get my head round it ","username":"wip-abramson","ts":"2018-10-30T12:21:27.981Z"}
{"msg":"crypto-lib is still in it's infancy.. or maybe gestation. :baby_symbol:  the code organization is still in flux.","username":"Dan","ts":"2018-10-30T13:05:06.037Z"}
{"msg":"If you want to see mature code organization maybe checkout openssl. I found libsnarks a little difficult to navigate but that's another project you might look at. More crypto novelty but the code organization is atypical - at least to me. Of course neither of those are rusty.  ","username":"Dan","ts":"2018-10-30T13:08:07.397Z"}
{"msg":"Okay, thanks Dan I will look into them. I am working towards understanding the cryptography used in hyperledger indy and more generally in identity systems so I figured the crypto-lib would be a good place to get involved. Ill keep working at it, still got a lot to learn with cryptography first","username":"wip-abramson","ts":"2018-10-30T14:46:13.615Z"}
{"msg":"Ok, some of my suggestions might be tangents then. It's useful to see how other libraries are organized but maybe not central to your objective. ","username":"Dan","ts":"2018-10-30T14:55:22.572Z"}
{"msg":"Has left the channel.","username":"ryanwest6","ts":"2018-10-30T23:40:52.710Z","type":"ul"}
{"msg":"@here Just a reminder of tomorrow's meeting (at the usual time).  I've sent out the agenda to the labs list.  Thanks, and hope to talk to many of you tomorrow!","username":"hartm","ts":"2018-10-31T01:55:33.534Z"}
{"msg":"@hartm can you post the link to the agenda?","username":"MALodder","ts":"2018-10-31T13:55:18.079Z"}
{"msg":" From the email:","username":"hartm","ts":"2018-10-31T13:56:18.125Z"}
{"msg":"\nSome agenda items:\n\n \n\n1.       Discuss the “tiering” process for implementations and any guidelines we want to have for this going forward.  Dan Middleton sent out an email about this earlier.\n\n2.       Naming.  Are we happy with Ursa?  We need to straighten everything out with the marketing committee no matter what we decide.\n\n3.       Final proposal edits/suggestions.  Is there anything we still need to change in light of recent discussion?","username":"hartm","ts":"2018-10-31T13:56:22.868Z"}
{"msg":"Proposal document:  https://docs.google.com/document/d/1JtFT5L-82egj6shgGXzTsNAg6_UHuMheKfsst6NS_Xo/edit?usp=sharing","username":"hartm","ts":"2018-10-31T13:58:06.989Z"}
{"msg":"Meeting Notes:  https://docs.google.com/document/d/1Z_8o8k_PFRM4XfZyv9jH1_-IyN0CsCMI2JlrGsCX378/edit?usp=sharing","username":"hartm","ts":"2018-10-31T13:58:31.752Z"}
{"msg":"Has joined the channel.","username":"anr09","ts":"2018-10-31T14:14:06.618Z","type":"uj"}
{"msg":"motivating pull request: https://github.com/hyperledger-labs/crypto-lib/pull/13","username":"Dan","ts":"2018-10-31T14:19:24.816Z"}
{"msg":"#SharedCrypto","username":"Dan","ts":"2018-10-31T14:58:51.178Z"}
{"msg":"https://lists.hyperledger.org/g/labs/topic/sharedcrypto_3rd_party/27631934?p=,,,20,0,0,0::recentpostdate%2Fsticky,,,20,2,0,27631934","username":"Dan","ts":"2018-10-31T14:59:39.052Z"}
{"msg":"thanks dan","username":"MALodder","ts":"2018-10-31T15:01:52.080Z"}
{"msg":"@Dan When sending an email do I send it to labs@lists.hyperledger.org with #SharedCrypto in the subject line?","username":"MALodder","ts":"2018-10-31T15:15:09.701Z"}
{"msg":"yep","username":"Dan","ts":"2018-10-31T15:16:22.534Z"}
{"msg":"just sent one and it appears to work","username":"MALodder","ts":"2018-10-31T15:19:04.592Z"}
{"msg":"@hartm link to the config/attributes/tier document?","username":"dhuseby","ts":"2018-10-31T15:37:12.190Z"}
{"msg":"@dhuseby Here is a link with what we have in the proposal:","username":"hartm","ts":"2018-10-31T15:52:55.498Z"}
{"msg":"https://docs.google.com/document/d/1zubstmrVvVUKikni3U750QcFPJ8QBVnoJJ06zimRduA/edit?usp=sharing","username":"hartm","ts":"2018-10-31T15:52:58.742Z"}
{"msg":"Please feel free to edit that as you all see fit.","username":"hartm","ts":"2018-10-31T15:53:07.924Z"}
{"msg":"To put a finer point on what I was proposing earlier for the config/attribute system is this:","username":"dhuseby","ts":"2018-10-31T17:42:29.362Z"}
{"msg":"1) we define a set of standard \"attributes\" like:  designed in the open, experimental, government approved, etc","username":"dhuseby","ts":"2018-10-31T17:43:40.153Z"}
{"msg":"2) every library under the ursa banner has an attributed that is the same as it's name (e.g. the \"sodium\" attribute selects for libsodium)","username":"dhuseby","ts":"2018-10-31T17:44:38.913Z"}
{"msg":"3) we define pre-determined, common configurations that are combinations of attributes of the #2 type (e.g. open_strong == blake2 + sodium)","username":"dhuseby","ts":"2018-10-31T17:46:06.876Z"}
{"msg":"The way I envision it being used by a consumer is to say: open_strong - blake2 + sha3 + zksnarks","username":"dhuseby","ts":"2018-10-31T17:47:08.148Z"}
{"msg":"or: fips_compliant + zksnarks","username":"dhuseby","ts":"2018-10-31T17:47:56.223Z"}
{"msg":"The attributes described as #1 are just lists of libraries under the ursa banner that have that attribute","username":"dhuseby","ts":"2018-10-31T17:49:13.270Z"}
{"msg":"so I could define my config as \"government_approved\" and I would get all of the NIST and Chinese govt approved primitives","username":"dhuseby","ts":"2018-10-31T17:50:04.649Z"}
{"msg":"@dhuseby  Can you add this to the document I linked just before?","username":"hartm","ts":"2018-10-31T17:54:07.697Z"}
{"msg":"yessir","username":"dhuseby","ts":"2018-10-31T20:30:14.742Z"}
{"msg":"@hartm done","username":"dhuseby","ts":"2018-10-31T20:48:25.159Z"}
{"msg":"Has joined the channel.","username":"adamgering","ts":"2018-11-01T14:43:29.846Z","type":"uj"}
{"msg":"@here We just got the project approved for incubation by the TSC.  Thanks everyone for all of the work you've done on this!  It's been an effort by a quite large group of people, so thank you all.","username":"hartm","ts":"2018-11-01T14:56:23.349Z"}
{"msg":"congratulations, all!!!","username":"MicBowman","ts":"2018-11-01T14:56:38.036Z"}
{"msg":":cartwheel_tone2: ","username":"MALodder","ts":"2018-11-01T15:02:58.945Z"}
{"msg":"You cannot fight the :bear: !","username":"Dan","ts":"2018-11-01T15:03:10.546Z"}
{"msg":"@tkuhrt the desired repos will be something like ursa-lib and ursa-rfcs. the latter is for capturing design and decisions .. very much like sawtooth-rfcs repo.","username":"Dan","ts":"2018-11-01T15:04:54.567Z"}
{"msg":"@Dan I assume you'll be creating these in Gerrit? Good choice","username":"rjones","ts":"2018-11-01T15:23:00.512Z"}
{"msg":"woohoo!!","username":"dhuseby","ts":"2018-11-01T15:33:35.977Z"}
{"msg":"Let me know when the project repos have been created and crypto-lib has been moved","username":"MALodder","ts":"2018-11-01T16:33:07.988Z"}
{"msg":"@rjones I don't dislike anyone here enough to force gerrit on them. :D","username":"Dan","ts":"2018-11-01T16:38:15.235Z"}
{"msg":"By the way, I also emailed the marketing folks about checking out the name Ursa.  Hopefully that will go through.","username":"hartm","ts":"2018-11-01T17:22:21.460Z"}
{"msg":"Marketing cannot fight the :bear: ","username":"Dan","ts":"2018-11-01T17:47:14.828Z"}
{"msg":"@Dan be careful or I'll lowercase your username","username":"rjones","ts":"2018-11-01T18:10:58.469Z"}
{"msg":"@Dan you cannot have hamburgers or candy canes until you do your homework","username":"jsmitchell","ts":"2018-11-01T18:33:32.340Z"}
{"msg":"if I had known that was at stake I would have worked harder in school","username":"rjones","ts":"2018-11-01T18:36:29.487Z"}
{"msg":"but @jsmitchell I have no homework","username":"Dan","ts":"2018-11-01T19:46:58.052Z"}
{"msg":"I think @rjones should definitely lower-case @Dan ","username":"amundson","ts":"2018-11-01T19:49:07.212Z"}
{"msg":"@Dan THEN YOU MUST FIGHT THE :bear: !","username":"jsmitchell","ts":"2018-11-01T19:49:28.217Z"}
{"msg":"Proof that even **formally verified** code still has issues. \nhttps://github.com/Inria-Prosecco/proscript-messaging/issues/1\nThe funny part is they closed the issue and reopened it. Probably for public relations","username":"MALodder","ts":"2018-11-01T20:48:24.055Z"}
{"msg":"Has joined the channel.","username":"Johnjam","ts":"2018-11-02T09:00:33.157Z","type":"uj"}
{"msg":"That's pretty funny.  I have to agree that \"side channels being out of scope\" doesn't mean \"choose the implementation that makes side channel attacks trivial.\"  We will have to have an in-depth discussion about similar issues at some point...","username":"hartm","ts":"2018-11-02T18:23:39.452Z"}
{"msg":"is there a sovrin crypto meeting this morning? I'm on https://zoom.us/j/567114224 but I'm all alone\n... and afraid of bears.","username":"Dan","ts":"2018-11-05T15:03:28.365Z"}
{"msg":"... and daylight savings time changes.","username":"Dan","ts":"2018-11-05T15:07:44.445Z"}
{"msg":"Yes, there is.","username":"hartm","ts":"2018-11-05T15:10:16.205Z"}
{"msg":"You are invited to a Zoom meeting now. \n\nJoin from PC, Mac, Linux, iOS or Android: https://zoom.us/j/567114224\n\nOr iPhone one-tap:\n    US: +16465588656,,567114224#  or +16699006833,,567114224# \nOr Telephone:\n    Dial(for higher quality, dial a number based on your current location): \n        US: +1 646 558 8656  or +1 669 900 6833 \n    Meeting ID: 567 114 224\n    International numbers available: https://zoom.us/u/cFq6UzUSw\n\n","username":"hartm","ts":"2018-11-05T15:10:20.371Z"}
{"msg":"You sure you clicked on the right meeting link?","username":"hartm","ts":"2018-11-05T15:11:04.025Z"}
{"msg":"weird .. thanks","username":"Dan","ts":"2018-11-05T15:25:56.662Z"}
{"msg":"is this library ready to used in the context of development in python, signing using Secp256k1?","username":"adamgering","ts":"2018-11-05T19:41:46.585Z"}
{"msg":"is there (or going to be) an installer via pip?","username":"adamgering","ts":"2018-11-05T19:42:26.373Z"}
{"msg":"@adamgering once the project has an official incubation project, I can imagine it will in the future. The first thing we need to do is get a CI/CD pipeline being built for Rust. Next would be the wrappers like python","username":"MALodder","ts":"2018-11-05T20:43:59.855Z"}
{"msg":"I believe we are just waiting on legal review then we should be good to go to be in incubation","username":"MALodder","ts":"2018-11-05T20:44:32.622Z"}
{"msg":"@MALodder @adamgering  We have been approved for incubation (happened at the meeting last Thursday).  We are just waiting on final approval from legal for the name (which we need for repo creation).","username":"hartm","ts":"2018-11-05T21:29:50.418Z"}
{"msg":"@adamgering I think for the near term, you are fine to rely on the sawtooth python signing package. The API's align closely. What we have in crypto-lib || ursa now is only a rust interface. My intent is that Ursa will replace all the sawtooth signing libraries. That probably won't happen for a quarter or so though. I'm not sure exactly the timeline but we want to get Ursa stable and then tested with Sawtooth before we make big changes.","username":"Dan","ts":"2018-11-06T03:18:48.950Z"}
{"msg":"Has joined the channel.","username":"PadmavathyMohan","ts":"2018-11-08T07:17:57.087Z","type":"uj"}
{"msg":"Hey, all. I am going to rename this chat channel to ursa to match the project name. I just wanted to give everyone a heads up that I will be doing that this afternoon.","username":"tkuhrt","ts":"2018-11-08T18:09:52.171Z"}
{"msg":"very bearish, thx for the update","username":"greg2git","ts":"2018-11-08T18:35:53.213Z"}
{"msg":"that was barely enough notice\n_(buckle in... i'm going to use that same pun repeatedly for the next 5 years)_","username":"Dan","ts":"2018-11-08T19:22:02.978Z"}
{"msg":"that was barely enough notice\n(buckle in... i'm going to use that same pun repeatedly for the next 5 years)","username":"Dan","ts":"2018-11-08T19:22:02.978Z"}
{"msg":"Thanks Tracy!","username":"hartm","ts":"2018-11-08T20:01:58.468Z"}
{"msg":"Going to send out an email to the labs list making sure people know.","username":"hartm","ts":"2018-11-08T20:02:53.844Z"}
{"msg":"FYI, I also created the Ursa mailing list: https://lists.hyperledger.org/g/ursa","username":"tkuhrt","ts":"2018-11-08T20:17:30.225Z"}
{"msg":"Thanks Tracy!","username":"hartm","ts":"2018-11-08T20:23:14.817Z"}
{"msg":"Hyperledger Ursa is a shared cryptographic library that would enable people (and projects) to avoid duplicating other cryptographic work and hopefully increase security in the process. The library would be an opt-in repository for projects (and, potentially others) to place and use crypto.","username":"tkuhrt","ts":"2018-11-08T20:24:14.663Z","type":"room_changed_topic"}
{"msg":"Discussions related to the Hyperledger Ursa project","username":"tkuhrt","ts":"2018-11-08T20:24:14.829Z","type":"room_changed_description"}
{"msg":"Room name changed to: <em>ursa</em> by <em>tkuhrt</em>","username":"tkuhrt","ts":"2018-11-08T20:24:14.898Z","type":"r"}
{"msg":"Discussions related to the Hyperledger Ursa project","username":"tkuhrt","ts":"2018-11-08T20:24:56.817Z","type":"room_changed_topic"}
{"msg":"Hyperledger Ursa is a shared cryptographic library that would enable people (and projects) to avoid duplicating other cryptographic work and hopefully increase security in the process. The library would be an opt-in repository for projects (and, potentially others) to place and use crypto.","username":"tkuhrt","ts":"2018-11-08T20:24:56.818Z","type":"room_changed_description"}
{"msg":":bear: ","username":"Dan","ts":"2018-11-08T20:31:08.437Z"}
{"msg":"Have repos been created?","username":"MALodder","ts":"2018-11-09T12:57:09.170Z"}
{"msg":"https://medium.com/interstellar/bulletproofs-pre-release-fcb1feb36d4b","username":"kelly_","ts":"2018-11-09T16:12:15.006Z"}
{"msg":"I'd love to put this into z-mix for range proofs in anonymous credentials","username":"MALodder","ts":"2018-11-09T17:42:27.161Z"}
{"msg":"I know Indy would like to take advantage of it","username":"MALodder","ts":"2018-11-09T17:46:13.809Z"}
{"msg":":bear: ?","username":"Dan","ts":"2018-11-09T18:00:38.243Z"}
{"msg":"Yeah, it would defnitely be nice to have an implementation like this included.","username":"hartm","ts":"2018-11-09T20:03:11.328Z"}
{"msg":"@MALodder I think we're waiting on the final blessing on the name","username":"rjones","ts":"2018-11-10T05:33:13.942Z"}
{"msg":"who's doing the blessing? ursa is kind of stuck in my mind, considering how polaris is in it","username":"greg2git","ts":"2018-11-10T13:39:40.367Z"}
{"msg":"_“We have top men working on it now.”_","username":"Dan","ts":"2018-11-10T14:17:23.148Z"}
{"msg":"_“…Who?”_\n_“…Top… men.”_","username":"Dan","ts":"2018-11-10T14:18:03.687Z"}
{"msg":"_\"Not that Jones the other Jones\"_","username":"MALodder","ts":"2018-11-11T03:16:27.567Z"}
{"msg":"As a Jones I heard enough of that Mister Jones song the first time I heard it thank you","username":"rjones","ts":"2018-11-11T22:34:58.039Z"}
{"msg":"I think we have enough of a blessing at this point to get going.","username":"hartm","ts":"2018-11-12T05:27:59.887Z"}
{"msg":"(There isn't a formal process for this by the way, as I found out when trying to make sure the name was OK).","username":"hartm","ts":"2018-11-12T05:28:54.596Z"}
{"msg":"The name is blessed. What we are waiting on is a ticket that will provide us with the details of what we are looking for. @hartm : Are you working on this? Have you already submitted ticket? What can we do to help?","username":"tkuhrt","ts":"2018-11-12T21:23:54.723Z"}
{"msg":"The name is blessed. What we are waiting on is a ticket that will provide us with the details of what we are looking to do with the Github repos and settings. @hartm : Are you working on this? Have you already submitted ticket? What can we do to help?","username":"tkuhrt","ts":"2018-11-12T21:23:54.723Z"}
{"msg":"@tkuhrt We have an outline but there are still some differences of opinion about how to set things up.  We're planning on discussing this at our Wednesday meeting.  Can we get back to you after that!  Thanks for all of your help!","username":"hartm","ts":"2018-11-12T21:57:21.156Z"}
{"msg":"@tkuhrt I believe Dan said we needed two repos, hyperledger/ursa and hyperledger/ursa-rfcs","username":"MALodder","ts":"2018-11-12T22:41:10.825Z"}
{"msg":"@hartm : Let us know. We will wait until we hear from you. We will also need to understand if we are moving the labs repos or archiving them.","username":"tkuhrt","ts":"2018-11-12T23:27:13.255Z"}
{"msg":"I think we move crypto-lib to ursa or do we want ursa-lib? And then yes, we'll want an rfc repo. What do you guys what to do with zmix? Is that ursa-zmix or does it stay in the lab until some milestone?","username":"Dan","ts":"2018-11-13T01:38:50.909Z"}
{"msg":"I think we move crypto-lib to ursa or do we want ursa-lib? And then yes, we'll want an rfc repo. What do you guys what to do with zmix? Is that ursa-zmix or does it stay in the lab until some milestone?","username":"Dan","ts":"2018-11-13T01:38:50.909Z"}
{"msg":"Or do we just commit the zmix directory tree into the ursa-lib repo? ","username":"Dan","ts":"2018-11-13T01:39:34.042Z"}
{"msg":"I think the decision kind of depends on evolving the tier concept. (division by namespace, path, etc. ?)","username":"Dan","ts":"2018-11-13T01:39:57.483Z"}
{"msg":"I believe we want to incorporate Zmix, but, as Dan points out, clearly separate it from the base signature/symmetric primitive library (because it is, in fact, a separate tier by our definitions, and most people will be less confident in its security).  I know very little about build processes compared to some people on this channel.  How do you all want to do it?  @Dan @MALodder @amundson @binhn. ","username":"hartm","ts":"2018-11-13T16:06:42.797Z"}
{"msg":"@mike is on a plane today, so he can't weigh in, but I believe we already incorporated most of the code together from a repository perspective","username":"nage","ts":"2018-11-13T16:22:05.200Z"}
{"msg":"@MALodder  is on a plane today, so he can't weigh in, but I believe we already incorporated most of the code together from a repository perspective","username":"nage","ts":"2018-11-13T16:22:05.200Z"}
{"msg":"in the way that @hartm describes","username":"nage","ts":"2018-11-13T16:22:25.570Z"}
{"msg":"I believe we’ll just have in ursa as another folder","username":"MALodder","ts":"2018-11-13T22:27:58.332Z"}
{"msg":"I want to merge it into crypto lib/ursa as soon as we agree to","username":"MALodder","ts":"2018-11-13T22:28:20.305Z"}
{"msg":"@here Just a reminder of our meeting tomorrow!  Thanks!","username":"hartm","ts":"2018-11-14T03:30:02.430Z"}
{"msg":"I most likely won't make the call tomorrow but please consider my PRs and comments on the email list for tomorrow's discussion and let me know the outcomes","username":"MALodder","ts":"2018-11-14T10:24:22.563Z"}
{"msg":"Jet lag I got my days mixed. I can attend the crypto lib call","username":"MALodder","ts":"2018-11-14T13:32:27.586Z"}
{"msg":"it is no longer the crypto-lib call tho! :bear: ","username":"Dan","ts":"2018-11-14T14:41:39.927Z"}
{"msg":"Morning. I’m back from the wilderness. Still traveling. But on the call. ","username":"dhuseby","ts":"2018-11-14T15:04:21.971Z"}
{"msg":"Meeting notes:","username":"hartm","ts":"2018-11-14T15:10:28.762Z"}
{"msg":"https://docs.google.com/document/d/1Z_8o8k_PFRM4XfZyv9jH1_-IyN0CsCMI2JlrGsCX378/edit?usp=sharing","username":"hartm","ts":"2018-11-14T15:10:33.807Z"}
{"msg":"Rough draft of our project announcement PR:  https://docs.google.com/document/d/1FtIq2F7XeGoibz0Hbbn7-n-sRuvCjePh9FAeP-EZ7A8/edit?usp=sharing","username":"hartm","ts":"2018-11-14T15:25:03.612Z"}
{"msg":"Please comment if you have questions, comments, or suggestions!","username":"hartm","ts":"2018-11-14T15:25:13.755Z"}
{"msg":"@here I made a pass on the PR.  Mostly changing passive voice to active voice.  Other than that, it is great.\n","username":"dhuseby","ts":"2018-11-14T18:03:25.394Z"}
{"msg":"@dhuseby Busy right now but I'll take a look today.  Thanks a lot for making a pass!","username":"hartm","ts":"2018-11-14T18:04:28.819Z"}
{"msg":"you're welcome","username":"dhuseby","ts":"2018-11-14T18:06:04.712Z"}
{"msg":"thanks for putting it together","username":"dhuseby","ts":"2018-11-14T18:06:10.809Z"}
{"msg":"Has left the channel.","username":"n3m","ts":"2018-11-16T13:29:30.544Z","type":"ul"}
{"msg":"Do we have a plan to track project plans and efforts in JIRA?  Or is this a topic we have yet to discuss in the calls?","username":"nage","ts":"2018-11-16T16:24:02.391Z"}
{"msg":"(getting asks from the Indy community on how to log issues, track progress, etc)","username":"nage","ts":"2018-11-16T16:24:24.291Z"}
{"msg":"I don't think we discussed yet, but yeah I think jira is the conventional path for HL projects.\nmaybe the variant that our projects have both been using is this rfc process that is a predecessor of creating a user story / epic in jira for new features .. esp features that impact APIs.","username":"Dan","ts":"2018-11-16T16:56:11.785Z"}
{"msg":"We haven't discussed this yet in meetings.  Someone brought it up near the end of our last meeting, but we didn't have time to discuss it and decided it was a large enough topic that we should defer it to later.","username":"hartm","ts":"2018-11-16T17:28:18.877Z"}
{"msg":"Do you all want to talk about it at our next meeting?","username":"hartm","ts":"2018-11-16T17:28:36.483Z"}
{"msg":"I find libsnark mostly unmaintained atm. For those working on snarks (maybe @lovesh ?), are you relying on other projects?","username":"Dan","ts":"2018-11-16T20:40:58.372Z"}
{"msg":"we've only considered two snark libraries: libsnark and bellman","username":"MALodder","ts":"2018-11-18T11:56:41.287Z"}
{"msg":"lovesh and dmitry said libsnark has been more stable during their tests","username":"MALodder","ts":"2018-11-18T11:57:05.492Z"}
{"msg":"I will be traveling tomorrow and have asked @brentzundel to chair the sovrin crypto call tomorrow at 8AM MST.","username":"MALodder","ts":"2018-11-18T14:36:23.632Z"}
{"msg":"Has joined the channel.","username":"richzhao","ts":"2018-11-22T13:37:54.855Z","type":"uj"}
{"msg":"@here Just a reminder of tomorrow's meeting.  I've sent out a tentative agenda to the ursa list.  Please feel free to respond and add things you'd like to discuss.  Thanks!","username":"hartm","ts":"2018-11-28T02:09:15.518Z"}
{"msg":"hrmmm i don't see the note. can you double check it hit the list?","username":"Dan","ts":"2018-11-28T14:46:43.598Z"}
{"msg":"(I've found lots of other interesting emails I haven't openned yet but not that one. Now I wish i hadn't dug so deep. I'm going to have to re-bury some of these unopened emails. )","username":"Dan","ts":"2018-11-28T14:47:53.176Z"}
{"msg":"Just resent it.  ","username":"hartm","ts":"2018-11-28T14:58:14.515Z"}
{"msg":"For some reason it seemed to get black holed by the mail server on the initial send...","username":"hartm","ts":"2018-11-28T14:58:30.608Z"}
{"msg":"source was not trustworthy :D","username":"Dan","ts":"2018-11-28T15:00:09.273Z"}
{"msg":"Meeting notes:  https://docs.google.com/document/d/1Z_8o8k_PFRM4XfZyv9jH1_-IyN0CsCMI2JlrGsCX378/edit?usp=sharing","username":"hartm","ts":"2018-11-28T15:03:36.353Z"}
{"msg":"https://github.com/hyperledger/ursa-rfcs/pull/2","username":"Dan","ts":"2018-11-28T15:20:55.971Z"}
{"msg":"go here to read https://github.com/hyperledger/ursa-rfcs/blob/77144a9f59aa1394f2ff6505b3284859d875d6ef/README.md","username":"MALodder","ts":"2018-11-28T15:21:28.098Z"}
{"msg":"@dhuseby don't write it yourself if you can recruit new community members ;) https://gist.github.com/shahar96/1215cd1408328d8c5b88","username":"nage","ts":"2018-11-28T15:41:57.800Z"}
{"msg":"@nage nice!","username":"dhuseby","ts":"2018-11-28T17:21:29.879Z"}
{"msg":"now I just need to write a small bf to asm translator so we can include it into the actual binary","username":"dhuseby","ts":"2018-11-28T17:21:51.086Z"}
{"msg":"@MALodder @Dan @hartm just sent invite to sync on Friday.","username":"dhuseby","ts":"2018-11-28T19:56:40.081Z"}
{"msg":"@dhuseby thanks","username":"MALodder","ts":"2018-11-28T19:56:58.660Z"}
{"msg":"did you send it to my email?","username":"MALodder","ts":"2018-11-28T19:57:14.484Z"}
{"msg":"or to the ursa-list","username":"MALodder","ts":"2018-11-28T19:57:21.224Z"}
{"msg":"just sent it to your correct email address","username":"dhuseby","ts":"2018-11-28T19:58:02.732Z"}
{"msg":"It's just you and me with hart and dan optional","username":"dhuseby","ts":"2018-11-28T19:58:16.893Z"}
{"msg":"got it","username":"MALodder","ts":"2018-11-28T19:58:17.697Z"}
{"msg":"I see us as forward air controllers","username":"dhuseby","ts":"2018-11-28T19:58:27.729Z"}
{"msg":"let's dig into details and report back to the main group","username":"dhuseby","ts":"2018-11-28T19:58:35.177Z"}
{"msg":"and have a broader discussion on the 19th","username":"dhuseby","ts":"2018-11-28T19:58:48.331Z"}
{"msg":"or at the global summit","username":"dhuseby","ts":"2018-11-28T19:59:01.309Z"}
{"msg":"@MALodder @Dan @hartm I just rescheduled the meeting.  Same time, just added zoom conferencing.","username":"dhuseby","ts":"2018-11-28T20:15:20.305Z"}
{"msg":"I may have to leave the meeting a bit early.  I'm planning on attending https://bacrypto.github.io/events/bacryptoday-7.html on Friday.","username":"hartm","ts":"2018-11-28T20:15:54.284Z"}
{"msg":"hrm...","username":"dhuseby","ts":"2018-11-28T20:46:23.581Z"}
{"msg":"can we do tomorrow?","username":"dhuseby","ts":"2018-11-28T20:46:33.710Z"}
{"msg":"Works for me","username":"MALodder","ts":"2018-11-29T02:50:25.640Z"}
{"msg":"@dhuseby trying to get into zoom and its not working yet","username":"MALodder","ts":"2018-11-29T18:00:19.051Z"}
{"msg":"@hartm ^^ are you having this problem","username":"MALodder","ts":"2018-11-29T18:03:41.268Z"}
{"msg":"@MALodder Yes.  It's not working for me either.  Says the meeting is on the 30th.","username":"hartm","ts":"2018-11-29T18:07:11.812Z"}
{"msg":"@hartm its working now","username":"MALodder","ts":"2018-11-29T18:07:28.836Z"}
{"msg":"https://zoom.us/j/600444473","username":"MALodder","ts":"2018-11-29T18:07:45.916Z"}
{"msg":"@hartm ^^^","username":"MALodder","ts":"2018-11-29T18:07:54.609Z"}
{"msg":"https://docs.google.com/document/d/1-BZyrtRWDQFpudvR59NsAdf0_VSFCtz5OoXXAM0Hoy8/edit?usp=sharing","username":"dhuseby","ts":"2018-11-29T18:09:04.175Z"}
{"msg":"link to the doc ^^^","username":"dhuseby","ts":"2018-11-29T18:09:11.830Z"}
{"msg":"@dhuseby @tkuhrt @rjones I'm supposed to be a maintainer on ursa, but I went to do something for the repo and I am not a maintainer","username":"MALodder","ts":"2018-11-30T16:48:41.503Z"}
{"msg":"can I be added please?","username":"MALodder","ts":"2018-11-30T16:48:49.462Z"}
{"msg":"github handle: mikelodder7","username":"MALodder","ts":"2018-11-30T16:49:22.657Z"}
{"msg":"I also don't appear to have what I would consider maintainer level permissions on either repo.\nOn a related point, for repo configuration, I recommend copying the settings from Sawtooth as I know that's dialed in for things like requiring +2 reviewers on PR, no force pushing etc. I imagine that @jwagantall would not have gotten that direction.\n\nIn general we should all issue tickets so that it's clear exactly what is being asked and who is doing it. Project genesis is maybe a little different because there is a lot of process that the Community Architects need to facilitate (has there been a TSC vote, who are the documented maintainers who would otherwise have issued the ticket, etc etc).","username":"Dan","ts":"2018-11-30T17:33:41.200Z"}
{"msg":"Has joined the channel.","username":"jwagantall","ts":"2018-11-30T17:33:41.676Z","type":"uj"}
{"msg":"@MALodder : I just checked and you are in the Ursa maintainers team. Not sure if someone added you this morning. Can you check again and confirm with us","username":"tkuhrt","ts":"2018-11-30T17:37:59.267Z"}
{"msg":"@Dan : You are also a maintainer. This gives write access to the two repositories. I know that we were removing Admin permissions from groups going forward. cc: @Silona ","username":"tkuhrt","ts":"2018-11-30T17:39:41.842Z"}
{"msg":"Has joined the channel.","username":"Silona","ts":"2018-11-30T17:39:42.456Z","type":"uj"}
{"msg":"I think that means we also can't do things like create branches which is a pretty fundamental thing for a maintainer to do. Ry has earlier sensitized me to the issues caused by lack of granularity in github's permissioning model. I do think that despite those challenges, it's appropriate for maintainers to have admin access to their repos.","username":"Dan","ts":"2018-11-30T17:41:22.980Z"}
{"msg":"  @tkuhrt Yes I do now","username":"MALodder","ts":"2018-11-30T18:08:38.131Z"}
{"msg":"I agree with @Dan, at least a few of the maintainers should have admin","username":"amundson","ts":"2018-11-30T20:08:43.323Z"}
{"msg":"We should but which ones","username":"MALodder","ts":"2018-11-30T21:02:09.804Z"}
{"msg":"One criteria is who is involved in release mechanics","username":"amundson","ts":"2018-11-30T21:11:13.474Z"}
{"msg":"Ideally, the most responsible people (which for this basically means people that will not disable or circumvent DCO, because that's about the only thing you could do wrong)","username":"amundson","ts":"2018-11-30T21:13:36.889Z"}
{"msg":"There are good reasons for it not to be a large group, because you really do have to be sensitive to the fact that there is a small amount of overlap between things the HL folks would do and the things project repo admins might do, and they should never be in conflict. Like 3-4 folks at most, IMO.","username":"amundson","ts":"2018-11-30T21:17:05.107Z"}
{"msg":"```\nSawtooth Github Permissions and Settings\n----------------------------------------\n\nSawtooth has many repositories in Hyperledger's github organization, which all\nfollow similar permissioning rules.\n\nRepositories generally have the following groups:\n\n- The \"Sawtooth Core Admins\" group consisting of a very small number of\n  individuals who have admin priviliges on that specific repository. The\n  bar for adding new members to this group is very high. (In the future, this\n  group could be renamed \"Sawtooth Admins\".)\n- A repository-specific maintainers group with write permissions, which should\n  match the maintainers list in MAINTAINERS.md. Rules governing maintainership\n  are defined by Sawtooth's governance documentation (in the sawtooth-rfcs\n  repo), and new maintainers are voted in by existing maintainers. Pattern\n  always fits the pattern \"Sawtooth X Maintainers\", where X is derived from\n  the name of the repository, such as \"Core\" for sawtooth-core.\n- The \"Sawtooth Core Contributors\" group, which has read permissions.\n  Membership in this group need only meet a low threshold, and its general\n  purpose is allowing additional reviewers to be added to the repositories. It\n  includes all Sawtooth contributors, regardless of were they have contributed.\n  (In the future, this group should be renamed \"Sawtooth Contributors\".)\n- A repository-specific committers group, which allows additional\n  non-maintainers to be added with write permissions. Generally, this should\n  never be done, because it is very confusing from a github approvals\n  perspective. However, it can be used to grandfather in write permissions.\n\nThis, most repositories will have exactly three groups: admin, maintainer,\nand contributor.\n\nA 'sawtooth-build' user is commonly added as a collaborator - this is for\nSawtooth Jenkins integration. No other collaborators are commonly added.\n\nIn addition to groups, the following settings apply to each repository:\n\n- Features:\n  - Wikis: Unchecked - Sawtooth components use sphinx-doc (usually located in\n    docs/, README.md, etc.). Facilitates project goal of maintaining\n    high-quality peer-reviewed documentation.\n  - Restrict editing to users in teams with push access only: Unchecked\n  - Issues: Unchecked - Sawtooth components use Hyperledger JIRA. Helps\n    facilitates cross-component issues.\n  - Projects: Unchecked - Sawtooth components use Hyperledger JIRA.\n- Data services:\n  - Vulnerability alerts: Checked\n- Merge button:\n  - Allow merge commits: Checked\n  - Allow squash merging: Unchecked - Facilitates project-level goal of good\n    commits (https://chris.beams.io/posts/git-commit/); part of peer review\n    includes commit granularity and messages.\n  - Allow rebase merging: Checked\n- GitHub Pages\n  - Source - None - Project does not use GitHub Pages\n- Branches\n  - Default branch: master\n  - Branch protection rules: At least one rule is required here, usually\n    applied to '*'.\n    - Require pull request reviews before merging\": Checked\n      - Required approving reviews: 2\n      - Dismiss stale pull request approvals when new commits are pushed:\n        Unchecked\n      - Require review from Code Owners: Unchecked\n      - Restrict who can dismiss pull request reviews: Unchecked\n    - Require status checks to pass before merging\": Checked\n      - DCO: Checked - This is required by HL rules and must always be enabled.\n      - other: commonly continuous-integration/jenkins checks related to\n        Jenkins integration\n    - Required signed commits: Unchecked\n    - Include administrators: Checked - very important due overlap between\n      developers and \"Sawtooth Core Admins\" group\n    - Restrict who can push to matching branches: Unchecked\n  - Webhooks:\n    - JIRA integration (not consistently applied)\n    - RocketChat integration (broken - meant to post a message to\n      #sawtooth-pr-review)\n```","username":"amundson","ts":"2018-11-30T21:22:25.298Z"}
{"msg":"^ that's a description of the Sawtooth perms and settings","username":"amundson","ts":"2018-11-30T21:22:58.777Z"}
{"msg":"it has been helpful to have CODEOWNERS set such that it adds all maintainers as reviewers by default (we are still rolling that out for the Sawtooth repos, but its worked well were we have it)","username":"amundson","ts":"2018-11-30T21:26:17.438Z"}
{"msg":"I would like this responsibility","username":"MALodder","ts":"2018-11-30T21:33:48.344Z"}
{"msg":"@Dan in collaboration with @jovan, I submitted the initial PR that merges the history from indy-crypto","username":"MALodder","ts":"2018-11-30T21:36:33.782Z"}
{"msg":"Has joined the channel.","username":"jovan","ts":"2018-11-30T21:36:33.919Z","type":"uj"}
{"msg":"@hartm @dan @amundson @dhuseby can I please have two reviewers on this [PR](https://github.com/hyperledger/ursa/pull/2)","username":"MALodder","ts":"2018-11-30T21:37:52.505Z"}
{"msg":"I would say Mike and Shawn, at minimum, should have admin access.  ","username":"hartm","ts":"2018-11-30T23:55:08.334Z"}
{"msg":"Clearly, though, we need github to implement threshold cryptography so that we can allow admin actions with k out of n maintainers signing off!","username":"hartm","ts":"2018-11-30T23:56:14.602Z"}
{"msg":"At least we know a library they could use ","username":"MALodder","ts":"2018-12-01T00:15:40.993Z"}
{"msg":"😉","username":"MALodder","ts":"2018-12-01T00:37:44.494Z"}
{"msg":"Has joined the channel.","username":"NursultanMakhanov","ts":"2018-12-01T15:26:54.007Z","type":"uj"}
{"msg":"https://docs.google.com/document/d/1M3zgsRoOxlkjNPbDp4_7YWxuqO2EyefOT3Bt7ZgGIDY/edit?usp=sharing","username":"hartm","ts":"2018-12-03T15:07:27.587Z"}
{"msg":"Has joined the channel.","username":"donqui","ts":"2018-12-04T18:50:39.336Z","type":"uj"}
{"msg":"Has joined the channel.","username":"ashutosh_kumar","ts":"2018-12-04T19:05:18.194Z","type":"uj"}
{"msg":"Has joined the channel.","username":"MiguelFJimenezSola","ts":"2018-12-04T19:22:41.130Z","type":"uj"}
{"msg":"https://www.google.com/amp/s/www.coindesk.com/hyperledger-launches-cryptography-toolbox-for-blockchain-developers/amp","username":"brentzundel","ts":"2018-12-04T21:30:46.078Z"}
{"msg":"Has joined the channel.","username":"JonathanLevi","ts":"2018-12-04T21:45:17.097Z","type":"uj"}
{"msg":"https://medium.com/aztec-protocol/confidential-transactions-have-arrived-a-dive-into-the-aztec-protocol-a1794c00c009","username":"kelly_","ts":"2018-12-04T22:12:32.381Z"}
{"msg":"Who will be in Basel and is interested in meeting with Bruce Schneier on Thursday morning to talk about Ursa?  After his keynote.  Would love to get his support for the project, mention it in his newsletters, etc","username":"bbehlendorf","ts":"2018-12-05T01:49:05.472Z"}
{"msg":"Great work everyone on the announcement today, btw","username":"bbehlendorf","ts":"2018-12-05T01:49:18.411Z"}
{"msg":"Has joined the channel.","username":"JOYELIN","ts":"2018-12-05T05:47:39.254Z","type":"uj"}
{"msg":"Has joined the channel.","username":"iamdm","ts":"2018-12-05T08:22:16.640Z","type":"uj"}
{"msg":"I'm not actively working on Ursa, but have been following it. I'd love to be a fly on the wall in this at least.","username":"kdenhartog","ts":"2018-12-05T09:55:02.389Z"}
{"msg":"+1 Same as @kdenhartog would be glad to hear about this.","username":"alain2sf","ts":"2018-12-05T10:40:44.816Z"}
{"msg":"Has left the channel.","username":"iamdm","ts":"2018-12-05T10:50:58.454Z","type":"ul"}
{"msg":"Has joined the channel.","username":"dagacha","ts":"2018-12-05T12:29:52.800Z","type":"uj"}
{"msg":"Now you tell me about Bruce Schneier now that I'm not able to go","username":"MALodder","ts":"2018-12-05T14:23:59.045Z"}
{"msg":"@Dan did I answer your question on github? We need to get moving on this as many are excited to start contributing","username":"MALodder","ts":"2018-12-05T14:25:25.674Z"}
{"msg":"There's that wrappers directory? I wasn't sure if that was intentional as it's not part of crypto-lib.","username":"Dan","ts":"2018-12-05T14:35:47.689Z"}
{"msg":"For now I plan to leave it and later expand it so ursa can use it","username":"MALodder","ts":"2018-12-05T14:47:58.760Z"}
{"msg":"We can add to the wrappers as we go or did we decide to not have it there?","username":"MALodder","ts":"2018-12-05T14:48:39.312Z"}
{"msg":"I’m mostly excited to have something to show before Basil","username":"MALodder","ts":"2018-12-05T14:49:00.401Z"}
{"msg":"Yeah I'm just trying to be clear on what I'm approving and what's intentionally part of the PR and what might have been swept up inadvertently. I don't want to rubber stamp a PR with 121 files and 47 kloc. (well actually I want to do that because it's easier and I'm lazy, but I feel I shouldn't do that) ;)","username":"Dan","ts":"2018-12-05T15:19:28.339Z"}
{"msg":"I get it Dan, I don't want you rubber stamping either, I just want discussion to happen and not let it sit there stale","username":"MALodder","ts":"2018-12-05T15:23:32.856Z"}
{"msg":"If only I could get reviews this fast on my other projects! :)","username":"Dan","ts":"2018-12-05T15:25:30.397Z"}
{"msg":"Yeah I prefer to at least have some feedback on going so contributors don’t feel ignored ","username":"MALodder","ts":"2018-12-05T15:35:56.285Z"}
{"msg":"But maybe it’s just me","username":"MALodder","ts":"2018-12-05T15:36:11.102Z"}
{"msg":"sorry","username":"dhuseby","ts":"2018-12-05T15:36:21.383Z"}
{"msg":"In soviet russia the code reviews you!","username":"dhuseby","ts":"2018-12-05T15:36:35.410Z"}
{"msg":"i'm super busy with the Iroha release review stuff","username":"dhuseby","ts":"2018-12-05T15:36:51.474Z"}
{"msg":"Ive been ignoring everything else","username":"dhuseby","ts":"2018-12-05T15:37:02.422Z"}
{"msg":"I'm in Charlotte, the code here is basketball","username":"MALodder","ts":"2018-12-05T16:06:59.194Z"}
{"msg":"go Hornets!","username":"donqui","ts":"2018-12-05T16:09:53.501Z"}
{"msg":"Blue Devils, Wildcats, and 49ers","username":"MALodder","ts":"2018-12-05T16:12:05.383Z"}
{"msg":"https://www.seattletimes.com/business/amazon-workers-treated-after-bear-repellant-releases-fumes/","username":"jsmitchell","ts":"2018-12-05T20:12:28.453Z"}
{"msg":"even countermeasures can be dangerous","username":"jsmitchell","ts":"2018-12-05T20:18:13.320Z"}
{"msg":"when I was on my way into the BWCA I was told some guy had recently been rescued... his bear spray was strung on his vest and a tree branch snagged it and sprayed him point blank in the face. He wandered around blind trying to get back to the lake to wash is face.","username":"Dan","ts":"2018-12-05T21:03:21.850Z"}
{"msg":"you should have taken that as a sign to turn back","username":"jsmitchell","ts":"2018-12-05T21:11:19.512Z"}
{"msg":"Has joined the channel.","username":"nekia","ts":"2018-12-06T23:15:13.029Z","type":"uj"}
{"msg":"Has joined the channel.","username":"scott-long","ts":"2018-12-11T06:02:40.909Z","type":"uj"}
{"msg":"So I do not have admin privileges on ursa and I noticed that DCO is not turned on","username":"MALodder","ts":"2018-12-11T19:58:26.480Z"}
{"msg":"Can we please turn it on as a required check for PRs?","username":"MALodder","ts":"2018-12-11T19:58:45.953Z"}
{"msg":"sorry the DCO is on","username":"MALodder","ts":"2018-12-11T19:58:54.212Z"}
{"msg":"new [PR #3](https://github.com/hyperledger/ursa/pull/3)","username":"MALodder","ts":"2018-12-11T19:59:30.366Z"}
{"msg":"Hi Brian @bbehlendorf any news on a possible meet up with Bruce S tomorrow at HGF? ","username":"alain2sf","ts":"2018-12-12T14:50:28.532Z"}
{"msg":"It would be nice to have my PR merged before that meeting with Bruce S","username":"MALodder","ts":"2018-12-12T18:21:05.583Z"}
{"msg":"Has joined the channel.","username":"ingo_so","ts":"2018-12-13T11:38:55.292Z","type":"uj"}
{"msg":"Has joined the channel.","username":"Abhinavgrg074","ts":"2018-12-14T06:19:15.134Z","type":"uj"}
{"msg":"The NSA “equivalent” 😉 French organization ANSSI has published a guide to develop secure applications with Rust:\nhttps://github.com/ANSSI-FR/rust-guide","username":"alain2sf","ts":"2018-12-14T20:52:03.939Z"}
{"msg":"Has joined the channel.","username":"ksinkar","ts":"2018-12-15T08:43:55.153Z","type":"uj"}
{"msg":"Has joined the channel.","username":"mogamboizer","ts":"2018-12-17T20:50:03.217Z","type":"uj"}
{"msg":"Has joined the channel.","username":"bhawana","ts":"2018-12-18T15:44:47.179Z","type":"uj"}
{"msg":"@MALodder on my todo list this morning was looking at the rebase PR.. just saw you closed it. What's the plan there?","username":"Dan","ts":"2018-12-18T17:09:45.398Z"}
{"msg":"I opened another one to address concerns from Sergei","username":"MALodder","ts":"2018-12-18T17:10:27.277Z"}
{"msg":"PR #6","username":"MALodder","ts":"2018-12-18T17:10:32.428Z"}
{"msg":"trying to resolve a DCO issue from z-mix","username":"MALodder","ts":"2018-12-18T17:10:47.413Z"}
{"msg":"okay its fixed now","username":"MALodder","ts":"2018-12-18T17:14:23.353Z"}
{"msg":"https://github.com/hyperledger/ursa/pull/6","username":"MALodder","ts":"2018-12-18T17:14:34.621Z"}
{"msg":"Cool thanks","username":"Dan","ts":"2018-12-18T17:20:54.253Z"}
{"msg":"Basically PR #3 had some concerns with having the amcl folder dup multiple times, so I cleaned that up and hopefully everyone is happy. PR #6 has crypto-lib and z-mix in it","username":"MALodder","ts":"2018-12-18T17:30:06.389Z"}
{"msg":"cool. so looks like we can now import a crate from amcl rather than copying in the code that had been generated by amcl?","username":"Dan","ts":"2018-12-18T17:43:16.729Z"}
{"msg":"yes, the indy team helped amcl to do that","username":"MALodder","ts":"2018-12-18T18:29:10.503Z"}
{"msg":"took quite an effort","username":"MALodder","ts":"2018-12-18T18:29:21.667Z"}
{"msg":"oh that's really cool!","username":"Dan","ts":"2018-12-18T19:19:40.351Z"}
{"msg":"@MALodder what platform do you build on?","username":"Dan","ts":"2018-12-18T20:23:58.761Z"}
{"msg":"Mac OS x","username":"MALodder","ts":"2018-12-18T20:25:53.002Z"}
{"msg":"I’ve built it on all platforms ","username":"MALodder","ts":"2018-12-18T20:26:12.912Z"}
{"msg":"The build and env setup are in the readme for every os","username":"MALodder","ts":"2018-12-18T20:27:27.242Z"}
{"msg":"Cool. Yeah following through those directions now. Had a little snag but I think my environment is just dirty. Cleaning up and retrying .. as .. network ... trickles.... a....long.","username":"Dan","ts":"2018-12-18T20:29:52.975Z"}
{"msg":"Still hanging up. Any ideas @MALodder ?  https://pastebin.com/sPf3p4LF","username":"Dan","ts":"2018-12-18T20:40:09.864Z"}
{"msg":"@Dan got a current rust?","username":"jsmitchell","ts":"2018-12-18T20:48:59.690Z"}
{"msg":"I did a `rustup update` after it failed the first time followed by a `cargo clean`. \nCurrently at ```$ rustc --version\nrustc 1.31.0 (abe02cefd 2018-12-04)```","username":"Dan","ts":"2018-12-18T20:50:20.725Z"}
{"msg":"has ursa moved to rust 2018?","username":"jsmitchell","ts":"2018-12-18T20:53:53.811Z"}
{"msg":"they changed the default allocator recently","username":"jsmitchell","ts":"2018-12-18T20:55:02.996Z"}
{"msg":"and it looks like those symbols might be related to that","username":"jsmitchell","ts":"2018-12-18T20:55:10.856Z"}
{"msg":"have you tried building it on nightly to see if the behavior is different?","username":"jsmitchell","ts":"2018-12-18T20:59:20.567Z"}
{"msg":"I haven't. But before I dig around too much.. @MALodder what version are you at?","username":"Dan","ts":"2018-12-18T21:00:42.323Z"}
{"msg":"`rustup install nightly; cargo +nightly build`","username":"jsmitchell","ts":"2018-12-18T21:04:02.321Z"}
{"msg":"that lets you test that without changing any of your environment defaults","username":"jsmitchell","ts":"2018-12-18T21:04:15.828Z"}
{"msg":"yes I have seen that error on Mac OS X","username":"MALodder","ts":"2018-12-18T21:12:23.827Z"}
{"msg":"its caused from the FFI stuff","username":"MALodder","ts":"2018-12-18T21:12:32.318Z"}
{"msg":"@Dan try running\n`cargo test --no-default-features --features=bn_openssl,pair_amcl,serialization,native,cl`","username":"MALodder","ts":"2018-12-18T21:13:14.823Z"}
{"msg":"I'm using rust 2018","username":"MALodder","ts":"2018-12-18T21:20:02.400Z"}
{"msg":"That worked @MALodder :thumbsup: ","username":"Dan","ts":"2018-12-18T21:21:05.954Z"}
{"msg":"great to hear","username":"MALodder","ts":"2018-12-18T21:21:32.625Z"}
{"msg":"that command is only dropping the ffi stuff","username":"MALodder","ts":"2018-12-18T21:21:39.436Z"}
{"msg":"when I run `cargo build` on windows or linux it just works","username":"MALodder","ts":"2018-12-18T21:21:51.738Z"}
{"msg":"Mac OS X must have some wierd thing with the new allocator in C","username":"MALodder","ts":"2018-12-18T21:22:09.313Z"}
{"msg":"Nice work on the PR. that must have been a ton of work to get all that stuff rebased and mixed in with some new changes. I left a couple minor questions on the PR.","username":"Dan","ts":"2018-12-18T21:22:36.813Z"}
{"msg":"Going to pop offline for a bit.","username":"Dan","ts":"2018-12-18T21:22:52.766Z"}
{"msg":"okay I'll go look","username":"MALodder","ts":"2018-12-18T21:23:13.372Z"}
{"msg":"@Dan answered your questions","username":"MALodder","ts":"2018-12-18T21:29:43.024Z"}
{"msg":"@here :  We discussed having a meeting tomorrow at our last meeting, but I am going ahead and cancelling it (see the email).  Have a great holiday season!","username":"hartm","ts":"2018-12-19T03:08:44.793Z"}
{"msg":"Please review PRs instead","username":"MALodder","ts":"2018-12-19T04:20:31.301Z"}
{"msg":"Btw, it's not too late for people to send me gifts. ;) \nAnyone have an abstract algebra text that they really like? I've got one by John Fraleigh that's good but I'd like a complementary text. ","username":"Dan","ts":"2018-12-19T20:03:03.031Z"}
{"msg":"I believe the Artin textbook is the classic, and best choice for learning traditionally.","username":"hartm","ts":"2018-12-20T01:01:14.414Z"}
{"msg":"@Dan Here's a gift idea for you:  https://www.hammacher.com/product/backyard-dunk-tank?cm_cat=ProductSEM&cm_pla=AdWordsPLA&source=PRODSEM&gclid=CjwKCAiA9efgBRAYEiwAUT-jtIwsRTAVfTbALfpg1xtq2TSRRRpR2heF-ekU-BhxFetYPoGlY71f7xoCi5oQAvD_BwE","username":"hartm","ts":"2018-12-20T01:02:26.398Z"}
{"msg":"Has joined the channel.","username":"guoger","ts":"2018-12-20T04:14:33.845Z","type":"uj"}
{"msg":"is that the Euler Totient Tank 500?","username":"Dan","ts":"2018-12-20T15:34:21.362Z"}
{"msg":"Has joined the channel.","username":"mervecankus","ts":"2018-12-22T10:04:14.481Z","type":"uj"}
{"msg":"Hi! Are there any plans to implement homomorphic encyption in Ursa?","username":"mervecankus","ts":"2018-12-22T10:11:08.812Z"}
{"msg":"Has joined the channel.","username":"infominer33","ts":"2018-12-23T22:12:45.208Z","type":"uj"}
{"msg":"Has joined the channel.","username":"guillermo.correa","ts":"2018-12-28T14:11:20.397Z","type":"uj"}
{"msg":"What's the use case?","username":"JonGeater","ts":"2018-12-31T12:43:13.994Z"}
{"msg":"Sorry, being a little less obtuse, what feature of what relevant dependent product needs that, and in what timeframe?  ","username":"JonGeater","ts":"2018-12-31T12:47:23.509Z"}
{"msg":"Has joined the channel.","username":"nathanaw","ts":"2019-01-01T12:05:08.353Z","type":"uj"}
{"msg":"hello all, like to enquire when will be the monthly ursa call? - Nathan Aw from Singapore ","username":"nathanaw","ts":"2019-01-01T12:06:23.917Z"}
{"msg":"@mervecankus I don't think anyone is planning on implementing HE in Ursa in the near future, although I don't know for sure.  At least for most of us (or, for the people that I know about), functional encryption is tied much more closely to our crypto-related use cases than HE.  It's also much more challenging to build for general functionalities than HE.  As @JonGeater asks, what use case do you have in mind for HE?  We are curious here.  ","username":"hartm","ts":"2019-01-02T06:58:26.973Z"}
{"msg":"@nathanaw It's biweekly.  The next call is a week from now on the 9th.","username":"hartm","ts":"2019-01-02T06:58:42.925Z"}
{"msg":"Has joined the channel.","username":"dexhunter","ts":"2019-01-03T09:53:59.883Z","type":"uj"}
{"msg":"I'd love to see some libraries that utilize the Intel SGX secure enclave.","username":"adamgering","ts":"2019-01-03T23:28:39.943Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=4ttyAam2M9Mbhxfab) @adamgering Wouldn't we all :-)  There are multiple angles to this though: architecturally do we want to have a top level interface that knows the difference between enclave and non-enclave implementaions?  Or have a build option that creates different flavoured builds of the same interface? Or simply have people who care deploy the library into an enclave themselves?\n\nAnd then there's the management angle: if the enclave functionality is somehow pre-created by Ursa, who signs it?\n\nAnd also what about other types of enclave?  I could put code in a Secure Element, for example, talkig over GP protocols or SCP11 or something.  Or in ARM TrustZone or RISC-V containers.  At what layer of a shared crypto library do we expose conscious knowledge of these differences?\n\nThis could the subject of quite deep discussion, which has started already - Hart and others can probably point to meeting archives where it's been discussed already so we can all get up to speed with the group's thinking on the matter.","username":"JonGeater","ts":"2019-01-04T14:55:30.636Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=4ttyAam2M9Mbhxfab","url":"https://chat.hyperledger.org/channel/ursa?msg=4ttyAam2M9Mbhxfab","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I also want to mod Sawtooth to be able to use general HSMs and ARM TrustZone in additional to SGX for PoET, but that's a different matter","username":"JonGeater","ts":"2019-01-04T14:56:19.557Z"}
{"msg":"@JonGeater Amen, let me add to that. I think the key management side of it could be done with Ursa to start, where you would pass a key id or key reference for basic crypto operations like signing and key wrapping. The complicated stuff you mention I believe would require many discussions and probably be more advanced features of ursa eventually. ","username":"MALodder","ts":"2019-01-04T20:07:01.610Z"}
{"msg":"I don't think enclaves are as simple as people think, when they say can it use the enclave, what does that mean? Does it mean the entire crypto operation for calculating a zero knowledge proof in order to keep the data protected, or does it mean simpler stuff like key management ","username":"MALodder","ts":"2019-01-04T20:08:35.131Z"}
{"msg":"Has joined the channel.","username":"frankz","ts":"2019-01-06T07:33:49.288Z","type":"uj"}
{"msg":"Has joined the channel.","username":"gokulalex","ts":"2019-01-06T13:52:41.387Z","type":"uj"}
{"msg":"@here I think a lot of people on this list are attending real world crypto this week.  If you are, please feel free to mention it, and let's meet up!  Thanks!","username":"hartm","ts":"2019-01-07T19:54:41.022Z"}
{"msg":"_is sadly not attending RWC_","username":"JonGeater","ts":"2019-01-07T20:54:17.223Z"}
{"msg":"@hartm I gather you are busy at the conference, but if you get some time could you please re-review https://github.com/hyperledger/ursa-rfcs/pull/2. I think I've satisfied your feedback.","username":"Dan","ts":"2019-01-07T21:24:57.501Z"}
{"msg":"@Dan  Going to be a bit slow since I am more or less one handed, but I should have some time tomorrow.  Thanks!","username":"hartm","ts":"2019-01-07T22:18:29.152Z"}
{"msg":"That sounds like a very handy conference. ","username":"Dan","ts":"2019-01-08T21:27:49.119Z"}
{"msg":"@here Just a reminder of our biweekly meeting tomorrow.  Hope to see many of you tomorrow!  Thanks!","username":"hartm","ts":"2019-01-09T05:29:22.699Z"}
{"msg":"is the zoom room still https://zoom.us/my/hyperledger.community?","username":"MALodder","ts":"2019-01-09T14:58:50.623Z"}
{"msg":"@hartm ","username":"MALodder","ts":"2019-01-09T14:59:05.868Z"}
{"msg":"^^^","username":"MALodder","ts":"2019-01-09T14:59:08.711Z"}
{"msg":"There is another call going on right now in that zoom meeting","username":"MALodder","ts":"2019-01-09T15:00:21.228Z"}
{"msg":"Fabric maintainer meeting before us.","username":"hartm","ts":"2019-01-09T15:00:48.067Z"}
{"msg":"I can create a zoom room but others probably won't get the notice","username":"MALodder","ts":"2019-01-09T15:00:52.772Z"}
{"msg":"can we take over the current call and say something","username":"MALodder","ts":"2019-01-09T15:01:17.991Z"}
{"msg":"i guess they're pretty much done now","username":"manu","ts":"2019-01-09T15:02:08.797Z"}
{"msg":"@manu you can just stay on","username":"MALodder","ts":"2019-01-09T15:03:05.463Z"}
{"msg":"https://docs.google.com/document/d/1Z_8o8k_PFRM4XfZyv9jH1_-IyN0CsCMI2JlrGsCX378/edit?usp=sharing","username":"hartm","ts":"2019-01-09T15:05:02.296Z"}
{"msg":"Bulletproofs for a pairing friendly curve using milagro crypto, https://github.com/lovesh/bulletproofs-amcl","username":"lovesh","ts":"2019-01-09T15:07:30.220Z"}
{"msg":"Currently works on BLS12-381 and BN-254","username":"lovesh","ts":"2019-01-09T15:08:37.300Z"}
{"msg":"https://wiki2.hyperledger.org/display/ursa/","username":"dhuseby","ts":"2019-01-09T15:47:43.282Z"}
{"msg":"That’s the ursa homepage on confluence. ","username":"dhuseby","ts":"2019-01-09T15:48:05.571Z"}
{"msg":"@lovesh really cool","username":"MALodder","ts":"2019-01-09T15:51:31.775Z"}
{"msg":"Has joined the channel.","username":"cam-parra","ts":"2019-01-09T16:16:38.904Z","type":"uj"}
{"msg":"Has joined the channel.","username":"huxiangdong","ts":"2019-01-10T02:13:52.837Z","type":"uj"}
{"msg":"Has joined the channel.","username":"DmitriPlakhov","ts":"2019-01-10T12:07:26.577Z","type":"uj"}
{"msg":"@MALodder I am writing the build configuration RFC and the build configuration tool RFC and discovered something that might be a PITA about cargo.","username":"dhuseby","ts":"2019-01-10T18:47:14.344Z"}
{"msg":"you can't have build scripts in a workspace root and have it get executed separate from the workspace members","username":"dhuseby","ts":"2019-01-10T18:47:36.622Z"}
{"msg":"that means, if you want to do conditional compilation of a workspace (e.g. specify which packages do and do not get build) we have to make our own custom cargo sub-command","username":"dhuseby","ts":"2019-01-10T18:48:26.099Z"}
{"msg":"I was already planning on creating cargo-cfg custom subcommand to execute a tool similar to the make menuconfig in the linux kernel. the proposal is to have a tool that gives a nice interface to selecting the components and features included in a build of Ursa. The output from cargo-cfg is a build configuration file that I was going to use as the inputs for a top-level workspace build script","username":"dhuseby","ts":"2019-01-10T18:49:58.230Z"}
{"msg":"but a top-level workspace build script isn't a thing","username":"dhuseby","ts":"2019-01-10T18:50:17.712Z"}
{"msg":"so I'm now considering also creating cargo-bygge (Norwegian for build) or cargo-schnell or something named like that, that will take a build configuration file and execute cargo in the workspace root with the correct command line arguments (e.g. cargo build -p z-mix --features=....)","username":"dhuseby","ts":"2019-01-10T18:51:53.990Z"}
{"msg":"what do you think?","username":"dhuseby","ts":"2019-01-10T18:52:14.135Z"}
{"msg":"I've written quite a lot in the build RFC and will shelve it until I get feedback...sending this also to the list.","username":"dhuseby","ts":"2019-01-10T18:53:05.943Z"}
{"msg":"Has joined the channel.","username":"st","ts":"2019-01-10T20:50:35.194Z","type":"uj"}
{"msg":"I like `cargo-schnell` (mostly because I'm too white to pronounce `bygge`)","username":"MALodder","ts":"2019-01-11T00:10:51.709Z"}
{"msg":"agree with this as long as builds are reproducible without creating or moving files around","username":"MALodder","ts":"2019-01-11T00:11:46.029Z"}
{"msg":"@Dan this is an interesting paper, https://eprint.iacr.org/2019/023.pdf","username":"MALodder","ts":"2019-01-11T00:12:10.083Z"}
{"msg":"since Sawtooth uses secp256k1, you might consider double checking that this doesn't affect you","username":"MALodder","ts":"2019-01-11T00:12:44.275Z"}
{"msg":"I think you should be okay since you are using the bitcoin library so the nonces should be generated properly","username":"MALodder","ts":"2019-01-11T00:13:20.057Z"}
{"msg":"but @Dan this might be a problem https://www.usenix.org/system/files/conference/usenixsecurity18/sec18-van_bulck.pdf","username":"MALodder","ts":"2019-01-11T00:29:01.079Z"}
{"msg":"https://foreshadowattack.eu","username":"MALodder","ts":"2019-01-11T01:02:00.742Z"}
{"msg":"Don’t trust sgx now","username":"MALodder","ts":"2019-01-11T01:02:20.885Z"}
{"msg":"Has joined the channel.","username":"mboyd","ts":"2019-01-11T01:20:33.118Z","type":"uj"}
{"msg":"Has joined the channel.","username":"vikpande","ts":"2019-01-11T06:43:22.105Z","type":"uj"}
{"msg":"lol. foreshadow is old news ;)\nIn general though defense in depth is always good. Mic has some good sgx patterns. For example, in poet, we use a z-test to make sure that if an enclave is broken it can't run amok.. if it wins statistically improbably often then the other nodes distrust it.\nFor key management the risk model is easier.","username":"Dan","ts":"2019-01-11T14:00:17.907Z"}
{"msg":"Yeah, Mike, you're a couple of papers behind ;)","username":"hartm","ts":"2019-01-11T22:07:09.472Z"}
{"msg":"Lots of people here at RWC are wondering about SGX stuff, though.","username":"hartm","ts":"2019-01-11T22:09:16.788Z"}
{"msg":"EVeryone knew SGX v1 was broken before it was released.  V2 became very questionable after release.  V3's the charm :-)","username":"JonGeater","ts":"2019-01-12T21:32:09.661Z"}
{"msg":"Seriously, *no* enclave technology will be fully foolproof.  As long as there are APIs there will be attacks.  If there's a common bus then you get what you pay for, ","username":"JonGeater","ts":"2019-01-12T21:33:02.842Z"}
{"msg":"The advance that we need now is in system thinking understand what the enclave *can* do for you, and designing around those promises.  Many great heroes died searching for the grail.  It ain't there.  ","username":"JonGeater","ts":"2019-01-12T21:34:09.241Z"}
{"msg":"Has joined the channel.","username":"jleders","ts":"2019-01-13T01:17:35.975Z","type":"uj"}
{"msg":"I'm going to use that quote in one of my presentations","username":"MALodder","ts":"2019-01-14T16:03:29.452Z"}
{"msg":"Has joined the channel.","username":"JonasM","ts":"2019-01-14T16:03:58.690Z","type":"uj"}
{"msg":"Has joined the channel.","username":"DirkKrueger","ts":"2019-01-14T16:53:12.381Z","type":"uj"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=ccneTqoBdumnhQKtG) @JonGeater :thumbsup: totally second that statement. like they say \"one weak link can break the chain\"","username":"vikpande","ts":"2019-01-14T17:44:22.150Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=ccneTqoBdumnhQKtG","url":"https://chat.hyperledger.org/channel/ursa?msg=ccneTqoBdumnhQKtG","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I'll go even further:  *nothing in security* will be fully foolproof...","username":"hartm","ts":"2019-01-14T18:31:05.924Z"}
{"msg":"New [PR](https://github.com/hyperledger/ursa/pull/8)","username":"MALodder","ts":"2019-01-14T21:15:26.111Z"}
{"msg":"Would love to have at least one cryptographer like @manu or @hartm look at it to verify modular inverse and pow are correct","username":"MALodder","ts":"2019-01-14T21:16:17.453Z"}
{"msg":"Would love to have at least one rust programmer review it too: @lovesh, @Dan, @dhuseby, or @amundson ","username":"MALodder","ts":"2019-01-14T21:17:36.343Z"}
{"msg":"Has joined the channel.","username":"tylerwince","ts":"2019-01-16T15:07:47.278Z","type":"uj"}
{"msg":"Has joined the channel.","username":"NoLimitHoldem","ts":"2019-01-17T07:44:15.628Z","type":"uj"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=ugquuF8abk7rvLr2K) @MALodder Added comments","username":"lovesh","ts":"2019-01-18T12:50:15.158Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=ugquuF8abk7rvLr2K","url":"https://chat.hyperledger.org/channel/ursa?msg=ugquuF8abk7rvLr2K","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Silly @MALodder I am a rust programmer as well ;P","username":"cam-parra","ts":"2019-01-18T14:29:08.171Z"}
{"msg":"@cam-parra feel free to review","username":"MALodder","ts":"2019-01-18T14:54:30.426Z"}
{"msg":"@MALodder and everyone else. I am think that we can break up the main README.md. It seems like we can have different docs  for things like installation ","username":"cam-parra","ts":"2019-01-18T15:02:45.204Z"}
{"msg":"@cam-parra feel free to do that and contribute :wink: ","username":"MALodder","ts":"2019-01-18T15:12:14.467Z"}
{"msg":"Has joined the channel.","username":"Hengming","ts":"2019-01-18T15:17:43.058Z","type":"uj"}
{"msg":"```** Process for ursa-rfcs\n\n   1. Declare in ursa-rfcs the exact dependencies that your change will bring\n      in\n\n      a) give a brief explanation on why you need the dependency\n      b) include link to the dependencies\n      c) how you will handle upgrades \n      d) dependency must come from crates\n      e) if using external library include steps on how to use it \n      d) no nightly dependencies can be brought include\n\n   2. Dependency must have an Apache 2.0 license  or MIT 3.\n\n** Process for PR in ursa \n\n   1. highest level of review \n      a. any change to the rust code\n      b. any change to dependency\n      c. \n\n   2. mid tier level of review \n      a. adding new wrapper or modifying new one \n      b. ci/cd pipeline changes\n\n  \n   \n   \n\n** Process for CI\n\n   1. Dependency must come from crates.io\n      a) this means that the dependency cannot be pulling and building from\n         a github repo\n   2. No nightly dependencies will be accepted ```","username":"cam-parra","ts":"2019-01-22T16:05:34.709Z"}
{"msg":"@dhuseby :arrow_up: this are some of the security guidelines that I've come up with for URSA. Not polished but I'd like to get some eyes on it before tomorrow ","username":"cam-parra","ts":"2019-01-22T16:07:49.012Z"}
{"msg":"@MALodder @lovesh @hartm ","username":"cam-parra","ts":"2019-01-22T16:08:14.792Z"}
{"msg":"nice I'll take a look at it","username":"MALodder","ts":"2019-01-22T16:08:50.720Z"}
{"msg":"If we agree on this then it should be added to the agenda tomorrow ","username":"cam-parra","ts":"2019-01-22T16:12:54.164Z"}
{"msg":"sure let @hartm know","username":"MALodder","ts":"2019-01-22T16:13:13.851Z"}
{"msg":"@MALodder why the requirement for packages coming from crates.io?","username":"dhuseby","ts":"2019-01-23T04:12:09.455Z"}
{"msg":"otherwise, this looks good.","username":"dhuseby","ts":"2019-01-23T04:12:14.123Z"}
{"msg":"@here Reminder of tomorrow's meeting, at the usual time.  Hope to talk to many of you tomorrow!","username":"hartm","ts":"2019-01-23T04:30:42.417Z"}
{"msg":"@dhuseby It's because the crates that go into crates.io have been looked at by people like RustSec and are accepted by the community. ","username":"cam-parra","ts":"2019-01-23T07:16:15.388Z"}
{"msg":"@cam-parra there are some exceptions to this rule, if you look in ursa I had to make a package that is local to ursa that wraps a crate","username":"MALodder","ts":"2019-01-23T14:58:05.564Z"}
{"msg":"The statement about requiring crates should be the norm but not required. If a dependency is not at crates.io there should be a justification for it ","username":"MALodder","ts":"2019-01-23T14:59:38.050Z"}
{"msg":"Meeting notes:","username":"hartm","ts":"2019-01-23T15:06:42.412Z"}
{"msg":"https://docs.google.com/document/d/1Z_8o8k_PFRM4XfZyv9jH1_-IyN0CsCMI2JlrGsCX378/edit?usp=sharing","username":"hartm","ts":"2019-01-23T15:06:45.259Z"}
{"msg":"@hartm @MALodder @dhuseby  What is the process to become a mid tier (crypto engineer) maintainer on URSA? I know we have many cryptographers to check major contributions but not enough crypto engineers to do the smaller tasks. I'd love to volunteer for this :) ","username":"cam-parra","ts":"2019-01-23T16:08:43.827Z"}
{"msg":"I am the maintainer of the sovrin token projects... so I have some experience :smirk: ","username":"cam-parra","ts":"2019-01-23T16:10:06.369Z"}
{"msg":"@cam-parra It's just an (informal) vote by the other maintainers.","username":"hartm","ts":"2019-01-23T17:02:10.982Z"}
{"msg":"I think we also need more cryptographers too...","username":"hartm","ts":"2019-01-23T17:02:27.397Z"}
{"msg":"Test","username":"david.b.crypto","ts":"2019-01-23T17:07:36.185Z"}
{"msg":"Hi Cam, we had mentioned an Indy crypto group in the call  ","username":"david.b.crypto","ts":"2019-01-23T17:12:15.717Z"}
{"msg":"Is there a separate rocket chat channel for that ","username":"david.b.crypto","ts":"2019-01-23T17:12:40.806Z"}
{"msg":"?","username":"david.b.crypto","ts":"2019-01-23T17:12:43.516Z"}
{"msg":"@hartm How do we start this informal vote? :) ","username":"cam-parra","ts":"2019-01-23T17:28:27.797Z"}
{"msg":"@david.b.crypto there shouldn't be another channel for indy-crypto. Indy-crypto is now considered legacy. @MALodder correct me if I am wrong but you'd like all the sovrin crypto conversations to stay here correct?","username":"cam-parra","ts":"2019-01-23T17:30:05.953Z"}
{"msg":"for now yes","username":"MALodder","ts":"2019-01-23T17:30:31.299Z"}
{"msg":"On Sovrin rocketchat we have a #crypto channel that would work as well","username":"MALodder","ts":"2019-01-23T17:31:43.736Z"}
{"msg":"@cam-parra Ask at the next meeting?  We haven't done it yet.","username":"hartm","ts":"2019-01-23T17:31:45.152Z"}
{"msg":"Or send out an email, perhaps.","username":"hartm","ts":"2019-01-23T17:32:01.597Z"}
{"msg":"@david.b.crypto I think we're all pretty active on both :) so just shout out in either  rocket chats and someone will come to help out ","username":"cam-parra","ts":"2019-01-23T17:37:46.036Z"}
{"msg":"@hartm I am going to become  \"that guy\" sending daily emails :laughing: ","username":"cam-parra","ts":"2019-01-23T17:38:34.209Z"}
{"msg":"@MALodder @hartm I started new threads with Silona and the TSC and Ursa mailing lists. I request your assistance in raising the profile of what you need.","username":"rjones","ts":"2019-01-23T19:44:38.234Z"}
{"msg":"will do","username":"MALodder","ts":"2019-01-23T19:45:25.655Z"}
{"msg":"@Hezaveh what version of rust are you using","username":"MALodder","ts":"2019-01-23T19:45:25.655Z"}
{"msg":"https://lists.hyperledger.org/g/tsc/message/1967","username":"rjones","ts":"2019-01-23T19:48:31.074Z"}
{"msg":"thank you @MALodder ","username":"rjones","ts":"2019-01-23T19:48:35.643Z"}
{"msg":"Has joined the channel.","username":"Hezaveh","ts":"2019-01-23T20:40:36.577Z","type":"uj"}
{"msg":"Hi. I was able to run cargo build --release for libzmixt but when I run it in libursa, I get errors:","username":"Hezaveh","ts":"2019-01-23T20:42:26.592Z"}
{"msg":"error[E0658]: scoped lint `clippy::too_many_arguments` is experimental (see issue #44690)\n   --> libursa/src/cl/issuer.rs:217:13                                          \n    |                                                                           \n217 |     #[allow(clippy::too_many_arguments)]                                  \n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^             ","username":"Hezaveh","ts":"2019-01-23T20:42:58.122Z"}
{"msg":"it is about 11 of them.","username":"Hezaveh","ts":"2019-01-23T20:43:27.034Z"}
{"msg":"error: aborting due to 11 previous errors                                       \n                                                                                \nFor more information about this error, try `rustc --explain E0658`.             \nerror: Could not compile `ursa`.                                                \n\n","username":"Hezaveh","ts":"2019-01-23T20:43:41.226Z"}
{"msg":"any help to solve it?","username":"Hezaveh","ts":"2019-01-23T20:44:00.905Z"}
{"msg":"@cam-parra this is  do-ocracy. to become a maintainer, I suggest you pick a part of Ursa that interests you and volunteer to take responsibility for it.  Ursa by its very nature is modular.  If there isn't an obvious module you want to own, we can come up with maintenance tasks that you can work on. Submitting and landing PR's is how you get maintainer status.","username":"dhuseby","ts":"2019-01-23T21:29:31.858Z"}
{"msg":"@rjones Thanks!  Will do.","username":"hartm","ts":"2019-01-24T00:01:26.311Z"}
{"msg":"@Hezaveh  what version of rust are you running `rustup show`","username":"MALodder","ts":"2019-01-24T03:48:54.488Z"}
{"msg":"@hartm @MALodder have you put any more thought into what a \"pluggable\"? hashing API should look like? we are doing some work were we could adopt and/or work on it if we had an idea of what the design should look like.","username":"amundson","ts":"2019-01-24T07:00:06.819Z"}
{"msg":"(as in, allowing the hashing algorithm to be swapped easily, etc.)","username":"amundson","ts":"2019-01-24T07:01:09.007Z"}
{"msg":"@amundson I believe that @dhuseby has been preparing an RFC for this.","username":"hartm","ts":"2019-01-24T07:13:12.386Z"}
{"msg":"There is some pretty interesting stuff we can do around this.  Check this paper out:  https://eprint.iacr.org/2018/770","username":"hartm","ts":"2019-01-24T07:14:08.141Z"}
{"msg":"@dhuseby I can take responsibility for URSA wrappers and security and culture of the repo. Basically the smaller tasks that don't require a Cryptographer ","username":"cam-parra","ts":"2019-01-24T12:40:31.072Z"}
{"msg":"@MALodder rustc 1.32.0 (9fda7c223 2019-01-16)","username":"Hezaveh","ts":"2019-01-24T12:53:18.690Z"}
{"msg":"@Hezaveh interesting, I'm running rust 1.31 and I don't see that error. Let me upgrade to that and see if I reproduce it","username":"MALodder","ts":"2019-01-24T15:01:59.102Z"}
{"msg":"@amundson yes some work has been done already in ursa but I'm not entirely sold on it and would love to work with you to improve it","username":"MALodder","ts":"2019-01-24T15:04:16.388Z"}
{"msg":"@Hezaveh try running this command and recompiling\n`rustup component add clippy`","username":"MALodder","ts":"2019-01-24T15:05:30.357Z"}
{"msg":"@MALodder @dhuseby ok, I'm looking at this - https://github.com/hyperledger/ursa/blob/master/libursa/src/hash/mod.rs - if there are some thoughts on making this better, even if its rough ideas, maybe I can work that in.","username":"amundson","ts":"2019-01-24T16:25:11.542Z"}
{"msg":"any thoughts on starting to publish ursa as a crate? If I start to pull it in, I'd like to be able to pin the version as presumably these APIs aren't stable yet.","username":"amundson","ts":"2019-01-24T16:26:32.791Z"}
{"msg":"@amundson yeah We definitely want to publish as a crate. The question becomes who does this","username":"MALodder","ts":"2019-01-24T16:46:15.088Z"}
{"msg":"I could probably find someone to help from my team, that does it for sawtooth, if that's what you mean.","username":"amundson","ts":"2019-01-24T16:51:36.109Z"}
{"msg":"what we did for sawtooth is set it up so multiple people have access to the create so it's not just one person, but in practice it is usually one or two people doing the process","username":"amundson","ts":"2019-01-24T16:52:49.711Z"}
{"msg":"what we did for sawtooth is set it up so multiple people have access to the crate so it's not just one person, but in practice it is usually one or two people doing the process","username":"amundson","ts":"2019-01-24T16:52:49.711Z"}
{"msg":"Sure totally agree","username":"MALodder","ts":"2019-01-24T16:53:00.901Z"}
{"msg":"as long as multiple people can do it","username":"MALodder","ts":"2019-01-24T16:53:21.755Z"}
{"msg":"@MALodder  I did rustup component add clippy, same errors ... ","username":"Hezaveh","ts":"2019-01-24T21:50:47.909Z"}
{"msg":"@Hezaveh what OS are you running?","username":"MALodder","ts":"2019-01-24T22:32:51.193Z"}
{"msg":"@cam-parra that's awesome, thanks for volunteering","username":"dhuseby","ts":"2019-01-25T01:11:52.356Z"}
{"msg":"we could certainly use your help","username":"dhuseby","ts":"2019-01-25T01:11:58.799Z"}
{"msg":"Hey everybody, we have our JIRA project set up now: https://jira.hyperledger.org/projects/URSA/","username":"dhuseby","ts":"2019-01-25T01:12:27.395Z"}
{"msg":"to answer your question: we're not using Github issues because they don't support confidential security bugs which are required for our responsible disclosure policy","username":"dhuseby","ts":"2019-01-25T01:13:06.417Z"}
{"msg":"I will be setting up a bot that will auto-close any github issues filed and tell the submitter to go to our JIRA to file bugs.","username":"dhuseby","ts":"2019-01-25T01:13:27.306Z"}
{"msg":"the bot was written by a volunteer on the Iroha team","username":"dhuseby","ts":"2019-01-25T01:13:37.769Z"}
{"msg":"From past experience working on INDY I would suggest that all who do submit bugs  try to submit steps to reproduce and logs. The more details we get from the reporter the easier it makes it for the volunteers to fix. Also if you have the experience and the time it's best to report assign to yourself and fix the bug :) ","username":"cam-parra","ts":"2019-01-25T09:41:35.967Z"}
{"msg":"Also @dhuseby 's security bug process... https://wiki2.hyperledger.org/display/HYP/Security+Bug+Process ","username":"Silona","ts":"2019-01-25T18:15:33.138Z"}
{"msg":"@dhuseby why don't you just turn off github issues?","username":"amundson","ts":"2019-01-25T19:19:53.290Z"}
{"msg":"Has joined the channel.","username":"sg777","ts":"2019-01-26T04:44:59.156Z","type":"uj"}
{"msg":"https://medium.com/@vipinsun/real-world-crypto-2019-b011922858d1 Real world crypto 2019, a summary report by yours truly","username":"VipinB","ts":"2019-01-27T00:08:18.851Z"}
{"msg":"@MALodder ubuntu 16.04","username":"Hezaveh","ts":"2019-01-27T20:17:20.465Z"}
{"msg":"Thanks @VipinB ! Enjoyed the read ","username":"cam-parra","ts":"2019-01-28T11:24:02.563Z"}
{"msg":"@Hezaveh here's what you could do to see if you can compile. Delete the lines that have the text `#[allow(clippy::too_many_arguments)]`","username":"MALodder","ts":"2019-01-28T15:00:14.358Z"}
{"msg":"then try to compile and see if you still get the error","username":"MALodder","ts":"2019-01-28T15:00:29.276Z"}
{"msg":"@MALodder It worked. Thank yoy. I basically commented these lines:  #[allow(clippy::many_single_char_names)] \n#[allow(clippy::too_many_arguments)] \n#[allow(clippy::not_unsafe_ptr_arg_deref)]  ","username":"Hezaveh","ts":"2019-01-28T15:18:37.851Z"}
{"msg":"@Hezaveh glad to hear that, but still confused as to why that doesn't work for you","username":"MALodder","ts":"2019-01-28T15:19:07.436Z"}
{"msg":"why does clippy intefere with your build","username":"MALodder","ts":"2019-01-28T15:19:23.873Z"}
{"msg":"I'll have to investigate that one","username":"MALodder","ts":"2019-01-28T15:19:30.975Z"}
{"msg":"@MALodder Thanks again. ","username":"Hezaveh","ts":"2019-01-28T15:20:26.511Z"}
{"msg":"@Hezaveh no problem","username":"MALodder","ts":"2019-01-28T15:20:39.974Z"}
{"msg":"@amundson Whats the best way to setup the rust crate for ursa so multiple people can publish?","username":"MALodder","ts":"2019-01-28T16:27:51.199Z"}
{"msg":"@amundson we have a bot we are deploying that auto-closes github issues and directs reporters to the HL JIRA.","username":"dhuseby","ts":"2019-01-28T16:50:53.173Z"}
{"msg":"that's for existing projects that have github issues that are informative and shouldn't be lost forever.","username":"dhuseby","ts":"2019-01-28T16:51:15.814Z"}
{"msg":"if we turn off GH issues, old issues disappear","username":"dhuseby","ts":"2019-01-28T16:51:23.936Z"}
{"msg":"for new projects like Ursa we can disable them","username":"dhuseby","ts":"2019-01-28T16:51:30.507Z"}
{"msg":"but then we need to document in the README.md that issues should be filed in the JIRA","username":"dhuseby","ts":"2019-01-28T16:51:48.421Z"}
{"msg":"personally, I like the idea of not disabling GH issues and using the bot, even on new projects like URsa","username":"dhuseby","ts":"2019-01-28T16:52:06.506Z"}
{"msg":"that way we're actively targeting bug reporters with the message: hey, please file bugs in JIRA","username":"dhuseby","ts":"2019-01-28T16:52:26.986Z"}
{"msg":"@dhuseby has the disadvantage that you let people enter bugs in the wrong place, with kind of a slap after they do it.","username":"amundson","ts":"2019-01-28T22:42:54.021Z"}
{"msg":"Has joined the channel.","username":"rberg2","ts":"2019-01-28T22:47:14.989Z","type":"uj"}
{"msg":"@MALodder I asked @rberg2 and @rbuysse to pop in here to help, they do the publishing for Sawtooth","username":"amundson","ts":"2019-01-28T22:47:34.266Z"}
{"msg":"Has joined the channel.","username":"rbuysse","ts":"2019-01-28T22:47:34.650Z","type":"uj"}
{"msg":"Hello","username":"rberg2","ts":"2019-01-28T22:49:51.628Z"}
{"msg":"@rberg2 hello, we would like to deploy ursa as a crate but since this is a community project, we need several maintainers to be able to do so once an agreed upon release has been reached, what is the best way to do this?","username":"MALodder","ts":"2019-01-29T03:06:59.420Z"}
{"msg":"@MALodder crates.io supports that pretty nicely","username":"rbuysse","ts":"2019-01-29T15:46:34.112Z"}
{"msg":"Has joined the channel.","username":"duckthatquantum","ts":"2019-01-31T01:39:12.304Z","type":"uj"}
{"msg":"Has joined the channel.","username":"MuthuT","ts":"2019-01-31T05:39:55.575Z","type":"uj"}
{"msg":"@MALodder @dhuseby  Do we have a final decision for the URSA logo? I am working on  REAME.md's and would like to include the logo if we have one ","username":"cam-parra","ts":"2019-01-31T12:10:12.034Z"}
{"msg":"I don't know","username":"MALodder","ts":"2019-01-31T14:54:34.420Z"}
{"msg":"I don't think we do.  We need to though...","username":"hartm","ts":"2019-01-31T15:03:51.165Z"}
{"msg":"Should be a matter of just setting a deadline and sending out a final warning and then counting up the votes","username":"cam-parra","ts":"2019-01-31T15:12:13.113Z"}
{"msg":"Also @MALodder Could you merge my PR please and thank you!","username":"cam-parra","ts":"2019-01-31T15:12:36.480Z"}
{"msg":"Ursa requires two reviewers/PR. I already approved it, need to have another maintainer approve it first","username":"MALodder","ts":"2019-01-31T15:13:24.637Z"}
{"msg":"@lovesh @hartm @dhuseby @amundson usually are good at looking at PRs","username":"MALodder","ts":"2019-01-31T15:13:54.967Z"}
{"msg":"Okay no worries. I will just make the next PR from another branch. Also if we could consider adding me to the maintainers list and given write access I can help with these kinds of PRs ","username":"cam-parra","ts":"2019-01-31T15:15:11.734Z"}
{"msg":"yeah we can discuss that on the next call next week","username":"MALodder","ts":"2019-01-31T15:16:37.461Z"}
{"msg":"I’ll take a look at the PR’s today","username":"dhuseby","ts":"2019-01-31T15:45:06.316Z"}
{"msg":"As for the logo, we just need to put together the options and run a vote on the mailing list or surveymonkey. ","username":"dhuseby","ts":"2019-01-31T15:45:46.637Z"}
{"msg":"People voted on the mailing list last time as we asked on the call :) ","username":"cam-parra","ts":"2019-01-31T15:46:34.458Z"}
{"msg":"can we recap were we are at with the logo discussion here? I saw a lot of initial support for the wire bear. is there similar support for the other logos as well? Are we debating them all, or just a couple?","username":"amundson","ts":"2019-01-31T16:35:25.564Z"}
{"msg":"Has left the channel.","username":"rjones","ts":"2019-01-31T18:59:42.669Z","type":"ul"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=5wX2Qqi7fQz4y6Mb8) Has this disappeared?","username":"VipinB","ts":"2019-01-31T19:05:36.269Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=5wX2Qqi7fQz4y6Mb8","url":"https://chat.hyperledger.org/channel/ursa?msg=5wX2Qqi7fQz4y6Mb8","remote":true,"fileId":null,"fileName":null}]}
{"msg":"It does automatically redirect to wiki.","username":"VipinB","ts":"2019-01-31T19:18:56.266Z"}
{"msg":"Ursa logo survey is now open: https://www.surveymonkey.com/r/XN7VG2T","username":"dhuseby","ts":"2019-01-31T22:21:25.641Z"}
{"msg":"please take a moment to give us your top 2 choices","username":"dhuseby","ts":"2019-01-31T22:21:38.753Z"}
{"msg":"@here ^^","username":"dhuseby","ts":"2019-01-31T22:21:42.969Z"}
{"msg":"Done!","username":"VipinB","ts":"2019-01-31T22:24:38.084Z"}
{"msg":"I responded. However, I think the variations in color cloud the issue. I'd prefer to vote on the concept, and then vote on color separately. Otherwise I think you may get color variations watering down the weight of a concept.","username":"danielhardman","ts":"2019-01-31T22:25:02.280Z"}
{"msg":"agreed","username":"MALodder","ts":"2019-01-31T22:29:30.763Z"}
{"msg":"https://lwn.net/Articles/776688/","username":"MALodder","ts":"2019-01-31T22:33:25.107Z"}
{"msg":"interesting ^^, maybe we can use it for ursa","username":"MALodder","ts":"2019-01-31T22:33:35.383Z"}
{"msg":"Gosh I hope we get at least as many voters as there are logo choices :-)","username":"JonGeater","ts":"2019-02-01T13:54:37.337Z"}
{"msg":"I've done my civic duty","username":"JonGeater","ts":"2019-02-01T13:55:52.062Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=TE7G7TkafKg2mGF7a) Great, thanks for the link- another step towards true E2EE ","username":"VipinB","ts":"2019-02-01T13:59:21.423Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=TE7G7TkafKg2mGF7a","url":"https://chat.hyperledger.org/channel/ursa?msg=TE7G7TkafKg2mGF7a","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Lets hope they actually do integrity checking unlike AMD's version","username":"MALodder","ts":"2019-02-01T15:12:36.960Z"}
{"msg":"https://github.com/lovesh/bulletproofs","username":"brentzundel","ts":"2019-02-01T17:36:02.321Z"}
{"msg":"@here so there was no standout winner from yesterday's logo survey so I put together more choices for us. Please take a few minutes and cast your vote on these: https://www.surveymonkey.com/r/KCM92WV","username":"dhuseby","ts":"2019-02-01T19:24:22.563Z"}
{"msg":"@dhuseby where are these choices from? Do we have #logofatigue??","username":"VipinB","ts":"2019-02-01T19:41:27.216Z"}
{"msg":"@VipinB the first survey resulted in a 3-way tie for first and a 4-way tie for second","username":"dhuseby","ts":"2019-02-01T20:12:34.393Z"}
{"msg":"this second batch comes from a logo marketplace","username":"dhuseby","ts":"2019-02-01T20:12:58.959Z"}
{"msg":"super cheap and we get documented transfer of copyright so we can trademark","username":"dhuseby","ts":"2019-02-01T20:13:11.822Z"}
{"msg":"I really like #12 in the second batch. It's simple and assertive. When a bear makes that posture in the wild, it means \"fuck off\"","username":"dhuseby","ts":"2019-02-01T20:13:43.636Z"}
{"msg":"Plus we can do fun things with it","username":"dhuseby","ts":"2019-02-01T20:14:38.227Z"}
{"msg":"","username":"dhuseby","ts":"2019-02-01T20:14:47.860Z","attachments":[{"type":"file","title":"IMG_4833.jpeg","title_link":"/file-upload/CsqpwXfezf6TYvLbn/IMG_4833.jpeg","image_url":"/file-upload/CsqpwXfezf6TYvLbn/IMG_4833.jpeg","image_type":"image/jpeg","image_size":26993,"url":"/file-upload/CsqpwXfezf6TYvLbn/IMG_4833.jpeg","remote":false,"fileId":"CsqpwXfezf6TYvLbn","fileName":"IMG_4833.jpeg"}]}
{"msg":"If you rotate it a little you get the expression, “did you just try to write your own crypto? Srsly?”","username":"dhuseby","ts":"2019-02-01T20:15:13.785Z"}
{"msg":"And because it’s a simple outline, we can do all kinds of fun swag. ","username":"dhuseby","ts":"2019-02-01T20:15:49.456Z"}
{"msg":"This is an example of the kind of things we can do with swag:","username":"dhuseby","ts":"2019-02-01T20:16:14.104Z"}
{"msg":"","username":"dhuseby","ts":"2019-02-01T20:16:32.544Z","attachments":[{"type":"file","title":"57068182878__29A2267C-E890-400A-9718-172B276BA211.jpeg","title_link":"/file-upload/JQqujzSmcoCRXQBaY/57068182878__29A2267C-E890-400A-9718-172B276BA211.jpeg","image_url":"/file-upload/JQqujzSmcoCRXQBaY/57068182878__29A2267C-E890-400A-9718-172B276BA211.jpeg","image_type":"image/jpeg","image_size":1022772,"url":"/file-upload/JQqujzSmcoCRXQBaY/57068182878__29A2267C-E890-400A-9718-172B276BA211.jpeg","remote":false,"fileId":"JQqujzSmcoCRXQBaY","fileName":"57068182878__29A2267C-E890-400A-9718-172B276BA211.jpeg"}]}
{"msg":"We can make custom embroidered hats or t-shirts as prizes for significant contributions. ","username":"dhuseby","ts":"2019-02-01T20:16:58.497Z"}
{"msg":"BTW, I call that hat my “hide and seek world champion” hat 😂😂😂","username":"dhuseby","ts":"2019-02-01T20:17:50.380Z"}
{"msg":"Has joined the channel.","username":"tomislav","ts":"2019-02-02T02:10:58.482Z","type":"uj"}
{"msg":"@dhuseby Do you want to come to the UK and design our new Brexit referendum question?  I'd like like a forced vote of \"not what we decided last time\" ;-)","username":"JonGeater","ts":"2019-02-04T09:41:37.971Z"}
{"msg":"Has joined the channel.","username":"jcarpenter","ts":"2019-02-04T19:35:16.623Z","type":"uj"}
{"msg":"LOL, totally","username":"dhuseby","ts":"2019-02-04T20:40:06.459Z"}
{"msg":"of course I'll just throw your tea in the harbor and burn your forts down.","username":"dhuseby","ts":"2019-02-04T20:40:21.312Z"}
{"msg":"it's my reflexive response to British bullshit","username":"dhuseby","ts":"2019-02-04T20:40:34.261Z"}
{"msg":"; )","username":"dhuseby","ts":"2019-02-04T20:40:35.826Z"}
{"msg":"@JonGeater ^^^","username":"dhuseby","ts":"2019-02-04T20:40:53.860Z"}
{"msg":"soooo, we've narrowed the logos down to 4, two from the first batch, two from the second batch. Final poll going out today with winner presentation on Wednesday meeting.","username":"dhuseby","ts":"2019-02-04T20:41:51.014Z"}
{"msg":"OK cool, I'll continue to turn out to vote then","username":"JonGeater","ts":"2019-02-04T21:02:20.926Z"}
{"msg":"Has joined the channel.","username":"ursamajor666","ts":"2019-02-05T03:35:02.562Z","type":"uj"}
{"msg":"love the hat guys its top notch it really is","username":"ursamajor666","ts":"2019-02-05T03:35:40.253Z"}
{"msg":"Greetings @dhuseby nice hat!","username":"ursamajor666","ts":"2019-02-05T03:35:40.253Z"}
{"msg":"@dhuseby I am ready for that URL ","username":"cam-parra","ts":"2019-02-05T14:34:18.840Z"}
{"msg":"If you can let me know the winner by sometime tonight (MST) I can have our readme updated with the logo for the unveiling ","username":"cam-parra","ts":"2019-02-05T14:35:07.822Z"}
{"msg":"Also any chance of us getting a URSA twitter account? It be a nice way to update all our social friends ","username":"cam-parra","ts":"2019-02-05T14:41:51.030Z"}
{"msg":"There doesn’t seem to be a consistent theme around sub-project twitter handles.  Perhaps should check with the marketing committee","username":"JonGeater","ts":"2019-02-05T15:06:26.857Z"}
{"msg":"Yeah, I think the marketing committee would not be thrilled if we started a twitter account without telling them.","username":"hartm","ts":"2019-02-05T15:20:35.079Z"}
{"msg":"We can reach out to them, but I would be surprised if they let us have a twitter that \"officially\" spoke for a project.","username":"hartm","ts":"2019-02-05T15:23:02.724Z"}
{"msg":"You can ask though, if you like.","username":"hartm","ts":"2019-02-05T15:27:27.396Z"}
{"msg":"You never know what they will say.","username":"hartm","ts":"2019-02-05T15:27:33.484Z"}
{"msg":"I see. Interesting... I don't think its a hill I want to die on ","username":"cam-parra","ts":"2019-02-05T15:27:37.317Z"}
{"msg":"Definitely not, but you can ask if you want.","username":"hartm","ts":"2019-02-05T15:27:48.776Z"}
{"msg":"@here So there was some last minute voting going on yesterday so I waited until this morning to put together the last survey. There were clear winners from both batches that I have put together into one last poll. Please vote today and come to the meeting tomorrow morning to discuss the final logo decision. Here's the final survey: https://www.surveymonkey.com/r/YWGSSTT","username":"dhuseby","ts":"2019-02-05T18:17:55.124Z"}
{"msg":"I included the other colors of the Bear+Star logo because collectively, they got the most votes for both first and second choice","username":"dhuseby","ts":"2019-02-05T18:18:14.603Z"}
{"msg":"if the BearStar logo wins, then we'll have to decide on the color.","username":"dhuseby","ts":"2019-02-05T18:18:28.132Z"}
{"msg":"@here VOTE TODAY: https://www.surveymonkey.com/r/YWGSSTT","username":"dhuseby","ts":"2019-02-05T18:24:27.842Z"}
{"msg":":thumbsup:","username":"vikpande","ts":"2019-02-05T18:26:46.951Z"}
{"msg":"Seems Apache milagro has disappeared from github https://github.com/milagro-crypto/amcl Does anyone know why?","username":"lovesh","ts":"2019-02-05T20:09:14.960Z"}
{"msg":"@lovesh https://github.com/apache/incubator-milagro-crypto","username":"cam-parra","ts":"2019-02-05T20:26:28.407Z"}
{"msg":"twitter is not our main focus when a logo hang in fate","username":"ursamajor666","ts":"2019-02-05T20:39:25.475Z"}
{"msg":"@hartm I've added some house keeping items to the agenda \n","username":"cam-parra","ts":"2019-02-05T21:15:24.189Z"}
{"msg":"@hartm I've added some house keeping items to the agenda for tomorrows call. Hope that helps a bit","username":"cam-parra","ts":"2019-02-05T21:15:24.189Z"}
{"msg":"@cam-parra Yep!  Thanks!  Please don't be shy about adding stuff.","username":"hartm","ts":"2019-02-05T22:18:32.042Z"}
{"msg":"_has disagreed and committed ;-)_","username":"JonGeater","ts":"2019-02-05T23:46:41.655Z"}
{"msg":"Has joined the channel.","username":"danintel","ts":"2019-02-06T00:42:20.752Z","type":"uj"}
{"msg":"@here Just a reminder of tomorrow's Ursa meeting.  Agenda is here:  https://wiki.hyperledger.org/pages/viewpage.action?pageId=6422924.  Please add things as you see appropriate.  Thanks!","username":"hartm","ts":"2019-02-06T00:43:11.430Z"}
{"msg":"Has joined the channel.","username":"ElSqueakador","ts":"2019-02-06T01:11:38.002Z","type":"uj"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=sdwPSQrKRNPKQKST3) @cam-parra That is not the one we used to use. Secondly its missing the new pairing implementation","username":"lovesh","ts":"2019-02-06T04:26:57.099Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=sdwPSQrKRNPKQKST3","url":"https://chat.hyperledger.org/channel/ursa?msg=sdwPSQrKRNPKQKST3","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Has joined the channel.","username":"arsulegai","ts":"2019-02-06T11:23:50.481Z","type":"uj"}
{"msg":"We still don't seem to have the call-in details on the wiki (now Confluence).  Can we do this please?  I've finially managed to clear Wednesday at 07:00 so I can start joining :-)\n","username":"JonGeater","ts":"2019-02-06T12:14:20.475Z"}
{"msg":"@JonGeater They're in the Hyperledger calendar (for this and all other hyperledger meetings).","username":"hartm","ts":"2019-02-06T14:50:03.367Z"}
{"msg":"Meeting notes:  https://docs.google.com/document/d/1Z_8o8k_PFRM4XfZyv9jH1_-IyN0CsCMI2JlrGsCX378/edit?usp=sharing","username":"hartm","ts":"2019-02-06T15:01:10.505Z"}
{"msg":"https://wiki.hyperledger.org/display/BOOTHK/Sessions","username":"dhuseby","ts":"2019-02-06T15:42:47.791Z"}
{"msg":"@mboyd and I will be there at the Bootcamp","username":"nage","ts":"2019-02-06T15:43:56.701Z"}
{"msg":"We can help with some basic Ursa stuff as we can fold it into the Indy track","username":"nage","ts":"2019-02-06T15:44:22.346Z"}
{"msg":"@VipinB I cover a lot of that in the blog post on Iroha's CVE bug: https://www.hyperledger.org/blog/2019/02/04/hyperledger-iroha-security-audit-results","username":"dhuseby","ts":"2019-02-06T15:50:39.342Z"}
{"msg":"Please add me to the Tuesday's meeting mail list","username":"arsulegai","ts":"2019-02-06T15:55:27.370Z"}
{"msg":"Has joined the channel.","username":"ArnabChatterjee","ts":"2019-02-06T18:31:26.414Z","type":"uj"}
{"msg":"Has joined the channel.","username":"deepikav","ts":"2019-02-07T19:27:34.718Z","type":"uj"}
{"msg":"The Tuesday meeting still doesn’t appear to be on the calendar on the wiki nor mailed out. Have I missed something?","username":"JonGeater","ts":"2019-02-09T17:46:58.813Z"}
{"msg":"@JonGeater No.  Maybe ask Mike?  It's technically the \"Sovrin crypto meeting\" but really only covers Hyperledger stuff at this point.","username":"hartm","ts":"2019-02-09T23:30:58.118Z"}
{"msg":"@dhuseby were you going to action this?  I'm happy to join the Tuesday call if I get the details.","username":"JonGeater","ts":"2019-02-10T17:54:15.845Z"}
{"msg":"@JonGeater I sent the information to @dhuseby but here is the information.\n\n8AM MST Tuesday. \nhttps://zoom.us/j/567114224\nAgenda: https://docs.google.com/document/d/1M3zgsRoOxlkjNPbDp4_7YWxuqO2EyefOT3Bt7ZgGIDY/edit","username":"MALodder","ts":"2019-02-11T15:39:40.921Z"}
{"msg":"@MALodder Is there anything Sovrin-specific left in this meeting?  Sure, there are applications that Sovrin wants to build, but all of this is being done in the open and many other people are interested in these applications.  Should we rebrand this as the zmix meeting?","username":"hartm","ts":"2019-02-11T19:23:20.886Z"}
{"msg":"hmmm, yes like anonymous read/write to the ledger","username":"MALodder","ts":"2019-02-11T19:23:50.940Z"}
{"msg":"Also, unfortunately, I can't make tomorrow's meeting--I have an appointment with the shoulder surgeon.  Hopefully he will let me do more stuff.","username":"hartm","ts":"2019-02-11T19:23:52.373Z"}
{"msg":"consensus stuff","username":"MALodder","ts":"2019-02-11T19:23:57.623Z"}
{"msg":"so its not all zmix","username":"MALodder","ts":"2019-02-11T19:24:10.349Z"}
{"msg":"alot of it is zmix though","username":"MALodder","ts":"2019-02-11T19:24:18.704Z"}
{"msg":"Anonymous read/write to the ledger is definitely in the crypto purview, so that would count as zmix.","username":"hartm","ts":"2019-02-11T19:24:23.497Z"}
{"msg":"As far as I know, we haven't discussed pure consensus in quite some time.","username":"hartm","ts":"2019-02-11T19:24:55.278Z"}
{"msg":"that is true","username":"MALodder","ts":"2019-02-11T19:36:19.546Z"}
{"msg":"tomorrow I want to discuss TEE and HSMs. That's an ursa item but how it applies to Sovrin","username":"MALodder","ts":"2019-02-11T19:36:41.183Z"}
{"msg":"Good luck on your appt","username":"MALodder","ts":"2019-02-11T19:43:29.982Z"}
{"msg":"Has joined the channel.","username":"rekmarks","ts":"2019-02-11T23:20:34.280Z","type":"uj"}
{"msg":"Thanks! ","username":"hartm","ts":"2019-02-12T02:14:39.175Z"}
{"msg":"Has joined the channel.","username":"ashokkj","ts":"2019-02-12T03:44:59.627Z","type":"uj"}
{"msg":"Lol, and sorry...after making a fuss I can’t make a call at 8:00 MST today...surprise shareholder visit.  Next time, for sure.  Thanks for the details","username":"JonGeater","ts":"2019-02-12T08:13:59.306Z"}
{"msg":"@dhuseby is this the paper that came up in the Sovrin crypto call today? https://raw.githubusercontent.com/ianopolous/Peergos/master/papers/wuala-cryptree.pdf","username":"nage","ts":"2019-02-12T16:52:43.639Z"}
{"msg":"@nage yes","username":"dhuseby","ts":"2019-02-12T21:30:41.158Z"}
{"msg":"Tahoe-LAFS uses a variant of Cryptree","username":"dhuseby","ts":"2019-02-12T21:30:58.408Z"}
{"msg":"there was a ton of great technology that came out of the Wuala project...to bad La Cie bought it to kill it : /","username":"dhuseby","ts":"2019-02-12T21:31:38.256Z"}
{"msg":"the other key piece of tech is their ungamable, decentralized reputation system called Havelaar: http://netecon.seas.harvard.edu/NetEcon06/Papers/gromilund_06.pdf","username":"dhuseby","ts":"2019-02-12T21:32:28.338Z"}
{"msg":"I think havelaar would be a nice addition to any consensus network for judging reliability of nodes","username":"dhuseby","ts":"2019-02-12T21:33:00.225Z"}
{"msg":"it could be used to incetivize reliability by weighting consensus votes by uptime","username":"dhuseby","ts":"2019-02-12T21:33:36.701Z"}
{"msg":"@nage BTW, I have a toy implementation of Cryptree in Python using PyNaCl primitives somewhere in my backups","username":"dhuseby","ts":"2019-02-12T21:38:23.560Z"}
{"msg":"it's just a library of classes that handle the key links and the data structure itself","username":"dhuseby","ts":"2019-02-12T21:38:50.159Z"}
{"msg":"_looks forward to talking about this some more in the Crypto calls and in Hong Kong_","username":"nage","ts":"2019-02-12T22:58:34.414Z"}
{"msg":"I like cryptree, its similar but better to ideas I had for a wallet","username":"MALodder","ts":"2019-02-13T23:22:47.568Z"}
{"msg":"So where did everyone go? I haven't seen or heard any comments or anything for PRs on RFCs or the repo","username":"MALodder","ts":"2019-02-14T16:05:21.730Z"}
{"msg":"Is there an opinion for which documentation framework we should use for Ursa?","username":"MALodder","ts":"2019-02-14T16:08:21.787Z"}
{"msg":"readthedocs, gitbook?","username":"MALodder","ts":"2019-02-14T16:09:03.524Z"}
{"msg":"readme.io, gelato.io?","username":"MALodder","ts":"2019-02-14T16:10:16.211Z"}
{"msg":"I've been looking at mdBook and quite like it","username":"MALodder","ts":"2019-02-14T16:14:27.995Z"}
{"msg":"Also would it make sense to create a separate repo for documentation called ursa-docs","username":"MALodder","ts":"2019-02-14T16:15:29.556Z"}
{"msg":"@MALodder I have been kidnapped by the Crypto deadline, which was yesterday.","username":"hartm","ts":"2019-02-14T16:31:12.428Z"}
{"msg":"I'll go over everything today or tomorrow.","username":"hartm","ts":"2019-02-14T16:31:29.006Z"}
{"msg":"Has joined the channel.","username":"mp","ts":"2019-02-15T08:31:18.728Z","type":"uj"}
{"msg":"And I just found out how to turn off spam filtering on my corporate Office365 (grrrr) so I'm receiving Hyperledger email again :-) ","username":"JonGeater","ts":"2019-02-15T13:29:35.101Z"}
{"msg":"@MALodder If you go with readthedocs you can basically copy and paste Michael B's work on Indy and get that stood up in a very short time period. ","username":"kdenhartog","ts":"2019-02-15T22:29:40.762Z"}
{"msg":"I'd prefer gitbooks not a fan of read the docs","username":"cam-parra","ts":"2019-02-16T17:59:25.671Z"}
{"msg":"Has joined the channel.","username":"nanspro","ts":"2019-02-18T02:04:18.449Z","type":"uj"}
{"msg":"@JonGeater for interfaces to HSM's and TPMs, do they mostly use PKCS11 or have they evolved to a different API description?","username":"MALodder","ts":"2019-02-18T15:46:03.958Z"}
{"msg":"Both","username":"JonGeater","ts":"2019-02-19T11:27:20.800Z"}
{"msg":"PKCS#11 is not particularly good in its own right but it does allow interop for relatively trivial use cases so everybody supports it as a pluggable interface for application interop, but everybody also promotes their own interfaces for more nuanced operations, especially where complex administrative oiperations or shared key management comes into the frame","username":"JonGeater","ts":"2019-02-19T11:28:46.188Z"}
{"msg":"TPM is so very far away from PKCS#11 that it's almost not worth doing, but it does just about work to crudely map enough of the basic functions to make key gen, wrap/unwrap, and sign operations work","username":"JonGeater","ts":"2019-02-19T11:30:13.170Z"}
{"msg":"For HSMs it really depends who we're looking at.  The old Crysalis tokens and some smartcards did do PKCS#11 natively, although note that complex things like changing ACLs, making bacups and so on tended to use extensions and out-of-band operations even so.  nCipher and Utimaco are wrappers (and so you have to look REALLY carefully for security gaps between the interfaces)","username":"JonGeater","ts":"2019-02-19T11:31:58.307Z"}
{"msg":"Lastly, we've had KMIP for 10 years now, so that should be considered too.  PKCS#11 V3 out of OASIS is quite well integraed with KMIP, and is (as a consequence) rather diffreent to PKCS#11 V2.x.  I'd argue it's a lot better in most ways, but unfortauntely it's going to take a very long time before people adopt it","username":"JonGeater","ts":"2019-02-19T11:33:18.435Z"}
{"msg":"PKCS#11 is hardware token based and the API could be cumbersome with sessions and all. But it is a common API to all the hardware that you mention, along with networked KMIP.","username":"danintel","ts":"2019-02-19T16:36:55.120Z"}
{"msg":"Has joined the channel.","username":"sureshtedla","ts":"2019-02-20T11:23:40.597Z","type":"uj"}
{"msg":"Meeting notes:  https://docs.google.com/document/d/1Z_8o8k_PFRM4XfZyv9jH1_-IyN0CsCMI2JlrGsCX378/edit?usp=sharing","username":"hartm","ts":"2019-02-20T15:02:02.127Z"}
{"msg":"I'm going to add myself to the minutes now while I fight with Zoom.  Be with you in a second","username":"JonGeater","ts":"2019-02-20T15:05:37.793Z"}
{"msg":"Has joined the channel.","username":"MHBauer","ts":"2019-02-20T18:02:41.984Z","type":"uj"}
{"msg":"i miss the call yesterday, double booked","username":"david.b.crypto","ts":"2019-02-21T15:42:24.318Z"}
{"msg":"is JIRA setup for ursa yet","username":"MALodder","ts":"2019-02-21T15:59:30.572Z"}
{"msg":"I don't see it as a project at https://jira.hyperledger.org","username":"MALodder","ts":"2019-02-21T15:59:44.436Z"}
{"msg":"I'm happy to create it if that's how to get started","username":"MALodder","ts":"2019-02-21T16:00:13.695Z"}
{"msg":"in meetingt notes from yesterday, we had 'Discussion on encryption API\" status: \"tabled to email list\" ","username":"david.b.crypto","ts":"2019-02-21T16:10:11.342Z"}
{"msg":"i may be able to help from an HSM perspective","username":"david.b.crypto","ts":"2019-02-21T17:05:33.910Z"}
{"msg":"looking forward to that conversation\\","username":"david.b.crypto","ts":"2019-02-21T17:05:49.161Z"}
{"msg":"also","username":"david.b.crypto","ts":"2019-02-21T17:06:00.114Z"}
{"msg":"I want to start towards wrapping cl signatures for fabric","username":"david.b.crypto","ts":"2019-02-21T17:07:41.588Z"}
{"msg":"are we in a position where we can crate that stuff with ffi?","username":"david.b.crypto","ts":"2019-02-21T17:08:07.968Z"}
{"msg":"so I created a crate for dev purposes already","username":"MALodder","ts":"2019-02-21T17:16:25.159Z"}
{"msg":"and we already expose the CL stuff with an FFI","username":"MALodder","ts":"2019-02-21T17:16:37.014Z"}
{"msg":"I'm working writing documentation for all of this","username":"MALodder","ts":"2019-02-21T17:16:47.622Z"}
{"msg":"the decision yesterday was to create a separate repo for that documention `ursa-docs`","username":"MALodder","ts":"2019-02-21T17:17:08.284Z"}
{"msg":"@hartm was looking into getting that started","username":"MALodder","ts":"2019-02-21T17:17:24.937Z"}
{"msg":"I believe we can start doing that for fabric","username":"MALodder","ts":"2019-02-21T17:17:36.070Z"}
{"msg":"thanks mike the documentation will be useful if you want to tag team on writing it, wed can do that too.. ","username":"david.b.crypto","ts":"2019-02-21T19:08:31.348Z"}
{"msg":"I just sent out the emal about the docs.","username":"hartm","ts":"2019-02-21T20:15:00.938Z"}
{"msg":"Has left the channel.","username":"nanspro","ts":"2019-02-22T06:30:03.736Z","type":"ul"}
{"msg":"Has joined the channel.","username":"twshelton","ts":"2019-02-22T17:13:50.091Z","type":"uj"}
{"msg":"Has joined the channel.","username":"runiner","ts":"2019-02-22T17:13:58.883Z","type":"uj"}
{"msg":"Using Bulletproofs (dalek's implementation) to create zero knowledge proofs for arithematic statements. https://medium.com/@loveshharchandani/zero-knowledge-proofs-using-bulletproofs-4a8e2579fc82","username":"lovesh","ts":"2019-02-23T20:53:46.913Z"}
{"msg":"Using Bulletproofs (dalek's implementation) to create zero knowledge proofs for arithematic statements. https://medium.com/coinmonks/zero-knowledge-proofs-using-bulletproofs-4a8e2579fc82","username":"lovesh","ts":"2019-02-23T20:53:46.913Z"}
{"msg":"Has joined the channel.","username":"mike_texnik","ts":"2019-02-25T11:41:48.818Z","type":"uj"}
{"msg":"@JonGeater Sovrin has investigated decentralized revocation registries or policies controlled by the user to essentially allow a user to authorize and revoke devices under their control and prove authorization in zero-knowledge. A policy is created by a user, the only information on the ledger in the policy is authorized public keys for various permissions. E.g. a user puts in three keys, one for each device perse uses, a laptop, a phone, and a tablet. When user presents ZKPs for anonymous credentials, perse also presents a proof that the device itself is authorized. Which policy is used is not revealed (which be correlatable if it was). When a device is lost or compromised, the user can revoke the bad device which halts an attacker from presenting valid proofs. The user can modify the policy to allow various permissions like 2 out of 3 devices are needed to add a new device but 1 out of 3 to revoke. This makes it harder for an attacker who manages to take over a device thru brute force or coercion to authorize his own new devices into the domain.\n\nCould this concept be applied to decentralize hardware based attestations by manufacturers? Basically we can have CRLs on the ledger and do proofs in zero knowledge. We talked about the need for decentralization in this area on the last Sovrin call.  We plan to discuss this further on the Sovrin crypto call tomorrow https://zoom.us/j/567114224 at 8AM MST.","username":"MALodder","ts":"2019-02-26T03:53:44.965Z"}
{"msg":"Anyone can attend the Sovrin Crypto Call ","username":"MALodder","ts":"2019-02-26T03:54:43.413Z"}
{"msg":"Look forward to seeing attendees tomorrow","username":"MALodder","ts":"2019-02-26T03:55:01.431Z"}
{"msg":"Maybe we can use these in ursa: https://github.com/RustCrypto/traits","username":"MALodder","ts":"2019-02-26T04:25:00.432Z"}
{"msg":"has the sovrin crypto call been placed on a public calendar or can someone just forward me an invite? ","username":"david.b.crypto","ts":"2019-02-26T15:17:54.242Z"}
{"msg":"@MALodder ^^^","username":"nage","ts":"2019-02-26T15:24:14.671Z"}
{"msg":"It is going on now here https://zoom.us/j/567114224","username":"nage","ts":"2019-02-26T15:24:33.204Z"}
{"msg":"Join from PC, Mac, Linux, iOS or Android: https://zoom.us/j/567114224\n\n","username":"hartm","ts":"2019-02-26T15:24:39.285Z"}
{"msg":"@david.b.crypto yes its on the hyperledger public calendar","username":"MALodder","ts":"2019-02-26T15:29:13.168Z"}
{"msg":"thanks","username":"david.b.crypto","ts":"2019-02-26T15:38:15.096Z"}
{"msg":"im in another call, cant join","username":"david.b.crypto","ts":"2019-02-26T15:38:28.088Z"}
{"msg":"Has joined the channel.","username":"satelander","ts":"2019-02-26T18:42:05.791Z","type":"uj"}
{"msg":"Has joined the channel.","username":"callahan","ts":"2019-02-28T16:33:16.599Z","type":"uj"}
{"msg":"@MALodder sorry for botherting you, but is it possible to access the paper which is being discussed in the meeting? or this paper is not avaibale for everyone until it is publised","username":"mike_texnik","ts":"2019-03-05T15:20:12.936Z"}
{"msg":"","username":"cam-parra","ts":"2019-03-05T15:21:39.922Z","attachments":[{"type":"file","title":"AnonCreds2.pdf","title_link":"/file-upload/yatgSsK3zqgv4W4C3/AnonCreds2.pdf","url":"/file-upload/yatgSsK3zqgv4W4C3/AnonCreds2.pdf","remote":false,"fileId":"yatgSsK3zqgv4W4C3","fileName":"AnonCreds2.pdf"}]}
{"msg":"@mike_texnik ","username":"cam-parra","ts":"2019-03-05T15:21:44.722Z"}
{"msg":"thank you very much!","username":"mike_texnik","ts":"2019-03-05T15:22:03.963Z"}
{"msg":"Not much detail about it but it appears similar to Salsa20 at first glance\nhttps://cnnic.com.cn/ScientificResearch/LeadingEdge/soea/zuc/201312/t20131204_43352.htm","username":"MALodder","ts":"2019-03-06T02:49:57.354Z"}
{"msg":"Ha never mind\nhttps://www.gsma.com/aboutus/wp-content/uploads/2014/12/eea3eia3zucv16.pdf","username":"MALodder","ts":"2019-03-06T02:50:48.272Z"}
{"msg":"Doesn't look that great","username":"MALodder","ts":"2019-03-06T02:50:55.609Z"}
{"msg":"@here Just a reminder of tomorrow's meeting.  Hope to talk to many of you tomorrow.  Thanks!","username":"hartm","ts":"2019-03-06T04:29:34.613Z"}
{"msg":" Meeting notes:  https://docs.google.com/document/d/1Z_8o8k_PFRM4XfZyv9jH1_-IyN0CsCMI2JlrGsCX378/edit?usp=sharing","username":"hartm","ts":"2019-03-06T15:00:21.701Z"}
{"msg":"https://wiki.hyperledger.org/pages/viewpage.action?pageId=6426712","username":"hartm","ts":"2019-03-06T15:11:47.987Z"}
{"msg":"Has joined the channel.","username":"edmundto","ts":"2019-03-07T05:17:55.912Z","type":"uj"}
{"msg":"","username":"MALodder","ts":"2019-03-07T05:44:20.246Z","attachments":[{"type":"file","title":"signal-2019-03-07-134159.jpeg","title_link":"/file-upload/ebnskwAAyZEaNEEsH/signal-2019-03-07-134159.jpeg","image_url":"/file-upload/ebnskwAAyZEaNEEsH/signal-2019-03-07-134159.jpeg","image_type":"image/jpeg","image_size":222842,"url":"/file-upload/ebnskwAAyZEaNEEsH/signal-2019-03-07-134159.jpeg","remote":false,"fileId":"ebnskwAAyZEaNEEsH","fileName":"signal-2019-03-07-134159.jpeg"}]}
{"msg":"At hyperledger boot camp in Hong Kong ","username":"MALodder","ts":"2019-03-07T05:45:01.907Z"}
{"msg":"Has joined the channel.","username":"Thunder_xd","ts":"2019-03-07T05:55:42.409Z","type":"uj"}
{"msg":"Nice!","username":"hartm","ts":"2019-03-07T08:44:02.280Z"}
{"msg":"Has joined the channel.","username":"qylixin","ts":"2019-03-08T01:19:57.316Z","type":"uj"}
{"msg":"Is he talking about libzmix goats?  Do we need another animal logo?","username":"JonGeater","ts":"2019-03-08T03:32:05.350Z"}
{"msg":"Has joined the channel.","username":"rbole","ts":"2019-03-08T05:52:22.135Z","type":"uj"}
{"msg":"I prefer sheep dogs","username":"MALodder","ts":"2019-03-08T15:03:42.868Z"}
{"msg":"@JonGeater Are you planning to attend the Sovrin Crypto tomorrow? I wanted to discuss the possibility of using Sovrin as a DPKI for hardware and TEE attestations and what would be required for that","username":"MALodder","ts":"2019-03-11T21:06:25.700Z"}
{"msg":"Yes","username":"JonGeater","ts":"2019-03-11T21:16:28.538Z"}
{"msg":"Wait...depends.  We're on a weird timezone week aren't we?","username":"JonGeater","ts":"2019-03-11T21:16:46.523Z"}
{"msg":"Is it still 07:00 Pacific?","username":"JonGeater","ts":"2019-03-11T21:17:55.160Z"}
{"msg":"If so I can do the first half hour: that'll be 14:00-14:30 for me this week ","username":"JonGeater","ts":"2019-03-11T21:18:09.951Z"}
{"msg":"I'm speaking at the Cloud and Cybersecurity Summit at 15:00 UK time","username":"JonGeater","ts":"2019-03-11T21:18:37.436Z"}
{"msg":"@JonGeater It's still 7:00 AM Pacific, but note the daylight savings time change.","username":"hartm","ts":"2019-03-11T21:18:40.855Z"}
{"msg":"Yes perfect.  That oplays in our favour this time","username":"JonGeater","ts":"2019-03-11T21:18:53.002Z"}
{"msg":"I can do 14:00-14:30.  Question, to let it sit in my mind for a bit: do you mean specifically GlobalPlatform TEE (meaning complying with GP specs for attestation, TSM and so on) or just generally attesting to some abstractly understood Root of Trust for a general secure enclave? ","username":"JonGeater","ts":"2019-03-11T21:20:45.127Z"}
{"msg":"Well the problem as you stated was central authorities for enclave quotes","username":"MALodder","ts":"2019-03-11T21:44:14.950Z"}
{"msg":"could Sovrin be the DPKI for attestations, meaning instead of Intel having control over EPID, they could put it on Sovrin and then its decentralized","username":"MALodder","ts":"2019-03-11T21:44:54.176Z"}
{"msg":"@JonGeater Okay, I'll schedule the first part of the meeting to cover the TEE and HSM stuff","username":"MALodder","ts":"2019-03-11T21:46:29.861Z"}
{"msg":"that way if you need to leave you can","username":"MALodder","ts":"2019-03-11T21:46:38.150Z"}
{"msg":"when will be the next group meeting?","username":"richzhao","ts":"2019-03-12T02:52:49.915Z"}
{"msg":"Right.  So yes we can define a model for that for people to sign up to.  Many won't want to as extracting a toll fee (or 'prime real estate' in the MNO world) is core to their business model.  But some will, and I think it's a good thing for us to do","username":"JonGeater","ts":"2019-03-12T10:37:20.767Z"}
{"msg":"@richzhao next ursa meeting is wednesday march 20th at 7AM PDT","username":"MALodder","ts":"2019-03-12T13:54:57.895Z"}
{"msg":"While I switch out my network connection, you're onto a good thing with the credential profile.  Almost all TEE use cases end up just being a way of securing a cryptographic ID for end-to-end protocols","username":"JonGeater","ts":"2019-03-12T14:10:54.131Z"}
{"msg":"hi hartman","username":"david.b.crypto","ts":"2019-03-13T15:15:27.875Z"}
{"msg":"Has joined the channel.","username":"leixianting","ts":"2019-03-14T02:11:54.439Z","type":"uj"}
{"msg":"Hey, I missed the last couple of Sovrin calls and noticed on the agenda you have been discussing delegatable credentials. I have heard of multiple ways to do with and have recently been reading https://acmccs.github.io/papers/p683-camenischA.pdf. Is this something sovrin are considering implementing? And can anyone point me to any other literature around delegating credentials, especially around and different approaches to it. \nThanks :)","username":"wip-abramson","ts":"2019-03-14T10:54:33.861Z"}
{"msg":"In this paper it mentions the ability to sign transactions with a delegated credential. So would it also be possible to issue further credentials using a delegated credential to create the signature? ","username":"wip-abramson","ts":"2019-03-14T10:57:47.824Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=GbvnPrBeHSyKouuz8) @wip-abramson That paper the is best i have seen on delegatable credentials. Our current and the upcoming signature scheme will not be compatible with the scheme mentioned in this paper. We have been considering using a generic proving system like using SNARKs or Bulletproofs (Arithematic circuits), there is no paper about this approach yet. ","username":"lovesh","ts":"2019-03-14T12:09:17.549Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=GbvnPrBeHSyKouuz8","url":"https://chat.hyperledger.org/channel/ursa?msg=GbvnPrBeHSyKouuz8","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=B6dY5mgiHMnD9xvyu) @wip-abramson Yes. ","username":"lovesh","ts":"2019-03-14T12:15:39.074Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=B6dY5mgiHMnD9xvyu","url":"https://chat.hyperledger.org/channel/ursa?msg=B6dY5mgiHMnD9xvyu","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=hCpyjwJkK7M4MvfrK) @lovesh Thanks @lovesh, I am not sure I understand how this type of signing works. Do you know any good resources on this?","username":"wip-abramson","ts":"2019-03-14T14:46:52.160Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=hCpyjwJkK7M4MvfrK","url":"https://chat.hyperledger.org/channel/ursa?msg=hCpyjwJkK7M4MvfrK","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I have written an new RFC for language bindings\n\nSee https://github.com/hyperledger/ursa-rfcs/pull/8","username":"MALodder","ts":"2019-03-14T15:43:40.792Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=ZHNCRevpqdHmPcgYK) @wip-abramson The paper explains the schemes in section 2.4 and 2.5. It describes the implementation too using pairings.","username":"lovesh","ts":"2019-03-14T17:29:26.150Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=ZHNCRevpqdHmPcgYK","url":"https://chat.hyperledger.org/channel/ursa?msg=ZHNCRevpqdHmPcgYK","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Ah okay,  must be my lack of understanding. Will re read. Thanks @lovesh!","username":"wip-abramson","ts":"2019-03-14T18:28:21.321Z"}
{"msg":"New PR that removes libsodium dependency and makes hashing and signatures more generic","username":"MALodder","ts":"2019-03-14T18:41:43.505Z"}
{"msg":"https://github.com/hyperledger/ursa/pull/17","username":"MALodder","ts":"2019-03-14T18:41:45.440Z"}
{"msg":"@lovesh @amundson @dhuseby Can you please review both my PRs? the wasm one has sat there for a month with no review","username":"MALodder","ts":"2019-03-14T18:42:52.593Z"}
{"msg":"@MALodder I'll try to do reviews tomorrow","username":"amundson","ts":"2019-03-14T21:23:16.055Z"}
{"msg":"@amundson thank you","username":"MALodder","ts":"2019-03-14T21:29:32.245Z"}
{"msg":"@MALodder we don't like you ; )","username":"dhuseby","ts":"2019-03-15T19:40:12.610Z"}
{"msg":"let me see what I can get done this weekend.","username":"dhuseby","ts":"2019-03-15T19:40:24.100Z"}
{"msg":"currently working the internship and Iroha stuff","username":"dhuseby","ts":"2019-03-15T19:40:32.421Z"}
{"msg":"(higher priority ATM)","username":"dhuseby","ts":"2019-03-15T19:40:37.733Z"}
{"msg":"@here should we be sending somebody from Ursa to the zkproof.org meeting in a few weeks?","username":"dhuseby","ts":"2019-03-15T21:18:58.963Z"}
{"msg":"I'm going","username":"MALodder","ts":"2019-03-15T21:19:12.709Z"}
{"msg":"I created a Ursa microbenchmark for SHA-512 and SHA-256 here https://github.com/danintel/ursaspeed\nFor SHA-512 and 16Kbyte buffers, I improved ursa performance 173x running on my laptop by using crate ring (which uses Google's BoringSSL, a OpenSSL fork, written in C and assembly).\n\nSo I am wondering, is performance an important issue? Or is Ursa just for experimentation with new crypto algorithms?\nI can easily create a PR with a fix, unless the end goal is Rust-only code with no C/assembly.\nI can add this to the next meeting agenda to discuss, unless the answer is already known.","username":"danintel","ts":"2019-03-15T22:41:57.888Z"}
{"msg":"@danintel Nice!  It would be fantastic if you could talk about this in the next meeting (this coming week).","username":"hartm","ts":"2019-03-15T23:42:37.149Z"}
{"msg":"ok","username":"danintel","ts":"2019-03-15T23:43:59.185Z"}
{"msg":"My vote is that performance *does* matter, and that Ursa is NOT just for experimentation. So I'd love to see a PR.","username":"danielhardman","ts":"2019-03-16T15:57:06.702Z"}
{"msg":"I will also be at zkproof.org meeting @MALodder @dhuseby  ","username":"VipinB","ts":"2019-03-16T17:05:51.091Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=6oWweMtWbMwchMhnw) +1","username":"VipinB","ts":"2019-03-16T17:07:45.180Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=6oWweMtWbMwchMhnw","url":"https://chat.hyperledger.org/channel/ursa?msg=6oWweMtWbMwchMhnw","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Performance matters but we shouldn’t just say pick items based on speed. Rusts SHA2 crate is quite fast as well and unless there is a specific reason why someone needs the bleeding edge I don’t want to always say yes. ","username":"MALodder","ts":"2019-03-17T20:54:45.161Z"}
{"msg":"We can work together to create awesome stuff for ursa ","username":"MALodder","ts":"2019-03-17T20:55:46.236Z"}
{"msg":"@danintel what libraries were you comparing and where you comparing release mode? I’ve tested raw rust to C code and found if you compare debug mode there is quite a gap of 173x","username":"MALodder","ts":"2019-03-17T20:57:10.141Z"}
{"msg":"But if I run it in release mode there isn’t much of a difference ","username":"MALodder","ts":"2019-03-17T20:57:32.395Z"}
{"msg":"Usually I find rust is just as fast or faster","username":"MALodder","ts":"2019-03-17T20:57:47.683Z"}
{"msg":"Can I PLEASE get some reviews for my two PRs? one of them has been there for more than a month. These are the two PRs needed so Indy can adopt URSA.","username":"MALodder","ts":"2019-03-18T13:24:03.243Z"}
{"msg":"@MALodder  and @dhuseby If  I can get write access I'd love to review these PRs","username":"cam-parra","ts":"2019-03-18T14:11:36.634Z"}
{"msg":"@cam-parra I can't add you as a maintainer, that has to be done by HL","username":"MALodder","ts":"2019-03-18T14:12:33.809Z"}
{"msg":"I believe @dhuseby or @rjones  can send in a request ticket","username":"cam-parra","ts":"2019-03-18T14:16:03.922Z"}
{"msg":"Has joined the channel.","username":"rjones","ts":"2019-03-18T14:16:04.804Z","type":"uj"}
{"msg":"Each project should have a proceedure for adding maintainers.  In Indy we let the current code-base maintainers propose a new maintainer, and then I gather feedback from the rest of the maintainers (usually on the indy maintainers call) and if I don't get any \"no\" votes from the rest of the group we move forward to propose the addition.  We haven't yet had a proposed maintainer move forward with  opposition (a couple have chosen to wait a few weeks and moved forward later), but the next steps would match other groups where we would have more official vote considering commit history and PR review engagement and ability to play well with others.  I'm not sure what Ursa wants to do, but I think it is very healthy to engage everyone who can put in the needed care and time.","username":"nage","ts":"2019-03-18T15:53:51.186Z"}
{"msg":"@nage with @dhuseby  I believe the project decided that URSA is a do-ocracy. Meaning if you're willing and wanting and have submitted work you're a valid candidate","username":"cam-parra","ts":"2019-03-18T15:58:14.900Z"}
{"msg":"Here's my microbenchmark performance numbers of various Rust crates running on my laptop:\n```time: 2019-03-18 15:14:07.488016600 UTC\nos: Ubuntu 18.04\nrustc: 1.33.0 (stable channel)\nhostname: daniela1-MOBL\nThe 'numbers' are in 1000s of bytes per second processed.\ntype/crate       16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes\nsha256/ring       5403.07k    20306.62k    67330.56k   164506.28k   278489.77k   283820.03k\nsha512/ring       5403.19k    21662.40k    69323.95k   191211.86k   381479.59k   410107.90k\nsha256/openssl    4683.83k    17647.34k    61666.30k   162087.94k   289846.61k   320012.29k\nsha512/openssl    4134.21k    17739.39k    62442.58k   185346.39k   427251.03k   467473.75k\nsha256/sha2       2283.65k     4439.68k     7156.31k     8349.01k     8852.82k     8844.41k\nsha512/sha2       1492.82k     5982.36k     9558.19k    13729.45k    15597.57k    15919.79k\namcl/sha256       2288.11k     2815.70k     3507.03k     3488.43k     3899.39k     3939.14k\namcl/sha512       2261.30k     6433.49k     4713.05k     5132.29k     5294.76k     5324.80k\nhashlib/sha256    2225.40k     4367.32k     6882.22k     8351.74k     8904.70k     8852.82k\nhashlib/sha512    1485.79k     5987.56k     9579.52k    13730.47k    15816.02k    15821.48k\nursa/sha256        624.40k     1507.56k     2818.30k     3558.06k     3827.12k     3899.39k\nursa/sha512        494.18k     1825.28k     3110.91k     4490.24k     5099.19k     5264.73k ```","username":"danintel","ts":"2019-03-18T15:58:39.184Z"}
{"msg":"Here's my microbenchmark performance numbers of various Rust crates running on my laptop:\n```time: 2019-03-18 15:14:07.488016600 UTC\nos: Ubuntu 18.04\nrustc: 1.33.0 (stable channel)\nhostname: daniela1-MOBL\nThe 'numbers' are in 1000s of bytes per second processed.\ntype/crate       16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes\nsha256/ring       5403.07k    20306.62k    67330.56k   164506.28k   278489.77k   283820.03k\nsha512/ring       5403.19k    21662.40k    69323.95k   191211.86k   381479.59k   410107.90k\nopenssl/sha256    4683.83k    17647.34k    61666.30k   162087.94k   289846.61k   320012.29k\nopenssl/sha512    4134.21k    17739.39k    62442.58k   185346.39k   427251.03k   467473.75k\nsha256/sha2       2283.65k     4439.68k     7156.31k     8349.01k     8852.82k     8844.41k\nsha512/sha2       1492.82k     5982.36k     9558.19k    13729.45k    15597.57k    15919.79k\namcl/sha256       2288.11k     2815.70k     3507.03k     3488.43k     3899.39k     3939.14k\namcl/sha512       2261.30k     6433.49k     4713.05k     5132.29k     5294.76k     5324.80k\nhashlib/sha256    2225.40k     4367.32k     6882.22k     8351.74k     8904.70k     8852.82k\nhashlib/sha512    1485.79k     5987.56k     9579.52k    13730.47k    15816.02k    15821.48k\nursa/sha256        624.40k     1507.56k     2818.30k     3558.06k     3827.12k     3899.39k\nursa/sha512        494.18k     1825.28k     3110.91k     4490.24k     5099.19k     5264.73k ```","username":"danintel","ts":"2019-03-18T15:58:39.184Z"}
{"msg":"@danintel have you looked into `cargo bench`?","username":"jsmitchell","ts":"2019-03-18T16:13:05.164Z"}
{"msg":"No--I'll look at it. I wanted something directly comparable to openssl microbenchmarks.","username":"danintel","ts":"2019-03-18T16:15:50.555Z"}
{"msg":"I don’t understand the numbers here because ursa/sha256 is using amcl/sha256","username":"MALodder","ts":"2019-03-18T16:24:31.824Z"}
{"msg":"Something is not adding up","username":"MALodder","ts":"2019-03-18T16:24:40.839Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=hMEwErBYmcDXz6DKx) @MALodder Approved one of your PRs. There are comments about zeroing out memory for some variables","username":"lovesh","ts":"2019-03-18T20:00:37.288Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=hMEwErBYmcDXz6DKx","url":"https://chat.hyperledger.org/channel/ursa?msg=hMEwErBYmcDXz6DKx","remote":true,"fileId":null,"fileName":null}]}
{"msg":"okay, I need the WASM one approved too","username":"MALodder","ts":"2019-03-18T20:07:37.537Z"}
{"msg":"@danintel are those sha512 numbers the full sha512 or one of the truncated sha512's?","username":"dhuseby","ts":"2019-03-18T23:32:08.803Z"}
{"msg":"It is full sha512.","username":"danintel","ts":"2019-03-18T23:33:00.274Z"}
{"msg":"I don't see why a truncated sha512 should be different. The truncated digests have a different IVs and the result is shorter, but the stuff in-between is the same. ","username":"danintel","ts":"2019-03-18T23:35:00.104Z"}
{"msg":"zoomzkproof","username":"deepikav","ts":"2019-03-19T01:30:37.573Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=9CyFiFJHjdRDhxnRk) @MALodder Some comments there but approved.","username":"lovesh","ts":"2019-03-19T08:13:23.807Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=9CyFiFJHjdRDhxnRk","url":"https://chat.hyperledger.org/channel/ursa?msg=9CyFiFJHjdRDhxnRk","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@dhuseby and @amundson any update on reviews for @MALodder's PRs?  It would be good to get some more reviewers to help avoid week-long delays.","username":"nage","ts":"2019-03-19T17:06:04.386Z"}
{"msg":"(and yes, I do volunteer if you need me)","username":"nage","ts":"2019-03-19T17:06:52.298Z"}
{"msg":"I'm not sure what standard we are holding this code to. Should I be putting a red X on it because of things like commented-out code? (I would 100% do that on sawtooth or grid repos.) The commit history in the PR has merge commits - that's also not allowed in sawtooth or grid because it implies the commits are not well-formed for review. And in matter fo fact, reviewing the wasm one per-commit doesn't seem productive for that reason. (In the other projects, we rebase upon master if we are updating the PR and force-push).","username":"amundson","ts":"2019-03-19T18:51:12.857Z"}
{"msg":"I guess this is mostly a question to @MALodder about the desired style of review.","username":"amundson","ts":"2019-03-19T18:52:20.090Z"}
{"msg":"I approved them as-is because it's would be ridiculous to come in so late with anything else.","username":"amundson","ts":"2019-03-19T18:54:14.721Z"}
{"msg":"normally, I prefer smaller reviews but we can't reject PRs because they have merge commits because those commits have sat for a while and other PRs have been merged.","username":"MALodder","ts":"2019-03-19T18:56:53.998Z"}
{"msg":"I'm not seeing the commented out code you  are referring to","username":"MALodder","ts":"2019-03-19T18:58:52.604Z"}
{"msg":"what would you prefer  @amundson ?","username":"MALodder","ts":"2019-03-19T18:59:56.643Z"}
{"msg":"the alternative to merge commit is rebase+force-push to the PR branch. the duration of the PR being open doesn't matter. (I agree though, that they shouldn't sit as long as these did, its just a different problem.)","username":"amundson","ts":"2019-03-19T19:03:50.378Z"}
{"msg":"the commented-out code is on the wasm one","username":"amundson","ts":"2019-03-19T19:05:43.120Z"}
{"msg":"so, for example, the wasm PR needs rebase or merge. in Sawtooth or Grid, we would require it to be rebased to resolve the conflict. either solution technically works to make the PR mergable.","username":"amundson","ts":"2019-03-19T19:12:01.958Z"}
{"msg":"@cam-parra Ursa team maintainers can add you directly, without a ticket.","username":"rjones","ts":"2019-03-19T19:43:26.867Z"}
{"msg":"@cam-parra since you're already part of ursa-maintainers, you should be able to review/merge code","username":"rjones","ts":"2019-03-19T19:44:08.196Z"}
{"msg":"@cam-parra since you","username":"rjones","ts":"2019-03-19T19:44:08.196Z"}
{"msg":"@amundson I could look to see if your repos have the rebase-and-merge option enabled. Personally, I prefer rebased merges b/c I'm allergic to merge commits ","username":"rjones","ts":"2019-03-19T19:45:19.051Z"}
{"msg":"@MALodder it does look like there are merge conflicts, though: https://github.com/hyperledger/ursa/pull/14","username":"rjones","ts":"2019-03-19T19:46:15.157Z"}
{"msg":"@rjones we do all the rebasing manually (for Sawtooth and Grid) because part of our review is how well formed the commit messages are, and so we keep that option off within github","username":"amundson","ts":"2019-03-19T20:22:02.274Z"}
{"msg":"nearly all the merge commits thus end up being caused by github","username":"amundson","ts":"2019-03-19T20:22:31.667Z"}
{"msg":"So you prefer for me to do a git fetch and then re-base onto the current branch? Instead of having GitHub do the merge?","username":"MALodder","ts":"2019-03-19T21:42:38.307Z"}
{"msg":"I’m open to any option that works and doesn’t get in the way if that’s what people preferred to do I’m fine with it","username":"MALodder","ts":"2019-03-19T21:43:15.531Z"}
{"msg":"@MALodder given the merge conflicts, github can't do the merge. If I'm looking at the right PR","username":"rjones","ts":"2019-03-19T22:07:56.835Z"}
{"msg":"```This branch has conflicts that must be resolved\nUse the web editor or the to resolve conflicts.\nConflicting files\nlibursa/Cargo.toml\nlibursa/src/hash/mod.rs\nlibursa/src/lib.rs\nlibursa/src/signatures/ed25519.rs\nlibursa/src/signatures/secp256k1.rs\n```","username":"rjones","ts":"2019-03-19T22:09:05.884Z"}
{"msg":"It’s not the branch that’s the issue at hand it’s a matter of procedure ","username":"MALodder","ts":"2019-03-19T22:41:24.083Z"}
{"msg":"Has joined the channel.","username":"flyerwing","ts":"2019-03-20T02:41:06.363Z","type":"uj"}
{"msg":"Are people aware of the new implementations from MSFT in Homomorphic encryption? https://github.com/Microsoft/SEAL","username":"kdenhartog","ts":"2019-03-20T03:19:19.600Z"}
{"msg":"https://git.njit.edu/palisade/PALISADE/tree/master","username":"kdenhartog","ts":"2019-03-20T03:29:43.604Z"}
{"msg":"Also relevant","username":"kdenhartog","ts":"2019-03-20T03:29:46.891Z"}
{"msg":"Has joined the channel.","username":"tplooker","ts":"2019-03-20T03:41:46.818Z","type":"uj"}
{"msg":"@here Just a reminder of tomorrow's Ursa meeting.  Please add your agenda items to the agenda (on the wiki) if there's anything in particular you'd like to discuss.  Thanks!","username":"hartm","ts":"2019-03-20T06:24:31.799Z"}
{"msg":"Meeting notes:  https://wiki.hyperledger.org/pages/viewpage.action?pageId=6427832","username":"hartm","ts":"2019-03-20T14:02:12.757Z"}
{"msg":"Can't make it today unfortunately","username":"JonGeater","ts":"2019-03-20T14:18:49.005Z"}
{"msg":"@MALodder it looks like I haven't been given access right yet. But as @rjones stated I believe you or @hartm can add me ","username":"cam-parra","ts":"2019-03-20T14:30:50.016Z"}
{"msg":"@cam-parra I don't believe I can add you.  I think it has to be someone from the LF.","username":"hartm","ts":"2019-03-20T14:31:45.365Z"}
{"msg":"Has joined the channel.","username":"brockhager","ts":"2019-03-20T15:03:03.625Z","type":"uj"}
{"msg":"FYI I'm not in the core developers group, but I can still make PRs and I have done reviews and comments. It just results in a gray checkmark instead of a green checkmark, but that is relevant only when automated CI is enabled.","username":"danintel","ts":"2019-03-20T15:29:00.761Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=MJXEozR3SXAdtqJQ2) @kdenhartog Looks simple, it just allows addition/subtraction and multiply on integers using BFV and CKKS for floating point","username":"MALodder","ts":"2019-03-20T15:33:18.196Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=MJXEozR3SXAdtqJQ2","url":"https://chat.hyperledger.org/channel/ursa?msg=MJXEozR3SXAdtqJQ2","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Not sure we would use it for ursa yet","username":"MALodder","ts":"2019-03-20T15:33:31.888Z"}
{"msg":"I'm not familiar with how those work but CKKS seems like its newer. I'd like to hear thoughts from the cryptographers on it","username":"MALodder","ts":"2019-03-20T15:34:06.510Z"}
{"msg":"@cam-parra you around?","username":"rjones","ts":"2019-03-20T18:35:02.411Z"}
{"msg":"@hartm around?","username":"rjones","ts":"2019-03-20T18:35:29.149Z"}
{"msg":"@MALodder @hartm I have promoted both of you to team maintainers, as well as Shawn, for the Ursa Maintainers team:","username":"rjones","ts":"2019-03-20T18:39:12.721Z"}
{"msg":"https://github.com/orgs/hyperledger/teams/ursa-maintainers/members","username":"rjones","ts":"2019-03-20T18:39:15.289Z"}
{"msg":"this team has write access to three repos: https://github.com/orgs/hyperledger/teams/ursa-maintainers/repositories","username":"rjones","ts":"2019-03-20T18:39:31.920Z"}
{"msg":"awesome","username":"MALodder","ts":"2019-03-20T18:40:03.069Z"}
{"msg":"Since @cam-parra is already a member of Hyperledger: https://github.com/orgs/hyperledger/people/cam-parra","username":"rjones","ts":"2019-03-20T18:40:08.432Z"}
{"msg":"you can add him without any say-so.","username":"rjones","ts":"2019-03-20T18:40:18.358Z"}
{"msg":"@rjones what's the best way to add webhooks for projects?","username":"MALodder","ts":"2019-03-20T18:40:19.631Z"}
{"msg":"@rjones sounds good thanks","username":"MALodder","ts":"2019-03-20T18:40:26.500Z"}
{"msg":"The bit that you need LFIT to do is if someone is _not_ in the Hyperledger org.","username":"rjones","ts":"2019-03-20T18:40:44.675Z"}
{"msg":"@MALodder helpdesk@hyperledger.org is how to add webhooks","username":"rjones","ts":"2019-03-20T18:41:16.457Z"}
{"msg":"@rjones  Sorry about that I was on my lunch break. But it looks like @MALodder has taken care of adding me! Thanks guys!","username":"cam-parra","ts":"2019-03-20T19:47:34.180Z"}
{"msg":"@cam-parra you are a maintainer on ursa","username":"MALodder","ts":"2019-03-20T19:59:42.573Z"}
{"msg":"try doing something that requires write access","username":"MALodder","ts":"2019-03-20T19:59:53.248Z"}
{"msg":"A fork of PALISADE built by duality.cloud evidently performed an operation on genomic data in .09 minutes using between 1 and 2 GB of ram. So my thinking is FHE is becoming more practical.","username":"kdenhartog","ts":"2019-03-20T20:42:50.657Z"}
{"msg":"there. 2/3 of the existing URSA bugs are mine","username":"rjones","ts":"2019-03-20T23:33:47.159Z"}
{"msg":"@rjones what do you mean by bugs?","username":"MALodder","ts":"2019-03-21T00:02:11.290Z"}
{"msg":"Here is a link to the CI pipeline and the results that I used to run ursa through https://gitlab.sovrin.org/sovrin-foundation/ursa/pipelines/2","username":"MALodder","ts":"2019-03-21T04:01:46.940Z"}
{"msg":"Has joined the channel.","username":"niteshsolanki","ts":"2019-03-21T04:43:36.382Z","type":"uj"}
{"msg":"very nice...","username":"david.b.crypto","ts":"2019-03-21T16:23:07.745Z"}
{"msg":"@amundson @dhuseby I sent you an invite to be an author for the ursa crate","username":"MALodder","ts":"2019-03-21T17:45:29.010Z"}
{"msg":"be sure to accept those invites","username":"MALodder","ts":"2019-03-21T17:49:10.577Z"}
{"msg":"Has left the channel.","username":"rjones","ts":"2019-03-21T18:13:01.073Z","type":"ul"}
{"msg":"Ursa 0.1.0 has been released as a rust crate","username":"MALodder","ts":"2019-03-21T23:43:32.785Z"}
{"msg":"https://crates.io/crates/ursa","username":"MALodder","ts":"2019-03-21T23:44:16.711Z"}
{"msg":"I looked and I built my copy of ursa using `cargo build --release` as instructed in the github README.md file. The numbers above (March 18 in my TZ) are using that build.\nIf there's any other optimization suggestions for rust let me know.","username":"danintel","ts":"2019-03-21T23:46:34.021Z"}
{"msg":"@danintel FWI. Ursa code has changed so your benchmarks in the repo https://github.com/danintel/ursaspeed don't work with latest Ursa. They work with Ursa commit d7ac9e92d4f76cd2b68c974031e4e894200dc4bf so you need to checkout that commit and then run your benchmark.\nOn the topic of why Ursa is so slow, there is a *problem with your benchmark from what i can see*. You are omitting steps in your benchmark with some other libs from what i can see. Consider your `sha256_sha2` function in main.rs in your repo, it does `h.input(&data[..byte_len]);` which means accept the input but it missing the step to compute the digest so *the hash is never computed*, you need to call `h.result()` for that. Same for `sha256_ring`, it does `h.update(&data[..byte_len])` but not `h.finish()`. The same problem here, your function accepts input but *does not compute the digest*. Similarly for `sha256_amcl`, you call `h.process_array(&data[..byte_len])` but not `h.hash()` which is needed to compute the digest. I did not check other functions. I would suggest to make these changes and then compare","username":"lovesh","ts":"2019-03-22T11:21:08.764Z"}
{"msg":"@danintel FWI. Ursa code has changed so your benchmarks in the repo https://github.com/danintel/ursaspeed don't work with latest Ursa. They work with Ursa commit d7ac9e92d4f76cd2b68c974031e4e894200dc4bf so you need to checkout that commit and then run your benchmark.\nOn the topic of why Ursa is so slow, there is a *problem with your benchmark from what i can see*. You are *omitting steps in your benchmark* with some other libs from what i can see. Consider your `sha256_sha2` function in main.rs in your repo, it does `h.input(&data[..byte_len]);` which means accept the input but it missing the step to compute the digest so *the hash is never computed*, you need to call `h.result()` for that. Same for `sha256_ring`, it does `h.update(&data[..byte_len])` but not `h.finish()`. The same problem here, your function accepts input but *does not compute the digest*. Similarly for `sha256_amcl`, you call `h.process_array(&data[..byte_len])` but not `h.hash()` which is needed to compute the digest. I did not check other functions. I would suggest to make these changes and then compare","username":"lovesh","ts":"2019-03-22T11:21:08.764Z"}
{"msg":"@danintel FWI. Ursa code has changed so your benchmarks in the repo https://github.com/danintel/ursaspeed don't work with latest Ursa. They work with Ursa commit d7ac9e92d4f76cd2b68c974031e4e894200dc4bf so you need to checkout that commit and then run your benchmark.\nOn the topic of why Ursa is so slow, there is a *problem with your benchmark from what i can see*. You are *omitting steps in your benchmark* with some other libs from what i can see. Consider your `sha256_sha2` function in main.rs in your repo, it does `h.input(&data[..byte_len]);` which means accept the input but its missing the step to compute the digest so *the hash is never computed*, you need to call `h.result()` for that. Same for `sha256_ring`, it does `h.update(&data[..byte_len])` but not `h.finish()`. The same problem here, your function accepts input but *does not compute the digest*. Similarly for `sha256_amcl`, you call `h.process_array(&data[..byte_len])` but not `h.hash()` which is needed to compute the digest. I did not check other functions. I would suggest to make these changes and then compare","username":"lovesh","ts":"2019-03-22T11:21:08.764Z"}
{"msg":"@danintel FWI. Ursa code has changed so your benchmarks in the repo https://github.com/danintel/ursaspeed don't work with latest Ursa. They work with Ursa commit d7ac9e92d4f76cd2b68c974031e4e894200dc4bf so you need to checkout that commit and then run your benchmark.\nOn the topic of why Ursa is so slow, there is a *problem with your benchmark from what i can see*. You are *omitting steps in your benchmark* with some other libs from what i can see. Consider your `sha256_sha2` function in main.rs in your repo, it does `h.input(&data[..byte_len]);` which means accept the input but its missing the step to compute the digest so *the hash is never computed*, you need to call `h.result()` for that. Same for `sha256_ring`, it does `h.update(&data[..byte_len])` but not `h.finish()`. The same problem here, your function accepts input but *does not compute the digest*. Similarly for `sha256_amcl`, you call `h.process_array(&data[..byte_len])` but not `h.hash()` which is needed to compute the digest. I would suggest to make these changes and then compare.","username":"lovesh","ts":"2019-03-22T11:21:08.764Z"}
{"msg":"After the above mentioned fixes, i get these results\n```\n```","username":"lovesh","ts":"2019-03-22T11:41:29.705Z"}
{"msg":"After the above mentioned fixes, i get these results\n```\n```","username":"lovesh","ts":"2019-03-22T11:41:29.705Z"}
{"msg":"After the above mentioned fixes, i get these results\n```\ntype/crate       16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes\nsha256/ring       6480.78k    22624.92k    73405.18k   168008.36k   354885.63k   378066.26k\nsha512/ring       4161.88k    21209.98k    54757.03k   170201.77k   437086.89k   500012.37k\nsha256/openssl    8704.32k    32436.10k   103324.42k   210012.50k   361155.24k   417229.48k\nsha512/openssl    8395.29k    33503.38k    97857.79k   277687.64k   523638.10k   543484.59k\nsha256/sha2       1203.82k     3367.94k     7134.29k     9655.64k    10985.47k    11026.43k\nsha512/sha2        866.86k     3362.37k     8032.26k    14897.49k    18429.27k    19557.03k\nsha256/amcl        833.83k     1743.96k     3022.34k     3599.70k     3672.75k     4277.41k\nsha512/amcl        536.68k     1790.55k     3043.84k     5088.26k     5884.59k     5612.38k\nsha256/hashlib    1078.81k     3189.42k     6289.32k     9159.60k     9027.58k    10584.06k\nsha512/hashlib     871.42k     3047.79k     7736.41k    13400.41k    17795.75k    20032.17k\nsha256/ursa        786.53k     1876.07k     3289.26k     4079.96k     4658.52k     4331.97k\nsha512/ursa        602.50k     2218.77k     3805.10k     4895.74k     5593.27k     5703.29k\n```","username":"lovesh","ts":"2019-03-22T11:41:29.705Z"}
{"msg":"After the above mentioned fixes, i get these results\n```\nDebug mode\ntype/crate       16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes\nsha256/ring       6480.78k    22624.92k    73405.18k   168008.36k   354885.63k   378066.26k\nsha512/ring       4161.88k    21209.98k    54757.03k   170201.77k   437086.89k   500012.37k\nsha256/openssl    8704.32k    32436.10k   103324.42k   210012.50k   361155.24k   417229.48k\nsha512/openssl    8395.29k    33503.38k    97857.79k   277687.64k   523638.10k   543484.59k\nsha256/sha2       1203.82k     3367.94k     7134.29k     9655.64k    10985.47k    11026.43k\nsha512/sha2        866.86k     3362.37k     8032.26k    14897.49k    18429.27k    19557.03k\nsha256/amcl        833.83k     1743.96k     3022.34k     3599.70k     3672.75k     4277.41k\nsha512/amcl        536.68k     1790.55k     3043.84k     5088.26k     5884.59k     5612.38k\nsha256/hashlib    1078.81k     3189.42k     6289.32k     9159.60k     9027.58k    10584.06k\nsha512/hashlib     871.42k     3047.79k     7736.41k    13400.41k    17795.75k    20032.17k\nsha256/ursa        786.53k     1876.07k     3289.26k     4079.96k     4658.52k     4331.97k\nsha512/ursa        602.50k     2218.77k     3805.10k     4895.74k     5593.27k     5703.29k\n\nRelease mode\ntype/crate       16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes\nsha256/ring      16940.28k    58710.87k   165836.54k   293034.67k   386061.65k   362949.29k\nsha512/ring      10964.95k    51510.57k   148195.16k   257965.06k   433067.35k   350721.37k\nsha256/openssl   10773.19k    37381.93k   122451.63k   270134.95k   362023.59k   361545.73k\nsha512/openssl   11045.92k    42391.27k   132701.35k   319108.44k   547108.18k   511055.19k\nsha256/sha2       9951.30k    32143.85k    80350.38k   138736.98k   173970.77k   176166.23k\nsha512/sha2       9606.74k    43290.75k   114728.62k   223509.85k   313835.52k   318570.50k\nsha256/amcl      11248.54k    31827.82k    77894.23k   121241.60k   140910.59k   137505.45k\nsha512/amcl       9770.41k    40381.93k    85972.82k   148200.11k   185013.59k   190376.62k\nsha256/hashlib   11982.72k    38460.22k    92876.54k   151698.77k   183356.07k   180841.13k\nsha512/hashlib   11360.44k    45218.47k   113704.62k   198082.90k   288762.54k   271783.25k\nsha256/ursa      11356.35k    32162.56k    78629.46k   115703.13k   130080.77k   136921.09k\nsha512/ursa       9689.17k    43223.79k    88776.53k   144963.58k   198664.19k   201960.11k\n```","username":"lovesh","ts":"2019-03-22T11:41:29.705Z"}
{"msg":"Changes https://github.com/lovesh/ursaspeed/commit/4b75664f81e5b702599d1b695738ee36670413d4","username":"lovesh","ts":"2019-03-22T11:42:30.686Z"}
{"msg":"After the above mentioned fixes, i get these results\n```\nDebug mode\ntype/crate       16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes\nsha256/ring       6480.78k    22624.92k    73405.18k   168008.36k   354885.63k   378066.26k\nsha512/ring       4161.88k    21209.98k    54757.03k   170201.77k   437086.89k   500012.37k\nsha256/openssl    8704.32k    32436.10k   103324.42k   210012.50k   361155.24k   417229.48k\nsha512/openssl    8395.29k    33503.38k    97857.79k   277687.64k   523638.10k   543484.59k\nsha256/sha2       1203.82k     3367.94k     7134.29k     9655.64k    10985.47k    11026.43k\nsha512/sha2        866.86k     3362.37k     8032.26k    14897.49k    18429.27k    19557.03k\nsha256/amcl        833.83k     1743.96k     3022.34k     3599.70k     3672.75k     4277.41k\nsha512/amcl        536.68k     1790.55k     3043.84k     5088.26k     5884.59k     5612.38k\nsha256/hashlib    1078.81k     3189.42k     6289.32k     9159.60k     9027.58k    10584.06k\nsha512/hashlib     871.42k     3047.79k     7736.41k    13400.41k    17795.75k    20032.17k\nsha256/ursa        786.53k     1876.07k     3289.26k     4079.96k     4658.52k     4331.97k\nsha512/ursa        602.50k     2218.77k     3805.10k     4895.74k     5593.27k     5703.29k\n\nRelease mode\ntype/crate       16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes\nsha256/ring      16940.28k    58710.87k   165836.54k   293034.67k   386061.65k   362949.29k\nsha512/ring      10964.95k    51510.57k   148195.16k   257965.06k   433067.35k   350721.37k\nsha256/openssl   10773.19k    37381.93k   122451.63k   270134.95k   362023.59k   361545.73k\nsha512/openssl   11045.92k    42391.27k   132701.35k   319108.44k   547108.18k   511055.19k\nsha256/sha2       9951.30k    32143.85k    80350.38k   138736.98k   173970.77k   176166.23k\nsha512/sha2       9606.74k    43290.75k   114728.62k   223509.85k   313835.52k   318570.50k\nsha256/amcl      11248.54k    31827.82k    77894.23k   121241.60k   140910.59k   137505.45k\nsha512/amcl       9770.41k    40381.93k    85972.82k   148200.11k   185013.59k   190376.62k\nsha256/hashlib   11982.72k    38460.22k    92876.54k   151698.77k   183356.07k   180841.13k\nsha512/hashlib   11360.44k    45218.47k   113704.62k   198082.90k   288762.54k   271783.25k\nsha256/ursa      11356.35k    32162.56k    78629.46k   115703.13k   130080.77k   136921.09k\nsha512/ursa       9689.17k    43223.79k    88776.53k   144963.58k   198664.19k   201960.11k\n```","username":"lovesh","ts":"2019-03-22T11:53:24.075Z"}
{"msg":"What happens if you redo the test with the newly released her sick crate?","username":"MALodder","ts":"2019-03-22T13:49:48.532Z"}
{"msg":"What happens if you redo the test with the newly released ursa crate?","username":"MALodder","ts":"2019-03-22T13:49:48.532Z"}
{"msg":"Ursa API has changed as `digest` and `DigestAlgorithm` are no longer there so the benchmark code will not work","username":"lovesh","ts":"2019-03-22T14:14:04.950Z"}
{"msg":"looks like her sick crate is the substitute for newly released ursa crate?","username":"nage","ts":"2019-03-22T14:58:50.297Z"}
{"msg":"@nage, haha, I was confused by that too.","username":"hartm","ts":"2019-03-22T14:59:27.273Z"}
{"msg":"autocorrect problems","username":"MALodder","ts":"2019-03-22T14:59:43.068Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=JaQuwPkxRbcLJ3FXf) @lovesh From what I can see its all of the other benchmarks including openssl. The only one actually hashing is ursa","username":"MALodder","ts":"2019-03-22T15:01:33.538Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=JaQuwPkxRbcLJ3FXf","url":"https://chat.hyperledger.org/channel/ursa?msg=JaQuwPkxRbcLJ3FXf","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Here's what I get when I fix it so all the other benchmarks are actually hashing AND using ursa v0.1\n```\nsha256/ring      17313.03k    56066.01k   165082.37k   315636.74k   432908.97k   450494.46k\nsha512/ring      16341.88k    67587.56k   183288.23k   389507.41k   597797.55k   630177.79k\nsha256/openssl   13391.38k    46803.16k   138924.63k   282797.74k   417240.41k   431833.09k\nsha512/openssl   11972.57k    46821.33k   131259.82k   316226.22k   485690.03k   539858.26k\nsha256/sha2      13251.62k    45099.88k   114181.03k   187756.89k   241003.18k   245683.54k\nsha512/sha2      12560.65k    48158.27k   134296.75k   259143.68k   383117.99k   403390.46k\nsha256/amcl      12051.93k    39636.99k    88270.85k   141554.01k   171177.30k   174440.45k\nsha512/amcl      11758.99k    43109.16k    97264.55k   173623.64k   232306.01k   237775.53k\nsha256/hashlib   12906.95k    41143.25k   118983.51k   182531.41k   247302.83k   245186.56k\nsha512/hashlib   13465.79k    52570.18k   137019.39k   289247.23k   403879.25k   414313.13k\nsha256/ursa      13833.07k    45996.10k   106448.64k   191164.42k   244637.70k   251543.55k\nsha512/ursa      12413.11k    51946.15k   138451.97k   273639.77k   394452.99k   414558.89k\n```","username":"MALodder","ts":"2019-03-22T15:02:24.080Z"}
{"msg":"Here's what I get when I fix it so all the other benchmarks are actually hashing AND using ursa v0.1\n```\ntime: 2019-03-22 14:58:03.146650 UTC\nos: OSX 10.14.3\nrustc: 1.35.0 (nightly channel)\nhostname: Michaels-MBP.localdomain\nThe 'numbers' are in 1000s of bytes per second processed.\ntype/crate       16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes  16384 bytes\nsha256/ring      17313.03k    56066.01k   165082.37k   315636.74k   432908.97k   450494.46k\nsha512/ring      16341.88k    67587.56k   183288.23k   389507.41k   597797.55k   630177.79k\nsha256/openssl   13391.38k    46803.16k   138924.63k   282797.74k   417240.41k   431833.09k\nsha512/openssl   11972.57k    46821.33k   131259.82k   316226.22k   485690.03k   539858.26k\nsha256/sha2      13251.62k    45099.88k   114181.03k   187756.89k   241003.18k   245683.54k\nsha512/sha2      12560.65k    48158.27k   134296.75k   259143.68k   383117.99k   403390.46k\nsha256/amcl      12051.93k    39636.99k    88270.85k   141554.01k   171177.30k   174440.45k\nsha512/amcl      11758.99k    43109.16k    97264.55k   173623.64k   232306.01k   237775.53k\nsha256/hashlib   12906.95k    41143.25k   118983.51k   182531.41k   247302.83k   245186.56k\nsha512/hashlib   13465.79k    52570.18k   137019.39k   289247.23k   403879.25k   414313.13k\nsha256/ursa      13833.07k    45996.10k   106448.64k   191164.42k   244637.70k   251543.55k\nsha512/ursa      12413.11k    51946.15k   138451.97k   273639.77k   394452.99k   414558.89k\n```","username":"MALodder","ts":"2019-03-22T15:02:24.080Z"}
{"msg":"I don't know if hashing all `0`'s has anything to do with the benchmark either","username":"MALodder","ts":"2019-03-22T15:06:57.549Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=oCAQmynwhMNWWG9Dx) @MALodder Yes, none of them except ursa were hashing. The benchmarks i posted had all libs hashing.","username":"lovesh","ts":"2019-03-22T15:11:50.447Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=oCAQmynwhMNWWG9Dx","url":"https://chat.hyperledger.org/channel/ursa?msg=oCAQmynwhMNWWG9Dx","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@lovesh I saw you added a finish (or equivalent step) for each digest. in a PR, which I merged. Thanks!\n\nI would like to try it again with the latest Ursa. But I see the API has completely changed, so I need to reverse engineer it again and discover the new API.","username":"danintel","ts":"2019-03-22T16:23:33.326Z"}
{"msg":"@danintel I can merge my changes to yours since I've already done it","username":"MALodder","ts":"2019-03-22T16:27:02.565Z"}
{"msg":"I'll submit a PR shortly","username":"MALodder","ts":"2019-03-22T16:27:09.673Z"}
{"msg":"Marta and I just had a call with some folks from the crypto products team at Gemalto...trying to lure them in to the Ursa clan :-)","username":"JonGeater","ts":"2019-03-25T12:02:30.173Z"}
{"msg":"Thats great news as Gemalto and Finargo are the biggest players in the Enterprise Identity space","username":"VipinB","ts":"2019-03-26T12:11:02.800Z"}
{"msg":"@MALodder where did you send the crate author invite?","username":"dhuseby","ts":"2019-03-27T16:38:14.491Z"}
{"msg":"to your linux foundation email","username":"MALodder","ts":"2019-03-27T17:22:35.465Z"}
{"msg":"Hi, I have a question about delegatable credentials. I think Brent asked during the call whether it would be possible to use DIDs instead of public keys, the answer was difficult to prove control of did anonymously. But how about the use of a DID for the issuer of a delegatable credential? They don't need to prove anonymous control of a key if I understand correctly.  Would that be possible, if it would it seems ideal as when verifying presentations, you would be able to resolve DID to keys in usual way. ","username":"wip-abramson","ts":"2019-03-28T12:34:18.339Z"}
{"msg":"@MALodder @dhuseby  do we have a jira board for URSA? Link?","username":"cam-parra","ts":"2019-03-28T13:45:16.959Z"}
{"msg":"yes we do","username":"MALodder","ts":"2019-03-28T13:45:31.068Z"}
{"msg":"hold on","username":"MALodder","ts":"2019-03-28T13:45:33.852Z"}
{"msg":"https://jira.hyperledger.org/projects/URSA/issues/URSA-5?filter=allopenissues","username":"MALodder","ts":"2019-03-28T13:46:13.310Z"}
{"msg":"Thank you!","username":"cam-parra","ts":"2019-03-28T14:18:00.651Z"}
{"msg":"@rjones  it looks like URSA-5 on the jira board is complete. Could you take URSA-6?","username":"cam-parra","ts":"2019-03-28T14:20:14.562Z"}
{"msg":"Has joined the channel.","username":"rjones","ts":"2019-03-28T14:20:15.457Z","type":"uj"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=Sin5haWCEEADioapC) @wip-abramson The problem with DIDs (delegatable credentials or otherwise) is that they are not cryptographically linked to the credential or public key. But if the DID was somehow generated from public key like first n bytes of public key or the DID was some pre-decided function of secret key, then you can prove the issuance of credential by a DID. The proving mechanism i can think of are generic proving systems like SNARKs or Bulletproofs","username":"lovesh","ts":"2019-03-28T15:26:51.228Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=Sin5haWCEEADioapC","url":"https://chat.hyperledger.org/channel/ursa?msg=Sin5haWCEEADioapC","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=Sin5haWCEEADioapC) @wip-abramson The problem with DIDs (delegatable credentials or otherwise) is that they are not cryptographically linked to the credential or public key. But if the DID was somehow generated from public key like first n bytes of public key or the DID was some pre-decided function of public key/secret key, then you can prove the issuance of credential by a DID. The proving mechanism i can think of are generic proving systems like SNARKs or Bulletproofs","username":"lovesh","ts":"2019-03-28T15:26:51.228Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=Sin5haWCEEADioapC","url":"https://chat.hyperledger.org/channel/ursa?msg=Sin5haWCEEADioapC","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@cam-parra https://jira.hyperledger.org/projects/URSA/issues/URSA-6?filter=allopenissues","username":"dhuseby","ts":"2019-03-28T15:45:03.504Z"}
{"msg":"If there is no opposition we should enable 2 maintainer review per PR enforcement on master and stable branches ","username":"cam-parra","ts":"2019-03-28T15:58:50.905Z"}
{"msg":"@rjones how does one create a new repository in the hyperledger organization? ","username":"cam-parra","ts":"2019-03-28T18:41:43.865Z"}
{"msg":"sending a mail to helpdesk@hyperledger.org","username":"rjones","ts":"2019-03-28T22:16:03.136Z"}
{"msg":"let them know who the committers are, etc","username":"rjones","ts":"2019-03-28T22:16:21.080Z"}
{"msg":"@cam-parra ","username":"rjones","ts":"2019-03-28T22:16:47.110Z"}
{"msg":"Has joined the channel.","username":"daijianw","ts":"2019-03-29T08:27:10.154Z","type":"uj"}
{"msg":"Has joined the channel.","username":"JulianGordonHK","ts":"2019-03-29T10:06:46.636Z","type":"uj"}
{"msg":"@cam-parra what would the new repo be for?","username":"Dan","ts":"2019-04-01T17:29:07.130Z"}
{"msg":"python ursa ","username":"cam-parra","ts":"2019-04-01T17:32:05.906Z"}
{"msg":"python ursa ... basically the bls wrapper for plenum to consume. Had a bit of miscommunication so I will shared the fixed link tomorrow ","username":"cam-parra","ts":"2019-04-01T17:32:05.906Z"}
{"msg":"Has left the channel.","username":"rjones","ts":"2019-04-01T18:13:19.132Z","type":"ul"}
{"msg":"did anyone take notes for the March 6th meeting? Particularly for the Anon Creds 2.0 paper discussion?\nAgenda is listed here: https://wiki.hyperledger.org/display/ursa/2019-03-06+Meeting+Agenda\nBut there aren't any associated minutes published","username":"Dan","ts":"2019-04-01T19:24:46.685Z"}
{"msg":"@Dan I can fill you in on that discussion if you want because we've been covering it a lot since then in the Sovrin Crypto Calls.","username":"MALodder","ts":"2019-04-01T19:39:37.200Z"}
{"msg":"@Dan welcome back to the free world","username":"MALodder","ts":"2019-04-01T19:39:46.390Z"}
{"msg":"Gracias! :D","username":"Dan","ts":"2019-04-01T19:39:53.614Z"}
{"msg":"@Dan I would highly recommend attending the Sovrin crypto calls if you're interested in that, since that is where we typically discuss Anon Creds.  They are Tuesday mornings at 7:00 AM pacific.","username":"hartm","ts":"2019-04-02T01:26:03.238Z"}
{"msg":"See you both in the morning, we are planning to discuss delegatable credentials, proving to multiple parties, and multi issuer credentials","username":"MALodder","ts":"2019-04-02T02:09:04.042Z"}
{"msg":"@hartm thanks for all your input on the anoncreds 2.0 paper, I'm working on the next revisions still, but have more time now that I'm back from traveling","username":"MALodder","ts":"2019-04-02T02:09:43.222Z"}
{"msg":"@MALodder where can I find details on the Crypto call for this morning?","username":"twshelton","ts":"2019-04-02T13:11:27.490Z"}
{"msg":"@twshelton Description:Agenda: https://docs.google.com/document/d/1M3zgsRoOxlkjNPbDp4_7YWxuqO2EyefOT3Bt7ZgGIDY/edit?usp=sharing\n\nJoin from PC, Mac, Linux, iOS or Android: https://zoom.us/j/567114224","username":"cam-parra","ts":"2019-04-02T13:38:43.644Z"}
{"msg":"thanks","username":"twshelton","ts":"2019-04-02T13:39:29.671Z"}
{"msg":"@MALodder thanks for writing the quarterly report.","username":"Dan","ts":"2019-04-02T15:40:50.799Z"}
{"msg":"NP","username":"MALodder","ts":"2019-04-02T15:55:57.697Z"}
{"msg":"@Dan it would be good if you and your team state what you would like to see out of zmix","username":"MALodder","ts":"2019-04-02T16:00:30.123Z"}
{"msg":"in a nutshell, private transactions, but I will try to get to a fuller statement on that with the rest of sawtooth","username":"Dan","ts":"2019-04-02T16:01:47.838Z"}
{"msg":"@Dan it would also be awesome if you all could go over the new, modular APIs we are proposing.  We don't want to do anything that catastrophically breaks sawtooth.","username":"hartm","ts":"2019-04-02T17:09:12.955Z"}
{"msg":"Additionally, explicitly defining what you mean by \"private transactions\" would also be useful, but it sounds like you're working on that one.","username":"hartm","ts":"2019-04-02T17:10:01.008Z"}
{"msg":"I just read the Delegatable credentials 0.1 paper by Dmitry and @lovesh. That was way more digestible then any other crypto paper I ever read!","username":"kdenhartog","ts":"2019-04-02T17:38:30.542Z"}
{"msg":"I just read the Delegatable credentials 0.1 paper by Dmitry and @lovesh  That was way more digestible then any other crypto paper I ever read!","username":"kdenhartog","ts":"2019-04-02T17:38:30.542Z"}
{"msg":"https://drive.google.com/file/d/1ZctrCCQl4v8m6Iz6MTIYSI94nxAd9ElP/view","username":"kdenhartog","ts":"2019-04-02T17:39:13.748Z"}
{"msg":"Specifically the numbering for the math and the notation section were super useful.","username":"kdenhartog","ts":"2019-04-02T17:39:43.905Z"}
{"msg":"Specifically the numbering for steps with the math and the notation section were super useful.","username":"kdenhartog","ts":"2019-04-02T17:39:43.905Z"}
{"msg":"Interesting paper https://eprint.iacr.org/2019/330.pdf","username":"MALodder","ts":"2019-04-03T02:48:36.648Z"}
{"msg":"NIKE!!","username":"MALodder","ts":"2019-04-03T02:48:48.788Z"}
{"msg":"but better","username":"MALodder","ts":"2019-04-03T02:49:02.601Z"}
{"msg":"@MALodder You got me excited there!  It's not NIKE (just closer to \"round-optimal\" KE--there is interaction).","username":"hartm","ts":"2019-04-03T03:10:25.471Z"}
{"msg":"@here Just a reminder of tomorrow's meeting.  Hope to talk to many of you tomorrow!  Thanks!","username":"hartm","ts":"2019-04-03T03:10:39.849Z"}
{"msg":"@hartm sorry about that, they mention NIKE near the intro. I wonder if the shoe company knows they're wanted in the crypto space","username":"MALodder","ts":"2019-04-03T03:11:45.395Z"}
{"msg":"@MALodder No worries.  Definitely the lesser known use of that word...","username":"hartm","ts":"2019-04-03T03:12:59.225Z"}
{"msg":"@hartm I like the idea, I'm fuzzy about the practical part whether it really is or not","username":"MALodder","ts":"2019-04-03T03:13:38.305Z"}
{"msg":"@MALodder There isn't a really compelling reason to use isogeny-based crypto right now.  Its main interest is post-quantum cryptography in the event that lattice-based schemes somehow get broken.","username":"hartm","ts":"2019-04-03T03:51:34.137Z"}
{"msg":"In that sense, it's a great research topic, but maybe not so useful for implementations.","username":"hartm","ts":"2019-04-03T03:51:53.642Z"}
{"msg":"Some say SSI based crypto is a drop in replacement for ECC with bigger keys. That's not everything but how true is that","username":"MALodder","ts":"2019-04-03T03:55:04.254Z"}
{"msg":"Personally, I'd rather use lattice-based key exchanges for post-quantum key exchange.  This is probably the opinion of most people in the crypto community.  It will be interesting to see what NIST does going forward.","username":"hartm","ts":"2019-04-03T05:34:36.287Z"}
{"msg":"I'm on the community zoom link but all alone","username":"Dan","ts":"2019-04-03T13:06:17.075Z"}
{"msg":"or is this a timezone thing... hmm..","username":"Dan","ts":"2019-04-03T13:06:39.784Z"}
{"msg":"@hartm as you and @MALOdder know NIST was supposed to show up at RWC, but they could not due to govt shutdown to announce winners or candidates of post-quantum competition... ","username":"VipinB","ts":"2019-04-03T13:19:52.833Z"}
{"msg":"@hartm as you and @MALodder know NIST was supposed to show up at RWC, but they could not due to govt shutdown to announce winners or candidates of post-quantum competition...  I have to look at their latest announcements on that front are!","username":"VipinB","ts":"2019-04-03T13:19:52.833Z"}
{"msg":"@hartm as you and @MALodder know NIST was supposed to show up at RWC, but they could not due to govt shutdown to announce winners or candidates of post-quantum competition...  I have to look at their latest announcements on that front!","username":"VipinB","ts":"2019-04-03T13:19:52.833Z"}
{"msg":"@VipinB They made the announcements soon after RWC.","username":"hartm","ts":"2019-04-03T13:49:17.419Z"}
{"msg":"I guess this \"narrows\" the field to 26 candidates https://csrc.nist.gov/publications/detail/nistir/8240/final","username":"VipinB","ts":"2019-04-03T13:55:00.053Z"}
{"msg":"https://wiki.hyperledger.org/pages/resumedraft.action?draftId=6428850&draftShareId=8cdc4ab4-a04e-47ba-9dbe-43e566183fad","username":"hartm","ts":"2019-04-03T14:03:50.502Z"}
{"msg":"Oh no! Incubation vs. Active! again!","username":"VipinB","ts":"2019-04-03T14:07:50.642Z"}
{"msg":"Elevator is going to the 66 floor","username":"VipinB","ts":"2019-04-03T14:36:03.545Z"}
{"msg":"I just updated my line on the minutes from yesterday: Jon- has concerns about using OpenSSL (or any stateful crypto back-end):\nIf we wrap through to OpenSSL for the crypto implementation of SM2, but then to intel built-ins for AES, and some HSM or wallet for ECC, then our overall application will be swimming with loaded states, logins, contexts, sessions...which need to be managed carefully, finalised, destroyed and so on at the right time.  If people have concerns about tainting then I think it's much more important to ensure we keep these various memory spaces clean and isolated rather than worrying about particular crypto implementations at the far end of one particular API call.","username":"JonGeater","ts":"2019-04-04T10:03:48.135Z"}
{"msg":"ed25519","username":"silasdavis","ts":"2019-04-04T14:15:18.933Z"}
{"msg":"ed25519","username":"silasdavis","ts":"2019-04-04T14:15:18.933Z"}
{"msg":"@JonGeater I agree","username":"dhuseby","ts":"2019-04-05T00:27:42.832Z"}
{"msg":"the OpenSSL route is only a temporary measure until we run the regulatory approval gauntlet","username":"dhuseby","ts":"2019-04-05T00:28:01.824Z"}
{"msg":"which may be never","username":"dhuseby","ts":"2019-04-05T00:28:07.738Z"}
{"msg":"I see the OpenSSL wrapping as \"almost never going to be compiled\"","username":"dhuseby","ts":"2019-04-05T00:28:27.611Z"}
{"msg":"I think that's a good reason we should turn our attention to zmix. There's a lot of things we could do that would be beneficial, but everything has not only initial cost but long term costs in managing complexity and maintenance. ","username":"Dan","ts":"2019-04-05T13:56:49.859Z"}
{"msg":"@dan I agree that we should go to zmix, however, there are needs that Indy has for encryption were WebCrypto/pick your crypto library doesn't meet the needs","username":"MALodder","ts":"2019-04-08T15:49:35.116Z"}
{"msg":"it would be nice to have the APIs defined and then exact implementations can be expanded later","username":"MALodder","ts":"2019-04-08T15:49:59.581Z"}
{"msg":"quick report on ffi-support:\n\nSeems easy to implement and do ffi and solves most of the issues I've had in the past. Lots of pluses in that statement.\nHowever, here are some downsides:\n1- Documentation is limited\n2- Examples are okay but also limited\n3- ByteBuffer, rust coder has to use unsafe to extract the pointers and convert to a slice right now. Need to find a better and easier way to use it.","username":"MALodder","ts":"2019-04-08T20:14:00.627Z"}
{"msg":"we could move forward with the rfc recommending protobufs for complex types. then try out the ffi crate and if that proves worthwhile we could update the RFC to be more prescriptive requiring that crate.","username":"Dan","ts":"2019-04-08T22:43:22.511Z"}
{"msg":"I prefer flatbuffers to protobuffers but it may not be as available ","username":"MALodder","ts":"2019-04-08T23:10:22.517Z"}
{"msg":"https://google.github.io/flatbuffers/flatbuffers_benchmarks.html some interesting numbers. also some remarks on Cap'n Proto","username":"VipinB","ts":"2019-04-09T01:28:48.366Z"}
{"msg":"Anyone have any experience calling C from golang? I’ve done minimal work with it","username":"MALodder","ts":"2019-04-09T02:34:14.586Z"}
{"msg":"We had a project where C functions were called from GoLang","username":"arsulegai","ts":"2019-04-09T05:21:15.189Z"}
{"msg":"Is there specific thing you're looking at?","username":"arsulegai","ts":"2019-04-09T05:22:03.781Z"}
{"msg":"yes","username":"MALodder","ts":"2019-04-09T14:02:38.796Z"}
{"msg":"Please let me know if I can be of help here","username":"arsulegai","ts":"2019-04-09T15:13:53.708Z"}
{"msg":"the main thing I'm interested in is trying to call rust code that I've exposed over the FFI from golang","username":"MALodder","ts":"2019-04-09T15:20:46.711Z"}
{"msg":"but I'm not sure I've done it properly from golang","username":"MALodder","ts":"2019-04-09T15:20:55.651Z"}
{"msg":"I've followed it according to this project https://github.com/medimatrix/rust-plus-golang","username":"MALodder","ts":"2019-04-09T15:22:54.070Z"}
{"msg":"As promised for your consumption, a comparison of apache milagro vs ZCash's pairing library for the BLS12-381 curve for the BLS signature\n\nhttps://github.com/mikelodder7/bls12-381-comparison","username":"MALodder","ts":"2019-04-10T05:43:55.544Z"}
{"msg":"https://pbs.twimg.com/media/D1pN0pJVYAAa_ht.jpg","username":"MALodder","ts":"2019-04-10T05:45:33.775Z"}
{"msg":"I welcome suggestions or changes to the code to see if any of the implementations can run any faster","username":"MALodder","ts":"2019-04-10T05:46:15.628Z"}
{"msg":"","username":"MALodder","ts":"2019-04-10T05:46:41.928Z","attachments":[{"type":"file","title":"D1pN0pJVYAAa_ht.jpg","title_link":"/file-upload/sdno4CTywXAuSn3eQ/D1pN0pJVYAAa_ht.jpg","image_url":"/file-upload/sdno4CTywXAuSn3eQ/D1pN0pJVYAAa_ht.jpg","image_type":"image/jpeg","image_size":131560,"url":"/file-upload/sdno4CTywXAuSn3eQ/D1pN0pJVYAAa_ht.jpg","remote":false,"fileId":"sdno4CTywXAuSn3eQ","fileName":"D1pN0pJVYAAa_ht.jpg"}]}
{"msg":"Regarding https://github.com/hyperledger/ursa-rfcs/pull/8, it sounds like we aren't ready to be more prescriptive on e.g. protobufs or the FFI library. I'm fine with that. So the only open I see is correcting the link for the naming conventions.\n@amundson and @manu haven't weighed in yet and may have other feedback.","username":"Dan","ts":"2019-04-10T18:13:03.559Z"}
{"msg":"I want to avoid being overly prescriptive because it depends on the language and use case. Some items are better serialized to flatbuffers or protobuffers and others its preferred to have a pointer handle","username":"MALodder","ts":"2019-04-10T19:13:45.958Z"}
{"msg":"Like wasm doesn’t support pointers so you have to use serialized structures ","username":"MALodder","ts":"2019-04-10T19:14:13.262Z"}
{"msg":"@Dan interesting topic here at ZKproof https://eprint.iacr.org/2019/191.pdf. Could Sawtooth takes some of the ideas from this?","username":"MALodder","ts":"2019-04-11T00:06:53.469Z"}
{"msg":"Anonymous consumers for smart contracts","username":"MALodder","ts":"2019-04-11T00:07:30.498Z"}
{"msg":"Zether does not work for any arbitrary smart contract but only as a cryptocurrency on a ledger with an account model (Ethereum) and even then its not clean. There is a short summary of which also mentions the challenges https://medium.com/coinmonks/notes-on-zether-towards-privacy-in-a-smart-contract-world-6c4333f975d ","username":"lovesh","ts":"2019-04-11T05:53:18.402Z"}
{"msg":"The presenter was saying it could possibly be applied to any smart contract ledger that supports tokens.","username":"MALodder","ts":"2019-04-11T13:06:18.267Z"}
{"msg":"Doesn’t mean it couldn’t work. The idea is interesting ","username":"MALodder","ts":"2019-04-11T13:07:10.424Z"}
{"msg":"I’m more interested in the idea of encrypted values and verification ","username":"MALodder","ts":"2019-04-11T13:07:41.203Z"}
{"msg":"I just found this https://www.iden3.io/post/websnark-zksnarks-generation-browser-now-fast-and-easy","username":"kdenhartog","ts":"2019-04-11T14:07:31.547Z"}
{"msg":"Seemed like a cool repo that may be interesting to people here","username":"kdenhartog","ts":"2019-04-11T14:07:47.890Z"}
{"msg":"thanks @MALodder!  As it depends on bullet proofs, I looked for a quick synopsis to refresh myself. Google offered many helpful links all like this: https://bit.ly/2v84MSh","username":"Dan","ts":"2019-04-11T16:13:05.512Z"}
{"msg":"It's pretty hard to hit numbers that low. Definitely a mathematical feat. ","username":"Dan","ts":"2019-04-11T16:14:25.649Z"}
{"msg":"Ha never saw that movie ","username":"MALodder","ts":"2019-04-11T16:41:29.472Z"}
{"msg":"Has joined the channel.","username":"rjones","ts":"2019-04-13T00:14:41.656Z","type":"uj"}
{"msg":"Could I ask Ursa maintainers to please join https://lists.hyperledger.org/g/maintainers ? I'd appreciate it.","username":"rjones","ts":"2019-04-13T00:14:50.829Z"}
{"msg":"FYI I can't make the sovrin call tomorrow, but I will review the minutes. ","username":"Dan","ts":"2019-04-13T21:51:43.635Z","attachments":[]}
{"msg":"@Dan the call is on Tuesday if that helps, but if you can't make it we understand","username":"MALodder","ts":"2019-04-15T13:47:34.605Z"}
{"msg":"That's weird. I sent that last week. Must have queued up on my phone or something. :shrug:  ","username":"Dan","ts":"2019-04-15T14:17:37.797Z"}
{"msg":"@lovesh nice summary! I think the economic impediments to deploying on ethereum mainnet, aren't necessarily an issue for something like a permissioned sawtooth network.\nThe anonymity limitation, however is awkward. I'm skeptical about meaningful anonymity in a permissioned/private blockchain anyway though.\nThat said I do like the confidentiality model (for hiding the account amounts). One thing I'm not comfortable with, though, is the difficulty for a user in knowing their own balance. Specifcally they only know g^b. On the one hand it's good that nothing is transparent on ledger (like if private keys get compromised), on the other brute forcing g^b seems yucky. Does anyone have thoughts on that? ","username":"Dan","ts":"2019-04-15T14:43:28.332Z"}
{"msg":" @Dan Anonymity is challenging in general (even ZCash is not without its issues given its sometimes limited anonymity set).  One thing I've been intermittently working on (without much success, unfortunately) is trying to adapt something like Riposte (https://www.henrycg.com/pubs/oakland15riposte/) to a permissioned blockchain setting.  The general paradigm is almost exactly what we want, but some of the tools used don't scale and the security models with the existing tools aren't good for blockchain (i.e. security only against one malicious server).","username":"hartm","ts":"2019-04-15T17:34:39.210Z"}
{"msg":"I have been discussing this with Mike some.","username":"hartm","ts":"2019-04-15T17:34:51.632Z"}
{"msg":"If you're interested, we can talk further, but there is a lot of crypto theory that needs to be worked out around this to have some kind of (semi-) efficient solution.","username":"hartm","ts":"2019-04-15T17:35:21.731Z"}
{"msg":"@hartm what conferences/journals were you suggesting we try to publish for AnonCreds 2.0?","username":"MALodder","ts":"2019-04-15T18:27:37.328Z"}
{"msg":"Has joined the channel.","username":"cam-p 1","ts":"2019-04-15T18:47:48.267Z","type":"uj"}
{"msg":"@MALodder I'm not sure at this point, but probably a security conference.  It's a little premature though--you'll want an implementation, security proof, and performance results before you submit.","username":"hartm","ts":"2019-04-15T18:51:44.957Z"}
{"msg":"right, just wanted to know the options and whether you would want it published beforehand but it sounds like that's not the case","username":"MALodder","ts":"2019-04-15T18:56:02.471Z"}
{"msg":"@MALodder For a conference paper on something like this, you'd probably want an implementation (for performance purposes), but it would not necessarily need to be a production-ready implementation.  I'd imagine you could move from \"test implementation\" to \"production implementation\" during the time that the paper was in the review process.   ","username":"hartm","ts":"2019-04-16T02:42:04.314Z"}
{"msg":"Anyone have any objections to releasing ursa 0.1.1?","username":"MALodder","ts":"2019-04-16T17:17:57.356Z"}
{"msg":"I submitted a PR mostly minor things related to namespacing the errors for indy","username":"MALodder","ts":"2019-04-16T17:18:17.392Z"}
{"msg":"with the release of ursa 0.1.1, Indy can now use it","username":"MALodder","ts":"2019-04-16T17:18:42.155Z"}
{"msg":"pipeline for 0.1.1 results are [here](https://gitlab.sovrin.org/sovrin-foundation/ursa/pipelines/7)","username":"MALodder","ts":"2019-04-16T17:19:05.850Z"}
{"msg":"CI results for indy are [here](https://github.com/hyperledger/indy-sdk/pull/1578)","username":"MALodder","ts":"2019-04-16T17:19:45.610Z"}
{"msg":"@MALodder No, but do we need to follow any particular release protocols?  Did we have anything in place for minor \"hundredth\" releases?","username":"hartm","ts":"2019-04-16T18:09:33.720Z"}
{"msg":"I've just been making sure it passes the CI/CD pipeline then asking about it to everyone","username":"MALodder","ts":"2019-04-16T18:10:10.385Z"}
{"msg":"@hartm I've been thinking about other names for the signature types and I thought that Schnor sigs is fitting","username":"MALodder","ts":"2019-04-16T18:25:57.304Z"}
{"msg":"@hartm I've been thinking about other names for the signature types and I thought that Schnorr sigs is fitting","username":"MALodder","ts":"2019-04-16T18:25:57.304Z"}
{"msg":"@here Just a reminder for tomorrow's meeting!  Hope to talk to many of you tomorrow.  Thanks!","username":"hartm","ts":"2019-04-17T00:50:15.864Z"}
{"msg":"agenda link: https://wiki.hyperledger.org/pages/viewpage.action?pageId=9109744","username":"Dan","ts":"2019-04-17T14:03:41.433Z"}
{"msg":"https://github.com/hyperledger/ursa/pull/23","username":"Dan","ts":"2019-04-17T14:06:14.091Z"}
{"msg":"Hi,  I can't edit the agenda. Wondering if someone can add the following to the agenda or minutes as appropriate: \"Discussed foreign function interface for lib-ursa, and interface to Fabric through golang. We have agreement at this stage to try different alternatives and learn which is best for our needs. Mike, Maryam, DH  and DB to pursue next steps\" ","username":"david.b.crypto","ts":"2019-04-17T15:13:24.426Z"}
{"msg":"I added it to the agenda as I can't find the minutes link","username":"MALodder","ts":"2019-04-17T15:17:58.584Z"}
{"msg":"I added it to the minutes","username":"MALodder","ts":"2019-04-17T15:19:04.693Z"}
{"msg":"@david.b.crypto you should be able to edit in the future if you login to the wiki with your LF ID.","username":"Dan","ts":"2019-04-17T16:01:38.578Z"}
{"msg":"thanks dan!","username":"david.b.crypto","ts":"2019-04-17T16:02:21.204Z"}
{"msg":"Has joined the channel.","username":"marimeireles","ts":"2019-04-17T17:21:48.235Z","type":"uj"}
{"msg":"hi @hartm I want to contribute to hyperledger through the SoC program. I chose the project that I have to integrate ursa to iroha. do you think I can join the meeting you're having? I wouldn't really say anything just watch to see if I can catch some things! if it's not allowed it's totally fine too. thanks! :)","username":"marimeireles","ts":"2019-04-17T17:31:13.514Z"}
{"msg":"@marimeireles all of the meetings are public - please join!","username":"rjones","ts":"2019-04-17T17:32:35.471Z"}
{"msg":"you don't need to ask permission, promise. We want everyone","username":"rjones","ts":"2019-04-17T17:32:49.104Z"}
{"msg":"hi @rjones! alright! thanks! :D","username":"marimeireles","ts":"2019-04-17T17:34:48.708Z"}
{"msg":"if you look in the community calendar on the wiki, there should be a list of meetings you can join.","username":"rjones","ts":"2019-04-17T17:35:57.994Z"}
{"msg":"@marimeireles https://wiki.hyperledger.org/display/HYP/Calendar+of+Public+Meetings","username":"rjones","ts":"2019-04-17T17:36:24.651Z"}
{"msg":"the times are GMT, so be sure to add them to your personal calendar in the correct time zone ;)","username":"rjones","ts":"2019-04-17T17:37:20.744Z"}
{"msg":"nice! thanks again @rjones ","username":"marimeireles","ts":"2019-04-17T17:49:15.487Z"}
{"msg":"@hartm I can help you write the aggregated/multi/threshold signatures API. We can use what I learned from this project [here](https://github.com/mikelodder7/bls12-381-comparison/blob/master/src/main.rs)","username":"MALodder","ts":"2019-04-17T20:19:36.035Z"}
{"msg":"@MALodder That looks like a pretty nice interface.  We'll want to modify it so that we can use different schemes, obviously, but it's a good start.","username":"hartm","ts":"2019-04-17T20:40:57.756Z"}
{"msg":"I'll write up a formal interface sometime over the next couple of days and then you can tell me how I got the Rust stuff wrong ;)","username":"hartm","ts":"2019-04-17T20:42:00.924Z"}
{"msg":"Hey @MALodder  @dhuseby I believe the python wrapper is ready to move to hyperledger. I would need your assistance to do so","username":"cam-parra","ts":"2019-04-19T19:32:41.087Z"}
{"msg":"https://github.com/lanius-shrike/python-ursa","username":"cam-parra","ts":"2019-04-19T19:32:54.192Z"}
{"msg":"I am working out the problems with gitlab but it should at least be tested by next week","username":"cam-parra","ts":"2019-04-19T19:37:25.027Z"}
{"msg":"Do we want to have separate repos for the language bindings?","username":"dhuseby","ts":"2019-04-19T20:05:11.299Z"}
{"msg":"If we go with generated bindings using protobufs we will want only one set of the protobuf files. ","username":"dhuseby","ts":"2019-04-19T20:05:44.356Z"}
{"msg":"Maybe we have a repo just for the protobuf files? Then libursa can pull it in as a submodule. The python-Ursa repo can do the same. ","username":"dhuseby","ts":"2019-04-19T20:06:42.106Z"}
{"msg":"@cam-parra does the python-ursa project pull in and build libursa?","username":"dhuseby","ts":"2019-04-19T20:07:24.465Z"}
{"msg":"If it does then we can keep the protobuf files in libursa and not have a separate repo for them. ","username":"dhuseby","ts":"2019-04-19T20:07:57.836Z"}
{"msg":"The RFC I submitted is for the bindings to be in ursa and the language idiomatic libraries are in separate repos","username":"MALodder","ts":"2019-04-19T20:18:58.048Z"}
{"msg":"@cam-parra please run the DCO check tool first to make my life easier 😀","username":"rjones","ts":"2019-04-19T21:39:28.948Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=HJqjNeIwOFcchfhL98) ```*$ lftools dco check\nChecking commits in branch origin/master for commits missing DCO...\nERROR: Commit 65eb21646eeb212d7d2cd743a14bed107a730876 is missing Signed-off-by line.\nERROR: Commit 677ac9b9c60ce33a67883e57cabb7216ae6e4728 is missing Signed-off-by line.\n*```","username":"rjones","ts":"2019-04-19T22:02:01.656Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=HJqjNeIwOFcchfhL98","url":"https://chat.hyperledger.org/channel/ursa?msg=HJqjNeIwOFcchfhL98","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@rjones Does that DCO check look for merges? Most merges or PRs accepted don't include (or require) a DCO","username":"cam-parra","ts":"2019-04-20T18:29:39.606Z"}
{"msg":"@cam-parra it does not. Feel free to grab it and try it yourself https://gist.github.com/ryjones/07ac650dcc5e83c91e8308ec98bacda4 you can also do a \"git log (hash)\" to see the exact commit","username":"rjones","ts":"2019-04-21T21:04:35.586Z"}
{"msg":"depending on what your workflow is like you can reduce the amount of merges by rebasing as you go.  irrespective of DCO checking sometimes that makes for a cleaner history that makes it easier for reviewers too.","username":"Dan","ts":"2019-04-22T00:41:04.922Z"}
{"msg":"```(lftools) mbp-2:python-ursa ry$ git log -1 65eb21646eeb212d7d2cd743a14bed107a730876\ncommit 65eb21646eeb212d7d2cd743a14bed107a730876\nAuthor: Cam Parra <caeparra@gmail.com>\nDate:   Thu Mar 21 16:25:45 2019 -0600\n\n    add readme.md\n(lftools) mbp-2:python-ursa ry$ git log -1 677ac9b9c60ce33a67883e57cabb7216ae6e4728\ncommit 677ac9b9c60ce33a67883e57cabb7216ae6e4728\nAuthor: Cam Parra <caeparra@gmail.com>\nDate:   Thu Mar 21 15:31:13 2019 -0600\n\n    license added\n```","username":"rjones","ts":"2019-04-22T02:18:57.899Z"}
{"msg":"Merge commits are not required to have a DCO. DCO will pass if a merge commit doesn’t have the Signed-off-by","username":"MALodder","ts":"2019-04-22T12:28:19.780Z"}
{"msg":"Hi, I had a conflict with the Sovrin crypto meeting this morning. is there a recording?","username":"Dan","ts":"2019-04-23T15:57:00.061Z"}
{"msg":"unfortunately no","username":"MALodder","ts":"2019-04-23T16:51:51.078Z"}
{"msg":"if you want I can send you the meeting notes","username":"MALodder","ts":"2019-04-23T16:52:09.473Z"}
{"msg":"that would be cool thanks!","username":"Dan","ts":"2019-04-23T18:39:03.882Z"}
{"msg":"My take on zkproof standards workshop. There are some links to some of the talks and other resources. https://medium.com/@vipinsun/zkproof-standards-workshop-ii-1b1b1568eb14","username":"VipinB","ts":"2019-04-23T18:49:21.840Z"}
{"msg":"@Dan We discussed the following\n```\nAuthz Overview and Review\nAuthz New architecture\nPointcheval Saunders Threshold Signature\n```","username":"MALodder","ts":"2019-04-23T19:43:25.023Z"}
{"msg":"anyone have a high level diff of idemix vs. anoncreds2.0?","username":"Dan","ts":"2019-04-23T19:44:56.876Z"}
{"msg":"@Dan I can give you some of that, I don't know where Idemix is at this point but I can tell you where we started from","username":"MALodder","ts":"2019-04-23T19:45:26.992Z"}
{"msg":"This is the Idemix reference implementation we used\nhttps://domino.research.ibm.com/library/cyberdig.nsf/1e4115aea78b6e7c85256b360066f0d4/eeb54ff3b91c1d648525759b004fbbb1?OpenDocument","username":"MALodder","ts":"2019-04-23T19:46:40.674Z"}
{"msg":"Anoncreds 2.0 is vastly different in the following ways:\n\n1- We are using BBS+ and Poincheval Saunders signatures which are ECC pairing based\n2- We use Bulletproofs for range proofs, set memberships, and inequality proofs\n3- We can use zkSNARKS instead of Bulletproofs\n4- We also are planning to allow some credentials to be transferrable and delegatable\n5- We have policies which allow Agents to prove authorizations for the credentials they hold allowing owners to halt bad agents when necessary","username":"MALodder","ts":"2019-04-23T19:49:19.138Z"}
{"msg":"We plan to not use any RSA crypto for Anoncreds 2.0","username":"MALodder","ts":"2019-04-23T19:49:44.461Z"}
{"msg":"cool. that helps a lot thanks!","username":"Dan","ts":"2019-04-23T19:58:18.033Z"}
{"msg":"@MALodder, what would BBS+ and Poincheval Saunders Signatures be replacing in idemix?","username":"deepikav","ts":"2019-04-23T20:39:41.414Z"}
{"msg":"BBS+ and pointcheval saunders are used for the anonymous credentials portion","username":"MALodder","ts":"2019-04-23T20:44:10.192Z"}
{"msg":"Indy doesn't use Idemix directly, it uses only a subset of it and does revocation completely different","username":"MALodder","ts":"2019-04-23T20:44:40.397Z"}
{"msg":"Hey devs, anything exciting going on?  please consider submitting a blog post! http://bit.ly/HLEDSubmission","username":"Silona","ts":"2019-04-24T02:10:49.587Z"}
{"msg":"Has joined the channel.","username":"jadhavajay","ts":"2019-04-24T06:19:19.368Z","type":"uj"}
{"msg":"Has joined the channel.","username":"bart.cant@gmail.com","ts":"2019-04-25T15:22:29.414Z","type":"uj"}
{"msg":"Has joined the channel.","username":"jshim10","ts":"2019-04-26T01:47:38.106Z","type":"uj"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=7F7oPrztuuMXRGbSL) @MALodder How will it decide when to use BBS+ or PS for credential signatures? Or does every credential use both?","username":"wip-abramson","ts":"2019-04-29T18:34:53.971Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=7F7oPrztuuMXRGbSL","url":"https://chat.hyperledger.org/channel/ursa?msg=7F7oPrztuuMXRGbSL","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I'm coding both right now and want to do benchmarks","username":"MALodder","ts":"2019-04-29T18:39:16.425Z"}
{"msg":"for performance, memory, signature size, and proof size","username":"MALodder","ts":"2019-04-29T18:39:35.592Z"}
{"msg":"Can you share the repo? I would love to follow along and ask questions especially on the Rust way of doing things","username":"wip-abramson","ts":"2019-04-29T20:00:28.956Z"}
{"msg":"sure I haven't finished it yet","username":"MALodder","ts":"2019-04-29T21:30:09.975Z"}
{"msg":"> Can you share the repo? I would love to follow along and ask questions especially on the Rust way of doing things\nhttps://github.com/mikelodder7/anoncreds-signatures","username":"MALodder","ts":"2019-04-29T21:37:41.671Z"}
{"msg":"Thanks!","username":"wip-abramson","ts":"2019-04-30T13:08:13.421Z"}
{"msg":"The agenda has no meeting information...neither does the mailing list","username":"danintel","ts":"2019-05-01T14:03:25.382Z"}
{"msg":"Found some old notes.... https://wiki.hyperledger.org/display/ursa/Hyperledger+Ursa","username":"danintel","ts":"2019-05-01T14:04:01.312Z"}
{"msg":"Thanks for pointing this out!  We should make this easier to find.","username":"hartm","ts":"2019-05-01T14:32:31.747Z"}
{"msg":"So I'm about to start hitting the Overleaf document.  A lot of the detail of what I need to write up concerns the nature of sessions and initialisation and key handling and stuff in the library as a whole, not just the simple crypto calls.  Unless someone screams otherwise I'll add a whole major section to the Overleaf doc on provider architecture","username":"JonGeater","ts":"2019-05-01T15:01:58.559Z"}
{"msg":"@JonGeater Go for it.  Add a whole new file even if you like.","username":"hartm","ts":"2019-05-01T15:21:54.682Z"}
{"msg":"Let's see how it goes: if the section gets too big or messy we can abstract it out later","username":"JonGeater","ts":"2019-05-01T15:22:56.099Z"}
{"msg":"Thanks","username":"JonGeater","ts":"2019-05-01T15:22:58.094Z"}
{"msg":"It's probably good that the Fabric guys aren't here yet: I want to get the principles sorted in the current doc before we're forced to translate the whole thing into golang ;-)","username":"JonGeater","ts":"2019-05-01T15:25:29.439Z"}
{"msg":"(I say that rather tongue-in-cheek, since my golang is considerably better than my rust.  But still...)","username":"JonGeater","ts":"2019-05-01T15:26:07.538Z"}
{"msg":"> (I say that rather tongue-in-cheek, since my golang is considerably better than my rust. But still...)\nYou're just not Rusty enough","username":"MALodder","ts":"2019-05-01T15:28:49.714Z"}
{"msg":"> (I say that rather tongue-in-cheek, since my golang is considerably better than my rust. But still...)\nYou're just not Rusty enough ;-)","username":"MALodder","ts":"2019-05-01T15:28:49.714Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=87nZvqX4GW8gjvv7A) @JonGeater Food fight!","username":"danintel","ts":"2019-05-01T15:43:23.393Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=87nZvqX4GW8gjvv7A","url":"https://chat.hyperledger.org/channel/ursa?msg=87nZvqX4GW8gjvv7A","remote":true,"fileId":null,"fileName":null}]}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=2bQL3X8NCf4akM3Wh) @hartm another wiki trick click on the three dots to get page info - and there is a short URL is you want","username":"Silona","ts":"2019-05-02T15:29:42.750Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=2bQL3X8NCf4akM3Wh","url":"https://chat.hyperledger.org/channel/ursa?msg=2bQL3X8NCf4akM3Wh","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Also remember you can do GLiffy and Balsamic diagrams in the wiki!  so you can collaborate on them easier","username":"Silona","ts":"2019-05-02T15:30:38.008Z"}
{"msg":"and there is a TOC macro - with the confluence - there is often a macro for that...","username":"Silona","ts":"2019-05-02T15:31:18.519Z"}
{"msg":"I really like Balsamiq.  I'm not immediately sure what use it is for Ursa collaboration but for product ideas it's brilliantly efficient","username":"JonGeater","ts":"2019-05-03T10:41:40.207Z"}
{"msg":"Has joined the channel.","username":"fimbault","ts":"2019-05-03T11:55:04.210Z","type":"uj"}
{"msg":"Does anyone know where the recent recordings from Ursa meetings are?","username":"VipinB","ts":"2019-05-03T21:49:35.628Z"}
{"msg":"Hart pointed it out to me https://wiki.hyperledger.org/display/ursa/Meeting+Recordings","username":"VipinB","ts":"2019-05-03T22:20:33.080Z"}
{"msg":"I like it when explaining use cases even if i'm not going to create the actual interface...  but yes Gliffy is better for the diagrams :-) ","username":"Silona","ts":"2019-05-07T16:24:34.778Z"}
{"msg":"Has joined the channel.","username":"troyronda","ts":"2019-05-08T18:31:18.740Z","type":"uj"}
{"msg":"","username":"MALodder","ts":"2019-05-08T20:05:25.824Z","attachments":[{"type":"file","title":"Starkad_Poseidon.pdf","title_link":"/file-upload/CR4v3C46aeqB5psQN/Starkad_Poseidon.pdf","url":"/file-upload/CR4v3C46aeqB5psQN/Starkad_Poseidon.pdf","remote":false,"fileId":"CR4v3C46aeqB5psQN","fileName":"Starkad_Poseidon.pdf"}]}
{"msg":"Indy is now using Ursa!!! See [PR](https://github.com/hyperledger/indy-sdk/pull/1578/files/062259491effb040c042bf48a4fa196c91c98f0a..d53012f0021bd3b895c2a29c7bcf384ec180e482)","username":"MALodder","ts":"2019-05-09T15:56:02.766Z"}
{"msg":"🎉🎉","username":"MALodder","ts":"2019-05-09T15:57:03.156Z"}
{"msg":"I do like being on a chat channel where PR means 'Pull Request' and not Press Release :-)","username":"JonGeater","ts":"2019-05-09T16:50:11.927Z"}
{"msg":"Question about Overleaf: Do I have to somehow save my edits and then hit the Publish button, or are you all seeing my edits as I make them?","username":"JonGeater","ts":"2019-05-09T16:50:46.373Z"}
{"msg":"I'm leaving the office soon and wondering how rough I can leave my WIP","username":"JonGeater","ts":"2019-05-09T16:52:01.697Z"}
{"msg":"The updates are automatically saved. You don’t have to publish it to save edits","username":"MALodder","ts":"2019-05-09T17:01:04.326Z"}
{"msg":"Cool thanks.  I think it's in a fair state to leave for now: basic stuff in, I'll hard the hard detail later when I have a straight couple of hours to hit it","username":"JonGeater","ts":"2019-05-09T17:22:43.946Z"}
{"msg":"For those who are looking for some extra side cash, here's a competition to improve SNARKs https://coinlist.co/build/coda","username":"kdenhartog","ts":"2019-05-09T19:42:34.183Z"}
{"msg":"Has joined the channel.","username":"ryanwest6","ts":"2019-05-09T21:54:31.707Z","type":"uj"}
{"msg":"here's the eprint for the poseidon hash function","username":"MALodder","ts":"2019-05-10T15:08:40.477Z"}
{"msg":"https://eprint.iacr.org/2019/458.pdf","username":"MALodder","ts":"2019-05-10T15:08:43.574Z"}
{"msg":"I think we might be missing the commit history for a lot of ursa. Like from the point of time that things got migrated over from the lab state. For example if I want to figure out the rational for why these files are in bin, I get a dead end\nhttps://github.com/hyperledger/ursa/commit/3367813213dd532d24ec9f5e92af71842c377080#diff-9ca2f7ab5fffa18f89b226c4a583fc91\nIf I want to know anything about the BLS code I get the same dead end.","username":"Dan","ts":"2019-05-13T14:19:13.420Z"}
{"msg":"Has joined the channel.","username":"sklump","ts":"2019-05-13T14:21:16.339Z","type":"uj"}
{"msg":"@Dan the second one doesn't look like a valid git hash (too short)","username":"rjones","ts":"2019-05-13T17:04:01.879Z"}
{"msg":"maybe a problem with the github interface? Just pick probably anything that had been in libhl-crypto as part of the lab (and probably previously as part of indy-crypto). When it came over into ursa and refactored as libursa I think we lost the commit history - or at least that's what I dead end on through github.","username":"Dan","ts":"2019-05-13T17:41:21.889Z"}
{"msg":"@dan yes it is.","username":"rjones","ts":"2019-05-13T17:44:17.901Z"}
{"msg":"@Dan yes it is a problem with the github UI","username":"rjones","ts":"2019-05-13T17:44:17.901Z"}
{"msg":"```$ git log libindy_crypto-win-zip-and-upload.sh \ncommit 97363ebe2fe4e5a17c88023d149ebcef6b76a7a6\nAuthor: Michael Lodder <redmike7@gmail.com>\nDate:   Thu Dec 13 15:57:17 2018 -0700\n\n    Namespace to ursa\n    \n    Signed-off-by: Michael Lodder <redmike7@gmail.com>\n\ncommit 3367813213dd532d24ec9f5e92af71842c377080\nAuthor: Michael Lodder <redmike7@gmail.com>\nDate:   Tue Dec 11 17:07:09 2018 -0700\n\n    Move directories,Update README,Add build instructions\n    \n    Signed-off-by: Michael Lodder <redmike7@gmail.com>\n```","username":"rjones","ts":"2019-05-13T17:44:21.381Z"}
{"msg":"(I picked a random file from the list that was broken)","username":"rjones","ts":"2019-05-13T17:44:34.010Z"}
{"msg":"So what I'm trying to do is work back to the initial commit for things. Like this BLS code. Here's the initial commit over in indy:","username":"Dan","ts":"2019-05-13T19:08:51.739Z"}
{"msg":"https://github.com/hyperledger/indy-crypto/commit/e661337d91837ffb2ef337d26151389456df8a4a","username":"Dan","ts":"2019-05-13T19:09:58.089Z"}
{"msg":"(for this file: https://github.com/hyperledger/ursa/blob/master/libursa/src/bls/mod.rs)","username":"Dan","ts":"2019-05-13T19:11:33.183Z"}
{"msg":"Ok, maybe I can get there if I navigate to the parent of that last commit you list (33678...)","username":"Dan","ts":"2019-05-13T19:14:55.767Z"}
{"msg":"https://github.com/hyperledger/ursa/blame/89fa1ecf26404f86a516b3deba5bb1bb01948465/libhl-crypto/src/bls/mod.rs","username":"Dan","ts":"2019-05-13T19:15:05.847Z"}
{"msg":"is that normal for history not to follow a rename?","username":"Dan","ts":"2019-05-13T19:16:37.181Z"}
{"msg":"I think gitk makes it easier to see that, but a git rename usually looks like a delete and an add.","username":"rjones","ts":"2019-05-13T19:21:41.712Z"}
{"msg":"Check this out: https://stackoverflow.com/questions/2314652/is-it-possible-to-move-rename-files-in-git-and-maintain-their-history","username":"rjones","ts":"2019-05-13T19:22:14.622Z"}
{"msg":"@Dan : ```mbp-2:bls ry$ git log  mod.rs|wc -l\n      63\nmbp-2:bls ry$ git log --follow  mod.rs|wc -l\n     336\n```","username":"rjones","ts":"2019-05-13T19:23:24.125Z"}
{"msg":"so `--follow` is the flag you want","username":"rjones","ts":"2019-05-13T19:23:36.550Z"}
{"msg":"Slick. that works like a charm @rjones !","username":"Dan","ts":"2019-05-13T20:49:54.206Z"}
{"msg":"Sovrin crypto meerting:\nhttps://docs.google.com/document/d/1M3zgsRoOxlkjNPbDp4_7YWxuqO2EyefOT3Bt7ZgGIDY/edit#heading=h.nbprxa5fdgyg","username":"Dan","ts":"2019-05-14T14:09:20.847Z"}
{"msg":"","username":"rekmarks","ts":"2019-05-14T20:10:30.042Z","attachments":[{"type":"file","title":"Ursa at Consensus","title_link":"/file-upload/y8EzozjGyKWX5d3KF/Ursa%20at%20Consensus","url":"/file-upload/y8EzozjGyKWX5d3KF/Ursa%20at%20Consensus","remote":false,"fileId":"y8EzozjGyKWX5d3KF","fileName":"Ursa at Consensus"}]}
{"msg":"@VipinB onstage at Consensus","username":"rekmarks","ts":"2019-05-14T20:11:06.471Z"}
{"msg":"@VipinB onstage at Consensus presenting Ursa","username":"rekmarks","ts":"2019-05-14T20:11:06.471Z"}
{"msg":"CI PR https://github.com/hyperledger/ursa/pull/27","username":"MALodder","ts":"2019-05-14T22:20:58.570Z"}
{"msg":"Awesome! ","username":"Dan","ts":"2019-05-14T23:15:16.803Z"}
{"msg":"@dhuseby it would be great to get your feedback on it especially about the Cargo.lock file","username":"MALodder","ts":"2019-05-15T00:41:21.552Z"}
{"msg":"@here Just a reminder for tomorrow's meeting.  Please add anything you'd like to discuss to the agenda items.  Thanks!","username":"hartm","ts":"2019-05-15T02:27:45.930Z"}
{"msg":"Meeting info... https://wiki.hyperledger.org/display/ursa/Hyperledger+Ursa","username":"danintel","ts":"2019-05-15T05:03:41.228Z"}
{"msg":"I wonder if channels like this shouldn't have their (bi-)weekly meeting details permanently pinned in the top bar/channel info","username":"JonGeater","ts":"2019-05-15T13:21:15.342Z"}
{"msg":"For today's meeting some people may have noticed I've put a bunch of very drafty information into the Overleaf doc to do with key IDs, session handling, context reference etc.  What I *haven't* done yet is the key/TEE attestation details.  This is because I want people to be happy with the provider/session type architecture before I go ahead with the hard detail (which would change hugely if we reject what I've done so far)","username":"JonGeater","ts":"2019-05-15T13:23:19.289Z"}
{"msg":"new to overleaf... it looks like there's supposed to be a rendered view but it's filled with errors. I would guess since this is an online thing that's not a local problem? ","username":"Dan","ts":"2019-05-15T13:55:20.985Z"}
{"msg":"undefined control sequence, missing number treated as zero, LaTeX Error etc etc","username":"Dan","ts":"2019-05-15T13:56:17.871Z"}
{"msg":"@Dan Click on \"Recompile.\"","username":"hartm","ts":"2019-05-15T13:58:05.159Z"}
{"msg":"ok, that was easy :)","username":"Dan","ts":"2019-05-15T13:58:43.746Z"}
{"msg":"@amundson Request to check in on RFC PR8 https://github.com/hyperledger/ursa-rfcs/pull/8","username":"Dan","ts":"2019-05-15T14:49:37.567Z"}
{"msg":"http://markus-jakobsson.com/papers/jakobsson-eurocrypt96.pdf","username":"hartm","ts":"2019-05-15T14:56:48.528Z"}
{"msg":"Repudiable proof discussion ^","username":"Dan","ts":"2019-05-15T14:57:20.223Z"}
{"msg":"https://eprint.iacr.org/2017/587.pdf:  Subversion resilient SNARKs.","username":"hartm","ts":"2019-05-15T15:00:18.466Z"}
{"msg":"Regarding collaborative LaTeX workflows.. Looks like there's Confluence plugins. That would be a consistent approach with not using google docs and not introducing another un-integrated tool like overleaf.\nFrom experience working on a lot of RFCs, the initial weeks (months?) with a doc, a git workflow is not super productive. Git workflow is definitely required once the thing has taken shape.\nTeX-ish people might like to look at these links and if they look promising we can see about HL supporting one in our Wiki.\nhttps://marketplace.atlassian.com/apps/207/latex-plugin?hosting=server&tab=overview\nhttps://marketplace.atlassian.com/apps/1216800/latex-math-for-confluence?hosting=server&tab=overview","username":"Dan","ts":"2019-05-15T17:02:40.262Z"}
{"msg":"% \\f is defined as f(#1) using the macro\n\\f{x} = \\int_{-\\infty}^\\infty\n    \\hat \\f\\xi\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi","username":"rjones","ts":"2019-05-15T17:06:53.618Z"}
{"msg":"\\[% \\f is defined as f(#1) using the macro\n\\f{x} = \\int_{-\\infty}^\\infty\n    \\hat \\f\\xi\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi\\]","username":"rjones","ts":"2019-05-15T17:06:53.618Z"}
{"msg":"\\[ \\f{x} = \\int_{-\\infty}^\\infty \\hat \\f\\xi\\,e^{2 \\pi i \\xi x}  \\,d\\xi\\]","username":"rjones","ts":"2019-05-15T17:06:53.618Z"}
{"msg":"\\[$\\sum_{i=1}^\\infty\\frac{1}{n^2}\n=\\frac{\\pi^2}{6}$\\]","username":"rjones","ts":"2019-05-15T17:08:57.017Z"}
{"msg":"\\[\\sum_{i=1}^\\infty\\frac{1}{n^2}\n=\\frac{\\pi^2}{6}\\]","username":"rjones","ts":"2019-05-15T17:08:57.017Z"}
{"msg":"so you could write it as chat messages here","username":"rjones","ts":"2019-05-15T17:15:29.805Z"}
{"msg":"I would love it if we could do the latex stuff at hyperledger rather than my personal overleaf account","username":"MALodder","ts":"2019-05-15T17:34:15.068Z"}
{"msg":"explain to me what you need","username":"rjones","ts":"2019-05-15T17:35:12.055Z"}
{"msg":"TeX-ish people (looking at you @hartm ) preference on confluence plugin vs. overleaf?","username":"Dan","ts":"2019-05-15T18:24:29.977Z"}
{"msg":"This is for RFCs?","username":"amundson","ts":"2019-05-15T18:32:48.933Z"}
{"msg":"_TeXnicians_, please","username":"jsmitchell","ts":"2019-05-15T18:34:38.967Z"}
{"msg":"\\[TeXicians\\]","username":"rjones","ts":"2019-05-15T18:40:26.944Z"}
{"msg":"\\[TeXnicians\\]","username":"rjones","ts":"2019-05-15T18:40:26.944Z"}
{"msg":"\\[TEXnicians\\]","username":"rjones","ts":"2019-05-15T18:40:26.944Z"}
{"msg":"you need to use the \\TeX for the first part of that","username":"jsmitchell","ts":"2019-05-15T18:43:00.451Z"}
{"msg":"The current document in question is kind of straddling definitions. I think it is meant as documentation of APIs but that kind of thing could also be written in markdown as an RFC proposing the interface styles and rationale.\nIn general I don't think we want latex in RFCs. We might want more sophisticated formatting for documentation.","username":"Dan","ts":"2019-05-15T18:50:32.228Z"}
{"msg":"Mostly we need latex for the crypto math. I don’t think we’ll use it much for RFCs except in that area","username":"MALodder","ts":"2019-05-15T20:27:30.772Z"}
{"msg":"$A \\in \\Z_{q}^{n \\times m}$","username":"hartm","ts":"2019-05-15T20:37:13.748Z"}
{"msg":"Tex stuff will be most useful for documentation and examples (i.e. to show how some of the math works with our interfaces).  ","username":"hartm","ts":"2019-05-15T20:39:42.359Z"}
{"msg":"The confluence plugins look shaky at best, unfortunately, and I doubt they'll work with large documents that contain multiple files.  Now I am extremely tempted to try to paste an entire paper in chat....","username":"hartm","ts":"2019-05-15T20:40:27.619Z"}
{"msg":"I think github is probably fine as-is though.  The only issue is that if people want to make changes, they'll need to have a Tex compiler installed.  However, I think that the set of people we want making changes to math stuff is probably contained in the set people who have Tex compilers installed, so I'm not sure this is a big issue.","username":"hartm","ts":"2019-05-15T20:42:03.170Z"}
{"msg":"ok. the discussion is that the price for Overleaf would be $360 a year or so","username":"rjones","ts":"2019-05-15T21:25:18.089Z"}
{"msg":"@MALodder I guess @dhuseby is tied up. If you are eager to merge, I'm fine either way with the lock file. I mostly wanted to document why. The more \"why's\" that are searchable the fewer questions down the road / less bike shedding.","username":"Dan","ts":"2019-05-16T01:26:43.624Z"}
{"msg":"Okay. Do we have two approvals? I can’t merge unless there is.","username":"MALodder","ts":"2019-05-16T05:15:16.479Z"}
{"msg":"Please give your approval ","username":"MALodder","ts":"2019-05-16T05:16:27.000Z"}
{"msg":"I know @dhuseby said he would be offline thru the weekend so it doesn’t hurt to wait until next week ","username":"MALodder","ts":"2019-05-16T05:23:12.182Z"}
{"msg":"I’ve added reviewers but if I could get more from this channel for https://github.com/hyperledger/ursa/pull/27","username":"MALodder","ts":"2019-05-16T14:01:44.006Z"}
{"msg":"Ok, if you are fine waiting until next week, I'll approve it then after Huseby clarifies. I'll update the PR comments with why I'm asking.","username":"Dan","ts":"2019-05-16T14:31:13.102Z"}
{"msg":"sure","username":"MALodder","ts":"2019-05-16T15:22:17.469Z"}
{"msg":"Anyone know if the indy-crypto authors monitor this channel and/or the mail list? I might have some questions to understand the why as I prod around different places in the code we inherited. ","username":"Dan","ts":"2019-05-16T15:24:00.442Z"}
{"msg":"They probably don't, but I can reach out to them to get any answers Mike and I can't provide. ","username":"brentzundel","ts":"2019-05-16T15:29:16.296Z"}
{"msg":"Brent and I know that code the best","username":"MALodder","ts":"2019-05-16T15:30:48.920Z"}
{"msg":"Except for a few things","username":"MALodder","ts":"2019-05-16T15:30:56.821Z"}
{"msg":"I'm coming up to speed on milagro, and I see that it has a bls module in the bn254 module. Ursa has it's own bls module that relies on amcl::bn254. Curious why the separate ursa implementation vs using amcl's? ","username":"Dan","ts":"2019-05-16T16:31:25.926Z"}
{"msg":"bls is the curve","username":"MALodder","ts":"2019-05-16T18:41:59.612Z"}
{"msg":"bn254 is also the curve","username":"MALodder","ts":"2019-05-16T18:42:06.765Z"}
{"msg":"milagro also does not implement the signature aggregation feature","username":"MALodder","ts":"2019-05-16T18:44:01.281Z"}
{"msg":"so the curve is Boneh-Lynn-Scott and the signature is Boneh-Lynn-Shacham","username":"MALodder","ts":"2019-05-16T18:45:49.862Z"}
{"msg":"you can build the BLS signature using any pairing friendly curve","username":"MALodder","ts":"2019-05-16T18:46:10.794Z"}
{"msg":"I want to make it so in rust you can say BLS::new::<bls381>() or BLS::new::<bn254>() and the rest of the functions just work","username":"MALodder","ts":"2019-05-16T18:46:58.075Z"}
{"msg":"I want to make it so in rust you can say BLS::\\new::<bls381>() or BLS::\\new::<bn254>() and the rest of the functions just work","username":"MALodder","ts":"2019-05-16T18:46:58.075Z"}
{"msg":"I want to make it so in rust you can say `BLS::new::<bls381>()` or `BLS::new::<bn254>()` and the rest of the functions just work","username":"MALodder","ts":"2019-05-16T18:46:58.075Z"}
{"msg":"some crypto engineers all it BLS²","username":"MALodder","ts":"2019-05-16T18:50:18.623Z"}
{"msg":"BLS on BLS","username":"MALodder","ts":"2019-05-16T18:50:26.657Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=LJFuReaKYKJzPbzBG) https://chat.hyperledger.org/channel/ursa?msg=LJFuReaKYKJzPbzBG","username":"brentzundel","ts":"2019-05-16T18:53:17.770Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=LJFuReaKYKJzPbzBG","url":"https://chat.hyperledger.org/channel/ursa?msg=LJFuReaKYKJzPbzBG","remote":true,"fileId":null,"fileName":null}]}
{"msg":"It looks like the decision for implementing the bls signature (not the curve) came like two years ago by @ vimmerru. I see that the ursa implementation has serialization helper functions and the aggregation method which are lacking in milagro. But it also seemed like one could just extend the milagro code to do the same. So I was wondering if there was some other design goal?\nParticularly one that should be preserved as I start to mess with stuff?\n\nRegarding the bls curve, I looked briefly at your bls-signature comparison project and it looks like you imported milagro with the bls curve as a parameter maybe? I'm a little confused on the apache namespace, if that's the same as the amcl namespace. Ursa with me as I'm still pretty new with rust.","username":"Dan","ts":"2019-05-16T21:11:29.668Z"}
{"msg":"For one thing Milagro uses the base generator for its signatures. This is not a bad thing but Indy generates a random one and uses that for the keys. We also plan to add aggregated signatures in addition to the multisig as well","username":"MALodder","ts":"2019-05-17T03:32:54.090Z"}
{"msg":"Milagro added BLS signature scheme only a few months back so the rust files you see like bls, bls192 are BLS signature scheme imlemenatation and not the curve.  Regarding curves, Milagro defines curve parameters in `roms` directory so for BLS12-381 constants you can look at rom_bls381_64.rs and then the logic is kept generic so ecp.rs, ecp2.rs will be groups G1 and G2 for BLS curve, BN curves, etc. ","username":"lovesh","ts":"2019-05-17T05:20:16.134Z"}
{"msg":"My understanding is that we already have aggregated signatures, we just call them multisig","username":"lovesh","ts":"2019-05-17T05:22:29.818Z"}
{"msg":"Secondly we should do away with the Generator code we have in indy-crypto/ursa. Milagro gives you generator for both groups and if you need additional generators you can hash strings on the curve using the `mapit` function","username":"lovesh","ts":"2019-05-17T05:26:30.772Z"}
{"msg":"Aggregated is not the same as Multisig","username":"MALodder","ts":"2019-05-17T05:28:22.615Z"}
{"msg":"multisig is an aggregated signature, but aggregated means you have a different message and signature that can be accumulated into a single value","username":"MALodder","ts":"2019-05-17T05:29:00.563Z"}
{"msg":"multisig, is the same message was signed for all signatures","username":"MALodder","ts":"2019-05-17T05:29:12.276Z"}
{"msg":"I'm okay removing the generator","username":"MALodder","ts":"2019-05-17T05:29:20.408Z"}
{"msg":"Didn't know that, thanks for correcting :thumbsup: ","username":"lovesh","ts":"2019-05-17T05:30:59.561Z"}
{"msg":"Didn't know that, thanks for correcting 👍\n","username":"lovesh","ts":"2019-05-17T05:31:57.708Z"}
{"msg":"My project [here](https://github.com/mikelodder7/bls12-381-comparison/blob/master/src/main.rs) show the difference. Its subtle for sure. The message is the same for all signatures or each signature is associated with a different message.","username":"MALodder","ts":"2019-05-17T05:43:45.371Z"}
{"msg":"Cool discussion. \nAMCL seems like a really compact library (I see that's their main design objective). In the future I could see us wanting an optimal library as well. Mostly for validators that will be doing a lot of these options, vs clients that probably are best off using amcl. @danintel I know intel has BN curves implementations that likely use IPP acceleration. Not sure if any of the acceleration is open source though. Something we could put on the backlog.","username":"Dan","ts":"2019-05-17T13:29:53.832Z"}
{"msg":"Also, btw, not shocking that it was hard to see when bls signing was introduced in amcl with this kind of commit history: https://github.com/apache/incubator-milagro-crypto/commits/master/version3/rust","username":"Dan","ts":"2019-05-17T13:54:34.672Z"}
{"msg":"😂","username":"MALodder","ts":"2019-05-17T13:55:30.952Z"}
{"msg":"@amundson you left a comment on https://github.com/hyperledger/ursa-rfcs/pull/8 last month. @MALodder asked for clarification in that thread.","username":"Dan","ts":"2019-05-17T14:09:09.014Z"}
{"msg":"@MALodder I think we are good to go on the CI PR if you want to update the Cargo.lock commit message with the rationale.. something about providing traceability between commits, builds, and the dependencies used in the builds. I gather from the comments that was @dhuseby 's goal. https://github.com/hyperledger/ursa/pull/27/commits/4798c59731134f9a425e9b8bb1d7488ecde0e714","username":"Dan","ts":"2019-05-17T14:13:36.697Z"}
{"msg":"Sounds good. Can you approve the PR? I'll fill out that info in the PR message then merge","username":"MALodder","ts":"2019-05-17T14:14:20.079Z"}
{"msg":"I updated my comments","username":"MALodder","ts":"2019-05-17T14:16:33.632Z"}
{"msg":"Until you approve it @Dan the merge is blocked","username":"MALodder","ts":"2019-05-17T14:16:58.153Z"}
{"msg":"I was thinking to put it in the commit message for the Cargo.lock commit. That way when the next new guy on the project wonders why it's there she just has to look at the history for the file and sees the rationale.","username":"Dan","ts":"2019-05-17T14:19:38.917Z"}
{"msg":"you need me to do a rebase to amend the message or is there another method you are suggesting?","username":"MALodder","ts":"2019-05-17T14:21:32.979Z"}
{"msg":"@Dan ^^","username":"MALodder","ts":"2019-05-17T14:21:40.632Z"}
{"msg":"yes that's what I was thinking","username":"Dan","ts":"2019-05-17T14:21:45.196Z"}
{"msg":"rebase?","username":"MALodder","ts":"2019-05-17T14:21:50.839Z"}
{"msg":"yes rebase and amend the message","username":"Dan","ts":"2019-05-17T14:22:00.167Z"}
{"msg":"okay here's the new commit message\n\n*The idea of checking in the cargo.lock file is for reproducible/deterministic builds. We want to track the contents of that over time so that we know exactly what dependencies were used to support specific builds of Ursa.*","username":"MALodder","ts":"2019-05-17T14:27:57.529Z"}
{"msg":"@Dan ^^","username":"MALodder","ts":"2019-05-17T14:28:10.942Z"}
{"msg":"pushed","username":"MALodder","ts":"2019-05-17T14:29:14.863Z"}
{"msg":"if you approve it then I can merge it once the  CI finishes","username":"MALodder","ts":"2019-05-17T14:32:49.542Z"}
{"msg":"thanks, just waiting for CI now","username":"MALodder","ts":"2019-05-17T14:41:13.350Z"}
{"msg":"Cool, thanks for getting that whole PR together. That's pretty huge to actually have proper CI now!","username":"Dan","ts":"2019-05-17T14:59:54.740Z"}
{"msg":"https://github.com/hyperledger/ursa/pull/27 looks like CI is done","username":"rjones","ts":"2019-05-17T14:59:58.611Z"}
{"msg":"Wow and it even comes with automated @rjones CI monitoring notifications! I don't know how you did that @MALodder but hats off to you. :D","username":"Dan","ts":"2019-05-17T15:01:06.236Z"}
{"msg":"The AMCL main author told me to use this repo https://github.com/miracl/amcl. It is more recent and has the better commit history","username":"lovesh","ts":"2019-05-17T15:06:25.850Z"}
{"msg":"They have had to migrate the repo","username":"lovesh","ts":"2019-05-17T15:06:54.265Z"}
{"msg":"Oh that looks a lot better. Are they no longer part of Apache or maybe moved out of the incubator?","username":"Dan","ts":"2019-05-17T15:09:06.502Z"}
{"msg":"Don't know whether they are part of Apache foundation or not but they are still Apache-2 licence so i was content","username":"lovesh","ts":"2019-05-17T15:11:00.106Z"}
{"msg":"Rust question ... if a family of structs with one or more common fields have the same method(s) on those fields is there an inheritance-ish feature to avoid reimplementing the method for each struct?\nI thought a default trait method implementation would be nice but traits can't use struct fields. (I see there's a postponed RFC to give traits access to fields.) \nTrait bounds and associated types facilitate generics behaviors but don't appear to facilitate anything with default methods operating on fields. ","username":"Dan","ts":"2019-05-17T16:54:10.859Z"}
{"msg":"Traits can define `type`s which can use fields","username":"MALodder","ts":"2019-05-17T17:07:50.638Z"}
{"msg":"So if each struct had a name field, then I could define a trait with some sort of Name Type such that I could write a default implementation that did something like `println!(self::name);` ?","username":"Dan","ts":"2019-05-17T17:14:26.791Z"}
{"msg":"it would be something like `self::Type1::name`","username":"MALodder","ts":"2019-05-17T17:20:48.590Z"}
{"msg":"thx","username":"Dan","ts":"2019-05-17T17:22:28.746Z"}
{"msg":"would that field still be accessible from each struct?","username":"Dan","ts":"2019-05-17T18:03:03.371Z"}
{"msg":"I'm trying to figure out what you're asking","username":"dhuseby","ts":"2019-05-17T18:03:18.627Z"}
{"msg":"generic traits?","username":"dhuseby","ts":"2019-05-17T18:03:54.409Z"}
{"msg":"Ok, concrete example...\nEach struct has a bytes field.\nWe have several as_bytes() methods that just do `self.bytes.as_slice()`\nSeems like it would be nice to inherit that method rather than re-implement it inside each struct that has a bytes field.","username":"Dan","ts":"2019-05-17T18:05:01.210Z"}
{"msg":"Ok, concrete example...\nEach struct has a bytes field.\nEach struct implements an as_bytes() method that just does `self.bytes.as_slice()`\nSeems like it would be nice to inherit that method rather than re-implement it inside each struct that has a bytes field.","username":"Dan","ts":"2019-05-17T18:05:01.210Z"}
{"msg":"Ok, concrete example...\nEach struct has a bytes field.\nEach struct implements an as_bytes() method that just do `self.bytes.as_slice()`\nSeems like it would be nice to inherit that method rather than re-implement it inside each struct that has a bytes field.","username":"Dan","ts":"2019-05-17T18:05:01.210Z"}
{"msg":"One sec","username":"dhuseby","ts":"2019-05-17T18:05:41.573Z"}
{"msg":"@Dan what you should always ask yourself first is: is there a standard way of doing this seemingly common thing?","username":"dhuseby","ts":"2019-05-17T18:09:36.852Z"}
{"msg":"the answer is usually yes","username":"dhuseby","ts":"2019-05-17T18:09:45.501Z"}
{"msg":"that is literally the question that I asked :D","username":"Dan","ts":"2019-05-17T18:09:53.718Z"}
{"msg":"ok","username":"dhuseby","ts":"2019-05-17T18:10:30.780Z"}
{"msg":"so for your as_slice thing","username":"dhuseby","ts":"2019-05-17T18:10:35.727Z"}
{"msg":"What you really want to do is implement the AsRef trait","username":"dhuseby","ts":"2019-05-17T18:10:49.967Z"}
{"msg":"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html","username":"dhuseby","ts":"2019-05-17T18:10:55.887Z"}
{"msg":"an example of implementing that is here: https://docs.rs/sodiumoxide/0.2.2/sodiumoxide/crypto/hash/sha256/struct.Digest.html","username":"dhuseby","ts":"2019-05-17T18:11:13.408Z"}
{"msg":"do your structs have members other than the bytes?","username":"dhuseby","ts":"2019-05-17T18:11:43.169Z"}
{"msg":"if they only have bytes, then you should make it a \"virtual type\" for a slice or Vec depending on if it is dynamically sized or not","username":"dhuseby","ts":"2019-05-17T18:12:17.780Z"}
{"msg":"for instance, a Digest is just a fixed length slice","username":"dhuseby","ts":"2019-05-17T18:12:50.435Z"}
{"msg":"so it is declared like this:","username":"dhuseby","ts":"2019-05-17T18:12:56.564Z"}
{"msg":"pub struct Digest(pub [u8; 32]);","username":"dhuseby","ts":"2019-05-17T18:12:59.143Z"}
{"msg":"which is just making a type \"alias\" called Digest but is really just a [u8; 32]","username":"dhuseby","ts":"2019-05-17T18:13:32.977Z"}
{"msg":"did I answer your question?","username":"dhuseby","ts":"2019-05-17T18:13:45.339Z"}
{"msg":"Those aren't called \"virtual types\". they have a name but i can't remember what it is","username":"dhuseby","ts":"2019-05-17T18:14:19.167Z"}
{"msg":"Thanks I'll study those links.","username":"Dan","ts":"2019-05-17T18:15:14.043Z"}
{"msg":"so, as_slice and as_bytes are also found in the standard library.","username":"dhuseby","ts":"2019-05-17T18:20:37.047Z"}
{"msg":"for instance String::as_bytes()","username":"dhuseby","ts":"2019-05-17T18:20:45.899Z"}
{"msg":"and Vec<T>::as_slice)(","username":"dhuseby","ts":"2019-05-17T18:20:55.538Z"}
{"msg":"but those are only implemented on standard types where it makes sense","username":"dhuseby","ts":"2019-05-17T18:21:11.975Z"}
{"msg":"the official \"standard\" way is to implement AsRef<T> for the converted type T","username":"dhuseby","ts":"2019-05-17T18:21:41.348Z"}
{"msg":"so instead of as_bytes do AsRef<[u8]>","username":"dhuseby","ts":"2019-05-17T18:22:33.367Z"}
{"msg":"In this case the bytes field seems to be a sort of default serialization of the struct and the as_bytes method just returns those bytes as a slice. ","username":"Dan","ts":"2019-05-17T18:22:45.955Z"}
{"msg":"oh","username":"dhuseby","ts":"2019-05-17T18:23:24.820Z"}
{"msg":"serialization is a whole other can of worms","username":"dhuseby","ts":"2019-05-17T18:23:33.268Z"}
{"msg":"I hate to throw this at you but https://serde.rs","username":"dhuseby","ts":"2019-05-17T18:23:47.011Z"}
{"msg":"it's the \"standard\" way to make types SERializable/DEserializable","username":"dhuseby","ts":"2019-05-17T18:24:13.864Z"}
{"msg":"Yeah serde is also on my read list :)","username":"Dan","ts":"2019-05-17T18:24:17.221Z"}
{"msg":"if you follow that standard then you can serde into and out of a whole bunch of different formats","username":"dhuseby","ts":"2019-05-17T18:24:30.857Z"}
{"msg":"especially since these structs are already deriving Serialize","username":"Dan","ts":"2019-05-17T18:24:32.796Z"}
{"msg":"right","username":"dhuseby","ts":"2019-05-17T18:24:38.819Z"}
{"msg":"most of the time you should be able to use the serde macros to autogenerate the serde glue","username":"dhuseby","ts":"2019-05-17T18:24:58.367Z"}
{"msg":"just decorate the struct and members with the correct macro declarations and everything gets generated","username":"dhuseby","ts":"2019-05-17T18:25:19.350Z"}
{"msg":"If you could suggest one project with really well done rust (to look at for examples of \"the right way\") what would that be?","username":"Dan","ts":"2019-05-17T18:29:32.851Z"}
{"msg":"right way to do what?","username":"dhuseby","ts":"2019-05-17T18:29:48.541Z"}
{"msg":"as much as possible ;)","username":"Dan","ts":"2019-05-17T18:29:56.900Z"}
{"msg":"the sodiumoxide crate is perfect and shows lots of different tricks","username":"dhuseby","ts":"2019-05-17T18:30:07.737Z"}
{"msg":"cool, thx","username":"Dan","ts":"2019-05-17T18:30:22.971Z"}
{"msg":"https://crates.io/crates/sodiumoxide","username":"dhuseby","ts":"2019-05-17T18:30:28.929Z"}
{"msg":"there is one trick not in there that I learned a few months ago that i absolutely love to use when working with the aliased array types (e.g. Digest, Nonce, etc)","username":"dhuseby","ts":"2019-05-17T18:31:26.388Z"}
{"msg":"use destructuring when you need to manipulate the bytes in an instance of those types","username":"dhuseby","ts":"2019-05-17T18:31:49.929Z"}
{"msg":"let me show you a gist","username":"dhuseby","ts":"2019-05-17T18:32:02.849Z"}
{"msg":"Ok, take it easy, I'm still getting comfortable with basics :flushed: ","username":"Dan","ts":"2019-05-17T18:32:18.368Z"}
{"msg":"the most important question: vi or emacs?","username":"rjones","ts":"2019-05-17T18:32:35.386Z"}
{"msg":"lol","username":"Dan","ts":"2019-05-17T18:32:40.998Z"}
{"msg":"I'm creating a custom user tag for you chat wide so answer carefully","username":"rjones","ts":"2019-05-17T18:33:00.965Z"}
{"msg":"@Dan, check this out","username":"dhuseby","ts":"2019-05-17T18:33:37.139Z"}
{"msg":"I created a custom editor inside pine so I can simultaneously spam and code","username":"Dan","ts":"2019-05-17T18:38:50.989Z"}
{"msg":"I too program by banging rocks together and causing piezo electric events","username":"rjones","ts":"2019-05-17T18:39:30.685Z"}
{"msg":"you owe me patent royalties then","username":"Dan","ts":"2019-05-17T18:40:31.859Z"}
{"msg":"I owe you patent royalties then","username":"Dan","ts":"2019-05-17T18:40:31.859Z"}
{"msg":"https://gist.github.com/dhuseby/b657070f3f7f99f76a13476ffa3ca0eb","username":"dhuseby","ts":"2019-05-17T18:41:36.058Z"}
{"msg":"@Dan ^^^","username":"dhuseby","ts":"2019-05-17T18:41:54.747Z"}
{"msg":"destructuring trick to get a mutable reference to the \"inner\" slice for types that are just type aliases over slices","username":"dhuseby","ts":"2019-05-17T18:42:25.948Z"}
{"msg":"interesting :thinking: . thanks","username":"Dan","ts":"2019-05-17T18:45:38.129Z"}
{"msg":"note that the curly braces are required to keep the borrow checker happy","username":"dhuseby","ts":"2019-05-17T18:46:22.783Z"}
{"msg":"they define the lifespan of the 'noncebytes' reference","username":"dhuseby","ts":"2019-05-17T18:47:02.462Z"}
{"msg":"@Dan wait until you get to writing your own macros","username":"dhuseby","ts":"2019-05-17T18:55:42.062Z"}
{"msg":":rofl: ","username":"dhuseby","ts":"2019-05-17T18:55:49.141Z"}
{"msg":"you'll suddenly find yourself holding a razor sharp katana","username":"dhuseby","ts":"2019-05-17T18:56:05.702Z"}
{"msg":"don't tempt me","username":"Dan","ts":"2019-05-17T18:56:12.044Z"}
{"msg":"here's a crate that is a parser generator implemented entirely in rust macros","username":"dhuseby","ts":"2019-05-17T18:56:57.668Z"}
{"msg":"https://docs.rs/nom/4.2.3/nom/","username":"dhuseby","ts":"2019-05-17T18:56:58.808Z"}
{"msg":"@dhuseby Can you keep a doc or list somewhere of these comments?  While posting them in chat is nice, I suspect others will have the same questions.  It has been very useful for me to read through this stuff as well, as I am obviously not on the same level of Rust as people like you or Mike.","username":"hartm","ts":"2019-05-17T19:41:25.474Z"}
{"msg":"Destructuring is nice. Most of the time @Dan if I need to do what you’re asking I use traits with types or macros. Both of those usually get the job done","username":"MALodder","ts":"2019-05-17T19:45:08.410Z"}
{"msg":"Say, are we going to always commit cargo.lock or just ahead of release builds?","username":"Dan","ts":"2019-05-17T20:35:18.615Z"}
{"msg":"Say, are we going to always commit cargo.lock or just ahead of release builds.","username":"Dan","ts":"2019-05-17T20:35:18.615Z"}
{"msg":"It was a pain to rebase and locally test without committing Cargo.lock so I went ahead and did that for the PR I'm working on.","username":"Dan","ts":"2019-05-17T21:40:59.287Z"}
{"msg":"I just update it prior to a release.","username":"MALodder","ts":"2019-05-17T23:27:44.003Z"}
{"msg":"But if you need to update for a feature I’m okay with it","username":"MALodder","ts":"2019-05-17T23:27:57.515Z"}
{"msg":"nom is great; I was playing around with it for a parser I wrote for Michael's forbes article  in Rust, converts the forbes article into a spreadsheet (actually csv) using nom ","username":"VipinB","ts":"2019-05-19T16:42:01.351Z"}
{"msg":"Has joined the channel.","username":"alexmatson","ts":"2019-05-19T23:42:48.071Z","type":"uj"}
{"msg":"Has joined the channel.","username":"toddinpal","ts":"2019-05-20T18:12:59.244Z","type":"uj"}
{"msg":"conflict with sovrin crypto tomorrow","username":"Dan","ts":"2019-05-21T04:58:07.060Z"}
{"msg":"@Dan you have two approvals","username":"MALodder","ts":"2019-05-21T13:50:42.184Z"}
{"msg":"for your PR now","username":"MALodder","ts":"2019-05-21T13:50:46.747Z"}
{"msg":"Thanks for the quick reviews! I will see if there's a more useful way to test serialization otherwise, I will just use the deserialization test as suggested. Probably get some time to look at that this afternoon.","username":"Dan","ts":"2019-05-21T14:02:23.320Z"}
{"msg":"I added appveyor to the CI process [here](https://github.com/hyperledger/ursa/pull/29)","username":"MALodder","ts":"2019-05-21T18:16:55.342Z"}
{"msg":"anyone know the helpdesk email address to get the appveyor webhook turned on?","username":"MALodder","ts":"2019-05-21T18:17:17.255Z"}
{"msg":"I found it.","username":"MALodder","ts":"2019-05-21T18:23:06.803Z"}
{"msg":"alright guys I am back :) ","username":"cam-parra","ts":"2019-05-21T20:55:05.751Z"}
{"msg":"@MALodder https://github.com/hyperledger/ursa/settings/installations","username":"rjones","ts":"2019-05-21T22:22:52.793Z"}
{"msg":"it says I don't have access to that","username":"MALodder","ts":"2019-05-21T22:29:13.097Z"}
{"msg":"@rjones ^^","username":"MALodder","ts":"2019-05-21T22:29:33.548Z"}
{"msg":"but I believe you","username":"MALodder","ts":"2019-05-21T22:29:39.466Z"}
{"msg":"oh bummer. Yeah I added it","username":"rjones","ts":"2019-05-21T22:29:50.025Z"}
{"msg":"","username":"rjones","ts":"2019-05-21T22:38:35.504Z","attachments":[{"type":"file","title":"appveyor.png","title_link":"/file-upload/CPo8gk2fcYc8w3WHk/appveyor.png","image_url":"/file-upload/CPo8gk2fcYc8w3WHk/appveyor.png","image_type":"image/png","image_size":254907,"url":"/file-upload/CPo8gk2fcYc8w3WHk/appveyor.png","remote":false,"fileId":"CPo8gk2fcYc8w3WHk","fileName":"appveyor.png"}]}
{"msg":"is there more I need to do to enable it?","username":"rjones","ts":"2019-05-21T22:40:00.715Z"}
{"msg":"I had to go to appveyor.com and add the project","username":"MALodder","ts":"2019-05-21T22:40:58.144Z"}
{"msg":"https://ci.appveyor.com/project/mikelodder7/ursa/build/job/06i18bxoajlo81wy","username":"MALodder","ts":"2019-05-21T22:41:08.855Z"}
{"msg":"someone with rights to create projects on behalf of hyperledger will have to do it","username":"MALodder","ts":"2019-05-21T22:41:49.175Z"}
{"msg":"ah OK. that would be me, but I need to put on a different hat. Is it crucial this happens today?","username":"rjones","ts":"2019-05-21T22:42:30.530Z"}
{"msg":"no","username":"MALodder","ts":"2019-05-21T22:48:26.859Z"}
{"msg":"https://ci.appveyor.com/project/ryjones/ursa building along","username":"rjones","ts":"2019-05-21T22:57:47.193Z"}
{"msg":"Odd the x86 one didn’t work","username":"MALodder","ts":"2019-05-22T02:02:38.667Z"}
{"msg":"Has joined the channel.","username":"fz","ts":"2019-05-22T03:55:51.564Z","type":"uj"}
{"msg":"For secp256k1. ","username":"MALodder","ts":"2019-05-22T12:18:19.362Z"}
{"msg":"i haven't worked with appveyor before, is this like a bakeoff with travis or is it doing a different job?","username":"Dan","ts":"2019-05-22T13:57:25.908Z"}
{"msg":"appveyor is specialized for CI windows","username":"MALodder","ts":"2019-05-22T14:00:50.066Z"}
{"msg":"travis-ci is *nix based","username":"MALodder","ts":"2019-05-22T14:01:02.645Z"}
{"msg":"on that note. I can't get secp256k1 to work for 32-bit windows","username":"MALodder","ts":"2019-05-22T14:01:17.030Z"}
{"msg":"fine by me if we keep a small list of supported OS's. I don't know how many people are running 32 bit anything? (also I don't know a lot of people)","username":"Dan","ts":"2019-05-22T14:02:39.777Z"}
{"msg":"personally I moved to 33 bits years ago.","username":"Dan","ts":"2019-05-22T14:03:06.582Z"}
{"msg":"I vote to not support it, here's why\n\n1- Anyone using Windows these days is typically using 64-bit\n2- Ursa can compile to 32-bit arm both iOS and Android. I just tried it\n3- Ursa can compile to 32-bit on linux\n4- Unless someone has a compelling reason for 32 bit windows, I'm going to remove it from the settings file","username":"MALodder","ts":"2019-05-22T14:03:10.174Z"}
{"msg":"I just submitted a PR for it, the current appveyor will fail for 32 bit but we should still merge it anyway then we should be good","username":"MALodder","ts":"2019-05-22T14:06:13.844Z"}
{"msg":"It looks like its running properly now","username":"MALodder","ts":"2019-05-22T14:06:21.963Z"}
{"msg":"when a PR comes in","username":"MALodder","ts":"2019-05-22T14:06:29.232Z"}
{"msg":"it looks like its using the new appveyor settings nice","username":"MALodder","ts":"2019-05-22T14:13:31.802Z"}
{"msg":"@Dan I started on a 36 bit wide computer","username":"rjones","ts":"2019-05-22T15:19:52.590Z"}
{"msg":"I spent a lot of time in 33-bit and 40-bit land when I was at ARM","username":"JonGeater","ts":"2019-05-22T15:58:56.754Z"}
{"msg":"Video of my talk about Ursa at Consensus/Construct 2019 now online: at Coindesk . Strangely it is called Hyperledger: Welcome to the Greenhouse .  Not Hyperledger Ursa: A new kind of crypto library which was the topic of the talk.  ","username":"VipinB","ts":"2019-05-22T17:23:35.200Z"}
{"msg":"@MALodder https://ci.appveyor.com/project/hyperledger/ursa","username":"rjones","ts":"2019-05-22T17:50:28.590Z"}
{"msg":"🎉","username":"MALodder","ts":"2019-05-22T17:52:27.859Z"}
{"msg":"luckily - no name squatters. I think we should probably have a different version numbering scheme - can that be set in the .yml? I'd rather not have them start at 1.0 for obvious reasons :)","username":"rjones","ts":"2019-05-22T17:56:14.154Z"}
{"msg":"Is this the obvious reason?\n\n`Compiling ursa v0.1.1 (/Users/jag/Projects/ursa/libursa)`","username":"JonGeater","ts":"2019-05-22T18:11:30.191Z"}
{"msg":";-)","username":"JonGeater","ts":"2019-05-22T18:11:35.215Z"}
{"msg":"Question: why do we have both 'libursa/tests/{lorem}.rs' and also a collection of 'libursa/bin/test_{ipsum}.rs'?","username":"JonGeater","ts":"2019-05-22T18:15:23.218Z"}
{"msg":"This seems morally wrong","username":"JonGeater","ts":"2019-05-22T18:15:52.325Z"}
{"msg":"@JonGeater also: https://ci.appveyor.com/project/hyperledger/ursa/history is version 1.0.1 which might annoy the TSC :)","username":"rjones","ts":"2019-05-22T18:19:12.443Z"}
{"msg":"Shouldn't that PR be called \"Don't build 32-bit Windows\"?  Otherwise it seems like it's a Win64 exclusive","username":"JonGeater","ts":"2019-05-22T18:25:01.841Z"}
{"msg":"","username":"Dan","ts":"2019-05-22T23:51:41.228Z","attachments":[{"type":"file","title":"Clipboard - May 22, 2019 6:51 PM","title_link":"/file-upload/Pr6WFCu5JHpyawg54/Clipboard%20-%20May%2022,%202019%206:51%20PM","image_url":"/file-upload/Pr6WFCu5JHpyawg54/Clipboard%20-%20May%2022,%202019%206:51%20PM","image_type":"image/png","image_size":29582,"url":"/file-upload/Pr6WFCu5JHpyawg54/Clipboard%20-%20May%2022,%202019%206:51%20PM","remote":false,"fileId":"Pr6WFCu5JHpyawg54","fileName":"Clipboard - May 22, 2019 6:51 PM"}]}
{"msg":"what do we think about getting rid of this configuration in the repo and instead making good use of the \"Rebase and merge\" button.\n","username":"Dan","ts":"2019-05-22T23:51:52.408Z"}
{"msg":"I prefer that to littering the history with merge commits","username":"Dan","ts":"2019-05-22T23:52:11.835Z"}
{"msg":"I can make it so rebase and merge is the available option","username":"rjones","ts":"2019-05-22T23:53:11.991Z"}
{"msg":"that would be kewl ","username":"Dan","ts":"2019-05-22T23:55:32.634Z"}
{"msg":"I think you need a HIPE and a vote of the TSC though","username":"rjones","ts":"2019-05-22T23:57:05.442Z"}
{"msg":"well of course, but only after the governing board issues a non-binding resolution in favor of this approach","username":"Dan","ts":"2019-05-22T23:59:57.115Z"}
{"msg":"done. I hope that's totally uncontroversial","username":"rjones","ts":"2019-05-23T00:08:47.030Z"}
{"msg":"I still see the \"this branch is out of date\" thing - it won't let me click the `rebase and merge` button.","username":"Dan","ts":"2019-05-23T00:11:54.157Z"}
{"msg":"link me a pr","username":"rjones","ts":"2019-05-23T00:19:50.811Z"}
{"msg":"https://github.com/hyperledger/ursa/pull/28 what do you see?","username":"rjones","ts":"2019-05-23T00:21:57.313Z"}
{"msg":"oh, you merged master into that branch? I was trying to figure out if there was a way to avoid that. ","username":"Dan","ts":"2019-05-23T02:10:53.035Z"}
{"msg":"oh. I clicked the \"rebase\" button","username":"rjones","ts":"2019-05-23T02:12:23.745Z"}
{"msg":"I didn't click `merge`","username":"rjones","ts":"2019-05-23T02:12:57.564Z"}
{"msg":"do you have a `revert` button? I do","username":"rjones","ts":"2019-05-23T02:13:38.078Z"}
{"msg":"if you had clicked `rebase and merge` you would have had the same result, I suspect","username":"rjones","ts":"2019-05-23T02:14:16.843Z"}
{"msg":"hmm...","username":"Dan","ts":"2019-05-23T02:14:51.851Z"}
{"msg":"that's weird... the commit history for the PR shows a merge and I had seen this message in the comments view of the PR which is why I thought you had merged.","username":"Dan","ts":"2019-05-23T02:16:33.047Z"}
{"msg":"","username":"Dan","ts":"2019-05-23T02:16:35.244Z","attachments":[{"type":"file","title":"Clipboard - May 22, 2019 9:16 PM","title_link":"/file-upload/iz9PGRDzjx7GxoWoe/Clipboard%20-%20May%2022,%202019%209:16%20PM","image_url":"/file-upload/iz9PGRDzjx7GxoWoe/Clipboard%20-%20May%2022,%202019%209:16%20PM","image_type":"image/png","image_size":36165,"url":"/file-upload/iz9PGRDzjx7GxoWoe/Clipboard%20-%20May%2022,%202019%209:16%20PM","remote":false,"fileId":"iz9PGRDzjx7GxoWoe","fileName":"Clipboard - May 22, 2019 9:16 PM"}]}
{"msg":"but the commit history for master with these commits laid on top (via the 'rebase and merge' ) doesn't include the merge commit that's in the PR.","username":"Dan","ts":"2019-05-23T02:17:16.835Z"}
{"msg":"I only clicked the \"rebase\" button","username":"rjones","ts":"2019-05-23T02:18:41.942Z"}
{"msg":"I think It's a clean rebase.","username":"rjones","ts":"2019-05-23T02:24:46.975Z"}
{"msg":"If you look here: https://github.com/hyperledger/ursa/pull/28/commits/9e52f34cd67a66c9efba235c41d28fbd469689b1","username":"rjones","ts":"2019-05-23T02:27:03.384Z"}
{"msg":"```mbp-2:ursa ry$ git status -v\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nnothing to commit, working tree clean\nmbp-2:ursa ry$ git log | grep -i 9e52f34cd67a66c9efba235c41d28fbd469689b1\nmbp-2:ursa ry$ \n```","username":"rjones","ts":"2019-05-23T02:27:43.424Z"}
{"msg":"if you want to see the merge into your change: https://github.com/hyperledger/ursa/commit/9e52f34cd67a66c9efba235c41d28fbd469689b1","username":"rjones","ts":"2019-05-23T02:28:35.296Z"}
{"msg":"yeah it certainly seems to be a clean rebase. must just be something weird about the github interface and/or how it's managing the rebase under the hood.","username":"Dan","ts":"2019-05-23T13:19:33.339Z"}
{"msg":"GitHub has a degenerate UI","username":"rjones","ts":"2019-05-23T13:36:57.601Z"}
{"msg":"I just hope it doesn't get as bad as gerrit.","username":"Dan","ts":"2019-05-23T13:41:01.685Z"}
{"msg":"It would be bad. Thankfully, gerrithub already exists","username":"rjones","ts":"2019-05-23T13:42:37.665Z"}
{"msg":"Where should the artifacts from a CD pipeline be deployed?","username":"MALodder","ts":"2019-05-23T15:13:10.954Z"}
{"msg":"specifically libursa.so, libursa.dylib, libursa.dll","username":"MALodder","ts":"2019-05-23T15:14:55.158Z"}
{"msg":"deb, rpm, msi files","username":"MALodder","ts":"2019-05-23T15:15:14.262Z"}
{"msg":"in sawtooth we only officially produce debs and those go into an ubunto repo (i.e. apt not a git repo)\nNot sure what to do in this case given there's so many artifacts. Maybe a good question to float in the CI/CD committee? I think they meet tomorrow morning.","username":"Dan","ts":"2019-05-23T15:58:33.414Z"}
{"msg":"I thought hyperledger had it's own artifact repo? ","username":"cam-parra","ts":"2019-05-23T16:39:11.918Z"}
{"msg":"we have nexus3","username":"rjones","ts":"2019-05-23T16:44:31.954Z"}
{"msg":"we have nexus3 https://nexus3.hyperledger.org/ also nexus2: https://nexus.hyperledger.org/","username":"rjones","ts":"2019-05-23T16:44:31.954Z"}
{"msg":"RustCrypto team just release a general purpose API for signatures that we could use\nhttps://github.com/RustCrypto/signatures","username":"MALodder","ts":"2019-05-23T17:03:24.405Z"}
{"msg":"Have you audited the code base? ","username":"cam-parra","ts":"2019-05-23T17:09:42.251Z"}
{"msg":"its just traits","username":"MALodder","ts":"2019-05-23T17:10:27.442Z"}
{"msg":"API definition","username":"MALodder","ts":"2019-05-23T17:10:35.147Z"}
{"msg":"no actual code","username":"MALodder","ts":"2019-05-23T17:10:47.696Z"}
{"msg":"nothing to audit","username":"MALodder","ts":"2019-05-23T17:10:53.180Z"}
{"msg":"its very small but I like the interface definitions","username":"MALodder","ts":"2019-05-23T17:11:03.446Z"}
{"msg":"Silly me. I browsed through it and it looks very clean  ","username":"cam-parra","ts":"2019-05-23T17:12:58.809Z"}
{"msg":"https://t.co/mobVot8zgB?amp=1","username":"kdenhartog","ts":"2019-05-24T07:38:33.428Z"}
{"msg":"Microsoft Research paper just released of a zkSNARK without a trusted setup","username":"kdenhartog","ts":"2019-05-24T07:39:17.137Z"}
{"msg":"From Figure 1 in paper, the proving time seems worse than Bulletproofs (n.logn vs n) in some cases or same at best. You can trade-off proof size with verification time. I haven't looked at Dmitry improvement paper in detail but i think it offers a similar tradeoff (originally described in an older paper from Bootle to build ZK proof for arithematic circuits). The above paper generalizes the tradeoff whereas Dmitry's paper uses a square root tradeoff (It probably can be generalized too). So its not exciting in terms of the results. Maybe something can be learned from the techniques.","username":"lovesh","ts":"2019-05-24T10:57:46.378Z"}
{"msg":"From Figure 1 in paper, the proving time seems worse than Bulletproofs (n.logn vs n) in some cases or same at best. You can trade-off proof size with verification time. I haven't looked at Dmitry improvement paper in detail but i think it offers a similar tradeoff (originally described in an older paper from Bootle to build ZK proof for arithematic circuits). The above paper generalizes the tradeoff whereas Dmitry's paper uses a square root tradeoff (It probably can be generalized too). So its not exciting in terms of the results. Maybe something can be learned from the techniques.\n","username":"lovesh","ts":"2019-05-24T10:58:01.099Z"}
{"msg":"Thanks for the link @kdenhartog ","username":"Dan","ts":"2019-05-24T20:27:07.048Z"}
{"msg":"Is there a generalization across these for avoiding the CRS?","username":"Dan","ts":"2019-05-24T20:27:21.662Z"}
{"msg":"@lovesh Could you explain why you'd want to do a proof-size and verification time trade off?","username":"cam-parra","ts":"2019-05-24T21:06:17.609Z"}
{"msg":"in a blockchain you generally want to minimize what you have to send and verify, but there's a lot of other applications that have nothing to do with blockchains. Even with a blockchain you might have small clients and want to minimize the prover cost.","username":"Dan","ts":"2019-05-25T14:22:15.306Z"}
{"msg":"@cam-parra If you want to persist the proof for long periods of time, you want to minimize the proof size","username":"lovesh","ts":"2019-05-25T21:07:18.247Z"}
{"msg":"Hi everyone, I'm interested in familiarizing myself with the Ursa codebase. At the moment, I have a couple of questions: \n\n1. I noticed that there seem to be two major parts to `libursa` -- `BLS` and `CL`. What do these stand for?\n2. Does the `libursa` C API currently provide functions for ed25519 signing? \n\nThanks!","username":"alexmatson","ts":"2019-05-26T11:49:42.099Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=AwucufHXFLL8j9Whd) @alexmatson I believe I can answer the first question. `BLS` is the Boneh-Lynn-Shachem signature. `CL` is the Camenisch-Lysyanskaya signature. ","username":"brentzundel","ts":"2019-05-26T12:17:23.005Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=AwucufHXFLL8j9Whd","url":"https://chat.hyperledger.org/channel/ursa?msg=AwucufHXFLL8j9Whd","remote":true,"fileId":null,"fileName":null}]}
{"msg":"The answer to #2 is yes","username":"MALodder","ts":"2019-05-27T15:54:28.160Z"}
{"msg":"@MALodder I can't seem to find them. I see FFI bindings for BLS and CL, but not for ed25519. Am I looking in the right place? (`libursa/src/ffi/`).","username":"alexmatson","ts":"2019-05-27T19:39:22.380Z"}
{"msg":"@alexmatson Sorry I misunderstood, no we don't have FFI for ed25519. But you can use libsodium for that","username":"MALodder","ts":"2019-05-29T00:05:49.737Z"}
{"msg":"what's your use case","username":"MALodder","ts":"2019-05-29T00:05:56.054Z"}
{"msg":"@here Just a reminder of tomorrow morning's meeting!  Hope to talk to many of you tomorrow.  Thanks!","username":"hartm","ts":"2019-05-29T04:21:09.695Z"}
{"msg":"@MALodder is there an updated agenda?","username":"cam-parra","ts":"2019-05-29T13:46:37.829Z"}
{"msg":"see the wiki","username":"MALodder","ts":"2019-05-29T13:46:47.592Z"}
{"msg":"Zoom meeting link   https://zoom.us/my/hyperledger.community","username":"danintel","ts":"2019-05-29T14:01:06.446Z"}
{"msg":"From the call this morning, I'll reiterate here, if there is any feature or platform artifact that teams or individuals need from ursa, unless we know about we will move forward with the needs we do know about","username":"MALodder","ts":"2019-05-29T15:13:26.460Z"}
{"msg":"As request on the ursa call this morning, here is the initial document on ZKLang https://docs.google.com/document/d/1CLdkd70Mfa-AhnrqwTMVwBdF-HdvVNBiOKcq13lPstY/edit?usp=sharing","username":"MALodder","ts":"2019-05-29T15:20:15.147Z"}
{"msg":"I was recently accepted into Hyperledger's internship program. My upcoming project is to integrate Ursa's crypto into HL Iroha, and at the moment I'm just trying to get a feel for what the details of that integration are going to look like. Iroha is a C++ codebase and mainly uses ed25519 with SHA-3 (I know the SHA-3 part is also going to be a separate challenge here) as their signature scheme.","username":"alexmatson","ts":"2019-05-29T15:21:01.679Z"}
{"msg":"Okay, I see, Well we can work on this. This is a pretty easy feature request","username":"MALodder","ts":"2019-05-29T15:22:53.314Z"}
{"msg":"what's the motive to use SHA3 over SHA2 for the signature","username":"MALodder","ts":"2019-05-29T15:24:16.450Z"}
{"msg":"My mentor told me they chose SHA-3 because it is the latest standard, and it would be easier to start with SHA-3 than migrate it to later if they started with SHA-2. He also said it is more resistant to birthday attacks. ","username":"alexmatson","ts":"2019-05-29T15:35:23.938Z"}
{"msg":"it is but its slower","username":"MALodder","ts":"2019-05-29T15:35:40.570Z"}
{"msg":"So ursa currently uses the dalek library to do Ed25519","username":"MALodder","ts":"2019-05-29T15:48:37.340Z"}
{"msg":"you can use SHA3 to hash the message then use SHA2 to compute the signature","username":"MALodder","ts":"2019-05-29T15:49:08.199Z"}
{"msg":"But there isn't a library right now that uses any 512-bit hash to compute ed25519","username":"MALodder","ts":"2019-05-29T15:49:27.420Z"}
{"msg":"you would have to write that by hand","username":"MALodder","ts":"2019-05-29T15:49:36.662Z"}
{"msg":"libsodium uses Sha2 as does Dalek","username":"MALodder","ts":"2019-05-29T15:49:49.080Z"}
{"msg":"So you should ask if that is still okay","username":"MALodder","ts":"2019-05-29T15:51:54.286Z"}
{"msg":"Does the fabric project have any plans for adopting URSA? ","username":"cam-parra","ts":"2019-05-29T15:54:18.118Z"}
{"msg":"Currently, our tentative plan is to modify dalek and make the choice of hash configurable between SHA2/SHA3 (similar to this previous PR submitted to the library https://github.com/dalek-cryptography/ed25519-dalek/pull/73). Then raise an issue/PR and try to convince the maintainers that this is beneficial enough to merge it upstream. \n","username":"alexmatson","ts":"2019-05-29T15:58:46.012Z"}
{"msg":"Admittedly, I'm somewhat of a beginner to cryptography so I think I need to do some research into your suggestion of computing the signature with SHA-2 but having the message hashed with SHA-3. Do you think this would provide the same results as using SHA-3 directly in the signing functions? ","username":"alexmatson","ts":"2019-05-29T15:59:08.414Z"}
{"msg":"most of the crypto community that I'm aware of are refusing to adopt sha3 for now because its significantly slower","username":"MALodder","ts":"2019-05-29T15:59:33.525Z"}
{"msg":"No it would not","username":"MALodder","ts":"2019-05-29T15:59:55.845Z"}
{"msg":"Hm, I see. Thank you for taking the time to help me, I appreciate it. I'll talk to my mentor more about different options. The problem I see at the moment is I think Iroha is already using SHA-3, so modifying the signature scheme might break existing use cases. ","username":"alexmatson","ts":"2019-05-29T16:02:45.092Z"}
{"msg":"They’re using ed25519 with sha3 can you point me to their source code?","username":"MALodder","ts":"2019-05-29T16:04:20.472Z"}
{"msg":"https://github.com/hyperledger/iroha/tree/master/shared_model/cryptography/ed25519_sha3_impl","username":"alexmatson","ts":"2019-05-29T16:06:03.682Z"}
{"msg":"oh man, it looks to me like the eddsa isn't even implemented correctly","username":"MALodder","ts":"2019-05-29T19:16:10.358Z"}
{"msg":"they are using Sha3_256 to hash the message then computing the signature on that","username":"MALodder","ts":"2019-05-29T19:28:09.437Z"}
{"msg":"its not true ed25519","username":"MALodder","ts":"2019-05-29T19:28:17.236Z"}
{"msg":"with sha3","username":"MALodder","ts":"2019-05-29T19:28:19.992Z"}
{"msg":"if that's what iroha needs the ursa can do that without needing to modify the dalek libraries","username":"MALodder","ts":"2019-05-29T19:29:43.931Z"}
{"msg":"what do you mean it's not true ed25519 with sha3?","username":"Dan","ts":"2019-05-29T19:33:50.757Z"}
{"msg":"EdDSA says to compute a 512-bit hash from the nonce and the message to compute the scalar *r*, compute the point *R* by multiplying the base point by *r*. Then compute the 512-bit hash k that includes R, the public key and the message. Then multiply the private key by *k* and add it to *r* to arrive at *s*. The signature is R, s","username":"MALodder","ts":"2019-05-29T19:36:17.195Z"}
{"msg":"True Ed25519 would use sha3 for all computations of the 512 bit hash. ","username":"MALodder","ts":"2019-05-29T19:36:42.753Z"}
{"msg":"Iroha is just computing the Sha3_256 hash of the message then passing that to the signing algorithm","username":"MALodder","ts":"2019-05-29T19:37:04.343Z"}
{"msg":"The signing algorithm is using Sha2_512","username":"MALodder","ts":"2019-05-29T19:37:18.796Z"}
{"msg":"oh that's weird","username":"Dan","ts":"2019-05-29T19:37:36.606Z"}
{"msg":"right","username":"MALodder","ts":"2019-05-29T19:37:40.530Z"}
{"msg":"Most crypto engineers I talk to aren't using sha3 because \n1- Sha2 is still has adequate security\n2- Sha3 is much slower than Sha2","username":"MALodder","ts":"2019-05-29T19:38:22.039Z"}
{"msg":"So I don't know why they didn't just use the default","username":"MALodder","ts":"2019-05-29T19:38:39.662Z"}
{"msg":"It would be wise for iroha to add a domain separation string since they are hashing the message first","username":"MALodder","ts":"2019-05-29T19:39:16.889Z"}
{"msg":"if you still have it handy where's the point that they use sha2_512?","username":"Dan","ts":"2019-05-29T19:39:20.982Z"}
{"msg":"They are calling an external library ed25519","username":"MALodder","ts":"2019-05-29T19:39:59.491Z"}
{"msg":"I don't which implementation they are pulling because I can't find it in any of there build scripts","username":"MALodder","ts":"2019-05-29T19:40:28.330Z"}
{"msg":"I'm making an assumption that that library is correctly implementing the signature, which uses Sha2_512","username":"MALodder","ts":"2019-05-29T19:40:54.590Z"}
{"msg":"ok. this would all be easier if there was a single hyperledger project that consistently implemented crypto functions","username":"Dan","ts":"2019-05-29T19:41:22.125Z"}
{"msg":"right","username":"MALodder","ts":"2019-05-29T19:41:38.972Z"}
{"msg":"https://github.com/hyperledger/iroha/blob/master/shared_model/cryptography/ed25519_sha3_impl/internal/ed25519_impl.cpp#L6","username":"MALodder","ts":"2019-05-29T19:41:39.740Z"}
{"msg":"if only one existed","username":"MALodder","ts":"2019-05-29T19:41:45.659Z"}
{"msg":"oh wait","username":"MALodder","ts":"2019-05-29T19:41:48.069Z"}
{"msg":"this is why ursa was created","username":"MALodder","ts":"2019-05-29T19:41:52.565Z"}
{"msg":"oh! ;)","username":"Dan","ts":"2019-05-29T19:42:59.438Z"}
{"msg":"@MALodder I did some digging, and I think that external library they're using is their own implementation, which uses SHA3_512 within the signature as well: https://github.com/hyperledger/iroha-ed25519/","username":"alexmatson","ts":"2019-05-30T15:46:35.362Z"}
{"msg":"yep that does look like it","username":"MALodder","ts":"2019-05-30T15:54:58.325Z"}
{"msg":"Still its not advisable to implement custom signatures solely that Sha3 is newer than Sha2","username":"MALodder","ts":"2019-05-30T16:29:21.592Z"}
{"msg":"[Here](https://datatracker.ietf.org/doc/draft-ietf-mls-protocol/?include_text=1) is the latest draft for MLS that @kdenhartog wants feedback on","username":"MALodder","ts":"2019-05-30T16:31:05.578Z"}
{"msg":"Thank you @MALodder I still wasn't able to get around to that yet.","username":"kdenhartog","ts":"2019-05-30T19:08:51.846Z"}
{"msg":"A lot of methods in indy-crypto's as well as Ursa's FFI for anoncreds functions *return success even if there is an error*. This should not be the case. Or am i missing something? Have a look at this commit where i have fixed them in Ursa https://github.com/lovesh/ursa/commit/f8e04193e82bbe6737b1b2962ec7d019aeca0aa5. ","username":"lovesh","ts":"2019-06-04T08:01:31.908Z"}
{"msg":"A lot of methods in indy-crypto's as well as Ursa's FFI for anoncreds functions *return success even if there is an error*. This should not be the case. Or am i missing something? Have a look at this commit where i have fixed them in Ursa https://github.com/lovesh/ursa/commit/f8e04193e82bbe6737b1b2962ec7d019aeca0aa5 for the function names","username":"lovesh","ts":"2019-06-04T08:01:31.908Z"}
{"msg":"A lot of methods in indy-crypto's as well as Ursa's FFI for anoncreds functions *return success even if there is an error*. This should not be the case. Or am i missing something? Have a look at this commit where i have fixed them in Ursa https://github.com/lovesh/ursa/commit/a81a8f2a91f78f6ab19a3220a3788c151d651e70 for the function names","username":"lovesh","ts":"2019-06-04T08:01:31.908Z"}
{"msg":"Has joined the channel.","username":"the_identity_guy","ts":"2019-06-06T02:09:12.321Z","type":"uj"}
{"msg":"Has joined the channel.","username":"lebdron","ts":"2019-06-06T15:22:36.209Z","type":"uj"}
{"msg":"New PR https://github.com/hyperledger/ursa/pull/33","username":"MALodder","ts":"2019-06-06T19:43:48.609Z"}
{"msg":"If it works, then Iroha can use Ursa","username":"MALodder","ts":"2019-06-06T19:44:37.318Z"}
{"msg":"I say if because I don't know how Iroha will use the APIs so this was a initial stab","username":"MALodder","ts":"2019-06-06T19:44:55.768Z"}
{"msg":"Does indy actively use the CL based anon creds?","username":"Dan","ts":"2019-06-06T20:43:42.073Z"}
{"msg":"@MALodder looks like travis failed. maybe on cargo fmt.","username":"Dan","ts":"2019-06-06T20:46:16.503Z"}
{"msg":"> Does indy actively use the CL based anon creds?\nyes","username":"MALodder","ts":"2019-06-06T20:46:34.340Z"}
{"msg":">MALodder looks like travis failed. maybe on cargo fmt.\nRight I got an email back from the ffi-support crate authors saying what I'm doing for inputs is not considered safe","username":"MALodder","ts":"2019-06-06T20:47:08.826Z"}
{"msg":"so I need to rework it","username":"MALodder","ts":"2019-06-06T20:47:16.540Z"}
{"msg":"I CC'd you on that email","username":"MALodder","ts":"2019-06-06T20:47:21.012Z"}
{"msg":"let me know if you didn't get it","username":"MALodder","ts":"2019-06-06T20:47:26.520Z"}
{"msg":"it's in the recent pile ;)","username":"Dan","ts":"2019-06-06T20:47:34.968Z"}
{"msg":"just wanted you to know that travis barfed in case you were waiting on it.","username":"Dan","ts":"2019-06-06T20:48:11.026Z"}
{"msg":"@MALodder I have a github account again! Could we remove the user cam-parra from ursa maintainers and add mac-arrap ? ","username":"cam-parra","ts":"2019-06-06T20:48:40.351Z"}
{"msg":"sure","username":"MALodder","ts":"2019-06-06T20:48:49.090Z"}
{"msg":"I can do visual confirmation if needed ","username":"cam-parra","ts":"2019-06-06T20:50:07.215Z"}
{"msg":"anyone remember the link to find the ursa maintainers list","username":"MALodder","ts":"2019-06-06T20:53:24.519Z"}
{"msg":"is this it? https://github.com/orgs/hyperledger/teams/ursa-maintainers/members","username":"MALodder","ts":"2019-06-06T20:54:22.567Z"}
{"msg":"I believe that's what @rjones gave us","username":"cam-parra","ts":"2019-06-06T20:54:53.944Z"}
{"msg":"Could @mac-arrap also be added to the hyperledger organization? ","username":"cam-parra","ts":"2019-06-06T20:56:07.768Z"}
{"msg":"Cam, it says you aren't a member of hyperledger yet","username":"MALodder","ts":"2019-06-06T20:57:36.944Z"}
{"msg":"so when you are then I can add you back in","username":"MALodder","ts":"2019-06-06T20:57:46.996Z"}
{"msg":"No worries I think that @rjones or @dhuseby can add me ","username":"cam-parra","ts":"2019-06-06T20:59:14.986Z"}
{"msg":"@cam-parra do you have 2FA setup?","username":"dhuseby","ts":"2019-06-06T20:59:43.279Z"}
{"msg":"do that first","username":"dhuseby","ts":"2019-06-06T20:59:46.013Z"}
{"msg":"Will do.... gonna make sure to save these keys on all my devices now :rolling_on_the_floor_laughing: ","username":"cam-parra","ts":"2019-06-06T21:00:22.188Z"}
{"msg":"","username":"dhuseby","ts":"2019-06-06T21:01:15.265Z","attachments":[{"type":"file","title":"kHZygKMeGRMzCA4yEjsS.jpeg","title_link":"/file-upload/4FrZcnDNKsX7ww5Dc/kHZygKMeGRMzCA4yEjsS.jpeg","image_url":"/file-upload/4FrZcnDNKsX7ww5Dc/kHZygKMeGRMzCA4yEjsS.jpeg","image_type":"image/jpeg","image_size":4857032,"url":"/file-upload/4FrZcnDNKsX7ww5Dc/kHZygKMeGRMzCA4yEjsS.jpeg","remote":false,"fileId":"4FrZcnDNKsX7ww5Dc","fileName":"kHZygKMeGRMzCA4yEjsS.jpeg"}]}
{"msg":"@cam-parra I'm seeing you in the HL org already on github","username":"dhuseby","ts":"2019-06-06T21:01:29.049Z"}
{"msg":"it says you have 2FA enabled","username":"dhuseby","ts":"2019-06-06T21:01:35.031Z"}
{"msg":"I lost access to that account due to losing codes to 2FA (were on on my EV machine)  so I had them remove my email from that account and I made a new one ","username":"cam-parra","ts":"2019-06-06T21:02:31.651Z"}
{"msg":"you can't have them recover your account?","username":"dhuseby","ts":"2019-06-06T21:02:57.018Z"}
{"msg":"ok","username":"dhuseby","ts":"2019-06-06T21:03:00.389Z"}
{"msg":"whatever","username":"dhuseby","ts":"2019-06-06T21:03:03.089Z"}
{"msg":"what's your new github username?","username":"dhuseby","ts":"2019-06-06T21:03:09.573Z"}
{"msg":"no they refuse to let me recover it... kinda dumb ","username":"cam-parra","ts":"2019-06-06T21:03:39.572Z"}
{"msg":"my new account is mac-arrap 2fa is enabled","username":"cam-parra","ts":"2019-06-06T21:05:07.576Z"}
{"msg":"lol","username":"dhuseby","ts":"2019-06-06T21:11:39.980Z"}
{"msg":"ok one sec","username":"dhuseby","ts":"2019-06-06T21:11:42.623Z"}
{"msg":"@cam-parra invite sent","username":"dhuseby","ts":"2019-06-06T21:12:29.925Z"}
{"msg":"accepted now @MALodder can work his magic","username":"cam-parra","ts":"2019-06-06T21:14:09.340Z"}
{"msg":"Alright we are good to go. I am working on transferring ownership of the python-ursa code right now  ","username":"cam-parra","ts":"2019-06-06T21:30:19.749Z"}
{"msg":"right","username":"dhuseby","ts":"2019-06-06T21:43:51.240Z"}
{"msg":"awesome","username":"dhuseby","ts":"2019-06-06T21:43:54.031Z"}
{"msg":"I updated PR 33. It has a safer method for FFI for now","username":"MALodder","ts":"2019-06-06T22:01:03.334Z"}
{"msg":"once ffi-support crate adds FfiSlice or something like it we can switch to that","username":"MALodder","ts":"2019-06-06T22:01:21.520Z"}
{"msg":"but that interface should be enough for Iroha to use ursa ","username":"MALodder","ts":"2019-06-06T22:01:33.332Z"}
{"msg":"Wow, thanks @MALodder! Those bindings should work well :) ","username":"alexmatson","ts":"2019-06-06T22:06:00.241Z"}
{"msg":"I believe Ursa is now the only project to expose the Dalek libraries over FFI","username":"MALodder","ts":"2019-06-06T22:07:20.042Z"}
{"msg":"I might try a little later tonight to see if I can eliminate Pointers and size values","username":"MALodder","ts":"2019-06-06T22:08:03.313Z"}
{"msg":"But for now Iroha should be good to go","username":"MALodder","ts":"2019-06-06T22:08:53.899Z"}
{"msg":"Once That PR is acceptable of course","username":"MALodder","ts":"2019-06-06T22:09:09.424Z"}
{"msg":"Has joined the channel.","username":"circlespainter","ts":"2019-06-07T11:02:14.039Z","type":"uj"}
{"msg":"@hartm did you initialize a TSC update for ursa?","username":"Dan","ts":"2019-06-10T13:25:07.056Z"}
{"msg":"@Dan I can contribute to the quarterly report, do you have a doc somewhere to edit?","username":"MALodder","ts":"2019-06-10T14:04:43.746Z"}
{"msg":"that's what i was wondering if hart had initialized. It should be somewhere like here: https://wiki.hyperledger.org/display/HYP/TSC+Project+Updates\n","username":"Dan","ts":"2019-06-10T14:12:20.508Z"}
{"msg":"@Dan Not yet, but I'll do it today.","username":"hartm","ts":"2019-06-10T18:42:41.027Z"}
{"msg":"@rjones I'm having a hard time getting the meeting agenda to show up on the menu in the wiki page.  Is there a known bug on this?  My agenda isn't showing up in the hierarchy, and when I open it and click \"view in hierarchy\" the website hangs.  Thanks!","username":"hartm","ts":"2019-06-11T16:01:38.409Z"}
{"msg":"@hartm could you give me a link to the page that isn't showing up?","username":"rjones","ts":"2019-06-11T17:09:53.131Z"}
{"msg":"@hartm there should be a template you can use too: ","username":"Dan","ts":"2019-06-11T18:34:59.118Z"}
{"msg":"","username":"Dan","ts":"2019-06-11T18:35:09.591Z","attachments":[{"type":"file","title":"agenda template","title_link":"/file-upload/f4mCtuDgHtJgDspvi/agenda%20template","image_url":"/file-upload/f4mCtuDgHtJgDspvi/agenda%20template","image_type":"image/png","image_size":25642,"url":"/file-upload/f4mCtuDgHtJgDspvi/agenda%20template","remote":false,"fileId":"f4mCtuDgHtJgDspvi","fileName":"agenda template"}]}
{"msg":"","username":"hartm","ts":"2019-06-11T20:20:02.100Z","attachments":[{"type":"file","title":"wiki-error.png","title_link":"/file-upload/sjoezHhixgJKbMYai/wiki-error.png","image_url":"/file-upload/sjoezHhixgJKbMYai/wiki-error.png","image_type":"image/png","image_size":196881,"url":"/file-upload/sjoezHhixgJKbMYai/wiki-error.png","remote":false,"fileId":"sjoezHhixgJKbMYai","fileName":"wiki-error.png"}]}
{"msg":"Note the arrow pointing to the \"infinite ring of delay\".","username":"hartm","ts":"2019-06-11T20:20:18.013Z"}
{"msg":"weird","username":"rjones","ts":"2019-06-11T20:29:48.474Z"}
{"msg":"What's the maximum number of gates that would be relevant for use cases people are looking at?","username":"Dan","ts":"2019-06-11T20:49:36.419Z"}
{"msg":"80/20 rule is fine. I'm looking for a pragmatic upper bound.","username":"Dan","ts":"2019-06-11T20:51:02.399Z"}
{"msg":"Somehow our meeting slot got deleted from the calendar, and an email cancelling our meeting was sent out.  This is not what we want, and we would like to have our usual meeting tomorrow morning.  Can anyone from the LF advise on this?  Thanks!  @rjones @Silona @dhuseby ","username":"hartm","ts":"2019-06-12T00:22:40.066Z"}
{"msg":"yup","username":"dhuseby","ts":"2019-06-12T00:23:21.272Z"}
{"msg":"send email to community-architects@hyperledger.org","username":"Silona","ts":"2019-06-12T00:23:29.582Z"}
{"msg":"@hartm @Silona beat me to it","username":"dhuseby","ts":"2019-06-12T00:23:48.714Z"}
{"msg":"OK, thanks!","username":"hartm","ts":"2019-06-12T00:23:53.482Z"}
{"msg":"i was about to say that","username":"dhuseby","ts":"2019-06-12T00:23:54.675Z"}
{"msg":"Will they be able to fix it by tomorrow morning?","username":"hartm","ts":"2019-06-12T00:24:03.086Z"}
{"msg":"@hartm if you set up the calendar event and invite community-architects@hyperledger.org one of us can easily copy it to the hyperledger community calendar","username":"dhuseby","ts":"2019-06-12T00:24:34.536Z"}
{"msg":"set it up now","username":"dhuseby","ts":"2019-06-12T00:24:44.069Z"}
{"msg":"I'll copy it immediately","username":"dhuseby","ts":"2019-06-12T00:24:53.195Z"}
{"msg":"OK, thanks!","username":"hartm","ts":"2019-06-12T00:25:15.979Z"}
{"msg":"Can you add it to the zoom schedule?","username":"hartm","ts":"2019-06-12T00:25:27.395Z"}
{"msg":"I guess I set it up on google calendar?","username":"hartm","ts":"2019-06-12T00:25:39.390Z"}
{"msg":"Done.  I can't add in the zoom conferencing info though.","username":"hartm","ts":"2019-06-12T00:29:17.816Z"}
{"msg":"Invite:\nJoin Zoom Meeting\nhttps://zoom.us/j/4034983298 \n\nOne tap mobile\n+16699006833,,4034983298# US (San Jose)\n+16465588656,,4034983298# US (New York)\n\nDial by your location\n        +1 669 900 6833 US (San Jose)\n        +1 646 558 8656 US (New York)\n        855 880 1246 US Toll-free\n        877 369 0926 US Toll-free\nMeeting ID: 403 498 3298\nFind your local number: https://zoom.us/u/aeh29lGmA","username":"dhuseby","ts":"2019-06-12T00:33:58.452Z"}
{"msg":"use that","username":"dhuseby","ts":"2019-06-12T00:34:00.079Z"}
{"msg":"https://zoom.us/my/hyperledger.community \nhttps://zoom.us/j/4034983298","username":"dhuseby","ts":"2019-06-12T00:34:20.199Z"}
{"msg":"@hartm ^^^","username":"dhuseby","ts":"2019-06-12T00:34:24.588Z"}
{"msg":"I added it.  Thanks!  But community-architects has not accepted.","username":"hartm","ts":"2019-06-12T00:38:11.346Z"}
{"msg":"@hartm it's on the calendar now thanks","username":"rjones","ts":"2019-06-12T01:23:57.260Z"}
{"msg":"Thanks Ry!","username":"hartm","ts":"2019-06-12T01:58:57.067Z"}
{"msg":"Thanks Silona, Ry, and Dave.  Unfortunately now we have duplicate meetings on the calendar...","username":"hartm","ts":"2019-06-12T02:00:15.437Z"}
{"msg":"well - go to both?","username":"rjones","ts":"2019-06-12T02:00:28.617Z"}
{"msg":"I assume I should delete \"Hyperledger crypto-lib Discussion\" ?","username":"rjones","ts":"2019-06-12T02:00:55.183Z"}
{"msg":"_deletes \"Hyperledger crypto-lib Discussion\"_","username":"rjones","ts":"2019-06-12T02:01:41.759Z"}
{"msg":"Great.  Thanks!","username":"hartm","ts":"2019-06-12T02:01:59.596Z"}
{"msg":"@here Just a reminder for tomorrow's meeting.  Thanks to the LF staff for getting everything sorted out!","username":"hartm","ts":"2019-06-12T02:24:57.947Z"}
{"msg":"What's the maximum number of gates that would be relevant for use cases people are looking at?\n80/20 rule is fine. I'm looking for a pragmatic upper bound.","username":"Dan","ts":"2019-06-12T12:12:34.851Z"}
{"msg":"Assuming you mean multiplication gates, 10-15 K if using merkle trees","username":"lovesh","ts":"2019-06-12T13:00:04.584Z"}
{"msg":"https://zoom.us/my/hyperledger.community","username":"danintel","ts":"2019-06-12T13:44:40.111Z"}
{"msg":"https://i.stack.imgur.com/QP1F8.jpg","username":"Dan","ts":"2019-06-18T14:31:08.471Z"}
{"msg":"@danintel discussion in the sovrin crypto call today about finding an optimized bls12-381. We currently rely on Milagro's AMCL library which is designed to be portable. There's no asm, for example. Is that research something you'd like to do?","username":"Dan","ts":"2019-06-18T14:53:04.631Z"}
{"msg":"some subsequent discussion... zcash is the other known place for this code. it's currently slower but it's thought that optimization is in process there. I don't know whether they are interested in upstream commits, but that's another option. More expensive of course, than finding another implementation. ","username":"Dan","ts":"2019-06-18T15:01:22.188Z"}
{"msg":"Here's an interesting pairings library written in C https://github.com/herumi/mcl","username":"MALodder","ts":"2019-06-18T17:54:53.705Z"}
{"msg":"Has joined the channel.","username":"agunde","ts":"2019-06-19T16:23:53.526Z","type":"uj"}
{"msg":"Has joined the channel.","username":"arjanvaneersel","ts":"2019-06-20T19:06:36.539Z","type":"uj"}
{"msg":"Has joined the channel.","username":"chlsc","ts":"2019-06-21T05:39:35.032Z","type":"uj"}
{"msg":"Has joined the channel.","username":"RajkumarNatarajan","ts":"2019-06-22T04:25:43.821Z","type":"uj"}
{"msg":"Is this possible in Ursa? https://lm.facebook.com/l.php?u=https%3A%2F%2Fthehackernews.com%2F2019%2F06%2Fopenssh-side-channel-vulnerability.html%3Ffbclid%3DIwAR0Lu8wShyUmSv2wvsE0oMwyEkGtwkKASEDZ94QRWLgpSDJacv54H6beJXI&h=AT060yYI3MxIWBEd-HsvzZE6OrfUt54HoZhm9VPjP0s7EaGZBTGCXMN5a_QUWER0IUTDRQspqAvyZM4IfyXu4rCO6gv2JTEFlPfCIqYSPeOpT2n1YLR25W5m9UItdZz62KrOQl8iPnYFEA6T1x0TOyq188Vibo7JHo0lxQ5sKCULgURg8taebU32IEBYY1S1LWeXWgR2pCVnZAxtJewSzFfkUKXNhgFrdWbjKZAwOXN5hZhfEgoYhhzYvfBqJOjI0HurHqVXu9wuJS2zeYf-SaadHq-K4eBgK6CDY-s9XjhQETYxbbHcV98H5buRbiE8DWwrT2zG5NcaWpqP9LSTpvW-Sbi24CfUGFNu9v4Dmodm6f3QpYDr1rDUh5VzKsXS-73xIoD4N6tJjK2l883hCCJep_7qXJyqL_j6LmQus8_VdMMNH2JqsbXVzTBZGM2zlKcx3EO002kAM4lT64AI2xNTpYjFmyNasSVmpBZfp_i1oKeUXdJuhUZ4AhN2uz8TXrVyfpU4bIF7DlNVKaXWkkMZQi63LXQvvlDi-twbbsf5OprE-XZ57fA4MHkjvlbiQ5vbtqsPSU4PC6nBMruwkeV0aUMkm9bMYlV3VPOLVfr4AQ_guqo2hNS2YBbkRys_8BpAmIux43TF1CcpHuYdF09AIwkW-L4kiqMH1G2BlUJVgHAYzQo_8tSTs6_Gh31YV45ooNTynUGNfeD9INmTuJzTrOEyfB6Xy5zbv7IW--PynG8cGp6XRgYyZfdFoNC-aQfCoMHekYpGLjcpKMZN286rP0o6tB4xlo36JWCfClZQmXGST2qzuz81VVYh8tB__y1Z_4eDxthsA9aZhBjY5n5OzEKXsNHLWGT4Ri5XzVnp-V1M_uE1g0JKjsu4Pm2zbDiJNfJYTEuPHfBB2andUNTYUknHKlp3asHLlzguIMkW1tWHP1OPgYVnENRprigPemRwuVmzciJjZ8Clkt0Z6orvoP8HM6eYTC6z9YPY245R_WjStwHn1wQLCHAAcoZxpJSjajccED1YWiozCK8TKKPcZhCA2fbwx845FaA59VjHZD_NZ5Eej4CD0A","username":"kdenhartog","ts":"2019-06-22T19:36:23.669Z"}
{"msg":"Is this possible in Ursa? https://thehackernews.com/2019/06/openssh-side-channel-vulnerability.html","username":"kdenhartog","ts":"2019-06-22T19:36:23.669Z"}
{"msg":"That's essentially a mid-level paranoia use case for HSMs or Secure Elements - at a certain point shared DRAM is ALWAYS vulnerable and a dedicated compute unit with the keys offloaded from the main application is your only option.  The system protections get better all the time, making these attacks quite fanciful for a while, until the attacks get better again (usually around August every year ;-) ) then you're screwed again for a while.","username":"JonGeater","ts":"2019-06-23T18:33:20.770Z"}
{"msg":"Has joined the channel.","username":"verasnt","ts":"2019-06-25T12:45:25.441Z","type":"uj"}
{"msg":"Hi guys, sorry I’m going to be offline again today but I should be getting back to normal service from next week and will pick up the TEE stuff again","username":"JonGeater","ts":"2019-06-26T13:26:02.706Z"}
{"msg":"I'm also looking less likely to make today's meeting I wonder if we should just cancel. Hart is going as well.","username":"Dan","ts":"2019-06-26T13:42:31.831Z"}
{"msg":"Sorry that should read hart is gone as well","username":"Dan","ts":"2019-06-26T13:42:52.259Z"}
{"msg":"Notes from today's meeting\n\nUrsa Meeting Notes\n==================\nDiscussed PRs:\n    - Lovesh Bulletpoof\n        - Add more tests and code documentation\n    - Anoncreds 1.0\n        - Belongs in ursa-docs repo\n\nDfinity has interest in ZMix with BBS+ signatures\nUnbound agreed to help with PKCS11 interface when the RFC is created and keep their tech as an implementation outside of Ursa\n    - Unbound will reach to ursa group and Jon Geater\nManu Drijvers said there is no licensing restrictions around https://eprint.iacr.org/2019/514.pdf\n    - Algorand probably making implementation in Rust\nManu Drijvers to see if he can get his paper about threshold PS signatures on eprint.\nZKLang spec to be done in Latex in ursa-docs.","username":"MALodder","ts":"2019-06-26T16:57:51.583Z"}
{"msg":"There seems to be a growing interest in the PKCS11 interface. I would propose we work on this as an RFC and have @Dan and @JonGeater lead it. I'm not the most familiar PKCS11 so I'm not the most qualified to lead it. I believe @Dan with intel's work on SGX and @JonGeater are the most qualified to lead that effort. I want to participate from an implementation and usability side of things.\n\nSorry to nominate @Dan and @JonGeater in there absence","username":"MALodder","ts":"2019-06-26T17:02:49.691Z"}
{"msg":"There seems to be a growing interest in the PKCS11 interface. I would propose we work on this as an RFC and have @Dan and @JonGeater lead it. I'm not the most familiar PKCS11 so I'm the most qualified to lead it. I believe @Dan with intel's work on SGX and @JonGeater are the most qualified to lead that effort. I was to participate from an implementation and usability side of things.\n\nSorry to nominate @Dan and @JonGeater in there absence","username":"MALodder","ts":"2019-06-26T17:02:49.691Z"}
{"msg":"There seems to be a growing interest in the PKCS11 interface. I would propose we work on this as an RFC and have @Dan and @JonGeater lead it. I'm not the most familiar PKCS11 so I'm not the most qualified to lead it. I believe @Dan with intel's work on SGX and @JonGeater are the most qualified to lead that effort. I was to participate from an implementation and usability side of things.\n\nSorry to nominate @Dan and @JonGeater in there absence","username":"MALodder","ts":"2019-06-26T17:02:49.691Z"}
{"msg":"Haha no worries it was inevitable 😄","username":"JonGeater","ts":"2019-06-26T17:30:42.257Z"}
{"msg":"Due punishment for shirking the meeting ;)","username":"Dan","ts":"2019-06-26T18:46:08.849Z"}
{"msg":"Beatings will continue until morale improves","username":"MALodder","ts":"2019-06-26T18:46:22.969Z"}
{"msg":"a newbie question about the libzmix...what's typical usage scenario this lib is designed for? would it replace zero knowledge proof implementation in other hyperledger project for example the idemix in hyperledger fabric?","username":"huxiangdong","ts":"2019-06-27T02:56:41.466Z"}
{"msg":"Has joined the channel.","username":"Dhiraj1990","ts":"2019-06-27T09:58:12.070Z","type":"uj"}
{"msg":"How do i implement ursa ?\nI have followed all steps mentioned on this document.\nhttps://github.com/hyperledger/ursa","username":"Dhiraj1990","ts":"2019-06-27T09:58:14.816Z"}
{"msg":"Has left the channel.","username":"sklump","ts":"2019-06-27T10:20:39.558Z","type":"ul"}
{"msg":"I am not able to understand how do i proceed ahead ?","username":"Dhiraj1990","ts":"2019-06-27T10:22:40.854Z"}
{"msg":"Has joined the channel.","username":"pschwarz","ts":"2019-06-27T14:14:44.448Z","type":"uj"}
{"msg":"Has joined the channel.","username":"george.aristy","ts":"2019-06-27T18:51:38.242Z","type":"uj"}
{"msg":"Has joined the channel.","username":"rhall9090","ts":"2019-06-28T16:25:24.627Z","type":"uj"}
{"msg":"yes, however, its up to fabric, indy, sawtooth, etc. to actually use it","username":"MALodder","ts":"2019-07-01T14:29:14.403Z"}
{"msg":"what do you mean by implement ursa? Do you mean use it for your project?","username":"MALodder","ts":"2019-07-01T14:29:43.550Z"}
{"msg":"@hartm  @MALodder Here is the Rust (WIP i think) implementation of const time hash on BLS curves https://github.com/kwantam/bls_sigs_ref/blob/master/rust-impl/src/lib.rs. It is by one of the authors of the paper","username":"lovesh","ts":"2019-07-02T12:58:59.966Z"}
{"msg":"Has joined the channel.","username":"Khaled.MH","ts":"2019-07-02T16:06:18.490Z","type":"uj"}
{"msg":"thanks!","username":"huxiangdong","ts":"2019-07-03T03:04:27.535Z"}
{"msg":"Has left the channel.","username":"rjones","ts":"2019-07-08T18:09:03.882Z","type":"ul"}
{"msg":"For anyone interested in writing R1CS circuits, a great presentation by one of Zcash employees https://youtu.be/Uug5p05_wqs","username":"lovesh","ts":"2019-07-09T10:12:53.428Z"}
{"msg":"one example of multi-license https://github.com/hyperledger/sawtooth-core/blob/master/LICENSE","username":"Dan","ts":"2019-07-10T14:16:40.034Z"}
{"msg":"Thanks","username":"lovesh","ts":"2019-07-11T10:51:02.917Z"}
{"msg":"Has joined the channel.","username":"sumodgeorge","ts":"2019-07-13T13:25:29.165Z","type":"uj"}
{"msg":"Has joined the channel.","username":"kukgini","ts":"2019-07-15T00:06:19.055Z","type":"uj"}
{"msg":"Has joined the channel.","username":"alexx","ts":"2019-07-15T03:22:57.161Z","type":"uj"}
{"msg":"@hartm here is another paper that would be helpful to go over with Riad https://eprint.iacr.org/2019/814.pdf","username":"MALodder","ts":"2019-07-15T12:33:29.304Z"}
{"msg":"@MALodder I saw that one.  We can ask him about it on Thursday.","username":"hartm","ts":"2019-07-15T14:10:06.598Z"}
{"msg":"Btw we dont check for incoming points on infinity or whether they have desired order. AMCL does not expose any API but we can do it the generic way of multiplying by curve order and comaring result with infinity","username":"lovesh","ts":"2019-07-15T14:37:57.597Z"}
{"msg":"Btw we dont check for incoming points on infinity or whether they have desired order in our BLS sig. AMCL does not expose any API but we can do it the generic way of multiplying by curve order and comaring result with infinity","username":"lovesh","ts":"2019-07-15T14:37:57.597Z"}
{"msg":"Btw we dont check for incoming points on infinity or whether they have desired order in our BLS sig. AMCL does not expose any API but we can do it the generic way of multiplying by curve order and comparing result with infinity","username":"lovesh","ts":"2019-07-15T14:37:57.597Z"}
{"msg":"are you talking about when we verify signatures in Indy?","username":"MALodder","ts":"2019-07-15T14:40:48.950Z"}
{"msg":"Yes, BLS sigs.","username":"lovesh","ts":"2019-07-15T14:42:44.548Z"}
{"msg":"But apart from a general good practice, don't know if that makes sense in case of sig verification. Thoughts?","username":"lovesh","ts":"2019-07-15T14:43:36.684Z"}
{"msg":"I'm not sure. I think because we are just checking if the signature is valid, we might be okay. However, could an attacker use a point at infinity to validate any signature?","username":"MALodder","ts":"2019-07-15T14:44:35.019Z"}
{"msg":"probably not point at infinity but if the sig lies in a small subgroup, could the private key be recovered?","username":"lovesh","ts":"2019-07-15T14:47:12.305Z"}
{"msg":"@hart ^^^","username":"lovesh","ts":"2019-07-15T14:47:18.859Z"}
{"msg":"@hartm  ^^^","username":"lovesh","ts":"2019-07-15T14:47:18.859Z"}
{"msg":"Elliptic curve groups used for cryptography pretty much always have prime order.  This means they don't have subgroups.","username":"hartm","ts":"2019-07-15T14:48:35.239Z"}
{"msg":"My point with Lovesh was that the point at infinity is often a cause of errors and vulnerabilities in crypto code and should be tested as an input to everything.","username":"hartm","ts":"2019-07-15T14:49:30.665Z"}
{"msg":"Does this statement apply to curves with cofactors?","username":"lovesh","ts":"2019-07-15T14:52:51.572Z"}
{"msg":"No.  Curves with cofactors that aren't equal to one aren't prime order.  However, we work over a prime order subgroup of these curves.","username":"hartm","ts":"2019-07-15T14:54:48.514Z"}
{"msg":"Sorry for generalizing too much there.","username":"hartm","ts":"2019-07-15T14:55:18.810Z"}
{"msg":"But you should always be working in a large prime order (sub-) group when using elliptic curves.","username":"hartm","ts":"2019-07-15T14:55:59.637Z"}
{"msg":"Ok. For curves with cofactor not equal to one like BLS381 or BN254, an attacker can construct a point satisfying curve equation but of small order. The question is if we ignore key exchange protocols, what are the attacks possible?","username":"lovesh","ts":"2019-07-15T14:58:55.802Z"}
{"msg":"The point is the actual \"group\" used for crypto is not the whole elliptic curve, but a subgroup of the group defined by the elliptic curve.  The subgroup--or actual group where crypto is done--has large prime order, so DLOG/CDH/DDH are still hard.  An attacker can solve these problems over the small order part of the group, but they aren't useful for breaking the cryptography, because the small order part of the bigger group is nonexistent in the subgroup.","username":"hartm","ts":"2019-07-15T15:01:17.501Z"}
{"msg":"Does that make sense?","username":"hartm","ts":"2019-07-15T15:01:20.986Z"}
{"msg":"To me it does","username":"MALodder","ts":"2019-07-15T15:02:06.100Z"}
{"msg":"I would recommend keeping a copy of https://www.amazon.com/Algebra-2nd-Michael-Artin/dp/0132413779 around the office for stuff like this.","username":"hartm","ts":"2019-07-15T15:02:26.389Z"}
{"msg":"I guess the call has started.","username":"hartm","ts":"2019-07-15T15:02:33.621Z"}
{"msg":"We should add the checks to the BLS code but it doesn't  sound urgent","username":"MALodder","ts":"2019-07-15T15:04:11.230Z"}
{"msg":"I am gonna try to ponder over this statement \"the small order part of the bigger group is nonexistent in the subgroup.\"","username":"lovesh","ts":"2019-07-15T15:05:32.766Z"}
{"msg":"going to spend time tomorrow reviewing https://github.com/hyperledger/ursa/pull/40\nCan someone remind me the specific motivating use case for inclusion in Ursa? ","username":"Dan","ts":"2019-07-15T15:10:44.125Z"}
{"msg":"https://eprint.iacr.org/2012/562.pdf","username":"lovesh","ts":"2019-07-15T15:42:46.694Z"}
{"msg":"One more https://www.researchgate.net/publication/261161894_Aggregate_Signature-Based_Efficient_Attributes_Proof_with_Pairing-Based_Anonymous_Credential","username":"lovesh","ts":"2019-07-15T15:43:37.021Z"}
{"msg":"Per roadmap discussion: https://wiki.hyperledger.org/display/ursa/Release+Planning+Feature+List","username":"Dan","ts":"2019-07-15T16:28:12.561Z"}
{"msg":"Incidentally I don't think we should maintain 3 sets of roadmap information ( the wiki, the docs repo, and Jira). I view that wiki page as a brainstorm list to generate items for the other two locations. The docs repo should include a high-level roadmap and jira should include epics based on that high-level roadmap with actionable stories at a finer grain.  \nFor that matter, we haven't really been using Jira extensively, so that's something we can discuss at the next meeting too. I think Jira is worthwhile only if we have an actively managed backlog. If our development culture is more about a few people self prioritizing things off the high-level roadmap, then jira is just overhead.","username":"Dan","ts":"2019-07-15T17:47:04.120Z"}
{"msg":"Has joined the channel.","username":"alank9","ts":"2019-07-15T23:20:37.147Z","type":"uj"}
{"msg":"Most important point is that the subgroup is Cyclic subgroup , which makes the subgroup of Finite Prime Order. Being Cyclic Subgroup , you can have a generator , that can provide you base point for the curve.","username":"ashutosh_kumar","ts":"2019-07-16T03:26:43.327Z"}
{"msg":"Has joined the channel.","username":"ViaSky","ts":"2019-07-17T17:27:03.144Z","type":"uj"}
{"msg":"@Dan Do you recall from the BLS discussion on Monday how Riad mentioned to use HKDF to hash to field elements instead of SHA256?","username":"MALodder","ts":"2019-07-18T15:33:47.930Z"}
{"msg":"he didn't specify the salt or key values","username":"MALodder","ts":"2019-07-18T15:34:04.737Z"}
{"msg":"so I'm wondering if we can use domain specific parameters for these values @hartm ","username":"MALodder","ts":"2019-07-18T15:34:22.185Z"}
{"msg":"as long as these values are decent size like 64 bytes each","username":"MALodder","ts":"2019-07-18T15:35:13.436Z"}
{"msg":"It was just to use HKDF in the obvious way.","username":"Dan","ts":"2019-07-18T15:57:36.184Z"}
{"msg":"lol are you going to let me get away with saying that? ;)","username":"Dan","ts":"2019-07-18T16:07:58.990Z"}
{"msg":"They made reference to this IETF draft...\nhttps://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-04","username":"Dan","ts":"2019-07-18T16:08:28.901Z"}
{"msg":"Right but the draft still shows SHA256","username":"MALodder","ts":"2019-07-18T16:44:27.359Z"}
{"msg":"what is the obvious way to use HKDF?","username":"MALodder","ts":"2019-07-18T16:44:37.844Z"}
{"msg":"HKDF uses a salt and key","username":"MALodder","ts":"2019-07-18T16:44:46.626Z"}
{"msg":"then takes an input","username":"MALodder","ts":"2019-07-18T16:44:51.518Z"}
{"msg":"I was joking :) There's nothing obvious.","username":"Dan","ts":"2019-07-18T17:21:39.061Z"}
{"msg":"@Dan I thought the joke was obvious","username":"MALodder","ts":"2019-07-18T17:44:52.490Z"}
{"msg":":wink: ","username":"MALodder","ts":"2019-07-18T17:44:57.716Z"}
{"msg":"I'm hoping @hartm will say we can just set domain specific parameters for the HKDF values so each consumer can reproduce the hashing to field elements","username":"MALodder","ts":"2019-07-18T17:45:43.562Z"}
{"msg":"I haven't studied it enough but I guess I would start with section 8.7 which specifies `sha256` and a `p` value and then use that as alluded to in 5.1 to produce `L` (I think `k` is 128? but that's probably specified in the bls12-381 defn.) and then do the extract/expand (hopefully already implemented by someone else) as described in https://tools.ietf.org/html/rfc5869 which refers to salt as optional. So yeah, just the obvious stuff. ;)","username":"Dan","ts":"2019-07-18T17:55:20.699Z"}
{"msg":"I haven't studied it enough but I guess I would start with section 8.7 which specifies `sha256` and a `p` value and then use that as alluded to in 5.1 to produce L (I think `k` is 128? but that's probably specified in the bls12-381 defn.) and then do the extract/expand (hopefully already implemented by someone else) as described in https://tools.ietf.org/html/rfc5869 which refers to salt as optional. So yeah, just the obvious stuff. ;)","username":"Dan","ts":"2019-07-18T17:55:20.699Z"}
{"msg":"But really emphasis on using an existing hkdf implementation.","username":"Dan","ts":"2019-07-18T17:57:44.820Z"}
{"msg":"(unless you really want to roll your own and then who am I to stop someone from having fun :D )","username":"Dan","ts":"2019-07-18T17:58:08.231Z"}
{"msg":"@lovesh first off, nice work on the paillier stuff. \nThere's nothing wrong with the banner you put in, but for future reference this is the official recommendation:\nhttps://wiki.hyperledger.org/display/HYP/Copyright+and+License+Policy\nMentioning here so everyone is familiar. \nThe copyright line is useful so if someone wants to use this file outside of Ursa, the file caries the attribution with it (which the downstream developer needs to advertise as part of the license requirements).\nThe spdx line is I guess just shorter than putting the whole license in. I would think the whole license is better than spdx but IANAL.","username":"Dan","ts":"2019-07-18T19:49:43.014Z"}
{"msg":"Has joined the channel.","username":"AxelNennker","ts":"2019-07-19T09:54:46.638Z","type":"uj"}
{"msg":"Thanks. Using the official recommendation now.\n","username":"lovesh","ts":"2019-07-19T10:16:35.506Z"}
{"msg":"@hartm @MALodder Did you have the call with Riad? If yes, did yoou guys ask why HKDF was preferred over SHAKE? Is it efficiency?","username":"lovesh","ts":"2019-07-19T10:17:49.520Z"}
{"msg":"@hartm @MALodder Did you have the call with Riad? If yes, did you guys ask why HKDF was preferred over SHAKE? Is it efficiency?","username":"lovesh","ts":"2019-07-19T10:17:49.520Z"}
{"msg":"Maybe a stupid question, aren't SignKeys usually secret and so should be zeroized after use?\nhttps://github.com/hyperledger/ursa/blob/master/libursa/src/bls/mod.rs#L67\nA problem is that some are handed over to C-code.\nAnyway, I think that at least the Rust examples should be written so that the sign keys are zeroized manually e.g. sign_key1 should be zeroized after being used here:\nhttps://github.com/hyperledger/ursa/blob/master/libursa/src/bls/mod.rs#L325\nAlso as_bytes should have a warning in the documentation and warning that the bytes are secret and should not be copied.\nAm I paranoid or is this a design decision because of the C-Code thing?","username":"AxelNennker","ts":"2019-07-19T10:22:37.400Z"}
{"msg":"Yes. Signing keys are not the only ones. There are other intermediate values that might need to be zeroed out depending on the protocol. IMO, a better but slightly expensive approach is to ensure that data is zeroed when it goes out of scope so that you don't explicitly forget to clear, eg https://github.com/lovesh/amcl_rust_wrapper/blob/remove-copying/src/field_elem.rs#L54. For smaller protocols explicitly clearing the data once you are done might be fine.","username":"lovesh","ts":"2019-07-19T11:01:52.983Z"}
{"msg":"On the examples you gave, the signing key is borrowed by signing algo so it cannot be cleared by the signing algo; the caller should clear it","username":"lovesh","ts":"2019-07-19T11:03:39.070Z"}
{"msg":"zeroize 0.9 now has a derive so that it is quite easy to zeroize stuff.","username":"AxelNennker","ts":"2019-07-19T11:03:55.337Z"}
{"msg":"On the C-API, i think you are right, Ursa provides a free method but that might be a bad thing","username":"lovesh","ts":"2019-07-19T11:04:42.890Z"}
{"msg":"On the C-API, i think you are right, Ursa provides a free method but that might now seems a bad thing","username":"lovesh","ts":"2019-07-19T11:04:42.890Z"}
{"msg":"On the C-API, i think you are right, Ursa provides a free method but that now seems like a bad thing","username":"lovesh","ts":"2019-07-19T11:04:42.890Z"}
{"msg":"I have heard but not used it. I use clear_on_drop but i see that zeroize is backed by some quite famous guys","username":"lovesh","ts":"2019-07-19T11:05:45.330Z"}
{"msg":"Probably to late to change the C-API. I don't like the free stuff, better let the caller provide the memory and fail if it is too small. That shouldn't be a problem too often because the size if fixed in ursa MODBYTES","username":"AxelNennker","ts":"2019-07-19T11:10:11.835Z"}
{"msg":"Probably too late to change the C-API. I don't like the free stuff, better let the caller provide the memory and fail if it is too small. That shouldn't be a problem too often because the size if fixed in ursa MODBYTES","username":"AxelNennker","ts":"2019-07-19T11:10:11.835Z"}
{"msg":"Yes I did. He said SHAKE would work as well. His main argument for HKDF was groups are either using it already and its easy to hook up SHA2 to it and they are unlikely to switch. He's mostly just concerned about having a stronger hiding method that sha2","username":"MALodder","ts":"2019-07-19T14:30:20.350Z"}
{"msg":"Thanks","username":"lovesh","ts":"2019-07-19T15:22:55.545Z"}
{"msg":"clear_on_drop requires compiling a C file. I have used zeroize in my PR https://github.com/hyperledger/ursa/pull/42/files#diff-ec778c91007df5961a4736dcc7844cc9R73","username":"MALodder","ts":"2019-07-19T15:25:35.530Z"}
{"msg":"I've also added that to indy-sdk before and I quite like zeroize plus I know Toni quite well","username":"MALodder","ts":"2019-07-19T15:25:56.607Z"}
{"msg":"he's a very good cryptographer","username":"MALodder","ts":"2019-07-19T15:26:04.536Z"}
{"msg":"I can update my PR to use shake256 which should be good enough","username":"MALodder","ts":"2019-07-19T15:33:28.657Z"}
{"msg":"Riad also said SHA3 would be fine since the sponge construction is better hiding than sha2","username":"MALodder","ts":"2019-07-19T15:33:52.801Z"}
{"msg":"I'm also fine leaving it for HKDF since a high entropy salt and key assists in hiding possible low entropy inputs","username":"MALodder","ts":"2019-07-19T15:34:28.332Z"}
{"msg":"Will you add zeroize support to SignKey?","username":"AxelNennker","ts":"2019-07-19T15:45:24.789Z"}
{"msg":"Best to update zeroize to 0.9.x and use the new features, I guess","username":"AxelNennker","ts":"2019-07-19T15:46:21.816Z"}
{"msg":"Can somebody explain why Ursa is using libsodium-ffi which libindy is using sodiumoxide which uses libsodium-sys?","username":"AxelNennker","ts":"2019-07-19T15:47:38.898Z"}
{"msg":"Maybe it doesn't matter","username":"AxelNennker","ts":"2019-07-19T15:47:53.361Z"}
{"msg":":shrug: afaik, indy has dropped / is dropping their crypto implementations and relying on ursa. and ursa is mostly indy crypto code at this point.","username":"Dan","ts":"2019-07-19T16:32:09.278Z"}
{"msg":"its only using that for testing","username":"MALodder","ts":"2019-07-19T17:44:58.242Z"}
{"msg":"it doesn't use libsodium other than compatibility tests","username":"MALodder","ts":"2019-07-19T17:45:25.397Z"}
{"msg":"Regarding amcl on crates.io https://crates.io/crates/amcl authored by nikita.khateev@dsr-corporation.com @KitHat : The repository link in that crate is a 404\nWhat is the relationship of that crate to ursa? ","username":"AxelNennker","ts":"2019-07-20T07:53:56.355Z"}
{"msg":"Has joined the channel.","username":"KitHat","ts":"2019-07-20T07:53:56.587Z","type":"uj"}
{"msg":"Rust Cryptography Working Group https://github.com/rust-lang/wg-governance/issues/12","username":"AxelNennker","ts":"2019-07-20T08:06:39.560Z"}
{"msg":"That crate was published by Evernym staff but is based on very old AMCL which has been removed from github now. The new AMCL codebase (https://github.com/miracl/amcl) does not have an official crate, maybe we should help them deploy one.","username":"lovesh","ts":"2019-07-20T17:21:31.180Z"}
{"msg":"Or publish the amcl.rs code from Ursa as its own crate? Maybe I am  mixing stuff up. I am confused about what ursa, indy-crypto and libindy/src/utils/crypto are. BTW, I think that base58 and base64 should not be 'under' crypto. That is dangerous, I think.","username":"AxelNennker","ts":"2019-07-20T21:26:08.572Z"}
{"msg":"But AMCL is evolving and we have to keep a mirror and keep it synced. But set up a deploy pipeline on their github to automate publishing. AMCL is a low level crypto library. Ursa should be able to use several such libraries.  You can now consider indy-crypto as deprecated. Indy might decide to use crypto other than Ursa or maybe add some convenience wrapper on Ursa code. Thats was `libindy/src/utils/crypto` is about. Didn't get the danger about putting base58 and base64 under crypto.","username":"lovesh","ts":"2019-07-21T07:16:19.290Z"}
{"msg":"But AMCL is evolving and we have to keep a mirror and keep it synced. Better set up a deploy pipeline on their github to automate publishing. AMCL is a low level crypto library. Ursa should be able to use several such libraries.  You can now consider indy-crypto as deprecated. Indy might decide to use crypto other than Ursa or maybe add some convenience wrapper on Ursa code. Thats was `libindy/src/utils/crypto` is about. Didn't get the danger about putting base58 and base64 under crypto.","username":"lovesh","ts":"2019-07-21T07:16:19.290Z"}
{"msg":"'dangerous' because 'real' cryptographers yell a people who might think that baseXX encoding is encryption. 'dangerous' because some developers think that baseXX encoding is encryption. Better avoid both by using baseXX directly and remove them from crypto/something.","username":"AxelNennker","ts":"2019-07-21T07:19:21.474Z"}
{"msg":"'dangerous' because 'real' cryptographers yell at people who might think that baseXX encoding is encryption. 'dangerous' because some developers think that baseXX encoding is encryption. Better avoid both by using baseXX directly and remove them from crypto/something.","username":"AxelNennker","ts":"2019-07-21T07:19:21.474Z"}
{"msg":"I am wondering why libindy/src/utils/crypto was not put into its own crate that then would be replaced by ursa.","username":"AxelNennker","ts":"2019-07-21T07:21:46.206Z"}
{"msg":"It seems that all three places are currently being developed which seems to be a waste of time.","username":"AxelNennker","ts":"2019-07-21T07:22:30.177Z"}
{"msg":"Ok :smile: I would be hesistant to let developers touch code that don't understand difference between encoding and encryption. But i do realize that base58/64 is misplaced and is bad from a code organisation point of view. ","username":"lovesh","ts":"2019-07-21T07:23:17.992Z"}
{"msg":"On libindy/src/utils/crypto being a separate crate, would people outisde libindy want to use it? ","username":"lovesh","ts":"2019-07-21T07:24:12.065Z"}
{"msg":"Well, I don't see any value in having a wrapper around base58 or base64. Indy should use those directly, I think","username":"AxelNennker","ts":"2019-07-21T07:24:29.114Z"}
{"msg":"I am speculating but maybe they wanted to make an Encoding interface and base58 or 64 will then be specializations. Maybe","username":"lovesh","ts":"2019-07-21T07:26:23.286Z"}
{"msg":"Regarding 'whould others use libindy/src/utils/crypto'. No need to publish the crate just put is next to libindy","username":"AxelNennker","ts":"2019-07-21T07:26:25.415Z"}
{"msg":"Abstraction has _some_ merits but not here, I think. If for example Verkey were redefined to use base64 instead of base58 then that would be another Verkey and I see no value in being this flexible.","username":"AxelNennker","ts":"2019-07-21T07:28:02.917Z"}
{"msg":"I am not a Rust expert so dumb question: whats the value of making it a crate in this case.","username":"lovesh","ts":"2019-07-21T07:28:08.538Z"}
{"msg":"To have it separate from libindy and then replace it with ursa.","username":"AxelNennker","ts":"2019-07-21T07:28:43.816Z"}
{"msg":"To have it separate and then replace it with ursa.","username":"AxelNennker","ts":"2019-07-21T07:28:43.816Z"}
{"msg":"I saw that many devs from Evernym, DSR, Sovrin are involved in amcl. You said 'help them to publish amcl as a crate'. Yes, why isn't that a crate already? Really the low-level stuff operating on bytes only. No fancy wrappers. Just what is in the github","username":"AxelNennker","ts":"2019-07-21T07:33:27.517Z"}
{"msg":"We should evaluate that code. Can you join the next Ursa call? But my point in general was that Ursa is meant to be generic and i think most projects will build their own thin convenince wrapper specific to their needs but invaluable to others.","username":"lovesh","ts":"2019-07-21T07:37:18.003Z"}
{"msg":"Yes but your keypair creation code will expect an encoding trait.","username":"lovesh","ts":"2019-07-21T07:38:42.366Z"}
{"msg":"On \"why isn't that a crate already\", based on the my interactions with the AMCL author, he is the only guy responsible for managing this codebase so lack of time.","username":"lovesh","ts":"2019-07-21T07:41:42.799Z"}
{"msg":"I hope that some common traits are evolving in Rust like Digest that is used by all cryptography crates so one implementation can be replaced by another as long as the trait is implemented.","username":"AxelNennker","ts":"2019-07-21T07:42:32.587Z"}
{"msg":"We didn't setup the CI in the first place but just published it. The code changed places since then.","username":"lovesh","ts":"2019-07-21T07:43:11.990Z"}
{"msg":"Seems to be in our interest to help him then. Maybe he is in his Python script world that allows amcl to be configured to have support for some or other curve or algoritm. That is not needed for Rust, I think, because of Rust's features. The readme.txt https://github.com/miracl/amcl/tree/master/version3 goes in that direction. So why not publich this crate as is on crates.io?","username":"AxelNennker","ts":"2019-07-21T07:45:49.384Z"}
{"msg":"Would you agree that @KitHat amcl should be replaced by this low-level amcl crate?","username":"AxelNennker","ts":"2019-07-21T07:47:34.088Z"}
{"msg":"I had actually tried a bit and failed using Travis CI. It was not picking up the security token correctly. I ended up  forking it for a mirror and publishing locally in the meantime. ","username":"lovesh","ts":"2019-07-21T07:49:43.892Z"}
{"msg":"The current AMCL crate should be fixed since its outdated and lot of fixes have been made since then","username":"lovesh","ts":"2019-07-21T07:50:03.291Z"}
{"msg":"Yes, some of that code does seem like useful to other folks like the password hashing","username":"lovesh","ts":"2019-07-21T07:52:54.981Z"}
{"msg":"One way to fix @KitHat 's amcl is to fix the 404 repository link by setting it to https://github.com/miracl/amcl/tree/master/version3 and then change the version to 0.3.0 and then 'just' publish that code. naive?","username":"AxelNennker","ts":"2019-07-21T07:53:36.591Z"}
{"msg":"But we need to polish it a bit. We should have a generic interface in Ursa for these ","username":"lovesh","ts":"2019-07-21T07:54:08.964Z"}
{"msg":"Ursa is a different matter. Ursa can then define or implement some useful trait that wraps amcl","username":"AxelNennker","ts":"2019-07-21T07:55:08.963Z"}
{"msg":"Doing it right (CI pipeline at miracl/amcl) does not seem to take much more effort so i prefer to do that. ","username":"lovesh","ts":"2019-07-21T07:56:44.404Z"}
{"msg":"I do not disagree with that.","username":"AxelNennker","ts":"2019-07-21T07:57:37.539Z"}
{"msg":"My point was not regarding Ursa. But provinding interfaces for high level functions like password hashing with option for various trafeoffs (mem/CPU, etc)","username":"lovesh","ts":"2019-07-21T07:58:14.584Z"}
{"msg":"If its not too much to ask, can i ask you to take a brief look at an amcl rust wrapper and see if that makes sense to you","username":"lovesh","ts":"2019-07-21T07:59:14.132Z"}
{"msg":"https://github.com/lovesh/amcl_rust_wrapper","username":"lovesh","ts":"2019-07-21T07:59:55.146Z"}
{"msg":"To be sure which code we are talking about could you please send a link","username":"AxelNennker","ts":"2019-07-21T08:00:02.401Z"}
{"msg":"above one","username":"lovesh","ts":"2019-07-21T08:00:14.230Z"}
{"msg":"Hm, parallel","username":"AxelNennker","ts":"2019-07-21T08:00:14.321Z"}
{"msg":"Its not just a wrapper but provides some other algos too.","username":"lovesh","ts":"2019-07-21T08:00:38.686Z"}
{"msg":"I will taka a look.","username":"AxelNennker","ts":"2019-07-21T08:01:39.436Z"}
{"msg":"I will take a a look.","username":"AxelNennker","ts":"2019-07-21T08:01:39.436Z"}
{"msg":"Thanks","username":"lovesh","ts":"2019-07-21T08:01:53.332Z"}
{"msg":"regarding other algos: Why not add them to amcl directly?","username":"AxelNennker","ts":"2019-07-21T08:02:23.421Z"}
{"msg":"The author prefers to have them in all languages and that seems like more work than i am willing to sign up for. I did make such a change in an extreme case though.","username":"lovesh","ts":"2019-07-21T08:03:39.330Z"}
{"msg":"I would create an issue https://github.com/miracl/amcl/issues like 'implement algo XYZ' and immediately send a PR for a Rust implementation. In the issue ask for help to implement in other languages. Usually people are nice and contribute.\n\nOr publish the alg in its own crate and create a git submodule in your wrapper and amcl ","username":"AxelNennker","ts":"2019-07-21T08:11:07.046Z"}
{"msg":"Alright. Will post here when i do so","username":"lovesh","ts":"2019-07-21T08:13:31.741Z"}
{"msg":"Next 'meeting' is on Wednesday, 24th, right? There is no agenda yet. https://wiki.hyperledger.org/display/ursa/","username":"AxelNennker","ts":"2019-07-22T09:00:54.469Z"}
{"msg":" @AxelNennker That's correct.","username":"hartm","ts":"2019-07-22T14:12:45.617Z"}
{"msg":"I'll create an agenda today.  Feel free to add what you like.","username":"hartm","ts":"2019-07-22T14:13:03.668Z"}
{"msg":"Just created the file.  Feel free to add what you like.","username":"hartm","ts":"2019-07-22T14:16:21.279Z"}
{"msg":"Agenda updated https://wiki.hyperledger.org/display/ursa/2019-07-22+Meeting+Agenda","username":"lovesh","ts":"2019-07-22T14:36:19.457Z"}
{"msg":"fyi sovrin call conflicts with sawtooth contrib call this morning for me. ","username":"Dan","ts":"2019-07-22T15:01:14.584Z"}
{"msg":"enjoy your increased productivity in my absence ;)","username":"Dan","ts":"2019-07-22T15:01:23.200Z"}
{"msg":"Looks nice. Although I am not an expert in Pairing-Math, fields etc.\nThere is a typo in the code in section 5 'ate_mutli_pairing'  on page https://github.com/lovesh/amcl_rust_wrapper","username":"AxelNennker","ts":"2019-07-23T13:58:54.394Z"}
{"msg":"Auditing of zkps","username":"MALodder","ts":"2019-07-23T15:25:08.188Z"}
{"msg":"@hartm what do you think this method is doing https://GitHub.com/miracl/amcl/blob/master/version3/rust/src/ecp.rs#L253","username":"MALodder","ts":"2019-07-23T15:35:54.043Z"}
{"msg":"@MALodder I'm assuming this is some kind of way to sample from a complicated distribution in constant time (although obviously I could be wrong).  Some distributions (i.e. Gaussians) are difficult to sample natively in constant time, so you might want to precompute parts of the probability density function to save yourself later.  This kind of thing is really tricky to get right, which is why I'm assuming the function is so complicated.","username":"hartm","ts":"2019-07-23T16:01:20.590Z"}
{"msg":"Thanks. Will fix it :smile: ","username":"lovesh","ts":"2019-07-23T17:09:03.227Z"}
{"msg":"Its picking a point from a \"lookup table\". W is an array of multiples of a point and b is the multiplicand you want","username":"lovesh","ts":"2019-07-23T17:16:32.347Z"}
{"msg":"another way to think about granularity for RFCs and how we think about evaluating potential features is in the context of the two layer interface. Specifically how does crypto-primitive-x get exposed at the upper API level. What does that upper level look like? \nAt least for me, lack of that upper definition is what makes me uncomfortable with new primitives.","username":"Dan","ts":"2019-07-24T15:36:38.033Z"}
{"msg":"Sounds good @Dan. Can you write an RFC that explains that?!?😂","username":"MALodder","ts":"2019-07-24T15:41:58.417Z"}
{"msg":"Not to confuse things from the tail end of our discussion where I think we were talking about actually putting up RFCs for that upper layer interface.","username":"Dan","ts":"2019-07-24T15:43:23.095Z"}
{"msg":"I'm going to need an RFC for that RFC for that RFC ;)","username":"hartm","ts":"2019-07-24T15:54:08.991Z"}
{"msg":"In all seriousness, we should start working on delineating the \"cryptographer layer\" from the \"user interface\" like we have sketched out before.  Dan brings up a good point.","username":"hartm","ts":"2019-07-24T15:54:42.337Z"}
{"msg":"Proof read please: \n\n\"Hyperledger Ursa is a shared crypto library that provides Hyperledger Frameworks with safe interfaces to access high quality implementations of cryptographic primitives and key management functions.\n\nPut simply, Hyperledger Ursa brings high trust and security to users of Hyperledger Frameworks.\"","username":"JonGeater","ts":"2019-07-24T16:34:10.550Z"}
{"msg":"@JonGeater That looks great.  I might use \"projects\" instead of \"frameworks\" since it is likely that more than just \"frameworks\" will use Ursa (Aries, for instance, might not be a full framework).  Projects is also simpler.  But I like your phrasing a lot!","username":"hartm","ts":"2019-07-24T18:56:40.704Z"}
{"msg":"Thanks @hartm , will make that mod","username":"JonGeater","ts":"2019-07-24T19:15:49.457Z"}
{"msg":"Has joined the channel.","username":"huxd","ts":"2019-07-25T06:30:08.544Z","type":"uj"}
{"msg":"Has joined the channel.","username":"jimthematrix","ts":"2019-07-25T14:29:19.813Z","type":"uj"}
{"msg":"@AxelNennker for you recent question about AMCL and Ursa. As far as I can see in source code of Ursa, @MALodder used the crate you have given link to, so there is no need make any changes in Ursa.\nWhat about the CD pipeline for this external crate, it would be really great to implement such a solution. @esplinr I see no obstacles to implement such a pipeline but don't really know what team should do it.","username":"KitHat","ts":"2019-07-25T14:50:59.056Z"}
{"msg":"Has joined the channel.","username":"esplinr","ts":"2019-07-25T14:51:00.786Z","type":"uj"}
{"msg":"Has joined the channel.","username":"mwklein","ts":"2019-07-25T14:51:54.226Z","type":"uj"}
{"msg":"What do you think @MALodder and @SteveGoob ?","username":"esplinr","ts":"2019-07-25T15:22:19.277Z"}
{"msg":"Has joined the channel.","username":"SteveGoob","ts":"2019-07-25T15:22:19.503Z","type":"uj"}
{"msg":"I love to see CI/CD for all crates. I would actually like to drop amcl and use https://crates.io/crates/miracl_amcl which is run by the projects creator","username":"MALodder","ts":"2019-07-25T15:47:22.742Z"}
{"msg":"@KitKat @esplinr ^^^","username":"MALodder","ts":"2019-07-25T15:48:29.744Z"}
{"msg":"the code is the same but https://crates.io/crates/miracl_amcl is updated by the project owner and includes newer features that we want","username":"MALodder","ts":"2019-07-25T15:49:09.171Z"}
{"msg":"that also should relieve Sovrin from maintaining the CI/CD pipeline","username":"MALodder","ts":"2019-07-25T15:49:39.958Z"}
{"msg":"The crate miracl_amcl is not maintained by the projects creator but me. It is based on my mirror which has the same code but has attribution to the author. I don't have a CI pipeline for it","username":"lovesh","ts":"2019-07-25T15:55:29.187Z"}
{"msg":"The original miracl repo has a CI but the Rust deployment has a TODO  https://github.com/miracl/amcl/blob/master/scripts/travis_rust.sh#L44","username":"lovesh","ts":"2019-07-25T15:58:39.154Z"}
{"msg":"Fixing the TODO should be sufficient and we wont need to have our own CI pipeline","username":"lovesh","ts":"2019-07-25T15:59:14.829Z"}
{"msg":"Harmonize https://crates.io/crates/miracl_amcl and https://crates.io/crates/amcl and have the https://github.com/miracl/amcl maintainer also as a maintainer of the crates.io crates? I think the team needs a go from @esplinr Having the amcl code as a published crate would help ursa a lot, I think","username":"AxelNennker","ts":"2019-07-25T16:38:09.937Z"}
{"msg":"is there someone in this channel from amcl?","username":"Dan","ts":"2019-07-25T16:40:19.580Z"}
{"msg":"I created an issue in jira regarding the hard-coded generator point libindy and Plenum are using. Would a Ursa member jump in and help clarify this?\nhttps://jira.hyperledger.org/browse/IS-1333","username":"AxelNennker","ts":"2019-07-26T14:01:18.468Z"}
{"msg":"thanks for clarifying that. I saw the author was Michael Scott and thought he was doing it","username":"MALodder","ts":"2019-07-26T15:15:29.548Z"}
{"msg":"Np","username":"lovesh","ts":"2019-07-26T15:22:31.479Z"}
{"msg":"I responded Axel","username":"MALodder","ts":"2019-07-29T12:11:25.090Z"}
{"msg":"Thank you, cool. Could you give a point to the code you mentioned \"The code shows they multiply this base generator\" I found the constant in plenum and indy code but not how it comes to be.","username":"AxelNennker","ts":"2019-07-29T12:14:09.187Z"}
{"msg":"Thank you, cool. Could you please give a pointer to the code you mentioned \"The code shows they multiply this base generator\" I found the constant in plenum and indy code but not how it comes to be.","username":"AxelNennker","ts":"2019-07-29T12:14:09.187Z"}
{"msg":"https://github.com/hyperledger/ursa/blob/master/libursa/src/pair/amcl.rs#L238\nhttps://github.com/hyperledger/ursa/blob/master/libursa/src/pair/amcl.rs#L69\nhttps://github.com/hyperledger/ursa/blob/master/libursa/src/bls/mod.rs#L17","username":"MALodder","ts":"2019-07-29T14:08:09.307Z"}
{"msg":"Hm, that are the code places which _could_ be used to compute the `\"3LHpUjiyFC2q2hD7MnwwNmVXiuaFbQx2XkAFJWzswCjgN1utjsCeLzHsKk1nJvFEaS4fcrUmVAkdhtPCYbrVyATZcmzwJReTcJqwqBCPTmTQ9uWPwz6rEncKb2pYYYFcdHa8N17HzVyTqKfgPi4X9pMetfT3A5xCHq54R2pDNYWVLDX\"` constant used in Plenum and Indy. I thought there is actually code (in whatever language) that computes this particular value. Or am I misunderstanding this.\nThanks for compiling this list","username":"AxelNennker","ts":"2019-07-29T20:07:43.803Z"}
{"msg":"This is the code they ran to generate the value and they saved it off ","username":"MALodder","ts":"2019-07-29T20:17:47.464Z"}
{"msg":"Next time they should do a nothing up my sleeve value like sha256(“indy_node”) or something like that","username":"MALodder","ts":"2019-07-29T20:18:54.920Z"}
{"msg":"@MALodder Yeah, it's a good idea to show your randomness for this kind of thing.  I would use something with substantially more entropy than \"indy_node\", but in general you're exactly right.","username":"hartm","ts":"2019-07-29T22:11:46.844Z"}
{"msg":"Right I know longer is better. Just stating the point ","username":"MALodder","ts":"2019-07-29T22:42:41.225Z"}
{"msg":"Just checking my understanding: you want a longer string to get uniqueness in input. The hash function output would have the same entropy regardless of the input size.","username":"lovesh","ts":"2019-07-30T11:19:41.422Z"}
{"msg":"The entropy is the amount of randomness in the calculation.  Hashing a deterministic string has no entropy since it is deterministic.  ","username":"hartm","ts":"2019-07-31T00:11:07.004Z"}
{"msg":"Entropy is information theoretic, not computational.","username":"hartm","ts":"2019-07-31T00:22:14.326Z"}
{"msg":"Thanks for the correction regarding entropy definition :thumbsup: ","username":"lovesh","ts":"2019-07-31T06:27:11.511Z"}
{"msg":"But you longer string to get uniqueness in input?","username":"lovesh","ts":"2019-07-31T06:27:52.570Z"}
{"msg":"What do you mean by uniqueness here?  It implies you're sampling from a distribution.  Which distribution you are talking about is not clear.","username":"hartm","ts":"2019-07-31T14:46:20.867Z"}
{"msg":"Has joined the channel.","username":"jamesbarry","ts":"2019-07-31T16:53:41.016Z","type":"uj"}
{"msg":"Has joined the channel.","username":"luckycharms810","ts":"2019-07-31T17:22:46.901Z","type":"uj"}
{"msg":"@rjones we need a repo named python-ursa made in the hyperledger org. Can you help us with this?","username":"cam-parra","ts":"2019-07-31T21:07:30.975Z"}
{"msg":"Has joined the channel.","username":"rjones","ts":"2019-07-31T21:07:32.584Z","type":"uj"}
{"msg":"@cam-parra would ursa-python work?","username":"rjones","ts":"2019-07-31T22:34:08.122Z"}
{"msg":"yes that works ","username":"cam-parra","ts":"2019-07-31T23:21:34.149Z"}
{"msg":"yep that works","username":"cam-parra","ts":"2019-07-31T23:50:49.707Z"}
{"msg":"for what? ","username":"Dan","ts":"2019-08-01T02:51:52.828Z"}
{"msg":"I didn't realize you're not a maintainer of ursa","username":"rjones","ts":"2019-08-01T03:28:11.114Z"}
{"msg":"sorry","username":"rjones","ts":"2019-08-01T03:28:13.162Z"}
{"msg":"weird... did i get demoted? LOL @MALodder ","username":"cam-parra","ts":"2019-08-01T14:32:32.728Z"}
{"msg":"not that I'm aware of","username":"MALodder","ts":"2019-08-01T14:34:06.579Z"}
{"msg":"oh @rjones my username on github changed","username":"cam-parra","ts":"2019-08-01T14:35:04.177Z"}
{"msg":"it's mac-arrap ","username":"cam-parra","ts":"2019-08-01T14:35:10.260Z"}
{"msg":"https://github.com/mac-arrap","username":"cam-parra","ts":"2019-08-01T14:35:38.123Z"}
{"msg":"Has joined the channel.","username":"sudheesh001","ts":"2019-08-01T14:49:54.644Z","type":"uj"}
{"msg":"ok, it exists, the current ursa-maintainers have maintain access","username":"rjones","ts":"2019-08-02T05:00:39.924Z"}
{"msg":"@cam-parra ","username":"rjones","ts":"2019-08-02T05:01:15.885Z"}
{"msg":"for some reason I don't have access to that repo... I have access to URSA but not URSA-python","username":"cam-parra","ts":"2019-08-02T16:40:06.413Z"}
{"msg":"@MALodder this PR is ready to be merged ","username":"cam-parra","ts":"2019-08-02T16:47:28.710Z"}
{"msg":"https://github.com/hyperledger/ursa-python/pull/2","username":"cam-parra","ts":"2019-08-02T16:47:30.269Z"}
{"msg":"@cam-parra how do I run the tests for this PR?","username":"MALodder","ts":"2019-08-02T16:51:03.602Z"}
{"msg":"what command should I use","username":"MALodder","ts":"2019-08-02T16:51:11.623Z"}
{"msg":"Just run pytests inside the repo ","username":"cam-parra","ts":"2019-08-02T17:45:46.588Z"}
{"msg":"could you try running that and let me know if it works?","username":"cam-parra","ts":"2019-08-02T17:46:11.421Z"}
{"msg":"@cam-parra I think you and @MALodder have the ability to work out the permissions","username":"rjones","ts":"2019-08-02T17:57:44.657Z"}
{"msg":"thank you","username":"cam-parra","ts":"2019-08-02T17:59:46.089Z"}
{"msg":"@rjones Can you please send an invite to @khovratovich to become a member of Hyperledger on Gihub? He is Evernym's cryptographer Dmitry Khovratovich","username":"lovesh","ts":"2019-08-05T09:52:24.131Z"}
{"msg":"@rjones Can you please send an invite to github user name `khovratovich` to become a member of Hyperledger on Gihub? He is Evernym's cryptographer Dmitry Khovratovich","username":"lovesh","ts":"2019-08-05T09:52:24.131Z"}
{"msg":"Please send email to community-architects@hyperledger.org @lovesh ","username":"rjones","ts":"2019-08-05T19:58:30.315Z"}
{"msg":"Thanks","username":"lovesh","ts":"2019-08-06T05:44:12.945Z"}
{"msg":"Done","username":"lovesh","ts":"2019-08-06T05:44:25.920Z"}
{"msg":"Has joined the channel.","username":"smithsamuelm","ts":"2019-08-06T14:08:06.309Z","type":"uj"}
{"msg":"Has the Sovrin Crypto meeting been replaced by the Ursa meeting on Wed 8 am MDT?","username":"smithsamuelm","ts":"2019-08-06T14:08:39.999Z"}
{"msg":"No, but the Sovrin crypto meeting was canceled yesterday. ","username":"brentzundel","ts":"2019-08-06T14:14:32.485Z"}
{"msg":"mike is on PTO","username":"cam-parra","ts":"2019-08-06T14:22:16.427Z"}
{"msg":"why does ursa hex encoding exist? There is a standard crate https://docs.rs/hex/0.3.2/hex/ already. I noticed because a PR introduced ursa hex encoding to libindy, which is used four time in trace!\nI would prefer to use the standard hex crate ","username":"AxelNennker","ts":"2019-08-06T15:22:55.559Z"}
{"msg":"why does ursa hex encoding exist? There is a standard crate https://docs.rs/hex/0.3.2/hex/ already. I noticed because a PR introduced ursa hex encoding to libindy, which is used four times in trace!\nI would prefer to use the standard hex crate ","username":"AxelNennker","ts":"2019-08-06T15:22:55.559Z"}
{"msg":"Send the PR and we will review this change @AxelNennker ","username":"cam-parra","ts":"2019-08-06T15:27:07.079Z"}
{"msg":"Don't know which PR introduced that to libindy.\n```\nignisvulpis@namenlos:~/development/hyperledger/indy-sdk/libindy$ git log src/commands/payments.rs | fgrep -i ursa\nignisvulpis@namenlos:~/development/hyperledger/indy-sdk/libindy$ git log src/commands/payments.rs | fgrep -i hex\n```\nNothing in the logs","username":"AxelNennker","ts":"2019-08-06T15:31:36.177Z"}
{"msg":"Learned about git blame -L just now `ignisvulpis@namenlos:~/development/hyperledger/indy-sdk/libindy$ git blame -L 7 src/commands/payments.rs \nf50eb287 (Sergey Minaev     2019-07-11 17:23:44 +0300   7) use ursa::encoding::hex;\n` ","username":"AxelNennker","ts":"2019-08-06T15:38:09.290Z"}
{"msg":"@AxelNennker this looks like both an error in URSA and in libindy. It looks like Rust already implements this native functionality. https://github.com/rust-lang/rust/blob/master/src/libserialize/hex.rs","username":"cam-parra","ts":"2019-08-06T16:12:30.818Z"}
{"msg":"unless @lovesh @MALodder  have a different need for this hex implementation","username":"cam-parra","ts":"2019-08-06T16:13:41.093Z"}
{"msg":"libindy PR is here https://github.com/hyperledger/indy-sdk/pull/1791","username":"AxelNennker","ts":"2019-08-06T16:14:32.255Z"}
{"msg":"Great! I have sent the PR to one of the sdk maintainers and hopefully get the eyes of other maintainers on it and have it merged soon","username":"cam-parra","ts":"2019-08-06T16:21:36.260Z"}
{"msg":"Hyperledger calendar has a stale version of the Sovrin Crypto Meeting on Tuesdays","username":"smithsamuelm","ts":"2019-08-06T16:46:12.271Z"}
{"msg":"@smithsamuelm should I delete that meeting entirely?","username":"rjones","ts":"2019-08-06T17:11:05.762Z"}
{"msg":"Yes, mike moved it to Mondays","username":"Dan","ts":"2019-08-06T19:41:28.791Z"}
{"msg":"Yes, Mike moved it to Mondays","username":"Dan","ts":"2019-08-06T19:41:28.791Z"}
{"msg":"I just created an agenda for tomorrow's meeting--feel free to add stuff as you all see fit.  Thanks!","username":"hartm","ts":"2019-08-06T20:54:47.048Z"}
{"msg":"Regrets for tomorrow. I’m on vacation for the whole week.","username":"MALodder","ts":"2019-08-07T03:11:07.728Z"}
{"msg":"@MALodder Enjoy your vacation!","username":"hartm","ts":"2019-08-07T13:44:09.435Z"}
{"msg":"@lovesh Could you please review this PR? It will unblock the CI/CD pipeline work","username":"cam-parra","ts":"2019-08-07T16:01:43.343Z"}
{"msg":"https://github.com/hyperledger/ursa-python/pull/2","username":"cam-parra","ts":"2019-08-07T16:01:51.526Z"}
{"msg":"Is this taken from indy-crypto's python wrapper/","username":"lovesh","ts":"2019-08-07T20:03:59.641Z"}
{"msg":"Is this taken from indy-crypto's python wrapper?","username":"lovesh","ts":"2019-08-07T20:03:59.641Z"}
{"msg":"yep ","username":"cam-parra","ts":"2019-08-07T20:04:08.941Z"}
{"msg":"yep ","username":"cam-parra","ts":"2019-08-07T20:04:21.910Z"}
{"msg":"@hartm @MALodder @Dan Should the PS signatures go in libursa or libzmix?","username":"lovesh","ts":"2019-08-07T20:07:17.369Z"}
{"msg":"Approved. But have asked 2 questions","username":"lovesh","ts":"2019-08-07T20:12:30.316Z"}
{"msg":"PS sigs should go in libzmix","username":"MALodder","ts":"2019-08-07T20:15:16.465Z"}
{"msg":"@lovesh are you planning to implement the threshold PS sig?","username":"MALodder","ts":"2019-08-08T14:59:01.779Z"}
{"msg":"otherwise why do we need them?","username":"MALodder","ts":"2019-08-08T14:59:08.385Z"}
{"msg":"I think a point of discussion during the Ursa meeting yesterday was that PS should be proposed through RFC. \nOf course, RFC is a lengthy process so totally encourage us to sort out as much of the issues over chat/email/meeting before going into the authoring process.","username":"Dan","ts":"2019-08-08T15:02:49.207Z"}
{"msg":"An RFC for something like threshold PS sigs should be pretty simple though.  The interface is obvious (so no need to do much work there) and the question of need is pretty obvious to (do we need the threshold signatures).  So I don't think an RFC for this should be too onerous.","username":"hartm","ts":"2019-08-08T15:08:34.862Z"}
{"msg":"At least, I hope the RFC isn't too onerous.  And I also hope that it serves as a template for future interface documentation (so the effort isn't wasted).","username":"hartm","ts":"2019-08-08T15:08:58.912Z"}
{"msg":"One should never assume that anything is obvious. :)\nI don't mind saying I'm pretty ignorant of PS sigs and could not argue for or against another threshold scheme. I also couldn't explain how this would work well or badly with all the other schemes.","username":"Dan","ts":"2019-08-08T15:29:38.404Z"}
{"msg":"@Dan All pairings-based threshold signatures are \"more or less\" the same--use Shamir secret sharing in the exponent, and use the pairing to compute the products needed for the secret sharing evaluation.  Now that you mention it, it might actually make sense to have a modular piece of code that does Shamir secret sharing.","username":"hartm","ts":"2019-08-08T16:04:36.560Z"}
{"msg":"splinter","username":"satelander","ts":"2019-08-08T21:34:49.759Z"}
{"msg":"what i meant by \"I also couldn't explain how this would work well or badly with all the other schemes,\" is the other schemes in ursa. We should think about implications of having a library with a bunch of different groups/schemes. The paillier group, for example, feels very different to me than any of the elliptic groups. When we have all of these in the same library is there a way to compose across them or risks because it seems that you can when you shouldn't. So that kind of thing.","username":"Dan","ts":"2019-08-09T15:17:30.361Z"}
{"msg":"what i meant by \"I also couldn't explain how this would work well or badly with all the other schemes,\" is how we should think about having a library with a bunch of different groups/schemes. The paillier group, for example, feels very different to me than any of the elliptic groups. When we have all of these in the same library is there a way to compose across them or risks because it seems that you can when you shouldn't. So that kind of thing.","username":"Dan","ts":"2019-08-09T15:17:30.361Z"}
{"msg":"@Dan Composing high-level crypto protocols (i.e., not just \"oracles\" like hash functions) is a very hard problem in general.  If you really want to take the plunge, this is excellent:  https://eprint.iacr.org/2000/067.pdf","username":"hartm","ts":"2019-08-12T05:03:21.465Z"}
{"msg":"At only 100 pages that looks like a light read ;)","username":"Dan","ts":"2019-08-12T13:59:55.847Z"}
{"msg":"Is anyone in this channel attending CRYPTO next week?","username":"hartm","ts":"2019-08-12T15:57:59.518Z"}
{"msg":"@rjones can you make the ursa-python repo have the same maintainers as the ursa repo?","username":"MALodder","ts":"2019-08-12T20:14:48.429Z"}
{"msg":"Yeah none of the maintainers have write access to the repo. Including @lovesh @MALodder ","username":"cam-parra","ts":"2019-08-12T20:15:33.217Z"}
{"msg":"Done","username":"rjones","ts":"2019-08-12T20:19:30.900Z"}
{"msg":"https://github.com/streaak/keyhacks?mc_cid=2c7d4caad8&mc_eid=0ff0c85eaf#Google-Maps-API-key","username":"MALodder","ts":"2019-08-13T12:13:46.613Z"}
{"msg":"Good place to. Check if our keys have been hacked","username":"MALodder","ts":"2019-08-13T12:14:02.897Z"}
{"msg":"Good place to check if our keys have been hacked","username":"MALodder","ts":"2019-08-13T12:14:02.897Z"}
{"msg":"I was just asked whether ursa libraries have been cleared for US export?","username":"brentzundel","ts":"2019-08-13T20:07:42.091Z"}
{"msg":"probably not","username":"MALodder","ts":"2019-08-13T20:13:23.756Z"}
{"msg":"Perhaps we should draft a statement similar to the following: https://mta.openssl.org/pipermail/openssl-users/2015-October/002186.html","username":"brentzundel","ts":"2019-08-13T20:15:50.848Z"}
{"msg":"Can we add this to the next ursa meeting? I think it will be an important answer to have for companies that want to use products which rely on ursa.","username":"brentzundel","ts":"2019-08-13T20:22:19.251Z"}
{"msg":"Or is ursa covered under the linux foundation's filing for the hyperledger project?","username":"brentzundel","ts":"2019-08-13T20:30:21.433Z"}
{"msg":"I imagine we are probably covered.  @dhuseby do you know anything about this?","username":"hartm","ts":"2019-08-13T21:31:01.370Z"}
{"msg":"https://github.com/hyperledger/ursa/pull/47","username":"cam-parra","ts":"2019-08-13T22:00:17.778Z"}
{"msg":"can we get another set of eyes on this PR? ","username":"cam-parra","ts":"2019-08-13T22:00:33.450Z"}
{"msg":"we should talk about containerizing the builds and how that relates to travis and other CI stuff.\nLike in that PR above, if we just had a build container it could go right into that, and likewise the readme could just give a docker command instead of needing to track changes as we add / update things.","username":"Dan","ts":"2019-08-14T15:32:12.272Z"}
{"msg":"@Dan I believe travis is using containers already","username":"MALodder","ts":"2019-08-14T16:46:46.453Z"}
{"msg":"we should probably move to circleci because travis is being phased out","username":"MALodder","ts":"2019-08-14T16:47:07.566Z"}
{"msg":"I mean using the docker files we maintain in the repo for build and then whatever system we use consumes those as well as anyone who wants to run a local build can just run e.g. `docker-compose up`","username":"Dan","ts":"2019-08-14T17:26:17.385Z"}
{"msg":"Has joined the channel.","username":"GuillaumeCisco","ts":"2019-08-14T18:31:32.661Z","type":"uj"}
{"msg":"Has joined the channel.","username":"Kirill_Vusik","ts":"2019-08-15T13:30:12.612Z","type":"uj"}
{"msg":"Has joined the channel.","username":"dmitrylavrenov","ts":"2019-08-15T15:13:40.763Z","type":"uj"}
{"msg":"Hello,\n@dmitrylavrenov and I are interested in contributing to Ursa. Dmitry is a cryptography expert, I know Rust a bit :)\nWhat could you recommend us to starts with? There are only few issues in Jira as I see","username":"Kirill_Vusik","ts":"2019-08-16T11:43:02.532Z"}
{"msg":"@Kirill_Vusik What part of Ursa are you all interested in working on?  Are there any new features you'd like to see?  ","username":"hartm","ts":"2019-08-16T16:07:22.128Z"}
{"msg":"@hartm We would like to help implementing concreate algorithms, also we can help with Zero-Knowledge proof features implementation","username":"Kirill_Vusik","ts":"2019-08-16T16:51:26.627Z"}
{"msg":"@Kirill_Vusik You should attend the Sovrin Crypto call on Monday at 8am PDT where we talk about many of the ZKP features we want to implement","username":"MALodder","ts":"2019-08-16T19:05:03.345Z"}
{"msg":"The zoom id is https://zoom.us/j/567114224","username":"MALodder","ts":"2019-08-16T19:05:59.148Z"}
{"msg":"The next ZKP thing we want to develop is a ZKP based on zcash's snark library bellman","username":"MALodder","ts":"2019-08-16T19:07:17.088Z"}
{"msg":"take a look at https://github.com/matter-labs/bellman if you're interested","username":"MALodder","ts":"2019-08-16T19:08:09.132Z"}
{"msg":"Has joined the channel.","username":"adityasingh177","ts":"2019-08-19T09:51:13.579Z","type":"uj"}
{"msg":"We don't have any signature scheme with PoK implemented for Anoncreds 2.0 so even if we don't use it for threshold sigs, it would be useful. Secondly, we wanted Zmix to support PS signatures anyway. ","username":"lovesh","ts":"2019-08-19T11:06:29.337Z"}
{"msg":"Isn’t that what BBS signatures are too?","username":"MALodder","ts":"2019-08-19T11:53:47.243Z"}
{"msg":"Do you have a link you can share?","username":"lovesh","ts":"2019-08-19T12:12:02.421Z"}
{"msg":"For?","username":"MALodder","ts":"2019-08-19T12:20:58.134Z"}
{"msg":"BBS signatures","username":"lovesh","ts":"2019-08-19T12:21:32.042Z"}
{"msg":"https://link.springer.com/content/pdf/10.1007%2F978-3-642-00468-1_27.pdf","username":"MALodder","ts":"2019-08-19T12:22:41.934Z"}
{"msg":"Sorry that’s not it","username":"MALodder","ts":"2019-08-19T12:23:43.699Z"}
{"msg":"https://eprint.iacr.org/2016/663.pdf","username":"MALodder","ts":"2019-08-19T12:24:15.274Z"}
{"msg":"Section 4","username":"MALodder","ts":"2019-08-19T12:24:19.345Z"}
{"msg":"It’s always been my understanding that BBS and PS are interchangeable ","username":"MALodder","ts":"2019-08-19T12:24:36.063Z"}
{"msg":"Both offer PoK","username":"MALodder","ts":"2019-08-19T12:24:45.970Z"}
{"msg":"I was looking for the implementation link","username":"lovesh","ts":"2019-08-19T12:25:22.589Z"}
{"msg":"Depends what you mean by interchangable.","username":"lovesh","ts":"2019-08-19T12:25:49.688Z"}
{"msg":"I guess it’s okay if we have both","username":"MALodder","ts":"2019-08-19T12:25:51.975Z"}
{"msg":"It would be nice to benchmark and compare the teo","username":"MALodder","ts":"2019-08-19T12:26:04.292Z"}
{"msg":"It would be nice to benchmark and compare the two ","username":"MALodder","ts":"2019-08-19T12:26:04.292Z"}
{"msg":"PS was supposed to be one of the supported sig schemes","username":"lovesh","ts":"2019-08-19T12:26:13.759Z"}
{"msg":"Ok","username":"lovesh","ts":"2019-08-19T12:26:21.678Z"}
{"msg":"Where can i see the latest work on Zmix? Is it in the PR?","username":"lovesh","ts":"2019-08-19T12:26:50.029Z"}
{"msg":"Eventually. You just accelerated the time line ","username":"MALodder","ts":"2019-08-19T12:28:37.247Z"}
{"msg":"We mostly want the threshold capability too","username":"MALodder","ts":"2019-08-19T12:28:56.935Z"}
{"msg":"If PS is faster than BBS then I say we just use that one","username":"MALodder","ts":"2019-08-19T12:29:15.692Z"}
{"msg":"Cohttps://crypto.iacr.org/2019/program.html","username":"hartm","ts":"2019-08-19T15:01:58.662Z"}
{"msg":"typo in link, correct link here https://crypto.iacr.org/2019/program.html","username":"lovesh","ts":"2019-08-19T15:03:40.157Z"}
{"msg":"@Dan Are you fine with the verifiable encryption PR https://github.com/hyperledger/ursa-rfcs/pull/9","username":"lovesh","ts":"2019-08-19T15:06:26.199Z"}
{"msg":"https://eprint.iacr.org/2010/543.pdf","username":"hartm","ts":"2019-08-19T15:13:54.472Z"}
{"msg":"I coded a guide to help those needing a push to use ursa \nhttps://github.com/mikelodder7/ursa_demo","username":"MALodder","ts":"2019-08-19T16:46:57.514Z"}
{"msg":"Has joined the channel.","username":"Kamil_Salakhiev","ts":"2019-08-20T12:46:20.427Z","type":"uj"}
{"msg":"Hey! Is there a support or any plans for the Russian crypto in Ursa? ","username":"Kamil_Salakhiev","ts":"2019-08-20T12:46:21.700Z"}
{"msg":"the great thing about open source is you can add it to ursa and contribute it","username":"MALodder","ts":"2019-08-20T14:02:21.839Z"}
{"msg":"No one in particular is planning to add it, but its been designed such that its easy to add","username":"MALodder","ts":"2019-08-20T14:02:55.735Z"}
{"msg":"Great! What is the best way to start with it? I know that openssl supports Russian cryptography. Do you use openssl anyhow? If you do I think it is really easy to integrate","username":"Kamil_Salakhiev","ts":"2019-08-20T14:34:38.661Z"}
{"msg":"Yes Ursa is using openssl but just for its Bignumber library. We do have an RFC for encryption https://github.com/hyperledger/ursa-rfcs/pull/6 that you can use as a guide","username":"MALodder","ts":"2019-08-20T16:01:48.022Z"}
{"msg":"I think the best pattern is to create modular interfaces. That way various national cryptos can be attached without needing to incorporate the code directly into Ursa.","username":"Dan","ts":"2019-08-20T16:10:44.919Z"}
{"msg":"I've put draft agenda up for tomorrow: https://wiki.hyperledger.org/display/ursa/2019+08+21","username":"Dan","ts":"2019-08-20T16:11:01.569Z"}
{"msg":"I thought Ursa already had a modular interface?","username":"rjones","ts":"2019-08-20T17:29:50.626Z"}
{"msg":"it does, that's what I'm suggesting for @Kamil_Salakhiev to use","username":"MALodder","ts":"2019-08-20T17:52:45.658Z"}
{"msg":"Can a Double Ratchet algorithm be setup between multiple parties? If so what's the difference between that structure and an Async Ratchet tree?","username":"kdenhartog","ts":"2019-08-21T01:30:51.677Z"}
{"msg":"Not really. Signal hides the complexity behind the scenes","username":"MALodder","ts":"2019-08-21T01:50:45.905Z"}
{"msg":"The Async tree is completely different in that it incorporates multiple keys","username":"MALodder","ts":"2019-08-21T01:51:12.817Z"}
{"msg":"@here Just a reminder of today/tomorrow's Ursa meeting.  Hope to talk to many of you tomorrow!","username":"hartm","ts":"2019-08-21T06:24:03.074Z"}
{"msg":"Oh! The Ursa meeting series has fallen off my calendar and I thought it was next week :( I have a customer meeting today :(","username":"JonGeater","ts":"2019-08-21T09:09:03.692Z"}
{"msg":"I really wanted to talk about the sovereign algorithms and modular interfaces with @Dan and @Kamil_Salakhiev ","username":"JonGeater","ts":"2019-08-21T09:09:55.198Z"}
{"msg":"We did this a lot in Thales to enable sales of high grade cryptos to various mutually distrustful customers ","username":"JonGeater","ts":"2019-08-21T09:11:13.765Z"}
{"msg":"no worries .. we can hit that next meeting.","username":"Dan","ts":"2019-08-21T13:20:38.845Z"}
{"msg":"Hello everyone,\n@dmitrylavrenov and I cannot attend the meeting today: we have conflicts with our meetings. Could we ask to record it?","username":"Kirill_Vusik","ts":"2019-08-21T13:40:45.700Z"}
{"msg":"конечно :)","username":"Dan","ts":"2019-08-21T13:51:38.713Z"}
{"msg":"спасибо :)","username":"Kirill_Vusik","ts":"2019-08-21T13:53:24.051Z"}
{"msg":"Usually Hart records and then posts the recording later.","username":"Dan","ts":"2019-08-21T13:56:25.717Z"}
{"msg":"I think he is at a conference though so that might make recording more difficult. I'm not sure.","username":"Dan","ts":"2019-08-21T13:56:51.966Z"}
{"msg":"I can still record.","username":"hartm","ts":"2019-08-21T13:56:57.800Z"}
{"msg":"I'll make sure to post.","username":"hartm","ts":"2019-08-21T13:57:02.239Z"}
{"msg":"It might take until this afternoon though.","username":"hartm","ts":"2019-08-21T13:57:11.085Z"}
{"msg":"OK, I've added the recording.","username":"hartm","ts":"2019-08-21T22:31:22.703Z"}
{"msg":"@Dan I have skimmed over the EPID scheme and see that proof of non-revocation is linear (in size and time) in the size of revocation list (page 11, Sign.5) whereas in our case of merkle tree its logarithimic. Also in EPID, each non-revocation sub proof (for each item in revocation list) is much bigger and expensive since its a proof of inequality of discrete log","username":"lovesh","ts":"2019-08-22T07:03:51.021Z"}
{"msg":"@Dan I have skimmed over the EPID scheme and see that proof of non-revocation is linear (in size and time) in the size of revocation list (page 11, Sign.5) whereas in our case of merkle tree its logarithimic. Also in EPID, each non-revocation sub proof (for each item in revocation list) is much bigger since its a proof of inequality of discrete log","username":"lovesh","ts":"2019-08-22T07:03:51.021Z"}
{"msg":"thank you","username":"Kirill_Vusik","ts":"2019-08-22T09:57:45.164Z"}
{"msg":"Has joined the channel.","username":"Artemkaaas","ts":"2019-08-23T12:57:02.202Z","type":"uj"}
{"msg":"@MALodder \nIs ursa (master branch) published to crates.io automatically?\nMy PR was merged a couple days ago but the last available version on https://crates.io/crates/ursa was released in April.\nIt's a important issue for Libindy.\nFYI @esplinr","username":"Artemkaaas","ts":"2019-08-23T12:57:03.388Z"}
{"msg":"Has left the channel.","username":"satelander","ts":"2019-08-23T18:45:50.533Z","type":"ul"}
{"msg":"we don't have master automatically published to crates.io","username":"MALodder","ts":"2019-08-23T19:31:06.050Z"}
{"msg":"I can make a build if you want","username":"MALodder","ts":"2019-08-23T19:31:16.460Z"}
{"msg":"Would we really want to do that before a full 1.0?","username":"JonGeater","ts":"2019-08-24T16:11:08.452Z"}
{"msg":"is anyone working on threshold ECDSA? I just came across this interesting deck https://zengo.com/wp-content/uploads/2019/06/breaking_bitcoin19_updated.pdf","username":"binhn","ts":"2019-08-24T22:50:57.637Z"}
{"msg":"Is this list accurate? https://github.com/orgs/hyperledger/teams/ursa-maintainers/members @hartm @MALodder ","username":"rjones","ts":"2019-08-25T19:28:40.816Z"}
{"msg":"I’m getting 404 from that link","username":"JonGeater","ts":"2019-08-25T22:09:29.376Z"}
{"msg":"Looks like ‘members’ is not right","username":"JonGeater","ts":"2019-08-25T22:12:17.115Z"}
{"msg":"hmm - if you're logged in to GitHub, it should be a public link","username":"rjones","ts":"2019-08-25T22:48:22.134Z"}
{"msg":"@JonGeater I sent a github invite to JAG-UK","username":"rjones","ts":"2019-08-25T22:50:16.617Z"}
{"msg":"Ah! I fell foul of the recent 2FA change.  Hold on...","username":"JonGeater","ts":"2019-08-25T23:14:14.272Z"}
{"msg":"I'm about to remove ~150 of the 200 members we have anyway","username":"rjones","ts":"2019-08-25T23:24:17.182Z"}
{"msg":"yes, please","username":"Artemkaaas","ts":"2019-08-26T05:39:53.976Z"}
{"msg":"Since Libindy migrated to Ursa crate. it's pretty important for us to have automatically published artifact as Indy-Crypto used to do.","username":"Artemkaaas","ts":"2019-08-26T05:44:56.858Z"}
{"msg":"The maintainer list is accurate :) ","username":"cam-parra","ts":"2019-08-26T13:12:02.986Z"}
{"msg":"All members on that list are frequent contributors in one way or another","username":"cam-parra","ts":"2019-08-26T13:12:52.900Z"}
{"msg":"I've just applied to join... :-)","username":"JonGeater","ts":"2019-08-26T16:58:17.956Z"}
{"msg":"We can get you added. @MALodder I think you can add other maintainers ","username":"cam-parra","ts":"2019-08-26T17:31:49.191Z"}
{"msg":"https://github.com/orgs/hyperledger/teams/ursa-maintainers/members","username":"cam-parra","ts":"2019-08-26T17:31:51.014Z"}
{"msg":"@JonGeater whats your github handle","username":"MALodder","ts":"2019-08-26T17:32:50.877Z"}
{"msg":"we should probably do a quick video confirmation that it's the real @JonGeater ","username":"cam-parra","ts":"2019-08-26T17:38:26.436Z"}
{"msg":"*tin foil hat is on*","username":"cam-parra","ts":"2019-08-26T17:38:35.563Z"}
{"msg":"could I ask you to hold on a second?","username":"rjones","ts":"2019-08-26T17:39:17.177Z"}
{"msg":"@cam-parra @MALodder ","username":"rjones","ts":"2019-08-26T17:39:32.686Z"}
{"msg":"sure thing :thumbsup: ","username":"cam-parra","ts":"2019-08-26T17:39:59.505Z"}
{"msg":"@cam-parra I just added some codeowners files that reflect the current state of permissions for the four ursa repos","username":"rjones","ts":"2019-08-26T17:53:55.150Z"}
{"msg":"if these are merged, I will turn on the codeowners option","username":"rjones","ts":"2019-08-26T17:54:17.105Z"}
{"msg":"eventually, we'll have an automagic process for turning updates to that file into group updates. (not today though)","username":"rjones","ts":"2019-08-26T17:54:49.708Z"}
{"msg":"hi, I suck. I had to recreate https://github.com/hyperledger/ursa-python","username":"rjones","ts":"2019-08-26T18:03:44.943Z"}
{"msg":"no worries, we shall rebuild ","username":"cam-parra","ts":"2019-08-26T18:59:17.451Z"}
{"msg":"also @rjones your pr has been merged you are good to turn on codeowners ","username":"cam-parra","ts":"2019-08-26T19:00:22.356Z"}
{"msg":"are we good to add @JonGeater ?","username":"cam-parra","ts":"2019-08-26T20:18:39.852Z"}
{"msg":"that is a question for you to answer. If you update the codeowners file, you'll still need to add him to your team manually (for now)","username":"rjones","ts":"2019-08-26T20:26:45.503Z"}
{"msg":"I now see that I added the codeowners file in the worst possible way. You can point to a team directly, which would make updates trivial. I would like to use codeowners to populate the groups... later","username":"rjones","ts":"2019-08-26T20:27:38.176Z"}
{"msg":"He has my vote. ","username":"MALodder","ts":"2019-08-27T14:34:42.956Z"}
{"msg":"Thanks! (As a technical note for @rjones for later/other projects, I guess I would have been in there already if overleaf had been included, or if we'd done the doc in github)","username":"JonGeater","ts":"2019-08-27T14:41:18.777Z"}
{"msg":"Someone remind me where we are doing the zmix spec?","username":"Dan","ts":"2019-08-27T14:43:35.566Z"}
{"msg":"https://github.com/hyperledger/ursa-rfcs/pull/12","username":"MALodder","ts":"2019-08-27T15:07:11.794Z"}
{"msg":"@Dan ^^","username":"MALodder","ts":"2019-08-27T15:07:18.190Z"}
{"msg":"@JonGeater what is your github handle?","username":"MALodder","ts":"2019-08-27T15:09:26.500Z"}
{"msg":"thanks @MALodder. I meant to write zklang ... coffee still kicking in. Where are we spec'ing out zklang?","username":"Dan","ts":"2019-08-27T15:10:40.961Z"}
{"msg":"that's it","username":"MALodder","ts":"2019-08-27T15:18:48.836Z"}
{"msg":"zmix with ZKLang","username":"MALodder","ts":"2019-08-27T15:19:02.263Z"}
{"msg":"zmix is just the orchestration layer","username":"MALodder","ts":"2019-08-27T15:19:08.597Z"}
{"msg":"ZKLang is the data model","username":"MALodder","ts":"2019-08-27T15:19:13.461Z"}
{"msg":"@brentzundel  and I had a meeting on Monday with Dfinity to flush out more details","username":"MALodder","ts":"2019-08-27T15:19:41.670Z"}
{"msg":"ok, I'll set aside some time to start digging into #12 ","username":"Dan","ts":"2019-08-27T15:20:46.056Z"}
{"msg":"JAG_UK","username":"JonGeater","ts":"2019-08-27T16:30:28.965Z"}
{"msg":"Do you have time for a quick visual confirmation? ","username":"cam-parra","ts":"2019-08-27T16:32:16.758Z"}
{"msg":"Sure","username":"JonGeater","ts":"2019-08-27T16:32:34.965Z"}
{"msg":"@MALodder  want to join in?","username":"cam-parra","ts":"2019-08-27T16:32:51.533Z"}
{"msg":"Sure","username":"JonGeater","ts":"2019-08-27T16:33:05.652Z"}
{"msg":"Actually heading to the Sovrin offices so can we do this at around 12:30 MST? ","username":"cam-parra","ts":"2019-08-27T16:34:50.226Z"}
{"msg":"Thats 1 hour from now?","username":"JonGeater","ts":"2019-08-27T16:41:52.106Z"}
{"msg":"Oh, that's what that random request was from.","username":"hartm","ts":"2019-08-27T16:56:10.310Z"}
{"msg":"Not entirley random....but unexplained, yes :^)","username":"JonGeater","ts":"2019-08-27T16:56:46.265Z"}
{"msg":"I was wondering who was attempting to join the org, haha.","username":"hartm","ts":"2019-08-27T16:57:22.493Z"}
{"msg":"Lol just want to be sure he’s not a robot ","username":"cam-parra","ts":"2019-08-27T17:00:00.844Z"}
{"msg":"There are members of my family who would not want to warrant that","username":"JonGeater","ts":"2019-08-27T17:00:25.718Z"}
{"msg":"@MALodder will you do this after your meeting ?","username":"cam-parra","ts":"2019-08-27T18:27:30.759Z"}
{"msg":"Let me know if and when: I’m having dinner but I should be able to do a quick call of some kind","username":"JonGeater","ts":"2019-08-27T18:29:17.641Z"}
{"msg":"added","username":"MALodder","ts":"2019-08-27T20:10:39.322Z"}
{"msg":"Just got the join notice.  Thanks @MALodder :)","username":"JonGeater","ts":"2019-08-27T22:10:26.334Z"}
{"msg":"I would like to propose that the Ursa-RFC PR #6 be put in final comment and merged in two weeks if there are no reasonable arguments. The PR has sat for 6 months without any new comments since april. Silence can be seen as agreeing and nothing further to add or uninvolvement. ","username":"MALodder","ts":"2019-08-28T13:15:42.308Z"}
{"msg":"I agree","username":"lovesh","ts":"2019-08-28T13:21:46.565Z"}
{"msg":"@MALodder Sure, that sounds good.","username":"hartm","ts":"2019-08-28T15:40:03.933Z"}
{"msg":"We may need to append to it if we want to allow for more modular block cipher support, but that's probably not a huge issue.","username":"hartm","ts":"2019-08-28T15:40:48.576Z"}
{"msg":"Has joined the channel.","username":"domwoe","ts":"2019-08-29T12:21:25.273Z","type":"uj"}
{"msg":"@lovesh @MALodder  PS signatures have been merged ","username":"cam-parra","ts":"2019-08-29T15:13:59.184Z"}
{"msg":"nice","username":"MALodder","ts":"2019-08-29T15:14:39.017Z"}
{"msg":"@MALodder can you make sure all the maintainers are listed as reviewers on #6 ","username":"Dan","ts":"2019-08-29T15:34:16.586Z"}
{"msg":"I thought they already were","username":"MALodder","ts":"2019-08-29T15:34:39.715Z"}
{"msg":"I think I might fight this one just because of the latex ;)","username":"Dan","ts":"2019-08-29T15:37:18.993Z"}
{"msg":"Actually more seriously I don't see any math notation in the tex file. It would be easier to review if we folded that text into md file. I say that not for busy work but because we can also better see the whole API in one doc. It looks to me for example that the object types alluded to in the md file don't align with those in the tex file. @hartm  @MALodder thoughts?","username":"Dan","ts":"2019-08-29T16:00:43.398Z"}
{"msg":"I'm okay changing this one to be markdown","username":"MALodder","ts":"2019-08-29T16:16:25.547Z"}
{"msg":"I guess the whole point of this is, in fact, to abstract away the math.  If you think it will be more convenient in markdown, I'm fine with that.","username":"hartm","ts":"2019-08-29T17:19:45.275Z"}
{"msg":"We will probably still need TeX for some cryptographer interfaces though. ","username":"hartm","ts":"2019-08-29T17:20:01.948Z"}
{"msg":"If equations are needed you can always include a .png in the  markdown ","username":"cam-parra","ts":"2019-08-29T17:25:12.097Z"}
{"msg":"I used to do that all the time in college ","username":"cam-parra","ts":"2019-08-29T17:25:35.855Z"}
{"msg":"That is so inconvenient though.  ","username":"hartm","ts":"2019-08-29T17:43:08.941Z"}
{"msg":"Once you get used to TeX, there's no going back.","username":"hartm","ts":"2019-08-29T17:43:17.939Z"}
{"msg":"I just use emacs org mode and then use it's latex generator :) ","username":"cam-parra","ts":"2019-08-29T17:46:10.801Z"}
{"msg":"way better and easier than plain tex ","username":"cam-parra","ts":"2019-08-29T17:46:18.951Z"}
{"msg":"vi is love, vi is life","username":"rjones","ts":"2019-08-29T21:05:37.793Z"}
{"msg":"vi is implementable in emacs","username":"JonGeater","ts":"2019-08-29T22:15:24.595Z"}
{"msg":"colon q ! return ","username":"cam-parra","ts":"2019-08-29T22:59:04.363Z"}
{"msg":"My headstone needs to read `:wq!`","username":"rjones","ts":"2019-08-29T23:03:26.395Z"}
{"msg":"Just use `:x!` one key shorter","username":"MALodder","ts":"2019-08-30T23:22:41.705Z"}
{"msg":"just get cremated, it's one headstone shorter","username":"rjones","ts":"2019-08-31T00:46:36.176Z"}
{"msg":"Reminder: no Sovrin Crypto meeting today due to the US holiday ","username":"MALodder","ts":"2019-09-02T13:38:12.549Z"}
{"msg":"@JonGeater Do you have the slides you used the last time you presented on Ursa?","username":"MALodder","ts":"2019-09-03T14:56:09.056Z"}
{"msg":"@JonGeater have those been made public so some else could use them?","username":"MALodder","ts":"2019-09-03T14:56:26.215Z"}
{"msg":"Yes they're under 'files' on the Hyperledger wiki space for Ursa","username":"JonGeater","ts":"2019-09-03T15:32:06.870Z"}
{"msg":"https://wiki.hyperledger.org/display/ursa/Presentations","username":"JonGeater","ts":"2019-09-03T15:33:18.574Z"}
{"msg":"thanks","username":"MALodder","ts":"2019-09-03T15:33:35.956Z"}
{"msg":"There's also a video of me presenting it somewhere, if you want the voiceover I can PM it to you","username":"JonGeater","ts":"2019-09-03T15:34:39.924Z"}
{"msg":"But it's quite self-explanatory","username":"JonGeater","ts":"2019-09-03T15:34:49.666Z"}
{"msg":"No worries. Your voice sounds better than mine anyway ","username":"MALodder","ts":"2019-09-03T16:06:55.093Z"}
{"msg":"Please update the agenda with this item:\nDelegatable credentials based on the paper Practical UC-Secure Delegatable Credentials with Attributes and Their Application to Blockchain (https://acmccs.github.io/papers/p683-camenischA.pdf)\nCode is here https://github.com/lovesh/signature-schemes/tree/delegatable/delg_cred_cdd","username":"lovesh","ts":"2019-09-04T14:12:29.881Z"}
{"msg":"https://wiki.hyperledger.org/pages/viewpage.action?pageId=16324764","username":"JonGeater","ts":"2019-09-04T15:13:39.973Z"}
{"msg":"I actually like the principle of TCF but I still don't know what Besu is actually supposed to be: generalising this architecture is capital-H-Hard.  If it's not generalised then I'm not sure why it needs to be a project.  Anyway, I think my questions/points are relevant to the concversation we just had in the call","username":"JonGeater","ts":"2019-09-04T15:14:59.723Z"}
{"msg":"(Minutes uploaded to the usual place)","username":"JonGeater","ts":"2019-09-04T15:15:09.459Z"}
{"msg":"*Maintainers* I don't see any of you registered: https://wiki.hyperledger.org/display/events/Maintainer+Summit+October+8-10%2C+2019 ","username":"Dan","ts":"2019-09-06T17:33:52.229Z"}
{"msg":"Done! Save me a seat ","username":"cam-parra","ts":"2019-09-06T17:40:47.080Z"}
{"msg":"I can't go","username":"JonGeater","ts":"2019-09-07T14:47:57.628Z"}
{"msg":"I believe I’m going","username":"MALodder","ts":"2019-09-09T15:52:53.832Z"}
{"msg":"I RSVP'd too.","username":"hartm","ts":"2019-09-09T21:16:57.765Z"}
{"msg":"Ideally we can put together an agenda ahead of time.","username":"hartm","ts":"2019-09-09T21:17:13.229Z"}
{"msg":"@hartm cool. Yes there is an agenda page which you are encouraged to add to.","username":"Dan","ts":"2019-09-12T10:02:11.286Z"}
{"msg":"According to a text book, the units in F[x] (ring of polynomials over field F) are exactly the nonzero elements of the field, F. That seems to ignore a lot of elements of F[x] which have inverses. For example the product of any monic polynomials whose degrees sum to phi(p) would seem to meet the definition of units. e.g. in Z_5, x * x^3 = x^4 = 1.\nAm I misunderstanding the definition of the elements of the field of polynomials or is perhaps this definition of units in the text misleading. It is not accompanied by a proof.","username":"Dan","ts":"2019-09-12T10:02:24.130Z"}
{"msg":"According to a text book, the units in F[x] (field of polynomials) are exactly the nonzero elements of the field, F. That seems to ignore a lot of elements of F[x] which have inverses. For example the product of any monic polynomials whose degrees sum to phi(p) would seem to meet the definition of units. e.g. in Z_5, x * x^3 = x^4 = 1.\nAm I misunderstanding the definition of the elements of the field of polynomials or is perhaps this definition of units in the text misleading. It is not accompanied by a proof.","username":"Dan","ts":"2019-09-12T10:02:24.130Z"}
{"msg":"@Dan Do you mean the ring of polynomials over a field?","username":"hartm","ts":"2019-09-12T13:52:40.645Z"}
{"msg":"Yeah ","username":"Dan","ts":"2019-09-12T13:57:17.202Z"}
{"msg":"Yeah .. fixed typo. Thanks.","username":"Dan","ts":"2019-09-12T13:57:17.202Z"}
{"msg":"Here's an explanation:  https://math.stackexchange.com/questions/354505/units-of-polynomial-rings-over-a-field","username":"hartm","ts":"2019-09-12T14:00:21.082Z"}
{"msg":"Are you sure you aren't considering R[x] / f(x) rather than just R[x]?","username":"hartm","ts":"2019-09-12T14:02:21.697Z"}
{"msg":"Has left the channel.","username":"donqui","ts":"2019-09-12T14:16:36.623Z","type":"ul"}
{"msg":"https://github.com/hyperledger/ursa/pull/55","username":"MALodder","ts":"2019-09-13T18:43:42.128Z"}
{"msg":"if you run `cargo bench`\nit shows that key generation for PS is 2-3X slower than BBS+","username":"MALodder","ts":"2019-09-13T18:44:04.007Z"}
{"msg":"it also shows that signing for PS is 2-3X slower than BBS+","username":"MALodder","ts":"2019-09-13T18:44:27.313Z"}
{"msg":"however, its all in the order of milliseconds, so it may not be important","username":"MALodder","ts":"2019-09-13T18:44:52.388Z"}
{"msg":"for example, bbs keygen for 100 messages is `52.096 ms`","username":"MALodder","ts":"2019-09-13T18:45:40.830Z"}
{"msg":"ps keygen for 100 messages is `135.76 ms`","username":"MALodder","ts":"2019-09-13T18:45:57.306Z"}
{"msg":"bbs+ for sign without any prior commitments is `12.376 ms`","username":"MALodder","ts":"2019-09-13T18:46:30.545Z"}
{"msg":"bbs+ for sign without any prior commitments with 100 messages is `12.376 ms`","username":"MALodder","ts":"2019-09-13T18:46:30.545Z"}
{"msg":"ps for sign without any prior commitments is `31.222 ms`\n\nsigning with prior commitments (blinded signatures) will be faster than those","username":"MALodder","ts":"2019-09-13T18:48:02.098Z"}
{"msg":"ps for sign without any prior commitments with 100 messages is `31.222 ms`\n\nsigning with prior commitments (blinded signatures) will be faster than those","username":"MALodder","ts":"2019-09-13T18:48:02.098Z"}
{"msg":"that's on my personal macbook","username":"MALodder","ts":"2019-09-13T18:48:10.967Z"}
{"msg":"Depending on the feature selected, PS will have either faster sig or proof of knowledge of sig. The default feature (PS_G1G2) makes proof of knowledge faster since that is much more common occurence than signing","username":"lovesh","ts":"2019-09-13T20:12:48.855Z"}
{"msg":"Secondly is there some benchmark/test code you run to measure timing for BBS+","username":"lovesh","ts":"2019-09-13T20:13:17.149Z"}
{"msg":"That’s my next benchmark ","username":"MALodder","ts":"2019-09-13T20:45:04.458Z"}
{"msg":"@here I just received an email from the Iroha team that their intern just completed the work of moving Iroha over to Ursa.","username":"dhuseby","ts":"2019-09-13T21:06:53.427Z"}
{"msg":"Iroha is the first of the HL DLTs to *move* to Ursa (Indy kind of supported it from the start).","username":"dhuseby","ts":"2019-09-13T21:07:16.228Z"}
{"msg":"congratulations everybody!!","username":"dhuseby","ts":"2019-09-13T21:07:25.252Z"}
{"msg":"+1000","username":"danielhardman","ts":"2019-09-13T21:07:46.942Z"}
{"msg":"No Sovrin Crypto call today. Some participants are at TPAC and I have a family engagement today. See you all Wednesday morning ","username":"MALodder","ts":"2019-09-16T12:32:04.791Z"}
{"msg":"What do you think about moving the Sovrin Crypto call to wednesdays alternating with the ursa call?","username":"Dan","ts":"2019-09-16T12:42:20.363Z"}
{"msg":"That would mean I'd be able to attend","username":"JonGeater","ts":"2019-09-16T12:45:01.723Z"}
{"msg":"I'm fine with that as well.  Bringing regularity to my schedule is always a good thing.","username":"hartm","ts":"2019-09-16T14:51:37.504Z"}
{"msg":"Has left the channel.","username":"rjones","ts":"2019-09-16T15:36:04.928Z","type":"ul"}
{"msg":"Is there a call today?  I missed the usual friendly reminder...joining anyway (although I've done nothing this week :-( )","username":"JonGeater","ts":"2019-09-18T13:59:13.832Z"}
{"msg":"https://tools.ietf.org/html/rfc8235#page-8","username":"Dan","ts":"2019-09-18T14:08:31.853Z"}
{"msg":"There is a conflict with an Indy/Aries call that is on the off week from Ursa, otherwise I would do that. That time was the initial thought to where to move it","username":"MALodder","ts":"2019-09-18T14:11:25.353Z"}
{"msg":"@dhuseby Regarding the Iroha adoption .. is there a bundle of commits the curious among us could peruse? ","username":"Dan","ts":"2019-09-18T14:54:00.008Z"}
{"msg":"https://github.com/hyperledger/iroha/commit/b3adc310e9c797c9dd5c99e4a7b518f2c5cf50f0","username":"JonGeater","ts":"2019-09-18T14:58:11.642Z"}
{"msg":"In reviewing PS signatures, I don't see how `SigKey` is being cleared on Drop","username":"MALodder","ts":"2019-09-18T16:43:23.384Z"}
{"msg":"@lovesh ^^","username":"MALodder","ts":"2019-09-18T16:43:28.932Z"}
{"msg":"Should I raise a Jira ticket for this?","username":"MALodder","ts":"2019-09-18T16:43:43.985Z"}
{"msg":"Sigkey wraps a group element which is set to infinity on Drop","username":"lovesh","ts":"2019-09-18T16:51:20.223Z"}
{"msg":"I see this `https://github.com/lovesh/amcl_rust_wrapper/blob/master/src/group_elem.rs#L145`","username":"MALodder","ts":"2019-09-18T16:59:49.732Z"}
{"msg":"is there another area","username":"MALodder","ts":"2019-09-18T16:59:54.396Z"}
{"msg":"Thats it","username":"lovesh","ts":"2019-09-18T17:37:38.026Z"}
{"msg":"@hartm what are your thoughts on PQ Sigs especially about https://eprint.iacr.org/2019/893.pdf","username":"MALodder","ts":"2019-09-18T17:52:10.650Z"}
{"msg":"@MALodder are you on the NIST PQC mailing list?","username":"hartm","ts":"2019-09-18T18:58:32.104Z"}
{"msg":"There has been a lot of discussion around Falcon recently.","username":"hartm","ts":"2019-09-18T18:59:43.855Z"}
{"msg":"no I'm not","username":"MALodder","ts":"2019-09-18T19:56:15.986Z"}
{"msg":"New PRs https://github.com/hyperledger/ursa/pull/60","username":"MALodder","ts":"2019-09-19T15:03:11.213Z"}
{"msg":"and https://github.com/hyperledger/ursa/pull/59","username":"MALodder","ts":"2019-09-19T15:03:23.921Z"}
{"msg":"Please review","username":"MALodder","ts":"2019-09-19T15:08:42.018Z"}
{"msg":"Also, please add reviews to the other three pending PRs","username":"MALodder","ts":"2019-09-19T15:08:53.523Z"}
{"msg":"< friday watercooler > Long story on the guy that turned in Chelsea Manning  https://www.npr.org/2019/09/19/760317486/the-mysterious-death-of-the-hacker-who-turned-in-chelsea-manning </> ","username":"Dan","ts":"2019-09-20T07:16:57.919Z"}
{"msg":"In implementing a BLS Aggregated signature, short of batching the pairings in the verification step, I can’t think of any other optimizations to do. I mean mathematically, e(x, y),e(x,z) = e(x, y+z). So could some math optimization be done to speed up verification?\nEssentially, can we limit the number of pairing computations\nAside of techniques described here - https://blog.dash.org/bls-is-it-really-that-slow-4ca8c1fcd38e","username":"MALodder","ts":"2019-09-20T22:39:53.341Z"}
{"msg":"I've just laid a comment in https://github.com/hyperledger/ursa/pull/61 - would appreciate people taking a look and seeing if I'm onto something or over-reacting.","username":"JonGeater","ts":"2019-09-22T16:17:51.493Z"}
{"msg":"I personally think it’s good to have the Cargo.lock included so when we do releases it’s easier to audit exactly what crate versions and dependencies were used. I want to reject this PR","username":"MALodder","ts":"2019-09-23T03:45:14.057Z"}
{"msg":"Side note: interesting Rust crate we should use\n\nhttps://github.com/pornin/subtle","username":"MALodder","ts":"2019-09-23T03:45:33.159Z"}
{"msg":"Also, I’m traveling this week and won’t be able to run the Sovrin Crypto call tomorrow. Lately Sovrin is interested in Threshold Signatures to be used to signing blind signatures that can be used for anonymous credentials. \n\nI’ve been doing lots of reading but haven’t really found anything yet worthy of implementing. If anyone knows of a good paper to look at let me know","username":"MALodder","ts":"2019-09-23T03:50:02.206Z"}
{"msg":"Another thought was to apply Shamir Secret Sharing to PS signatures, but I’m unsure of the security proofs surrounding such a model. Would love to hear feedback on that idea.\n\nThe protocol would have a holder request the credential from N issuers. The issuers each sign with their share and the holder aggregates the shares to complete the signature. \n\nAs long as M of N respond, the holder will have a complete signature to use for Selective Disclosure and Zero Knowledge Signature proof of knowledge ","username":"MALodder","ts":"2019-09-23T03:53:34.702Z"}
{"msg":"I believe PS signatures will make this math easier since BBS+ contains a fraction in the exponent of the signature ","username":"MALodder","ts":"2019-09-23T03:55:38.442Z"}
{"msg":"and PS is aggregations and multiplies","username":"MALodder","ts":"2019-09-23T03:57:01.481Z"}
{"msg":"Has joined the channel.","username":"KartikChauhan","ts":"2019-09-23T09:17:45.805Z","type":"uj"}
{"msg":"Hello All,\nI just read the Hyperledger Ursa hyperledger-wiki page and I think the project looks very promising. But I wanted to know if I could use it in a project that I'm working on. It's an enterprise project and I'm concerned about the stability of the Ursa. Another thing, is Ursa a good solution for users' secret generation? We currently generate secret using bcrypt and appending a salt value to the generated value.","username":"KartikChauhan","ts":"2019-09-23T09:23:18.593Z"}
{"msg":"Yes you can use Ursa. I wouldn’t be concerned about stability. We have two projects that are using it so we must keep it stable","username":"MALodder","ts":"2019-09-23T11:44:43.524Z"}
{"msg":"Ursa doesn’t do password hashing yet. You’d be the first to request it","username":"MALodder","ts":"2019-09-23T11:45:24.630Z"}
{"msg":"It’s open source, feel free to contribute ","username":"MALodder","ts":"2019-09-23T17:57:07.325Z"}
{"msg":"@KartikChauhan ursa includes two libraries, libursa and libzmix. Libursa should be pretty stable and is mostly including other vetted libraries. Libzmix is less stable and includes more freshly written novel systems generally related to zero knowledge techniques.","username":"Dan","ts":"2019-09-24T07:15:14.914Z"}
{"msg":"I'm still waiting to see @dhuseby caeser cipher","username":"MALodder","ts":"2019-09-24T07:46:19.129Z"}
{"msg":"I have done a implementation of Coconut in Rust which uses Shamir secret sharing but that means presence of a trusted third party. I am in talks with the author and expect a review shortly. I have to still see how easy will be to use a DKG protocol. Here is the implementation https://github.com/lovesh/coconut-rust","username":"lovesh","ts":"2019-09-24T12:59:29.109Z"}
{"msg":"If this implementation is fine then we will move it to Ursa?","username":"lovesh","ts":"2019-09-24T13:00:13.995Z"}
{"msg":"I remember @manud mentioning a vulnerability in coconut. I’d like to hear his opinion ","username":"MALodder","ts":"2019-09-24T13:58:01.099Z"}
{"msg":"@MALodder soooon","username":"dhuseby","ts":"2019-09-24T20:58:57.644Z"}
{"msg":"tppppo","username":"Dan","ts":"2019-09-25T07:16:45.611Z"}
{"msg":"alpha test ^","username":"Dan","ts":"2019-09-25T07:17:20.185Z"}
{"msg":"Has left the channel.","username":"amundson","ts":"2019-09-26T17:17:35.290Z","type":"ul"}
{"msg":"Potentially of interest: https://twitter.com/CommerceGov/status/1177634002817159168","username":"bbehlendorf","ts":"2019-09-27T21:44:46.933Z"}
{"msg":"@Dan the key is supposed to be hard-wired to `d' for dave, not `b'.  We can't have entropy in our keys here!","username":"hartm","ts":"2019-09-28T01:53:37.291Z"}
{"msg":"Has joined the channel.","username":"KellyCooper","ts":"2019-09-29T18:11:15.395Z","type":"uj"}
{"msg":"Hi Hart. I think you forgot to approve the PS signature RFC https://github.com/hyperledger/ursa-rfcs/pull/11","username":"lovesh","ts":"2019-09-30T04:36:08.613Z"}
{"msg":"Sovrin Crypto call in 45 minutes","username":"MALodder","ts":"2019-09-30T14:14:22.904Z"}
{"msg":"I've got a regular conflict now so won't be there. I peaked at the agenda though and my answer to the last question is 65243.","username":"Dan","ts":"2019-09-30T14:36:53.239Z"}
{"msg":"^^^ Find link above","username":"lovesh","ts":"2019-09-30T15:35:15.026Z"}
{"msg":"https://blog.rust-lang.org/2019/09/30/Security-advisory-for-cargo.html","username":"MALodder","ts":"2019-09-30T15:45:45.954Z"}
{"msg":"https://rwc.iacr.org/2020/contributed.html","username":"hartm","ts":"2019-09-30T15:58:06.239Z"}
{"msg":"@Dan and @rjones for some reason my hyperledger account is still connected to my evernym account so i can't join the maintainers mailing list. Or else I'd totally do as you emailed me about Dan ","username":"cam-parra","ts":"2019-09-30T16:10:01.227Z"}
{"msg":"Has joined the channel.","username":"rjones","ts":"2019-09-30T16:10:01.268Z","type":"uj"}
{"msg":"your groups.io account should be distinct from your LFID","username":"rjones","ts":"2019-09-30T18:44:47.028Z"}
{"msg":"anyway - I sent an invite to the email in your chat profile at gmail, which doesn't look like it has a l.h.o account","username":"rjones","ts":"2019-09-30T18:47:03.802Z"}
{"msg":"Has joined the channel.","username":"swcurran","ts":"2019-10-02T11:57:36.402Z","type":"uj"}
{"msg":"Has joined the channel.","username":"s.weidenbach","ts":"2019-10-02T11:57:37.275Z","type":"uj"}
{"msg":"http://theory.stanford.edu/~dfreeman/cs259c-f11/index.html","username":"hartm","ts":"2019-10-02T14:58:12.097Z"}
{"msg":"Has joined the channel.","username":"mxs1491","ts":"2019-10-02T19:42:43.072Z","type":"uj"}
{"msg":"No Sovrin Crypto call today. I’m traveling to the maintainers summiy","username":"MALodder","ts":"2019-10-07T13:45:51.081Z"}
{"msg":"No Sovrin Crypto call today. I’m traveling to the maintainers summit","username":"MALodder","ts":"2019-10-07T13:45:51.081Z"}
{"msg":"Anyone done a review on the dependencies that ursa uses for signatures to check against [Minerva](https://minerva.crocs.fi.muni.cz/)?","username":"kdenhartog","ts":"2019-10-08T03:11:14.883Z"}
{"msg":"It's a sidechannel attack that appears to previously been known in academia, but this was an audit on a few different implementations.","username":"kdenhartog","ts":"2019-10-08T03:12:06.844Z"}
{"msg":"No we haven't, but none of the ursa dependencies are on the affected list","username":"MALodder","ts":"2019-10-08T04:28:09.281Z"}
{"msg":"Its very similar to https://eprint.iacr.org/2019/023.pdf","username":"MALodder","ts":"2019-10-08T04:30:48.584Z"}
{"msg":"In talking to Nadia, one of the authors, she told me that libsodium and libsecp256k1 were not vulnerable to her attack","username":"MALodder","ts":"2019-10-08T04:32:07.975Z"}
{"msg":"ursa uses libsecp256k1","username":"MALodder","ts":"2019-10-08T04:32:32.700Z"}
{"msg":"I don't know if curve25519-dalek is vulnerable to that or not but again its not on the list ","username":"MALodder","ts":"2019-10-08T04:33:27.728Z"}
{"msg":"perhaps @hartm could elaborate more on this too","username":"MALodder","ts":"2019-10-08T04:48:34.461Z"}
{"msg":"I haven't rigorously gone through the attack.  And you already talked to Nadia about it--she's the expert.","username":"hartm","ts":"2019-10-08T04:49:09.011Z"}
{"msg":"However, it seems to me that this involves a timing attack and the more the library has constant time implementations, the more resistant it should be","username":"MALodder","ts":"2019-10-08T04:49:21.378Z"}
{"msg":"and any language with a garbage collector isn't really constant time","username":"MALodder","ts":"2019-10-08T04:49:54.025Z"}
{"msg":"The paper you linked isn't a timing attack.  It's attacking people who didn't generate keys properly.","username":"hartm","ts":"2019-10-08T04:50:33.787Z"}
{"msg":"Right, specifically the nonces used for ECDSA signing and EdDSA key generation","username":"MALodder","ts":"2019-10-08T04:51:09.196Z"}
{"msg":"It does mention that the tool measure timing leakage of bit-length in scalar-multiplication","username":"MALodder","ts":"2019-10-08T04:51:46.875Z"}
{"msg":"Yeah.  I have no idea what particular implementations are vulnerable.  I saw that paper awhile back and was just mostly interested in how they applied lattice cryptanalysis tools to groups.","username":"hartm","ts":"2019-10-08T04:52:30.409Z"}
{"msg":"@dhuseby @MALodder @Dan and others, Are you opposed to always running the tests in release mode (`cargo test --release`)? Since tests take a long time in some of my PRs, TravisCI times out; this timeout can be fixed by running in release mode. The downside would be not getting a stacktrace that is as helpful as the debug mode's but one can debug the failing test on his local machine unless the failure is intermittent.","username":"lovesh","ts":"2019-10-08T19:45:46.824Z"}
{"msg":"No I’m okay with that","username":"MALodder","ts":"2019-10-08T19:46:12.053Z"}
{"msg":"CI Test passes should be a canary in the coal mine that signals needed investigation. I’m good. ","username":"dhuseby","ts":"2019-10-08T20:36:40.308Z"}
{"msg":"","username":"dhuseby","ts":"2019-10-08T20:37:14.954Z","attachments":[{"type":"file","title":"notes from Fabric+Ursa session","title_link":"/file-upload/vPJNXz8YuArFfDivh/notes%20from%20Fabric+Ursa%20session","image_url":"/file-upload/vPJNXz8YuArFfDivh/notes%20from%20Fabric+Ursa%20session","image_type":"image/jpeg","image_size":908145,"url":"/file-upload/vPJNXz8YuArFfDivh/notes%20from%20Fabric+Ursa%20session","remote":false,"fileId":"vPJNXz8YuArFfDivh","fileName":"notes from Fabric+Ursa session"}]}
{"msg":"Has joined the channel.","username":"achenette","ts":"2019-10-09T17:50:47.750Z","type":"uj"}
{"msg":"@MALodder - FYI, Hyperledger's Copyright and License policy is on their wiki:\nhttps://wiki.hyperledger.org/display/HYP/Copyright+and+License+Policy","username":"achenette","ts":"2019-10-09T17:50:47.934Z"}
{"msg":"That was the understanding I took away from the comments that the person who fixed elliptic suggested in stablelib","username":"kdenhartog","ts":"2019-10-09T23:32:24.948Z"}
{"msg":"New paper by Marry Miller to use inner product argument to verify pairing product relations. Using this to verify several pairing product relations, the verifier computes constant number of pairings but 6(n + log(n)) exponentiations https://eprint.iacr.org/2019/1177.pdf\nThey give an example of verifying BLS sigs under different messages but we can use this in delegatable credentials too when no of attributes is large or large chain\nIf we expose enough details in our code for anoncreds, proofs over lots of credentials can be very cheap to verify","username":"lovesh","ts":"2019-10-10T13:32:08.082Z"}
{"msg":"@hartm Thoughts ^^^ ?","username":"lovesh","ts":"2019-10-10T13:32:44.362Z"}
{"msg":"You're really fast Lovesh.  That paper was posted in the last 24 hours, so I haven't had a chance to look at it.  You actually spotted it before I did.  I'll take a look sometime soon.","username":"hartm","ts":"2019-10-10T13:59:06.310Z"}
{"msg":"Unfortunately thats the only thing i am fast at. I haven't read much yet but will post here once i do.","username":"lovesh","ts":"2019-10-10T14:02:16.087Z"}
{"msg":"That's absolutely false.","username":"hartm","ts":"2019-10-10T14:02:32.979Z"}
{"msg":"But yes, the paper definitely seems worth reading.","username":"hartm","ts":"2019-10-10T14:03:07.051Z"}
{"msg":"We can discuss it at the Sovrin crypto meeting next week if you want.","username":"hartm","ts":"2019-10-10T14:03:16.081Z"}
{"msg":"Is there any plan in place to add encrypt functionality to libursa?","username":"kdenhartog","ts":"2019-10-11T04:09:38.882Z"}
{"msg":"Has joined the channel.","username":"yerlibilgin","ts":"2019-10-11T12:32:20.177Z","type":"uj"}
{"msg":"Hello everyone. I work at TUBITAK BILGEM. We have a DigitalID project, I am interested in learning ursa (both sublibs) (as well as aries-go) and the relationship between the two. We plan to employ the Indy architecture in our project. @MALodder we met at the workshop in Istanbul","username":"yerlibilgin","ts":"2019-10-11T12:57:07.239Z"}
{"msg":"Hello everyone. I work at TUBITAK BILGEM. We have a DigitalID project, I am interested in learning ursa (both sublibs) (as well as aries-go) and the relationship between the two. We plan to employ the Indy architecture in our project. @MALodder @mwherman2000  we met at the workshop in Istanbul","username":"yerlibilgin","ts":"2019-10-11T12:57:07.239Z"}
{"msg":"@kdenhartog yes I’m finishing the RFC. Which algorithms are you looking for ","username":"MALodder","ts":"2019-10-11T13:11:23.517Z"}
{"msg":"The usual Xsalsa XChacha and AES-GCM. I’d be willing to help write one.","username":"kdenhartog","ts":"2019-10-11T20:37:03.307Z"}
{"msg":"We will most likely wrap the implementations done by the Rust Crypto team","username":"MALodder","ts":"2019-10-13T05:02:53.363Z"}
{"msg":"https://github.com/hyperledger/sawtooth-sdk-rust/pull/37 interesting","username":"rjones","ts":"2019-10-13T06:01:42.202Z"}
{"msg":"Sounds good. Also, I'm evaluating the didcomm crypto layer and what we should be doing for a key agreement protocol to account for MITM and be more explicit about the security properties we're accounting for. Right now the two I've been looking at are TLS 1.3 and SSB's key exchange protocol https://dominictarr.github.io/secret-handshake-paper/shs.pdf","username":"kdenhartog","ts":"2019-10-14T02:26:54.897Z"}
{"msg":"Are there other ones that I should be checking out?","username":"kdenhartog","ts":"2019-10-14T02:27:02.128Z"}
{"msg":"One of the problems I've found with TLS is that they build around a \"middlebox\" which is essentially a benevolent MITM. However, when looking into what it's used for further I found a BYU paper that found that in some cases it's used by advertisers and malware to be malicious. I'd like to exclude this capability, so my question is ,\"are there any key exchange protocols which are formally verified to not be susceptible to MITM attacks or at least define what is acceptably excluded in the security properties?\"","username":"kdenhartog","ts":"2019-10-14T02:31:39.601Z"}
{"msg":"None that I know of @kdenhartog ","username":"MALodder","ts":"2019-10-14T03:46:17.569Z"}
{"msg":"Dang, I've got a sneaking suspicion that there aren't any out there because they would be a solution to the trust on first use problem.","username":"kdenhartog","ts":"2019-10-14T06:05:22.991Z"}
{"msg":"Interesting question: I was just looking at the Montgomery curve wikipedia page and I noticed that they can be made equivalent to both twisted Edwards curves and Weierstrass curves. Does that mean that it's possible to map an Ed25519 key to an X25519 key and then map it to a Weierstrass curve (I presume this would be a non-common curve because the base points are different)?","username":"kdenhartog","ts":"2019-10-14T06:48:46.141Z"}
{"msg":"Montgomery curves are used for the Diffie Hellman computation typically because its more secure and efficient (correct me if I'm wrong @hartm) using the Montgomery ladder for that. Twisted Edwards and Weierstrass curves are used for computing signatures. So you could in theory map Ed25519 to the Weierstrass equivalent, why would you? Curve25519 is much faster on which to operate vs Weierstrass","username":"MALodder","ts":"2019-10-14T14:01:33.168Z"}
{"msg":"@kdenhartog Key exchange protocols are always vulnerable to MITM attacks.  That's why the internet runs on certificates.  It's impossible without some kind of certificate or certificate-like thing to know who you are actually talking to, so MITM attacks are essentially always possible without this.  I'm not sure this answered your question, but I think what you're asking for is impossible.","username":"hartm","ts":"2019-10-14T14:04:12.263Z"}
{"msg":"@MALodder I'm going to defer the questions on efficiency to use.  Which curves are more secure is not a settled matter, though--people have lots of different opinions.","username":"hartm","ts":"2019-10-14T14:06:08.016Z"}
{"msg":"Sovrin Crypto call https://zoom.us/j/567114224","username":"MALodder","ts":"2019-10-14T15:01:58.722Z"}
{"msg":"@MALodder as @rjones pointed out it looks like sawtooth is switching to rustcrypto instead of ursa. Could you pop in and offer to switch them to ursa?","username":"cam-parra","ts":"2019-10-14T16:39:22.995Z"}
{"msg":"I can do that as well","username":"cam-parra","ts":"2019-10-14T16:39:34.114Z"}
{"msg":"We already are using Rust Crypto vs rust-crypto","username":"MALodder","ts":"2019-10-14T16:39:41.583Z"}
{"msg":"No work required","username":"MALodder","ts":"2019-10-14T16:39:57.244Z"}
{"msg":"oh okay works for me ","username":"cam-parra","ts":"2019-10-14T16:40:36.570Z"}
{"msg":"","username":"MALodder","ts":"2019-10-14T21:09:34.549Z","attachments":[{"type":"file","title":"Clipboard - October 14, 2019 3:09 PM","title_link":"/file-upload/dbRcaKPCM5jwbYaMc/Clipboard%20-%20October%2014,%202019%203:09%20PM","image_url":"/file-upload/dbRcaKPCM5jwbYaMc/Clipboard%20-%20October%2014,%202019%203:09%20PM","image_type":"image/png","image_size":19101,"url":"/file-upload/dbRcaKPCM5jwbYaMc/Clipboard%20-%20October%2014,%202019%203:09%20PM","remote":false,"fileId":"dbRcaKPCM5jwbYaMc","fileName":"Clipboard - October 14, 2019 3:09 PM"}]}
{"msg":"This is interesting. In `https://github.com/mikelodder7/ursa/tree/bls` I have implemented what I call Normal BLS signatures and Small BLS signatures.\n\nThe difference being the signature group and public key groups are swapped. This means smaller signatures vs larger public keys (Small BLS) or larger signatures vs smaller public keys (Normal BLS).\n\nWhen I benchmark the two, Small BLS wins in every case except for key generation. I'd like to see what others get. \nTo generate the same report \n1- git clone https://github.com/hyperledger/ursa\n2- cd ursa\n3- cargo bench -- bls","username":"MALodder","ts":"2019-10-14T21:10:24.548Z"}
{"msg":"This is interesting. In `https://github.com/mikelodder7/ursa/tree/bls` I have implemented what I call Normal BLS signatures and Small BLS signatures.\n\nThe difference being the signature group and public key groups are swapped. This means smaller signatures vs larger public keys (Small BLS) or larger signatures vs smaller public keys (Normal BLS).\n\nWhen I benchmark the two, Small BLS wins in every case except for key generation. I'd like to see what others get. \nTo generate the same report \n1- git clone https://github.com/mikelodder7/ursa -b bls\n2- cd ursa\n3- cargo bench -- bls","username":"MALodder","ts":"2019-10-14T21:10:24.548Z"}
{"msg":"make sure to use rust 1.38","username":"MALodder","ts":"2019-10-14T21:11:38.315Z"}
{"msg":"I'm not sure why Small wins that often, I expected it to be slower for verification but faster to sign","username":"MALodder","ts":"2019-10-14T21:12:04.274Z"}
{"msg":"rk means rogue key","username":"MALodder","ts":"2019-10-14T21:12:19.028Z"}
{"msg":"https://eprint.iacr.org/2019/202","username":"hartm","ts":"2019-10-16T14:11:11.197Z"}
{"msg":"https://eprint.iacr.org/2019/1058.pdf","username":"lovesh","ts":"2019-10-16T14:39:24.557Z"}
{"msg":"Jan Camenisch's paper describing threshold signatures. Page 19 and 22 are relevant. https://eprint.iacr.org/2019/1058.pdf","username":"lovesh","ts":"2019-10-16T14:39:24.557Z"}
{"msg":"https://npmccallum.gitlab.io/post/do-not-use-ring-or-rustls/","username":"MALodder","ts":"2019-10-16T20:11:48.950Z"}
{"msg":"I noticed the `build-environment.md` doc recommends installing libsodium 1.0.16, but the dependencies on the root `readme.md` says it depends on `1.0.18`. Should the build environment doc be updated?","username":"kdenhartog","ts":"2019-10-17T01:18:56.819Z"}
{"msg":"I'll submit a PR if so","username":"kdenhartog","ts":"2019-10-17T01:19:09.395Z"}
{"msg":"yes","username":"MALodder","ts":"2019-10-17T03:32:08.619Z"}
{"msg":"we use libsodium to test, its not used in builds","username":"MALodder","ts":"2019-10-17T03:32:23.667Z"}
{"msg":"Has joined the channel.","username":"silviu","ts":"2019-10-17T21:29:21.472Z","type":"uj"}
{"msg":"Howdy, I was at the HL bootcamp last week and I'm traveling for a different event this week. Should be back in the groove next week though. Sorry if anything is stalled on me.","username":"Dan","ts":"2019-10-21T08:13:49.874Z"}
{"msg":"https://people.cs.nctu.edu.tw/~rjchen/ECC2012S/Elliptic%20Curves%20Number%20Theory%20And%20Cryptography%202n.pdf","username":"hartm","ts":"2019-10-21T15:04:56.785Z"}
{"msg":"ooooo where can I get a hard copy of that?","username":"cam-parra","ts":"2019-10-21T15:23:52.030Z"}
{"msg":"@cam-parra Probably amazom?","username":"hartm","ts":"2019-10-21T17:01:05.084Z"}
{"msg":"https://www.amazon.com/Elliptic-Curves-Cryptography-Mathematics-Applications/dp/1420071467","username":"hartm","ts":"2019-10-21T17:01:36.243Z"}
{"msg":"It's a very nice book in that it doesn't presuppose a lot of difficult math notation that many other math textbooks do.","username":"hartm","ts":"2019-10-21T17:01:52.870Z"}
{"msg":"https://github.com/hyperledger/ursa/pull/74","username":"MALodder","ts":"2019-10-22T15:01:26.564Z"}
{"msg":"Can I get another reviewer?","username":"MALodder","ts":"2019-10-22T15:01:35.949Z"}
{"msg":"Has joined the channel.","username":"dnnn","ts":"2019-10-22T17:58:25.600Z","type":"uj"}
{"msg":"Hello to everyone,\nI am trying out some of the `ursa`'s functionality in an iOS app, and I have a question regarding a c-callable methods.\nThis is my first experience of working with c-callable lib, so please bear with me :)\n\nFirst I generate `master_secret`  with `ursa_cl_prover_new_master_secret` and pass the pointer to  `ursa_cl_master_secret_to_json` having a pointer to JSON `ptr_to_json`as an outcome.\nSo now, given this pointer I want to get the JSON itself.\nIn `swift` I manage to do so with the help of\n `UnsafeRawBufferPointer(start: <pointer>, count: <number_of_bytes_to_read>)`\nThe problem is that the length of the JSON string referenced by `ptr_to_json` can vary each time (from 81 to 87 bytes as far as understood, when run secret generation multiple time)\nMy question is what is the right approach to get JSON the values referenced by pointers that I receive as the result of `ursa` method execution? \nI see that there are other methods that result in pointers to JSON strings, and the length of generated JSONs will vary (I guess) as the structures of those JSONs are more complex that `{\"ms\": \"SOME_BIG_INT\"}`\n\nAny tips or suggestions will be highly appreciated.","username":"dnnn","ts":"2019-10-22T17:58:26.224Z"}
{"msg":"@MALodder thanks again for hints on how to build the library for iOS","username":"dnnn","ts":"2019-10-22T17:59:20.722Z"}
{"msg":"this interface needs to be reworked to use ffi-support interface vs what it is now. I might be able to help in this area but am quite busy ","username":"MALodder","ts":"2019-10-22T18:10:18.527Z"}
{"msg":"thanks for a rapid reply!","username":"dnnn","ts":"2019-10-22T18:19:47.288Z"}
{"msg":"the existing interface was written quickly without too much of a concern for usability for rapid prototyping","username":"MALodder","ts":"2019-10-22T18:20:59.070Z"}
{"msg":"Has joined the channel.","username":"prieblinger","ts":"2019-10-23T12:23:33.926Z","type":"uj"}
{"msg":"Good day to everyone, a short question about `master_secret`. found the following comment \n```\n // Master secret is now called link secret.\n    pub static LINK_SECRET: &'static str = \"master_secret\";\n```\nIn future releases all \"master_secret\" related entities will be eventually renamed to \"link_secret\", right?","username":"dnnn","ts":"2019-10-23T13:11:43.030Z"}
{"msg":"that is correct","username":"MALodder","ts":"2019-10-23T14:32:51.124Z"}
{"msg":"What's happening is we keep trying to invent a better word for it. The latest thinking is \"holder seal\". The problem is trying to find a word that correctly conveys the right mental model. Master secret was definitely not correct because it implied that this was the grand secret if stolen means identity theft which is not the case","username":"MALodder","ts":"2019-10-23T14:35:55.899Z"}
{"msg":"Has joined the channel.","username":"rallam","ts":"2019-10-23T15:56:21.182Z","type":"uj"}
{"msg":"thanks for the info. as far as I understand this secret is participating in the process of creation of every credential for the holder of identity (thus \"linking\" them, and I see why \"link secret\" is one of the options for a name), so if it is stolen, doesn't it make credentials already issued with this secret compromised? I mean the thief would be able to generate proofs as the holder of identity (which is kinda identity theft)? I don't have a very deep understanding of the subject yet, so pardon me if I ask something silly. Just want to better understand your point about identity theft and stealing this secret","username":"dnnn","ts":"2019-10-23T17:47:55.021Z"}
{"msg":"Just stealing the secret doesn't all impersonation. The attacker will have to steal ALL attributes in credentials and the credential signature. Then they can impersonate for a single credential.\n\nSo to do complete impersonation, the attacker needs ALL attributes and ALL signatures","username":"MALodder","ts":"2019-10-23T17:49:32.411Z"}
{"msg":"big thanks for clarifications","username":"dnnn","ts":"2019-10-23T18:21:30.660Z"}
{"msg":"Has joined the channel.","username":"josephboyle","ts":"2019-10-25T20:40:36.627Z","type":"uj"}
{"msg":"Has joined the channel.","username":"giancarloGiuffra","ts":"2019-10-28T15:02:26.391Z","type":"uj"}
{"msg":"Hello everyone. Can someone point to me the academic paper describing the security of the cryptographic accumulator implemented in ursa? The explanation here (https://hyperledger-indy.readthedocs.io/projects/sdk/en/latest/docs/concepts/revocation/cred-revocation.html) is too high level and I haven't been able to find any other description of cryptographic accumulators in the hyperledger projects. I looked into Idemix (which was the starting point of the evernym implementation) and I believe the specification mentions the following paper \"An Accumulator Based on Bilinear Maps andEfficient Revocation for Anonymous Credentials\" by Camenisch, Kohlweiss and Soriente. Thanks for any useful info.","username":"giancarloGiuffra","ts":"2019-10-28T15:02:27.501Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=3aoow39sxohvoY9ci) anyone?","username":"giancarloGiuffra","ts":"2019-10-29T10:00:11.774Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=3aoow39sxohvoY9ci","url":"https://chat.hyperledger.org/channel/ursa?msg=3aoow39sxohvoY9ci","remote":true,"fileId":null,"fileName":null}]}
{"msg":"I am almost certain that accumulator in Indy is described in section 3.2 in this paper. This tex file contains more implementation details of revocation https://github.com/hyperledger/ursa-docs/blob/master/specs/anoncreds1/anoncreds.tex. If you can't create the PDF, you can access a slightly older version in a deprecated repo https://github.com/hyperledger/indy-crypto/blob/master/libindy-crypto/docs/AnonCred.pdf","username":"lovesh","ts":"2019-10-29T15:13:41.870Z"}
{"msg":"I am almost certain that accumulator in Indy is described in section 3.2 in this paper. Some nomenclature differece, the paper calls it \"state\" whereas Indy calls it \"tails\". This tex file contains more implementation details of revocation https://github.com/hyperledger/ursa-docs/blob/master/specs/anoncreds1/anoncreds.tex. If you can't create the PDF, you can access a slightly older version in a deprecated repo https://github.com/hyperledger/indy-crypto/blob/master/libindy-crypto/docs/AnonCred.pdf","username":"lovesh","ts":"2019-10-29T15:13:41.870Z"}
{"msg":"In case you are doing a comparison, I would like to ask a favor. I came across this paper from Jan Camenisch last week that claims to improve upon our revocation scheme. If you don't mind can you please check this one out as well https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/main-51.pdf","username":"lovesh","ts":"2019-10-29T15:25:26.304Z"}
{"msg":"@lovesh thank you, I compiled the tex and reading the article.","username":"giancarloGiuffra","ts":"2019-10-29T15:35:59.462Z"}
{"msg":"@lovesh thank you very much, I compiled the tex and reading the article.","username":"giancarloGiuffra","ts":"2019-10-29T15:35:59.462Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=eygBk9FdnRxRnmhS2) @lovesh the Camenisch article is from 2010","username":"giancarloGiuffra","ts":"2019-10-29T16:05:11.310Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=eygBk9FdnRxRnmhS2","url":"https://chat.hyperledger.org/channel/ursa?msg=eygBk9FdnRxRnmhS2","remote":true,"fileId":null,"fileName":null}]}
{"msg":"You mean this one \"An Accumulator Based ....\", its from 2008, https://eprint.iacr.org/2008/539","username":"lovesh","ts":"2019-10-29T16:26:15.321Z"}
{"msg":"My bad, the link i shared is from 2010. I looked a bit more and that setting is not useful for us. Also it increases the cost of Issuer linearly for non revoked users. So overall, not useful","username":"lovesh","ts":"2019-10-29T19:50:32.668Z"}
{"msg":"Reminder that the Sovrin Crypto Meeting is at 9am MDT. For those in areas that don’t observe daylight savings it will be an hour later than you are used to","username":"MALodder","ts":"2019-11-04T14:33:39.138Z"}
{"msg":"https://aws.amazon.com/blogs/security/post-quantum-tls-now-supported-in-aws-kms/","username":"MALodder","ts":"2019-11-05T05:55:45.799Z"}
{"msg":"Has left the channel.","username":"prieblinger","ts":"2019-11-05T13:15:08.309Z","type":"ul"}
{"msg":"Has joined the channel.","username":"AnnaJ","ts":"2019-11-05T15:59:13.494Z","type":"uj"}
{"msg":"@rjones This job https://travis-ci.com/hyperledger/ursa/jobs/254273651 succeeded but times out because travis is trying to update its cache after the test runs. This has happened three times now. Can you mark it as succeeded or extend the time limit some how?","username":"MALodder","ts":"2019-11-09T06:31:08.194Z"}
{"msg":"@MALodder I don't see a way I can turn a knob and fix that. I think, once you have one more approved review, I could force-merge it even with the failed but;d","username":"rjones","ts":"2019-11-09T10:05:46.468Z"}
{"msg":"@MALodder I don't see a way I can turn a knob and fix that. I think, once you have one more approved review, I could force-merge it even with the failed build","username":"rjones","ts":"2019-11-09T10:05:46.468Z"}
{"msg":"Bummer. I can merge it too so no worries","username":"MALodder","ts":"2019-11-09T13:58:55.032Z"}
{"msg":"We're paying for circle-ci if you want to try moving there. I think we can get longer timeouts.","username":"rjones","ts":"2019-11-10T01:30:05.556Z"}
{"msg":"I just don't see a knob I can turn to increase the timeout.","username":"rjones","ts":"2019-11-10T01:30:28.938Z"}
{"msg":"makes sense","username":"MALodder","ts":"2019-11-11T15:08:54.570Z"}
{"msg":"Has joined the channel.","username":"sanjaysb","ts":"2019-11-13T04:53:50.564Z","type":"uj"}
{"msg":"Has joined the channel.","username":"mlucc","ts":"2019-11-14T14:49:39.815Z","type":"uj"}
{"msg":"Hello, can anyone share with me a project that uses Hyperledger Ursa as a use case?","username":"mlucc","ts":"2019-11-14T14:49:40.781Z"}
{"msg":"specifically that uses ZKPs","username":"mlucc","ts":"2019-11-14T14:49:46.328Z"}
{"msg":"please","username":"mlucc","ts":"2019-11-14T14:49:51.856Z"}
{"msg":"Hyperledger Indy does and Aries will soon too","username":"MALodder","ts":"2019-11-14T15:06:46.725Z"}
{"msg":"vonx.io uses Indy, Evernyms connect.me, and Streetcred are the first that come to mind","username":"MALodder","ts":"2019-11-14T15:07:29.130Z"}
{"msg":"ok thank you","username":"mlucc","ts":"2019-11-14T16:58:18.600Z"}
{"msg":"@MALodder - a question about anoncreds 2.0.  I've heard that there will be a feature (or could be - that's part of the question) that allows proving a claim from a credential and proving a self-asserted claim such that the verifier can be certain that the link secret used for the claim from the credential was also used for the self-asserted claim.  Is that true?\n\nScenario: An voter has a piece of gov't id. They use that to prove they are older than the voting age, but no other information from the credential.  They also sign a piece of data from the verifier (a unique ID for the election - same data handed to all prospective voters). The verifier knows:\n\n1. They are old enough to vote, as attested by their gov't ID.\n2. Their proof is associated with the unique ID for the election in a self-asserted claim.\n3. The verifier knows that the same link secret was used for both claims, and hence can make sure the vote is only counted once.\n\nFor the latter, if the same user submits another vote, only one is counted - likely the last one.\n\nQuestions:\n\n1. Is that feature (self-attested claims, signed/processed somehow the shows the same link secret was used for both claims) in anoncreds 2.0?\n2. Are there any other crypto holes in the scenario I described?","username":"swcurran","ts":"2019-11-14T17:28:33.810Z"}
{"msg":"So the user wouldn't create a self attested credential, but would just add self attested claims to the proof","username":"MALodder","ts":"2019-11-14T17:41:28.142Z"}
{"msg":"one of the values could be a vote ID, notice its not voterID, and if they see the same vote ID twice then they don't count it, the vote ID could be a one time use credential as well that is added to a spent set when its used","username":"MALodder","ts":"2019-11-14T17:42:57.937Z"}
{"msg":"self-asserted claims are capable in anoncreds 2.0","username":"MALodder","ts":"2019-11-14T17:43:59.087Z"}
{"msg":"And they have the attribute that the verifier knows that they used the same link secret as the credential?  That's the detail that I'm looking for.","username":"swcurran","ts":"2019-11-14T17:51:25.398Z"}
{"msg":"And they have the attribute that the verifier knows that they used the same link secret for the self-asserted claim as the claim from the credential?  That's the detail that I'm looking for.","username":"swcurran","ts":"2019-11-14T17:51:25.398Z"}
{"msg":"the self asserted claims don't need a link secret because they are tied to the proof","username":"MALodder","ts":"2019-11-14T17:56:23.307Z"}
{"msg":"OK - so there's no positive link between the link secret and the claim other than they are in the same proof.","username":"swcurran","ts":"2019-11-14T18:34:12.331Z"}
{"msg":"OK - so there's no positive link between the link secret and the self-asserted claim other than they are in the same proof.","username":"swcurran","ts":"2019-11-14T18:34:12.331Z"}
{"msg":"Thanks","username":"swcurran","ts":"2019-11-14T18:34:27.605Z"}
{"msg":"correct","username":"MALodder","ts":"2019-11-14T19:44:56.719Z"}
{"msg":"@swcurran I’m doing a presentation on this stuff next Wednesday. Talk to Anna at Sovrin for more info","username":"MALodder","ts":"2019-11-15T13:26:15.273Z"}
{"msg":"Has joined the channel.","username":"vardan10","ts":"2019-11-21T11:23:50.356Z","type":"uj"}
{"msg":"Has joined the channel.","username":"fabienpe","ts":"2019-11-21T14:09:15.332Z","type":"uj"}
{"msg":"While doing some experiments I came across the following issue and cannot figure out whether it's a bug in the library or an error on my side and was wondering if anyone might have tips to help further investigate. When I'm trying to verify a proof built with two different credentials from the same institution and with the same schema and same definition (so the only difference between the two credentials is the time and serial number), then verification fails. I recognise that this situation is rather unusual, but in principle I don't understand why this should fail.","username":"fabienpe","ts":"2019-11-21T14:32:10.693Z"}
{"msg":"Exception message? Link to code?","username":"lovesh","ts":"2019-11-21T15:25:55.455Z"}
{"msg":"No exception message. I think the issue is that prover_create_proof takes as last input revocation states and there is one state per credential definition, while the rev state is different for each credential (from the same definition).","username":"fabienpe","ts":"2019-11-21T15:58:50.518Z"}
{"msg":"No exception message (just proof verification fails). I think the issue is that prover_create_proof takes as last input revocation states and there is one state per credential definition, while the rev state is different for each credential (from the same definition).","username":"fabienpe","ts":"2019-11-21T15:58:50.518Z"}
{"msg":"Which lib/which file has the function `prover_create_proof`? Can't find in the current Ursa codebase","username":"lovesh","ts":"2019-11-22T05:35:25.681Z"}
{"msg":"Check `https://github.com/fabienpe/indy-sdk/blob/master/samples/python/src/getting_started_2.py`  At line 312 you can choose issuing 1 or more Transcripts from Faber. If one is issued, then all goes well. If two are issued, then proof with Acme fails. The trace says `TRACE:indy.libindy.native.ursa.cl.verifier:\txxxx\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ursa-0.2.0\\src\\cl\\verifier.rs:317 | ProofVerifier::verify: <<< valid: false`","username":"fabienpe","ts":"2019-11-22T12:41:03.167Z"}
{"msg":"Has left the channel.","username":"rjones","ts":"2019-11-22T12:41:28.341Z","type":"ul"}
{"msg":"If you try without revocation, i.e., line 463 `'non_revoked': {'to': time_stamp}`, it works?","username":"lovesh","ts":"2019-11-22T15:13:58.434Z"}
{"msg":"Has joined the channel.","username":"rjones","ts":"2019-11-23T19:06:06.461Z","type":"uj"}
{"msg":"@MALodder I created https://dev.azure.com/Hyperledger/ursa-dev/_build which points to https://github.com/hyperledger-cicd/ursa/tree/azure_pipelines . I also invited you as an owner to Hyperledger-cicd GitHub org so you may iterate on debugging https://github.com/hyperledger/ursa/pull/82 as quickly as you like","username":"rjones","ts":"2019-11-23T19:06:06.599Z"}
{"msg":"If I do without revocation (so line 463 and other related revocation instructions), then no issue.","username":"fabienpe","ts":"2019-11-25T08:57:00.098Z"}
{"msg":"On line 372 (https://github.com/fabienpe/indy-sdk/blob/master/samples/python/src/getting_started_2.py#L372), you have `faber['job_certificate_cred_rev_id']` and not `faber['job_certificate_cred_rev_id_%s' % i]`. Is that ok since revocation idx will be same for both creds? And can you check if revocation index is same for both creds?","username":"lovesh","ts":"2019-11-25T13:03:34.974Z"}
{"msg":"On line 372 (https://github.com/fabienpe/indy-sdk/blob/master/samples/python/src/getting_started_2.py#L372), you have `faber['job_certificate_cred_rev_id']` and not `faber['job_certificate_cred_rev_id_%s' % i]`. Is that ok since revocation idx will be overwritten? And can you check if revocation index is same for both creds?","username":"lovesh","ts":"2019-11-25T13:03:34.974Z"}
{"msg":"On line 372 (https://github.com/fabienpe/indy-sdk/blob/master/samples/python/src/getting_started_2.py#L372), you have `faber['job_certificate_cred_rev_id']` and not `faber['job_certificate_cred_rev_id_%s' % i]`. Is that ok since revocation idx will be overwritten? And can you check if revocation index is different for both creds?","username":"lovesh","ts":"2019-11-25T13:03:34.974Z"}
{"msg":"On a different note, it would be clearer  if you created variables (in loop's scope) for `_%s % i`","username":"lovesh","ts":"2019-11-25T13:04:32.733Z"}
{"msg":"On a different note, it would be clearer  if you created variables (in loop's scope) for all `_%s % i`","username":"lovesh","ts":"2019-11-25T13:04:32.733Z"}
{"msg":"Well that was quick hack from the getting_started code that you are familiar with, because I'm unable to provide the actual code in which I came across the issue. The cred_rev_id is in fact not used in that example since I don't revoke any credential. This index does get updated: 1 then 2.","username":"fabienpe","ts":"2019-11-25T15:31:02.248Z"}
{"msg":"I've changed the %s' % s to in-loop local variables and pushed that new code.","username":"fabienpe","ts":"2019-11-25T15:32:10.452Z"}
{"msg":"Thanks. Will try to reproduce in Ursa without going through sdk","username":"lovesh","ts":"2019-11-26T10:18:06.547Z"}
{"msg":"Is the ursa call happening today?","username":"brentzundel","ts":"2019-11-27T15:00:30.188Z"}
{"msg":"No it was canceled","username":"MALodder","ts":"2019-11-28T04:09:44.310Z"}
{"msg":"I sent out an email.  Did you not get it?","username":"hartm","ts":"2019-11-28T17:54:19.876Z"}
{"msg":"Has joined the channel.","username":"andrew.whitehead","ts":"2019-11-29T15:08:40.432Z","type":"uj"}
{"msg":"Has joined the channel.","username":"Jack1477","ts":"2019-11-29T18:09:30.806Z","type":"uj"}
{"msg":"Does any Node.js wrapper for Ursa exist in any of Hyperledger repositories or does it not exist at all?","username":"Jack1477","ts":"2019-11-29T18:18:57.444Z"}
{"msg":"If it does exist - can I have a link please?","username":"Jack1477","ts":"2019-11-29T18:19:16.226Z"}
{"msg":"If it does not exist - is there a particular reason for that? Or just nobody had time to do it yet?","username":"Jack1477","ts":"2019-11-29T18:20:33.952Z"}
{"msg":"None exists yet. No one has had time to do it, and the demand hasn't been there yet","username":"MALodder","ts":"2019-12-01T17:30:18.262Z"}
{"msg":"I looked more and it does not make sense to try it with Ursa APIs as its very clear in Ursa which cred sig, which rev reg state is used. The problem might be when the wallet or ledger is being queried","username":"lovesh","ts":"2019-12-01T20:28:40.296Z"}
{"msg":"Has joined the channel.","username":"ItsOmerShafiq","ts":"2019-12-01T22:28:31.016Z","type":"uj"}
{"msg":"","username":"MALodder","ts":"2019-12-02T16:07:15.845Z","attachments":[{"type":"file","title":"Cryptographically Enforced Orthogonal Access Control.pdf","title_link":"/file-upload/7CHwovEEJqXK9gn48/Cryptographically%20Enforced%20Orthogonal%20Access%20Control.pdf","url":"/file-upload/7CHwovEEJqXK9gn48/Cryptographically%20Enforced%20Orthogonal%20Access%20Control.pdf","remote":false,"fileId":"7CHwovEEJqXK9gn48","fileName":"Cryptographically Enforced Orthogonal Access Control.pdf"}]}
{"msg":"I didn't get one, not sure why.","username":"brentzundel","ts":"2019-12-02T16:33:21.419Z"}
{"msg":"https://github.com/Fraunhofer-AISEC/rabe","username":"lovesh","ts":"2019-12-02T16:49:39.418Z"}
{"msg":"Various ABE schemes in Rust with MIT license https://github.com/Fraunhofer-AISEC/rabe","username":"lovesh","ts":"2019-12-02T16:49:39.418Z"}
{"msg":"Has joined the channel.","username":"kumar89","ts":"2019-12-03T14:07:59.563Z","type":"uj"}
{"msg":"Ursa quarterly report: https://wiki.hyperledger.org/display/TSC/2019+Q4+Hyperledger+Ursa","username":"MALodder","ts":"2019-12-04T15:58:15.145Z"}
{"msg":"feel free to add to it as needed","username":"MALodder","ts":"2019-12-04T15:58:21.780Z"}
{"msg":"@MALodder Thanks a lot!  That looks fantastic.","username":"hartm","ts":"2019-12-04T16:20:00.355Z"}
{"msg":"Interesting note: https://www.unboundtech.com/unbound-receives-fips-140-2-certification/","username":"MALodder","ts":"2019-12-04T16:45:42.049Z"}
{"msg":"would hyperledger sponser doing FIPS compliance for Ursa","username":"MALodder","ts":"2019-12-04T16:47:30.156Z"}
{"msg":"https://www.corsec.com/fips-140-2/#theplayers","username":"MALodder","ts":"2019-12-04T16:47:31.136Z"}
{"msg":"I just attended a talk on this:  https://crypto.stanford.edu/timings/","username":"hartm","ts":"2019-12-04T21:34:02.957Z"}
{"msg":"Pretty interesting stuff, and worth a look by most people here.","username":"hartm","ts":"2019-12-04T21:34:12.052Z"}
{"msg":"Has joined the channel.","username":"ajayjadhav","ts":"2019-12-04T22:06:02.894Z","type":"uj"}
{"msg":"Are there any performance metrics on Ursa CL API? I have tested few methods with a great success until I get to  ursa_cl_issuer_new_credential_def(), which takes forever to complete. I am testing in a range of 1-100 attributes and getting response in average 10s on my machine. Is it supposed to be that slow or am I doing something wrong? I assume all Ursa API is synchronous so the code is computing that long, not sleeping somewhere?","username":"Jack1477","ts":"2019-12-06T18:51:57.307Z"}
{"msg":"I have a few metrics that I've done against the newer signature","username":"MALodder","ts":"2019-12-06T19:38:26.389Z"}
{"msg":"I have a few metrics that I've done against the newer signatures","username":"MALodder","ts":"2019-12-06T19:38:26.389Z"}
{"msg":"s","username":"MALodder","ts":"2019-12-06T19:38:27.593Z"}
{"msg":"the reason it takes a long time is because it has to search for safe primes","username":"MALodder","ts":"2019-12-06T19:39:09.049Z"}
{"msg":"anoncreds 2 will be very fast for keygen","username":"MALodder","ts":"2019-12-06T19:39:39.915Z"}
{"msg":"@MALodder  is the algorithm not-symmetric in terms of performance then? I mean, long generation of the credentials pub/prv keys and coreectness proff, but fast signing/proving with them later? Or should I expect other calls to be long as well? What is the ETA for anoncreds 2.0?","username":"Jack1477","ts":"2019-12-06T19:51:10.565Z"}
{"msg":"the algorithm is like RSA","username":"MALodder","ts":"2019-12-06T19:51:50.519Z"}
{"msg":"the crypto for anoncreds 2.0 is already in ursa","username":"MALodder","ts":"2019-12-06T19:52:02.035Z"}
{"msg":"`cd libzmix`","username":"MALodder","ts":"2019-12-06T19:54:55.418Z"}
{"msg":"`cargo bench`","username":"MALodder","ts":"2019-12-06T19:54:58.977Z"}
{"msg":"Ok, I see now. However it seems Libzmix does not provide C-API of any sort?","username":"Jack1477","ts":"2019-12-06T19:56:46.915Z"}
{"msg":"We'd like to, no one has asked for it yet","username":"MALodder","ts":"2019-12-06T20:01:49.904Z"}
{"msg":"we also accept PRs","username":"MALodder","ts":"2019-12-06T20:01:55.888Z"}
{"msg":"What features are you hoping to use specifically","username":"MALodder","ts":"2019-12-06T20:02:35.028Z"}
{"msg":"I would like to have C-API that exposes all underneath public Rust methods , similar way to how FFI for CL in Libursa is done.","username":"Jack1477","ts":"2019-12-06T20:12:11.807Z"}
{"msg":"I haven't looked into Libzmix yet and I am not sure how it differs from CL so cannot point out exactly what I need. ","username":"Jack1477","ts":"2019-12-06T20:18:35.050Z"}
{"msg":"Thanks for info though. I hope to commit something soon.","username":"Jack1477","ts":"2019-12-06T20:22:36.503Z"}
{"msg":"Libzmix is just like CL but much faster and smaller","username":"MALodder","ts":"2019-12-07T16:44:13.199Z"}
{"msg":"The signatures from zmix are","username":"MALodder","ts":"2019-12-07T16:45:10.035Z"}
{"msg":"https://www.space.com/quantum-supremacy-debate.html","username":"MALodder","ts":"2019-12-09T01:47:10.257Z"}
{"msg":"Is ursa used by any other hyperledger project now?","username":"huxd","ts":"2019-12-09T04:09:47.014Z"}
{"msg":"it is used in Hyperledger Indy at least. Haven't looked into other projects so cannot say.","username":"Jack1477","ts":"2019-12-09T11:56:18.777Z"}
{"msg":"it is used in Hyperledger Indy at least. Haven't looked into other projects so cannot provide more info than that.","username":"Jack1477","ts":"2019-12-09T11:56:18.777Z"}
{"msg":"Should I report a bug on jira.hyperledger.org or GitHub?","username":"fabienpe","ts":"2019-12-09T13:06:30.457Z"}
{"msg":"Iroha is using it too","username":"MALodder","ts":"2019-12-09T14:39:27.261Z"}
{"msg":"I believe burrow is trying to adopt it also but haven’t heard anything since. Transact is using it too","username":"MALodder","ts":"2019-12-09T14:39:57.819Z"}
{"msg":"No Sovrin Crypto call today. I'm taking some PTO ","username":"MALodder","ts":"2019-12-09T14:58:10.352Z"}
{"msg":"@hartm @lovesh @brentzundel ^^^","username":"MALodder","ts":"2019-12-09T14:58:23.959Z"}
{"msg":"Have a nice day off!","username":"hartm","ts":"2019-12-09T15:04:52.023Z"}
{"msg":"Yes","username":"lovesh","ts":"2019-12-09T15:46:38.499Z"}
{"msg":"thanks very much for your sharing! I will check them as examples.","username":"huxd","ts":"2019-12-10T05:46:24.029Z"}
{"msg":"Has joined the channel.","username":"lmtriet","ts":"2019-12-10T13:21:55.625Z","type":"uj"}
{"msg":"@here Just a reminder of tomorrow's meeting.  Please feel free to add things to the agenda that you'd like to discuss.  Thanks!","username":"hartm","ts":"2019-12-11T01:46:19.886Z"}
{"msg":"Our calendar entry seems to have gotten lost.","username":"hartm","ts":"2019-12-11T15:00:49.947Z"}
{"msg":"odd","username":"MALodder","ts":"2019-12-11T15:03:26.572Z"}
{"msg":"where are you @hartm ","username":"MALodder","ts":"2019-12-11T15:03:33.405Z"}
{"msg":"Are you in the regular community meeting?","username":"hartm","ts":"2019-12-11T15:03:46.199Z"}
{"msg":"Which meeting are you in?","username":"hartm","ts":"2019-12-11T15:03:54.597Z"}
{"msg":"https://zoom.us/my/hyperledger.community","username":"MALodder","ts":"2019-12-11T15:04:06.572Z"}
{"msg":"what's the new zoom room?","username":"MALodder","ts":"2019-12-11T15:07:13.046Z"}
{"msg":"I tried https://zoom.us/my/hyperledger.backup but does not work","username":"lovesh","ts":"2019-12-11T15:07:47.056Z"}
{"msg":"me too","username":"MALodder","ts":"2019-12-11T15:08:02.485Z"}
{"msg":"hyperledger.community.backup","username":"hartm","ts":"2019-12-11T15:08:31.924Z"}
{"msg":"https://zoom.us/my/hyperledger.community.backup","username":"lovesh","ts":"2019-12-11T15:08:32.204Z"}
{"msg":"That one works for me, thanks Lovesh","username":"brentzundel","ts":"2019-12-11T15:10:23.959Z"}
{"msg":"Still not showing in the calendar, argh.","username":"hartm","ts":"2019-12-11T15:10:43.941Z"}
{"msg":"https://plundervolt.com/","username":"hartm","ts":"2019-12-11T15:32:11.761Z"}
{"msg":"an interesting read","username":"rjones","ts":"2019-12-11T15:42:12.505Z"}
{"msg":"Now I am sad i missed the call","username":"cam-parra","ts":"2019-12-11T17:30:49.046Z"}
{"msg":"https://crates.io/crates/ursa 0.3.0 is released!!","username":"MALodder","ts":"2019-12-11T20:45:05.902Z"}
{"msg":"Hello everyone - \nDo you know of a developer event that we would like to get some Hyperledger representation at?\n\nPlease submit it here.  The marketing committee will review them all as we go thru our budget for 2020\nThank you! - Silona","username":"Silona","ts":"2019-12-11T21:45:14.983Z"}
{"msg":"https://wiki.hyperledger.org/display/Marketing/Developer+Events","username":"Silona","ts":"2019-12-11T22:02:59.544Z"}
{"msg":"@hartm I think this is what the besu team didn't point us to yesterday ","username":"cam-parra","ts":"2019-12-12T16:51:53.170Z"}
{"msg":"https://github.com/hyperledger/besu/tree/master/crypto/src/main/java/org/hyperledger/besu/crypto","username":"cam-parra","ts":"2019-12-12T16:51:54.076Z"}
{"msg":"I wasn't even looking this deep.  They don't seem to be using anything beyond the basics when it comes to crypto.","username":"hartm","ts":"2019-12-12T18:00:43.725Z"}
{"msg":"maybe we could help a bit here","username":"cam-parra","ts":"2019-12-12T19:16:27.501Z"}
{"msg":"There is no release in GitHub for 0.3.0","username":"Jack1477","ts":"2019-12-13T13:48:37.583Z"}
{"msg":"Yeah I need to tag it","username":"MALodder","ts":"2019-12-13T14:02:35.251Z"}
{"msg":"https://crates.io/crates/ursa","username":"MALodder","ts":"2019-12-13T14:06:49.216Z"}
{"msg":"tagged","username":"MALodder","ts":"2019-12-13T14:54:11.200Z"}
{"msg":"Has joined the channel.","username":"ltseeley","ts":"2019-12-13T18:56:40.672Z","type":"uj"}
{"msg":"Hey everyone, splinter (https://github.com/Cargill/splinter/) has an optional feature for ursa-compatible signing that currently uses ursa 0.1, but it's currently broken so we're trying to fix it. We only need secp256k1 signing, so we tried updating the dependency to `ursa = { version = \"0.3\", optional = true, default-features = false, features = [\"native_secp256k1\"] }`, but it fails with this error: ```error[E0463]: can't find crate for `blake2`\n  --> /Users/seeley/.cargo/registry/src/github.com-1ecc6299db9ec823/ursa-0.3.0/src/lib.rs:29:1\n   |\n29 | pub extern crate blake2;\n   | ^^^^^^^^^^^^^^^^^^^^^^^^ can't find crate```","username":"ltseeley","ts":"2019-12-13T18:56:40.880Z"}
{"msg":"It seems the feature's dependencies aren't configured properly","username":"ltseeley","ts":"2019-12-13T18:57:19.513Z"}
{"msg":"Or perhaps it's just not clear how to specify the features","username":"ltseeley","ts":"2019-12-13T19:03:13.534Z"}
{"msg":"Has joined the channel.","username":"amundson","ts":"2019-12-13T19:24:32.292Z","type":"uj"}
{"msg":"Otherwise, if anyone is familiar with this error and knows how to resolve it, help would be appreciated: ```error[E0277]: the trait bound `rand_chacha::ChaChaRng: rand_core::CryptoRng` is not satisfied\n   --> /Users/seeley/.cargo/registry/src/github.com-1ecc6299db9ec823/ursa-0.3.0/src/signatures/ed25519/ed25519.rs:34:39\n    |\n34  |                     Keypair::generate(&mut rng)\n    |                                       ^^^^^^^^ the trait `rand_core::CryptoRng` is not implemented for `rand_chacha::ChaChaRng`\n    |\n   ::: /Users/seeley/.cargo/registry/src/github.com-1ecc6299db9ec823/ed25519-dalek-1.0.0-pre.3/src/ed25519.rs:130:12\n    |\n130 |         R: CryptoRng + RngCore,\n    |            --------- required by this bound in `ed25519_dalek::Keypair::generate`\n\nerror[E0277]: the trait bound `rand_chacha::ChaChaRng: rand_core::RngCore` is not satisfied\n   --> /Users/seeley/.cargo/registry/src/github.com-1ecc6299db9ec823/ursa-0.3.0/src/signatures/ed25519/ed25519.rs:34:39\n    |\n34  |                     Keypair::generate(&mut rng)\n    |                                       ^^^^^^^^ the trait `rand_core::RngCore` is not implemented for `rand_chacha::ChaChaRng`\n    |\n   ::: /Users/seeley/.cargo/registry/src/github.com-1ecc6299db9ec823/ed25519-dalek-1.0.0-pre.3/src/ed25519.rs:130:24\n    |\n130 |         R: CryptoRng + RngCore,\n    |                        ------- required by this bound in `ed25519_dalek::Keypair::generate`\n\nerror[E0277]: the trait bound `rand::rngs::OsRng: rand_core::CryptoRng` is not satisfied\n   --> /Users/seeley/.cargo/registry/src/github.com-1ecc6299db9ec823/ursa-0.3.0/src/signatures/ed25519/ed25519.rs:42:35\n    |\n42  |                 Keypair::generate(&mut rng)\n    |                                   ^^^^^^^^ the trait `rand_core::CryptoRng` is not implemented for `rand::rngs::OsRng`\n    |\n   ::: /Users/seeley/.cargo/registry/src/github.com-1ecc6299db9ec823/ed25519-dalek-1.0.0-pre.3/src/ed25519.rs:130:12\n    |\n130 |         R: CryptoRng + RngCore,\n    |            --------- required by this bound in `ed25519_dalek::Keypair::generate`\n\nerror[E0277]: the trait bound `rand::rngs::OsRng: rand_core::RngCore` is not satisfied\n   --> /Users/seeley/.cargo/registry/src/github.com-1ecc6299db9ec823/ursa-0.3.0/src/signatures/ed25519/ed25519.rs:42:35\n    |\n42  |                 Keypair::generate(&mut rng)\n    |                                   ^^^^^^^^ the trait `rand_core::RngCore` is not implemented for `rand::rngs::OsRng`\n    |\n   ::: /Users/seeley/.cargo/registry/src/github.com-1ecc6299db9ec823/ed25519-dalek-1.0.0-pre.3/src/ed25519.rs:130:24\n    |\n130 |         R: CryptoRng + RngCore,\n    |                        ------- required by this bound in `ed25519_dalek::Keypair::generate`\n\nerror: aborting due to 4 previous errors```","username":"ltseeley","ts":"2019-12-13T19:49:17.833Z"}
{"msg":"I'll take a look at it","username":"MALodder","ts":"2019-12-13T21:40:48.496Z"}
{"msg":"Right now we haven't configured to pull a single signature method like that. I will see what I can do with a PR to address this","username":"MALodder","ts":"2019-12-13T22:02:41.282Z"}
{"msg":"However, the rust compiler should remove any code you don’t actually use. It should be fine just using the default features","username":"MALodder","ts":"2019-12-14T13:47:14.231Z"}
{"msg":"I am writing the wrapper for Ursa CL and I am stuck on testing the C-API for CL. I have successfully implemented \"demo\" test scenario with a wrapper  (found in src/cl/mod.res line 1635) and almost done with \"demo_revocation\" (found in src/cl/mod.rs line 1754), but got stuck on processing signature in the second one. Without revocation processing works fine (ursa_cl_prover_process_credential_signature()) , however when I try it with revocation I get following error: \"Message: Invalid structure Caused by: Invalid Signature correctness proof c != c\" . I am trying to debug step by step why this error occurs but without any success yet. Is anyone here able to give me some kind of tip what the issue might be? What I mean by that - is there some kind of \"most frequent reason\" to why this error pops up? Or is it rather not common problem?\n\nI suspect something might be wrong on my side with generation of new tails, but already spent few hours on it, serializing and deserializing contents of each tail and tails generator and I am unable to spot the problem.\nAnother potentential reason I suspect might be happening is that one of the objects not marked as mutable is mutating somewhere and it happens desync between my wrapper and C-API. \n\nIf anyone had this problem with C-API before and was able to solve it or can share some word of advice where to look to solve the issue I would love to hear it.  ","username":"Jack1477","ts":"2019-12-15T20:35:33.538Z"}
{"msg":"One of the things I am confused about are the states of revocation registry and revocation tail generator that need to be passed between different API calls.\n\nFor example - when calling ursa_cl_issuer_sign_credential_with_revoc() it is required to pass revocation registry , revocation tails generator , FFITake and FFIPut functions pointers. During this function call both revocation registry and revocation tails generator are mutated. \n\nThen, after calling that I need to create witness with ursa_cl_witness_new() that requires revocation registry delta and revocation tails generator. In what state does the revocation tails generator need to be with this call? The original one before being mutated by ursa_cl_issuer_sign_credential_with_revoc() or mid-state or final state ?\n\nThe same problem applies to next call ursa_cl_prover_process_credential_signature(). This function requires revocation registry to be passed. Once again - revocation registry in which state? initial, mid-state or final?\n\n\n\n","username":"Jack1477","ts":"2019-12-15T20:56:23.963Z"}
{"msg":"In my previous posts I used the terms of initial , mid and final state. Its the confusion that I have due to existance of two implementations of TailAccessor in the code.\n\nFFITailsAccessor for C-API and SimpleTailsAccessor being used inside the code.\n\nFFITailsAccessor allows userland code to define how the tails are generated/accessed.\n\nSimpleTailsAccessor on creation creates ALL tails possible and stores them in memory.\n\nIn demo_revocation test scenario which I am trying to implement, the tail being requested is identified with revIdx = 5. The size of tails accessors is calculated to 11.\n\nHere's what I do not understand. The mutated result for revocation registry depends on which tail has been accessed and the state of tails generator. Since the FFITailsAccessor allows custom definiton of take function that would also mean that it allows arbitrary state changes at this point. For example, my current implementation generates tails up to highest revIndx that has been asked (5 in this example). If instead I used SimpleTailsAccessor it would generate 11 from the start. By logic the state of revocation registry / revocations tails generator should be same after generating X tails. But if one generates X and other generates Y it would mean the states are no longer equal.\n\nHenceforth I see thre potentential states here.\n1. Initial state which is state before any tail has been generated.\n2. Mid-state after X tails have been generated but there is room for more (allowed by FFITailsAccessor)\n3. Final-state after ALL tails have been generated (enfored by SimpleTailsAccessor)\n \nI am not sure if the difference between 2 and 3 is relevant to the outcome of C-API calls?","username":"Jack1477","ts":"2019-12-15T21:13:17.709Z"}
{"msg":"Ant tips to what might be the issue behind \"\"Message: Invalid structure Caused by: Invalid Signature correctness proof c != c\"\" are welcome","username":"Jack1477","ts":"2019-12-15T21:24:46.870Z"}
{"msg":"Hi,\nI was looking at the ursa tests and the issuer seems to be adding the holder's (Prover's) master secret value to credential. Shouldn't the master secret be kept safe by the holder(prover)?\nhttps://github.com/hyperledger/ursa/blob/master/libursa/tests/cl.rs#L79","username":"vardan10","ts":"2019-12-16T07:22:21.902Z"}
{"msg":"Hi,\nI was looking at the ursa tests and the issuer seems to be adding the holder's (Prover's) master secret value to credential. Shouldn't the master secret be kept safe by the holder(prover)?\n\nIssuer assigns master secret to credential hers:\nhttps://github.com/hyperledger/ursa/blob/master/libursa/tests/cl.rs#L79\n\nMaster secret variable is defined by prover here:\nhttps://github.com/hyperledger/ursa/blob/master/libursa/tests/cl.rs#L33","username":"vardan10","ts":"2019-12-16T07:22:21.902Z"}
{"msg":"Hi,\nI was looking at the ursa tests and the issuer seems to be adding the holder's (Prover's) master secret value to credential. Shouldn't the master secret be kept safe by the holder(prover)?\n\nIssuer assigns master secret to credential hers:\nhttps://github.com/hyperledger/ursa/blob/master/libursa/tests/cl.rs#L79\n\nMaster secret variable is defined by prover here:\nhttps://github.com/hyperledger/ursa/blob/master/libursa/tests/cl.rs#L33","username":"vardan10","ts":"2019-12-16T10:39:59.347Z"}
{"msg":"@MALodder the long error snippet I posted is what we are seeing when we use just the default features.","username":"ltseeley","ts":"2019-12-16T14:21:20.836Z"}
{"msg":"That can’t be because you have —no-default-features ","username":"MALodder","ts":"2019-12-16T14:34:25.042Z"}
{"msg":"True, but it looks like `\"native_secp256k1\"` depends on that `blake2` dependency (or it isn't properly guarded by a `cfg` annotation).","username":"pschwarz","ts":"2019-12-16T14:44:04.023Z"}
{"msg":"True, but it looks like `\"native_secp256k1\"` either depends on that `blake2` dependency or it isn't properly guarded by a `cfg` annotation.","username":"pschwarz","ts":"2019-12-16T14:44:04.023Z"}
{"msg":"@MALodder being more specific should help avoid unnecessary dependencies (like libsodium)","username":"amundson","ts":"2019-12-16T15:24:38.979Z"}
{"msg":"it should and PRs are welcome to help with this","username":"MALodder","ts":"2019-12-16T15:25:02.042Z"}
{"msg":"not really, the cfg's need to be updated so that each feature is more independent. secp256k1 just depends on having a valid hash algorithm that outputs 256 bits","username":"MALodder","ts":"2019-12-16T15:43:58.406Z"}
{"msg":"If I had more time I would've done it by now","username":"MALodder","ts":"2019-12-16T15:44:11.219Z"}
{"msg":"Fair - we're in the same boat over on Sawtooth ;)","username":"pschwarz","ts":"2019-12-16T15:44:50.044Z"}
{"msg":"Keep in mind that the tests are not clear as to who is doing what, just that the steps work properly. The Prover generates the master secret and blinds it prior to sending it to the issuer","username":"MALodder","ts":"2019-12-16T15:45:56.044Z"}
{"msg":"I'm betting there will be a blockchain event in these:  https://crypto.iacr.org/2020/callforaffiliated.html","username":"hartm","ts":"2019-12-16T16:18:44.079Z"}
{"msg":"Might be a good place to submit papers.","username":"hartm","ts":"2019-12-16T16:18:50.962Z"}
{"msg":"Hey all. I've been tracking the Xchacha20 draft rfc on the IETF CFRG mailing list and there's been little discussion which can move this forward. There is an implementation already in libsodium and I think it would be a good addition for ursa to support. However, there's been some hesitation about the nonce generation on the mailing list in the past and it may be useful to have some cryptoanalysts take a look at it to get the work moving forward. @hartm do you know of anyone who could take a look at it and provide feedback on the mailing list? @MALodder or @lovesh could you ask Dmitry K. to take a look at it as well and provide some feedback? I'd like to be able to use this with the Aries work, but haven't had much luck getting things moving on the mailing list, so any help or feedback would be appreciated.","username":"kdenhartog","ts":"2019-12-17T00:41:15.255Z"}
{"msg":"Dmitry is the hash function expert and probably the person to ask about this.","username":"hartm","ts":"2019-12-17T00:50:11.494Z"}
{"msg":"That long compilation error goes away when ed25519_dalek is locked to 1.0.0-pre.1 instead of pre.3 (the latest)","username":"andrew.whitehead","ts":"2019-12-17T06:35:52.389Z"}
{"msg":"That long compilation error goes away when ed25519_dalek is locked to 1.0.0-pre.2 instead of pre.3 (the latest)","username":"andrew.whitehead","ts":"2019-12-17T06:35:52.389Z"}
{"msg":"@pschwarz https://github.com/hyperledger/ursa/pull/88","username":"MALodder","ts":"2019-12-17T21:26:08.930Z"}
{"msg":"with this PR, you should be able to just use `ecdsa_secp256k1_native`","username":"MALodder","ts":"2019-12-17T21:26:39.697Z"}
{"msg":"as the only enabled feature","username":"MALodder","ts":"2019-12-17T21:26:49.947Z"}
{"msg":"Cool","username":"pschwarz","ts":"2019-12-17T21:48:44.078Z"}
{"msg":"Cool, thank!","username":"pschwarz","ts":"2019-12-17T21:48:44.078Z"}
{"msg":"Cool, thanks!","username":"pschwarz","ts":"2019-12-17T21:48:44.078Z"}
{"msg":"Has joined the channel.","username":"IWontDiscloseMyIdentity","ts":"2019-12-18T11:26:26.451Z","type":"uj"}
{"msg":"Has joined the channel.","username":"redongjun","ts":"2019-12-18T13:28:41.872Z","type":"uj"}
{"msg":"Has joined the channel.","username":"harrywright","ts":"2019-12-18T18:04:22.060Z","type":"uj"}
{"msg":"Has joined the channel.","username":"knagware9","ts":"2019-12-24T05:06:55.948Z","type":"uj"}
{"msg":"Has joined the channel.","username":"pranavkirtani88","ts":"2020-01-01T08:31:18.564Z","type":"uj"}
{"msg":"Are the values of the attributes in the credentials always supposed to be numbers? (https://github.com/hyperledger/ursa/blob/0d6c176f2f72417cd0111ded4d63e434bf0f4d03/libursa/src/cl/mod.rs#L90). How can I handle string values in the credential?","username":"sanjaysb","ts":"2020-01-01T08:31:37.024Z"}
{"msg":"Yes they must be for the crypto to work. The most common method is to use sha256 to convert the string","username":"MALodder","ts":"2020-01-03T02:42:27.748Z"}
{"msg":"but sha256 is one way right?","username":"sanjaysb","ts":"2020-01-03T04:46:34.033Z"}
{"msg":"yes","username":"MALodder","ts":"2020-01-04T19:47:23.678Z"}
{"msg":"you still need to store the original value","username":"MALodder","ts":"2020-01-04T19:47:38.720Z"}
{"msg":"ok. So in the credential given by an issuer you only have the hash values for string attributes. The actual attributes are shared to holder unsigned. The holder when submitting a claim to the verifier, will share the actual values as well which the verifier can verify using the signed hash value in the credential. Am I thinking right? ","username":"sanjaysb","ts":"2020-01-06T04:19:27.358Z"}
{"msg":"Hey I've been playing around with the libzmix stuff to trying and compile it with wasm-pack but it's been failing. I also tried compiling it with cargo and the `==features=wasm` but was unable to find the `.wasm` files. @MALodder @lovesh or @dhuseby do either of you know what to do? If I can figure it out I'll add some docs in to help.","username":"kdenhartog","ts":"2020-01-06T04:45:51.039Z"}
{"msg":"Hey I've been playing around with the libursa stuff to trying and compile it with wasm-pack but it's been failing. I also tried compiling it with cargo and the `==features=wasm` but was unable to find the `.wasm` files. @MALodder @lovesh or @dhuseby do either of you know what to do? If I can figure it out I'll add some docs in to help.","username":"kdenhartog","ts":"2020-01-06T04:45:51.039Z"}
{"msg":"Hey I've been playing around with the libursa stuff to trying and compile it with wasm-pack but it's been failing. I also tried compiling it with cargo and the `--features=wasm` but was unable to find the `.wasm` files. @MALodder @lovesh or @dhuseby do either of you know what to do? If I can figure it out I'll add some docs in to help.","username":"kdenhartog","ts":"2020-01-06T04:45:51.039Z"}
{"msg":"Is there a plan to prevent this error when building libindy?\n```\naxelnennker@Axels-MBP libindy (master) $ RUST_TEST_THREADS=1 cargo test\n    Updating crates.io index\n  Downloaded zeroize_derive v1.0.0\n  Downloaded secp256k1 v0.12.0\n  Downloaded ursa v0.3.0\n  Downloaded filetime v0.2.8\n  Downloaded vcpkg v0.2.8\n  Downloaded hex v0.4.0\n  Downloaded aead v0.1.1\nerror: multiple packages link to native library `sodium`, but a native library can be linked only once\n\npackage `libsodium-ffi v0.1.17`\n    ... which is depended on by `ursa v0.3.0`\n    ... which is depended on by `libindy v1.12.0 (/Users/axelnennker/development/indy-sdk/libindy)`\nlinks to native library `sodium`\n\npackage `libsodium-sys v0.0.16`\n    ... which is depended on by `sodiumoxide v0.0.16`\n    ... which is depended on by `indy-utils v0.1.0 (/Users/axelnennker/development/indy-sdk/libindy/indy-utils)`\n    ... which is depended on by `indy-wallet v0.1.0 (/Users/axelnennker/development/indy-sdk/libindy/indy-wallet)`\n    ... which is depended on by `libindy v1.12.0 (/Users/axelnennker/development/indy-sdk/libindy)`\nalso links to native library `sodium`\naxelnennker@Axels-MBP libindy (master) $ \n\n```","username":"AxelNennker","ts":"2020-01-06T13:12:21.046Z"}
{"msg":"Are you planning to move sodiumoxide to ursa?","username":"AxelNennker","ts":"2020-01-06T13:13:21.502Z"}
{"msg":"I experimentally told libindy to use ursa-0.3 and got the above result","username":"AxelNennker","ts":"2020-01-06T13:14:37.072Z"}
{"msg":"yes. The actual value is what the verifier cares about anyway. The verifier needs to know how to map the values to the signed ones so they can check that it has not changed","username":"MALodder","ts":"2020-01-06T15:35:00.279Z"}
{"msg":"to get the wasm file you need to use wasm-pack","username":"MALodder","ts":"2020-01-06T15:35:27.653Z"}
{"msg":"https://rustwasm.github.io/wasm-pack/installer/","username":"MALodder","ts":"2020-01-06T15:35:53.266Z"}
{"msg":"You'll see references in schema discussions to the encoding of the value. That's a key issue. In the first cut of Indy, the encoding was left to the issuer to do as they wished. With the upcoming Rich Schema work, the encoding will be published on the ledger and so can be checked.","username":"swcurran","ts":"2020-01-06T15:59:25.863Z"}
{"msg":"Can you give me a link where I can read on this?","username":"sanjaysb","ts":"2020-01-07T11:34:20.377Z"}
{"msg":"I am basically interested if there is a standard that I can follow when designing the issue flow and verification flow.","username":"sanjaysb","ts":"2020-01-07T11:36:30.872Z"}
{"msg":"@kenebert @brentzundel - can y'all provide a link to the encoding mechanism?","username":"swcurran","ts":"2020-01-07T16:49:28.514Z"}
{"msg":"@here We are cancelling tomorrow's meeting due to the real world crypto conference, as many of our usual participants are attending.  Hope everyone had a great holiday season!","username":"hartm","ts":"2020-01-08T02:31:38.600Z"}
{"msg":"Has left the channel.","username":"rbuysse","ts":"2020-01-08T14:00:30.678Z","type":"ul"}
{"msg":"No but even if we did it wouldn’t fix that particular problem. Indy should change their code to use ursa for their keys and encryption instead of using sodium oxide for it","username":"MALodder","ts":"2020-01-08T14:34:31.869Z"}
{"msg":"@MALodder I gave your suggestion a shot - that is, I updated all references to ursa to 0.3 and remove sodiumoxide everywhere in libindy/*","username":"AxelNennker","ts":"2020-01-09T14:07:11.041Z"}
{"msg":"Interestingly this setup fails to compile ursa\n```\naxelnennker@Axels-MBP libindy (ursa_0.3) $ cargo build\n   Compiling ursa v0.3.0\nerror[E0277]: the trait bound `rand_chacha::ChaChaRng: rand_core::CryptoRng` is not satisfied\n   --> /Users/axelnennker/.cargo/registry/src/github.com-1ecc6299db9ec823/ursa-0.3.0/src/signatures/ed25519/ed25519.rs:34:39\n    |\n34  |                     Keypair::generate(&mut rng)\n    |                                       ^^^^^^^^ the trait `rand_core::CryptoRng` is not implemented for `rand_chacha::ChaChaRng`\n    | \n   ::: /Users/axelnennker/.cargo/registry/src/github.com-1ecc6299db9ec823/ed25519-dalek-1.0.0-pre.3/src/ed25519.rs:130:12\n    |\n130 |         R: CryptoRng + RngCore,\n    |            --------- required by this bound in `ed25519_dalek::Keypair::generate`\n\nerror[E0277]: the trait bound `rand_chacha::ChaChaRng: rand_core::RngCore` is not satisfied\n   --> /Users/axelnennker/.cargo/registry/src/github.com-1ecc6299db9ec823/ursa-0.3.0/src/signatures/ed25519/ed25519.rs:34:39\n    |\n34  |                     Keypair::generate(&mut rng)\n    |                                       ^^^^^^^^ the trait `rand_core::RngCore` is not implemented for `rand_chacha::ChaChaRng`\n    | \n   ::: /Users/axelnennker/.cargo/registry/src/github.com-1ecc6299db9ec823/ed25519-dalek-1.0.0-pre.3/src/ed25519.rs:130:24\n    |\n130 |         R: CryptoRng + RngCore,\n    |                        ------- required by this bound in `ed25519_dalek::Keypair::generate`\n\nerror[E0277]: the trait bound `rand::rngs::OsRng: rand_core::CryptoRng` is not satisfied\n   --> /Users/axelnennker/.cargo/registry/src/github.com-1ecc6299db9ec823/ursa-0.3.0/src/signatures/ed25519/ed25519.rs:42:35\n    |\n42  |                 Keypair::generate(&mut rng)\n    |                                   ^^^^^^^^ the trait `rand_core::CryptoRng` is not implemented for `rand::rngs::OsRng`\n    | \n   ::: /Users/axelnennker/.cargo/registry/src/github.com-1ecc6299db9ec823/ed25519-dalek-1.0.0-pre.3/src/ed25519.rs:130:12\n    |\n130 |         R: CryptoRng + RngCore,\n    |            --------- required by this bound in `ed25519_dalek::Keypair::generate`\n\nerror[E0277]: the trait bound `rand::rngs::OsRng: rand_core::RngCore` is not satisfied\n   --> /Users/axelnennker/.cargo/registry/src/github.com-1ecc6299db9ec823/ursa-0.3.0/src/signatures/ed25519/ed25519.rs:42:35\n    |\n42  |                 Keypair::generate(&mut rng)\n    |                                   ^^^^^^^^ the trait `rand_core::RngCore` is not implemented for `rand::rngs::OsRng`\n    | \n   ::: /Users/axelnennker/.cargo/registry/src/github.com-1ecc6299db9ec823/ed25519-dalek-1.0.0-pre.3/src/ed25519.rs:130:24\n    |\n130 |         R: CryptoRng + RngCore,\n    |                        ------- required by this bound in `ed25519_dalek::Keypair::generate`\n\nerror: aborting due to 4 previous errors\n\n\n```","username":"AxelNennker","ts":"2020-01-09T14:08:08.885Z"}
{"msg":"That should not happen, I think. Building the local clone of ursa from githup works but using the version from crates.io does not compile","username":"AxelNennker","ts":"2020-01-09T14:09:15.530Z"}
{"msg":"The code causing this is here: https://github.com/AxelNennker/indy-sdk/tree/ursa_0.3","username":"AxelNennker","ts":"2020-01-09T14:16:09.710Z"}
{"msg":"@AxelNennker I worked around this issue before by locking ed25519_dalek to version 1.0.0-pre.2","username":"andrew.whitehead","ts":"2020-01-09T16:35:01.522Z"}
{"msg":"`ed25519-dalek = \"=1.0.0-pre.2\"` in the dependencies section","username":"andrew.whitehead","ts":"2020-01-09T16:35:56.590Z"}
{"msg":"`ed25519-dalek = \"=1.0.0-pre.2\"` in the dependencies section of Cargo.toml","username":"andrew.whitehead","ts":"2020-01-09T16:35:56.590Z"}
{"msg":"pretty interesting article covering the different classes of ZKP tech or as the author refers to them as \"cryptographic proofs of computational integrity\"","username":"kdenhartog","ts":"2020-01-10T03:00:43.879Z"}
{"msg":"pretty interesting article covering the different classes of ZKP tech or as the author refers to them as \"cryptographic proofs of computational integrity\"\nhttps://nakamoto.com/cambrian-explosion-of-crypto-proofs/","username":"kdenhartog","ts":"2020-01-10T03:00:43.879Z"}
{"msg":"This already in ursa, right?\nhttps://github.com/hyperledger/ursa/blob/master/libursa/Cargo.toml#L101\nOr which Cargo.toml are you referring to?","username":"AxelNennker","ts":"2020-01-10T16:17:29.580Z"}
{"msg":"Indy's","username":"andrew.whitehead","ts":"2020-01-10T16:18:32.672Z"}
{"msg":"Thanks, will try that.","username":"AxelNennker","ts":"2020-01-10T16:19:07.897Z"}
{"msg":"Ok, gets me further. Thanks again.","username":"AxelNennker","ts":"2020-01-10T16:21:45.996Z"}
{"msg":"did you succeed to use ursa-0.3 in libindy? I didn't (yet). Maybe I changed too much. I remove sodiumoxide from libindy everywhere because I thought ursa might provide what is needed.","username":"AxelNennker","ts":"2020-01-10T16:23:28.755Z"}
{"msg":"did you succeed to use ursa-0.3 in libindy? I didn't (yet). Maybe I changed too much. I removed sodiumoxide from libindy everywhere because I thought ursa might provide what is needed.","username":"AxelNennker","ts":"2020-01-10T16:23:28.755Z"}
{"msg":"It should","username":"MALodder","ts":"2020-01-10T16:23:53.380Z"}
{"msg":"I haven't tried on indy as a whole, I'm working on separating out the ledger client","username":"andrew.whitehead","ts":"2020-01-10T16:24:03.925Z"}
{"msg":"I will try to migrate Indy to ursa 0.3 soon if you can’t get it to work","username":"MALodder","ts":"2020-01-10T16:24:40.196Z"}
{"msg":"Regarding ed25519-dalek: should somebody create a PR to them to remove the restriction to a specific version, or what needs to be done to fix this for all?","username":"AxelNennker","ts":"2020-01-10T16:25:48.308Z"}
{"msg":"The reason it’s tied to pre2 at the moment is the specific version of rand being used","username":"MALodder","ts":"2020-01-10T16:26:37.546Z"}
{"msg":"I want to move to pre3 which includes my fixes to that and should clean that up","username":"MALodder","ts":"2020-01-10T16:26:59.306Z"}
{"msg":"Perhaps in 0.3.1","username":"MALodder","ts":"2020-01-10T16:27:14.699Z"}
{"msg":"Has joined the channel.","username":"jethrojones","ts":"2020-01-10T18:27:13.061Z","type":"uj"}
{"msg":"@MALodder I guess it is better you do the PR to ursa 0.3 in libindy. I guess that most of libindy/crypto/utils should be replaced by ursa call. I don't know ursa good enough what it provides to do this.","username":"AxelNennker","ts":"2020-01-12T11:57:15.054Z"}
{"msg":"@MALodder I guess it is better you do the PR to ursa 0.3 in libindy. I guess that most of libindy/crypto/utils should be replaced by ursa methods. I don't know ursa good enough what it provides to do this.","username":"AxelNennker","ts":"2020-01-12T11:57:15.054Z"}
{"msg":"@MALodder I guess it is better you do the PR to ursa 0.3 in libindy. I guess that most of libindy/crypto/utils should be replaced by ursa methods. I don't know ursa good enough and what it provides to do this.","username":"AxelNennker","ts":"2020-01-12T11:57:15.054Z"}
{"msg":"Help Us Help you!  Attend the Developer Relationship Meeting with Myself and our Marketing Dept. tomorrow at 9:00am Pacific Time. \n\nFor the agenda and Dial in info\nhttps://wiki.hyperledger.org/display/Marketing/2020-01-15+Meeting+notes ","username":"Silona","ts":"2020-01-14T16:51:13.533Z"}
{"msg":"Calling all Projects!  We will have a special Kiosk setup at Hyperledger Global Forum for Projects.  We are asking that all projects sign up to do 10 minute presentations.  https://wiki.hyperledger.org/display/HGF/Projects+Kiosk  We will close this page on Feb 28 for printing reasons. ","username":"Silona","ts":"2020-01-14T17:02:00.892Z"}
{"msg":"Calling all Projects, SIG, and WG!!!  We will have a Video recording Studio setup at HGF (Hyperledger Global Forum). We are asking that all projects and groups help us create a 5 minute video about your group so that we can promote it afterward. Sign up Here! https://wiki.hyperledger.org/display/HGF/Video+Recording+Schedule","username":"Silona","ts":"2020-01-14T17:06:42.702Z"}
{"msg":"@rjones Are you able to set secrets on github for specific repos? Also does hyperledger have a pypi account?","username":"cam-parra","ts":"2020-01-14T17:56:48.452Z"}
{"msg":"@cam-parra https://pypi.org/user/hyperledger/ ","username":"rjones","ts":"2020-01-14T18:54:44.651Z"}
{"msg":"Could you explain what you need to accomplish with the GitHub secrets?","username":"rjones","ts":"2020-01-14T18:55:21.219Z"}
{"msg":"Has joined the channel.","username":"vdods","ts":"2020-01-14T19:10:40.552Z","type":"uj"}
{"msg":"Hi all, I work for LedgerDomain, a Hyperledger member, and I'm looking to talk to a crypto expert or two to vet a scheme for storing hash records for private documents.  If anyone has any recommendations for who to talk to, I would much appreciate it -- please email me at victor.dods@ledgerdomain.com -- if a formal consulting arrangement for such vetting is warranted, then that's certainly an option.  Thanks all! :)","username":"vdods","ts":"2020-01-14T19:16:45.405Z"}
{"msg":"I am wanting to package and publish ursa-python to pypi under the hyperledger account. This would be done through github actions and they require username and password to be set in the repos secrets.","username":"cam-parra","ts":"2020-01-14T19:37:04.943Z"}
{"msg":"@andrew.whitehead how are you publishing `aries-cloudagent-python`? I don't see anything in the circle-ci file ","username":"rjones","ts":"2020-01-14T19:43:03.006Z"}
{"msg":"I see this: https://github.com/hyperledger/aries-cloudagent-python/blob/master/PUBLISHING.md but are you using your own credentials?","username":"rjones","ts":"2020-01-14T19:44:27.155Z"}
{"msg":"@cam-parra I see that I can generate an API token for a specific project in the PyPi UI. Would this work?","username":"rjones","ts":"2020-01-14T19:45:54.215Z"}
{"msg":"https://pypi.org/help/#apitoken","username":"rjones","ts":"2020-01-14T19:46:18.574Z"}
{"msg":"Yes that is what I would need ```After getting API Token from PyPI, you can set secrets on GitHub by clicking “Settings” -> “Secrets” on the project page. Using my example workflow, you should set __token__ for PYPI_USERS , and a token starting with pypi- got on PyPI configuration for PYPI_PASSWORD .```","username":"cam-parra","ts":"2020-01-14T19:48:02.130Z"}
{"msg":"OK.","username":"rjones","ts":"2020-01-14T19:48:37.292Z"}
{"msg":"@rjones I'm using my own credentials","username":"andrew.whitehead","ts":"2020-01-14T19:55:19.578Z"}
{"msg":"thank you","username":"rjones","ts":"2020-01-14T19:55:57.358Z"}
{"msg":"@andrew.whitehead would you want to set something up with GitHub actions or AZP to publish to PyPI when you do a release, using an API key for the repo? I know @BrettLogan has set up rigging like that for other projects","username":"rjones","ts":"2020-01-15T17:13:52.617Z"}
{"msg":"@rjones Sure, would be good to get set up","username":"andrew.whitehead","ts":"2020-01-15T17:41:21.528Z"}
{"msg":"OK, let's chat in #cicd ","username":"rjones","ts":"2020-01-15T17:54:37.445Z"}
{"msg":"Has joined the channel.","username":"KyleHuang","ts":"2020-01-16T02:55:23.153Z","type":"uj"}
{"msg":"Hi, guys, I have some questions about the Hyperledger Indy focusing on the credential revocation. Thank you for your help.\n\nThe credential revocation of Indy refers to https://hyperledger-indy.readthedocs.io/projects/hipe/en/latest/text/0109-anoncreds-protocol/README.html\nThe CKS accumulator refers to this paper https://eprint.iacr.org/2008/539.pdf\n\nQuestions\n\n1. In the Non-revocation Credential Cryptographic Setup phase, a type-III pairing is chosen. Is there any suggestion while choosing all three groups G1, G2 and GT? For example, how many bits is the order r suggested to be? By the way, is there some special purpose to use a type-III pairing? The referred CKS accumulator uses a type-I pairing which G1 = G2. The CKS accumulator could be referred here.\n\n2. The architecture includes an accumulator system that the issuer side stores the states (V and {g'_i} for all i in [1, 2L]) and the blockchain stores the indices V and accumulator acc.\n\nBy the definition of accumulator on wiki:\nA cryptographic accumulator is a one way membership function. It answers a query as to whether a potential candidate is a member of a set without revealing the individual members of the set.\n\nWe have the following questions:\n\nIt seems not a one-way function if everyone can observe V and acc together from the blockchain. The mapping of indices i and parameters g'_i could be gradually found after several accumulator updates.\n\nFollowing the above question, after the mapping relationship is totally observed, I believe the membership of the current accumulator is entirely revealed.\n\nIf V is stored on the ledger, the size of V keeps growing alone with more holders get involved in. In my opinion, the size of a cryptographic accumulator should be independent from the number of members.\n\nIn short, we estimate that the indices V may not be suitable to be published and stored on the ledger. Please feel free to indicate if we misunderstood something.\n\nThank you very much.","username":"KyleHuang","ts":"2020-01-16T02:55:24.540Z"}
{"msg":"Has joined the channel.","username":"SigmaS 1","ts":"2020-01-16T08:06:27.156Z","type":"uj"}
{"msg":"Has joined the channel.","username":"aravindavk","ts":"2020-01-16T09:32:18.271Z","type":"uj"}
{"msg":"Hi.\n1. Type 3 pairings are more efficient to compute.\n2. You can consider g_i as static state (it never changes so it should not be called state) while indices of V form dynamic state.\nOn the \"one-way ness\", the indices of V are needed for updating an old witness and to ensure that the same entries are not added twice in the accumulator or an entry that is attempted to being removed is indeed present (the technique to remove is not mentioned in the paper but you can remove by multiplying with the inverse of the entry). Publishing the indices is not a problem in our case since credential holder never reveals his index but proves that an entry for his index (which is present in his credential) is present in the accumulator as well. \nBut if you did not need the ability for old witnesses to be updated, you can avoid publishing indices of V and only the issuer should keep them. The credential holders can then request the issuer to very efficiently compute the witness as it knows the trapdoor (the paper does not describe this but the implementation i link does so). This however does require the issuer to stay online. This is my implementation that does removal and updates using trapdoor, https://github.com/lovesh/cks_accumulator. But note that the choice of groups is different than indy, i keep witness and accumulator in G1 for efficiency","username":"lovesh","ts":"2020-01-16T12:47:43.513Z"}
{"msg":"@cam-parra @MALodder May I publish https://github.com/hyperledger/ursa-python/pull/3 once, manually?","username":"rjones","ts":"2020-01-17T17:00:04.069Z"}
{"msg":"Find by me","username":"MALodder","ts":"2020-01-17T17:00:24.793Z"}
{"msg":"Fine by me","username":"MALodder","ts":"2020-01-17T17:00:24.793Z"}
{"msg":"This will let me generate the API key for PyPI and add it to the secrets in GitHub","username":"rjones","ts":"2020-01-17T17:00:26.632Z"}
{"msg":"OK, thanks.","username":"rjones","ts":"2020-01-17T17:00:31.802Z"}
{"msg":"sure thing ","username":"cam-parra","ts":"2020-01-17T17:00:39.806Z"}
{"msg":"sorry I haven't been able to help more on this front. I've been firefighting non community tasks ","username":"cam-parra","ts":"2020-01-17T17:01:10.606Z"}
{"msg":"No worries - I'm just trying to knock stuff out. I'm trying to be a little less BOFHish, or I would have just Done The Thing","username":"rjones","ts":"2020-01-17T17:01:44.594Z"}
{"msg":"thank you! ","username":"cam-parra","ts":"2020-01-17T17:05:23.255Z"}
{"msg":"https://pypi.org/project/python-ursa/ I added the token to GitHub, so I think this works going forward.","username":"rjones","ts":"2020-01-17T20:39:06.276Z"}
{"msg":"You could do a 0.1.1 release and see, maybe?","username":"rjones","ts":"2020-01-17T20:41:13.531Z"}
{"msg":"Can I get a review of this others? It looks promising in the use of DIDcomm’s encryption envelope.  https://rot256.io/post/box/","username":"kdenhartog","ts":"2020-01-17T22:50:39.162Z"}
{"msg":"Can I get a review of this? It looks promising from my perspective in the use of DIDcomm’s encryption envelope.  https://rot256.io/post/box/","username":"kdenhartog","ts":"2020-01-17T22:50:39.162Z"}
{"msg":"Interesting build failure while building libindy when sodiumoxide is updated from 0.0.16 to 0.2.5\n```\n============================================================================\nTestsuite summary for libsodium 1.0.18\n============================================================================\n# TOTAL: 77\n# PASS:  75\n# SKIP:  0\n# XFAIL: 0\n# FAIL:  2\n# XPASS: 0\n# ERROR: 0\n============================================================================\nSee test/default/test-suite.log\nPlease report to https://github.com/jedisct1/libsodium/issues\n============================================================================\n\n```\nTwo tests fail:\n```\nFAIL: pwhash_argon2i\nFAIL: pwhash_argon2id\n```\nThe code is here, if you want to reproduce this: https://github.com/AxelNennker/indy-sdk/tree/sodiumoxide_0.2.5\nSeems to be a sodiumoxide issue. If one of you would reproduce this then I would report the issue as requested.","username":"AxelNennker","ts":"2020-01-18T14:25:10.971Z"}
{"msg":"Seems to be an macos issue. Building libsodium on macos fails with the same test failures.","username":"AxelNennker","ts":"2020-01-18T17:32:05.877Z"}
{"msg":"Seems to be an macos issue. Building libsodium on macos fails with the same test failures. I tried to build libsodium (stable) from source and that failed too. Uninstalling `brew remove libtool` allowd me to build from source and run to test successfully. `cargo build` of libsodium-sys still fails though... libsodium-sys is using its own libtool. I guess that leads to the tests to fail.","username":"AxelNennker","ts":"2020-01-18T17:32:05.877Z"}
{"msg":"Seems to be an macos issue. I tried to build libsodium (stable) from source and that failed too. Uninstalling `brew remove libtool` allowed me to build from source and run the tests successfully. `cargo build` of libsodium-sys still fails though... libsodium-sys is using its own libtool. I guess that leads to the tests to fail.","username":"AxelNennker","ts":"2020-01-18T17:32:05.877Z"}
{"msg":"Seems to be an macos issue. I tried to build libsodium (stable) from source and that failed too. Uninstalling `brew remove libtool` allowed me to build from source and run the tests successfully. `cargo build` of libsodium-sys still fails though... libsodium-sys is using its own libtool. I guess that leads to the tests to fail.\nI wished we would use Rust native cryptography instead of libraries https://github.com/rust-lang/wg-governance/issues/12","username":"AxelNennker","ts":"2020-01-18T17:32:05.877Z"}
{"msg":"Thank you very much about these.","username":"KyleHuang","ts":"2020-01-20T06:16:09.042Z"}
{"msg":"Rust implementations are taken first, if none exist like Argon2 then we have no choice but to go out to C","username":"MALodder","ts":"2020-01-20T14:08:56.822Z"}
{"msg":"I'll try to take a look sometime today.","username":"hartm","ts":"2020-01-20T15:29:39.008Z"}
{"msg":"Could you please send us the Bug ID/Link? We would like to monitor this because it currently prevents us from using revocation in production.","username":"s.weidenbach","ts":"2020-01-21T16:42:02.282Z"}
{"msg":"Has joined the channel.","username":"CHempel","ts":"2020-01-21T16:49:57.325Z","type":"uj"}
{"msg":"I created a new bug in JIRA and hope that I didn't overlook an existing one: https://jira.hyperledger.org/browse/URSA-9","username":"s.weidenbach","ts":"2020-01-21T17:13:11.968Z"}
{"msg":"I created a new bug in JIRA and hope that I didn't overlook an existing one: https://jira.hyperledger.org/browse/URSA-9","username":"s.weidenbach","ts":"2020-01-21T17:13:49.050Z"}
{"msg":"I created a new bug in JIRA and hope that I didnt overlook an existing one: https://jira.hyperledger.org/browse/URSA-9","username":"s.weidenbach","ts":"2020-01-21T17:17:01.523Z"}
{"msg":"@here Just a reminder for tomorrow's meeting.  Hope to see many of you all there!  Thanks!","username":"hartm","ts":"2020-01-22T02:46:16.188Z"}
{"msg":"Link for the meeting?","username":"brentzundel","ts":"2020-01-22T15:05:22.229Z"}
{"msg":"https://zoom.us/my/hyperledger.community.backup","username":"lovesh","ts":"2020-01-22T15:05:30.205Z"}
{"msg":"Has left the channel.","username":"agunde","ts":"2020-01-22T15:18:58.495Z","type":"ul"}
{"msg":"https://obj.umiacs.umd.edu/papers_for_stories/crlite_oakland17.pdf","username":"hartm","ts":"2020-01-22T15:27:10.753Z"}
{"msg":"https://arxiv.org/abs/1905.13737","username":"MALodder","ts":"2020-01-22T15:28:13.407Z"}
{"msg":"https://www.usenix.org/system/files/sec19-thomas.pdf","username":"MALodder","ts":"2020-01-22T15:37:02.501Z"}
{"msg":"https://eprint.iacr.org/2018/727.pdf","username":"hartm","ts":"2020-01-22T15:44:19.111Z"}
{"msg":"https://github.com/privacypass/challenge-bypass-extension","username":"MALodder","ts":"2020-01-22T15:44:34.797Z"}
{"msg":"https://content.sciendo.com/view/journals/popets/2018/3/article-p164.xml","username":"hartm","ts":"2020-01-22T15:47:59.464Z"}
{"msg":"https://people.csail.mit.edu/silvio/Selected%20Scientific%20Papers/Pseudo%20Randomness/Verifiable_Random_Functions.pdf","username":"hartm","ts":"2020-01-22T15:57:02.199Z"}
{"msg":"Ursa 0.3.1 is now released","username":"MALodder","ts":"2020-01-23T18:37:24.083Z"}
{"msg":"Who will be attending the Hyperledger Global Forum?","username":"esplinr","ts":"2020-01-23T19:39:21.485Z"}
{"msg":"I grabbed us a 10 minute project presentation slot to present about Ursa. If you want to present, let me know and I'll substitute your name for mine.","username":"esplinr","ts":"2020-01-23T19:39:58.200Z"}
{"msg":"https://wiki.hyperledger.org/display/HGF/Projects+Kiosk","username":"esplinr","ts":"2020-01-23T19:40:42.481Z"}
{"msg":"I was planning to present on building secure protocols using Ursa","username":"MALodder","ts":"2020-01-24T00:27:53.890Z"}
{"msg":"@esplinr Are you going?  If so, you're more than welcome to talk if you like.","username":"hartm","ts":"2020-01-24T00:47:27.117Z"}
{"msg":"I'm going, and can help out if needed. But you or @MALodder would be better qualified. Once you know your schedules at the conference, let me know if you are available.","username":"esplinr","ts":"2020-01-24T00:48:25.024Z"}
{"msg":"@brentzundel would also do great.","username":"esplinr","ts":"2020-01-24T00:48:56.140Z"}
{"msg":"Mike and I are already presenting on Ursa","username":"brentzundel","ts":"2020-01-24T02:13:10.808Z"}
{"msg":"@esplinr You're plenty qualified.  I doubt people at the booth are going to be asking theoretical questions, which is basically what I'm good for answering anyway.","username":"hartm","ts":"2020-01-24T03:32:12.681Z"}
{"msg":"Maybe help the author of https://crates.io/crates/rust-argon2 to  achieve version 1.0.\nI don't agree with the author that the limitations he describes are really limitations. For example he writes that the implementation is not optimized. I think that password hashing does not really need to be optimized, often it is desirable to be slow. The other thing he writes about clearing memory after use: I guess this was written before zeroize 1.x ","username":"AxelNennker","ts":"2020-01-24T10:01:15.879Z"}
{"msg":"Looked at the zeroizing and noticed that rust-argon2 just does not attempt to clean the memory that is left to the caller, which is OK, I think.","username":"AxelNennker","ts":"2020-01-24T10:31:13.243Z"}
{"msg":"Wondering why argon2 is not part of ring...","username":"AxelNennker","ts":"2020-01-24T10:32:07.591Z"}
{"msg":"Ring just supports algorithms mostly from boringssl. The author has done some interesting trade offs that I’m not sure if I agree with","username":"MALodder","ts":"2020-01-24T18:35:00.077Z"}
{"msg":"Hi Everyone, We are hoping to hear from everyone as we assess the health of our open source community. Please take 2 minutes to respond here: https://www.surveymonkey.com/r/DCIWGsurvey","username":"Dan","ts":"2020-01-27T17:13:52.413Z"}
{"msg":"The Linux Foundation’s CommunityBridge engineers are working on a tool to measure the health of critical open source projects and one of the key areas identified is QA Testing.  They request that our communities provide  honest and detailed information on testing tools and methodologies you use in your projects for us to come up with a detailed analysis, which they will share with all respondents and projects. https://www.surveymonkey.com/r/9H5G2GV. It’s only 5 questions long.  ","username":"Silona","ts":"2020-01-27T22:28:10.967Z"}
{"msg":"algebra","username":"cam-parra","ts":"2020-01-27T22:45:29.719Z"}
{"msg":"I am attending if you need more of an implementation presentation","username":"cam-parra","ts":"2020-01-27T22:51:21.297Z"}
{"msg":"Would you mind setting the dependency to zeroize to \"1\" instead of to \"1.0\"? The current version of zeroize is 1.1.0 The author of aes-gcm does use \"1\" as well.","username":"AxelNennker","ts":"2020-01-28T12:04:14.337Z"}
{"msg":"https://github.com/hyperledger/ursa/blob/master/libursa/Cargo.toml#L139","username":"AxelNennker","ts":"2020-01-28T12:08:32.504Z"}
{"msg":"When will ursa 0.3.1 be released? Could zeroize-1.1.0 be part of that?","username":"AxelNennker","ts":"2020-01-28T12:10:49.734Z"}
{"msg":"Hm, just saw that ursa-0.3.1 is out already. I missed that because libindy's Cargo.lock is still at ursa-.0.3.0","username":"AxelNennker","ts":"2020-01-28T12:13:56.281Z"}
{"msg":"@esplinr @brentzundel @MALodder @cam-parra @Silona Hi Everyone, Silona wants to put together some stuff for the Ursa kiosk at the global forum.  You all have expressed an interest--I'm linking everyone here so Silona can get in touch with us all.  Thanks!","username":"hartm","ts":"2020-01-28T18:07:51.177Z"}
{"msg":"https://wiki.hyperledger.org/display/HGF to sign up","username":"Silona","ts":"2020-01-28T18:11:44.583Z"}
{"msg":"I believe that @esplinr has signed us up already for a slot. Now we have to figure out what we will do with the time at the kiosk ","username":"cam-parra","ts":"2020-01-29T00:48:42.496Z"}
{"msg":"I would like to get a diversity of faces for each of the videos","username":"Silona","ts":"2020-01-29T17:21:41.655Z"}
{"msg":"I am in India (diversity, check) and can do a video presentation if that's an option ","username":"lovesh","ts":"2020-01-31T07:11:27.114Z"}
{"msg":"Has joined the channel.","username":"EdEykholt","ts":"2020-02-04T01:26:45.404Z","type":"uj"}
{"msg":"https://docs.google.com/document/d/1M3zgsRoOxlkjNPbDp4_7YWxuqO2EyefOT3Bt7ZgGIDY/edit","username":"MALodder","ts":"2020-02-05T15:46:09.413Z"}
{"msg":"formal audit of the rust dalek crypto libraries https://blog.quarkslab.com/resources/2019-08-26-audit-dalek-libraries/19-06-594-REP.pdf","username":"MALodder","ts":"2020-02-05T18:49:39.047Z"}
{"msg":"Interesting, thanks for the link Mike.","username":"hartm","ts":"2020-02-05T19:10:24.174Z"}
{"msg":"Has joined the channel.","username":"mccown","ts":"2020-02-06T21:50:56.631Z","type":"uj"}
{"msg":"shouldn't tests always succeed in master? These fail for me:\n```\nfailures:\n    cl::prover::tests::test_update_proof\n    cl::test::credential_with_negative_attribute_and_empty_proof_works\n    cl::test::demo\n    cl::test::demo_revocation\n    cl::test::multiple_predicates\n    ffi::cl::prover::tests::ursa_cl_proof_free_works\n    ffi::cl::prover::tests::ursa_cl_proof_from_json_works\n    ffi::cl::prover::tests::ursa_cl_proof_to_json_works\n    ffi::cl::prover::tests::ursa_cl_prover_process_credential_signature_signature_works\n    ffi::cl::prover::tests::ursa_cl_prover_proof_builder_add_common_attribute_works\n    ffi::cl::prover::tests::ursa_cl_prover_proof_builder_add_sub_proof_request_works\n    ffi::cl::prover::tests::ursa_cl_prover_proof_builder_finalize_works\n    ffi::cl::verifier::tests::ursa_cl_proof_verifier_add_common_attribute_works\n    ffi::cl::verifier::tests::ursa_cl_proof_verifier_add_sub_proof_request_works\n    ffi::cl::verifier::tests::ursa_cl_proof_verifier_verify_works_for_primary_proof\n    ffi::cl::verifier::tests::ursa_cl_proof_verifier_verify_works_for_revocation_proof\n    ffi::cl::verifier::tests::ursa_cl_verifier_new_proof_verifier_works\n\ntest result: FAILED. 235 passed; 17 failed; 6 ignored; 0 measured; 0 filtered out\n```","username":"AxelNennker","ts":"2020-02-08T20:22:54.791Z"}
{"msg":"Am I doing something wrong? cargo test in libursa fails\n```\nfailures:\n    cl::prover::tests::test_update_proof\n    cl::test::credential_with_negative_attribute_and_empty_proof_works\n    cl::test::demo\n    cl::test::demo_revocation\n    cl::test::multiple_predicates\n    ffi::cl::prover::tests::ursa_cl_proof_free_works\n    ffi::cl::prover::tests::ursa_cl_proof_from_json_works\n    ffi::cl::prover::tests::ursa_cl_proof_to_json_works\n    ffi::cl::prover::tests::ursa_cl_prover_process_credential_signature_signature_works\n    ffi::cl::prover::tests::ursa_cl_prover_proof_builder_add_common_attribute_works\n    ffi::cl::prover::tests::ursa_cl_prover_proof_builder_add_sub_proof_request_works\n    ffi::cl::prover::tests::ursa_cl_prover_proof_builder_finalize_works\n    ffi::cl::verifier::tests::ursa_cl_proof_verifier_add_common_attribute_works\n    ffi::cl::verifier::tests::ursa_cl_proof_verifier_add_sub_proof_request_works\n    ffi::cl::verifier::tests::ursa_cl_proof_verifier_verify_works_for_primary_proof\n    ffi::cl::verifier::tests::ursa_cl_proof_verifier_verify_works_for_revocation_proof\n    ffi::cl::verifier::tests::ursa_cl_verifier_new_proof_verifier_works\n\ntest result: FAILED. 235 passed; 17 failed; 6 ignored; 0 measured; 0 filtered out\n```","username":"AxelNennker","ts":"2020-02-08T20:35:25.903Z"}
{"msg":"```SODIUM_BUILD_STATIC=yes cargo test -q\nrunning 258 tests\n```","username":"rjones","ts":"2020-02-08T23:11:35.711Z"}
{"msg":"@AxelNennker this is what I got: ```libursa % rustc --version\nrustc 1.41.0 (5e1a79984 2020-01-27)\n\nlibursa % git log -1                 \ncommit 919d8ac1daec50fb9c3d5ee6ff3476e19e319015 (HEAD -> master, origin/master, origin/HEAD)\nAuthor: Michael Lodder <redmike7@gmail.com>\nDate:   Thu Feb 6 11:43:12 2020 -0700\n\n    Add VarBlake2\n    \n    Signed-off-by: Michael Lodder <redmike7@gmail.com>\n\nlibursa % SODIUM_BUILD_STATIC=yes cargo test -q\n\nrunning 258 tests\n(elided)\ntest result: ok. 252 passed; 0 failed; 6 ignored; 0 measured; 0 filtered out\n\nrunning 42 tests\n(elided)\ntest result: ok. 39 passed; 0 failed; 3 ignored; 0 measured; 0 filtered out\n\nrunning 1 test\n.\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\nrunning 41 tests\n(elided)\ntest result: ok. 41 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\nry@mba libursa % \n```","username":"rjones","ts":"2020-02-08T23:21:12.874Z"}
{"msg":"wasm","username":"tplooker","ts":"2020-02-09T10:05:59.641Z"}
{"msg":"Has joined the channel.","username":"thomas_kim","ts":"2020-02-10T10:24:57.061Z","type":"uj"}
{"msg":"Is the Anoncreds 2.0 available now? ","username":"thomas_kim","ts":"2020-02-10T10:24:59.155Z"}
{"msg":"yes","username":"MALodder","ts":"2020-02-10T15:25:41.069Z"}
{"msg":"I'm going to release ursa 0.3.2 today. I will notify when that is completed","username":"MALodder","ts":"2020-02-10T16:46:41.056Z"}
{"msg":"ursa 0.3.2 is now released","username":"MALodder","ts":"2020-02-10T21:34:03.897Z"}
{"msg":"Thanks. ","username":"thomas_kim","ts":"2020-02-11T00:54:28.981Z"}
{"msg":"Thanks Mike!","username":"hartm","ts":"2020-02-11T06:04:02.258Z"}
{"msg":"I'm seeing an odd error in libzmix (rust analyzer is so nice) - undefined method `eval_alt` on a `VecPoly3` in bulletproofs_amcl/benches/vec_poly_eval.rs. I can't see that the method ever existed or is part of a trait though :thinking:","username":"andrew.whitehead","ts":"2020-02-11T16:54:21.671Z"}
{"msg":"I had that function at some point but removed it. I might not have upgraded the version of that crate. Will raise a PR with upgraded version.","username":"lovesh","ts":"2020-02-12T07:32:03.191Z"}
{"msg":"Howdy Contributors and Maintainers!  Are you wondering about tapping into Developer marketing for your group or project?  Do you have a blog post idea?  An awesome announcement? Please attend our Contributor/marketing meeting!  https://wiki.hyperledger.org/display/Marketing/2020-02-19+Meeting+notes","username":"Silona","ts":"2020-02-13T18:26:36.985Z"}
{"msg":"@MALodder Do you have a specific plan for supporting calculation of witness on cloud agent to avoid downloading of the tails file on edge devices. Thanks in advance!","username":"thomas_kim","ts":"2020-02-14T04:28:47.253Z"}
{"msg":"I don't speicifically but BCGov has more implementation experience in this area. I would take to @andrew.whitehead @swcurran for more info","username":"MALodder","ts":"2020-02-14T04:29:35.611Z"}
{"msg":"Has joined the channel.","username":"sankarshanm","ts":"2020-02-14T09:05:12.460Z","type":"uj"}
{"msg":"We have thought about that, but have not done it.  There is some work being done on the implementation right now and that seems like a good improvement that we'll consider.","username":"swcurran","ts":"2020-02-14T15:41:56.980Z"}
{"msg":"Our currently plan is that Anoncreds 1 will be for limited use cases and hence relatively small tails file. Hopefully when we get to broader use cases, Anoncreds2 will be in place in indy/Aries agents.","username":"swcurran","ts":"2020-02-14T15:43:00.937Z"}
{"msg":"Let me know if you are interested in helping with the design/implementation--glad to have the help!","username":"swcurran","ts":"2020-02-14T15:43:50.626Z"}
{"msg":"Are we having the Sovrin crypto call tomorrow morning (the US holiday may make it hard for some to attend)?","username":"hartm","ts":"2020-02-17T00:12:17.624Z"}
{"msg":"It was moved to Thursday, I believe.","username":"brentzundel","ts":"2020-02-17T00:15:52.033Z"}
{"msg":"Oh, OK--wasn't sure if that was for a different, one-time meeting.","username":"hartm","ts":"2020-02-17T01:07:08.516Z"}
{"msg":"Yes it’s moved to Thursday ","username":"MALodder","ts":"2020-02-17T02:37:02.585Z"}
{"msg":"@swcurran would love your help in implementing the Aries side","username":"MALodder","ts":"2020-02-17T02:37:44.719Z"}
{"msg":"Are you wondering about tapping into Developer marketing for your group or project?  Do you have a blog post idea?  An awesome announcement? Please attend TOMORROW!  https://wiki.hyperledger.org/display/Marketing/2020-02-19+Meeting+notes","username":"Silona","ts":"2020-02-17T22:19:42.010Z"}
{"msg":"https://eprint.iacr.org/2007/155","username":"hartm","ts":"2020-02-19T15:35:16.512Z"}
{"msg":"Has joined the channel.","username":"victor.martinez","ts":"2020-02-19T18:00:21.979Z","type":"uj"}
{"msg":"Has joined the channel.","username":"nacerix","ts":"2020-02-23T14:38:02.523Z","type":"uj"}
{"msg":"Has joined the channel.","username":"echo.harker","ts":"2020-02-27T19:53:15.064Z","type":"uj"}
{"msg":"tried again today\n```\naxelnennker@Axels-MBP libursa (master) $ SODIUM_BUILD_STATIC=yes cargo test -q\n\nrunning 258 tests\n..........................i.....................i.............i.....i.F.FFFF........................ 100/258\n.....................................................................FFF...........FFFF............. 200/258\n..........FFFFF................................i....i.....\nfailures:\n\n---- cl::prover::tests::test_update_proof stdout ----\nUpdate Proof test -> start\nCreate RevocationRegistry Time: Duration { secs: 12, nanos: 689417000 }\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: UrsaCryptoError { inner: \n\nInvalid Signature correctness proof q != q'\n\n```","username":"AxelNennker","ts":"2020-02-28T12:05:33.649Z"}
{"msg":"I did `rm -rf ~/.cargo/registry && cd /tmp && git clone ...ursa && cd ursa && cargo test`","username":"AxelNennker","ts":"2020-02-28T12:06:38.825Z"}
{"msg":"axelnennker@Axels-MBP libursa (master) $ rustc --version\nrustc 1.41.1 (f3e1a954d 2020-02-24)","username":"AxelNennker","ts":"2020-02-28T12:07:57.343Z"}
{"msg":"axelnennker@Axels-MBP libursa (master) $ git log \ncommit 3230a30f33ea9aa81fa0f0ace68579fa523715bb (HEAD -> master, origin/master, origin/HEAD)\nAuthor: Axel Nennker <axel.nennker@telekom.de>\nDate:   Sun Feb 23 09:25:53 2020 +0100\n\n    an inclusive range would be more readable\n    \n    Signed-off-by: Axel Nennker <axel.nennker@telekom.de>\n\n","username":"AxelNennker","ts":"2020-02-28T12:08:41.359Z"}
{"msg":"I got this: ```failures:\n\n---- encryption::symm::aesgcm::aes256_gcm_tests::decrypt_should_fail stdout ----\nthread 'encryption::symm::aesgcm::aes256_gcm_tests::decrypt_should_fail' panicked at 'assertion failed: res.is_err()', libursa/src/encryption/symm/aesgcm.rs:102:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n\n\nfailures:\n    encryption::symm::aesgcm::aes256_gcm_tests::decrypt_should_fail\n\ntest result: FAILED. 251 passed; 1 failed; 6 ignored; 0 measured; 0 filtered out\n```","username":"rjones","ts":"2020-02-28T12:40:07.245Z"}
{"msg":"different test case","username":"rjones","ts":"2020-02-28T12:40:13.184Z"}
{"msg":"Interesting. I turned off a high-CPU load process on the same machine, and that test case passed.","username":"rjones","ts":"2020-02-28T12:41:54.404Z"}
{"msg":"worked the second time: ```ry@mba libursa % SODIUM_BUILD_STATIC=yes cargo test -q --lib\n\nrunning 258 tests\n.......................i.....................i.............i.....i.................................. 100/258\n........................................test cl::test::demo_revocation has been running for over 60 seconds\n..............test ffi::cl::issuer::tests::ursa_cl_issuer_new_revocation_registry_def_works has been running for over 60 seconds\n.............................................. 200/258\n......................................test ffi::cl::verifier::tests::ursa_cl_proof_verifier_verify_works_for_revocation_proof has been running for over 60 seconds\ntest signatures::bls::normal::tests::batch_signature_verification has been running for over 60 seconds\n......i....i.......test signatures::bls::small::tests::batch_signature_verification has been running for over 60 seconds\n.\ntest result: ok. 252 passed; 0 failed; 6 ignored; 0 measured; 0 filtered out\n\nry@mba libursa % \n```","username":"rjones","ts":"2020-02-28T12:49:10.191Z"}
{"msg":"I have setup a new ubuntu 16.04 VM and ran the ursa tests there and it works.\nSo, I think that this failure of the ursa tests has to do with macos \nDarwin Axels-MBP.fritz.box 19.3.0 Darwin Kernel Version 19.3.0: Thu Jan  9 20:58:23 PST 2020; root:xnu-6153.81.5~1/RELEASE_X86_64 x86_64","username":"AxelNennker","ts":"2020-02-29T09:38:35.606Z"}
{"msg":"odd","username":"MALodder","ts":"2020-02-29T17:23:20.905Z"}
{"msg":"Can somebody with macos confirm this failure of ursa tests?!","username":"AxelNennker","ts":"2020-03-01T15:25:37.429Z"}
{"msg":"they don't fail for me","username":"MALodder","ts":"2020-03-01T15:26:18.099Z"}
{"msg":"what could I do to debug this?","username":"rjones","ts":"2020-03-01T17:23:15.781Z"}
{"msg":"Worked for me with SODIUM_BUILD_STATIC and rustc 1.41.0","username":"andrew.whitehead","ts":"2020-03-01T19:09:04.807Z"}
{"msg":"Works for me","username":"MALodder","ts":"2020-03-01T19:09:26.030Z"}
{"msg":"from above: ","username":"rjones","ts":"2020-03-01T19:13:34.417Z"}
{"msg":"```I got this: ```failures:\n\n---- encryption::symm::aesgcm::aes256_gcm_tests::decrypt_should_fail stdout ----\nthread 'encryption::symm::aesgcm::aes256_gcm_tests::decrypt_should_fail' panicked at 'assertion failed: res.is_err()', libursa/src/encryption/symm/aesgcm.rs:102:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n\n\nfailures:\n    encryption::symm::aesgcm::aes256_gcm_tests::decrypt_should_fail\n\ntest result: FAILED. 251 passed; 1 failed; 6 ignored; 0 measured; 0 filtered out\n```\n```","username":"rjones","ts":"2020-03-01T19:13:38.942Z"}
{"msg":"I got this: ```failures:\n\n---- encryption::symm::aesgcm::aes256_gcm_tests::decrypt_should_fail stdout ----\nthread 'encryption::symm::aesgcm::aes256_gcm_tests::decrypt_should_fail' panicked at 'assertion failed: res.is_err()', libursa/src/encryption/symm/aesgcm.rs:102:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n\n\nfailures:\n    encryption::symm::aesgcm::aes256_gcm_tests::decrypt_should_fail\n\ntest result: FAILED. 251 passed; 1 failed; 6 ignored; 0 measured; 0 filtered out\n```\n```","username":"rjones","ts":"2020-03-01T19:13:38.942Z"}
{"msg":"`SODIUM_BUILD_STATIC=yes cargo test -q -- --test-threads=1`","username":"rjones","ts":"2020-03-01T19:18:36.950Z"}
{"msg":"generates some failures. I suspect the other failures are due to CPU load, but I don't have my power adapter with me to run my load generator","username":"rjones","ts":"2020-03-01T19:19:05.849Z"}
{"msg":"I'm getting failures with --test-threads=1, some weird ones like ursa_cl_proof_free_works","username":"andrew.whitehead","ts":"2020-03-01T19:30:26.701Z"}
{"msg":"","username":"andrew.whitehead","ts":"2020-03-01T19:34:10.931Z","attachments":[{"type":"file","title":"ursa-test-failures.txt","title_link":"/file-upload/nibGFWx3XdcHLoRwi/ursa-test-failures.txt","url":"/file-upload/nibGFWx3XdcHLoRwi/ursa-test-failures.txt","remote":false,"fileId":"nibGFWx3XdcHLoRwi","fileName":"ursa-test-failures.txt"}]}
{"msg":"@andrew.whitehead Those are the failures I see as well on macos","username":"AxelNennker","ts":"2020-03-01T21:15:20.839Z"}
{"msg":"What is the ursa update schedule? How often is Cargo.lock updated? On average?","username":"AxelNennker","ts":"2020-03-02T07:20:00.404Z"}
{"msg":"About once a month","username":"MALodder","ts":"2020-03-02T15:53:15.861Z"}
{"msg":"@MALodder  Does Ursa  provides asymmetric encryption?\nWe are going to migrate Libindy from sodiumoxide to ursa but I can't find the required functionality.","username":"Artemkaaas","ts":"2020-03-03T10:02:52.264Z"}
{"msg":"Is there a documentation regarding the public functions?","username":"Artemkaaas","ts":"2020-03-03T10:04:29.591Z"}
{"msg":"Is there documentation regarding the public functions?","username":"Artemkaaas","ts":"2020-03-03T10:04:29.591Z"}
{"msg":"Asymmetric encryption is something I’m working on. Ecies only no RSA","username":"MALodder","ts":"2020-03-03T13:39:17.058Z"}
{"msg":"@here We are cancelling tomorrow's meeting due to the HGF.  Feel free to ask questions here if you'd like to bring things up.  Thanks!","username":"hartm","ts":"2020-03-03T17:23:14.411Z"}
{"msg":"HGF == Hyperledger Global Forum in Phoenix Arizona (going on now!)","username":"nage","ts":"2020-03-03T18:09:39.376Z"}
{"msg":"Nice to meet you at the event @hartm ","username":"arsulegai","ts":"2020-03-04T04:54:26.618Z"}
{"msg":"@arsulegai Same!","username":"hartm","ts":"2020-03-04T04:54:45.170Z"}
{"msg":"Has joined the channel.","username":"sergey.minaev","ts":"2020-03-04T15:32:27.387Z","type":"uj"}
{"msg":"@MALodder @brentzundel is https://github.com/hyperledger/ursa-docs/tree/master/specs/anoncreds2 the latest source to read about Revocation 2.0?\nI'm going to start 2nd round of learning this topic for me and looking for up-to-date math... Could you please point me out the right place.","username":"sergey.minaev","ts":"2020-03-04T15:32:28.533Z"}
{"msg":"Yes, it is","username":"brentzundel","ts":"2020-03-04T15:54:50.364Z"}
{"msg":"Has joined the channel.","username":"daveek","ts":"2020-03-09T09:27:32.406Z","type":"uj"}
{"msg":"Hi.. What Cryptographic Primitives are used in Indy & Aries?","username":"daveek","ts":"2020-03-09T09:27:34.613Z"}
{"msg":"The Sovrin Crypto call has been moved to Thursday as a follow up to the HW suggestions from last time and to accomadate those in Europe who wish to attend. ","username":"MALodder","ts":"2020-03-09T13:32:25.787Z"}
{"msg":"Do you need an exact listing? Is there something specific you are looking for?","username":"MALodder","ts":"2020-03-09T13:33:49.828Z"}
{"msg":"Great article I shared with a few of you at HLGF : https://arxiv.org/pdf/2002.08437.pdf","username":"cam-parra","ts":"2020-03-09T15:15:33.583Z"}
{"msg":"\"The adversarial model presented by trusted execution envi- ronments (TEEs) has prompted researchers to investigate unusual attack vectors.\"\n\nI think this is a real issue: if you presetn something as 'unbreakable', or even set the context as 'attack by very motivated adversaries' then you make the perfect the enemy of the good and any crazy-ass edge case failure blows up the whole value proposition.  \n\nDon't get me wrong, I think it's very important to understand the limits of any tchnology and build systems accordingly, but it's also really important with research like this to know how likely it is that YOUR adversary will have THIS capability.\n\nI feel rather the same way about emissions-based side channels in mobile devices: they're very clever and occassionally relevant, but in general the risks of someone following you around at close quarters with a directional antenna and you NOT NOTICING are pretty bloody unlikely, and yet the scare about those can put people off putting in place some good basic protections for the pareto attack case","username":"JonGeater","ts":"2020-03-09T16:53:31.437Z"}
{"msg":"https://wiki.hyperledger.org/display/TSC/2020+Q1+Hyperledger+Ursa","username":"MALodder","ts":"2020-03-10T13:02:41.243Z"}
{"msg":"@JonGeater are you planning to come to the Thursday meeting follow up on the HW Interface?","username":"MALodder","ts":"2020-03-10T13:03:17.016Z"}
{"msg":"Sorry I can’t - I’m with a customer. I could do Friday, same time if that works","username":"JonGeater","ts":"2020-03-10T13:05:40.499Z"}
{"msg":"That works for me. I’ll check with the others","username":"MALodder","ts":"2020-03-10T14:52:58.989Z"}
{"msg":"@JonGeater what about these https://www.zdnet.com/article/intel-cpus-vulnerable-to-new-lvi-attacks/","username":"MALodder","ts":"2020-03-10T17:34:39.174Z"}
{"msg":"https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00334.html","username":"Dan","ts":"2020-03-10T18:10:28.767Z"}
{"msg":"Has joined the channel.","username":"sigma67","ts":"2020-03-10T19:16:36.284Z","type":"uj"}
{"msg":"Yes, like what libraries are being used in the core and what Primitives are being used.","username":"daveek","ts":"2020-03-11T14:37:36.181Z"}
{"msg":"Dependencies\n    - Openssl\n    - Libsodium\n    - Libsecp256k1\n    - Apache Milagro\n    - Rust Crypto\n    - Rust Curve25519 Dalek\n\nCrypto offered:\n    - Signatures:\n        - Ecdsa\n        - Eddsa\n        - Boney Lynn Shachum (BLS)\n        - Camenisch Lysyanskaya \n        - Boneh Boyen Shachum (BBS+)\n        - Pointcheval Saunders\n        - Groth\n    - Key agreement\n        - Ecdh\n        - x25519\n    - Encryption\n        - AES-CBC\n        - AES-GCM\n        - XCHACHA20-POLY1305\n    - Zero-Knowledge proofs\n        - Signature Proofs of Knowledge\n        - Bulletproofs\n        - Range proofs\n        - Set memberships\n","username":"MALodder","ts":"2020-03-11T19:29:09.859Z"}
{"msg":"Thanks a lot :) and kindly please put that in Usra Document, it really hard for someone to finds it.","username":"daveek","ts":"2020-03-12T09:02:14.485Z"}
{"msg":"We accept PRs 🙂","username":"MALodder","ts":"2020-03-12T12:54:41.979Z"}
{"msg":"The dependencies list is front and center in the README already","username":"MALodder","ts":"2020-03-12T14:14:57.740Z"}
{"msg":"Is there a reason why `issued` and `revoked` are tracked on revocation registry deltas? I can't see that they are used anywhere, but they get published to the ledger and could lead to much larger deltas","username":"andrew.whitehead","ts":"2020-03-12T16:06:34.538Z"}
{"msg":"Is there a reason why `issued` and `revoked` are tracked on revocation registry deltas? I can't see that they are used anywhere, but they get published to the ledger and could lead to much larger deltas (adds 135K if you naively revoke an entire 25K-entry registry)","username":"andrew.whitehead","ts":"2020-03-12T16:06:34.538Z"}
{"msg":"I'm also curious why the newer signature types are in zmix and not ursa, what's the criteria for that?","username":"andrew.whitehead","ts":"2020-03-12T16:11:15.526Z"}
{"msg":"The plan is actually to move those to ursa and just leave the ZKP stuff in libzmix ","username":"MALodder","ts":"2020-03-12T17:08:32.719Z"}
{"msg":"Has joined the channel.","username":"Abhishekkishor","ts":"2020-03-12T19:33:48.953Z","type":"uj"}
{"msg":"Got it added https://github.com/hyperledger/ursa/pull/102","username":"kdenhartog","ts":"2020-03-13T02:21:44.028Z"}
{"msg":"sweet thanks for that","username":"MALodder","ts":"2020-03-13T02:23:04.038Z"}
{"msg":"already approved","username":"MALodder","ts":"2020-03-13T02:23:09.243Z"}
{"msg":"https://chat.hyperledger.org/channel/indy?msg=q5X9yyWP5oY5sgFwe","username":"nage","ts":"2020-03-13T20:27:39.042Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/indy?msg=q5X9yyWP5oY5sgFwe","url":"https://chat.hyperledger.org/channel/indy?msg=q5X9yyWP5oY5sgFwe","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@MALodder Libursa crashes with assertion in case invalid key bytes were provided to\n```\nEd25519Sha512::ver_key_to_key_exchange(&PublicKey(node_verkey))\n```","username":"Artemkaaas","ts":"2020-03-16T10:23:37.186Z"}
{"msg":"```\nthread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `32`,\n right: `23`: destination and source slices have different lengths', src/libcore/slice/mod.rs:2138:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n```","username":"Artemkaaas","ts":"2020-03-16T10:23:53.718Z"}
{"msg":"```\nnode_verkey = [8, 6, 91, 127, 212, 71, 158, 12, 162, 54, 83, 82, 242, 119, 16, 131, 152, 32, 68, 28, 54, 190, 75]\n```\n\n```\nthread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `32`,\n right: `23`: destination and source slices have different lengths', src/libcore/slice/mod.rs:2138:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n```","username":"Artemkaaas","ts":"2020-03-16T10:23:53.718Z"}
{"msg":"https://github.com/hyperledger/ursa/pull/103","username":"MALodder","ts":"2020-03-16T14:25:49.176Z"}
{"msg":"From the Sovrin Foundation Board of Trustees: Next Steps for the Sovrin Foundation\nhttps://sovrin.org/next-steps-for-the-sovrin-foundation/","username":"AnnaJ","ts":"2020-03-17T01:42:39.458Z"}
{"msg":"Has joined the channel.","username":"shemnon","ts":"2020-03-17T14:39:00.725Z","type":"uj"}
{"msg":"@here Just a reminder of tomorrow's meeting!  You can find the agenda on the wiki as usual.  Due to a calendar bug, you may not be able to see the meeting information on the overall calendar, but you can find it on https://lists.hyperledger.org/g/ursa/calendar or just go to  https://zoom.us/my/hyperledger.community.backup at 7:00 AM Pacific time as usual.  Thanks for your time!","username":"hartm","ts":"2020-03-18T01:14:09.959Z"}
{"msg":"I'll be there","username":"MALodder","ts":"2020-03-18T01:14:25.412Z"}
{"msg":"@MALodder Great!","username":"hartm","ts":"2020-03-18T01:24:19.620Z"}
{"msg":"I suspect we'll have a lot of questions for you.","username":"hartm","ts":"2020-03-18T01:24:28.304Z"}
{"msg":"sounds good","username":"MALodder","ts":"2020-03-18T01:25:19.523Z"}
{"msg":"Your personal effects are some of the last few things left here at the office","username":"nage","ts":"2020-03-18T22:20:49.066Z"}
{"msg":"Probably a good idea to stop by and gather them when you have the chance","username":"nage","ts":"2020-03-18T22:21:05.825Z"}
{"msg":"https://signal.org/blog/secure-value-recovery/","username":"MALodder","ts":"2020-03-18T22:35:03.608Z"}
{"msg":"this is interesting, similar to what I was talking about on the call this morning","username":"MALodder","ts":"2020-03-18T22:35:18.707Z"}
{"msg":"@MALodder \nIs Ursa function `keypair` of `Ed25519Sha512  SignatureScheme`   with passing seed  equal to libsodium `crypto_sign_ed25519_seed_keypair?","username":"Artemkaaas","ts":"2020-03-19T18:52:33.959Z"}
{"msg":"I try to use it for transactions signing but when I use `KeyGenOption::UseSeed` option for keys generation I receive the different keys.\nWhen I use `KeyGenOption::FromSecretKey` option for keys generation the generated keys and signature are correct.","username":"Artemkaaas","ts":"2020-03-19T18:57:05.612Z"}
{"msg":"No they are not the same","username":"MALodder","ts":"2020-03-20T02:33:16.408Z"}
{"msg":"Libsodium computes the SHA512 hash of the seed and takes the first 32 bytes, clamps it and that's the private key","username":"MALodder","ts":"2020-03-20T02:34:59.849Z"}
{"msg":"Ursa computes the sha256 hash of the seed which then seeds ChaCha which is then used to randomly generate 32 bytes","username":"MALodder","ts":"2020-03-20T02:36:13.244Z"}
{"msg":"those bytes are clamped to be the private key","username":"MALodder","ts":"2020-03-20T02:36:33.930Z"}
{"msg":"Has joined the channel.","username":"PatrikStas","ts":"2020-03-21T15:19:33.576Z","type":"uj"}
{"msg":"Would this be a cause for backward compatibility when moving to ursa from indy?","username":"tomislav","ts":"2020-03-21T19:52:10.893Z"}
{"msg":"we could implement something to make them compatibile","username":"MALodder","ts":"2020-03-21T19:53:43.032Z"}
{"msg":"Has joined the channel.","username":"mohammadhossein73","ts":"2020-03-29T05:52:53.307Z","type":"uj"}
{"msg":"@here Just a reminder for tomorrow's Ursa meeting.  Hope to speak to many of you tomorrow!","username":"hartm","ts":"2020-04-01T01:44:14.222Z"}
{"msg":"what was the reason for switching @MALodder? Last I was reading libsodium's implementation matches how FIPS 186-5 defines it and how RFC 8032 defines it. ","username":"kdenhartog","ts":"2020-04-01T12:47:21.059Z"}
{"msg":"I’m not aware that libsodium does that but will take a look","username":"MALodder","ts":"2020-04-01T12:48:41.465Z"}
{"msg":"Might be worth looking at Openssl as well. I think they've preemptively implemented against RFC 8032 which is probably why NIST defined things the way they did","username":"kdenhartog","ts":"2020-04-01T12:53:03.113Z"}
{"msg":"This is the implementation for OpenSSL https://github.com/openssl/openssl/blob/97b50f67f212589661c9f1edd5285822c6cc642b/crypto/ec/curve25519.c#L5447","username":"kdenhartog","ts":"2020-04-01T12:53:24.904Z"}
{"msg":"Has joined the channel.","username":"SethiSaab","ts":"2020-04-01T13:05:23.106Z","type":"uj"}
{"msg":"@kdenhartog what you're pointing at is signing not key generation","username":"MALodder","ts":"2020-04-01T13:44:24.785Z"}
{"msg":"ursa is completely compliant with FIPS 186-5 in that way","username":"MALodder","ts":"2020-04-01T13:44:49.438Z"}
{"msg":"Thanks, key generation is here: https://github.com/openssl/openssl/blob/97b50f67f212589661c9f1edd5285822c6cc642b/crypto/ec/curve25519.c#L5584","username":"kdenhartog","ts":"2020-04-01T13:45:46.649Z"}
{"msg":"Similarly RFC 8032 is here https://tools.ietf.org/html/rfc8032#section-5.1.5","username":"kdenhartog","ts":"2020-04-01T13:46:52.300Z"}
{"msg":"What @tomislav and indy are wanting is the creation from a seed - https://github.com/jedisct1/libsodium/blob/master/src/libsodium/crypto_sign/ed25519/ref10/keypair.c#L18","username":"MALodder","ts":"2020-04-01T13:47:50.691Z"}
{"msg":"we are following RFC8032 ","username":"MALodder","ts":"2020-04-01T13:48:18.579Z"}
{"msg":"what we are doing differently is seeding the random number generator that is passed to the dalek library","username":"MALodder","ts":"2020-04-01T13:48:43.437Z"}
{"msg":"https://docs.rs/ed25519-dalek/1.0.0-pre.3/ed25519_dalek/struct.Keypair.html","username":"MALodder","ts":"2020-04-01T13:49:35.639Z"}
{"msg":"They only allow creating the keys from an RNG","username":"MALodder","ts":"2020-04-01T13:49:47.177Z"}
{"msg":"otherwise you have to handle the bytes and the clamping manually","username":"MALodder","ts":"2020-04-01T13:50:00.349Z"}
{"msg":"https://docs.rs/ed25519-dalek/1.0.0-pre.3/ed25519_dalek/struct.Keypair.html#method.sign","username":"MALodder","ts":"2020-04-01T13:50:32.542Z"}
{"msg":"https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/?include_text=1","username":"MALodder","ts":"2020-04-01T14:27:29.645Z"}
{"msg":"Ok I get what you're referring to now, no concerns about your approach now","username":"kdenhartog","ts":"2020-04-01T14:35:07.040Z"}
{"msg":"https://eprint.iacr.org/2019/403.pdf","username":"kdenhartog","ts":"2020-04-01T14:43:04.726Z"}
{"msg":"Has left the channel.","username":"rjones","ts":"2020-04-01T15:30:14.333Z","type":"ul"}
{"msg":"Has joined the channel.","username":"gnarula","ts":"2020-04-01T18:45:46.748Z","type":"uj"}
{"msg":"Hi! I'm working on something that involves validating an indy txn and as a result I need to validate the BLS signatures. Does anyone know which curve is used by Indy? I think it's BN254 but are https://tools.ietf.org/id/draft-kasamatsu-bncurves-01.html#curve254a the parameters?","username":"gnarula","ts":"2020-04-01T18:45:47.325Z"}
{"msg":"I followed the [directions here](https://github.com/hyperledger/ursa/blob/master/docs/build-environment.md) for setting up an ursa build environment on Ubuntu 18.04 yesterday. I was eventually able o get ursa to build, but when I run `cargo test --release` I have 17 failing tests. ","username":"brentzundel","ts":"2020-04-02T14:16:13.016Z"}
{"msg":"okay, something is seriously wrong with my machine. I installed IntelliJ with the rust plugin and ran tests there.\nwhen I run tests in IDE: 411 pass, 0 fail, 9 ignored\nwhen I run tests on command line: 235 pass, 17 fail, 6 ignored","username":"brentzundel","ts":"2020-04-02T16:30:29.806Z"}
{"msg":"I'm almost to the point of re-installing everything and starting from scratch.","username":"brentzundel","ts":"2020-04-02T16:31:09.613Z"}
{"msg":"sounds like a good idea to start fresh","username":"MALodder","ts":"2020-04-02T16:39:37.104Z"}
{"msg":"Which tests were failing? I was also seeing 17 failures in the CL module, but it seems to depend on how many threads are running","username":"andrew.whitehead","ts":"2020-04-02T17:00:43.950Z"}
{"msg":"shouldn't depend on the number of threads","username":"MALodder","ts":"2020-04-02T17:01:03.225Z"}
{"msg":"We were discussing this back on March 1 looks like","username":"andrew.whitehead","ts":"2020-04-02T17:01:42.602Z"}
{"msg":"Has joined the channel.","username":"pavithraes","ts":"2020-04-02T19:24:18.904Z","type":"uj"}
{"msg":"has anyone tried https://blog.filippo.io/rustgo/","username":"MALodder","ts":"2020-04-02T22:24:57.862Z"}
{"msg":"call rust code from golang without using cgo","username":"MALodder","ts":"2020-04-02T22:25:11.617Z"}
{"msg":"just dynamic linking","username":"MALodder","ts":"2020-04-02T22:25:18.494Z"}
{"msg":"its a little weird method but it works","username":"MALodder","ts":"2020-04-02T22:27:13.923Z"}
{"msg":"Has joined the channel.","username":"genggjh","ts":"2020-04-03T08:28:14.081Z","type":"uj"}
{"msg":"```\nfailures:\n    cl::prover::tests::test_update_proof\n    cl::test::credential_with_negative_attribute_and_empty_proof_works\n    cl::test::demo\n    cl::test::demo_revocation\n    cl::test::multiple_predicates\n    ffi::cl::prover::tests::ursa_cl_proof_free_works\n    ffi::cl::prover::tests::ursa_cl_proof_from_json_works\n    ffi::cl::prover::tests::ursa_cl_proof_to_json_works\n    ffi::cl::prover::tests::ursa_cl_prover_process_credential_signature_signature_works\n    ffi::cl::prover::tests::ursa_cl_prover_proof_builder_add_common_attribute_works\n    ffi::cl::prover::tests::ursa_cl_prover_proof_builder_add_sub_proof_request_works\n    ffi::cl::prover::tests::ursa_cl_prover_proof_builder_finalize_works\n    ffi::cl::verifier::tests::ursa_cl_proof_verifier_add_common_attribute_works\n    ffi::cl::verifier::tests::ursa_cl_proof_verifier_add_sub_proof_request_works\n    ffi::cl::verifier::tests::ursa_cl_proof_verifier_verify_works_for_primary_proof\n    ffi::cl::verifier::tests::ursa_cl_proof_verifier_verify_works_for_revocation_proof\n    ffi::cl::verifier::tests::ursa_cl_verifier_new_proof_verifier_works\n```","username":"brentzundel","ts":"2020-04-03T17:33:14.139Z"}
{"msg":"Has joined the channel.","username":"ultimo2020","ts":"2020-04-03T19:45:59.323Z","type":"uj"}
{"msg":"Hi everyone. Is Ursa FIPS compliant? ","username":"ultimo2020","ts":"2020-04-03T19:46:13.579Z"}
{"msg":"@MALodder  :point_up: ","username":"brentzundel","ts":"2020-04-03T20:25:42.187Z"}
{"msg":"@MALodder - thanks for the info. Is there some online documentation on how Ursa is FIPS compliant? Without HSM or with? ","username":"ultimo2020","ts":"2020-04-03T20:38:42.810Z"}
{"msg":"","username":"MALodder","ts":"2020-04-03T20:40:51.053Z","attachments":[{"type":"file","title":"FIPS Compliance and Hyperledger Ursa_Indy_Aries.docx","title_link":"/file-upload/ojm29RMbpPZbn4z8d/FIPS%20Compliance%20and%20Hyperledger%20Ursa_Indy_Aries.docx","url":"/file-upload/ojm29RMbpPZbn4z8d/FIPS%20Compliance%20and%20Hyperledger%20Ursa_Indy_Aries.docx","remote":false,"fileId":"ojm29RMbpPZbn4z8d","fileName":"FIPS Compliance and Hyperledger Ursa_Indy_Aries.docx"}]}
{"msg":"@ultimo2020 ^^^","username":"MALodder","ts":"2020-04-03T20:41:11.016Z"}
{"msg":"Thanks will read it","username":"ultimo2020","ts":"2020-04-03T20:42:20.069Z"}
{"msg":"As far as roadmaps go, the Ursa community is advocating to NIST to approve the algorithms in Ursa first. So still no compliance because of threshold encryption and performance but working towards it with NIST. Hope it gets there. Great document by the way. Are some big industry players using\n SSI although not quite","username":"ultimo2020","ts":"2020-04-03T21:02:36.788Z"}
{"msg":"As far as roadmaps go, the Ursa community is advocating to NIST to approve the algorithms in Ursa first. So still no compliance because of threshold encryption and performance but working towards it with NIST. Hope it gets there. Great document by the way. Are some big industry players using\n SSI although not quite FIPS ready? ","username":"ultimo2020","ts":"2020-04-03T21:02:36.788Z"}
{"msg":"As far as roadmaps go, the Ursa community is advocating to NIST to approve the algorithms in Ursa first. So still no compliance because of threshold encryption and performance but working towards it with NIST. Hope it gets there. Great document by the way. Are some big industry players using\n SSI although not quite FIPS ready.\n","username":"ultimo2020","ts":"2020-04-03T21:02:36.788Z"}
{"msg":"A few","username":"MALodder","ts":"2020-04-03T21:35:23.006Z"}
{"msg":"Govt and Healthcare are two industries they are in","username":"MALodder","ts":"2020-04-03T21:36:31.299Z"}
{"msg":"Performance is not the issue. The algorithms in Ursa are very fast","username":"MALodder","ts":"2020-04-04T00:40:32.205Z"}
{"msg":"Yes the are fast. Thanks. But we are still waiting for FIPS compliance? Which big health care industries used although it is still not FIPS compliant? ","username":"ultimo2020","ts":"2020-04-04T05:55:25.995Z"}
{"msg":"Has joined the channel.","username":"notsteward","ts":"2020-04-05T20:11:27.106Z","type":"uj"}
{"msg":"https://github.com/cryptosubtlety/final-security-bug/blob/master/finalsecuritybug.pdf","username":"MALodder","ts":"2020-04-07T05:17:14.426Z"}
{"msg":"Why we don’t use java with google tink","username":"MALodder","ts":"2020-04-07T05:17:30.807Z"}
{"msg":"For those who don't want to hand type the link here's the fix - https://github.com/google/tink/commit/d4665a4fdb55fb9f61a0e1c155516138096afb16","username":"shemnon","ts":"2020-04-07T21:49:24.977Z"}
{"msg":"They were using an parameter in a mutable context, and using the same variable as both input and output (by reference) from a method call.  Google's code reviews should have caught this as it's a fairly run of the mill no-no.  But your code reviews are only as good as the code reviewer.","username":"shemnon","ts":"2020-04-07T21:50:31.462Z"}
{"msg":"Has joined the channel.","username":"wizAmit","ts":"2020-04-09T10:15:52.485Z","type":"uj"}
{"msg":"Ursa meeting in zoom https://zoom.us/my/hyperledger.community.backup","username":"MALodder","ts":"2020-04-15T14:00:45.657Z"}
{"msg":"https://eprint.iacr.org/2020/278.pdf","username":"MALodder","ts":"2020-04-15T14:20:14.741Z"}
{"msg":"another NIZK paper https://eprint.iacr.org/2020/223.pdf","username":"MALodder","ts":"2020-04-15T14:24:40.840Z"}
{"msg":"Universal Circuits:  https://eprint.iacr.org/2016/017","username":"hartm","ts":"2020-04-15T14:29:06.024Z"}
{"msg":"https://eprint.iacr.org/2020/274.pdf","username":"MALodder","ts":"2020-04-15T14:34:58.041Z"}
{"msg":"https://eprint.iacr.org/2020/096.pdf","username":"MALodder","ts":"2020-04-15T14:52:32.249Z"}
{"msg":"https://hub.link/8LLkRtm","username":"dhuseby","ts":"2020-04-15T14:57:20.870Z"}
{"msg":"Harts broken fiber story reminded me of this classic https://www.ibiblio.org/harris/500milemail.html","username":"nage","ts":"2020-04-15T14:57:34.756Z"}
{"msg":"[ot] fun with covid and bluetooth https://arstechnica.com/information-technology/2020/04/apple-and-google-detail-bold-and-ambitious-plan-to-track-covid-19-at-scale/","username":"Dan","ts":"2020-04-16T22:02:26.774Z"}
{"msg":"Received an email back from Jan Camenischs team about deriving BBS+ generators as we are on the fly and they approved it","username":"MALodder","ts":"2020-04-18T14:35:36.852Z"}
{"msg":"For the DeterministicPublicKey","username":"MALodder","ts":"2020-04-18T14:35:53.800Z"}
{"msg":"Hi, Can anyone please explain or share some docs about Indy/Usra Threat Model?\na) What's the Threat Model for Hyperledger Indy/Usra?\nb) Where is Indy/Usra most vulnerable to attack?\nc) What are the most relevant threats?\nd) What do I need to do to safeguard against these threats?","username":"daveek","ts":"2020-04-19T12:35:55.341Z"}
{"msg":"Just saw this paper on a way to optimize the number of operations when using Montgomery ladders. Seemed pretty interesting: https://eprint.iacr.org/2020/437.pdf","username":"kdenhartog","ts":"2020-04-19T22:28:36.583Z"}
{"msg":" Thanks for your questions!  Ursa is a library, rather than a system, so there really isn't a thread model other than the definitions of the primitives themselves.  Questions b) and c) are all really a matter of opinion since we are implementing standard or published primitives.  Question d) depends on how you are using the primitives.","username":"hartm","ts":"2020-04-19T23:25:19.472Z"}
{"msg":"Thanks for response, anyone who knows about Indy?","username":"daveek","ts":"2020-04-20T11:42:53.695Z"}
{"msg":"Thanks for response, anyone with a knowledge of Indy?","username":"daveek","ts":"2020-04-20T11:42:53.695Z"}
{"msg":"Thanks for response, anyone with a knowledge of Indy Threat Model?","username":"daveek","ts":"2020-04-20T11:42:53.695Z"}
{"msg":"I would ask that question in the #indy channel","username":"MALodder","ts":"2020-04-20T13:26:26.711Z"}
{"msg":"@MALodder thanks, I'll be waiting. ","username":"daveek","ts":"2020-04-20T21:48:38.529Z"}
{"msg":"Hi Guys , When do we have Ursa's weekly calls ?","username":"SethiSaab","ts":"2020-04-22T07:13:45.748Z"}
{"msg":"please share the schedule","username":"SethiSaab","ts":"2020-04-22T07:13:50.622Z"}
{"msg":"Ursa has bi-weekly calls on Wednesday morning at 8am MDT. Our next call is on Apr 29","username":"MALodder","ts":"2020-04-22T12:09:54.501Z"}
{"msg":"Has joined the channel.","username":"Siva_Kannan","ts":"2020-04-27T14:49:45.625Z","type":"uj"}
{"msg":"@MALodder : do you have time this afternoon to teach me some things about the ursa impl of merkle trees. Some of the impl is not making sense to me, and I think it's because I've got a subtle assumption or two wrong somewhere.","username":"danielhardman","ts":"2020-04-27T16:58:33.406Z"}
{"msg":"sure","username":"MALodder","ts":"2020-04-27T16:58:50.024Z"}
{"msg":"what time","username":"MALodder","ts":"2020-04-27T16:58:51.636Z"}
{"msg":"Want to take an opportunity to recognise all the hard work of the URSA maintainers, thankyou all! We open sourced these repos today that rely on URSA's implementation of BBS to achieve ZKP capable verifiable credentials\n\nhttps://github.com/mattrglobal/node-bbs-signatures\nhttps://github.com/mattrglobal/jsonld-signatures-bbs-spec\nhttps://github.com/mattrglobal/jsonld-signatures-bbs","username":"tplooker","ts":"2020-04-28T20:44:12.815Z"}
{"msg":"I want to take an opportunity to recognise all the hard work of the URSA maintainers, thankyou all! We open sourced these repos today that rely on URSA's implementation of BBS to achieve ZKP capable verifiable credentials\n\nhttps://github.com/mattrglobal/node-bbs-signatures\nhttps://github.com/mattrglobal/jsonld-signatures-bbs-spec\nhttps://github.com/mattrglobal/jsonld-signatures-bbs","username":"tplooker","ts":"2020-04-28T20:44:12.815Z"}
{"msg":"It was a great presentation. ","username":"brentzundel","ts":"2020-04-28T21:04:13.577Z"}
{"msg":"Is there still an Ursa meeting tomorrow?","username":"brentzundel","ts":"2020-04-28T22:20:18.131Z"}
{"msg":"@MALodder :point_up: ","username":"brentzundel","ts":"2020-04-28T22:20:55.221Z"}
{"msg":"I hope so","username":"MALodder","ts":"2020-04-28T22:21:06.035Z"}
{"msg":"@hartm ^^","username":"MALodder","ts":"2020-04-28T22:21:13.298Z"}
{"msg":"Cool. I'll be there then.","username":"brentzundel","ts":"2020-04-28T22:21:20.433Z"}
{"msg":"Yes, there is always a meeting every other Wednesday!","username":"hartm","ts":"2020-04-28T23:22:52.884Z"}
{"msg":"I've pushed a meeting agenda.  Feel free to add what you like!  I don't have a ton of stuff so please add what you like.","username":"hartm","ts":"2020-04-28T23:30:05.270Z"}
{"msg":"I added stuff","username":"MALodder","ts":"2020-04-29T00:35:42.817Z"}
{"msg":"Great!","username":"hartm","ts":"2020-04-29T01:54:53.553Z"}
{"msg":"Talk to you tomorrow then.","username":"hartm","ts":"2020-04-29T01:54:57.422Z"}
{"msg":" Structure preserving CCA secure encryption and applica-tions. ","username":"MALodder","ts":"2020-04-29T14:42:04.944Z"}
{"msg":"https://www.iacr.org/archive/asiacrypt2011/70730088/70730088.pdf","username":"MALodder","ts":"2020-04-29T14:42:18.884Z"}
{"msg":"Looks like pairing-plus is significantly faster than milagro","username":"MALodder","ts":"2020-04-29T15:11:07.601Z"}
{"msg":"```\nDoing milagro bls12-381-g1-sswu-hash-to-curve-xmd-sha256 for 3s on message size 16: 104 in 3.10s. 28.952 ms/iter\nDoing milagro bls12-381-g1-sswu-hash-to-curve-xmd-sha256 for 3s on message size 64: 107 in 3.20s. 28.234 ms/iter\nDoing milagro bls12-381-g1-sswu-hash-to-curve-xmd-sha256 for 3s on message size 256: 107 in 3.10s. 28.196 ms/iter\nDoing milagro bls12-381-g1-sswu-hash-to-curve-xmd-sha256 for 3s on message size 1024: 105 in 3.20s. 28.790 ms/iter\nDoing milagro bls12-381-g1-sswu-hash-to-curve-xmd-sha256 for 3s on message size 8192: 106 in 3.10s. 28.415 ms/iter\nDoing milagro bls12-381-g1-sswu-hash-to-curve-xmd-sha256 for 3s on message size 16384: 96 in 3.30s. 31.562 ms/iter\nDoing milagro bls12-381-g1-sswu-hash-to-curve-xmd-sha256 for 3s on message size 65535: 93 in 3.00s. 32.355 ms/iter\nDoing pairing bls12-381-g1-sswu-hash-to-curve-xmd-sha256 for 3s on message size 16: 28912 in 3.00s. 0.104 ms/iter\nDoing pairing bls12-381-g1-sswu-hash-to-curve-xmd-sha256 for 3s on message size 64: 28194 in 3.00s. 0.106 ms/iter\nDoing pairing bls12-381-g1-sswu-hash-to-curve-xmd-sha256 for 3s on message size 256: 27713 in 3.00s. 0.108 ms/iter\nDoing pairing bls12-381-g1-sswu-hash-to-curve-xmd-sha256 for 3s on message size 1024: 26663 in 3.00s. 0.113 ms/iter\nDoing pairing bls12-381-g1-sswu-hash-to-curve-xmd-sha256 for 3s on message size 8192: 20693 in 3.00s. 0.145 ms/iter\nDoing pairing bls12-381-g1-sswu-hash-to-curve-xmd-sha256 for 3s on message size 16384: 15840 in 3.00s. 0.189 ms/iter\nDoing pairing bls12-381-g1-sswu-hash-to-curve-xmd-sha256 for 3s on message size 65535: 6731 in 3.00s. 0.446 ms/iter\n```","username":"MALodder","ts":"2020-04-29T15:11:11.429Z"}
{"msg":"That's quite a bit faster, yeah.","username":"hartm","ts":"2020-04-29T15:21:32.607Z"}
{"msg":"Has joined the channel.","username":"Philser 1","ts":"2020-04-30T14:39:01.036Z","type":"uj"}
{"msg":"Hello everyone,\nnot sure if this is the right channel to ask this. Correct me if I'm wrong.\n\nSo, I have been trying to get my project that depends on Ursa to compile to wasm. Is there any trick to it? Because right now I get a bunch of error messages when trying to compile. Packages like secp256k1 and clear_on_drop always give compile errors during the build. Is there a working example of a project using ursa that is being compiled to wasm, or some guide lying around? \n\nThank you.","username":"Philser 1","ts":"2020-04-30T14:45:08.755Z"}
{"msg":"I believe the command you need is `cd libursa`","username":"MALodder","ts":"2020-05-01T04:46:23.846Z"}
{"msg":"`wasm-pack build — —no-default-features —features=portable_wasm`","username":"MALodder","ts":"2020-05-01T04:47:36.651Z"}
{"msg":"There are other flags that can remove everything but secp256k1 ","username":"MALodder","ts":"2020-05-01T04:50:04.737Z"}
{"msg":"But I’ll look it tomorrow ","username":"MALodder","ts":"2020-05-01T04:50:56.307Z"}
{"msg":"Has joined the channel.","username":"madiazp","ts":"2020-05-09T23:35:17.409Z","type":"uj"}
{"msg":"Hi everyone. I have some questions , so Ursa libzmix is wasm friendly? Can I generate a bulletproof proof from an arbitrary computation like zk-snarks? say I want to prove that a public key belongs to a merkle tree and then verify a signature with it where the public key is a witness, can I compute that into a bulletproof? Is somewhere a doc/tutorial to learn how to code and generate a bulletproof? thanks!","username":"madiazp","ts":"2020-05-09T23:35:19.349Z"}
{"msg":"I meant a more detailed  doc about zkl","username":"madiazp","ts":"2020-05-09T23:36:40.407Z"}
{"msg":"Has joined the channel.","username":"alexpuig","ts":"2020-05-11T06:13:08.189Z","type":"uj"}
{"msg":"Hi everyone. Just new to Ursa, and planning to include it in a Rust project. Any step-by-step tutorial or similar on how to start working with Ursa? If not, with your help, I could write one :)","username":"alexpuig","ts":"2020-05-11T06:16:42.141Z"}
{"msg":"@MALodder ^^^","username":"swcurran","ts":"2020-05-11T13:36:29.916Z"}
{"msg":"@madiazp Ursa is wasm compatible, in theory libzmix is too but we haven't tested it yet to be. Nor are there any interfaces exposed to wasm yet. However, its not hard to do and contributions are welcome. To answer your other questions, the answer is yet you can do merkle proofs using the bulletproofs_amcl portion of the code. The documentation we have is here https://github.com/hyperledger/ursa/tree/master/libzmix/bulletproofs_amcl","username":"MALodder","ts":"2020-05-11T14:12:52.603Z"}
{"msg":"@alexpuig good question, is there a specific feature of ursa you are looking to use? That will help with determining which sections you will need to include","username":"MALodder","ts":"2020-05-11T14:13:35.695Z"}
{"msg":"Has left the channel.","username":"shemnon","ts":"2020-05-11T15:52:42.243Z","type":"ul"}
{"msg":"https://github.com/hyperledger/ursa/pull/119","username":"MALodder","ts":"2020-05-11T20:48:56.154Z"}
{"msg":"New PR","username":"MALodder","ts":"2020-05-11T20:48:59.418Z"}
{"msg":"need reviews","username":"MALodder","ts":"2020-05-11T20:49:02.953Z"}
{"msg":"Has joined the channel.","username":"spacemandev","ts":"2020-05-11T23:43:13.620Z","type":"uj"}
{"msg":"Merkle proofs. But, it would be good to have a step-by-step intro to Ursa for developers","username":"alexpuig","ts":"2020-05-12T05:57:03.594Z"}
{"msg":"Ursa call at 7am pst tomorrow ","username":"MALodder","ts":"2020-05-13T02:27:13.439Z"}
{"msg":"Hope to see you all there","username":"MALodder","ts":"2020-05-13T02:27:18.586Z"}
{"msg":"Good! So there isn't (yet?) a DSL (like zokrates or circom ) for bulletproof ursa, and if I want to code some constrains I have to do it in a rust program that calls the lib? and what is exactly is zkl then? thanks!","username":"madiazp","ts":"2020-05-13T02:47:13.883Z"}
{"msg":"Good! So there isn't (yet?) a DSL (like zokrates or circom ) for bulletproof ursa, and if I want to code some constrains I have to do it in a rust program that calls the lib? and what is exactly is zkl then? thanks!ss","username":"madiazp","ts":"2020-05-13T02:47:13.883Z"}
{"msg":"Has left the channel.","username":"spacemandev","ts":"2020-05-13T03:07:46.694Z","type":"ul"}
{"msg":"Zkl will be description language for creating ZKPs ","username":"MALodder","ts":"2020-05-13T04:57:44.802Z"}
{"msg":"zkps like in general, whatever schema? or it will be specific to bulletproof?  ","username":"madiazp","ts":"2020-05-13T05:00:46.827Z"}
{"msg":"Any kind. We’re starting with Bulletproofs but it can include snarks or starks","username":"MALodder","ts":"2020-05-13T05:01:26.273Z"}
{"msg":"awesome, is there a way to contribute?","username":"madiazp","ts":"2020-05-13T05:02:00.792Z"}
{"msg":"Yes we should discuss on Ursa call tomorrow ","username":"MALodder","ts":"2020-05-13T05:02:25.286Z"}
{"msg":"unfortunately I have to be in my works meetings :(","username":"madiazp","ts":"2020-05-13T05:03:07.992Z"}
{"msg":"but you guys  work on Jira, like all hyperledger projects","username":"madiazp","ts":"2020-05-13T05:04:05.771Z"}
{"msg":"https://eprint.iacr.org/2020/374.pdf","username":"hartm","ts":"2020-05-13T14:12:51.757Z"}
{"msg":"Diogenes paper","username":"hartm","ts":"2020-05-13T14:12:55.510Z"}
{"msg":"https://tlu.tarilabs.com/cryptography/r1cs-bulletproofs/mainreport.html","username":"MALodder","ts":"2020-05-13T14:19:20.728Z"}
{"msg":"https://eprint.iacr.org/2007/155","username":"hartm","ts":"2020-05-13T14:24:49.170Z"}
{"msg":"Groth-Sahai proofs","username":"hartm","ts":"2020-05-13T14:24:56.305Z"}
{"msg":"pallier encryption is based on groups of unknown order right","username":"MALodder","ts":"2020-05-14T15:43:48.740Z"}
{"msg":"???","username":"MALodder","ts":"2020-05-14T15:45:01.157Z"}
{"msg":"Yes, that's right.","username":"hartm","ts":"2020-05-14T15:49:40.700Z"}
{"msg":"Has joined the channel.","username":"pradeeppadmarajaiah","ts":"2020-05-15T05:51:02.404Z","type":"uj"}
{"msg":"why would pallier encryption be used threshold ECDSA then?","username":"MALodder","ts":"2020-05-15T17:54:32.625Z"}
{"msg":"I've been diving into that too","username":"MALodder","ts":"2020-05-15T17:54:41.398Z"}
{"msg":"Which paper are you referring to?","username":"hartm","ts":"2020-05-15T19:12:54.785Z"}
{"msg":"https://eprint.iacr.org/2016/013.pdf","username":"MALodder","ts":"2020-05-15T20:01:36.078Z"}
{"msg":"section 2.1","username":"MALodder","ts":"2020-05-15T20:02:29.430Z"}
{"msg":"but its through out the entire paper","username":"MALodder","ts":"2020-05-15T20:03:03.947Z"}
{"msg":"I think they use Paillier for the \"dealerless\" (i.e. no central authority) key generation.","username":"hartm","ts":"2020-05-16T00:26:17.408Z"}
{"msg":"Has joined the channel.","username":"jmbarry","ts":"2020-05-18T15:01:24.668Z","type":"uj"}
{"msg":"I seem to have a problem with creating a credential definition when compiling ursa to wasm. I can see that ursa uses glass_pumpkin (https://github.com/mikelodder7/glass_pumpkin) library instead of openssl to generate primes when enabling wasm-compatibility. This library never finishes generating prime numbers there (well, at least I stopped running it after 30 mins). Is this a known behaviour? \n\nI was able to recreate that behaviour when creating a new project depending only on glass_pumpkin. In there i run the following code which never stops executing:\n\n```\nuse glass_pumpkin::safe_prime;\n\nfn main() {\n  let size = 1024;\n  let prime = safe_prime::new(size).unwrap();\n}\n```","username":"Philser 1","ts":"2020-05-20T09:08:34.283Z"}
{"msg":"Hey, I'm not going to be available for the call next week. On the off chance a lot of other people are out for the short week (U.S. Memorial Day) I thought I'd see about sliding the meeting back a week. If not, I'll just watch the replay. \nIf we do meet 6/3 I've got some old GS slides I dust off for discussion. Maybe update them to a bullet proofs context.","username":"Dan","ts":"2020-05-20T19:42:18.154Z"}
{"msg":"Thanks for bringing this up Dan.","username":"hartm","ts":"2020-05-20T19:46:59.670Z"}
{"msg":"Does anybody else want to push this back a week?","username":"hartm","ts":"2020-05-20T19:47:07.588Z"}
{"msg":"Does anybody else NOT want to push this back a week?\n(that's a little, 'is anybody listening' test ;)  )","username":"Dan","ts":"2020-05-20T22:17:05.444Z"}
{"msg":"I am fine with whatever works.","username":"hartm","ts":"2020-05-21T01:41:20.412Z"}
{"msg":"haven't seen that behavior before but its usually due to something else","username":"MALodder","ts":"2020-05-21T04:42:40.056Z"}
{"msg":"try another method to see if those return. My bet is that its all slow in wasm","username":"MALodder","ts":"2020-05-21T04:43:37.071Z"}
{"msg":"moving it back a week works for me","username":"brentzundel","ts":"2020-05-21T16:25:09.941Z"}
{"msg":"or forward, rather","username":"brentzundel","ts":"2020-05-21T16:25:17.092Z"}
{"msg":"Either one","username":"MALodder","ts":"2020-05-21T21:09:12.262Z"}
{"msg":"Does anyone have insight about these 3 persistent warnings emitted by the ursa build?\n\n```\nwarning: use of deprecated item 'amcl_wrapper::group_elem_g1::G1Vector::inner_product_var_time_with_ref_vecs': Please use the `inner_product_var_time` function instead\n```\n\nI wouldn't mind cleaning this up, if it's easy. But am I setting myself an impossible task?","username":"danielhardman","ts":"2020-05-21T23:53:11.252Z"}
{"msg":"BTW, could someone please review and merge this minor PR? https://github.com/hyperledger/ursa/pull/122","username":"danielhardman","ts":"2020-05-22T00:20:57.580Z"}
{"msg":"^ @MALodder or @brentzundel ","username":"danielhardman","ts":"2020-05-22T00:21:19.116Z"}
{"msg":"@danielhardman I have removed these in other parts of the code so I'm better suited to eliminate these. These will disappear as I remove milagro","username":"MALodder","ts":"2020-05-22T00:22:13.399Z"}
{"msg":"Will review your PR","username":"MALodder","ts":"2020-05-22T00:22:26.974Z"}
{"msg":"Okay. Thanks. I'll let them disappear organically, then.","username":"danielhardman","ts":"2020-05-22T00:22:37.082Z"}
{"msg":"The PR isn't a code change; it's just a build env instructions change.","username":"danielhardman","ts":"2020-05-22T00:22:46.348Z"}
{"msg":"I agree they are annoying, and that's why I've been working on slowly removing it","username":"MALodder","ts":"2020-05-22T00:22:55.182Z"}
{"msg":"Has joined the channel.","username":"jmason900","ts":"2020-05-22T20:00:41.018Z","type":"uj"}
{"msg":"NIST has validated a number of crypto packages as FIPS-140.2 compliant. Golang crypto package is not.  Does anyone know if URSA is now NIST validated as FIPS compliant ?  @dhuseby ?  Thanks.","username":"jmason900","ts":"2020-05-22T20:04:40.610Z"}
{"msg":"@jmason900 you might want to double check with @MALodder but Ursa wraps some FIPS compliant crypto but the code we have written hasn't been formally evaluated to be FIPS compliant.","username":"dhuseby","ts":"2020-05-22T20:50:45.617Z"}
{"msg":"The only FIPS compliant stuff we've wrapped is OpenSSL","username":"MALodder","ts":"2020-05-22T20:51:21.170Z"}
{"msg":"perfect - thanks ! OpenSSL is FIPS compliant","username":"jmason900","ts":"2020-05-22T21:26:02.499Z"}
{"msg":"Has joined the channel.","username":"Moshe7","ts":"2020-05-23T10:08:56.473Z","type":"uj"}
{"msg":"@here Due to popular demand, we will be postponing this week's meeting until next week.  We'll go over zero knowledge techniques then.  I'll send out some materials soon, probably tomorrow.","username":"hartm","ts":"2020-05-27T01:54:16.906Z"}
{"msg":"Thanks!","username":"hartm","ts":"2020-05-27T01:54:25.839Z"}
{"msg":"Are you going to update the Hyperledger calendar?","username":"toddinpal","ts":"2020-05-28T19:25:01.503Z"}
{"msg":"FYI, OpenSSL is FIPS PUB 140 compliant if the FIPS source is used--it does not apply to other releases","username":"danintel","ts":"2020-05-29T16:22:47.010Z"}
{"msg":"FYI, OpenSSL is FIPS PUB 140 compliant if the FIPS source is used--it does not apply to other releases. See https://www.openssl.org/source/","username":"danintel","ts":"2020-05-29T16:22:47.010Z"}
{"msg":"First draft of RFC is here @MALodder @brentzundel  https://github.com/andrewwhitehead/ursa-rfcs/tree/non-rev-tree/text/0000-revocation-range-tree","username":"andrew.whitehead","ts":"2020-05-29T23:30:23.893Z"}
{"msg":"ZPK x20 faster, can help to ursa?\n\nhttps://mobile.twitter.com/StarkWareLtd/status/1264911004099543040","username":"Moshe7","ts":"2020-05-30T21:07:58.502Z"}
{"msg":"one week or one session.. i.e. are we meeting this week or next week (june 3 or 10)?","username":"Dan","ts":"2020-06-01T14:56:03.716Z"}
{"msg":"I was planning on this week.  I hope that's how others interpreted it....","username":"hartm","ts":"2020-06-01T16:06:44.573Z"}
{"msg":"I've also added a poseidon hash test to the brangetree library (brt-phash example)","username":"andrew.whitehead","ts":"2020-06-01T16:14:25.384Z"}
{"msg":"Yep. Just double checking. ","username":"Dan","ts":"2020-06-01T16:31:27.000Z"}
{"msg":"I've tried creating a calendar event but it's taking a while to propogate...","username":"hartm","ts":"2020-06-02T02:14:01.931Z"}
{"msg":"nice, thanks for doing that","username":"MALodder","ts":"2020-06-02T14:40:41.719Z"}
{"msg":"@rjones @dhuseby I tried to create a one-time event for tomorrow morning on the calendar and it doesn't seem to be going through.   Any suggestions?  Thanks for your time, and sorry for the trouble.","username":"hartm","ts":"2020-06-02T22:00:07.773Z"}
{"msg":"Has joined the channel.","username":"rjones","ts":"2020-06-02T22:00:07.842Z","type":"uj"}
{"msg":"is it on the groups.io interface? the google calendar only syncs up once a day or so","username":"rjones","ts":"2020-06-02T22:19:01.912Z"}
{"msg":"@hartm I see it on g.io, it will take time to get to Google. If you want I can mail the event to the list","username":"rjones","ts":"2020-06-02T22:19:49.242Z"}
{"msg":"Oh, I see you did send it to the list. https://lists.hyperledger.org/g/ursa/message/223","username":"rjones","ts":"2020-06-02T22:20:30.351Z"}
{"msg":"@here Let's use https://zoom.us/my/hyperledger.community for the meeting.","username":"hartm","ts":"2020-06-03T13:52:32.060Z"}
{"msg":"It seems to be unbooked.","username":"hartm","ts":"2020-06-03T13:52:35.765Z"}
{"msg":"original document that was the basis of the rfc we are going to look at next time: https://hackmd.io/U75EBm_0QriauVUY_CIayQ","username":"brentzundel","ts":"2020-06-03T14:24:13.409Z"}
{"msg":"Hey is the call now? I have 4pm BST in my calendar","username":"wip-abramson","ts":"2020-06-03T14:34:50.120Z"}
{"msg":"sorry just saw your msg now @wip-abramson we just wrapped the call.","username":"Dan","ts":"2020-06-03T15:04:16.013Z"}
{"msg":"No worries, I have updated my calendar. Not sure why I was off","username":"wip-abramson","ts":"2020-06-03T15:10:38.368Z"}
{"msg":"I don't suppose the calls are recorded","username":"wip-abramson","ts":"2020-06-03T15:11:16.610Z"}
{"msg":"Has joined the channel.","username":"jonnycrunch","ts":"2020-06-05T18:32:47.039Z","type":"uj"}
{"msg":"No they’re not","username":"MALodder","ts":"2020-06-06T04:15:47.921Z"}
{"msg":"Has joined the channel.","username":"c3226075131","ts":"2020-06-07T13:58:10.539Z","type":"uj"}
{"msg":"Ohh this is nice, I wonder if its practical, https://eprint.iacr.org/2002/657","username":"MALodder","ts":"2020-06-08T15:36:11.807Z"}
{"msg":"Ohh this is nice, I wonder if its practical, https://eprint.iacr.org/2020/657","username":"MALodder","ts":"2020-06-08T15:36:11.807Z"}
{"msg":"Not necessarily interested in the traceable part, but the aggregation is sweet since the proofs can be collapsed from K issuers to a signature signature","username":"MALodder","ts":"2020-06-08T15:37:30.429Z"}
{"msg":"Not necessarily interested in the traceable part, but the aggregation is sweet since the proofs can be collapsed from K issuers to a single signature","username":"MALodder","ts":"2020-06-08T15:37:30.429Z"}
{"msg":"Also for those interested https://github.com/mattrglobal/bbs-signatures is a wasm build for the BBS+ signatures","username":"MALodder","ts":"2020-06-08T15:39:36.350Z"}
{"msg":"And the nodejs version https://github.com/mattrglobal/node-bbs-signatures","username":"MALodder","ts":"2020-06-08T15:39:56.053Z"}
{"msg":"Joint effort between me and MattrGlobal","username":"MALodder","ts":"2020-06-08T15:40:10.870Z"}
{"msg":"@MALodder [thoughts?](https://github.com/hyperledger/indy-crypto/pull/168)","username":"rjones","ts":"2020-06-08T15:41:21.430Z"}
{"msg":"Hey @MALodder -- any progress on the non-revocation range tree proofs?","username":"swcurran","ts":"2020-06-08T16:41:12.860Z"}
{"msg":"yes we discussed it and the cryptographers need more information about @andrew.whitehead's idea","username":"MALodder","ts":"2020-06-08T16:42:19.703Z"}
{"msg":"there were concerns about privacy leaks when the tree is updated","username":"MALodder","ts":"2020-06-08T16:42:32.649Z"}
{"msg":"because the tree shape is constantly changing","username":"MALodder","ts":"2020-06-08T16:44:11.892Z"}
{"msg":"Been thinking about that. Is that because of the bit updates being visible to all?","username":"swcurran","ts":"2020-06-08T16:44:19.903Z"}
{"msg":"no its like path 1 was valid before but is not now but you proved in path 2. Assuming paths are zero-knowledge it shouldn't be a problem but we just want to check it","username":"MALodder","ts":"2020-06-08T16:48:38.887Z"}
{"msg":"Where is the conversation happening?  Just want to be sure that Andrew's aware.","username":"swcurran","ts":"2020-06-08T16:49:22.078Z"}
{"msg":"here and the meeting","username":"MALodder","ts":"2020-06-08T16:49:39.950Z"}
{"msg":"k","username":"swcurran","ts":"2020-06-08T16:49:57.937Z"}
{"msg":"We can talk about it at the meeting on Wednesday, if people are interested.","username":"hartm","ts":"2020-06-08T16:59:22.854Z"}
{"msg":"Can I get some reviewers on https://github.com/hyperledger/ursa/pull/123","username":"MALodder","ts":"2020-06-08T23:13:34.052Z"}
{"msg":"I need that merged so it can unblock 124","username":"MALodder","ts":"2020-06-08T23:13:48.508Z"}
{"msg":"@MALodder is there anything in there you'd particularly like me to look at?  I'm guessing this is a PR for the more practical people, though.","username":"hartm","ts":"2020-06-09T01:03:05.504Z"}
{"msg":"It’s more practical. It just adds wasm to BBS","username":"MALodder","ts":"2020-06-09T01:11:42.947Z"}
{"msg":"\"just\" ^^^   :-)","username":"swcurran","ts":"2020-06-09T03:21:38.883Z"}
{"msg":"Has joined the channel.","username":"LuisOcegueda","ts":"2020-06-09T14:31:53.282Z","type":"uj"}
{"msg":"@hartm are we planning to use the same room as last time or the community.backup?","username":"MALodder","ts":"2020-06-10T13:19:32.238Z"}
{"msg":"Let's use the one that's in the calendar!","username":"hartm","ts":"2020-06-10T13:41:49.455Z"}
{"msg":"We should also go over this paper:  https://eprint.iacr.org/2016/663.pdf.  Manu (correctly) pointed out that the paper I send out on EPID has some flaws.","username":"hartm","ts":"2020-06-10T13:45:41.055Z"}
{"msg":"here's another paper I'd like to go over https://eprint.iacr.org/2018/1188.pdf","username":"MALodder","ts":"2020-06-10T13:59:20.433Z"}
{"msg":"since the main topic I'm wanting from EPID is revocation","username":"MALodder","ts":"2020-06-10T13:59:43.793Z"}
{"msg":"https://wiki.hyperledger.org/x/kw7cAQ","username":"Dan","ts":"2020-06-10T14:52:03.592Z"}
{"msg":"Hyperledger D&I Talk in ~ 2 hrs ^","username":"Dan","ts":"2020-06-10T14:53:34.277Z"}
{"msg":"https://github.com/mikelodder7/accumulator-rs","username":"MALodder","ts":"2020-06-10T14:59:55.913Z"}
{"msg":"https://www.vice.com/en_us/article/v7gd9b/facebook-helped-fbi-hack-child-predator-buster-hernandez","username":"MALodder","ts":"2020-06-10T20:50:34.672Z"}
{"msg":"This is both cool and frightening ","username":"MALodder","ts":"2020-06-10T20:50:45.548Z"}
{"msg":"Goes to show that even with a high amount of anonymity, enough resources can still unmask you","username":"MALodder","ts":"2020-06-10T20:51:27.404Z"}
{"msg":"true enough.. a good way to think of any security property.. all about resources to be captured vs expended.","username":"Dan","ts":"2020-06-11T14:13:59.446Z"}
{"msg":"Has joined the channel.","username":"S3bb1","ts":"2020-06-12T11:48:05.382Z","type":"uj"}
{"msg":"Hi, were currently using ursa with CL ... one question is, when i create a Schema with 3 fields .... then creating a definition out of this and issue a credential with only 2 fields ... afterwards creating a proof request of 1 field ... the created proof cannot be verified and always returns revoked. When i instead issue a credential with all 3 fields the proof works","username":"S3bb1","ts":"2020-06-12T13:27:23.175Z"}
{"msg":"AFAIK you can't issue a credential with less attributes than defined in the credential definition. You have to provide at least an empty string.","username":"domwoe","ts":"2020-06-12T13:35:43.584Z"}
{"msg":"thx! :)","username":"S3bb1","ts":"2020-06-12T13:40:04.761Z"}
{"msg":"can't issue with less or more, indy will throw invalid structure error","username":"tomislav","ts":"2020-06-15T18:43:09.786Z"}
{"msg":"As discussed on the last ursa call, I have written a project organization proposal https://github.com/hyperledger/ursa-rfcs/pull/26/files?short_path=dc0e8c0#diff-dc0e8c0571512902d7473706879a71ff","username":"MALodder","ts":"2020-06-16T15:20:36.363Z"}
{"msg":"Please add comments","username":"MALodder","ts":"2020-06-16T15:20:45.014Z"}
{"msg":"I hope you can all review it and comment before the next meeting.\n\nLooking forward to hearing from you.","username":"MALodder","ts":"2020-06-16T15:23:12.972Z"}
{"msg":"https://eprint.iacr.org/2020/724.pdf relevant to our discussions around revocation ","username":"MALodder","ts":"2020-06-18T15:41:23.804Z"}
{"msg":"Can I get some lovin with https://github.com/hyperledger/ursa/pull/123","username":"MALodder","ts":"2020-06-19T17:44:55.646Z"}
{"msg":"I'm trying to do a `cargo run` on Windows for an app built using indy-vdr, which in turn uses Ursa.  After a few bumps, I have it to the point of compiling Ursa, whenre where  I'm getting 493 Unresolved External errors on the linking process.  Presumably, when it is compiling the source, it is not including external symbols.\n\nExample: ` libopenssl_sys-93af6d3e2a3e76ab.rlib(openssl_sys-93af6d3e2a3e76ab.openssl_sys.dpmbxioq-cgu.9.rcgu.o) : error LNK2019: unresolved external symbol _SSL_CTX_callback_ctrl referenced in function __ZN11openssl_sys4tls138SSL_CTX_set_tlsext_servername_callback17h954b337050a52513E`\n\nAnyone ever run this on Windows?  Any ideas for how to deal with this?\n\nFailing step: `Compiling ursa v0.3.4 (https://github.com/hyperledger/ursa?rev=5444d41707c05399e191c2290d2767658d14fbc4#5444d417)`","username":"swcurran","ts":"2020-06-21T13:39:48.608Z"}
{"msg":"I have the OPENSSL_DIR set and that seems to be working.","username":"swcurran","ts":"2020-06-21T13:40:44.382Z"}
{"msg":"Works fine on a Mac; googling is not giving me much.","username":"swcurran","ts":"2020-06-21T13:41:18.066Z"}
{"msg":"so the question is: how to build Ursa for Windows?","username":"rjones","ts":"2020-06-21T17:29:37.902Z"}
{"msg":"are you using WSL2?","username":"rjones","ts":"2020-06-21T17:29:53.618Z"}
{"msg":"@swcurran do you have a test app I could compile? I see that the compilation works on AppVeyor","username":"rjones","ts":"2020-06-21T17:48:33.154Z"}
{"msg":"So for this issue, @andrew.whitehead changed the app build script, I think to download vs. build ursa.  So that solved the issue.\n**\nThat said, I did try building ursa itself, following the prereq instructions here: https://github.com/hyperledger/ursa/blob/master/docs/build-environment.md#windows-10\n\nIt went pretty well, until I hit a compile error here on compiling Ursa itself:\n\n```\n   Compiling ursa v0.3.4 (C:\\Users\\swcur\\repos\\ursa\\libursa)\nerror[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n  --> libursa\\src\\ffi\\mod.rs:59:18\n   |\n59 |         unsafe { std::mem::transmute(self) }\n   |                  ^^^^^^^^^^^^^^^^^^^\n   |\n   = note: source type: `ffi::ByteArray` (64 bits)\n   = note: target type: `ffi_support::ByteBuffer` (128 bits)\n\nwarning: 3 warnings emitted\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0512`.\nerror: could not compile `ursa`.\n\nTo learn more, run the command again with --verbose.\nwarning: build failed, waiting for other jobs to finish...\nerror: build failed\n```","username":"swcurran","ts":"2020-06-21T18:26:08.858Z"}
{"msg":"For the original issue - the repo I was using is: https://github.com/andrewwhitehead/endorser-tool","username":"swcurran","ts":"2020-06-21T18:27:05.558Z"}
{"msg":"OK; I was building with WSL2","username":"rjones","ts":"2020-06-21T18:27:11.318Z"}
{"msg":"I'm on plain Jane Windows 10","username":"swcurran","ts":"2020-06-21T18:27:22.364Z"}
{"msg":"Actually I'm just building with `cl` instead of `cl_native` so there's no openssl dependency, it only needs the data types anyway","username":"andrew.whitehead","ts":"2020-06-21T18:27:25.720Z"}
{"msg":"Ah...so slower but that's not a big issue for this app.","username":"swcurran","ts":"2020-06-21T18:28:00.911Z"}
{"msg":"should Ursa be publishing to AppVeyor or similar?","username":"rjones","ts":"2020-06-21T18:28:36.847Z"}
{"msg":"@swcurran your issue makes me wonder if the W10 vs WSL2 implementations of the Rust libstd has different type sizes for standard types.","username":"dhuseby","ts":"2020-06-22T16:00:48.519Z"}
{"msg":"like usize might be different","username":"dhuseby","ts":"2020-06-22T16:01:00.961Z"}
{"msg":"I know on Linux it is an alias for u64 but on Win10 it *might* be a u128 :man_shrugging_light_skin_tone:","username":"dhuseby","ts":"2020-06-22T16:01:37.319Z"}
{"msg":"oh duh","username":"dhuseby","ts":"2020-06-22T16:02:04.311Z"}
{"msg":"= note: source type: `ffi::ByteArray` (64 bits)\n   = note: target type: `ffi_support::ByteBuffer` (128 bits)","username":"dhuseby","ts":"2020-06-22T16:02:05.614Z"}
{"msg":"says in the error. thankyouverymuch awesome rustc errors","username":"dhuseby","ts":"2020-06-22T16:02:18.418Z"}
{"msg":"my guess is ByteArray is a naked pointer and ByteBuffer is pointer + length of buffer","username":"dhuseby","ts":"2020-06-22T16:03:06.802Z"}
{"msg":"ByteBuffer source says '`i64` is used for the length instead of `u64` and `usize` because JNA has interop issues with both these types'","username":"andrew.whitehead","ts":"2020-06-22T16:11:36.259Z"}
{"msg":"ursa does build in AppVeyor and tests cl as long as openssl is already installed","username":"MALodder","ts":"2020-06-22T18:07:51.680Z"}
{"msg":"@dhuseby @swcurran my PR fixes those already https://github.com/hyperledger/ursa/pull/123","username":"MALodder","ts":"2020-06-22T18:08:43.216Z"}
{"msg":"@dhuseby can you review my PR?","username":"MALodder","ts":"2020-06-22T18:09:13.778Z"}
{"msg":"this needs to get merged soon, its blocking three other PRs","username":"MALodder","ts":"2020-06-22T18:09:29.880Z"}
{"msg":"and people are starting to hit this problem everywhere","username":"MALodder","ts":"2020-06-22T18:09:41.437Z"}
{"msg":"@brentzundel @cam-parra","username":"MALodder","ts":"2020-06-22T18:09:59.773Z"}
{"msg":"^^^^","username":"MALodder","ts":"2020-06-22T18:10:01.414Z"}
{"msg":"ByteArray is solely used for receiving pointers and a length, ByteBuffer is for returning them","username":"MALodder","ts":"2020-06-22T18:12:23.609Z"}
{"msg":"It looks like it's approved by one - do you want me to set the review requirement for ursa to one review required for mergin?","username":"rjones","ts":"2020-06-22T19:07:57.604Z"}
{"msg":"It looks like it's approved by one - do you want me to set the review requirement for ursa to one review required for merging?","username":"rjones","ts":"2020-06-22T19:07:57.604Z"}
{"msg":"Let’s leave it at two for now","username":"MALodder","ts":"2020-06-22T20:54:49.172Z"}
{"msg":"I got the one blocker merged","username":"MALodder","ts":"2020-06-22T20:54:57.402Z"}
{"msg":"I think two is good, even if it does slow things down sometimes.","username":"brentzundel","ts":"2020-06-22T21:13:15.212Z"}
{"msg":"I rebased https://github.com/hyperledger/ursa/pull/125","username":"rjones","ts":"2020-06-22T21:59:35.812Z"}
{"msg":"@dhuseby @brentzundel @cam-parra can we get another reviewer on https://github.com/hyperledger/ursa/pull/104. This has been a standing PR for a while and we appreciate the effort he went through to maintain it until it finally could be merged","username":"MALodder","ts":"2020-06-23T13:38:17.326Z"}
{"msg":"Has joined the channel.","username":"seriousmountain","ts":"2020-06-23T13:53:02.925Z","type":"uj"}
{"msg":"How are tasks/tickets/issues tracked for ursa?\nIs there a Jira instance we can use, should we use github issues?","username":"brentzundel","ts":"2020-06-23T15:21:08.898Z"}
{"msg":"+1 for github issues.","username":"swcurran","ts":"2020-06-23T16:59:08.406Z"}
{"msg":"if you want github issues, it's easy to turn on.","username":"rjones","ts":"2020-06-23T17:06:17.167Z"}
{"msg":"@swcurran change [this line of code](https://github.com/hyperledger/ursa/blob/7e8ba24c7c907e3144a9192e963df7fa2346d8ef/.github/settings.yml#L11) and merge it","username":"rjones","ts":"2020-06-23T17:07:00.314Z"}
{"msg":"Is there a release version planned? I have a few things building from git right now","username":"andrew.whitehead","ts":"2020-06-23T17:52:13.672Z"}
{"msg":"Is there a release version planned? I have a few things building from git right now that can't be published as crates","username":"andrew.whitehead","ts":"2020-06-23T17:52:13.672Z"}
{"msg":"Has joined the channel.","username":"eduelias","ts":"2020-06-24T13:00:34.858Z","type":"uj"}
{"msg":"Hi, does anyone have a working example of using WASM + NodeJS without weird \"import\" errors?","username":"eduelias","ts":"2020-06-24T13:49:58.643Z"}
{"msg":"What are weird “import” errors","username":"MALodder","ts":"2020-06-24T14:22:00.859Z"}
{"msg":"https://chris.beams.io/posts/git-commit/","username":"Dan","ts":"2020-06-24T14:47:16.906Z"}
{"msg":"@eduelias its hard to help at the general level, can you be more specific","username":"MALodder","ts":"2020-06-24T15:05:49.615Z"}
{"msg":"@MALodder I'm trying to call the module inside the pkg folder, generated by building libursa using wasm-pack. But when I try to use it on Nodejs I get a lot of import issues (because it's clear that this pkg is not for nodejs) and, when I try to import it on my Front-end project, it has some loading issues with CORS and other stuff so, what I need, is an example on how you guys are using it to start. My final goal is to extract the CL signature and generate CLAIM_DEF transactions using a browser.","username":"eduelias","ts":"2020-06-24T15:46:23.424Z"}
{"msg":"I have done this in the past, I'll see if I can find where and how I did that","username":"MALodder","ts":"2020-06-24T15:47:01.041Z"}
{"msg":"I am not that familiar with WASM, but quite experienced with nodejs/javascript.","username":"eduelias","ts":"2020-06-24T15:47:17.837Z"}
{"msg":"if you just want nodejs, this project might help","username":"MALodder","ts":"2020-06-24T17:32:47.458Z"}
{"msg":"https://github.com/mattrglobal/node-bbs-signatures/","username":"MALodder","ts":"2020-06-24T17:33:04.894Z"}
{"msg":"I think someone gave a presentation on sha3 last year? I recall seeing slides that explained the sponge construction better than what I'd seen elsewhere (or it could have been the presenter just describing it better). Do we have that retained somewhere? Possibly it was one of the chaps from Dfinity. Anyone know what I'm talking about?","username":"Dan","ts":"2020-06-25T16:24:54.745Z"}
{"msg":"I don't remember this, but it's entirely possible that it happened.","username":"hartm","ts":"2020-06-25T18:07:09.732Z"}
{"msg":"It was the same meeting where you agreed you owed me that money.","username":"Dan","ts":"2020-06-25T18:08:08.485Z"}
{"msg":"Actually, maybe it was a presentation on the new hash algorithm (we adopted? planned to adopt?) and that algorithm might have also used the sponge construction. I'm just filled with useful details here.","username":"Dan","ts":"2020-06-25T18:09:52.581Z"}
{"msg":"I thought you both owed me like 200 BTC? Wallet address forthcoming, thanks.","username":"rjones","ts":"2020-06-25T18:21:13.682Z"}
{"msg":"I don't think i even own 20 british tea crumpets.","username":"Dan","ts":"2020-06-25T18:22:59.331Z"}
{"msg":"slacker.","username":"rjones","ts":"2020-06-25T18:23:28.517Z"}
{"msg":"It could have been on the Poseidon hash function, and it would make sense that Dmitry gave that talk.  So you're information is consistent!","username":"hartm","ts":"2020-06-25T19:52:04.603Z"}
{"msg":"Why are you interested in sponge hash constructions?","username":"hartm","ts":"2020-06-25T19:52:14.668Z"}
{"msg":"Because the other constructions seem so dry.","username":"Dan","ts":"2020-06-25T21:16:55.098Z"}
{"msg":"<drum riff>","username":"Dan","ts":"2020-06-25T21:17:07.017Z"}
{"msg":"_reaches for the `rename Dan` buttong_","username":"rjones","ts":"2020-06-25T21:17:22.376Z"}
{"msg":"_reaches for the `rename Dan` button`**","username":"rjones","ts":"2020-06-25T21:17:22.376Z"}
{"msg":"Hi, is there a gadget of digital signatures for bulletproofs?","username":"madiazp","ts":"2020-06-26T07:15:36.126Z"}
{"msg":"Like verifying a signature with Bulletproofs?","username":"MALodder","ts":"2020-06-29T04:48:21.358Z"}
{"msg":"Hi all, when will the next version of libursa released on crates.io? Because when looking at crates.io the last released version is 0.3.2 but when looking at the cargo.toml in libursa it points to 0.3.4","username":"S3bb1","ts":"2020-06-30T12:19:15.226Z"}
{"msg":"yeah, something like proof he knowledge of a digital signature and it corresponding public key such that the hash of the public key belongs to a certain list or something like that, both pk and signature are witness.","username":"madiazp","ts":"2020-07-01T01:45:31.023Z"}
{"msg":"the part of hash and list are covered with posseidon and membership of a list gadgets, but there is no schema to verify a digital siganture","username":"madiazp","ts":"2020-07-01T01:47:16.119Z"}
{"msg":"that's not implemented yet, and the only thing I'm aware of is JubJub from ZCash","username":"MALodder","ts":"2020-07-01T01:48:00.116Z"}
{"msg":"If you want proof of knowledge of a signature, we have BBS+ or PS signatures that can do that without gadgets","username":"MALodder","ts":"2020-07-01T01:48:26.270Z"}
{"msg":"so, is the jubjub (or babyjubjub ) curve bulletproof friendly? like the same way they are to zk snark? I'm truly interested in a implementation of the eddsa  protocol based on jubjub for bulletproof.","username":"madiazp","ts":"2020-07-01T01:56:24.559Z"}
{"msg":"That's how zcash works. Its a SNARK that does two checks, is the UTXO in the set of spendable txns and is the signature valid","username":"MALodder","ts":"2020-07-01T01:57:25.687Z"}
{"msg":"@brentzundel has studied it more than I have","username":"MALodder","ts":"2020-07-01T01:57:43.206Z"}
{"msg":"yeah, that's why I'm interested, I've a rust implementation (need a lot of test and validations) of the eddsa protocol over the babyjubjub curve based on the work of ethsnark people https://github.com/HarryR/ethsnarks/blob/master/ethsnarks/eddsa.py. If the curve and its arithmetics operations are friendly to bulletproofs (the (scalar,Point) product  ) I will more than happy to *try* to impement the verification of a signature for bulletproof. The thing is that I don't want to try to implement it and in the end come out with a proof that took like 10 minutes to be produced or verified. because eddsa is really heavy in terms of arithmetic gates. So the question is: It is heavy for bulletproof do elliptic curve arithmetic?","username":"madiazp","ts":"2020-07-01T03:24:46.335Z"}
{"msg":"Yes it is ","username":"MALodder","ts":"2020-07-01T03:32:30.016Z"}
{"msg":"nice! thanks, I'll try to do my best","username":"madiazp","ts":"2020-07-01T03:32:59.273Z"}
{"msg":"What’s the use case? Do you have to apply it? Curve25519 is friendly young bulletproofs","username":"MALodder","ts":"2020-07-01T03:33:50.591Z"}
{"msg":"Ursa has implemented Bulletproofs over BLS12-381","username":"MALodder","ts":"2020-07-01T03:34:08.871Z"}
{"msg":"Yeah but I don't only need a signature proof, I need to proof that someone has a valid pubkey and valid signature of public message (both wotness), proof that the hash of say public key belongs to a merkle tree by match a public merkle root with the array of path (all the path are witness), and proof that the hash of that signatures is a valid nullifier (in order to \"burn\" the credential once the proof is published)","username":"madiazp","ts":"2020-07-01T03:40:57.792Z"}
{"msg":"Yeah but I don't only need a signature proof, I need to proof that someone has a valid pubkey and valid signature of public message (both witness), proof that the hash of say public key belongs to a merkle tree by match a public merkle root with the array of path (all the path are witness), and proof that the hash of that signatures is a valid nullifier (in order to \"burn\" the credential once the proof is published)","username":"madiazp","ts":"2020-07-01T03:40:57.792Z"}
{"msg":"Yeah but I don't only need a signature proof, I need to proof that someone has a valid pubkey and valid signature of public message (both witness), proof that the hash of say public key belongs to a merkle tree by re-building a public merkle root with the array of path (all the path are witness), and proof that the hash of that signatures is a valid nullifier (in order to \"burn\" the credential once the proof is published)","username":"madiazp","ts":"2020-07-01T03:40:57.792Z"}
{"msg":"Yeah but I don't only need a signature proof, I need to prove that someone has a valid pubkey and valid signature of public message (both witness), proof that the hash of say public key belongs to a merkle tree by re-building a public merkle root with the array of path (all the path are witness), and proof that the hash of that signatures is a valid nullifier (in order to \"burn\" the credential once the proof is published)","username":"madiazp","ts":"2020-07-01T03:40:57.792Z"}
{"msg":"Yeah but I don't only need a signature proof, I need to prove that someone has a valid pubkey and valid signature of public message (both witness), prove that the hash of say public key belongs to a merkle tree by re-building a public merkle root with the array of path (all the path are witness), and prove that the hash of that signatures is a valid nullifier (in order to \"burn\" the credential once the proof is published)","username":"madiazp","ts":"2020-07-01T03:40:57.792Z"}
{"msg":"So I have to combine all those constrains in a single proof, that's why I can't use only a signature proof","username":"madiazp","ts":"2020-07-01T03:46:20.039Z"}
{"msg":"So of all curves which would you say is the most efficient(ish) in bulletproofs?","username":"madiazp","ts":"2020-07-01T03:52:46.593Z"}
{"msg":"Curve25519 for now but zcash just came up with two new curves tweedledum and tweedledee","username":"MALodder","ts":"2020-07-01T04:01:30.855Z"}
{"msg":"ok! will check them out","username":"madiazp","ts":"2020-07-01T04:02:12.711Z"}
{"msg":"thanks","username":"madiazp","ts":"2020-07-01T04:03:41.257Z"}
{"msg":"@S3bb1 when I look here, I don't see releases for 0.3.3 or 0.3.4: https://github.com/hyperledger/ursa/releases","username":"rjones","ts":"2020-07-01T05:50:09.200Z"}
{"msg":"@rjones  jup, but in the cargo.toml the version is stated to 0.3.4 https://github.com/hyperledger/ursa/blob/master/libursa/Cargo.toml#L3","username":"S3bb1","ts":"2020-07-01T05:53:19.984Z"}
{"msg":"@rjones are you talking about binaries?","username":"MALodder","ts":"2020-07-01T14:05:21.240Z"}
{"msg":"ursa releases to crates.io","username":"MALodder","ts":"2020-07-01T14:05:51.046Z"}
{"msg":"in case your interested https://www.rand.orgg/pubs/research_reports/RR4418.html","username":"MALodder","ts":"2020-07-01T14:24:45.011Z"}
{"msg":"in case your interested https://www.rand.org/pubs/research_reports/RR4418.html","username":"MALodder","ts":"2020-07-01T14:24:45.011Z"}
{"msg":"@MALodder right - @S3bb1 is saying there are versions that are not published to crates.io; I'm saying they don't exist, or weren't released.","username":"rjones","ts":"2020-07-01T16:13:06.284Z"}
{"msg":"Has joined the channel.","username":"AnneGoellnitz","ts":"2020-07-02T08:33:38.152Z","type":"uj"}
{"msg":"Correct we want to release 0.3.4 but I need one more approval for the PR then we’ll be good","username":"MALodder","ts":"2020-07-03T15:07:05.152Z"}
{"msg":"Has joined the channel.","username":"assit","ts":"2020-07-04T04:51:00.468Z","type":"uj"}
{"msg":"Hello! I hope that you are all doing well during these unprecedented times. My name is Tareq Assi and I am a finance student at McMaster University. I am self-taught in various programming languages and hardware development tools. With the need to learn more about blockchain technology, I want to contribute to the URSA project. As I am relatively new to blockchain technology, I find that the best way to learn new topics is by diving in and doing as much work as possible. If there is anything I can do to help you all with strategy management and project management, please let me know. I want to contribute as much as possible. May it be project management or brief blockchain research, I want to help.\n\nLinkedin: https://www.linkedin.com/in/tareq-assi","username":"assit","ts":"2020-07-04T18:38:20.807Z"}
{"msg":"Thx  for the information! Do you have a rough ETA on this release?","username":"S3bb1","ts":"2020-07-06T08:50:02.352Z"}
{"msg":"Has joined the channel.","username":"airskipper","ts":"2020-07-06T12:48:16.692Z","type":"uj"}
{"msg":"@MALodder I gather you got the PR approval you were looking for (regarding v0.3.4)? I don't see any open PRs.","username":"Dan","ts":"2020-07-07T14:43:01.787Z"}
{"msg":"Yes. I’ll get to it when my internet is better","username":"MALodder","ts":"2020-07-07T15:02:53.603Z"}
{"msg":"Just pour some draino into the intertubes.","username":"Dan","ts":"2020-07-07T15:05:07.439Z"}
{"msg":"done","username":"MALodder","ts":"2020-07-07T16:30:48.703Z"}
{"msg":"v0.3.4 is release","username":"MALodder","ts":"2020-07-07T16:30:55.600Z"}
{"msg":"v0.3.4 is released","username":"MALodder","ts":"2020-07-07T16:30:55.600Z"}
{"msg":"bbs v0.4.1 is released","username":"MALodder","ts":"2020-07-07T16:34:51.223Z"}
{"msg":"@Dan  thanks for the release, we're using ursa with wasm, but the whole wasm folder is missing in the 0.3.4 release","username":"S3bb1","ts":"2020-07-08T14:15:09.501Z"}
{"msg":"Crypto problems most likely have to fall in NP intersect coNP, which is even a much stronger restriction than being in NP.","username":"hartm","ts":"2020-07-08T14:17:33.136Z"}
{"msg":"https://theory.cs.princeton.edu/complexity/","username":"hartm","ts":"2020-07-08T14:35:39.389Z"}
{"msg":"(The above is a good primer on complexity, including circuit SAT).","username":"hartm","ts":"2020-07-08T14:36:14.483Z"}
{"msg":"Here's the notes of today's sharing, if anyone is interested: https://drive.google.com/file/d/1CK7FREfY9ly0ySiHgkQFVQqy6BpvTPJa/view?usp=sharing\nIt's more of a hodgepodge of my exploration rather really only on GS proof. \nBig thanks all who joined the call. I feel slightly contrite that I didn't present in a more fluent and didn't articulate many concepts very clearly and drag some of you for too long (haha). I shall be better next time (if there is one) and trial run myself before. \nIn any case, feel free to ping me for further clarification or follow up questions. thanks :blush:","username":"alexx","ts":"2020-07-08T15:41:21.682Z"}
{"msg":"Here's the notes of today's sharing, if anyone is interested: https://drive.google.com/file/d/1CK7FREfY9ly0ySiHgkQFVQqy6BpvTPJa/view?usp=sharing\nIt's more of a hodgepodge of my exploration rather really only on GS proof. \nBig thanks all who joined the call. I feel slightly contrite that I didn't present in a more fluent way and didn't articulate many concepts very clearly and drag some of you for too long (haha). I shall be better next time (if there is one) and trial run myself before. \nIn any case, feel free to ping me for further clarification or follow up questions. thanks :blush:","username":"alexx","ts":"2020-07-08T15:41:21.682Z"}
{"msg":"Here's the notes of today's sharing, if anyone is interested: https://drive.google.com/file/d/1CK7FREfY9ly0ySiHgkQFVQqy6BpvTPJa/view?usp=sharing\nIt's more of a hodgepodge of my exploration rather really only on GS proof. \nBig thanks all who joined the call. I feel slightly contrite that I didn't present more fluently and didn't articulate many concepts very clearly and drag some of you for too long (haha). I shall be better next time (if there is one) and trial run myself before. \nIn any case, feel free to ping me for further clarification or follow up questions. thanks :blush:","username":"alexx","ts":"2020-07-08T15:41:21.682Z"}
{"msg":"Here's the notes of today's sharing, if anyone is interested: https://drive.google.com/file/d/1CK7FREfY9ly0ySiHgkQFVQqy6BpvTPJa/view?usp=sharing\nIt's more of a hodgepodge of my exploration rather really only on GS proof. \nBig thanks all who joined the call. I feel slightly contrite that I didn't present more fluently and didn't articulate many concepts very clearly and drag some of you for too long (haha). I shall be better next time (if there is one) and trial run myself beforehand. \nIn any case, feel free to ping me for further clarification or follow up questions. thanks :blush:","username":"alexx","ts":"2020-07-08T15:41:21.682Z"}
{"msg":"Thanks for the talk Alex!","username":"hartm","ts":"2020-07-08T16:33:53.708Z"}
{"msg":"we didn't delete the folder","username":"MALodder","ts":"2020-07-08T18:24:17.006Z"}
{"msg":"its there https://github.com/hyperledger/ursa/tree/master/libursa/src/wasm","username":"MALodder","ts":"2020-07-08T18:24:43.391Z"}
{"msg":"Looks like it might need to be added to includes in cargo.toml?","username":"andrew.whitehead","ts":"2020-07-08T18:32:14.857Z"}
{"msg":"I'm not a crypto person but I did click on the doc above and loved the style :-)","username":"swcurran","ts":"2020-07-08T21:38:52.118Z"}
{"msg":"[ ](https://chat.hyperledger.org/channel/ursa?msg=Y9JDTXW6hmYmRqEKS) but in the released version on crates.io it is not published","username":"S3bb1","ts":"2020-07-09T05:21:27.676Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=Y9JDTXW6hmYmRqEKS","url":"https://chat.hyperledger.org/channel/ursa?msg=Y9JDTXW6hmYmRqEKS","remote":true,"fileId":null,"fileName":null}]}
{"msg":"https://eprint.iacr.org/2020/823.pdf","username":"MALodder","ts":"2020-07-09T13:34:05.053Z"}
{"msg":"good news for those of us that use Ed25519","username":"MALodder","ts":"2020-07-09T13:34:13.210Z"}
{"msg":"Which part of WASM do you need","username":"MALodder","ts":"2020-07-09T13:34:28.819Z"}
{"msg":"I'll start taking a look","username":"MALodder","ts":"2020-07-09T13:34:35.847Z"}
{"msg":"wer're using the \"portable_wasm\" feature","username":"S3bb1","ts":"2020-07-09T13:35:13.462Z"}
{"msg":"for which crypto primitives?","username":"MALodder","ts":"2020-07-09T13:35:30.256Z"}
{"msg":"ed25519? secp256k1?","username":"MALodder","ts":"2020-07-09T13:35:35.001Z"}
{"msg":"CL signatures?","username":"MALodder","ts":"2020-07-09T13:35:39.807Z"}
{"msg":"in our cargo.toml is the following referenced:\n\nursa = { version = \"0.3.4\", features=[\"portable_wasm\"], default-features = false }\n\nthis results in the build with the following error:\n\nerror[E0583]: file not found for module `wasm`\n   --> /Users/sebastiandechant/.cargo/registry/src/github.com-1ecc6299db9ec823/ursa-0.3.4/src/lib.rs:203:1\n    |\n203 | pub mod wasm;\n    | ^^^^^^^^^^^^^\n    |\n    = help: to create the module `wasm`, create file \"/Users/sebastiandechant/.cargo/registry/src/github.com-1ecc6299db9ec823/ursa-0.3.4/src/wasm.rs\"","username":"S3bb1","ts":"2020-07-09T13:36:58.114Z"}
{"msg":"and in docs.rs the folder is missing: https://docs.rs/crate/ursa/0.3.4/source/src/","username":"S3bb1","ts":"2020-07-09T13:38:17.034Z"}
{"msg":"found the error","username":"MALodder","ts":"2020-07-09T13:46:47.876Z"}
{"msg":"https://github.com/hyperledger/ursa/pull/132","username":"MALodder","ts":"2020-07-09T13:46:48.778Z"}
{"msg":"Can I this PR reviewed? https://github.com/hyperledger/ursa/pull/132","username":"MALodder","ts":"2020-07-09T13:47:09.843Z"}
{"msg":"its small so it should be quick","username":"MALodder","ts":"2020-07-09T13:47:22.626Z"}
{"msg":"thank you!!! :)","username":"S3bb1","ts":"2020-07-09T13:48:11.068Z"}
{"msg":"good catch","username":"MALodder","ts":"2020-07-09T13:48:33.578Z"}
{"msg":"no problem, thanks for the fast response","username":"S3bb1","ts":"2020-07-09T13:51:45.690Z"}
{"msg":"the error occurred when we revamped the deployment to shrink the package","username":"MALodder","ts":"2020-07-09T13:52:31.391Z"}
{"msg":"Has joined the channel.","username":"JelleFm","ts":"2020-07-10T11:35:40.038Z","type":"uj"}
{"msg":"@rjones can you trigger appveyor to run again for https://github.com/hyperledger/ursa/pull/132","username":"MALodder","ts":"2020-07-10T14:10:09.311Z"}
{"msg":"there's no reason it should've failed","username":"MALodder","ts":"2020-07-10T14:10:17.096Z"}
{"msg":"I just ran it manually in appveyor and it succeeded","username":"MALodder","ts":"2020-07-10T14:10:26.852Z"}
{"msg":"@MALodder done","username":"rjones","ts":"2020-07-10T18:08:13.272Z"}
{"msg":"I can't figure out how to delegate permission in the appveyor interface, but I'll keep looking","username":"rjones","ts":"2020-07-10T18:09:42.674Z"}
{"msg":"@MALodder could you look at appveyor when logged in using GitHub? I think your team should have permissions to run builds, etc now without my intervention","username":"rjones","ts":"2020-07-10T18:38:47.158Z"}
{"msg":"Will do","username":"MALodder","ts":"2020-07-10T19:04:01.835Z"}
{"msg":"https://eprint.iacr.org/2017/043.pdf","username":"MALodder","ts":"2020-07-11T02:12:35.284Z"}
{"msg":"Interesting paper ^^ that uses CL-RSA signatures with range proofs to implement a revocation accumulator ","username":"MALodder","ts":"2020-07-11T02:13:12.303Z"}
{"msg":"update on groups of unknown order with hyperelliptic curve by Galbraith: https://twitter.com/EllipticKiwi/status/1276301663406448640?s=20","username":"alexx","ts":"2020-07-14T03:55:00.087Z"}
{"msg":"Yep!  @MALodder  and I were talking about this yesterday!","username":"hartm","ts":"2020-07-14T15:08:18.420Z"}
{"msg":"yep the paper is here","username":"MALodder","ts":"2020-07-14T15:26:18.633Z"}
{"msg":"https://eprint.iacr.org/2020/196.pdf","username":"MALodder","ts":"2020-07-14T15:26:19.117Z"}
{"msg":"Has joined the channel.","username":"Madhava 16","ts":"2020-07-17T04:20:59.037Z","type":"uj"}
{"msg":"Hi all! :)","username":"Madhava 16","ts":"2020-07-17T04:20:59.239Z"}
{"msg":"I am looking at doing some Ares stuff and wanted to know about integrating the ursa rust code base into our rust code.","username":"Madhava 16","ts":"2020-07-17T04:21:45.722Z"}
{"msg":"I am just trying to understand the layers of indirection starting with this:\nhttps://github.com/hyperledger/aries-cloudagent-python\nit seems it utilises this:\nhttps://github.com/hyperledger/indy-sdk\nwhich in turn depends on ursa and other packages","username":"Madhava 16","ts":"2020-07-17T04:27:19.756Z"}
{"msg":"To ensure we can implement some kind of SSI / DIDComm in our code, would the indy-sdk make the most sense? Or do we need to implement stuff inside ursa directly?","username":"Madhava 16","ts":"2020-07-17T04:28:22.379Z"}
{"msg":"@Madhava 16 yes IndySDK is the right place to build on top of. Especially if you working in rust. You might also find useful some of the code inside libvcx https://github.com/hyperledger/indy-sdk/tree/master/vcx/libvcx as that's basically rust implementation of Aries / didcomm, but beware there's lots of legacy non-didcomm non-aries code in it.","username":"PatrikStas","ts":"2020-07-17T10:56:15.394Z"}
{"msg":"https://eprint.iacr.org/2020/735 - Bulletproofs+\nTL;DR\n85% Shorter proofs than Bulletproofs","username":"MALodder","ts":"2020-07-17T18:58:21.701Z"}
{"msg":"only 576 bytes","username":"MALodder","ts":"2020-07-17T18:58:34.092Z"}
{"msg":"Has joined the channel.","username":"hamidm","ts":"2020-07-18T00:54:56.762Z","type":"uj"}
{"msg":"Hello, is there  ursa wrappers for Dotnet ? Thanks","username":"hamidm","ts":"2020-07-18T00:56:59.943Z"}
{"msg":"Hello, are there  ursa wrappers for Dotnet ? Thanks","username":"hamidm","ts":"2020-07-18T00:56:59.943Z"}
{"msg":"for the whole thing? no","username":"MALodder","ts":"2020-07-18T01:53:57.263Z"}
{"msg":"for BBS+ there is","username":"MALodder","ts":"2020-07-18T01:54:03.299Z"}
{"msg":"For the call tomorrow, I'd like to discuss changing the current RFCs to FCP since no feedback has been given in weeks for many of them","username":"MALodder","ts":"2020-07-21T16:11:00.483Z"}
{"msg":"I'll be joining 5 minutes late","username":"brentzundel","ts":"2020-07-22T13:59:05.081Z"}
{"msg":"https://github.com/scoir/canis","username":"brentzundel","ts":"2020-07-22T14:54:17.221Z"}
{"msg":"somewhere in the project above is GO wrapping ursa, iiuc","username":"brentzundel","ts":"2020-07-22T15:08:19.231Z"}
{"msg":"Any progress on revocation to report from the meeting today?  Work done on that?","username":"swcurran","ts":"2020-07-22T16:36:46.032Z"}
{"msg":"PQ Round 3 candidates https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/0ieuPB-b8eg/m/Cl7Ji8TpCwAJ?pli=1","username":"MALodder","ts":"2020-07-22T21:56:18.753Z"}
{"msg":"Has joined the channel.","username":"ashlinSajan","ts":"2020-07-27T06:18:24.323Z","type":"uj"}
{"msg":"Has joined the channel.","username":"eadventurous","ts":"2020-07-29T15:25:50.382Z","type":"uj"}
{"msg":"I have found ursa docs repository https://github.com/hyperledger/ursa-docs and there it is mentioned that ursa has an mdbook, though I can't find a link to it. Can someone give me the link?\n\nAlso what is the best place to read ursa documentation is it https://docs.rs/ursa/0.3.4/ursa/ ?","username":"eadventurous","ts":"2020-07-29T15:25:50.733Z"}
{"msg":"A bit more code specific question: why is `ursa::signatures::SignatureScheme` only implemented for ed25519 and secp256k1 but not for bls or cl?","username":"eadventurous","ts":"2020-07-29T15:54:09.322Z"}
{"msg":"I thought this trait was used to abstract away the actual algorithm, so it would be logical to implement it for all of the algorithms","username":"eadventurous","ts":"2020-07-29T15:54:58.398Z"}
{"msg":"We’ll add it for BLS, however BLS and CL are more advanced signatures","username":"MALodder","ts":"2020-07-29T20:40:52.692Z"}
{"msg":"BLS supports aggregation and two variants of the schemes","username":"MALodder","ts":"2020-07-29T20:41:20.325Z"}
{"msg":"CL is largely for ZKP based signatures","username":"MALodder","ts":"2020-07-29T20:41:41.535Z"}
{"msg":"@hartm any recommendations for Crypto 2020 talks we shouldn't miss?","username":"brentzundel","ts":"2020-07-29T20:53:43.758Z"}
{"msg":"I haven't looked over the program in detail.  But it looks like there should be an interesting ZKP section that most people here might want to watch.","username":"hartm","ts":"2020-07-29T21:09:42.787Z"}
{"msg":"I'm planning to attend these ones\n\nCompressed Sigma-Protocol Theory and Practical Application to Plug & Play Secure Algorithmics\nA non-PCP Approach to Succinct Quantum-Safe Zero-Knowledge\nRound-optimal Black-box Commit-and-prove with Succinct Communication\nThe MALICIOUS Framework: Embedding Backdoors into Tweakable Block Ciphers\nNew Techniques for Zero-Knowledge: Leveraging Inefficient Provers to Reduce Assumptions, Interaction, and Trust\nFast and Secure Updatable Encryption\nMPC with Friends and Foes\nShorter Non-Interactive Zero-Knowledge Arguments and ZAPs for Algebraic Languages\nThe Memory-Tightness of Authenticated Encryption\nEfficient Constant-Round MPC with Identifiable Abort and Public Verifiability\nAlways Have a Backup Plan: Fully Secure Synchronous MPC with Asynchronous Fallback\nBreaking the decisional Diffie-Hellman problem for class group actions using genus theory\nLattice-Based Blind Signatures, Revisited\nSecurity Analysis and Improvements for the IETF MLS Standard for Group Messaging\nSpartan: Efficient and general-purpose zkSNARKs\nFully Deniable Interactive Encryption\nMultiparty Generation of an RSA Modulus\nNon-Interactive Zero-Knowledge Arguments for QMA, with preprocessing","username":"MALodder","ts":"2020-07-31T17:21:27.358Z"}
{"msg":"can you/somebody  give me the information about the conference ? Thanks in advance.","username":"ashutosh_kumar","ts":"2020-07-31T20:42:10.537Z"}
{"msg":"\\","username":"swcurran","ts":"2020-07-31T22:29:59.950Z"}
{"msg":"https://crypto.iacr.org/2020/","username":"swcurran","ts":"2020-07-31T22:34:06.222Z"}
{"msg":"Added Shamir Secret Sharing to Ursa - https://github.com/hyperledger/ursa/pull/137","username":"MALodder","ts":"2020-07-31T23:38:39.762Z"}
{"msg":"Thanks a lot.","username":"ashutosh_kumar","ts":"2020-08-01T14:54:36.156Z"}
{"msg":"Hi @MALodder can you release the updated Version also on crates.io?","username":"S3bb1","ts":"2020-08-03T09:07:57.961Z"}
{"msg":"https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\nA good read for those of us coding in Ursa","username":"MALodder","ts":"2020-08-03T15:41:24.151Z"}
{"msg":"I frequently ask/complain about that very thing in code!","username":"hartm","ts":"2020-08-03T16:19:37.817Z"}
{"msg":"That meeting with Ann Lysyanskaya was fantastic.\nRegrests for tomorrow's Ursa meeting.","username":"brentzundel","ts":"2020-08-04T20:07:11.499Z"}
{"msg":"Has left the channel.","username":"pschwarz","ts":"2020-08-04T20:50:33.372Z","type":"ul"}
{"msg":"Hi @MALodder can you release the version 0.3.5 of ursa on crates.io? thanks!","username":"S3bb1","ts":"2020-08-05T05:24:56.292Z"}
{"msg":"Will discuss in meeting tomorrow ","username":"MALodder","ts":"2020-08-05T12:10:08.284Z"}
{"msg":"https://twitter.com/oleganza/status/1288384398090477568?s=20","username":"alexx","ts":"2020-08-05T14:16:52.462Z"}
{"msg":"https://www.cs.umd.edu/~gasarch/TOPICS/secretsharing/feldmanVSS.pdf","username":"MALodder","ts":"2020-08-05T14:39:04.286Z"}
{"msg":"https://www.cs.cornell.edu/courses/cs754/2001fa/129.PDF","username":"MALodder","ts":"2020-08-05T14:45:12.748Z"}
{"msg":"this is slightly better print, no cut-off: https://link.springer.com/content/pdf/10.1007%2F3-540-46766-1_9.pdf","username":"alexx","ts":"2020-08-05T14:49:09.896Z"}
{"msg":"thanks alex","username":"MALodder","ts":"2020-08-05T14:49:29.222Z"}
{"msg":"More relevant article:\nhttps://www.theguardian.com/environment/2020/aug/07/bear-attack-advice-sacrificing-friends","username":"Dan","ts":"2020-08-08T23:05:14.677Z"}
{"msg":"Is Ursa resistant to this attack?","username":"rjones","ts":"2020-08-09T00:09:26.807Z"}
{"msg":"This is an excellent article that illustrates the importance of precise definitions.  Note that it says you shouldn't push down \"friends\" to get eaten by bears to save yourself, but says nothing about \"Dan Middletons.\"  Thank you for the insightful example Dan! ;)","username":"hartm","ts":"2020-08-10T01:18:32.743Z"}
{"msg":":-P \nAnd I thought you were going to key in on the RFC2119 use of _should_","username":"Dan","ts":"2020-08-10T04:06:43.474Z"}
{"msg":"Has joined the channel.","username":"helloravi","ts":"2020-08-10T14:28:04.678Z","type":"uj"}
{"msg":"Guys","username":"helloravi","ts":"2020-08-10T14:28:05.026Z"}
{"msg":"Is there documentation on how I can use Ursa to transmit claims in a zero knowledge way?","username":"helloravi","ts":"2020-08-10T14:28:29.070Z"}
{"msg":"Has joined the channel.","username":"RGold 1","ts":"2020-08-10T15:37:07.304Z","type":"uj"}
{"msg":"Are you working with Indy/Aries? If so they probably have interfaces at the right abstraction level. Ursa is pretty low-level.","username":"Dan","ts":"2020-08-10T16:35:45.616Z"}
{"msg":"Hi @MALodder did you got feedback regarding the release?","username":"S3bb1","ts":"2020-08-11T06:52:03.645Z"}
{"msg":"Hi all, we're currently using ursa for ZKP Credentials and faced that the prime number generation is rather \"slow\" (also with the native openssl compilation) and takes from 10s to 1m 30s. There is the constant\n\npub const LARGE_PRIME: usize = 1024;\n\nWhen setting this const to a lower one (e.g. 512 or 128) it gets faster (like normal because of shorter prime numbers). My question is, are these lower numbers still save and secure? Or which constant value you prefer","username":"S3bb1","ts":"2020-08-12T05:43:39.295Z"}
{"msg":"If I'm not mistaken, this parameter chooses the prime size for the two primes used to generate the RSA modulus.  I don't think anyone would recommend using less than a 2048 bit modulus for RSA, so I wouldn't touch those parameters.","username":"hartm","ts":"2020-08-12T08:08:10.473Z"}
{"msg":"Has joined the channel.","username":"JakeZ2020","ts":"2020-08-12T16:31:44.521Z","type":"uj"}
{"msg":"This is because it has to be safe primes which is much slower than just primes","username":"MALodder","ts":"2020-08-12T17:49:55.885Z"}
{"msg":"as soon as the next PR is merged then I can cut the release","username":"MALodder","ts":"2020-08-12T17:50:16.081Z"}
{"msg":"this is quite funny, why we chose Rust https://www.destroyallsoftware.com/talks/wat","username":"MALodder","ts":"2020-08-12T17:51:07.728Z"}
{"msg":"Interesting talk from Crypto:  1024 bit range proof using lattices (post-quantum) in 31kb.","username":"hartm","ts":"2020-08-17T19:52:24.571Z"}
{"msg":"link?","username":"Dan","ts":"2020-08-19T14:11:24.959Z"}
{"msg":"http://vignette4.wikia.nocookie.net/p__/images/9/9d/Link_Artwork_1_(Twilight_Princess).png/revision/latest?cb=20160705025744&path-prefix=protagonist","username":"rjones","ts":"2020-08-19T15:31:10.818Z"}
{"msg":"","username":"rjones","ts":"2020-08-19T15:31:58.266Z","attachments":[{"type":"file","title":"Link.png","title_link":"/file-upload/Q6BPSmzxJFfKfFXGt/Link.png","image_url":"/file-upload/Q6BPSmzxJFfKfFXGt/Link.png","image_type":"image/png","image_size":5317217,"url":"/file-upload/Q6BPSmzxJFfKfFXGt/Link.png","remote":false,"fileId":"Q6BPSmzxJFfKfFXGt","fileName":"Link.png"}]}
{"msg":"https://link.springer.com/chapter/10.1007%2F978-3-030-56880-1_17","username":"hartm","ts":"2020-08-19T15:48:43.114Z"}
{"msg":"Has joined the channel.","username":"davidkhala","ts":"2020-08-20T06:06:41.980Z","type":"uj"}
{"msg":"Hi ursa community. I try to play with C API and find https://github.com/hyperledger/ursa#libursa-documentation\nlibursa C API documentation link go to rust source folders still. Did I go to a wrong way?","username":"davidkhala","ts":"2020-08-20T06:08:39.165Z"}
{"msg":"Look for the ffi folder","username":"MALodder","ts":"2020-08-22T03:27:38.576Z"}
{"msg":"That’s where the code is","username":"MALodder","ts":"2020-08-22T03:27:45.511Z"}
{"msg":"Also try this","username":"MALodder","ts":"2020-08-22T03:28:18.496Z"}
{"msg":"https://github.com/mikelodder7/ffi-bbs-signatures","username":"MALodder","ts":"2020-08-22T03:28:21.562Z"}
{"msg":"Has joined the channel.","username":"jcldnatv","ts":"2020-08-22T17:30:51.972Z","type":"uj"}
{"msg":"Has joined the channel.","username":"avi23","ts":"2020-08-25T16:50:17.747Z","type":"uj"}
{"msg":"Hi All , can anyone please share some inputs and reference repo links on how to implement ZK-SNARK in Indy thru Ursa? just wondering if this has been achieved before in any Indy project?","username":"avi23","ts":"2020-08-25T16:51:13.091Z"}
{"msg":"Has joined the channel.","username":"SamB","ts":"2020-08-26T01:48:30.928Z","type":"uj"}
{"msg":"Ursa doesn’t have any snarks but does have Bulletproofs ","username":"MALodder","ts":"2020-08-26T03:25:26.090Z"}
{"msg":"Has joined the channel.","username":"SuperSeiyan","ts":"2020-08-26T03:42:50.021Z","type":"uj"}
{"msg":"Has joined the channel.","username":"thearhaam","ts":"2020-08-26T05:29:49.473Z","type":"uj"}
{"msg":"The problem with snarks is which system to use? use? Spartan, Halo, Hyrax, Libra, Sonic, Plonk, Marlin… Each one has tradeoffs between trusted setups, proof size, bilinear pairings or other elliptic curves, proof generation and generation time. SNARKS are not the only circuit based systems that can be used. Bulletproofs, Bulletproofs+, STARKS, SNARGS… the list goes on but there is no clear winner","username":"MALodder","ts":"2020-08-26T12:30:07.682Z"}
{"msg":"The problem with snarks is which system to use? Spartan, Halo, Hyrax, Libra, Sonic, Plonk, Marlin… Each one has tradeoffs between trusted setups, proof size, bilinear pairings or other elliptic curves, proof generation and generation time. SNARKS are not the only circuit based systems that can be used. Bulletproofs, Bulletproofs+, STARKS, SNARGS… the list goes on but there is no clear winner","username":"MALodder","ts":"2020-08-26T12:30:07.682Z"}
{"msg":"We’re watching them to see which one emerges as a clear winner","username":"MALodder","ts":"2020-08-26T12:30:32.736Z"}
{"msg":"We’re watching them to see which one emerges as a clear winner or winners","username":"MALodder","ts":"2020-08-26T12:30:32.736Z"}
{"msg":"@MALodder is there any example repo to refer on implementation on bulletproofs in ursa? can we achieve the same functionality using bulletproofs which we achieve by zk-snark?","username":"avi23","ts":"2020-08-26T12:36:47.031Z"}
{"msg":"It depends on what you are trying to do with snarks. What’s the use case?","username":"MALodder","ts":"2020-08-26T12:38:10.757Z"}
{"msg":"@MALodder my use case is to share certified data in anonymous mode where he/she does not wish to share all the data. For example, if the prover does not wish to share his salary however can answer to the query if salary is higher than the required amount that would solve the verifier’s purpose","username":"avi23","ts":"2020-08-26T12:57:11.635Z"}
{"msg":"or just to prove that user hold the signature without revealing the actual signature","username":"avi23","ts":"2020-08-26T12:58:01.261Z"}
{"msg":"We have the BBS signature for withholding the actual signature ","username":"MALodder","ts":"2020-08-26T13:03:40.850Z"}
{"msg":"Bulletproofs are perfect for range proofs","username":"MALodder","ts":"2020-08-26T13:04:03.991Z"}
{"msg":"Smaller and faster than snarks for that","username":"MALodder","ts":"2020-08-26T13:04:15.269Z"}
{"msg":"https://github.com/hyperledger/ursa/blob/master/libzmix/bulletproofs_amcl/src/r1cs/gadgets/bound_check.rs","username":"MALodder","ts":"2020-08-26T13:05:24.615Z"}
{"msg":"Look at the test code here to see how to use Bulletproofs for range checking","username":"MALodder","ts":"2020-08-26T13:05:45.443Z"}
{"msg":"From ursa","username":"MALodder","ts":"2020-08-26T13:05:54.759Z"}
{"msg":"@MALodder so do you mean that Zk-snarks implementation is not supported in URSA?","username":"avi23","ts":"2020-08-26T14:56:55.975Z"}
{"msg":"we haven't implemented any SNARKs in ursa","username":"MALodder","ts":"2020-08-26T14:57:14.685Z"}
{"msg":"so no","username":"MALodder","ts":"2020-08-26T14:57:19.382Z"}
{"msg":"okay, so to achieve ZKP using URSA in Indy we can either use any of these Bulletproofs or BBS approach....right?","username":"avi23","ts":"2020-08-26T14:59:56.114Z"}
{"msg":"absolutely","username":"MALodder","ts":"2020-08-26T15:00:48.794Z"}
{"msg":"people are too quick to reach for SNARKs when they shouldn't be","username":"MALodder","ts":"2020-08-26T15:01:01.678Z"}
{"msg":"@MALodder okay, understood.. but is there any project on indy which has already used these method of  BBS or Bulletproof using URSA?","username":"avi23","ts":"2020-08-26T15:04:11.670Z"}
{"msg":"yes there are","username":"MALodder","ts":"2020-08-26T15:16:11.974Z"}
{"msg":"could you please give some reference of same, so that i can explore","username":"avi23","ts":"2020-08-26T15:17:23.746Z"}
{"msg":"Trinsic, MattrGlobal, Evernym are companies using them","username":"MALodder","ts":"2020-08-26T15:19:29.550Z"}
{"msg":"@tplooker @tomislav and @brentzundel are who you could contact for that","username":"MALodder","ts":"2020-08-26T15:19:50.614Z"}
{"msg":"@MALodder thank you,  it would be great if you can share any GitHub repo for any of these projects who successfully implemented these","username":"avi23","ts":"2020-08-26T15:53:53.093Z"}
{"msg":"again ask those individuals","username":"MALodder","ts":"2020-08-26T15:54:15.988Z"}
{"msg":"Okay sure, thanks","username":"avi23","ts":"2020-08-26T16:06:21.924Z"}
{"msg":"@tplooker @tomislav @brentzundel i am interested in exploring the ZKP using methods supported by URSA like bulletproofs and other , could you please share some repos where we have already implemented these ZKP techniques , so that i can get a good understanding","username":"avi23","ts":"2020-08-26T16:14:37.656Z"}
{"msg":"@tplooker @tomislav @brentzundel i am interested in exploring the ZKP using methods supported by URSA like bulletproofs and other , could you please share some repos where we have already implemented these ZKP techniques , so that i can get a good understanding","username":"avi23","ts":"2020-08-26T16:43:37.897Z"}
{"msg":"@MALodder i saw about that ZkP can be achieved in Indy using anoncreds that is mentioned in their official reference as well...","username":"avi23","ts":"2020-08-26T17:08:21.916Z"}
{"msg":"So wanted to understand that does Ursa have use of that?","username":"avi23","ts":"2020-08-26T17:09:21.906Z"}
{"msg":"It its totally different like any other techniques","username":"avi23","ts":"2020-08-26T17:09:39.786Z"}
{"msg":"Sure. I'm only aware of BBS implementations.\nAn early version of BBS for JSON-LD can be found here:\n\nBBS for JSON-LD in .NET https://github.com/streetcred-id/ld-proofs-dotnet\nThis is based on a BBS FFI wrapper now maintained at https://github.com/mattrglobal/ffi-bbs-signatures/. There are available wrappers for .NET and C, with Java coming in.\n\nFor NodeJS environment, BBS sigs for JSON-LD\nhttps://github.com/mattrglobal/jsonld-signatures-bbs\n\nFor example usage, I can point you to the unit tests in each repo, to see how these are used with practical LD documents","username":"tomislav","ts":"2020-08-26T17:46:37.032Z"}
{"msg":"Sure. I'm only aware of BBS implementations.\n\nBBS for JSON-LD in .NET https://github.com/streetcred-id/ld-proofs-dotnet\nThis is based on a BBS FFI wrapper now maintained at https://github.com/mattrglobal/ffi-bbs-signatures/. There are available wrappers for .NET and C, with Java coming in.\n\nFor NodeJS environment, BBS sigs for JSON-LD\nhttps://github.com/mattrglobal/jsonld-signatures-bbs\n\nFor example usage, I can point you to the unit tests in each repo, to see how these are used with practical LD documents","username":"tomislav","ts":"2020-08-26T17:46:37.032Z"}
{"msg":"@tomislav thanks ! that would be a great help if you can share","username":"avi23","ts":"2020-08-26T18:04:09.858Z"}
{"msg":"I don't know of anyone yet who is using bulletproofs from Ursa. Evernym is currently using the CL signatures for zkp credentials through Indy.","username":"brentzundel","ts":"2020-08-26T19:34:46.134Z"}
{"msg":"@brentzundel could you please give some reference repo of same?","username":"avi23","ts":"2020-08-27T03:55:59.441Z"}
{"msg":"@MALodder i saw about that ZkP can be achieved in Indy using anoncreds that is mentioned in their official reference as well...\nSo wanted to understand that does Ursa have use of that? It its totally different like any other techniques","username":"avi23","ts":"2020-08-27T08:12:38.049Z"}
{"msg":"Ursa provides those yes","username":"MALodder","ts":"2020-08-27T12:45:47.198Z"}
{"msg":"They are quite fast to do and small in size","username":"MALodder","ts":"2020-08-27T12:46:13.550Z"}
{"msg":"the high level API for using the credentials is here: https://github.com/hyperledger/indy-sdk/blob/master/libindy/src/api/anoncreds.rs","username":"brentzundel","ts":"2020-08-27T13:59:21.972Z"}
{"msg":"@MALodder any example repos of implementation","username":"avi23","ts":"2020-08-27T14:28:04.374Z"}
{"msg":"@MALodder could you please share any repo where this annoncreds has been implemented?","username":"avi23","ts":"2020-08-27T14:30:11.588Z"}
{"msg":"https://github.com/hyperledger/indy-sdk","username":"MALodder","ts":"2020-08-27T14:30:34.874Z"}
{"msg":"@MALodder i am aware of this repo, but couldn't see any specific where we have used annoncreds to achieve zkp, is there any projects who have implemented it ?","username":"avi23","ts":"2020-08-27T16:27:19.880Z"}
{"msg":"if you look https://github.com/hyperledger/indy-sdk/tree/master/libindy/src/domain/anoncreds, the code is right there","username":"MALodder","ts":"2020-08-27T16:28:16.467Z"}
{"msg":"@MALodder i am still not very clear, from i can start to use zkp in Indy, could you please help?","username":"avi23","ts":"2020-08-27T16:28:16.887Z"}
{"msg":"here another https://github.com/mikelodder7/ursa_demo/blob/master/src/main.rs","username":"MALodder","ts":"2020-08-27T16:28:55.144Z"}
{"msg":"Lines 94-123","username":"MALodder","ts":"2020-08-27T16:29:18.408Z"}
{"msg":"@MALodder thank you, let me take a look","username":"avi23","ts":"2020-08-27T16:31:34.269Z"}
{"msg":"thank you @brentzundel , let me check this","username":"avi23","ts":"2020-08-27T17:44:12.901Z"}
{"msg":"good read for any ursa developers: https://soatok.blog/2020/08/27/soatoks-guide-to-side-channel-attacks/","username":"MALodder","ts":"2020-08-28T17:09:50.220Z"}
{"msg":"https://eprint.iacr.org/2005/123","username":"MALodder","ts":"2020-09-02T14:32:14.535Z"}
{"msg":"https://github.com/hyperledger/ursa/pull/142","username":"MALodder","ts":"2020-09-02T15:08:48.564Z"}
{"msg":"@here I posted a draft quarterly report.  Please feel free to edit if you like!  Thanks!","username":"hartm","ts":"2020-09-02T23:52:58.929Z"}
{"msg":"thanks @hart I made some updates","username":"MALodder","ts":"2020-09-03T17:02:34.505Z"}
{"msg":"Has joined the channel.","username":"chakshujain","ts":"2020-09-06T14:37:24.138Z","type":"uj"}
{"msg":"Hi @MALodder @tomislav @tplooker  Other than Hyperledger Indy and Aries,\nIs Hyperledger Ursa integration with other platforms like fabric released officially?","username":"ashlinSajan","ts":"2020-09-07T09:44:31.419Z"}
{"msg":"Transact is one that uses it","username":"MALodder","ts":"2020-09-07T15:35:58.603Z"}
{"msg":"Has joined the channel.","username":"paul.bastian","ts":"2020-09-08T11:40:52.215Z","type":"uj"}
{"msg":"Has joined the channel.","username":"AryamaI","ts":"2020-09-08T15:41:53.366Z","type":"uj"}
{"msg":"So I will use transact in order to get ursa? Am I right?","username":"jcldnatv","ts":"2020-09-11T01:07:39.754Z"}
{"msg":"No you can use Ursa directly","username":"MALodder","ts":"2020-09-11T01:08:58.350Z"}
{"msg":"thank you that was quick. any example?","username":"jcldnatv","ts":"2020-09-11T01:16:09.443Z"}
{"msg":"Here’s one https://github.com/hyperledger/ursa/tree/master/libzmix/bbs","username":"MALodder","ts":"2020-09-11T01:41:08.028Z"}
{"msg":"https://github.com/mikelodder7/ursa_demo","username":"MALodder","ts":"2020-09-11T01:43:03.663Z"}
{"msg":"Hi Mike, is it the answer to me C API quesion?","username":"davidkhala","ts":"2020-09-14T01:24:40.736Z"}
{"msg":"Hello Everyone,  I am trying to understand briefly how User/holder anonymity is maintained at the time of credential verification.  I see that holder's wallet data is encrypted by a master key. So, is there any api that allows a user to know his wallet master key? As a response to the proof of request, I see a master_secret value in the API Response sent by the holder, what is it.?In the AliceFaber example I see that some attribute values are revealed like name, degree at the point of verification. Only the age is kept hidden based on the predicate. So, cant we ensure a complete anonymity by even hiding the other fields. So, how does user anonymity works in here and similarly , what is the prurpose of master key used for encrypting the wallet, in brief?  Kindly help me understand these points. Any help is appreciated, thank you.","username":"AryamaI","ts":"2020-09-15T10:24:40.388Z"}
{"msg":"Hello Everyone,  I am trying to understand briefly how User/holder anonymity is maintained at the time of credential verification.  I see that holder's wallet data is encrypted by a master key. So, is there any API that allows a user to know his wallet master key? As a response to the proof of request, I see a master_secret value in the API Response sent by the holder, what is it.? In the AliceFaber example, I see that some attribute values are revealed like name, degree at the point of verification. Only the age is kept hidden based on the predicate. So, cant we ensure complete anonymity by even hiding the other fields. Also, from my understanding, all encryption works internally work using URSA, but do we still need to do any extra enablement when running the ALiceFaberDemo for master key or anything? I haven't done anything differently. So, how does user anonymity works in here, and similarly, what is the purpose of the master key used for encrypting the wallet, in brief?  Kindly help me understand these points. Any help is appreciated, thank you.","username":"AryamaI","ts":"2020-09-15T10:24:40.388Z"}
{"msg":"Has joined the channel.","username":"tarkochevamik","ts":"2020-09-15T19:25:18.890Z","type":"uj"}
{"msg":"@here Just a reminder for tomorrow's meeting.  Please add items to the agenda as you see fit.","username":"hartm","ts":"2020-09-16T02:04:37.319Z"}
{"msg":"Hello Ursa team!\nIs there any solution/open source platform that has implemented  a full cycle (issue, manage, verify and revoke) support of zero knowledge proof claims using verifiable credentials?  Is there any article/link for that?","username":"the_identity_guy","ts":"2020-09-16T03:35:05.715Z"}
{"msg":"That's possibly a better questiion for the","username":"JonGeater","ts":"2020-09-16T10:58:49.259Z"}
{"msg":"That's possibly a better question for the Indy channel. Folks here happen to know about ZKPs and SSI but you'll find more project/business type people (who deal in use cases and case studies more broadly than just crypto) over in the Indy channel","username":"JonGeater","ts":"2020-09-16T10:58:49.259Z"}
{"msg":"wrapper rfc:\nhttps://github.com/hyperledger/ursa-rfcs/tree/master/text/language-bindings","username":"Dan","ts":"2020-09-16T14:31:39.669Z"}
{"msg":"Has joined the channel.","username":"m00sey","ts":"2020-09-16T15:13:24.772Z","type":"uj"}
{"msg":"Hello! Per the Ursa call, we'd like to be added as maintainers of the ursa-wrapper-go repo, here are our github names: pfeairheller (Philip Feairheller) , m00sey (Kevin Griffin), and mikaelaTar (Mikaela Tarkocheva). As soon as we get access we will move our PR over and close the one against ursa. Thank you!","username":"tarkochevamik","ts":"2020-09-16T15:15:07.473Z"}
{"msg":"repo is up https://github.com/hyperledger/ursa-wrapper-go","username":"MALodder","ts":"2020-09-16T16:12:26.958Z"}
{"msg":"Hi, if you have anything you'd like to see added to the /dev/weekly newsletter, please comment in the next two hours: https://wiki.hyperledger.org/pages/viewpage.action?pageId=39618911","username":"rjones","ts":"2020-09-17T15:27:46.864Z"}
{"msg":"Has joined the channel.","username":"ianco","ts":"2020-09-18T17:05:36.684Z","type":"uj"}
{"msg":"Has joined the channel.","username":"hcsatish","ts":"2020-09-20T16:10:22.736Z","type":"uj"}
{"msg":"Hey folks, thanks for making us code owners in https://github.com/hyperledger/ursa-wrapper-go, however none of us seem to have write access on ursa-wrapper-go. We were hoping to not impose the burden of the wrapper's PRs on this group.","username":"tarkochevamik","ts":"2020-09-21T20:23:12.781Z"}
{"msg":"@rjones can you give them write on this repo? (it's same id's as for code owners + the ursa maintainers)","username":"Dan","ts":"2020-09-21T20:31:14.015Z"}
{"msg":"@Dan done. @tarkochevamik I added two comments on your PR","username":"rjones","ts":"2020-09-21T21:33:14.076Z"}
{"msg":"@tarkochevamik https://github.com/hyperledger/ursa-wrapper-go/pull/3 is ready to merge (I did a rebase/squash)","username":"rjones","ts":"2020-09-21T21:39:21.940Z"}
{"msg":"Glad to see Ry and Brent engaged on that PR. I think for the first few PRs to make sure that community norms are understood it would be good for some of the existing ursa maintainers to be reviewing along with the principal but newer contributors for this go repo.","username":"Dan","ts":"2020-09-22T16:59:36.094Z"}
{"msg":"I'd like to check my intuitive understanding of some of snark concepts so I'm going to try to use plain english rather than parroting technical terms. We want to show that we can create these proofs for general programs/algorithms. Consequently papers often started with binary circuits as those directly reflect what you can make with an electronic circuit, and because we are dealing in just individual bits, the proofs of correctness for the systems are easier to write. Dealing with individual bits is inefficient though so once you've shown the properties you want hold in a binary circuit it's good to show they hold in an arithmetic circuit (i.e. now I'm working with bigints instead of bits). Even that is not a super efficient way to encode statements so that gave rise to other constructions like QSPs and QAPs with the current state of the art focused on R1CS. I'll pause here before maybe digging into r1cs.","username":"Dan","ts":"2020-09-22T17:12:43.300Z"}
{"msg":"Are you comfortable with circuit definitions?  People like to use arithmetic circuits (and things that are built on them, like QAPs) because they are closer to cryptographic assumptions in that they work over large fields.","username":"hartm","ts":"2020-09-22T19:55:29.849Z"}
{"msg":"I think I am, but probably don't know what I should be uncomfortable about in my knowledge :) \nI know what 3-sat is, and that an arithmetic circuit just lets you apply normal operations at each gate. The examples for snarky things generally use multiplication at each gate and collapse additions in to those multiplications.. possibly because their group operation is multiplication?","username":"Dan","ts":"2020-09-22T20:19:43.002Z"}
{"msg":"Arithmetic circuits are defined over finite fields, with ADD gates and MULTIPLY gates.","username":"hartm","ts":"2020-09-22T20:23:07.350Z"}
{"msg":"Is that what you meant by \"normal\" operations?","username":"hartm","ts":"2020-09-22T20:23:23.640Z"}
{"msg":"yeah","username":"Dan","ts":"2020-09-22T20:23:32.658Z"}
{"msg":"Many of the ZK things use pairings.  Group multiplication == addition in the exponent, group exponentiation == multiplication in the exponent.  To multiply in the exponent you need pairings.","username":"hartm","ts":"2020-09-22T20:24:47.045Z"}
{"msg":"I guess instead of AND and OR in boolean circuits (with binary inputs) you have ADD and MULT (with finite field inputs).","username":"Dan","ts":"2020-09-22T20:24:48.741Z"}
{"msg":"That's correct.","username":"hartm","ts":"2020-09-22T20:24:53.902Z"}
{"msg":"Ok thanks. I set that up like I was going to go across the breadth of the snarks concept, but really just dialing into this encoding thing to go from circuits to r1cs before I try to dig some more on r1cs. \nAt the moment I'm on an excursion into FHE and reading some of the Gentry stuff from 2009/2010.. the application of circuits there brought my mind back to their use in Snarks and this progression towards r1cs.","username":"Dan","ts":"2020-09-22T20:45:07.468Z"}
{"msg":"What's gotten you into FHE?  I would read the GSW paper if you want to understand FHE:  https://eprint.iacr.org/2013/340","username":"hartm","ts":"2020-09-22T20:46:17.780Z"}
{"msg":"It's much easier to understand why and how it works than with the earlier schemes, which need rings, modulus switching, or other complicated techniques.","username":"hartm","ts":"2020-09-22T20:46:40.635Z"}
{"msg":"Someone wanted to assert that FHE did things that TEEs do and ... anyway there's some productive stuff with FHE so I'm trying to get a visceral sense of it. I started with the jewelry paper which is hilarious and accessible. I'm reading the FHE over the Integers 2010 paper right now. I wasn't aware of the GSW paper but thought this integers paper had a similar purpose... like you're probably not going to make this integer based system, but look how easy it is to understand! ;)","username":"Dan","ts":"2020-09-22T20:50:11.883Z"}
{"msg":"Someone wanted to assert that FHE did things that TEEs do and ... anyway there's some productive stuff with FHE so I'm trying to get a visceral sense of it. I started with the jewelry paper which is hilarious and accessible. I'm reading the FHE over the Integers 2010 paper right now. I wasn't aware of the GSW paper but thought this integers paper had a similar purpose... like you're probably not going to make this integer based system, but look how easy it is! ;)","username":"Dan","ts":"2020-09-22T20:50:11.883Z"}
{"msg":"I'm so underqualified to make any judgements, but it seems like using crazy big numbers to hide one bit and then a lot of corner case coverage to manage the cumulative noise.","username":"Dan","ts":"2020-09-22T20:51:41.193Z"}
{"msg":"TEEs give you essentially VBB (virtual black-box obfuscation).  FHE doesn't allow you to learn anything about the message encrypted in the ciphertext, which you really want to allow (selectively) for most TEE applications.","username":"hartm","ts":"2020-09-22T20:51:42.226Z"}
{"msg":"Most people really want functional encryption when they mention FHE.","username":"hartm","ts":"2020-09-22T20:51:59.768Z"}
{"msg":"Yeah, FHE schemes are very inefficient right now.","username":"hartm","ts":"2020-09-22T20:52:18.011Z"}
{"msg":"The GSW paper is currently (I think) the simplest and cleanest construction.","username":"hartm","ts":"2020-09-22T20:52:40.619Z"}
{"msg":"Cool thanks for that cite, I'll take a crack at that one tomorrow.","username":"Dan","ts":"2020-09-22T20:53:42.888Z"}
{"msg":"Of course!","username":"hartm","ts":"2020-09-22T20:59:27.119Z"}
{"msg":"Glad you are getting more into crypto stuff, by the way!","username":"hartm","ts":"2020-09-22T22:12:30.415Z"}
{"msg":"do we need a new zoom link? \nI've started an agenda for next week. If there's a new zoom can someone add it there (and update the community calendar)\nhttps://wiki.hyperledger.org/display/ursa/2020-09-30+Meeting+Agenda","username":"Dan","ts":"2020-09-24T14:41:45.832Z"}
{"msg":"@Dan yes, you will need a new one.","username":"rjones","ts":"2020-09-24T14:57:32.660Z"}
{"msg":"Has joined the channel.","username":"valesken","ts":"2020-09-24T18:19:15.775Z","type":"uj"}
{"msg":"Hello Ursa community from the Hyperledger India Chapter, we are calling for speakers to engage with the community in Asia Pacific, Europe and Africa. Please see our event details here https://www.linkedin.com/feed/update/urn:li:activity:6715897303481372672\n\nCalling the tech enthusiasts, maintainers to be part of it.","username":"arsulegai","ts":"2020-09-27T12:07:32.978Z"}
{"msg":"Has joined the channel.","username":"manoranjith","ts":"2020-10-02T06:23:41.336Z","type":"uj"}
{"msg":"Has joined the channel.","username":"dgt1nsty","ts":"2020-10-02T13:54:43.057Z","type":"uj"}
{"msg":"ecies","username":"mccown","ts":"2020-10-05T23:05:12.977Z"}
{"msg":"Has joined the channel.","username":"Sandeepk40","ts":"2020-10-07T04:26:37.569Z","type":"uj"}
{"msg":"Has joined the channel.","username":"mirgee","ts":"2020-10-12T17:52:03.535Z","type":"uj"}
{"msg":"Has joined the channel.","username":"tosirisuk","ts":"2020-10-13T16:05:05.878Z","type":"uj"}
{"msg":"Hi, I'm pretty new to the hyperledger/ursa. I'm interested in z-mix library and wonder how to import it to my proj.\nI'm a little confused with the README.md about how to use those compiled artifact(s)\nhttps://github.com/hyperledger/ursa#libzmix","username":"tosirisuk","ts":"2020-10-13T16:05:06.213Z"}
{"msg":"Hi, I'm pretty new to the hyperledger/ursa. I'm interested in z-mix library and wonder how to import it to my project.\nI'm a little confused with the README.md about how to use those compiled artifact(s) e.g. use, mod, crate, etc.\nhttps://github.com/hyperledger/ursa#libzmix","username":"tosirisuk","ts":"2020-10-13T16:05:06.213Z"}
{"msg":"I will appreciate if anyone could guide or hint me on this.","username":"tosirisuk","ts":"2020-10-13T16:06:38.553Z"}
{"msg":"In case you have the old calendar link: https://zoom.us/j/6223336701?pwd=dkJKdHRlc3dNZEdKR1JYdW40R2pDUT09","username":"hartm","ts":"2020-10-14T13:59:00.362Z"}
{"msg":"Has joined the channel.","username":"duuren","ts":"2020-10-14T19:46:35.794Z","type":"uj"}
{"msg":"Hi, I like to use Zero Knowledge proof capabilities with either Sawtooth or Iroha. Is it possible to do this with Ursa. I noticed that Iroha has already an option to install Libursa, but no mention on Libzmix. On Sawtooth I only read some old emails that there is an intention, but no concrete recent info.","username":"duuren","ts":"2020-10-14T19:56:02.423Z"}
{"msg":"I have this issue on this too. I spent about two weeks trying to find the way to use the `libzmix`, but no success yet.","username":"tosirisuk","ts":"2020-10-19T05:12:42.275Z"}
{"msg":"libzmix is just a library like libursa","username":"MALodder","ts":"2020-10-19T14:06:27.782Z"}
{"msg":"We are in the middle of migrating an FFI layer into zmix from an external project that will allow you to do this","username":"MALodder","ts":"2020-10-19T14:07:02.616Z"}
{"msg":"if you don't want to wait you can find it here","username":"MALodder","ts":"2020-10-19T14:07:25.792Z"}
{"msg":"https://github.com/mattrglobal/ffi-bbs-signatures","username":"MALodder","ts":"2020-10-19T14:07:26.410Z"}
{"msg":"Has joined the channel.","username":"daidoji","ts":"2020-10-19T14:09:26.796Z","type":"uj"}
{"msg":"Thanks for the information @MALodder. I'm just new to Rust and right know I don't quite understand how to use those compiled in my Rust project.\n\nlibursa.so (Linux)\nlibursa.dylib (Mac OS X)\nlibursa.a (Linux, Mac OS X)\nlibursa.dll (Windows)\nlibursa.lib (Windows)","username":"tosirisuk","ts":"2020-10-19T14:56:14.083Z"}
{"msg":"you just need the dynamic library portion","username":"MALodder","ts":"2020-10-19T14:56:50.690Z"}
{"msg":"OK, will google for more detail on \"dynamic library\". Appreciate your guide","username":"tosirisuk","ts":"2020-10-19T14:57:59.598Z"}
{"msg":"When we talked about GS proofs a while back, modules came up. There was an observation about their relation to vector spaces (which is maybe only important to you if you are close to linear algebra). As I look at lattices, I want to connect these three. While there are different aspects you could look at across these structures, one progression is that the elements of each move from\nfields  ->  rings  ->  integers \nfor \nvector spaces -> modules -> and lattices respectively. \nAlso it's correct to think of a Lattice as a kind of Module and a Module as a kind of Vector space. \n\nPlease disagree with me if you see errors here.","username":"Dan","ts":"2020-10-19T16:06:04.386Z"}
{"msg":"Thanks, looking forward.","username":"duuren","ts":"2020-10-20T21:39:06.737Z"}
{"msg":"did you ever find out?  I think a module is a generalization of a vector space like a vector space can be a generalization of an operation over a field but I could be wrong.  Been a long time since I wore a mathematician hat.  Am curious to learn what the answers to the other things you mentioned here were though.","username":"daidoji","ts":"2020-10-22T19:48:24.083Z"}
{"msg":"no one argued with me so that means I'm certainly correct ;)\nSeriously, though, i think those definitions are correct. I just hadn't seen them side by side before so I wanted to double check.","username":"Dan","ts":"2020-10-22T21:55:04.454Z"}
{"msg":"There's a 'category' sort of relationship there that interests me though. And I use category loosely.","username":"Dan","ts":"2020-10-22T21:56:10.609Z"}
{"msg":"Module is to ring as vector space is to field is the appropriate analogy.","username":"hartm","ts":"2020-10-23T00:07:10.114Z"}
{"msg":"And yes, category theory is a whole field!","username":"hartm","ts":"2020-10-23T00:07:25.259Z"}
{"msg":"pun ^","username":"Dan","ts":"2020-10-23T18:42:37.732Z"}
{"msg":"pun detected ^","username":"Dan","ts":"2020-10-23T18:42:37.732Z"}
{"msg":"So according to GPV and I read this somewhere else too tho I don't remember where now, for the Gram-Schmidt orthogonalized basis, each vector is \"clearly\" less than or equal to the original basis vector. And I'm fine with that, but I also read that Det(L) doesn't depend on choice of basis. But if you can have a basis with some shorter vectors wouldn't that imply a smaller volume?","username":"Dan","ts":"2020-10-23T18:47:44.772Z"}
{"msg":"No!  This would be easier to explain if I could draw.  But think about the following:   I could have a square with side length 1 ( and thus with area 1), or a parallelepiped defined by the vectors (1, 0) and (10, 1).  This parallelepiped also has area 1, even though its sides are much longer (draw this out if this isn't clear).  This is basically what's going on here, although in high dimension.","username":"hartm","ts":"2020-10-23T18:52:35.221Z"}
{"msg":"Note that the lattice spanned by the vectors (1, 0) and (0, 1) is the same as that spanned by (1, 0) and (20, 1).","username":"hartm","ts":"2020-10-23T18:53:23.624Z"}
{"msg":"The determinant is dependent on the lattice and independent of the basis.","username":"hartm","ts":"2020-10-23T18:53:56.716Z"}
{"msg":"ohhhh. got it....","username":"Dan","ts":"2020-10-23T18:55:12.797Z"}
{"msg":"I think with even smaller numbers if I have {(1,0), (1,1)} the orthoganalized basis would be ({1,0}, {0,1}} and the former is a parallelogram with area 1 and the latter is a square with area 1.","username":"Dan","ts":"2020-10-23T18:56:31.146Z"}
{"msg":"(tho usually when I try to do math quickly I mess something up)","username":"Dan","ts":"2020-10-23T18:56:47.097Z"}
{"msg":"(also happens when I take a lot of time)","username":"Dan","ts":"2020-10-23T18:56:58.306Z"}
{"msg":"Yep, that's right!","username":"hartm","ts":"2020-10-23T18:58:12.705Z"}
{"msg":"thanks!","username":"Dan","ts":"2020-10-23T18:58:37.241Z"}
{"msg":"What I have said is a little bit of an oversimplification of what's going on in high dimensions (and of the GS basis), but it's good for intuition.","username":"hartm","ts":"2020-10-23T18:59:28.263Z"}
{"msg":"works for me. and seems to work just fine in low dimension .. more so than seeing intuitively the difficulty in finding the distance between a perturbed point and a lattice point.\ntho even there I now think of looking at the projection of a 3D point on a 2D drawing. The point will look close to a 'foreground' vertex just because of the projection.","username":"Dan","ts":"2020-10-23T19:02:04.853Z"}
{"msg":"This \"projecting to the GS basis\" idea for lattice reduction has a name:  Babai's nearest plane algorithm.","username":"hartm","ts":"2020-10-23T19:04:03.397Z"}
{"msg":"Lattice Based system is NP hard because of Super Increasing Subset Sum Problem applied on coefficients of vectors.","username":"ashutosh_kumar","ts":"2020-10-26T20:56:41.059Z"}
{"msg":"Lattice-based cryptosystems are not NP-hard themselves.  Crypto problems themselves generally have to be in NP intersect coNP, and it is considered to be unlikely that NP = NP intersect coNP.   Lattice problems are, however, generally based on finding approximate solutions of problems for which finding exact solutions are NP-hard (e.g. SVP or CVP).","username":"hartm","ts":"2020-10-26T21:29:19.475Z"}
{"msg":"The basic idea is solving Zero Sum Problem.","username":"ashutosh_kumar","ts":"2020-10-26T22:49:17.969Z"}
{"msg":"Lattice problems are actually quite a bit different from subset sum problems (which are only hard for a relatively narrow band of parameters).","username":"hartm","ts":"2020-10-27T01:17:21.550Z"}
{"msg":"Here are some slides that explain some of the hardness connections on lattices pretty well:  https://www.iacr.org/workshops/tcc2007/Micciancio.pdf","username":"hartm","ts":"2020-10-27T01:17:40.566Z"}
{"msg":"Does anyone have proposed topics for the meeting this Wednesday?  Looking to craft an agenda earlier than usual.  Thanks!","username":"hartm","ts":"2020-10-27T01:18:16.677Z"}
{"msg":"I'd like to talk about how issuer-blinded messages in a CL or BBS+ signed credential might be made usable by a prover, and what that would look like for verification.","username":"brentzundel","ts":"2020-10-27T13:35:15.999Z"}
{"msg":"Has joined the channel.","username":"arunprakashpj","ts":"2020-10-27T20:25:00.242Z","type":"uj"}
{"msg":"Again its a post about Libzmix ! I am trying to utilize Libzmix to make a secure pull/push of my github repo !! I was searching through the history here and got some insights. Still, If someone can redirect me to any handy blog articles , it would be great !! Usage is bit hard to understand . Any leads are appreciated !!","username":"arunprakashpj","ts":"2020-10-27T20:25:00.542Z"}
{"msg":"which feature of libzmix are you trying to consume","username":"MALodder","ts":"2020-10-27T20:57:30.656Z"}
{"msg":"I just wanted to use Zero Knowledge proof for the user and github repo owner","username":"arunprakashpj","ts":"2020-10-27T22:05:42.806Z"}
{"msg":"To be precise , Module ursa::signatures","username":"arunprakashpj","ts":"2020-10-27T22:21:16.966Z"}
{"msg":"ursa signatures isn't ZKP, libzmix/bbs is and so is libursa/cl","username":"MALodder","ts":"2020-10-28T01:21:39.027Z"}
{"msg":"Has joined the channel.","username":"mickra","ts":"2020-10-28T10:18:20.957Z","type":"uj"}
{"msg":"herzlich willkommen!","username":"Dan","ts":"2020-10-28T14:05:59.797Z"}
{"msg":"Hi all, i want to collect some feedback regarding \"public Proofs\". For example a user wants to show the outside world, that he has a specific claim (CL VC). Our approach would be creating a Presentation/Proof of this Credential and putting the data to a public website (where it can be checked). Since CL also requires a proof request beforehand, this must also be put public. Is this a valid approach or is there an easier/smarter way to have a \"public proof\" on a website for a specific credential","username":"S3bb1","ts":"2020-11-03T07:56:32.173Z"}
{"msg":"Has joined the channel.","username":"husnain","ts":"2020-11-03T11:43:58.934Z","type":"uj"}
{"msg":"Has joined the channel.","username":"avradip","ts":"2020-11-05T00:24:29.035Z","type":"uj"}
{"msg":"Has joined the channel.","username":"seriousm 3","ts":"2020-11-06T14:21:29.590Z","type":"uj"}
{"msg":"Has joined the channel.","username":"evertonzn","ts":"2020-11-10T18:01:12.744Z","type":"uj"}
{"msg":"I've got a conflict with this week's meeting.\n@MALodder I can take a stab at that k256 change later this week if you haven't already started on it.","username":"Dan","ts":"2020-11-11T03:57:52.184Z"}
{"msg":"I have not started but feel free to do so","username":"MALodder","ts":"2020-11-11T04:31:44.183Z"}
{"msg":"https://wiki.hyperledger.org/display/ursa/2020-11-11+Meeting+Agenda","username":"hartm","ts":"2020-11-11T15:03:57.146Z"}
{"msg":"https://people.csail.mit.edu/henrycg/pubs/oakland15riposte/","username":"hartm","ts":"2020-11-11T15:18:57.428Z"}
{"msg":"Can someone remind me the goal of our docker containers? Are those to shell into and use as dev environments for the respective platforms?","username":"Dan","ts":"2020-11-13T18:24:52.126Z"}
{"msg":"n/m. I think I have the gist. I plan to put up a PR with some fixes for the ubuntu ones.","username":"Dan","ts":"2020-11-13T20:29:59.663Z"}
{"msg":"https://github.com/hyperledger/ursa/pull/165","username":"MALodder","ts":"2020-11-13T21:21:44.947Z"}
{"msg":"Adds secret sharing schemes","username":"MALodder","ts":"2020-11-13T21:21:53.776Z"}
{"msg":"If you want more compact license headers you can use spdx...\n```\n# Copyright contributors to Hyperledger Ursa\n# SPDX-License-Identifier: Apache-2.0\n```","username":"Dan","ts":"2020-11-13T21:57:32.439Z"}
{"msg":"hmm, okay, I'll change it to that","username":"MALodder","ts":"2020-11-13T22:00:13.093Z"}
{"msg":"Wow is that all new code? I had my head in something else and I thought your PR was relocating stuff in the new structure, but that looks like you added a whole new feature?","username":"Dan","ts":"2020-11-13T22:01:33.638Z"}
{"msg":"yes that part is all new","username":"MALodder","ts":"2020-11-13T22:01:43.430Z"}
{"msg":"Super cool!","username":"Dan","ts":"2020-11-13T22:01:52.225Z"}
{"msg":"I wanted that in place before relocating signatures","username":"MALodder","ts":"2020-11-13T22:01:59.947Z"}
{"msg":"because I want to add secret sharing to each signature","username":"MALodder","ts":"2020-11-13T22:02:12.796Z"}
{"msg":"Ok, I'll say wow a couple more times here.","username":"Dan","ts":"2020-11-13T22:02:18.649Z"}
{"msg":"Also add threshold signing to signatures after the refactor which relies on secret sharing schees","username":"MALodder","ts":"2020-11-13T22:02:58.096Z"}
{"msg":"Also add threshold signing to signatures after the refactor which relies on secret sharing schemes","username":"MALodder","ts":"2020-11-13T22:02:58.096Z"}
{"msg":"same with DKG","username":"MALodder","ts":"2020-11-13T22:03:09.608Z"}
{"msg":"thanks for the quick review","username":"MALodder","ts":"2020-11-13T22:03:18.290Z"}
{"msg":"Unfortunately I've burned all my ursa time for today and I won't get a chance to give you a full and substantive review right now. Maybe we can find some time next week and you could walk me or others through it. We could use the next ursa meeting but I think that's 2 weeks out which isn't ideal.","username":"Dan","ts":"2020-11-13T22:03:52.770Z"}
{"msg":"its in 3 weeks since due to Thanksgiving","username":"MALodder","ts":"2020-11-13T22:04:35.680Z"}
{"msg":"maybe we could do it this coming Wednesday","username":"MALodder","ts":"2020-11-13T22:06:24.256Z"}
{"msg":"Yeah, I've got some open slots wed. I need to jet now, but let's sync up over email or :rocket: at the beginning of the week and pick a slot on Wed.","username":"Dan","ts":"2020-11-13T22:08:28.585Z"}
{"msg":"Let's talk this coming Wednesday then?","username":"hartm","ts":"2020-11-13T22:33:32.947Z"}
{"msg":"sure that works for me","username":"MALodder","ts":"2020-11-13T22:35:33.673Z"}
{"msg":"Let's just shoot for a time a little later than 7 AM ;)","username":"hartm","ts":"2020-11-13T22:36:36.155Z"}
{"msg":"in the mean time, hart feel free to review this as well","username":"MALodder","ts":"2020-11-13T22:36:39.135Z"}
{"msg":"Sure.  I think I've already seen part of it.","username":"hartm","ts":"2020-11-13T22:37:03.711Z"}
{"msg":"I do have a conflict on wednesday at 9. I'm meeting with Rosario Gennaro and Steven Goldfeder to review my tECDSA implementation","username":"MALodder","ts":"2020-11-13T22:37:34.622Z"}
{"msg":"so I can't go too much later","username":"MALodder","ts":"2020-11-13T22:37:43.552Z"}
{"msg":"I don't have time today, but I should be able to finish well before a Wednesday meeting.","username":"hartm","ts":"2020-11-13T22:37:58.165Z"}
{"msg":"Oh nice!","username":"hartm","ts":"2020-11-13T22:38:06.411Z"}
{"msg":"right, it doesn't have to be today","username":"MALodder","ts":"2020-11-13T22:38:09.046Z"}
{"msg":"hopefully before wednesday","username":"MALodder","ts":"2020-11-13T22:38:17.728Z"}
{"msg":"Yeah.","username":"hartm","ts":"2020-11-13T22:38:22.274Z"}
{"msg":"OK, what times on Wednesday work for you then.","username":"hartm","ts":"2020-11-13T22:38:50.870Z"}
{"msg":"Our normal schedule does ","username":"MALodder","ts":"2020-11-14T05:35:21.731Z"}
{"msg":"@Dan , does that work for you?","username":"hartm","ts":"2020-11-14T19:16:05.072Z"}
{"msg":"Wed I can do (pacific time) 6, 9, 11 am. 12 and 2pm. Any of those work?","username":"Dan","ts":"2020-11-14T20:01:07.425Z"}
{"msg":"Also if the PR doesn't already mention it is there a certain paper or something I should read first?","username":"Dan","ts":"2020-11-14T20:03:44.454Z"}
{"msg":"Incidentally if you use Teams:\nhttps://microsoftteams.uservoice.com/forums/599053-schools-and-universities/suggestions/34497136-latex-math-input","username":"Dan","ts":"2020-11-15T03:12:34.663Z"}
{"msg":"Paper 1","username":"MALodder","ts":"2020-11-15T13:31:02.190Z"}
{"msg":"https://github.com/hyperledger/ursa/pull/165/files#diff-f98afd2fd215d02a063f519ec33b7ce1914ca6290bd35027423dd5273ea6aeefR23","username":"MALodder","ts":"2020-11-15T13:31:03.438Z"}
{"msg":"Paper 2 https://github.com/hyperledger/ursa/pull/165/files#diff-a1484dde30684fe48463ec84fb003a7f6872d15c127269a47f575ea4926253caR28","username":"MALodder","ts":"2020-11-15T13:31:20.219Z"}
{"msg":"Paper 3","username":"MALodder","ts":"2020-11-15T13:31:43.691Z"}
{"msg":"https://github.com/hyperledger/ursa/pull/165/files#diff-a1484dde30684fe48463ec84fb003a7f6872d15c127269a47f575ea4926253caR34","username":"MALodder","ts":"2020-11-15T13:31:44.232Z"}
{"msg":"I always inline the paper references","username":"MALodder","ts":"2020-11-15T13:31:50.572Z"}
{"msg":"in the code","username":"MALodder","ts":"2020-11-15T13:31:54.847Z"}
{"msg":"references are also in the README.md","username":"MALodder","ts":"2020-11-15T13:35:16.998Z"}
{"msg":"awesome thanks","username":"Dan","ts":"2020-11-15T16:25:25.724Z"}
{"msg":"@MALodder What works for you ?","username":"hartm","ts":"2020-11-17T02:37:24.416Z"}
{"msg":"2pm pst works","username":"MALodder","ts":"2020-11-17T02:37:59.023Z"}
{"msg":"12 would work best for me..  I could do 30 minutes at 2:00 (have a 2:30 meeting)/","username":"hartm","ts":"2020-11-17T02:38:12.830Z"}
{"msg":"I’ll see if I could do 12","username":"MALodder","ts":"2020-11-17T02:41:12.956Z"}
{"msg":"I’ll know tomorrow ","username":"MALodder","ts":"2020-11-17T02:41:20.708Z"}
{"msg":"Awesome, great.","username":"hartm","ts":"2020-11-17T02:41:36.500Z"}
{"msg":"noon PST wednesday works for me","username":"MALodder","ts":"2020-11-17T14:58:08.109Z"}
{"msg":"I have a zoom room we can use too","username":"MALodder","ts":"2020-11-17T14:58:14.785Z"}
{"msg":"Perfect--talk to you all then.","username":"hartm","ts":"2020-11-17T16:55:02.201Z"}
{"msg":"ACK","username":"Dan","ts":"2020-11-17T22:38:02.800Z"}
{"msg":"SYN ACK","username":"hartm","ts":"2020-11-17T22:38:21.260Z"}
{"msg":"FIN","username":"Dan","ts":"2020-11-17T22:38:27.837Z"}
{"msg":"any chance we can meet at 11:30 PST","username":"MALodder","ts":"2020-11-18T15:00:45.232Z"}
{"msg":"just 30 minutes early","username":"MALodder","ts":"2020-11-18T15:00:51.504Z"}
{"msg":"I have a meeting at 12:30 PST","username":"MALodder","ts":"2020-11-18T15:01:13.132Z"}
{"msg":"otherwise I'll only have 30 minutes","username":"MALodder","ts":"2020-11-18T15:03:16.528Z"}
{"msg":"I can't make it then, unfortunately, but you all are welcome to start without me.","username":"hartm","ts":"2020-11-18T16:58:12.717Z"}
{"msg":"okay lets plan on continuing it at noon then","username":"MALodder","ts":"2020-11-18T16:58:39.833Z"}
{"msg":"for anyone who wants to join the ursa code review","username":"MALodder","ts":"2020-11-18T19:13:37.385Z"}
{"msg":"https://us02web.zoom.us/j/5897053257","username":"MALodder","ts":"2020-11-18T19:13:37.933Z"}
{"msg":"in 45 minutes","username":"MALodder","ts":"2020-11-18T19:13:42.417Z"}
{"msg":"@hartm @Dan @brentzundel ^^^","username":"MALodder","ts":"2020-11-18T19:13:56.305Z"}
{"msg":"I'll join at noon.","username":"hartm","ts":"2020-11-18T19:15:24.616Z"}
{"msg":"pushed changes to the PR after suggestions from @hartm and @Dan","username":"MALodder","ts":"2020-11-20T16:03:28.641Z"}
{"msg":"I can't remember if we're meeting tomorrow or not.","username":"brentzundel","ts":"2020-11-24T22:48:02.120Z"}
{"msg":"I believe we were thinking of cancelling?  Will people be available?","username":"hartm","ts":"2020-11-24T23:00:29.930Z"}
{"msg":"@here Unless I hear otherwise, I'm going to suggest we cancel tomorrow's meeting.  It seems like a lot of people are taking the week off and will be unavailable for the meeting.","username":"hartm","ts":"2020-11-25T02:11:43.754Z"}
{"msg":"I’m out for vacation and won’t be attending ","username":"MALodder","ts":"2020-11-25T04:15:02.018Z"}
{"msg":"Has joined the channel.","username":"piyushmaheshwari65","ts":"2020-11-25T04:20:13.462Z","type":"uj"}
{"msg":"@here I'm technically on vacation too.  Let's cancel and meet up again in two weeks.  In the meantime, please feel free to discuss things via email or chat.  Thanks!","username":"hartm","ts":"2020-11-25T04:45:52.448Z"}
{"msg":"who owns the account on PyPi for ursa-python?","username":"brentzundel","ts":"2020-11-25T16:53:32.280Z"}
{"msg":"@brentzundel I own https://pypi.org/project/python-ursa/","username":"rjones","ts":"2020-11-25T17:27:59.074Z"}
{"msg":"well, the project owns, but I have control of it","username":"rjones","ts":"2020-11-25T17:28:30.038Z"}
{"msg":"That was my assumption, thanks for confirming.","username":"brentzundel","ts":"2020-11-25T17:42:49.920Z"}
{"msg":"do I need to do something with it?","username":"rjones","ts":"2020-11-25T17:43:04.693Z"}
{"msg":"Not at this point. I had a team member ask for details.","username":"brentzundel","ts":"2020-11-25T17:43:32.333Z"}
{"msg":"@rjones would you mind if they reached out to you directly to try and explain what they are looking to do?","username":"brentzundel","ts":"2020-11-25T17:45:40.343Z"}
{"msg":"please send email to community-architects@hyperledger.org so we're all on the same page","username":"rjones","ts":"2020-11-25T17:47:15.017Z"}
{"msg":"I own some of those I think... if you can include me in the emails that be great","username":"cam-parra","ts":"2020-11-30T21:35:37.342Z"}
{"msg":"@cam-parra the issue was https://pypi.org/project/python-ursa/ only had the wheel, not the source. I version bumped to 0.1.1 so I could publish the wheel and source.","username":"rjones","ts":"2020-12-02T14:49:41.614Z"}
{"msg":"and I deleted 0.1.0 because I didn't realize you couldn't republish deleted files","username":"rjones","ts":"2020-12-02T14:49:58.508Z"}
{"msg":"Does signature malleability demonstrate existential forgery?\nI.e. if a paper formally claims to be secure against existential forgery, but it is possible to mutate a signature and still have it verify with the same key, does that demonstrate a flaw?\nOr must you contrive a signature for a *different* message?","username":"Dan","ts":"2020-12-02T21:42:10.119Z"}
{"msg":"@Dan You have to forge a signature for a *different* message.","username":"hartm","ts":"2020-12-02T21:55:29.029Z"}
{"msg":"You can have non-malleable signatures, though, which have the property that you state.","username":"hartm","ts":"2020-12-02T21:55:52.307Z"}
{"msg":"Even stronger, there are unique signatures, where for each message there only exists one possible signature.","username":"hartm","ts":"2020-12-02T21:56:29.783Z"}
{"msg":"As an example of a signature scheme that is secure but trivially malleable, consider some existing signature scheme (KeyGen, Sign, Verify) with the usual form.  We can construct a silly scheme in the following way:","username":"hartm","ts":"2020-12-02T21:57:34.705Z"}
{"msg":"KeyGen' := Keygen","username":"hartm","ts":"2020-12-02T21:57:47.886Z"}
{"msg":"Sign' = Sign(sk, m) || 1","username":"hartm","ts":"2020-12-02T21:58:03.790Z"}
{"msg":"Verify' = Verify( sigma \\ last bit, vk)","username":"hartm","ts":"2020-12-02T21:58:28.291Z"}
{"msg":"where sigma \\","username":"hartm","ts":"2020-12-02T21:58:30.691Z"}
{"msg":"where sigma \\ last bit means delete the last bit from sigma.","username":"hartm","ts":"2020-12-02T21:58:30.691Z"}
{"msg":"Note flipping the last bit in each signature still constitutes a valid signature, which means we also have malleability.  But breaking the 'prime' scheme implies breaking the original signature scheme if you generate a signature on an unqueried message.","username":"hartm","ts":"2020-12-02T21:59:44.617Z"}
{"msg":"cool. thanks. Another example is flipping the y coord in ecdsa. In the context of how it was used in bitcoin that became a semantic flaw, but I guess that's a consequence of how ecdsa is used in that system and doesn't constitute a formal forgery.","username":"Dan","ts":"2020-12-03T00:28:46.899Z"}
{"msg":"why is it a semantic flaw?","username":"daidoji","ts":"2020-12-03T00:32:38.164Z"}
{"msg":"that's not a formal term. I just mean that bitcoin made assumptions that there was only one signature for a given message but because elliptic curves are symmetric you can have two valid signatures (one with a +y and one with a -y).","username":"Dan","ts":"2020-12-03T00:34:14.871Z"}
{"msg":"Coming back to existential forgery...\nIn most systems you have some sort of hash_to_group function where you take the message and squish it into a point.\nIf I can produce a valid signature for the same key but modifying the hash result does that count? Or must it be a change to the plain text message / know the preimage.\ni.e. \nverify(p=hash(m), sig, pk)\nverify(p'=hash(m)+1, sig, pk)\ndoes that count or must I modify m directly?","username":"Dan","ts":"2020-12-03T00:39:04.578Z"}
{"msg":"Coming back to existential forgery...\nIn most systems you have some sort of hash_to_group function where you take the message and squish it into an element.\nIf I can produce a valid signature for the same key but modifying the hash result does that count? Or must it be a change to the plain text message / know the preimage.\ni.e. \nverify(p=hash(m), sig, pk)\nverify(p'=hash(m)+1, sig, pk)\ndoes that count or must I modify m directly?","username":"Dan","ts":"2020-12-03T00:39:04.578Z"}
{"msg":"The hash is deterministic.  So if you can find two messages m, m' such that H(m) = H(m'), then you're breaking the collision resistance of the hash.","username":"hartm","ts":"2020-12-03T00:54:42.418Z"}
{"msg":"No, you need to modify m directly.  Remember that, to win the game, you need to provide a pair (m, \\sigma) such that Verify(m, \\sigma, vk) = 1.  So you have to modify m directly.  You can also think about the practical ramifications of this definition.  What good is the second verify equation you presented above?  No one will accept it as a valid signature, so it's not a good forgery.","username":"hartm","ts":"2020-12-03T00:56:37.435Z"}
{"msg":"Fair enough. Thanks. :)","username":"Dan","ts":"2020-12-03T03:02:36.079Z"}
{"msg":"@MALodder I'm in the middle of doing the k256 library change. I don't remember why we have this rustlibsecp256k1 feature defined here:\nhttps://github.com/hyperledger/ursa/blob/master/libursa/src/lib.rs#L84-L85\nas opposed to just relying on `feature = \"ecdsa_secp256k1\"` \nI think the latter is the main feature exposure, i.e. we have 3 flavors:\necdsa_secp256k1 (pure rust); ecdsa_secp256k1_native (bitcoin lib); and ecdsa_secp256k1_asm (bitcoin lib);","username":"Dan","ts":"2020-12-04T21:26:17.345Z"}
{"msg":"It’s there for rust only features ","username":"MALodder","ts":"2020-12-04T21:45:31.839Z"}
{"msg":"ok, I thought ecdsa_secp256k1 is (a/the?) feature definition for rust only","username":"Dan","ts":"2020-12-04T21:59:52.031Z"}
{"msg":"I don't understand how these are different","username":"Dan","ts":"2020-12-04T22:04:49.468Z"}
{"msg":"Question #2... This seems like it should be a build-time error:\nhttps://github.com/hyperledger/ursa/blob/master/libursa/src/signatures/secp256k1.rs#L198\nAs far as I can tell that should be \n`libsecp256k1::key::PublicKey`\nThe bitcoin library does not list `PublicKey` as a top level object.\n\nThey have an example with the appearance of a higher level struct but the actual code has to import the `key` module.\nis there any chance we aren't building this in CI? I mean I know this is 99% probability I'm just missing some language thing but I thought I'd ask before spending an hour side track in to the build.","username":"Dan","ts":"2020-12-04T22:21:20.437Z"}
{"msg":"bitcoin lib example code:\nhttps://github.com/rust-bitcoin/rust-secp256k1/blob/master/src/lib.rs#L76-L80\nactual code:\nhttps://github.com/rust-bitcoin/rust-secp256k1/blob/master/src/lib.rs#L76-L80","username":"Dan","ts":"2020-12-04T22:22:38.325Z"}
{"msg":"bitcoin lib example code:\nhttps://github.com/rust-bitcoin/rust-secp256k1/blob/master/src/lib.rs#L76-L80\nactual code:\nhttps://github.com/rust-bitcoin/rust-secp256k1/blob/master/src/lib.rs#L149-L150","username":"Dan","ts":"2020-12-04T22:22:38.325Z"}
{"msg":"Native Bitcoin uses C under the hood","username":"MALodder","ts":"2020-12-07T03:13:34.267Z"}
{"msg":"Sorry I guess I'm not asking clearly, but it's also probably not super important.. there's two 'features' we have that are both labeled for pure rust, i.e. they both use the same rust lib, not the rust-wrapping of the bitcoin lib. If you recall why lemme know.","username":"Dan","ts":"2020-12-07T14:30:49.081Z"}
{"msg":"no they're not the same library","username":"MALodder","ts":"2020-12-07T15:31:50.502Z"}
{"msg":"also I can get some +1's for the secret sharing PR","username":"MALodder","ts":"2020-12-07T15:32:18.934Z"}
{"msg":"fyi, I've got a conflict tomorrow. will miss the ursa meeting. :(","username":"Dan","ts":"2020-12-08T16:58:41.417Z"}
{"msg":"I will most likely be late to the Ursa meeting","username":"MALodder","ts":"2020-12-09T13:45:34.751Z"}
{"msg":"not sure if this is the right group, but where do these key prefixes come from?  https://w3c-ccg.github.io/did-method-key/#p-256","username":"daidoji","ts":"2020-12-09T19:02:43.600Z"}
{"msg":"Or like, how did they choose these prefixes?","username":"daidoji","ts":"2020-12-09T19:03:11.968Z"}
{"msg":"Has joined the channel.","username":"zhenbing","ts":"2020-12-14T08:56:39.391Z","type":"uj"}
{"msg":"Has joined the channel.","username":"neilbts","ts":"2020-12-18T17:06:37.223Z","type":"uj"}
{"msg":"Has joined the channel.","username":"pfeairheller","ts":"2020-12-21T11:57:13.022Z","type":"uj"}
{"msg":"Is there still interest in having a meeting tomorrow morning? I know some people discussed in the last meeting, but I wanted to make sure everyone still wanted to talk.","username":"hartm","ts":"2020-12-22T19:43:32.267Z"}
{"msg":"I would like to meet to discuss a better signing interface to account for ECDSA, Schnorr, and BLS","username":"MALodder","ts":"2020-12-22T22:00:00.985Z"}
{"msg":"how to account for threshold signing as well","username":"MALodder","ts":"2020-12-22T22:00:40.843Z"}
{"msg":"@MALodder -- any progress on the new revocation scheme you've been working on with Tobias?","username":"swcurran","ts":"2020-12-22T22:05:56.932Z"}
{"msg":"yes the code is finished but I haven't put it into ursa yet","username":"MALodder","ts":"2020-12-22T22:06:39.208Z"}
{"msg":"Has the code been peer reviewed?  I think you said you were working on that...","username":"swcurran","ts":"2020-12-22T22:10:07.902Z"}
{"msg":"hart has reviewed","username":"MALodder","ts":"2020-12-22T22:26:48.074Z"}
{"msg":"@hartm and another cryptographyer","username":"MALodder","ts":"2020-12-22T22:27:00.470Z"}
{"msg":"@hartm and another cryptographer","username":"MALodder","ts":"2020-12-22T22:27:00.470Z"}
{"msg":"I'm up to meet","username":"brentzundel","ts":"2020-12-22T23:01:05.323Z"}
{"msg":"Great!  Let's talk tomorrow morning.","username":"hartm","ts":"2020-12-23T00:00:33.803Z"}
{"msg":"I've also written up our quarterly report.  https://wiki.hyperledger.org/display/TSC/2020+Q4+Hyperledger+Ursa  Please feel free to edit as you see fit.","username":"hartm","ts":"2020-12-23T00:12:26.601Z"}
{"msg":"I've also posted an agenda for the meeting tomorrow.  Please feel free to edit as you all see fit.  Thanks!","username":"hartm","ts":"2020-12-23T04:34:34.859Z"}
{"msg":"heres the paper on distributed BBS+ https://www.orbs.com/wp-content/uploads/2019/04/Crypto_Group_signatures-2.pdf","username":"MALodder","ts":"2020-12-28T14:56:13.365Z"}
{"msg":"HNY! I have a conflict this morning. I'm working on https://github.com/hyperledger/ursa/issues/163 and should have that ready before our next meeting.","username":"Dan","ts":"2021-01-06T14:52:08.310Z"}
{"msg":"Given digitally signed messages m_i with public keys p_i. Can I prove that the sum is M  = Sum_i m_i without disclosing the individual messages? What digital signature schemes and cryptographic primitives would be suitable for this use case? Any pointers?","username":"domwoe","ts":"2021-01-08T12:30:55.076Z"}
{"msg":"You can do this with general purpose SNARKs (or, more generally, general purpose ZK proofs).","username":"hartm","ts":"2021-01-09T00:36:13.869Z"}
{"msg":"Has joined the channel.","username":"coffeethecup","ts":"2021-01-13T10:28:56.832Z","type":"uj"}
{"msg":"In some of the papers that have been posted here and in the meetings they describe their security proofs as \"proof by simulation\".  I think I get the gist of it from the proofs that have been presented in the papers, but is there a more coherent and full write up on the topic of security proof \"by simulation\"?  ex) https://www.orbs.com/wp-content/uploads/2019/04/Crypto_Group_signatures-2.pdf uses this technique","username":"daidoji","ts":"2021-01-14T14:13:24.436Z"}
{"msg":"In some of the papers that have been posted here and in the meetings they describe their security proofs as \"proof by simulation\".  I think I get the gist of it from the context of the proofs that have been presented in the papers, but is there a more coherent and full write up on the topic of security proof \"by simulation\"?  ex) https://www.orbs.com/wp-content/uploads/2019/04/Crypto_Group_signatures-2.pdf uses this technique","username":"daidoji","ts":"2021-01-14T14:13:24.436Z"}
{"msg":"I'm not sure.  Maybe a crypto textbook is your best bet (e.g. Katz-Lindell)?","username":"hartm","ts":"2021-01-14T14:48:34.338Z"}
{"msg":"ahh roger.","username":"daidoji","ts":"2021-01-14T14:56:31.354Z"}
{"msg":"Has joined the channel.","username":"HarshMultani","ts":"2021-01-14T17:35:01.379Z","type":"uj"}
{"msg":"Hi Everyone, we at Fujitsu Laboratories are planning to develop a Zero Knowledge Framework where application developers can easily switch among various zero knowledge libraries. I can talk in a bit more details in tomorrow's meeting, but we would like to get Ursa communities feedback and if this is something that you think would be helpful for everybody. Please note, zk-interface by QED-it attains some of the broad goals that we want to achieve https://github.com/QED-it/zkinterface , but it is not exactly user friendly.","username":"avradip","ts":"2021-01-19T19:06:20.882Z"}
{"msg":"@avradip Great!  I'll add you to the meeting agenda tomorrow.","username":"hartm","ts":"2021-01-19T19:40:38.679Z"}
{"msg":"For those that are interested","username":"MALodder","ts":"2021-01-20T19:01:17.020Z"}
{"msg":"https://github.com/algorand/pairing-plus/pull/18","username":"MALodder","ts":"2021-01-20T19:01:17.582Z"}
{"msg":"Has left the channel.","username":"ajayjadhav","ts":"2021-01-21T12:11:48.972Z","type":"ul"}
{"msg":"we should consider this for ursa https://datatracker.ietf.org/doc/draft-komlo-frost/?include_text=1","username":"MALodder","ts":"2021-01-28T15:33:54.325Z"}
{"msg":"Yeah.  Definitely worth considering.","username":"hartm","ts":"2021-01-28T17:34:35.895Z"}
{"msg":"found someone maintaining pairing-plus in a fork called paired","username":"MALodder","ts":"2021-01-29T20:19:57.737Z"}
{"msg":"so if we use that then we don't need to maintain a fork in ursa","username":"MALodder","ts":"2021-01-29T20:20:11.628Z"}
{"msg":"unfortunately it requires modifying some stuff","username":"MALodder","ts":"2021-01-29T20:37:50.268Z"}
{"msg":"Can you link the fork?","username":"hartm","ts":"2021-01-30T00:18:07.406Z"}
{"msg":"https://crates.io/crates/paired","username":"MALodder","ts":"2021-01-31T14:26:22.738Z"}
{"msg":"Has joined the channel.","username":"karthiksamaganam","ts":"2021-02-01T14:41:04.744Z","type":"uj"}
{"msg":"Has joined the channel.","username":"manikamittal","ts":"2021-02-03T07:54:20.244Z","type":"uj"}
{"msg":"Howdy - I need one more approval to switch the default branch: https://github.com/hyperledger/ursa/pull/172","username":"rjones","ts":"2021-02-03T15:15:40.036Z"}
{"msg":"Has joined the channel.","username":"luis.marado","ts":"2021-02-04T10:49:52.236Z","type":"uj"}
{"msg":"Howdy - I'm working on moving the CI to GitHub Actions; [I need a merge for docs please](https://github.com/hyperledger/ursa-docs/pull/16)","username":"rjones","ts":"2021-02-08T14:42:39.069Z"}
{"msg":"Howdy - step two for [ursa docs move to GHA](https://github.com/hyperledger/ursa-docs/pull/17) needs a +1","username":"rjones","ts":"2021-02-09T13:56:14.608Z"}
{"msg":"I'll also note that you should be able to [delete these stale branches](https://github.com/hyperledger/ursa/branches) if you desire","username":"rjones","ts":"2021-02-09T14:01:10.120Z"}
{"msg":"Howdy - step one to move [main repo Ursa CI](https://github.com/hyperledger/ursa/pull/173) from AZP to GHA. I noticed on both, the test step runs 0 tests - is that by design?","username":"rjones","ts":"2021-02-09T14:58:01.510Z"}
{"msg":"Hi - I need one more +1: https://github.com/hyperledger/ursa/pull/173","username":"rjones","ts":"2021-02-11T01:52:35.833Z"}
{"msg":"fyi, I can't make the wed meeting. unavoidable conflict. plz save me a donut.","username":"Dan","ts":"2021-02-17T05:52:57.511Z"}
{"msg":"Has joined the channel.","username":"da3v21","ts":"2021-02-17T12:57:14.328Z","type":"uj"}
{"msg":"Sorry guys it’s dumped 30 “ of fresh powder and still snowing. I’ll be skiing during the meeting ","username":"MALodder","ts":"2021-02-17T14:41:55.247Z"}
{"msg":"Might attend if I have reception while waiting in to get up the canyon","username":"MALodder","ts":"2021-02-17T14:50:21.075Z"}
{"msg":"https://wiki.hyperledger.org/display/ursa/2020-02-17+Meeting+Agenda","username":"hartm","ts":"2021-02-17T15:03:44.377Z"}
{"msg":"https://web.eecs.umich.edu/~cpeikert/pubs/nizk-lwe.pdf","username":"hartm","ts":"2021-02-17T15:29:40.306Z"}
{"msg":"https://eprint.iacr.org/2017/956.pdf","username":"hartm","ts":"2021-02-17T15:30:21.471Z"}
{"msg":"Just curious was there any research done into post-quantum cryptography and are there any plans to implement it?","username":"eadventurous","ts":"2021-02-18T12:36:57.878Z"}
{"msg":"I think there was a discussion about that on the call yesterday if you listen to that recording.  There has been work done but that's as far as my understanding goes.","username":"daidoji","ts":"2021-02-18T13:30:39.422Z"}
{"msg":"@daidoji can you send me a link to the recordings? I found the agenda of the meetings but no recordings yet...","username":"eadventurous","ts":"2021-02-18T14:22:18.406Z"}
{"msg":"oh I'm sorry, I guess we weren't recording.  Sorry.  Hopefully someone else will be able to help you in here.","username":"daidoji","ts":"2021-02-18T14:24:26.121Z"}
{"msg":"I have the recording but need to upload it (zoom takes forever to process it, so it's not uncommon for me to forget, unfortunately).","username":"hartm","ts":"2021-02-18T14:55:41.677Z"}
{"msg":"What kind of post-quantum crypto are you interested in?  I can probably just answer your questions here rather than you having to listen to an entire meeting.  We also didn't talk about general post-quantum strategy in the meeting, either.","username":"hartm","ts":"2021-02-18T14:56:27.571Z"}
{"msg":"We do have a plan to implement basic post-quantum crypto (i.e. signatures and key exchange/basic encryption).  So far, no one is really interested in using it though, so we haven't progressed too far.","username":"hartm","ts":"2021-02-18T14:57:21.737Z"}
{"msg":"If you're interested in post-quantum ZK and stuff like that, then it gets much more complicated.","username":"hartm","ts":"2021-02-18T14:57:43.599Z"}
{"msg":"I am from Hyperledger Iroha team and we are potentially interested in quantum resistant cryptography (public key signatures and encryption algorithms). But it is a long term goal though we were thinking to propose a its research and MVP integration as an internship. And naturally as we are using ursa, we wanted to check at first if you support it already.","username":"eadventurous","ts":"2021-02-18T15:03:03.505Z"}
{"msg":"We're definitely planning on supporting those.  We are also waiting on the NIST post-quantum competition to wrap up, as our implementations will likely be based on whatever wins that.","username":"hartm","ts":"2021-02-18T15:06:43.873Z"}
{"msg":"That should be later this year.","username":"hartm","ts":"2021-02-18T15:06:58.102Z"}
{"msg":"What's your timeline for needing post-quantum crypto?","username":"hartm","ts":"2021-02-18T15:07:05.332Z"}
{"msg":"We don't have any specific date for this yet, I think if ursa will support it by the end of this year or beginning of the next, this will suit us.","username":"eadventurous","ts":"2021-02-18T15:19:11.318Z"}
{"msg":"Great.  Are you following the NIST competition?  We're planning on really diving into it once that wraps up.  At that point, it makes sense to really spend some time on it (and we'd be happy to have your participation).","username":"hartm","ts":"2021-02-18T15:20:15.826Z"}
{"msg":"Thank you for the suggestion! Yes, we will try to follow. Sure we will be happy to contribute to Ursa if our priorities will allow that, when the development starts.","username":"eadventurous","ts":"2021-02-18T15:35:27.361Z"}
{"msg":"Even if you don't have time or resources to contribute, it'd still be useful to hear your requirements and how you want to use post-quantum crypto.  So definitely stay in touch!","username":"hartm","ts":"2021-02-18T15:36:00.448Z"}
{"msg":"Ok, sure","username":"eadventurous","ts":"2021-02-18T16:38:11.126Z"}
{"msg":"https://events.linuxfoundation.org/hyperledger-global-forum/program/cfp/","username":"hartm","ts":"2021-03-03T15:11:05.573Z"}
{"msg":"@Dan I don't think I've ever heard you this excited!","username":"hartm","ts":"2021-03-03T15:19:49.174Z"}
{"msg":"https://www.cs.bu.edu/~reyzin/papers/fuzzy.pdf","username":"hartm","ts":"2021-03-03T15:43:57.959Z"}
{"msg":"@FriendsOfBoaty https://www.startribune.com/big-winner-in-mndot-s-snowplow-contest-plowy-mcplowface/600029697/","username":"Dan","ts":"2021-03-03T20:12:23.103Z"}
{"msg":"Nice!  I assume you were instrumental in the campaign.\\","username":"hartm","ts":"2021-03-03T22:00:38.832Z"}
{"msg":"I found out about it after the fact. But if I had known I would have told my friend Sybil and there would be 6M more votes :-D","username":"Dan","ts":"2021-03-04T15:55:36.266Z"}
{"msg":"Oh wow, so those \"sigils\" from the scifi novel Daemon are possible?  That's awesome.","username":"daidoji","ts":"2021-03-10T13:26:11.143Z"}
{"msg":"I have not read that novel.  But fuzzy crypto is essential for things like biometrics.","username":"hartm","ts":"2021-03-10T17:17:24.340Z"}
{"msg":"Oh its a \"cool ideas\" scifi novel.  \n\nIn the novel various agents of the antagonist (which was a giant AI decentralized social network thing) produced \"sigils\" to prove that they really were working for the giant AI decentralized network.  \n\nI'm not gonna do it justice but they were like cryptographically signed images that humans could also recreate and verify.\n\nSo like human being traces some pattern in the air -> generates signed sigil.  Other humans could look at a sigil and see if it was valid or not (but also in the background software the AI network gave the human agents would verify it cryptographically).","username":"daidoji","ts":"2021-03-10T18:08:08.436Z"}
{"msg":"I thought was a cool idea, but had no way to go about it","username":"daidoji","ts":"2021-03-10T18:08:43.325Z"}
{"msg":"I'm not sure we'll ever be able to have human verifiable cryptography, unfortunately.","username":"hartm","ts":"2021-03-10T18:54:27.123Z"}
{"msg":"unfortunately, but human eyes are pretty good at spotting differences that aren't pathological","username":"daidoji","ts":"2021-03-10T19:10:59.652Z"}
{"msg":"still thought it was a cool idae","username":"daidoji","ts":"2021-03-10T19:11:03.781Z"}
{"msg":"Conflict this morning. I might make the second half.","username":"Dan","ts":"2021-03-17T13:48:55.750Z"}
{"msg":"Blog post: https://dwhuseby.medium.com/the-authentic-data-economy-9802da67e1fa","username":"hartm","ts":"2021-03-17T14:26:22.065Z"}
{"msg":"I just created our quarterly report:  https://wiki.hyperledger.org/display/TSC/2021+Q1+Hyperledger+Ursa .  Feel free to edit as you all see fit!  Thanks!","username":"hartm","ts":"2021-03-17T20:09:18.906Z"}
{"msg":"When you put:\n>The first iteration of this infrastructure was slow, did not scale, was overly simplistic in some ways and wildly over-complicated in other ways and therefore prevented the ADE from being possible.\n\nand link to the ToIP RFC  what parts did you think were too simple and which parts did you think were far too complex in particular?","username":"daidoji","ts":"2021-03-19T13:56:11.930Z"}
{"msg":"or was it just the rest of the stuff in that paragraph below?","username":"daidoji","ts":"2021-03-19T13:56:56.071Z"}
{"msg":"It's Dave Huseby's blog post--you may want to ask him @dhuseby","username":"hartm","ts":"2021-03-19T15:47:29.363Z"}
{"msg":"ahh indeed","username":"daidoji","ts":"2021-03-19T17:18:06.325Z"}
{"msg":"Just came across this: https://en.wikipedia.org/wiki/Secure_Remote_Password_protocol\nWhich reminded me of the protocol that @MALodder showed a few weeks back.","username":"Dan","ts":"2021-03-23T19:21:00.044Z"}
{"msg":"The protocols Mike described are a bit orthogonal to PAKEs, but for a similar application.  ZK authentication is pretty neat, though, and I'd love to see it in practice.","username":"hartm","ts":"2021-03-23T22:24:11.964Z"}
{"msg":"Hi, just curious, what is the protocol you are talking about ? I've heard of OPAQUE but it is still a PAKE.","username":"lmtriet","ts":"2021-03-24T13:12:28.540Z"}
{"msg":"I have read the Groth signature implementation in libzmix (groth_sig.rs) and there is a part in the code that does not follow the paper which might lead to signature forgery. It is OK you to discuss it here ? Please let me know. Thanks.","username":"lmtriet","ts":"2021-03-24T19:48:17.433Z"}
{"msg":"Thanks for bringing this up.  here is the link for security bug reporting:  https://github.com/hyperledger/ursa/blob/main/SECURITY.md","username":"hartm","ts":"2021-03-24T22:10:41.737Z"}
{"msg":"Feel free to PM me or any of the other maintainers if you have questions.","username":"hartm","ts":"2021-03-24T22:11:33.924Z"}
{"msg":"I have tried Jira but Ursa is not in the dropdown list of the field project. So I just dropped an email for you.","username":"lmtriet","ts":"2021-03-24T23:24:06.838Z"}
{"msg":"I got the email.  Thanks!  I'll go over it and get back to you.","username":"hartm","ts":"2021-03-25T00:02:43.243Z"}
{"msg":"I responded. via email.  Let me know what you think.  And thanks again!","username":"hartm","ts":"2021-03-25T01:02:35.758Z"}
{"msg":"Hello! I couldn't compile ursa project from source, whnever I try I'm getting seg fault and no descriptive reason why it is happening. So my question is have anyone encounter this error before and know how to solve it?","username":"dgt1nsty","ts":"2021-03-29T14:56:41.342Z"}
{"msg":"Can you post more details?  It's going to be hard to help you otherwise.  Thanks!","username":"hartm","ts":"2021-03-29T15:14:37.399Z"}
{"msg":"I build my env for my ubuntu 16.04 machine and get it from ursa project to my local and I build from source using cargo build --release command. When I execute he resulting artifact libursa.so  I get seg fault. You can see from picture.","username":"dgt1nsty","ts":"2021-03-29T15:26:48.753Z"}
{"msg":"I build my env for my ubuntu 16.04 machine and get ursa project to my local after that I build from source using cargo build --release command. When I execute he resulting artifact libursa.so  I get seg fault. You can see from picture.","username":"dgt1nsty","ts":"2021-03-29T15:26:48.753Z"}
{"msg":"I build my env for my ubuntu 16.04 machine and get ursa project to my local after that I build from source using cargo build --release command. When I execute the resulting artifact libursa.so  I get seg fault. You can see from picture.","username":"dgt1nsty","ts":"2021-03-29T15:26:48.753Z"}
{"msg":"","username":"dgt1nsty","ts":"2021-03-29T15:26:56.495Z","attachments":[{"type":"file","title":"error.PNG","title_link":"/file-upload/q86bGBpbztNtAskE5/error.PNG","image_url":"/file-upload/q86bGBpbztNtAskE5/error.PNG","image_type":"image/png","image_size":22706,"url":"/file-upload/q86bGBpbztNtAskE5/error.PNG","remote":false,"fileId":"q86bGBpbztNtAskE5","fileName":"error.PNG"}]}
{"msg":"That's weird.  I haven't done an Ubuntu build myself.","username":"hartm","ts":"2021-03-29T15:30:23.466Z"}
{"msg":"I tried it on other ubuntu version but I got the same result. May I ask which platform did you try it.","username":"dgt1nsty","ts":"2021-03-29T15:32:35.236Z"}
{"msg":"I tried it on other ubuntu versions too but I got the same result. May I ask which platform did you try it.","username":"dgt1nsty","ts":"2021-03-29T15:32:35.236Z"}
{"msg":"Most people build it on Macs, I think.","username":"hartm","ts":"2021-03-29T15:33:26.657Z"}
{"msg":"I am sure some Aries people work on Ubuntu though--you may want to see if they respond to this eventually.","username":"hartm","ts":"2021-03-29T15:34:22.832Z"}
{"msg":"Thank you.","username":"dgt1nsty","ts":"2021-03-29T15:42:11.240Z"}
{"msg":"Of course!  Sorry I couldn't be more helpful.","username":"hartm","ts":"2021-03-29T15:43:15.505Z"}
{"msg":"No problem, thanks a lot for your reply I guess l need to try to dig deeper to find a solution","username":"dgt1nsty","ts":"2021-03-29T15:47:14.193Z"}
{"msg":"One issue, it’s a shared library, not an executable.","username":"andrew.whitehead","ts":"2021-03-29T16:25:20.704Z"}
{"msg":"yes you're right @andrew.whitehead  actually what I wanted to do is test functions on library but I'm getting errors regarding cargo test","username":"dgt1nsty","ts":"2021-03-30T10:04:27.522Z"}
{"msg":"yes you're right @andrew.whitehead  actually what I wanted to do is test specific functions in a library but I'm getting errors regarding cargo test","username":"dgt1nsty","ts":"2021-03-30T10:04:27.522Z"}
{"msg":"","username":"dgt1nsty","ts":"2021-03-30T10:04:58.257Z","attachments":[{"type":"file","title":"test_errors.PNG","title_link":"/file-upload/B5pzgKh7veK7oBFB5/test_errors.PNG","image_url":"/file-upload/B5pzgKh7veK7oBFB5/test_errors.PNG","image_type":"image/png","image_size":111593,"url":"/file-upload/B5pzgKh7veK7oBFB5/test_errors.PNG","remote":false,"fileId":"B5pzgKh7veK7oBFB5","fileName":"test_errors.PNG"}]}
{"msg":"apologies for missing today. I am double booked.","username":"brentzundel","ts":"2021-03-31T14:04:00.974Z"}
{"msg":"iirc the cargo files are in a weird state.. we turned things off to restructure the repo and are half-way through the restructuring. To get things to build you have to do some fiddling in the cargo files. Sorry that is very hand-wavey. Probably time for us to fix that.","username":"Dan","ts":"2021-03-31T14:07:39.265Z"}
{"msg":"@brentzundel we're going to have to dock your ursa pay.","username":"Dan","ts":"2021-03-31T14:15:21.197Z"}
{"msg":"dang, but only by 6 minutes, my other meeting was cancelled!","username":"brentzundel","ts":"2021-03-31T14:17:03.744Z"}
{"msg":"too bad. we already divided up all your ursacoins.","username":"Dan","ts":"2021-03-31T14:27:50.560Z"}
{"msg":"\"I'm not calling them stupid, I'm just saying they're doing it all wrong.\"","username":"hartm","ts":"2021-03-31T14:29:45.692Z"}
{"msg":"Liberate the NFTs!! Defend against the truncation attack! Long live the bear!!!","username":"Dan","ts":"2021-03-31T14:31:39.729Z"}
{"msg":"","username":"MALodder","ts":"2021-03-31T14:34:36.196Z","attachments":[{"type":"file","title":"nist.pdf","title_link":"/file-upload/TzSQW54ZRerMk8695/nist.pdf","url":"/file-upload/TzSQW54ZRerMk8695/nist.pdf","remote":false,"fileId":"TzSQW54ZRerMk8695","fileName":"nist.pdf"}]}
{"msg":"I'm curious to read more about the git usage.","username":"Dan","ts":"2021-03-31T14:41:17.725Z"}
{"msg":"Thanks @Dan for your reply.","username":"dgt1nsty","ts":"2021-04-01T06:58:53.901Z"}
{"msg":"Has joined the channel.","username":"echsecutor","ts":"2021-04-03T19:44:19.549Z","type":"uj"}
{"msg":"Has joined the channel.","username":"HighBrow","ts":"2021-04-04T07:38:03.002Z","type":"uj"}
{"msg":"Has joined the channel.","username":"egidio.casati","ts":"2021-04-17T18:53:58.510Z","type":"uj"}
{"msg":"Is there a set of standardized claims that are relevant to aries? I'm not sure if it would be a self-sovereign ID thing or something else. I'm looking at JWT right now for example: https://www.iana.org/assignments/jwt/jwt.xhtml","username":"Dan","ts":"2021-04-22T19:21:06.355Z"}
{"msg":"Not at the Aries level as it is up to Issuers to decide what they want to issue and verifiers on what they are will to accept (what claims from what issuers).","username":"swcurran","ts":"2021-04-22T20:27:10.771Z"}
{"msg":"thanks @swcurran! Is there a standardized claim format? and/or is there something formalized with claims in DID or dependency of DID (I haven't had the opportunity to go deep on DIDs but I did poke around for claims and didn't see formalizations in the core spec).","username":"Dan","ts":"2021-04-23T17:30:38.650Z"}
{"msg":"@swcurran Are there recommended/popular specifications?","username":"hartm","ts":"2021-04-23T20:48:34.970Z"}
{"msg":"Claims are put into verifiable credentials.  There is a standard for verifiable credentials from the W3C, and Indy AnonCreds has a format that pre-dates the W3C standard.  There is not a DID dependency on VCs, VCs are tied to a signature scheme, the keys for which might come from DIDs.  VCs hold an arbitrary bucket of claims and can be used for anything.\n\nAt the Aries level, there are no recommended specs. for credentials or claims.  That happens at a higher level in the trust over IP stack and relates to the ecosystem.\n\nOne of the fun parts (AFAIK) in the use of JWTs to hold the VCs is that JWTs have those preset list of claims.  But I'm not deep on JWTs and VCs, as my experience is mostly with Indy credentials and a little bit (but gaining) on JSON-LD.\n\nIs that getting towards the answers to what you are asking?","username":"swcurran","ts":"2021-04-23T23:03:36.269Z"}
{"msg":"Yeah, thanks!","username":"hartm","ts":"2021-04-23T23:15:00.318Z"}
{"msg":"Hi, is this paper (https://github.com/hyperledger-archives/indy-crypto/blob/master/libindy-crypto/docs/AnonCred.pdf) the description of what was actually implemented in HL indy/ursa?","username":"paul.bastian","ts":"2021-04-26T13:01:48.146Z"}
{"msg":"yes","username":"MALodder","ts":"2021-04-26T20:04:10.566Z"}
{"msg":"https://wiki.hyperledger.org/display/ursa/2021-04-28+Meeting+Agenda","username":"hartm","ts":"2021-04-28T14:05:38.172Z"}
{"msg":"Evernym has assigned an engineer to spend a few hours a week on Ursa. @MALodder is pointing him at the open issues the best thing to do?","username":"brentzundel","ts":"2021-04-28T17:55:12.574Z"}
{"msg":"Has joined the channel.","username":"nhwn","ts":"2021-04-28T21:05:22.621Z","type":"uj"}
{"msg":"Hi, I'm the aforementioned engineer -- glad to be aboard! As I understand it, my task is to get `libursa` to successfully build + have tests running on Ubuntu 20.04. Are there any contribution guidelines/documentation that I should be aware of?","username":"nhwn","ts":"2021-04-28T21:34:20.643Z"}
{"msg":"@nhwn be sure to use DCO sign-off on every commit - `git commit -s ...`","username":"rjones","ts":"2021-04-28T21:45:54.270Z"}
{"msg":"@nhwn [the build stuff lives here](https://github.com/hyperledger/ursa/tree/main/.github/workflows)","username":"rjones","ts":"2021-04-28T21:46:44.303Z"}
{"msg":"@nhwn feel free to edit that work flow, or start a new one","username":"rjones","ts":"2021-04-28T21:47:41.878Z"}
{"msg":"@MALodder would you be willing to publish a new release - `v0.3.6` - to resolve https://github.com/hyperledger/ursa/issues/178 ? I notice there are more releases on crates.io than on GitHub, as well","username":"rjones","ts":"2021-04-28T22:05:17.827Z"}
{"msg":"@hartm Sorry I missed today's call. Looking at the open PRs and issues, I think a lot of weeding could happen - what do the maintainers think about closing the outstanding PRs and doing a pass over the open issues to triage them?","username":"rjones","ts":"2021-04-28T22:10:50.722Z"}
{"msg":"There is definitely some refactoring work that needs to be done.","username":"hartm","ts":"2021-04-28T22:58:30.191Z"}
{"msg":"I think that would be a part of it @rjones .","username":"hartm","ts":"2021-04-28T22:59:11.173Z"}
{"msg":"Hi, I've seen this paper (https://github.com/cryptosubtlety/zero/blob/main/0.pdf) in the BLS Signature RFC, it seems to me that in general the attack model does not apply to Hyperledger Indy, because only nodes generate keys and signatures and they are kind of trustworthy + public keys can be checked against null. I've also seen in the bls.rs comments that the  rogue public key attack was considered as a seperate function, are the other zero attacks considered or relevant at all?","username":"paul.bastian","ts":"2021-04-30T14:00:47.559Z"}
{"msg":"I'll take a look later today","username":"MALodder","ts":"2021-04-30T15:51:53.421Z"}
{"msg":"Has joined the channel.","username":"dcspinho","ts":"2021-04-30T18:06:25.930Z","type":"uj"}
{"msg":"Hello. Does Ursa SDK exist?","username":"dcspinho","ts":"2021-04-30T18:06:26.720Z"}
{"msg":"this isn't a threat to the crypto itself, just how its used. Indy isn't vulnerable since they use proof of possession","username":"MALodder","ts":"2021-05-04T14:02:27.707Z"}
{"msg":"ursa = \"0.3.5\"","username":"MALodder","ts":"2021-05-04T14:02:49.896Z"}
{"msg":"https://crates.io/crates/ursa","username":"MALodder","ts":"2021-05-04T14:02:57.457Z"}
{"msg":"only library?","username":"dcspinho","ts":"2021-05-04T14:03:44.874Z"}
{"msg":"what do you plan to do with ursa? ursa is a crypto library, if you are looking for higher end protocols, then Aries is what you're looking for","username":"MALodder","ts":"2021-05-04T14:04:31.801Z"}
{"msg":"in Aries we use aries sdk and libursa?","username":"dcspinho","ts":"2021-05-04T14:08:51.772Z"}
{"msg":"","username":"dcspinho","ts":"2021-05-04T14:09:46.548Z","attachments":[{"type":"file","title":"Clipboard - 4 de Maio de 2021 15:09","title_link":"/file-upload/fzxgPbqgokfSCADMd/Clipboard%20-%204%20de%20Maio%20de%202021%2015:09","image_url":"/file-upload/fzxgPbqgokfSCADMd/Clipboard%20-%204%20de%20Maio%20de%202021%2015:09","image_type":"image/png","image_size":31304,"url":"/file-upload/fzxgPbqgokfSCADMd/Clipboard%20-%204%20de%20Maio%20de%202021%2015:09","remote":false,"fileId":"fzxgPbqgokfSCADMd","fileName":"Clipboard - 4 de Maio de 2021 15:09"}]}
{"msg":"like this","username":"dcspinho","ts":"2021-05-04T14:09:50.267Z"}
{"msg":"yes Aries is a consumer of ursa","username":"MALodder","ts":"2021-05-04T14:10:12.332Z"}
{"msg":"Thanks","username":"dcspinho","ts":"2021-05-04T14:10:51.704Z"}
{"msg":"thanks for the clarification!","username":"paul.bastian","ts":"2021-05-04T14:58:31.654Z"}
{"msg":"@MALodder any chance to do a new release of Ursa to crates to fix the issue above? https://chat.hyperledger.org/channel/ursa?msg=XceLxCi3aTZLJMqiZ","username":"rjones","ts":"2021-05-04T19:42:11.980Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=XceLxCi3aTZLJMqiZ","url":"https://chat.hyperledger.org/channel/ursa?msg=XceLxCi3aTZLJMqiZ","remote":true,"fileId":null,"fileName":null}]}
{"msg":"@rjones need an approval https://github.com/hyperledger/ursa/pull/179","username":"MALodder","ts":"2021-05-05T00:13:02.894Z"}
{"msg":"Done, you should be good to go.","username":"hartm","ts":"2021-05-05T00:30:27.812Z"}
{"msg":"Thank you, @MALodder . How do I publish to crates.io?","username":"rjones","ts":"2021-05-05T09:39:41.808Z"}
{"msg":"I tagged it: https://github.com/hyperledger/ursa/releases/tag/v0.3.6","username":"rjones","ts":"2021-05-05T12:32:27.454Z"}
{"msg":"published","username":"MALodder","ts":"2021-05-05T14:07:48.316Z"}
{"msg":"Has joined the channel.","username":"chris.matichuk","ts":"2021-05-07T02:27:30.425Z","type":"uj"}
{"msg":"Hi, I am new to this forum, but not new to Indy from (had our company become a Sovrin steward several years ago). I'm just not starting to dig into the details of BBS+ and have a couple questions that if someone could point me to someone that might be willing to help, that would be appreciated. \n\nFirst, BBS+ is noted as based on BLS12381G1_XMD:BLAKE2B_SSWU_RO_,  but line 243 of the following indicates that it is using SH-256 not BLAKE2B. Can someone confirm which hash is being used, given the comment in the source? And if the comments are incorrect and blake2b is being used, is it blake2b512 (which produces 64 bytes)?\nhttps://github.com/hyperledger/ursa/blob/main/libzmix/bbs/src/keys.rs\n\nSecond, the messages in the test are passed through a hash. Is this using sha256 or blake2b. And if blake2b, is it blake2b512 (which produces 64bytes)?\nhttps://github.com/hyperledger/ursa/blob/main/libzmix/bbs/tests/bbs.rs","username":"chris.matichuk","ts":"2021-05-07T02:41:47.856Z"}
{"msg":"I believe that first comment you linked to is incorrect (or outdated), the method is using hash_to_g1: https://github.com/hyperledger/ursa/blob/526fcaa39b41cfc8d3f2aa6acd0c85e430ba5c34/libzmix/bbs/src/lib.rs#L310","username":"andrew.whitehead","ts":"2021-05-07T04:27:42.586Z"}
{"msg":"It’s more complicated than just using blake2 though, it’s an instantiation of the hash-to-curve algorithm with blake2 as the hash parameter, producing elements of the G1 group","username":"andrew.whitehead","ts":"2021-05-07T04:29:41.486Z"}
{"msg":"It’s more complicated than just using blake2b though, it’s an instantiation of the hash-to-curve algorithm with blake2b as the hash parameter, producing elements of the G1 group","username":"andrew.whitehead","ts":"2021-05-07T04:29:41.486Z"}
{"msg":"Ok. And is it blake2b512 (which produces a 64byte hash)? Asking because I'm modifying a version of expand_message_xmd that uses sha256...which uses a 32byte hash.","username":"chris.matichuk","ts":"2021-05-07T04:30:28.565Z"}
{"msg":"I'm working on a C version of this.","username":"chris.matichuk","ts":"2021-05-07T04:31:02.124Z"}
{"msg":"Looks like it’s 64 bytes, expanding the FixedOutputDirty trait here https://docs.rs/blake2/0.9.1/blake2/struct.Blake2b.html","username":"andrew.whitehead","ts":"2021-05-07T04:33:31.233Z"}
{"msg":"The spec here also specifies 512 bits: https://mattrglobal.github.io/bbs-signatures-spec/","username":"andrew.whitehead","ts":"2021-05-07T04:36:25.120Z"}
{"msg":"Ahh...yes it does.","username":"chris.matichuk","ts":"2021-05-07T04:36:57.756Z"}
{"msg":"A separate observation. Based on ursa, it appears w in calculating h0...hn should be in serialized form (192 bytes) - the spec doesn't indicate that. Or am I miss-reading something there?","username":"chris.matichuk","ts":"2021-05-07T04:42:58.089Z"}
{"msg":"Looks like it is the 192 byte uncompressed form, and it doesn’t seem clear to me in the spec either because it’s just concatenating a point to some bytes ","username":"andrew.whitehead","ts":"2021-05-07T05:06:29.190Z"}
{"msg":"Spec should say point_to_octets_norm(w) or something.","username":"chris.matichuk","ts":"2021-05-07T05:08:39.083Z"}
{"msg":"And \"C1 = e(A, w * P2 ^ e)\" should be changed to \"C1 = e(A, w+P2*e)\" - at least that is what I ended up doing to get the verify to work.","username":"chris.matichuk","ts":"2021-05-07T05:29:50.336Z"}
{"msg":"And ```\"C1 = e(A, w * P2 ^ e)\"``` should be changed to ```\"C1 = e(A, w+P2*e)\"```- at least that is what I ended up doing to get the verify to work.","username":"chris.matichuk","ts":"2021-05-07T05:29:50.336Z"}
{"msg":"And ```C1 = e(A, w * P2 ^ e)``` should be changed to ```C1 = e(A, w+P2*e)```- at least that is what I ended up doing to get the verify to work.","username":"chris.matichuk","ts":"2021-05-07T05:29:50.336Z"}
{"msg":"Both forms are correct. One form is the multiplicative form and the other is the exponential form","username":"MALodder","ts":"2021-05-10T15:17:34.799Z"}
{"msg":"`libursa` tests should successfully build on ubuntu 20.04 now, please review: https://github.com/hyperledger/ursa/pull/180 (apologies for the delay, I had uni spring exams)","username":"nhwn","ts":"2021-05-14T04:08:59.655Z"}
{"msg":"is this a spurious CI failure? https://ci.appveyor.com/project/ryjones/ursa/builds/39159707","username":"nhwn","ts":"2021-05-14T04:24:12.208Z"}
{"msg":"@nhwn yes. I reran it and it passed","username":"rjones","ts":"2021-05-14T09:27:46.021Z"}
{"msg":"Has joined the channel.","username":"ksanjayk","ts":"2021-05-15T13:40:17.965Z","type":"uj"}
{"msg":"Has joined the channel.","username":"cmhacker","ts":"2021-05-16T13:30:44.850Z","type":"uj"}
{"msg":"In the CL verifier implementation the implementation currently only returns a boolean. As a user I might be interested which attribute (group) / sub proof fails or if it fails because of the primary proof or the non revocation proof. Is there a particular reason why there is not a more expressive/richer output or could we add this?","username":"domwoe","ts":"2021-05-18T17:33:31.720Z"}
{"msg":"@nhwn's latest commits solved my problems too :clap:  https://chat.hyperledger.org/channel/ursa?msg=R6RfMw3RmSqpFSPs4","username":"dgt1nsty","ts":"2021-05-19T07:09:43.883Z","attachments":[{"message_link":"https://chat.hyperledger.org/channel/ursa?msg=R6RfMw3RmSqpFSPs4","url":"https://chat.hyperledger.org/channel/ursa?msg=R6RfMw3RmSqpFSPs4","remote":true,"fileId":null,"fileName":null}]}
{"msg":"Depending on the application, it might violate a user's privacy if verification reveals which particular thing failed.  Revealing too much information about failures has been a notable leakage channel and has been used in cryptanalysis some, so in general the best practice is considered to give as little information about failures as possible.","username":"hartm","ts":"2021-05-19T20:34:39.913Z"}
{"msg":"Thanks for your comment. I was thinking that these proofs might not be totally independent and if there's a failure in one subproof I can't really verify the others, but if these proofs are independently verifiable I wouldn't agree that we should bet on \"privacy by non-implementation\". In addition the user decided to share this proof before, so I think in many cases the further interaction between verifier and prover would benefit if the verifier could pin point the reason for failure and communicate this to the prover.","username":"domwoe","ts":"2021-05-20T14:13:14.759Z"}
{"msg":"I'm not sure I agree with this.  In a good world, proofs should fail for technical reasons extremely rarely.  As a user, if, say, I am rejected by a credit algorithm for some purchase, I don't want the verifier to be able to figure out why.  \"Privacy by non-implementation\" could be just \"privacy by not giving out extra unnecessary information\" which is one of the main tenets of privacy.","username":"hartm","ts":"2021-05-20T14:16:42.834Z"}
{"msg":"Does this make sense?","username":"hartm","ts":"2021-05-20T14:16:45.595Z"}
{"msg":"I'm just not sure if it helps if one implementation of a verifier does not expose all information contained in a proof. We'd need other cryptographic techniques to achieve this like the user has to calculate the credit algorithm in a zkSnark, such that really only this one bit of information is transferred from prover to verifier.","username":"domwoe","ts":"2021-05-20T14:25:54.067Z"}
{"msg":"Do you mind explaining your use case a little bit?  Perhaps that will help me understand things better.","username":"hartm","ts":"2021-05-20T14:26:43.090Z"}
{"msg":"I was wondering in general, based on the following observation :) We are part of a pilot project to implement a digital hotel check-in for business travel. Therefore, you provide a few attributes from a personal ID and a few attributes of  a corporate ID. I just implemented the UI of a virtual test hotel where our pilot users can test the \"check-in process\" and play around with it. So I wanted to show them for example when they try to check-in with a revoked corporate Id that it fails exactly because of this. And I guess the verifier has this information but its just not exposed through the API.","username":"domwoe","ts":"2021-05-20T15:15:15.685Z"}
{"msg":"Ah, I see.","username":"hartm","ts":"2021-05-20T15:16:05.049Z"}
{"msg":"The verifier may or may not have that information, though, depending on how you have structured the proof.","username":"hartm","ts":"2021-05-20T15:17:12.839Z"}
{"msg":"If you want this extra information, is there a reason you are not just using multiple proofs (i.e. one for a corporate ID, one for a user ID) and perhaps a proof to tie them together?  Maybe it's less efficient to do it this way?","username":"hartm","ts":"2021-05-20T15:18:59.683Z"}
{"msg":"Non-revocation proof is always additive, isn't it? I should always know if only the proof of non revocation fails for a given cred Def. \n\nThis would be more effort for the user.","username":"domwoe","ts":"2021-05-20T15:24:13.850Z"}
{"msg":"Has joined the channel.","username":"jkrstic","ts":"2021-05-22T18:12:39.853Z","type":"uj"}
{"msg":"The way its coded in Ursa, you are not given the reason for the failure. The reason could be an invalid signature, invalid data, revoked credential, bad range proof. If any proof fails, they all do","username":"MALodder","ts":"2021-05-23T20:25:39.281Z"}
{"msg":"Has joined the channel.","username":"jacobsaur","ts":"2021-05-26T13:14:16.414Z","type":"uj"}
{"msg":"Hi, I'm was wondering if there are any ursa functions for zero knowledge set completeness? I know there are functions for zero knowledge set membership, ie a proof that element x exists in set {x, y, z}. I'm looking to prove that a presented set is complete, eg if given set {x, y, z} it would return true, but if given {x, y} it would return false because there is an element missing. The context is for credit history, where an individual discloses a set of credit credentials and they want to prove they they haven't left anything out of their record (eg the credential that they defaulted on their loan). Let me know if there's any code that already does this, or if anyone knows of a paper that talks about it. Thanks.","username":"jacobsaur","ts":"2021-05-26T13:40:52.925Z"}
{"msg":"Can you define \"set completeness\" more rigorously?  Do you mean \"a set must contain elements of type A, B, and C\"?  Or \"a set must include all elements added to some blockchain with property XYZ\"?  It's hard to answer your question without knowing exactly what you mean by set completeness.","username":"hartm","ts":"2021-05-26T16:40:27.882Z"}
{"msg":"So for my particular use case every element is a verifiable credential, but more generally we could say each element is a string. So just like with cryptographic accumulators you can prove that some string x is in set {x, y, z} without revealing the set before hand, I'd like to prove that a set of strings {x, y, z} isn't missing any elements that should be in it without revealing the set beforehand.","username":"jacobsaur","ts":"2021-05-26T18:45:32.285Z"}
{"msg":"So for my particular use case every element is a verifiable credential, but more generally we could say each element is a string. So just like with cryptographic accumulators you can prove that some string x is in set {x, y, z} without revealing the set before hand, I'd like to prove the opposite where is I present {x, y} that I'm not leaving out z from the set (without revealing the set beforehand).","username":"jacobsaur","ts":"2021-05-26T18:45:32.285Z"}
{"msg":"So for my particular use case every element is a verifiable credential, but more generally we could say each element is a string. So just like with cryptographic accumulators you can prove that some string x is in set {x, y, z} without revealing the set before hand, I'd like to prove the opposite where if I present {x, y} that I'm not leaving out z from the set (without revealing the set beforehand).","username":"jacobsaur","ts":"2021-05-26T18:45:32.285Z"}
{"msg":"I guess my question then is the following:  how do I know that z has been added to the set (or accumulator) in the first place?  How do I know that z is \"supposed to be\" in the set?","username":"hartm","ts":"2021-05-26T21:47:29.418Z"}
{"msg":"How do I know what the set is \"supposed to look like?\"","username":"hartm","ts":"2021-05-26T21:48:09.720Z"}
{"msg":"If you define a set in a rigorous way, you may be able to do this.  But you need to define a set as some kind of NP-language.","username":"hartm","ts":"2021-05-26T21:48:53.977Z"}
{"msg":"So maybe it's best if I can describe how I imagine the system to work and then we can figure out how to turn that into formal NP-language. I'll first start with a non-zero knowledge solution. We have an issuer I1 who issues a credential C1 to holder H1. We want this credential to be part of the holder's credit history (ie part of the set) so we also broadcast to a blockchain some data that summarizes what happened (H1->C1). Then let's say a second issuer issues a second credential to the same holder so we broadcast (H1->C2). When H1 wants to have their credit history verified by verifier V1 they can present them credentials in a set {C1, C2}, the verifier can then look at the blockchain and see that H1 should have credentials C1 and C2 in their set and therefore the presented set is complete. The problem with this is that all H1 credentials are public so some snooper verifier V2 could also see that H1 has {C1, C2} without H1 giving V2 permission. Storing the hashes of the credentials would be a bit better, because V1 could be presented {C1, C2} and verify that it matches {hash(C1), hash(C2)} for H1 on the blockchain. That's an improvement, but snooper V2 could still see that something is going on with H1 every time a new hash is added, ie H1 has a new hash added every week and then misses a week V2, could guess that H1 missed a repayment. So I was hoping for a solution something like how credential revocation works with cryptographic accumulators - ie an issuer can revoke a credential and broadcast something to a blockchain in a way that no snooper can tell which credential was revoked or which holder it referred to - it's only when a holder tries to construct a non-revoked proof that the verifier can see that a specific presented credential has been revoked. Is there a way to do that with complete sets, where there's something on the blockchain that issuers can update that would reveal nothing to snoopers, but when a holder goes to present a set, a verifier could set whether the set is complete?\nThanks for all the clarifying questions, I hope I've described it well enough.","username":"jacobsaur","ts":"2021-05-27T10:58:18.367Z"}
{"msg":"So maybe it's best if I can describe how I imagine the system to work and then we can figure out how to turn that into formal NP-language. I'll first start with a non-zero knowledge solution. We have an issuer I1 who issues a credential C1 to holder H1. We want this credential to be part of the holder's credit history (ie part of the set) so we also broadcast to a blockchain some data that summarizes what happened (H1->C1). Then let's say a second issuer issues a second credential to the same holder so we broadcast (H1->C2). When H1 wants to have their credit history verified by verifier V1 they can present them credentials in a set {C1, C2}, the verifier can then look at the blockchain and see that H1 should have credentials C1 and C2 in their set and therefore the presented set is complete. The problem with this is that all H1 credentials are public so some snooper verifier V2 could also see that H1 has {C1, C2} without H1 giving V2 permission. Storing the hashes of the credentials would be a bit better, because V1 could be presented {C1, C2} and verify that it matches {hash(C1), hash(C2)} for H1 on the blockchain. That's an improvement, but snooper V2 could still see that something is going on with H1 every time a new hash is added, ie H1 has a new hash added every week and then misses a week V2, could guess that H1 missed a repayment. So I was hoping for a solution something like how credential revocation works with cryptographic accumulators - ie an issuer can revoke a credential and broadcast something to a blockchain in a way that no snooper can tell which credential was revoked or which holder it referred to - it's only when a holder tries to construct a non-revoked proof that the verifier can see that a specific presented credential has been revoked. Is there a way to do that with complete sets, where there's something on the blockchain that issuers can update that would reveal nothing to snoopers, but when a holder goes to present a set, a verifier could tell whether the set is complete?\nThanks for all the clarifying questions, I hope I've described it well enough.","username":"jacobsaur","ts":"2021-05-27T10:58:18.367Z"}
{"msg":"So maybe it's best if I can describe how I imagine the system to work and then we can figure out how to turn that into formal NP-language. I'll first start with a non-zero knowledge solution. We have an issuer I1 who issues a credential C1 to holder H1. We want this credential to be part of the holder's credit history (ie part of the set) so we also broadcast to a blockchain some data that summarizes what happened (H1->C1). Then let's say a second issuer issues a second credential to the same holder so we broadcast (H1->C2). When H1 wants to have their credit history verified by verifier V1 they can present them credentials in a set {C1, C2}, the verifier can then look at the blockchain and see that H1 should have credentials C1 and C2 in their set and therefore the presented set is complete. The problem with this is that all H1 credentials are public so some snooper verifier V2 could also see that H1 has {C1, C2} without H1 giving V2 permission. Storing the hashes of the credentials would be a bit better, because V1 could be presented {C1, C2} and verify that it matches {hash(C1), hash(C2)} for H1 on the blockchain. That's an improvement, but snooper V2 could still see that something is going on with H1 every time a new hash is added, ie H1 has a new hash added every week and then misses a week V2, could guess that H1 missed a repayment. So I was hoping for a solution something like how credential revocation works with cryptographic accumulators (https://hyperledger-indy.readthedocs.io/projects/hipe/en/latest/text/0011-cred-revocation/README.html) - ie an issuer can revoke a credential and broadcast something to a blockchain in a way that no snooper can tell which credential was revoked or which holder it referred to - it's only when a holder tries to construct a non-revoked proof that the verifier can see that a specific presented credential has been revoked. Is there a way to do that with complete sets, where there's something on the blockchain that issuers can update that would reveal nothing to snoopers, but when a holder goes to present a set, a verifier could tell whether the set is complete?\nThanks for all the clarifying questions, I hope I've described it well enough.","username":"jacobsaur","ts":"2021-05-27T10:58:18.367Z"}
{"msg":"Thanks, this was a good description!","username":"hartm","ts":"2021-05-27T14:04:34.495Z"}
{"msg":"If I understand correctly, at an abstract level, you have a blockchain with transactions being posted to it that have some ID associated with them.","username":"hartm","ts":"2021-05-27T14:05:03.534Z"}
{"msg":"You want to be able to prove that a set of credentials contains everything associated with a particular ID (or maybe even something more fine-grained, where  you can filter on more things).","username":"hartm","ts":"2021-05-27T14:06:11.352Z"}
{"msg":"This is possible with powerful cryptographic techniques, but I'm not sure it's going to be efficient at all.  I don't think you can pull this off with what's in Ursa right now, although maybe you can if you have a very weak security model or tolerate a lot of inefficiency (i.e. the verifier has to scan the whole chain).","username":"hartm","ts":"2021-05-27T14:11:12.664Z"}
{"msg":"What kind of efficiency do you need for this?","username":"hartm","ts":"2021-05-27T14:11:20.766Z"}
{"msg":"And thanks for the interesting discussion?","username":"hartm","ts":"2021-05-27T14:11:25.574Z"}
{"msg":"And thanks for the interesting discussion!","username":"hartm","ts":"2021-05-27T14:11:25.574Z"}
{"msg":"Yes that description sounds right. It doesn't need to be terribly efficient since people are used to credit checks taking awhile, but it should at least be scalable - ie verification times shouldn't get exponentially longer as more transactions get added.","username":"jacobsaur","ts":"2021-05-27T14:17:02.910Z"}
{"msg":"What if verification time scales linearly with the number of transactions on the blockchain (i.e. bad, but far from exponential)?","username":"hartm","ts":"2021-05-27T14:30:56.734Z"}
{"msg":"What you are looking for seems similar in flavor to ABE:","username":"hartm","ts":"2021-05-27T14:32:53.811Z"}
{"msg":"https://eprint.iacr.org/2006/309.pdf","username":"hartm","ts":"2021-05-27T14:32:57.540Z"}
{"msg":"But an ABE-style solution would probably require verification to examine the whole blockchain.","username":"hartm","ts":"2021-05-27T14:33:24.946Z"}
{"msg":"It sounds like what you really want is an \"attribute-based accumulator\" and to my knowledge, no constant-sized one exists.","username":"hartm","ts":"2021-05-27T14:36:23.674Z"}
{"msg":"Interesting paper. Ya even scaling linearly would probably become problematic over time, especially as the number of users grows (ie a single users share of the whole blockchain will get much smaller over time). An attribute-based accumulator sounds interesting...","username":"jacobsaur","ts":"2021-05-27T14:44:30.020Z"}
{"msg":"I'm not sure there are even research solutions for this problem yet.","username":"hartm","ts":"2021-05-27T15:34:38.984Z"}
{"msg":"Gotcha, that's what I was afraid of. Thanks for thinking it through with me though!","username":"jacobsaur","ts":"2021-05-27T15:59:56.059Z"}
{"msg":"Yep, of course!","username":"hartm","ts":"2021-05-27T16:00:18.522Z"}
{"msg":"If you're willing to have weaker privacy properties, you may be able to do things with searchable encryption.","username":"hartm","ts":"2021-05-27T16:00:34.069Z"}
{"msg":"But it all depends on what privacy guarantees you need.","username":"hartm","ts":"2021-05-27T16:00:44.339Z"}
{"msg":"I may also pitch \"attribute-based accumulator\" as a research problem.","username":"hartm","ts":"2021-05-27T16:01:11.742Z"}
{"msg":"Are there searchable encryption functions in ursa currently?","username":"jacobsaur","ts":"2021-05-27T16:01:28.918Z"}
{"msg":"No.  Searchable encryption is not currently used in any blockchain applications of which I'm aware.","username":"hartm","ts":"2021-05-27T20:31:55.732Z"}
{"msg":"Hi everyone! *MATTR* proposed a way to implement onetime usable credentials using BBS+ signatures(*Domain proofs*). Is this implemented anywhere?","username":"da3v21","ts":"2021-06-01T05:23:16.565Z"}
{"msg":"You should ask @MALodder .","username":"hartm","ts":"2021-06-01T06:13:12.432Z"}
{"msg":"here's the domain proof POC https://github.com/mikelodder7/commit_twin","username":"MALodder","ts":"2021-06-01T13:47:53.197Z"}
{"msg":"I implemented it in go and rust","username":"MALodder","ts":"2021-06-01T13:52:40.676Z"}
{"msg":"Thanks a lot,will look into it","username":"da3v21","ts":"2021-06-01T14:08:02.840Z"}
{"msg":"Is this implemented in Aries go or Acapy?","username":"da3v21","ts":"2021-06-02T07:08:51.634Z"}
{"msg":"Has joined the channel.","username":"pritam_01","ts":"2021-06-03T05:03:38.023Z","type":"uj"}
{"msg":"Hi, Where can I find the math and code of Multi credential proofs using CL signatures.","username":"da3v21","ts":"2021-06-07T14:45:10.544Z"}
{"msg":"With the global forum, will there still be an Ursa call this week?","username":"brentzundel","ts":"2021-06-07T15:59:22.052Z"}
{"msg":"Has joined the channel.","username":"Maheshbalan","ts":"2021-06-08T17:39:08.152Z","type":"uj"}
{"msg":"Hello, from the talk in HGF, I was asked to post here to request links to the work being done on Threshold Signatures. Greatly appreciated if you you could post here.","username":"Maheshbalan","ts":"2021-06-08T17:39:08.443Z"}
{"msg":"Has joined the channel.","username":"danyam","ts":"2021-06-08T17:43:49.259Z","type":"uj"}
{"msg":"@brentzundel I suggest we cancel the Ursa call tomorrow due to HLGF","username":"MALodder","ts":"2021-06-08T17:44:08.225Z"}
{"msg":"https://github.com/hyperledger/ursa-docs/tree/main/specs","username":"MALodder","ts":"2021-06-08T17:47:53.938Z"}
{"msg":"No","username":"MALodder","ts":"2021-06-08T17:48:26.293Z"}
{"msg":"I agree.","username":"hartm","ts":"2021-06-08T17:48:51.402Z"}
{"msg":"I'll send out a mail.","username":"hartm","ts":"2021-06-08T17:48:55.084Z"}
{"msg":"@MALodder would you mind posting your github link here?  Thanks!","username":"hartm","ts":"2021-06-08T17:49:41.780Z"}
{"msg":"I’ve just posted the building blocks for threshold. Haven’t posted the code yet","username":"MALodder","ts":"2021-06-08T17:50:35.390Z"}
{"msg":"https://GitHub.com/mikelodder7/paillier-ra","username":"MALodder","ts":"2021-06-08T17:51:01.984Z"}
{"msg":"https://GitHub.com/mikelodder7/paillier-rs","username":"MALodder","ts":"2021-06-08T17:51:01.984Z"}
{"msg":"Has joined the channel.","username":"Jasonyou","ts":"2021-06-08T18:56:59.014Z","type":"uj"}
{"msg":"@here Reminder that we are cancelling tomorrow's meeting due to the HGF.  If you are available, there is a very interesting session you can attend at the same time:  https://sched.co/jgNW","username":"hartm","ts":"2021-06-08T23:13:38.751Z"}
{"msg":"@MALodder  I went through this, at which step do we prove two credentials have the same link secret?","username":"da3v21","ts":"2021-06-09T02:12:06.804Z"}
{"msg":"each subproof has an m_tilde for the link secret https://github.com/hyperledger/ursa/blob/main/libursa/src/cl/prover.rs#L851 , I'm not able to find where they prove that m_tildes have the same link secret","username":"da3v21","ts":"2021-06-09T02:17:41.163Z"}
{"msg":"because there is a schnorr proof that is the same for all the subproofs. because its the same you can assume the equality","username":"MALodder","ts":"2021-06-09T16:50:14.841Z"}
{"msg":"Got it!, How do we implement this? https://github.com/WebOfTrustInfo/rwot9-prague/blob/master/topics-and-advance-readings/zkp-safety.md#technique-2-prevent-link-secret-reuse.","username":"da3v21","ts":"2021-06-10T01:11:34.740Z"}
{"msg":"this step to be precise, given g1xg2yg3z and h1xh2r, it can be proved that x in both of them is same without revealing x, y, z or r","username":"da3v21","ts":"2021-06-10T06:43:34.889Z"}
{"msg":"@MALodder  this step to be precise, given g1xg2yg3z and h1xh2r, it can be proved that x in both of them is same without revealing x, y, z or r","username":"da3v21","ts":"2021-06-10T06:43:34.889Z"}
{"msg":"you can use this technique https://github.com/mikelodder7/commit_twin","username":"MALodder","ts":"2021-06-14T13:43:40.623Z"}
{"msg":"Has joined the channel.","username":"davidv1992","ts":"2021-06-18T20:05:54.472Z","type":"uj"}
{"msg":"I have been diving into the ursa CL crypto lately, and while I understand most of the functionality around the CL public and private keys, I have some trouble figuring out what CredentialKeyCorrectnessProof is a proof of. Where can I find the mathematical background of what that proof shows?","username":"davidv1992","ts":"2021-06-18T20:14:43.546Z"}
{"msg":"Has joined the channel.","username":"SIDDHARTHJAIN","ts":"2021-06-18T21:16:05.361Z","type":"uj"}
{"msg":"Hey Everyone! I wanted to implement ZKPs for a project using ursa, so wanted to know if there is some project which could be used as a reference. Thanks","username":"SIDDHARTHJAIN","ts":"2021-06-18T21:16:05.790Z"}
{"msg":"Just wanted to know, if there is something that could help implement the ZKPs in my project. Please help if you can, highly appreciated. Thanks","username":"SIDDHARTHJAIN","ts":"2021-06-18T21:42:17.083Z"}
{"msg":"Have you looked at the bulletproofs implementation?","username":"hartm","ts":"2021-06-18T22:36:50.323Z"}
{"msg":"Hey everyone I wanted to do benchmark test on libursa but benchmarking on cvk_revok.rs file give some scoping issues that I couldn't get around. Do anyone know to solve it or if anyone has any suggestion it would be welcomed. Thanks in advance.","username":"dgt1nsty","ts":"2021-06-19T06:12:07.645Z"}
{"msg":"Hey everyone I wanted to do benchmark test on libursa but benchmarking on cvk_revok.rs file give some scoping issues that I couldn't get around.  I put the issue I'm getting below. Do anyone know to solve it or if anyone has any suggestion I would be welcomed. Thanks in advance.","username":"dgt1nsty","ts":"2021-06-19T06:12:07.645Z"}
{"msg":"Hey everyone I wanted to do benchmark test on libursa but benchmarking on cvk_revok.rs file give some scoping issues that I couldn't get around.  I put the issue I'm getting below. Do anyone know to solve it or if anyone has any suggestion I would be welcome. Thanks in advance.","username":"dgt1nsty","ts":"2021-06-19T06:12:07.645Z"}
{"msg":"Hey everyone I wanted to do benchmark test on libursa but benchmarking on cvk_revok.rs file give some scoping issues that I couldn't get around.  I put the issue I'm getting in below. Do anyone know to solve it or if anyone has any suggestion I would be welcome. Thanks in advance.","username":"dgt1nsty","ts":"2021-06-19T06:12:07.645Z"}
{"msg":"Hey everyone I wanted to do benchmark test on libursa but benchmarking on cvk_revok.rs file give some scoping issues that I couldn't get around.  I put the issue I'm getting in below. If anyone know to solve it or has any suggestion I would be welcome. Thanks in advance.","username":"dgt1nsty","ts":"2021-06-19T06:12:07.645Z"}
{"msg":"Hey everyone I wanted to do benchmark test on libursa but benchmarking on cks_revok.rs file give some scoping issues that I couldn't get around.  I put the issue I'm getting in below. If anyone know to solve it or has any suggestion I would be welcome. Thanks in advance.","username":"dgt1nsty","ts":"2021-06-19T06:12:07.645Z"}
{"msg":"","username":"dgt1nsty","ts":"2021-06-19T06:12:57.376Z","attachments":[{"type":"file","title":"benchmark_prob.png","title_link":"/file-upload/XmfsrqojMe9sywXvo/benchmark_prob.png","image_url":"/file-upload/XmfsrqojMe9sywXvo/benchmark_prob.png","image_type":"image/png","image_size":89044,"url":"/file-upload/XmfsrqojMe9sywXvo/benchmark_prob.png","remote":false,"fileId":"XmfsrqojMe9sywXvo","fileName":"benchmark_prob.png"}]}
{"msg":"Is it the ursa implementation, i.e., ursa/libzmix/bulletproofs_amcl   that you are referring to","username":"SIDDHARTHJAIN","ts":"2021-06-19T06:59:46.216Z"}
{"msg":"Is it the ursa implementation, i.e., ursa/libzmix/bulletproofs_amcl   that you are referring to?\nAnd does this implementation makes sures that the prover does not generate a fake proof for a certain attribute? Thanks","username":"SIDDHARTHJAIN","ts":"2021-06-19T06:59:46.216Z"}
{"msg":"Here is the issue I'm getting","username":"dgt1nsty","ts":"2021-06-19T07:02:55.980Z"}
{"msg":"","username":"dgt1nsty","ts":"2021-06-19T07:03:16.829Z","attachments":[{"type":"file","title":"benchmark_prob.png","title_link":"/file-upload/vKyu3WqDM2LKLjhyX/benchmark_prob.png","image_url":"/file-upload/vKyu3WqDM2LKLjhyX/benchmark_prob.png","image_type":"image/png","image_size":89044,"url":"/file-upload/vKyu3WqDM2LKLjhyX/benchmark_prob.png","remote":false,"fileId":"vKyu3WqDM2LKLjhyX","fileName":"benchmark_prob.png"}]}
{"msg":"The prover not being able to generate a false proof is called \"prover soundness\" and is a property of all secure zero knowledge proofs.","username":"hartm","ts":"2021-06-19T19:04:27.890Z"}
{"msg":"Yes, that is the implementation.  We've listed everything implemented on the main github page, https://github.com/hyperledger/ursa.","username":"hartm","ts":"2021-06-19T19:05:40.754Z"}
{"msg":"Thanks a lot!","username":"SIDDHARTHJAIN","ts":"2021-06-20T06:27:06.365Z"}
{"msg":"Hey! I had one more doubt. Does this code makes sure that the one who is generating the proof(the prover) will generate a proof for his real age and not a fake one, given that the prover has a verifiable claim for his age.\nAs while I was going through the tests of bulletproofs, I didn't find anything related to verifiable claims, it looked like a proof for 3 randomly generated numbers. Thanks. Highly appreciate the help.","username":"SIDDHARTHJAIN","ts":"2021-06-20T11:57:55.897Z"}
{"msg":"Hey! I had one more doubt. Does this code makes sure that the one who is generating the proof(the prover) will generate a proof for his real age and not a fake one, given that the prover has a verifiable claim for his age.\nAs while I was going through the tests of bulletproofs, I didn't find anything related to verifiable claims, it looked like a proof for 3 randomly generated numbers. Thanks. Highly appreciate the help.","username":"SIDDHARTHJAIN","ts":"2021-06-20T15:02:20.628Z"}
{"msg":"Just think about what you want to prove.  You want to prove a statement of the form \"I have a verifiable claim that my age is > XXXX\" not just a statement about numbers.","username":"hartm","ts":"2021-06-20T17:02:20.597Z"}
{"msg":"Does this library allows us to prove these kind of statements. As in the tests section of bulletproofs, I could only see proofs for numbers. I'm sorry, my questions might be dumb.","username":"SIDDHARTHJAIN","ts":"2021-06-20T20:23:32.287Z"}
{"msg":"Like I was going through the Sovrin Foundation's DID docs, which said that they implemented this verifiable claims (using ZKP) from ursa library.","username":"SIDDHARTHJAIN","ts":"2021-06-20T20:27:17.779Z"}
{"msg":"So, yes I just wanted to know if there is some implementation for \"Bulletproofs(for ranges) for verifiable claims\", similar to that statement that you said. Thanks","username":"SIDDHARTHJAIN","ts":"2021-06-21T15:35:53.409Z"}
{"msg":"I'd recommend looking through the Indy/Sovrin docs on how they use ZKPs.","username":"hartm","ts":"2021-06-21T23:57:06.910Z"}
{"msg":"We could certainly improve our documentation on use cases.","username":"hartm","ts":"2021-06-21T23:57:29.981Z"}
{"msg":"Has joined the channel.","username":"tarou.y6666","ts":"2021-06-23T05:30:58.007Z","type":"uj"}
{"msg":"@hartm I noticed Ursa doesn't have anyone on security@hyperledger - who should I add? Also, I have a security report for Ursa, who should I loop in?","username":"rjones","ts":"2021-06-30T15:13:52.452Z"}
{"msg":"Maybe add Mike Lodder and I?  If the report is implementation-based in nature, it's probably best to go to Mike.  If it's mathematical, you can send it to me.  It also depends on which part of the codebase the report is on.","username":"hartm","ts":"2021-06-30T15:20:07.961Z"}
{"msg":"Sorry for the complicated answer.","username":"hartm","ts":"2021-06-30T15:20:11.995Z"}
{"msg":"Some of the code the Aries folks may want to be looped in as well.","username":"hartm","ts":"2021-06-30T15:20:43.639Z"}
{"msg":"```Specifically, the CredentialKeyCorrenctnessProof as generated by\n_new_credential_key_correctness_proof (in the libursa/src/cl/issuer.rs\nfile) incorrectly uses randomizers generated in the range [3,p*q-1],\nresulting in a compromise of the zero-knowledge properties of this\nproof.\n\nAs a result, based on such a proof, an attacker can efficiently derive\nthe following information for the bases given in the public key:\n - Approximately the top 256 bits of the discrete log of Z with respect to S.\n - Approximately the top 256 bits of the discrete log of R[i] with respect to S.```","username":"rjones","ts":"2021-06-30T15:27:12.642Z"}
{"msg":"Has joined the channel.","username":"gaberasturi","ts":"2021-07-02T11:31:29.576Z","type":"uj"}
{"msg":"Anyone have any clue why my tests aren't running for ursa core?","username":"cam-parra","ts":"2021-07-07T19:38:58.597Z"}
{"msg":"https://github.com/mac-arrap/ursa/tree/ursa_core","username":"cam-parra","ts":"2021-07-07T19:39:00.470Z"}
{"msg":"pretty sure I've structured it out correctly","username":"cam-parra","ts":"2021-07-07T19:39:12.998Z"}
{"msg":"I think you need to check them in on the `main` branch","username":"ianco","ts":"2021-07-07T21:31:22.147Z"}
{"msg":"Are they included in the tests folder or reachable by lib.rs","username":"MALodder","ts":"2021-07-08T16:04:51.456Z"}
{"msg":"Howdy - RSA submissions are due this week - if anyone wants to submit a talk, Hyperledger can help: https://www.rsaconference.com/","username":"rjones","ts":"2021-07-19T23:04:15.929Z"}
{"msg":"Has joined the channel.","username":"DirkT","ts":"2021-07-26T08:54:34.184Z","type":"uj"}
{"msg":"Recently returned from annual contributor search: https://photos.app.goo.gl/DJrvWzowcuUH7BXj7","username":"Dan","ts":"2021-08-04T14:05:01.900Z"}
{"msg":"Looks hungry!  What a shame they didn't eat better that day ;)","username":"hartm","ts":"2021-08-04T17:01:13.104Z"}
{"msg":"I live near Bear Creek. People are amazed - AMAZED! - that we've had juvenile bears running around this year","username":"rjones","ts":"2021-08-04T18:35:52.230Z"}
{"msg":"Clearly they've been disappointed by misleadingly named creeks before. Finally #truthinadvertising","username":"Dan","ts":"2021-08-04T20:55:17.736Z"}
{"msg":"","username":"rjones","ts":"2021-08-04T21:11:08.530Z","attachments":[{"type":"file","title":"IMG_0223.jpeg","title_link":"/file-upload/EgQMsPRjtELnaBTop/IMG_0223.jpeg","image_url":"/file-upload/EgQMsPRjtELnaBTop/IMG_0223.jpeg","image_type":"image/jpeg","image_size":1284844,"url":"/file-upload/EgQMsPRjtELnaBTop/IMG_0223.jpeg","remote":false,"fileId":"EgQMsPRjtELnaBTop","fileName":"IMG_0223.jpeg"}]}
{"msg":"Has joined the channel.","username":"brian.richter","ts":"2021-08-09T21:54:52.078Z","type":"uj"}
{"msg":"hi all, are the meetings still being recorded? this list hasnt been updated since 2020 https://wiki.hyperledger.org/display/ursa/Meeting+Recordings","username":"brian.richter","ts":"2021-08-09T21:54:52.264Z"}
{"msg":"I have some of them, although zoom crashing has lost a bunch of them.  Is there anyone in particular you want me to look for?","username":"hartm","ts":"2021-08-10T03:47:47.694Z"}
{"msg":"2021-08-04","username":"brian.richter","ts":"2021-08-10T08:51:00.403Z"}
{"msg":"OK, try this link:  https://wiki.hyperledger.org/display/ursa/2021-08-04","username":"hartm","ts":"2021-08-10T16:32:07.140Z"}
{"msg":"I had a couple of wiki issues but hopefully that should work.","username":"hartm","ts":"2021-08-10T16:32:16.355Z"}
{"msg":"excellent, thank you very very much!","username":"brian.richter","ts":"2021-08-10T17:57:31.684Z"}
{"msg":"No worries!  I need to be better about taking care of these things.","username":"hartm","ts":"2021-08-10T18:47:55.360Z"}
{"msg":"Has left the channel.","username":"jaromil","ts":"2021-08-14T09:20:08.314Z","type":"ul"}
{"msg":"hello everyone, can someone tell me the difference between the GVT credential and the XYZ credential found as a document comment in the libursa integration test file?","username":"dgt1nsty","ts":"2021-08-16T07:45:53.638Z"}
{"msg":"Can someone suggest an iOS library compatible with ed25519 signature algorithm that is provided by ursa?","username":"eadventurous","ts":"2021-08-19T12:25:17.335Z"}
{"msg":"https://github.com/trinsic-id/okapi/tree/main/objc\n\nThis library works exposes `did:key` functionality, but it supports full Ed25519 signatures, even X25519 if you want to do key exchange. I'm the author, happy to help you with any usage.","username":"tomislav","ts":"2021-08-20T21:46:55.254Z"}
{"msg":"https://github.com/trinsic-id/okapi/tree/main/objc\n\nThis library exposes `did:key` functionality, but it supports full Ed25519 signatures, even X25519 if you want to do key exchange. I'm the author, happy to help you with any usage.","username":"tomislav","ts":"2021-08-20T21:46:55.254Z"}
{"msg":"This library is not provided by Ursa, however.","username":"tomislav","ts":"2021-08-20T21:48:22.840Z"}
{"msg":"This library is not provided by Ursa. It uses dalek crypto - https://github.com/dalek-cryptography/ed25519-dalek.\nThe Okapi library uses Ursa for the BLS key types.","username":"tomislav","ts":"2021-08-20T21:48:22.840Z"}
{"msg":"I think you can also use the built-in CryptoKit framework?","username":"andrew.whitehead","ts":"2021-08-20T21:53:15.176Z"}
{"msg":"Actually, great point, and better option. They added support for it in 2020.\nhttps://developer.apple.com/documentation/cryptokit/curve25519","username":"tomislav","ts":"2021-08-20T22:12:07.106Z"}
{"msg":"I've been asked to create a tag and release a new version of ursa that includes recent changes. @MALodder or @Dan can folks give me guidance on how to do this? Is there any reason I shouldn't?","username":"brentzundel","ts":"2021-08-27T15:36:27.556Z"}
{"msg":"The `bbs` crate no longer compiles, due to yanked version of the `crypto-mac` crate\n\n```\nerror: failed to select a version for the requirement `crypto-mac = \"^0.7\"`\ncandidate versions found which didn't match: 0.11.1, 0.11.0, 0.10.1, ...\nlocation searched: crates.io index\nrequired by package `blake2 v0.8.1`\n```","username":"tomislav","ts":"2021-08-29T12:54:39.118Z"}
{"msg":"none go ahead","username":"MALodder","ts":"2021-08-31T15:28:46.346Z"}
{"msg":"you use `cargo publish` to do this","username":"MALodder","ts":"2021-08-31T15:28:54.606Z"}
{"msg":"I've been pulled into a meeting where I need to pay attention and participate, so I can't join the Ursa call today even though that's where I'd rather be.","username":"brentzundel","ts":"2021-09-01T14:01:15.091Z"}
{"msg":"We missed you, but understand!","username":"hartm","ts":"2021-09-01T23:26:34.663Z"}
{"msg":"Looks like there is a PR needed to fix builds: https://github.com/hyperledger/ursa/pull/190","username":"rjones","ts":"2021-09-03T14:34:26.346Z"}
{"msg":"thank you @brentzundel","username":"rjones","ts":"2021-09-03T14:40:55.901Z"}
{"msg":"@MALodder could you add me as an owner here, please? https://crates.io/crates/ursa","username":"rjones","ts":"2021-09-03T15:49:51.304Z"}
{"msg":"sure","username":"MALodder","ts":"2021-09-03T17:30:55.088Z"}
{"msg":"what's your user on crates.io","username":"MALodder","ts":"2021-09-03T17:32:56.198Z"}
{"msg":"ryjones","username":"rjones","ts":"2021-09-03T17:58:58.079Z"}
{"msg":"","username":"rjones","ts":"2021-09-03T18:00:07.443Z","attachments":[{"type":"file","title":"Screen Shot 2021-09-03 at 11.00.00 AM.png","title_link":"/file-upload/oNnchH9rLWevmqaL7/Screen%20Shot%202021-09-03%20at%2011.00.00%20AM.png","image_url":"/file-upload/oNnchH9rLWevmqaL7/Screen%20Shot%202021-09-03%20at%2011.00.00%20AM.png","image_type":"image/png","image_size":119597,"url":"/file-upload/oNnchH9rLWevmqaL7/Screen%20Shot%202021-09-03%20at%2011.00.00%20AM.png","remote":false,"fileId":"oNnchH9rLWevmqaL7","fileName":"Screen Shot 2021-09-03 at 11.00.00 AM.png"}]}
{"msg":"@MALodder if you could merge https://github.com/hyperledger/ursa/pull/190 as well, that would be great","username":"rjones","ts":"2021-09-03T18:02:14.954Z"}
{"msg":"invite sent","username":"MALodder","ts":"2021-09-03T18:02:50.430Z"}
{"msg":"thank you, accepted","username":"rjones","ts":"2021-09-03T18:03:23.906Z"}
{"msg":"merged","username":"MALodder","ts":"2021-09-03T18:03:36.502Z"}
{"msg":"thanks. I assume I need to bump the version to the next 0.3 number and release?","username":"rjones","ts":"2021-09-03T18:05:14.479Z"}
{"msg":"Differential privacy:  https://medium.com/georgian-impact-blog/a-brief-introduction-to-differential-privacy-eacf8722283b","username":"hartm","ts":"2021-09-15T14:12:18.732Z"}
{"msg":"yes please","username":"brentzundel","ts":"2021-09-15T14:46:04.483Z"}
{"msg":"@brentzundel I tagged you over on github. please don't _just do it_, I want to get this action working and merged so we don't have to beg one of the people that knows how to do it, to do it","username":"rjones","ts":"2021-09-15T19:08:54.975Z"}
{"msg":"I totally agree that setting up an automated process is way better. I don't have good guidance for you, but have reached out to @MALodder in hopes that he can chime in.","username":"brentzundel","ts":"2021-09-15T19:25:51.571Z"}
{"msg":"Has joined the channel.","username":"regiseloi","ts":"2021-09-15T21:39:29.588Z","type":"uj"}
{"msg":"OK. If you can help me get past the `ffi` error I can keep pushig","username":"rjones","ts":"2021-09-15T22:56:17.645Z"}
{"msg":"@brentzundel @hartm if I could get a +1 here: https://github.com/hyperledger/ursa/pull/191","username":"rjones","ts":"2021-09-16T02:39:35.840Z"}
{"msg":"Has joined the channel.","username":"igorkrupczynski","ts":"2021-09-16T10:16:54.782Z","type":"uj"}
{"msg":"OK. https://github.com/hyperledger/ursa/pull/191 has been updated by @Dan with the inclusion of release notes - please smash like and subscribe so I can get this published this week","username":"rjones","ts":"2021-09-16T16:52:41.208Z"}
{"msg":"https://github.com/hyperledger/ursa/pull/192","username":"hartm","ts":"2021-09-29T14:05:00.438Z"}
{"msg":"@here We are cancelling the upcoming call due to the member summit.  Talk to you all at the next meeting (if not before)!","username":"hartm","ts":"2021-10-27T05:48:01.883Z"}
{"msg":"Can anybody help me get the portable build working? https://github.com/hyperledger/ursa/issues/193","username":"brian.richter","ts":"2021-10-29T17:32:22.722Z"}
{"msg":"Has left the channel.","username":"kukgini","ts":"2021-11-04T08:38:27.925Z","type":"ul"}
{"msg":"Brian I can tomorrow. Still recovering from surgery and haven’t been able to do much. Finally ramping back up","username":"MALodder","ts":"2021-11-08T21:14:03.410Z"}
{"msg":"Hi, I have problems with the portable build for libzmix/libursa also. I am able to fix sha2 upgrade from 0.8->0.9 and amcl dependencies. But for the k256 migration related errors in /ursa/libursa/src/signatures/secp256k1.rs, the code changes are too important for my understanding. Any expert look at the issue will be great. Thank you!","username":"lmtriet","ts":"2021-11-09T10:55:49.234Z"}
{"msg":"Hi, I have problems with the portable build for libzmix/libursa also. I am able to fix sha2 upgrade from 0.8->0.9 and amcl dependencies. But for the k256 migration related errors in /ursa/libursa/src/signatures/secp256k1.rs, the code changes are too important for my understanding. Any expert look at the issue would be great. Thank you!","username":"lmtriet","ts":"2021-11-09T10:55:49.234Z"}
{"msg":"Has joined the channel.","username":"ChangmingLiu","ts":"2021-11-11T02:09:58.434Z","type":"uj"}
{"msg":"Hi guys, appreciate the works there. Sorry to interrupt but It looks like current ursa implementation only supports zero knowledge range proof, is there any plan or implementation to support set membership proof? Any pointer is appreciated, thanks!","username":"ChangmingLiu","ts":"2021-11-11T02:09:59.023Z"}
{"msg":"You may be interested in this:  https://github.com/hyperledger/ursa/pull/192.  It's not formally added yet, but it allows general ZK proofs.  Also, for set membership proofs, are you sure that you just don't want to use an accumulator?","username":"hartm","ts":"2021-11-11T04:35:28.157Z"}
{"msg":"Thanks for your interest!","username":"hartm","ts":"2021-11-11T04:35:34.279Z"}
{"msg":"Of course! Thank you for the pointer, I'll have a look.  ```\n\n``` yes, accumulators like merkle tree or RSA accumulator can be very helpful (anything that does the trick).  And yes, I saw related ZKP code in libzmix about these, but forgive me for failing to see an apparent way to apply them to the protocol in libursa e.g., how to ZK set membership proof about a value certified from the issuer.  I guess perhaps you're refering to section 7.2 in https://wiki.hyperledger.org/download/attachments/6426712/Anoncreds2.1.pdf ?  I'm wondering why this is not integrated into libursa(since when the verifier is sending predicate on a proof request, only <=, >= are supported.)   The protocol in anoncred v2.0 looks very promising, has this been implemented somewhere? otherwise, I'd love to help with integrating this.","username":"ChangmingLiu","ts":"2021-11-11T18:44:38.843Z"}
{"msg":"Has joined the channel.","username":"uvdsl","ts":"2021-11-22T18:05:05.084Z","type":"uj"}
{"msg":"Has joined the channel.","username":"aso","ts":"2021-11-23T16:02:33.553Z","type":"uj"}
{"msg":"Hi folks, I have seen different BBS implementations here and there but none seem to implement the complete suite describe in\nhttps://github.com/hyperledger/ursa-docs/tree/main/specs/anoncreds2\nIs that a correct statement? If not, I'd be grateful if anyone could point me the right way. Thx in advance!","username":"aso","ts":"2021-11-23T16:03:00.546Z"}
{"msg":"Answered on another channel -- basic answer -- BBS+ does not have the same features as AnonCreds.\n\nJust noticed that you were mentioning AnonCreds 2 -- that also does not exist.","username":"swcurran","ts":"2021-11-23T18:32:38.144Z"}
{"msg":"Answered on another channel -- basic answer -- BBS+ does not have the same features as AnonCreds.\n\nJust noticed that you were mentioning AnonCreds 2 -- that also does not exist. There is just AnonCreds (aka V1).","username":"swcurran","ts":"2021-11-23T18:32:38.144Z"}
{"msg":"BBS+ does not have the features in AnonCreds v1.","username":"swcurran","ts":"2021-11-23T18:33:14.943Z"}
{"msg":"thx @swcurran","username":"aso","ts":"2021-11-23T20:06:08.330Z"}
{"msg":"and when you say BBS+ I guess you are referring to \nhttps://identity.foundation/bbs-signature/\nright?","username":"aso","ts":"2021-11-23T20:07:15.349Z"}
{"msg":"because this\nhttps://eprint.iacr.org/2016/663\nand references show how to prove knowledge of a BBS+ sig that also includes link secrets","username":"aso","ts":"2021-11-23T20:09:22.532Z"}
{"msg":"and this\nhttps://github.com/IBM/idemix/\nimplements it","username":"aso","ts":"2021-11-23T20:11:28.974Z"}
{"msg":"Not to say link secrets can't be done using BBS+ Signatures sometime in the future.  Rather, to say that it can't be done today, and AFAIK, there is no one working on making that happen.","username":"swcurran","ts":"2021-11-23T20:57:11.741Z"}
{"msg":"gotcha - thx again @swcurran !","username":"aso","ts":"2021-11-24T07:15:08.906Z"}
{"msg":"Interesting. So all BBS+ credentials currently include a DID as the subject which the holder has to disclose to prove the credential was issued to them? Surely this compromises the fundamental reason these signature schemes were initially developed for - to support unlinkable presentations of credentials across multiple interactions?","username":"wip-abramson","ts":"2021-11-24T09:39:08.410Z"}
{"msg":"indeed.. what you still achieve is selective disclosure, so one does not have to disclose all the certified attributes. This may or may not be enough - given the threat model of the scenario","username":"aso","ts":"2021-11-24T11:09:10.704Z"}
{"msg":"surely over time, a set of colluding verifiers could do a nifty bit of profiling and reconstruct all attributes of a holder","username":"aso","ts":"2021-11-24T11:10:40.123Z"}
{"msg":"@wip -- I agree with you. There is a spec for BBS+ Bound Signatures that was written, but it hasn't been implemented and so is theoretical at this point.  \n\nW3C VCs are very complex to deploy, so I think anyone using BBS+ is focused on just trying to get it to work -- to get JSON-LD behaving in a reasonable way.  We've found it very frustrating.","username":"swcurran","ts":"2021-11-24T14:59:42.701Z"}
{"msg":"the steps of \n\ni) having the issuer sign some commitment to a client secret and of \n\nii) having the holder prove knowledge of that secret\n\nare not particularly complex, so I'm guessing the complexity lies elsewhere. @swcurran do you know what they might be?","username":"aso","ts":"2021-11-24T15:30:02.043Z"}
{"msg":"Tobias Looker has presented a plan for doing the binding, but it has not been implemented.  Basically, the holder provide a public key to the issuer, and that gets used.   It seemed reasonable, but it has never AFAIK been implemented.  Not sure why.","username":"swcurran","ts":"2021-11-24T15:32:35.749Z"}
{"msg":"We'd like to see it go a lot further -- to include the features of AnonCreds (e.g.  ZKP revocation at least, and ideally predicates) -- so even the BoundProof approach is not the best.","username":"swcurran","ts":"2021-11-24T15:33:52.897Z"}
{"msg":"right, that does sound reasonable","username":"aso","ts":"2021-11-24T15:49:44.061Z"}
{"msg":"I thought actually that DIDcomm would have issues with the fact that at that point, the DID of the subject would no longer have to be included in the presentation","username":"aso","ts":"2021-11-24T15:50:32.492Z"}
{"msg":"Has joined the channel.","username":"tgalal","ts":"2021-12-06T09:16:53.660Z","type":"uj"}
{"msg":"Hey all. I was trying to find out what cryptographic construction is used in `CL` for forming the `aggregated_proof.c_hash` and `aggregated_proof.c_list`? And do I get it right that the purpose of aggregated proof is to ensure that the proofs being verified were in fact generated together?","username":"tgalal","ts":"2021-12-06T09:46:54.275Z"}
{"msg":"An aggregated proof is usually a way of creating one proof that captures several other different proofs.  This can save on verification time and particularly proof space.  I'm not sure entirely what you mean by \"generated together,\" sorry.","username":"hartm","ts":"2021-12-06T17:47:28.064Z"}
{"msg":"Has joined the channel.","username":"SeanBohan","ts":"2021-12-17T20:06:30.761Z","type":"uj"}
{"msg":"Has joined the channel.","username":"a-p-petrosyan","ts":"2021-12-22T08:12:34.012Z","type":"uj"}
{"msg":"Hi! I'm An Iroha 2 core developer and we wanted to bump the `ursa` version from `0.3.7` to `0.5.0`. Is there anything that we should watch out for?","username":"a-p-petrosyan","ts":"2021-12-22T08:12:34.510Z"}
{"msg":"@here No meeting today due to the holidays!  Thanks!","username":"hartm","ts":"2021-12-22T14:36:27.865Z"}
{"msg":"I don't think so?  Others may have opinions, but unfortunately I think most people are out for the holidays.","username":"hartm","ts":"2021-12-22T14:36:51.805Z"}
{"msg":"Deleted for wrong comment.","username":"hartm","ts":"2021-12-22T14:36:51.805Z"}
{"msg":"I don't think so? Others may have opinions, but unfortunately I think most people are out for the holidays.","username":"hartm","ts":"2021-12-22T14:37:36.003Z"}
{"msg":"Hi, I'm trying to understand how inequality proofs in anoncreds 1 work. So far what I've gathered is that the prover splits delta into sum of four squares, creates a Pedersen commitment over each of those as well as the delta, and begins a ZKP for the commited values and the associated commitment secret. What I do not get is the purpose of:\n\n$$\nQ \\leftarrow (S ^{\\widetilde{\\alpha}}) \\prod_{i=1}^{4} T_i^{\\widetilde{u_i}})\n$$\n\nWould appreciate hints on why this computation is necessary in the proof.","username":"tgalal","ts":"2022-01-08T20:49:50.047Z"}
{"msg":"Hi, I'm trying to understand how inequality proofs in anoncreds 1 work. So far what I've gathered is that the prover splits delta into sum of four squares, creates a Pedersen commitment over each of those as well as the delta, and begins a ZKP for the commited values and the associated commitment secret. What I do not get is the purpose of:\n\n\\\nQ \\leftarrow (S ^{\\widetilde{\\alpha}}) \\prod_{i=1}^{4} T_i^{\\widetilde{u_i}})\n\\\n\nWould appreciate hints on why this computation is necessary in the proof.","username":"tgalal","ts":"2022-01-08T20:49:50.047Z"}
{"msg":"Hi, I'm trying to understand how inequality proofs in anoncreds 1 work. So far what I've gathered is that the prover splits delta into sum of four squares, creates a Pedersen commitment over each of those as well as the delta, and begins a ZKP for the commited values and the associated commitment secret. What I do not get is the purpose of:\n\n\\[\nQ \\leftarrow (S ^{\\widetilde{\\alpha}}) \\prod_{i=1}^{4} T_i^{\\widetilde{u_i}})\n\\]\n\nWould appreciate hints on why this computation is necessary in the proof.","username":"tgalal","ts":"2022-01-08T20:49:50.047Z"}
{"msg":"Hi, I'm trying to understand how inequality proofs in anoncreds 1 work. So far what I've gathered is that the prover splits delta into sum of four squares, creates a Pedersen commitment over each of those as well as the delta, and begins a ZKP for the commited values and the associated commitment secret. What I do not get is the purpose of:\n\n\\[\n$$\nQ \\leftarrow (S ^{\\widetilde{\\alpha}}) \\prod_{i=1}^{4} T_i^{\\widetilde{u_i}})\n$$\n\\]\n\nWould appreciate hints on why this computation is necessary in the proof.","username":"tgalal","ts":"2022-01-08T20:49:50.047Z"}
{"msg":"Hi, I'm trying to understand how inequality proofs in anoncreds 1 work. So far what I've gathered is that the prover splits delta into sum of four squares, creates a Pedersen commitment over each of those as well as the delta, and begins a ZKP for the commited values and the associated commitment secret. What I do not get is the purpose of:\n\n\\[Q \\leftarrow (S ^{\\widetilde{\\alpha}}) \\prod_{i=1}^{4} T_i^{\\widetilde{u_i}})\\]\n\nWould appreciate hints on why this computation is necessary in the proof.","username":"tgalal","ts":"2022-01-08T20:49:50.047Z"}
{"msg":"Hi, I'm trying to understand how inequality proofs in anoncreds 1 work. So far what I've gathered is that the prover splits delta into sum of four squares, creates a Pedersen commitment over each of those as well as the delta, and begins a ZKP for the commited values and the associated commitment secret. What I do not get is the purpose of:\n\n\\[Q \\leftarrow (S ^{\\widetilde{\\alpha}}) \\prod_{i=1}^{4} T_i^{\\widetilde{u_i}})\\]\n\nWould really appreciate any hints on why this computation is necessary in the proof if someone knows. Thanks!","username":"tgalal","ts":"2022-01-08T20:49:50.047Z"}
{"msg":"Hi, I'm trying to understand how inequality proofs in anoncreds 1 work. So far what I've gathered is that for a predicate the prover splits delta into the sum of four squares, creates a Pedersen commitment for each of those four components as well as the delta, and begins a ZKP for the commited values and the associated commitment secrets. What I do not get is the purpose of:\n\n\\[Q \\leftarrow (S ^{\\widetilde{\\alpha}}) \\prod_{i=1}^{4} T_i^{\\widetilde{u_i}})\\]\n\nWould really appreciate any hints on why this computation is necessary in the proof if someone knows. Thanks!","username":"tgalal","ts":"2022-01-08T20:49:50.047Z"}
{"msg":"Hi, I'm trying to understand how inequality proofs in anoncreds 1 work. So far what I've gathered is that for a predicate the prover splits delta into the sum of four squares, creates a Pedersen commitment for each of those four components as well as the delta, and begins a ZKP for each of the commited values and associated commitment secret. What I do not get is the purpose of:\n\n\\[Q \\leftarrow (S ^{\\widetilde{\\alpha}}) \\prod_{i=1}^{4} T_i^{\\widetilde{u_i}})\\]\n\nWould really appreciate any hints on why this computation is necessary in the proof if someone knows. Thanks!","username":"tgalal","ts":"2022-01-08T20:49:50.047Z"}
{"msg":"What's the reference for this?","username":"andrew.whitehead","ts":"2022-01-10T20:21:59.312Z"}
{"msg":"Has joined the channel.","username":"WadeBarnes","ts":"2022-01-13T14:51:44.058Z","type":"uj"}
{"msg":"Has joined the channel.","username":"RobinKlemens","ts":"2022-01-13T15:26:19.570Z","type":"uj"}
{"msg":"Hey folks, I'm Robin from the folks at Hyperledger Indy. Can anybody tell me the process of getting a new version of `hyperledger/python-ursa` pushed to `pypi`?\nThe version of `python-ursa` is at version `0.1.1` and `hyperledger/ursa` is at version `0.3.7`","username":"RobinKlemens","ts":"2022-01-13T15:27:48.808Z"}
{"msg":"https://hyperledger-indy.readthedocs.io/projects/hipe/en/latest/text/0109-anoncreds-protocol/README.html#validity-proof\n\nright above Hashing","username":"tgalal","ts":"2022-01-14T10:11:45.695Z"}
{"msg":"and it's implemented by ursa","username":"tgalal","ts":"2022-01-14T10:12:16.037Z"}
{"msg":"Has joined the channel.","username":"sbohanlf","ts":"2022-01-19T14:56:53.271Z","type":"uj"}
{"msg":"Has joined the channel.","username":"VenessaK","ts":"2022-01-24T14:14:10.447Z","type":"uj"}
{"msg":"Has joined the channel.","username":"mzago","ts":"2022-01-31T14:26:57.982Z","type":"uj"}
{"msg":"Hello, following also my post in #indy I am still looking at specific technical information regarding the key derivation mechanisms for both the wallet and the various agents communication channels. Is there any resource available beside the blog posts?","username":"mzago","ts":"2022-01-31T14:28:25.774Z"}
{"msg":"You may also want to look at Aries.  Ursa is a cryptographic library, so it contains all the cryptographic protocols themselves.  Aries has the wallet software and makes the protocol calls.  Which layer interests you?  Do you have any specific requirements for key derivation?","username":"hartm","ts":"2022-01-31T18:34:25.204Z"}
{"msg":"Hello, yes, I am also looking at Aries as, eventually, I'll have to figure out the keys derivation process for DID to DID communication. \nSo far, however, I am looking at the process of deriving a key from the seed, which I understand is based on PBKDF2. I also understand that the DID is cryptographically associated with a private key derived from the seed itself, so I guess there should be a specific and deterministic way to obtain the pk and the corresponding DID via a key derivation process. Would you please provide some insight or documentation on this?\n\nFurthermore, I'm having doubts about selecting the prime numbers p and q. In the documentation, it is stated that:\nRandom 1536-bit primes $p',q'$ such that  $p \\leftarrow 2p'+1$ and $q \\leftarrow 2q'+1$ are primes too. Then compute $n \\leftarrow pq$ \nAren't these restrictions too strong? In other words, where can I find information about why such primes must belong to that prices space?","username":"mzago","ts":"2022-02-01T08:43:16.872Z"}
{"msg":"Hello, yes, I am also looking at Aries as, eventually, I'll have to figure out the keys derivation process for DID to DID communication. \nSo far, however, I am looking at the process of deriving a key from the seed, which I understand is based on PBKDF2. I also understand that the DID is cryptographically associated with a private key derived from the seed itself, so I guess there should be a specific and deterministic way to obtain the pk and the corresponding DID via a key derivation process. Would you please provide some insight or documentation on this?\n\nFurthermore, I'm having doubts about selecting the prime numbers p and q. In the documentation, it is stated that:\nRandom 1536-bit primes $p',q'$ such that  $p \\leftarrow 2p'+1$ and $q \\leftarrow 2q'+1$ are primes too. Then compute $n \\leftarrow pq$ \nAren't these restrictions too strong? In other words, where can I find information about why such primes must belong to that primes space?","username":"mzago","ts":"2022-02-01T08:43:16.872Z"}
{"msg":"1.  Yes, when you create a secret key you can also create a public key.  If you look at the API, look for functions called KeyGen.","username":"hartm","ts":"2022-02-01T18:39:58.509Z"}
{"msg":"2.  Those restrictions on the primes are unfortunately necessary.  You need prime-order subgroups and a \"main\" group that is a strong composite order group.  If you're willing to get technical, going through the proof in (https://dominoweb.draco.res.ibm.com/reports/rz3730_revised.pdf) might be a good way to see why this is the case.","username":"hartm","ts":"2022-02-01T18:41:52.297Z"}
{"msg":"Has joined the channel.","username":"jacobgorman613","ts":"2022-02-01T22:19:13.211Z","type":"uj"}
{"msg":"does anyone have any recommendations for generating a header for the FFI::CL module? I tried using libcgen which seems to be what most people use but libcgen struggles with the module structure and repeated names. Thanks!","username":"jacobgorman613","ts":"2022-02-01T22:19:13.572Z"}
{"msg":"Thank you. I will have a look at those.","username":"mzago","ts":"2022-02-02T16:04:27.437Z"}
{"msg":"Awesome!  Glad to help.","username":"hartm","ts":"2022-02-03T01:44:38.672Z"}
{"msg":"this discussion has moved to https://discord.gg/hyperledger","username":"rjones","ts":"2022-02-11T20:20:58.132Z"}
